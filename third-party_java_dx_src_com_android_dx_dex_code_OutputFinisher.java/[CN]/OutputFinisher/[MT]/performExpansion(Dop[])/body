{
  int size=insns.size();
  ArrayList<DalvInsn> result=new ArrayList<DalvInsn>(size * 2);
  ArrayList<CodeAddress> closelyBoundAddresses=new ArrayList<CodeAddress>();
  for (int i=0; i < size; i++) {
    DalvInsn insn=insns.get(i);
    Dop originalOpcode=insn.getOpcode();
    Dop currentOpcode=opcodes[i];
    DalvInsn prefix;
    DalvInsn suffix;
    if (currentOpcode != null) {
      prefix=null;
      suffix=null;
    }
 else {
      currentOpcode=findExpandedOpcodeForInsn(insn);
      BitSet compatRegs=currentOpcode.getFormat().compatibleRegs(insn);
      prefix=insn.expandedPrefix(compatRegs);
      suffix=insn.expandedSuffix(compatRegs);
      insn=insn.expandedVersion(compatRegs);
    }
    if (insn instanceof CodeAddress) {
      if (((CodeAddress)insn).getBindsClosely()) {
        closelyBoundAddresses.add((CodeAddress)insn);
        continue;
      }
    }
    if (prefix != null) {
      result.add(prefix);
    }
    if (!(insn instanceof ZeroSizeInsn) && closelyBoundAddresses.size() > 0) {
      for (      CodeAddress codeAddress : closelyBoundAddresses) {
        result.add(codeAddress);
      }
      closelyBoundAddresses.clear();
    }
    if (currentOpcode != originalOpcode) {
      insn=insn.withOpcode(currentOpcode);
    }
    result.add(insn);
    if (suffix != null) {
      result.add(suffix);
    }
  }
  return result;
}
