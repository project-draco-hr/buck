{
  this.graph=targetGraph.getActionGraph();
  this.buildRuleTypes=buildRuleTypes;
  this.matchingTargets=matchingTargets;
  if (!referencedInputs.isEmpty()) {
    this.referencedInputs=referencedInputs;
    BuildFileTree tree=new InMemoryBuildFileTree(matchingTargets.or(FluentIterable.from(graph.getNodes()).transform(HasBuildTarget.TO_TARGET).toSet()));
    basePathOfTargets=Sets.newHashSet();
    dependentTargets=Sets.newHashSet();
    for (    Path input : referencedInputs) {
      Optional<Path> path=tree.getBasePathOfAncestorTarget(input);
      if (path.isPresent()) {
        basePathOfTargets.add(path.get());
      }
    }
  }
 else {
    basePathOfTargets=ImmutableSet.of();
    dependentTargets=ImmutableSet.of();
  }
}
