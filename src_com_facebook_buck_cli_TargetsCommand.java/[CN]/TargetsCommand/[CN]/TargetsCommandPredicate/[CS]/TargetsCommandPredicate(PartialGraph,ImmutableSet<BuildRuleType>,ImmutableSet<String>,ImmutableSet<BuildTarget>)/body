{
  this.graph=partialGraph.getDependencyGraph();
  this.buildRuleTypes=Preconditions.checkNotNull(buildRuleTypes);
  this.matchingBuildRules=Preconditions.checkNotNull(matchingBuildRules);
  Preconditions.checkNotNull(referencedFiles);
  if (!referencedFiles.isEmpty()) {
    this.referencedInputs=InputRule.inputPathsAsInputRules(ImmutableSortedSet.copyOf(referencedFiles));
    BuildFileTree tree=new BuildFileTree(partialGraph.getTargets());
    basePathOfTargets=Sets.newHashSet();
    dependentTargets=Sets.newHashSet();
    for (    InputRule input : referencedInputs) {
      basePathOfTargets.add(tree.getBasePathOfAncestorTarget(input.getBuildTarget().getBasePath()));
    }
  }
 else {
    basePathOfTargets=ImmutableSet.of();
    dependentTargets=ImmutableSet.of();
  }
}
