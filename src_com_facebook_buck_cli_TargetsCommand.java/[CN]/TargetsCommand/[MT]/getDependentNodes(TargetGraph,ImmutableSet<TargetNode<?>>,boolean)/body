{
  ImmutableMultimap.Builder<TargetNode<?>,TargetNode<?>> extraEdgesBuilder=ImmutableMultimap.builder();
  if (detectTestChanges) {
    for (    TargetNode<?> node : graph.getNodes()) {
      if (node.getConstructorArg() instanceof HasTests) {
        ImmutableSortedSet<BuildTarget> tests=((HasTests)node.getConstructorArg()).getTests();
        for (        BuildTarget testTarget : tests) {
          Optional<TargetNode<?>> testNode=graph.getOptional(testTarget);
          if (!testNode.isPresent()) {
            throw new HumanReadableException("'%s' (test of '%s') is not in the target graph.",testTarget,node);
          }
          extraEdgesBuilder.put(testNode.get(),node);
        }
      }
      if (node.getConstructorArg() instanceof HasSourceUnderTest) {
        ImmutableSortedSet<BuildTarget> sourceUnderTest=((HasSourceUnderTest)node.getConstructorArg()).getSourceUnderTest();
        for (        BuildTarget sourceTarget : sourceUnderTest) {
          TargetNode<?> sourceNode=graph.get(sourceTarget);
          extraEdgesBuilder.put(node,sourceNode);
        }
      }
    }
  }
  final ImmutableMultimap<TargetNode<?>,TargetNode<?>> extraEdges=extraEdgesBuilder.build();
  final ImmutableSet.Builder<TargetNode<?>> builder=ImmutableSet.builder();
  AbstractBreadthFirstTraversal<TargetNode<?>> traversal=new AbstractBreadthFirstTraversal<TargetNode<?>>(nodes){
    @Override public ImmutableSet<TargetNode<?>> visit(    TargetNode<?> targetNode){
      builder.add(targetNode);
      return FluentIterable.from(graph.getIncomingNodesFor(targetNode)).append(extraEdges.get(targetNode)).toSet();
    }
  }
;
  traversal.start();
  return builder.build();
}
