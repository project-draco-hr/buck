{
  if (options.isResolveAlias()) {
    return doResolveAlias(params,options);
  }
  if (options.isShowRuleKey() && options.isShowTargetHash()) {
    throw new HumanReadableException("Cannot show rule key and target hash at the same time.");
  }
  if (options.isShowOutput() || options.isShowRuleKey() || options.isShowTargetHash()) {
    return doShowRules(params,options);
  }
  ImmutableSet<String> types=options.getTypes();
  ImmutableSet.Builder<BuildRuleType> buildRuleTypesBuilder=ImmutableSet.builder();
  for (  String name : types) {
    try {
      buildRuleTypesBuilder.add(params.getRepository().getBuildRuleType(name));
    }
 catch (    IllegalArgumentException e) {
      params.getConsole().printBuildFailure("Invalid build rule type: " + name);
      return 1;
    }
  }
  ParserConfig parserConfig=new ParserConfig(params.getBuckConfig());
  ImmutableSet<BuildTarget> matchingBuildTargets;
  TargetGraph graph;
  try {
    if (options.getArguments().isEmpty() || options.isDetectTestChanges()) {
      matchingBuildTargets=ImmutableSet.of();
      graph=params.getParser().buildTargetGraphForTargetNodeSpecs(ImmutableList.of(TargetNodePredicateSpec.of(Predicates.<TargetNode<?>>alwaysTrue(),BuildFileSpec.fromRecursivePath(Paths.get(""),params.getRepository().getFilesystem().getIgnorePaths()))),parserConfig,params.getBuckEventBus(),params.getConsole(),params.getEnvironment(),options.getEnableProfiling()).getSecond();
    }
 else {
      Pair<ImmutableSet<BuildTarget>,TargetGraph> results=params.getParser().buildTargetGraphForTargetNodeSpecs(options.parseArgumentsAsTargetNodeSpecs(params.getBuckConfig(),params.getRepository().getFilesystem().getIgnorePaths(),options.getArguments()),parserConfig,params.getBuckEventBus(),params.getConsole(),params.getEnvironment(),options.getEnableProfiling());
      matchingBuildTargets=results.getFirst();
      graph=results.getSecond();
    }
  }
 catch (  BuildTargetException|BuildFileParseException e) {
    params.getConsole().printBuildFailureWithoutStacktrace(e);
    return 1;
  }
  PathArguments.ReferencedFiles referencedFiles=options.getReferencedFiles(params.getRepository().getFilesystem().getRootPath());
  SortedMap<String,TargetNode<?>> matchingNodes;
  if (!referencedFiles.absolutePathsOutsideProjectRootOrNonExistingPaths.isEmpty() && referencedFiles.relativePathsUnderProjectRoot.isEmpty()) {
    matchingNodes=ImmutableSortedMap.of();
  }
 else {
    ImmutableSet<BuildRuleType> buildRuleTypes=buildRuleTypesBuilder.build();
    matchingNodes=getMatchingNodes(graph,referencedFiles.relativePathsUnderProjectRoot.isEmpty() ? Optional.<ImmutableSet<Path>>absent() : Optional.of(referencedFiles.relativePathsUnderProjectRoot),matchingBuildTargets.isEmpty() ? Optional.<ImmutableSet<BuildTarget>>absent() : Optional.of(matchingBuildTargets),buildRuleTypes.isEmpty() ? Optional.<ImmutableSet<BuildRuleType>>absent() : Optional.of(buildRuleTypes),options.isDetectTestChanges(),parserConfig.getBuildFileName());
  }
  if (options.getPrintJson()) {
    try {
      printJsonForTargets(params,matchingNodes,new ParserConfig(params.getBuckConfig()));
    }
 catch (    BuildFileParseException e) {
      params.getConsole().printBuildFailureWithoutStacktrace(e);
      return 1;
    }
  }
 else   if (options.isPrint0()) {
    printNullDelimitedTargets(matchingNodes.keySet(),params.getConsole().getStdOut());
  }
 else {
    for (    String target : matchingNodes.keySet()) {
      params.getConsole().getStdOut().println(target);
    }
  }
  return 0;
}
