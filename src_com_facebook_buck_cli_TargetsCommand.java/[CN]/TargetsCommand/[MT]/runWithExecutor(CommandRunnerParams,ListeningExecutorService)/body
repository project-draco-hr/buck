{
  Optional<ImmutableSet<BuildRuleType>> buildRuleTypes=getBuildRuleTypesFromParams(params);
  if (!buildRuleTypes.isPresent()) {
    return 1;
  }
  if (isShowCellPath() || isShowOutput() || isShowFullOutput()|| isShowRuleKey()|| isShowTargetHash()) {
    ImmutableMap<BuildTarget,ShowOptions> showRulesResult;
    TargetGraphAndBuildTargets targetGraphAndBuildTargetsForShowRules=buildTargetGraphAndTargetsForShowRules(params,executor,buildRuleTypes);
    showRulesResult=computeShowRules(params,executor,TargetGraphAndTargetNodes.fromTargetGraphAndBuildTargets(targetGraphAndBuildTargetsForShowRules));
    if (shouldUseJsonFormat()) {
      Iterable<TargetNode<?>> matchingNodes=targetGraphAndBuildTargetsForShowRules.getTargetGraph().getAll(targetGraphAndBuildTargetsForShowRules.getBuildTargets());
      printJsonForTargets(params,executor,matchingNodes,showRulesResult,getOutputAttributes());
    }
 else {
      printShowRules(showRulesResult,params);
    }
    return 0;
  }
  return printResults(params,executor,getMatchingNodes(params,buildTargetGraphAndTargets(params,executor),buildRuleTypes));
}
