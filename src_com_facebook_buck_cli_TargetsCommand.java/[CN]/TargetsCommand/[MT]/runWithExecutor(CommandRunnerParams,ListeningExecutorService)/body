{
  ImmutableMap<BuildTarget,ShowOptions> showRulesResult=ImmutableMap.of();
  if (isShowOutput() || isShowRuleKey() || isShowTargetHash()) {
    try {
      if (getArguments().isEmpty()) {
        throw new HumanReadableException("Must specify at least one build target.");
      }
      TargetGraphAndBuildTargets targetGraphAndBuildTargetsForShowRules=params.getParser().buildTargetGraphForTargetNodeSpecs(params.getBuckEventBus(),params.getCell(),getEnableProfiling(),executor,parseArgumentsAsTargetNodeSpecs(params.getBuckConfig(),getArguments()),false);
      showRulesResult=computeShowRules(params,executor,TargetGraphAndTargetNodes.fromTargetGraphAndBuildTargets(targetGraphAndBuildTargetsForShowRules));
    }
 catch (    NoSuchBuildTargetException e) {
      throw new HumanReadableException("Error getting rules: %s",e.getHumanReadableErrorMessage());
    }
catch (    BuildTargetException|BuildFileParseException|CycleException e) {
      params.getBuckEventBus().post(ConsoleEvent.severe(MoreExceptions.getHumanReadableOrLocalizedMessage(e)));
      return 1;
    }
    if (!getPrintJson()) {
      printShowRules(showRulesResult,params);
      return 0;
    }
  }
  Optional<ImmutableSet<BuildRuleType>> buildRuleTypes=getBuildRuleTypesFromParams(params);
  if (!buildRuleTypes.isPresent()) {
    return 1;
  }
  Optional<TargetGraphAndBuildTargets> graphAndTargets=buildTargetGraphAndTargets(params,executor);
  if (!graphAndTargets.isPresent()) {
    return 1;
  }
  SortedMap<String,TargetNode<?>> matchingNodes=getMatchingNodes(params,graphAndTargets.get(),buildRuleTypes);
  return printResults(params,executor,matchingNodes,showRulesResult);
}
