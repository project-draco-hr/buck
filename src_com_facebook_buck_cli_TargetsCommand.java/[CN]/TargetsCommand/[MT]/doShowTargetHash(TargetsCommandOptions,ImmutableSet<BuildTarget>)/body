{
  LOG.debug("Getting target hash for %s",matchingBuildTargets);
  ProjectGraphParser projectGraphParser=ProjectGraphParsers.createProjectGraphParser(getParser(),new ParserConfig(options.getBuckConfig()),getBuckEventBus(),console,environment,options.getEnableProfiling());
  TargetGraph projectGraph=projectGraphParser.buildTargetGraphForTargetNodeSpecs(Iterables.transform(matchingBuildTargets,BuildTargetSpec.TO_BUILD_TARGET_SPEC));
  LOG.debug("Built project graph with nodes: %s",projectGraph.getNodes());
  Iterable<BuildTarget> matchingBuildTargetsWithTests;
  final TargetGraph projectGraphWithTests;
  if (options.isDetectTestChanges()) {
    ImmutableSet<BuildTarget> explicitTestTargets;
    explicitTestTargets=TargetGraphAndTargets.getExplicitTestTargets(matchingBuildTargets,projectGraph);
    LOG.debug("Got explicit test targets: %s",explicitTestTargets);
    matchingBuildTargetsWithTests=Sets.union(matchingBuildTargets,explicitTestTargets);
    projectGraphWithTests=projectGraphParser.buildTargetGraphForTargetNodeSpecs(Iterables.transform(matchingBuildTargetsWithTests,BuildTargetSpec.TO_BUILD_TARGET_SPEC));
  }
 else {
    matchingBuildTargetsWithTests=matchingBuildTargets;
    projectGraphWithTests=projectGraph;
  }
  ImmutableMap<BuildTarget,HashCode> buildTargetHashes=TargetGraphHashing.hashTargetGraph(getProjectFilesystem(),projectGraphWithTests,getParser().getBuildTargetHashCodeCache(),matchingBuildTargetsWithTests);
  for (  BuildTarget target : matchingBuildTargets) {
    TargetNode<?> targetNode=Preconditions.checkNotNull(projectGraphWithTests.get(target),"Could not find target %s in project graph",target);
    TargetGraph subGraph=projectGraphWithTests.getSubgraph(ImmutableSet.of(targetNode));
    Hasher hasher=Hashing.sha1().newHasher();
    ImmutableSortedSet.Builder<TargetNode<?>> nodesWithDepsAndTests=ImmutableSortedSet.naturalOrder();
    nodesWithDepsAndTests.addAll(subGraph.getNodes());
    if (options.isDetectTestChanges()) {
      nodesWithDepsAndTests.addAll(FluentIterable.from(subGraph.getNodes()).transformAndConcat(new Function<TargetNode<?>,Iterable<TargetNode<?>>>(){
        @Override public Iterable<TargetNode<?>> apply(        TargetNode<?> node){
          return projectGraphWithTests.getAll(TargetNodes.getTestTargetsForNode(node));
        }
      }
));
    }
    LOG.debug("Hashing target %s with dependent nodes %s",target,nodesWithDepsAndTests.build());
    for (    TargetNode<?> nodeToHash : nodesWithDepsAndTests.build()) {
      HashCode dependencyHash=buildTargetHashes.get(nodeToHash.getBuildTarget());
      Preconditions.checkNotNull(dependencyHash,"Couldn't get hash for node: %s",nodeToHash);
      hasher.putBytes(dependencyHash.asBytes());
    }
    getStdOut().format("%s %s\n",target.getFullyQualifiedName(),hasher.hash().toString());
  }
  return 0;
}
