{
  ImmutableSet<TargetNode<?>> directOwners;
  if (referencedFiles.isPresent()) {
    BuildFileTree buildFileTree=new InMemoryBuildFileTree(FluentIterable.from(graph.getNodes()).transform(HasBuildTarget.TO_TARGET).toSet());
    directOwners=FluentIterable.from(graph.getNodes()).filter(new DirectOwnerPredicate(buildFileTree,referencedFiles.get(),buildFileName)).toSet();
  }
 else {
    directOwners=graph.getNodes();
  }
  Iterable<TargetNode<?>> selectedReferrers=FluentIterable.from(getDependentNodes(graph,directOwners,detectTestChanges)).filter(new Predicate<TargetNode<?>>(){
    @Override public boolean apply(    TargetNode<?> targetNode){
      if (matchingBuildTargets.isPresent() && !matchingBuildTargets.get().contains(targetNode.getBuildTarget())) {
        return false;
      }
      if (buildRuleTypes.isPresent() && !buildRuleTypes.get().contains(targetNode.getType())) {
        return false;
      }
      return true;
    }
  }
);
  ImmutableSortedMap.Builder<String,TargetNode<?>> matchingNodesBuilder=ImmutableSortedMap.naturalOrder();
  for (  TargetNode<?> targetNode : selectedReferrers) {
    matchingNodesBuilder.put(targetNode.getBuildTarget().getFullyQualifiedName(),targetNode);
  }
  return matchingNodesBuilder.build();
}
