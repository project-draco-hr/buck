{
  TargetNode<?> targetNode=targetGraphWithTests.get(target);
  ImmutableSet<TargetNode<?>> dependencyClosure=getDependencyClosure(targetGraphWithTests,targetNode);
  Hasher hasher=Hashing.sha1().newHasher();
  ImmutableSortedSet.Builder<TargetNode<?>> nodesWithDepsAndTests=ImmutableSortedSet.naturalOrder();
  nodesWithDepsAndTests.addAll(dependencyClosure);
  if (isDetectTestChanges()) {
    nodesWithDepsAndTests.addAll(FluentIterable.from(dependencyClosure).transformAndConcat(new Function<TargetNode<?>,Iterable<TargetNode<?>>>(){
      @Override public Iterable<TargetNode<?>> apply(      TargetNode<?> node){
        return targetGraphWithTests.getAll(TargetNodes.getTestTargetsForNode(node));
      }
    }
));
  }
  LOG.debug("Hashing target %s with dependent nodes %s",target,nodesWithDepsAndTests.build());
  for (  TargetNode<?> nodeToHash : nodesWithDepsAndTests.build()) {
    HashCode dependencyHash=buildTargetHashes.get(nodeToHash.getBuildTarget());
    Preconditions.checkNotNull(dependencyHash,"Couldn't get hash for node: %s",nodeToHash);
    hasher.putBytes(dependencyHash.asBytes());
  }
  ShowOptions.Builder showOptionsBuilder=getShowOptionBuilder(showRulesResult,target);
  String hash=hasher.hash().toString();
  showOptionsBuilder.setTargetHash(hash);
}
