{
  if (options.isResolveAlias()) {
    return doResolveAlias(options);
  }
  if (options.isShowRuleKey() && options.isShowTargetHash()) {
    throw new HumanReadableException("Cannot show rule key and target hash at the same time.");
  }
  if (options.isShowOutput() || options.isShowRuleKey() || options.isShowTargetHash()) {
    return doShowRules(options);
  }
  ImmutableSet<String> types=options.getTypes();
  ImmutableSet.Builder<BuildRuleType> buildRuleTypesBuilder=ImmutableSet.builder();
  for (  String name : types) {
    try {
      buildRuleTypesBuilder.add(getRepository().getBuildRuleType(name));
    }
 catch (    IllegalArgumentException e) {
      console.printBuildFailure("Invalid build rule type: " + name);
      return 1;
    }
  }
  ImmutableSet<BuildTarget> matchingBuildTargets=ImmutableSet.copyOf(getBuildTargets(options.getArgumentsFormattedAsBuildTargets()));
  ParserConfig parserConfig=new ParserConfig(options.getBuckConfig());
  TargetGraph graph;
  try {
    if (matchingBuildTargets.isEmpty() || options.isDetectTestChanges()) {
      graph=getParser().buildTargetGraphForTargetNodeSpecs(ImmutableList.of(new TargetNodePredicateSpec(Predicates.<TargetNode<?>>alwaysTrue(),getProjectFilesystem().getIgnorePaths())),parserConfig,getBuckEventBus(),console,environment,options.getEnableProfiling());
    }
 else {
      graph=getParser().buildTargetGraphForBuildTargets(matchingBuildTargets,parserConfig,getBuckEventBus(),console,environment,options.getEnableProfiling());
    }
  }
 catch (  BuildTargetException|BuildFileParseException e) {
    console.printBuildFailureWithoutStacktrace(e);
    return 1;
  }
  PathArguments.ReferencedFiles referencedFiles=options.getReferencedFiles(getProjectFilesystem().getRootPath());
  SortedMap<String,TargetNode<?>> matchingNodes;
  if (!referencedFiles.absolutePathsOutsideProjectRootOrNonExistingPaths.isEmpty() && referencedFiles.relativePathsUnderProjectRoot.isEmpty()) {
    matchingNodes=ImmutableSortedMap.of();
  }
 else {
    ImmutableSet<BuildRuleType> buildRuleTypes=buildRuleTypesBuilder.build();
    matchingNodes=getMatchingNodes(graph,referencedFiles.relativePathsUnderProjectRoot.isEmpty() ? Optional.<ImmutableSet<Path>>absent() : Optional.of(referencedFiles.relativePathsUnderProjectRoot),matchingBuildTargets.isEmpty() ? Optional.<ImmutableSet<BuildTarget>>absent() : Optional.of(matchingBuildTargets),buildRuleTypes.isEmpty() ? Optional.<ImmutableSet<BuildRuleType>>absent() : Optional.of(buildRuleTypes),options.isDetectTestChanges(),parserConfig.getBuildFileName());
  }
  if (options.getPrintJson()) {
    try {
      printJsonForTargets(matchingNodes,new ParserConfig(options.getBuckConfig()));
    }
 catch (    BuildFileParseException e) {
      console.printBuildFailureWithoutStacktrace(e);
      return 1;
    }
  }
 else {
    for (    String target : matchingNodes.keySet()) {
      getStdOut().println(target);
    }
  }
  return 0;
}
