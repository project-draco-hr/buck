{
  if (options.isResolveAlias()) {
    return doResolveAlias(options);
  }
  ImmutableSet<String> types=options.getTypes();
  ImmutableSet.Builder<BuildRuleType> buildRuleTypesBuilder=ImmutableSet.builder();
  for (  String name : types) {
    try {
      buildRuleTypesBuilder.add(getRepository().getBuildRuleType(name));
    }
 catch (    IllegalArgumentException e) {
      console.printBuildFailure("Invalid build rule type: " + name);
      return 1;
    }
  }
  ImmutableSet<BuildTarget> matchingBuildTargets;
  try {
    matchingBuildTargets=ImmutableSet.copyOf(getBuildTargets(options.getArgumentsFormattedAsBuildTargets()));
  }
 catch (  NoSuchBuildTargetException e) {
    console.printBuildFailureWithoutStacktrace(e);
    return 1;
  }
  TargetGraph graph;
  try {
    if (matchingBuildTargets.isEmpty()) {
      graph=getParser().buildTargetGraphForTargetNodeSpecs(ImmutableList.of(new TargetNodePredicateSpec(Predicates.<TargetNode<?>>alwaysTrue(),getProjectFilesystem().getIgnorePaths())),options.getDefaultIncludes(),getBuckEventBus(),console,environment,options.getEnableProfiling());
    }
 else {
      graph=getParser().buildTargetGraphForBuildTargets(matchingBuildTargets,options.getDefaultIncludes(),getBuckEventBus(),console,environment,options.getEnableProfiling());
    }
  }
 catch (  BuildTargetException|BuildFileParseException e) {
    console.printBuildFailureWithoutStacktrace(e);
    return 1;
  }
  PathArguments.ReferencedFiles referencedFiles=options.getReferencedFiles(getProjectFilesystem().getRootPath());
  SortedMap<String,BuildRule> matchingBuildRules;
  if (!referencedFiles.absolutePathsOutsideProjectRootOrNonExistingPaths.isEmpty() && referencedFiles.relativePathsUnderProjectRoot.isEmpty()) {
    matchingBuildRules=ImmutableSortedMap.of();
  }
 else {
    matchingBuildRules=getMatchingBuildRules(graph.getActionGraph(getBuckEventBus()),new TargetsCommandPredicate(graph,buildRuleTypesBuilder.build(),referencedFiles.relativePathsUnderProjectRoot,matchingBuildTargets.isEmpty() ? Optional.<ImmutableSet<BuildTarget>>absent() : Optional.of(matchingBuildTargets),getBuckEventBus()));
  }
  if (options.getPrintJson()) {
    try {
      printJsonForTargets(matchingBuildRules,options.getDefaultIncludes());
    }
 catch (    BuildFileParseException e) {
      console.printBuildFailureWithoutStacktrace(e);
      return 1;
    }
  }
 else {
    printTargetsList(matchingBuildRules,options.isShowOutput(),options.isShowRuleKey());
  }
  return 0;
}
