{
  if (!isDetectTestChanges()) {
    return buildTargetHashes;
  }
  AcyclicDepthFirstPostOrderTraversal<TargetNode<?>> traversal=new AcyclicDepthFirstPostOrderTraversal<>(new GraphTraversable<TargetNode<?>>(){
    @Override public Iterator<TargetNode<?>> findChildren(    TargetNode<?> node){
      return targetGraphWithTests.getAll(node.getDeps()).iterator();
    }
  }
);
  Map<BuildTarget,HashCode> hashesWithTests=Maps.newHashMap();
  for (  TargetNode<?> node : traversal.traverse(inputTargets)) {
    hashNodeWithDependencies(buildTargetHashes,hashesWithTests,node);
  }
  return ImmutableMap.copyOf(hashesWithTests);
}
