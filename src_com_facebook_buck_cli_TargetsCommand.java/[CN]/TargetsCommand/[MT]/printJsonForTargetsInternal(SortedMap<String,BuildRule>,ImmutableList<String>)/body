{
  getStdOut().println("[");
  ObjectMapper mapper=new ObjectMapper();
  Iterator<String> keySetIterator=buildIndex.keySet().iterator();
  while (keySetIterator.hasNext()) {
    String key=keySetIterator.next();
    BuildRule buildRule=buildIndex.get(key);
    BuildTarget buildTarget=buildRule.getBuildTarget();
    List<Map<String,Object>> rules;
    try {
      File buildFile=buildTarget.getBuildFile(getProjectFilesystem());
      rules=getParser().parseBuildFile(buildFile,defaultIncludes,EnumSet.noneOf(ProjectBuildFileParser.Option.class));
    }
 catch (    BuildTargetException e) {
      console.printErrorText("unable to find rule for target " + buildTarget.getFullyQualifiedName());
      continue;
    }
    Map<String,Object> targetRule=null;
    for (    Map<String,Object> rule : rules) {
      String name=(String)rule.get("name");
      if (name.equals(buildTarget.getShortName())) {
        targetRule=rule;
        break;
      }
    }
    if (targetRule == null) {
      console.printErrorText("unable to find rule for target " + buildTarget.getFullyQualifiedName());
      continue;
    }
    String outputPath;
    Buildable buildable=buildRule.getBuildable();
    if (buildable != null) {
      outputPath=buildable.getPathToOutputFile();
    }
 else     if (BuildRuleType.PROJECT_CONFIG.equals(buildRule.getType())) {
      outputPath=null;
    }
 else {
      throw new RuntimeException("No Buildable for " + buildRule.getFullyQualifiedName());
    }
    if (outputPath != null) {
      targetRule.put("buck.output_file",outputPath);
    }
    SortedMap<String,Object> sortedTargetRule=Maps.newTreeMap();
    sortedTargetRule.putAll(targetRule);
    StringWriter stringWriter=new StringWriter();
    try {
      mapper.writerWithDefaultPrettyPrinter().writeValue(stringWriter,sortedTargetRule);
    }
 catch (    IOException e) {
      throw Throwables.propagate(e);
    }
    String output=stringWriter.getBuffer().toString();
    if (keySetIterator.hasNext()) {
      output+=",";
    }
    getStdOut().println(output);
  }
  getStdOut().println("]");
}
