{
  getStdOut().println("[");
  ObjectMapper mapper=new ObjectMapper();
  Iterator<BuildRule> valueIterator=buildIndex.values().iterator();
  while (valueIterator.hasNext()) {
    BuildRule buildRule=valueIterator.next();
    BuildTarget buildTarget=buildRule.getBuildTarget();
    List<Map<String,Object>> rules;
    try {
      File buildFile=getRepository().getAbsolutePathToBuildFile(buildTarget).toFile();
      rules=getParser().parseBuildFile(buildFile,defaultIncludes,EnumSet.noneOf(ProjectBuildFileParser.Option.class),environment,console);
    }
 catch (    BuildTargetException e) {
      console.printErrorText("unable to find rule for target " + buildTarget.getFullyQualifiedName());
      continue;
    }
    Map<String,Object> targetRule=null;
    for (    Map<String,Object> rule : rules) {
      String name=(String)rule.get("name");
      if (name.equals(buildTarget.getShortName())) {
        targetRule=rule;
        break;
      }
    }
    if (targetRule == null) {
      console.printErrorText("unable to find rule for target " + buildTarget.getFullyQualifiedName());
      continue;
    }
    Path outputPath=buildRule.getPathToOutputFile();
    if (outputPath != null) {
      targetRule.put("buck.output_file",outputPath.toString());
    }
    SortedMap<String,Object> sortedTargetRule=Maps.newTreeMap();
    sortedTargetRule.putAll(targetRule);
    StringWriter stringWriter=new StringWriter();
    try {
      mapper.writerWithDefaultPrettyPrinter().writeValue(stringWriter,sortedTargetRule);
    }
 catch (    IOException e) {
      throw Throwables.propagate(e);
    }
    String output=stringWriter.getBuffer().toString();
    if (valueIterator.hasNext()) {
      output+=",";
    }
    getStdOut().println(output);
  }
  getStdOut().println("]");
}
