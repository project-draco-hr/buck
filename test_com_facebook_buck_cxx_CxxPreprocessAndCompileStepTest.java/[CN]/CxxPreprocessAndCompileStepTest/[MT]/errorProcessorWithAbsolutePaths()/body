{
  Path original=Paths.get("buck-out/foo#bar/world.h");
  Path replacement=Paths.get("hello/world.h");
  ImmutableList<String> compiler=ImmutableList.of("compiler");
  Path output=Paths.get("test.ii");
  Path depFile=Paths.get("test.dep");
  Path input=Paths.get("test.cpp");
  ImmutableMap<Path,Path> replacementPaths=ImmutableMap.of(original,replacement);
  Path compilationDirectory=Paths.get("compDir");
  Path sanitizedDir=Paths.get("hello");
  Path unsanitizedDir=Paths.get("buck-out/foo#bar");
  DebugPathSanitizer sanitizer=new DebugPathSanitizer(unsanitizedDir.toString().length(),File.separatorChar,compilationDirectory,ImmutableBiMap.of(unsanitizedDir,sanitizedDir));
  CxxPreprocessAndCompileStep cxxPreprocessStep=new CxxPreprocessAndCompileStep(new FakeProjectFilesystem(),CxxPreprocessAndCompileStep.Operation.COMPILE,output,depFile,input,CxxSource.Type.CXX,Optional.<ImmutableMap<String,String>>absent(),Optional.<ImmutableList<String>>absent(),Optional.<ImmutableMap<String,String>>absent(),Optional.of(compiler),replacementPaths,sanitizer,Optional.<Function<String,Iterable<String>>>absent());
  Function<String,Iterable<String>> processor=cxxPreprocessStep.createErrorLineProcessor(compilationDirectory,true);
  Path expected=replacement.toAbsolutePath();
  assertThat(ImmutableList.of(String.format("In file included from %s:",expected)),equalTo(processor.apply(String.format("In file included from %s:",original))));
  assertThat(ImmutableList.of(String.format("In file included from %s:3:2:",expected)),equalTo(processor.apply(String.format("In file included from %s:3:2:",original))));
  assertThat(ImmutableList.of(String.format("In file included from %s,",expected)),equalTo(processor.apply(String.format("In file included from %s,",original))));
  assertThat(ImmutableList.of(String.format("In file included from %s:7,",expected)),equalTo(processor.apply(String.format("In file included from %s:7,",original))));
  assertThat(ImmutableList.of(String.format("   from %s:",expected)),equalTo(processor.apply(String.format("   from %s:",original))));
  assertThat(ImmutableList.of(String.format("   from %s:3:2:",expected)),equalTo(processor.apply(String.format("   from %s:3:2:",original))));
  assertThat(ImmutableList.of(String.format("   from %s,",expected)),equalTo(processor.apply(String.format("   from %s,",original))));
  assertThat(ImmutableList.of(String.format("   from %s:7,",expected)),equalTo(processor.apply(String.format("   from %s:7,",original))));
  assertThat(ImmutableList.of(String.format("%s: something bad",expected)),equalTo(processor.apply(String.format("%s: something bad",original))));
  assertThat(ImmutableList.of(String.format("%s:4: something bad",expected)),equalTo(processor.apply(String.format("%s:4: something bad",original))));
  assertThat(ImmutableList.of(String.format("%s:4:2: something bad",expected)),equalTo(processor.apply(String.format("%s:4:2: something bad",original))));
  assertThat(ImmutableList.of(String.format("In file included from %s:",Paths.get("test.h").toAbsolutePath().toString())),equalTo(processor.apply("In file included from test.h:")));
  assertThat(ImmutableList.of(" error message!"),equalTo(processor.apply(" error message!")));
}
