{
  Path original=Paths.get("buck-out/foo#bar/world.h");
  ImmutableMap<Path,Path> replacementPaths=ImmutableMap.of(original,Paths.get("hello/////world.h"));
  Path finalPath=Paths.get("SANITIZED/world.h");
  ImmutableList<String> compiler=ImmutableList.of("compiler");
  Path output=Paths.get("test.ii");
  Path depFile=Paths.get("test.dep");
  Path input=Paths.get("test.cpp");
  Path compilationDirectory=Paths.get("compDir");
  DebugPathSanitizer sanitizer=new DebugPathSanitizer(9,File.separatorChar,Paths.get("PWD"),ImmutableBiMap.of(Paths.get("hello"),Paths.get("SANITIZED")));
  CxxPreprocessAndCompileStep cxxPreprocessStep=new CxxPreprocessAndCompileStep(new FakeProjectFilesystem(),CxxPreprocessAndCompileStep.Operation.PREPROCESS,output,depFile,input,CxxSource.Type.CXX,Optional.of(compiler),Optional.<ImmutableList<String>>absent(),replacementPaths,sanitizer,Optional.<Function<String,Iterable<String>>>absent());
  Function<String,Iterable<String>> processor=cxxPreprocessStep.createPreprocessOutputLineProcessor(compilationDirectory);
  assertThat(ImmutableList.of(String.format("# 12 \"%s\"",Escaper.escapePathForCIncludeString(finalPath))),equalTo(processor.apply(String.format("# 12 \"%s\"",original))));
  assertThat(ImmutableList.of(String.format("# 12 \"%s\" 2 1",Escaper.escapePathForCIncludeString(finalPath))),equalTo(processor.apply(String.format("# 12 \"%s\" 2 1",original))));
  assertThat(ImmutableList.of("# 4 \"test.h\""),equalTo(processor.apply("# 4 \"test.h\"")));
  assertThat(ImmutableList.of("int main() {"),equalTo(processor.apply("int main() {")));
}
