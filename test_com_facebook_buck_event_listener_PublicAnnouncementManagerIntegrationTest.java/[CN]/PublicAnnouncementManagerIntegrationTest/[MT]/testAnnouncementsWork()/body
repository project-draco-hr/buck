{
  final AtomicReference<byte[]> requestBody=new AtomicReference<>();
  try (HttpdForTests httpd=new HttpdForTests()){
    httpd.addHandler(new AbstractHandler(){
      @Override public void handle(      String s,      Request request,      HttpServletRequest httpServletRequest,      HttpServletResponse httpServletResponse) throws IOException, ServletException {
        httpServletResponse.setStatus(200);
        if (request.getUri().getPath().equals("/status.php")) {
          return;
        }
        requestBody.set(ByteStreams.toByteArray(httpServletRequest.getInputStream()));
        FrontendRequest thriftRequest=new FrontendRequest();
        ThriftUtil.deserialize(ThriftProtocol.BINARY,requestBody.get(),thriftRequest);
        assertTrue("Request should contain the repository.",thriftRequest.getAnnouncementRequest().getRepository().equals(REPOSITORY));
        try (DataOutputStream out=new DataOutputStream(httpServletResponse.getOutputStream())){
          Announcement announcement=new Announcement();
          announcement.setErrorMessage(ERROR_MSG);
          announcement.setSolutionMessage(SOLUTION_MSG);
          AnnouncementResponse announcementResponse=new AnnouncementResponse();
          announcementResponse.setAnnouncements(ImmutableList.of(announcement));
          FrontendResponse frontendResponse=new FrontendResponse();
          frontendResponse.setType(FrontendRequestType.ANNOUNCEMENT);
          frontendResponse.setAnnouncementResponse(announcementResponse);
          out.write(ThriftUtil.serialize(ThriftProtocol.BINARY,frontendResponse));
        }
       }
    }
);
    httpd.start();
    Clock clock=new DefaultClock();
    BuckEventBus eventBus=BuckEventBusFactory.newInstance(clock);
    ExecutionEnvironment executionEnvironment=new DefaultExecutionEnvironment(ImmutableMap.copyOf(System.getenv()),System.getProperties());
    BuckConfig buckConfig=new FakeBuckConfig.Builder().setSections(ImmutableMap.of("log",ImmutableMap.of("slb_server_pool","http://localhost:" + httpd.getRootUri().getPort()))).build();
    SuperConsoleEventBusListener listener=new SuperConsoleEventBusListener(new SuperConsoleConfig(FakeBuckConfig.builder().build()),new TestConsole(),clock,TestResultSummaryVerbosity.of(false,false),executionEnvironment,Optional.<WebServer>absent(),Locale.US,logPath,TimeZone.getTimeZone("UTC"));
    eventBus.register(listener);
    PublicAnnouncementManager manager=new PublicAnnouncementManager(clock,executionEnvironment,eventBus,listener,REPOSITORY,new RemoteLogBuckConfig(buckConfig),MoreExecutors.newDirectExecutorService());
    manager.getAndPostAnnouncements();
    ImmutableList<String> announcements=listener.getPublicAnnouncements();
    assertSame("Header and 1 message",announcements.size(),2);
    assertTrue(announcements.get(0).equals(PublicAnnouncementManager.HEADER_MSG));
    assertTrue(announcements.get(1).equals(String.format(PublicAnnouncementManager.ANNOUNCEMENT_TEMPLATE,ERROR_MSG,SOLUTION_MSG)));
  }
 }
