{
  DocumentBuilder docBuilder;
  Transformer transformer;
  try {
    docBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
    transformer=TransformerFactory.newInstance().newTransformer();
  }
 catch (  ParserConfigurationException|TransformerConfigurationException e) {
    throw new RuntimeException(e);
  }
  DOMImplementation domImplementation=docBuilder.getDOMImplementation();
  final Document doc=domImplementation.createDocument(null,"Workspace",null);
  doc.setXmlVersion("1.0");
  Element rootElem=doc.getDocumentElement();
  rootElem.setAttribute("version","1.0");
  final Stack<Element> groups=new Stack<>();
  groups.push(rootElem);
  FileVisitor<Map.Entry<String,WorkspaceNode>> visitor=new FileVisitor<Map.Entry<String,WorkspaceNode>>(){
    @Override public FileVisitResult preVisitDirectory(    Map.Entry<String,WorkspaceNode> dir,    BasicFileAttributes attrs) throws IOException {
      Preconditions.checkArgument(dir.getValue() instanceof WorkspaceGroup);
      Element element=doc.createElement("Group");
      element.setAttribute("location","container:");
      element.setAttribute("name",dir.getKey());
      groups.peek().appendChild(element);
      groups.push(element);
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFile(    Map.Entry<String,WorkspaceNode> file,    BasicFileAttributes attrs) throws IOException {
      Preconditions.checkArgument(file.getValue() instanceof WorkspaceFileRef);
      WorkspaceFileRef fileRef=(WorkspaceFileRef)file.getValue();
      Element element=doc.createElement("FileRef");
      element.setAttribute("location","container:" + outputDirectory.normalize().relativize(fileRef.getPath()).toString());
      groups.peek().appendChild(element);
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFileFailed(    Map.Entry<String,WorkspaceNode> file,    IOException exc) throws IOException {
      return FileVisitResult.TERMINATE;
    }
    @Override public FileVisitResult postVisitDirectory(    Map.Entry<String,WorkspaceNode> dir,    IOException exc) throws IOException {
      groups.pop();
      return FileVisitResult.CONTINUE;
    }
  }
;
  walkNodeTree(visitor);
  Path projectWorkspaceDir=outputDirectory.resolve(workspaceName + ".xcworkspace");
  projectFilesystem.mkdirs(projectWorkspaceDir);
  Path serializedWorkspace=projectWorkspaceDir.resolve("contents.xcworkspacedata");
  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){
    DOMSource source=new DOMSource(doc);
    StreamResult result=new StreamResult(outputStream);
    transformer.transform(source,result);
    String contentsToWrite=outputStream.toString();
    if (MorePaths.fileContentsDiffer(new ByteArrayInputStream(contentsToWrite.getBytes(Charsets.UTF_8)),serializedWorkspace,projectFilesystem)) {
      projectFilesystem.writeContentsToPath(contentsToWrite,serializedWorkspace);
    }
  }
 catch (  TransformerException e) {
    throw new RuntimeException(e);
  }
  return projectWorkspaceDir;
}
