{
  buildableContext.recordArtifact(getObjectDir());
  buildableContext.recordArtifact(getInterfaceDir());
  buildableContext.recordArtifact(getStubDir());
  return ImmutableList.of(new MakeCleanDirectoryStep(getProjectFilesystem(),getObjectDir()),new MakeCleanDirectoryStep(getProjectFilesystem(),getInterfaceDir()),new MakeCleanDirectoryStep(getProjectFilesystem(),getStubDir()),new ShellStep(getProjectFilesystem().getRootPath()){
    @Override public ImmutableMap<String,String> getEnvironmentVariables(    ExecutionContext context){
      return ImmutableMap.<String,String>builder().putAll(super.getEnvironmentVariables(context)).putAll(compiler.getEnvironment(getResolver())).build();
    }
    @Override protected ImmutableList<String> getShellCommandInternal(    ExecutionContext context){
      return ImmutableList.<String>builder().addAll(compiler.getCommandPrefix(getResolver())).addAll(flags).add("-c").addAll(picType == CxxSourceRuleFactory.PicType.PIC ? ImmutableList.of("-dynamic","-fPIC") : ImmutableList.<String>of()).addAll(MoreIterables.zipAndConcat(Iterables.cycle("-main-is"),main.asSet())).add("-odir",getProjectFilesystem().resolve(getObjectDir()).toString()).add("-hidir",getProjectFilesystem().resolve(getInterfaceDir()).toString()).add("-stubdir",getProjectFilesystem().resolve(getStubDir()).toString()).add("-i" + Joiner.on(':').join(FluentIterable.from(includes).transform(getResolver().getAbsolutePathFunction()).transform(Functions.toStringFunction()))).addAll(FluentIterable.from(sources.getSourcePaths()).transform(getResolver().getAbsolutePathFunction()).transform(Functions.toStringFunction())).build();
    }
    @Override public String getShortName(){
      return "haskell-compile";
    }
  }
);
}
