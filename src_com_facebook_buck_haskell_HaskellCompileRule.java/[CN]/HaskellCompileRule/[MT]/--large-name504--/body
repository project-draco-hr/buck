{
  return new HaskellCompileRule(baseParams.copyWithChanges(target,Suppliers.memoize(new Supplier<ImmutableSortedSet<BuildRule>>(){
    @Override public ImmutableSortedSet<BuildRule> get(){
      return ImmutableSortedSet.<BuildRule>naturalOrder().addAll(compiler.getDeps(resolver)).addAll(ppFlags.getDeps(resolver)).addAll(resolver.filterBuildRuleInputs(includes)).addAll(sources.getDeps(resolver)).addAll(FluentIterable.from(exposedPackages.values()).transformAndConcat(HaskellPackage.getDepsFunction(resolver))).addAll(FluentIterable.from(packages.values()).transformAndConcat(HaskellPackage.getDepsFunction(resolver))).build();
    }
  }
),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),resolver,compiler,flags,ppFlags,cxxPlatform,picType,main,packageInfo,includes,exposedPackages,packages,sources);
}
