{
  SourcePathResolver pathResolver=new SourcePathResolver(buildRuleResolver);
  AndroidPrebuiltAarGraphEnhancer.UnzipAar unzipAar=AndroidPrebuiltAarGraphEnhancer.enhance(params,args.aar,buildRuleResolver);
  Iterable<PrebuiltJar> javaDeps=Iterables.concat(Iterables.filter(buildRuleResolver.getAllRules(args.deps.get()),PrebuiltJar.class),Iterables.transform(Iterables.filter(buildRuleResolver.getAllRules(args.deps.get()),AndroidPrebuiltAar.class),new Function<AndroidPrebuiltAar,PrebuiltJar>(){
    @Override public PrebuiltJar apply(    AndroidPrebuiltAar input){
      return input.getPrebuiltJar();
    }
  }
));
  PrebuiltJar prebuiltJar=buildRuleResolver.addToIndex(createPrebuiltJar(unzipAar,params,pathResolver,ImmutableSortedSet.<BuildRule>copyOf(javaDeps)));
  AndroidResource androidResource=buildRuleResolver.addToIndex(createAndroidResource(unzipAar,params,pathResolver));
  return buildRuleResolver.addToIndex(new AndroidPrebuiltAar(params.copyWithDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(androidResource,prebuiltJar)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(unzipAar))),pathResolver,new BuildTargetSourcePath(unzipAar.getProjectFilesystem(),unzipAar.getBuildTarget(),unzipAar.getProguardConfig()),new BuildTargetSourcePath(unzipAar.getProjectFilesystem(),unzipAar.getBuildTarget(),unzipAar.getNativeLibsDirectory()),prebuiltJar,androidResource,javacOptions,javaDeps));
}
