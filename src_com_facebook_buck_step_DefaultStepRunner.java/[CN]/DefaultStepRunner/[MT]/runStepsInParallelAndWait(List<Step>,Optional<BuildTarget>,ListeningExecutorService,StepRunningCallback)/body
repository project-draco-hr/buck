{
  List<Callable<Void>> callables=Lists.transform(steps,new Function<Step,Callable<Void>>(){
    @Override public Callable<Void> apply(    final Step step){
      return new Callable<Void>(){
        @Override public Void call() throws Exception {
          runStepForBuildTarget(step,target);
          return null;
        }
      }
;
    }
  }
);
  try {
    callback.stepsWillRun(target);
    MoreFutures.getAll(listeningExecutorService,callables);
    callback.stepsDidRun(target);
  }
 catch (  ExecutionException e) {
    Throwable cause=e.getCause();
    Throwables.propagateIfInstanceOf(cause,StepFailedException.class);
    throw new RuntimeException(cause);
  }
}
