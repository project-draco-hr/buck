{
  GenerateCodeCoverageReportStep step=new GenerateCodeCoverageReportStep(sourceDirectories,classesDirectories,Paths.get(outputDirectory));
  ExecutionContext context=createMock(ExecutionContext.class);
  expect(context.isJacocoEnabled()).andReturn(false).times(1);
  replay(context);
  ImmutableList.Builder<String> shellCommandBuilder=ImmutableList.builder();
  shellCommandBuilder=ImmutableList.builder();
  shellCommandBuilder.add("java","-Xmx1024M","-classpath",JUnitStep.PATH_TO_EMMA_JAR,"emma","report",String.format("-D%s=%s",GenerateCodeCoverageReportStep.REPORT_OUTPUT_DIR,outputDirectory));
  for (  String reportFormat : GenerateCodeCoverageReportStep.CODE_COVERAGE_OUTPUT_FORMAT) {
    shellCommandBuilder.add("-report",reportFormat);
  }
  shellCommandBuilder.add("-input",String.format("%s/coverage.ec,%s/coverage.em",JUnitStep.EMMA_OUTPUT_DIR,JUnitStep.EMMA_OUTPUT_DIR),"-sourcepath","parentDirectory1/src,root/parentDirectory/src");
  List<String> expectedShellCommand=shellCommandBuilder.build();
  expectedShellCommand=shellCommandBuilder.build();
  MoreAsserts.assertListEquals(expectedShellCommand,step.getShellCommand(context));
  verify(context);
}
