{
  GenerateCodeCoverageReportStep step=new GenerateCodeCoverageReportStep(sourceDirectories,classesDirectories,Paths.get(outputDirectory),CoverageReportFormat.HTML);
  ExecutionContext context=createMock(ExecutionContext.class);
  expect(context.getProjectFilesystem()).andReturn(new ProjectFilesystem(Paths.get("."))).anyTimes();
  replay(context);
  ImmutableList.Builder<String> shellCommandBuilder=ImmutableList.builder();
  shellCommandBuilder.add("java",String.format("-Djacoco.output.dir=%s",outputDirectory),String.format("-Djacoco.exec.data.file=%s",JUnitStep.JACOCO_EXEC_COVERAGE_FILE),"-Djacoco.format=html",String.format("-Dclasses.dir=%s",String.format("%s/%s:%s/%s",new File(".").getAbsoluteFile().toPath().normalize(),"parentDirectory1/classes",new File(".").getAbsoluteFile().toPath().normalize(),"root/parentDirectory/classes")),String.format("-Dsrc.dir=%s",String.format("%s:%s","/absolute/path/to/parentDirectory1/src","/absolute/path/to/parentDirectory2/src")),"-jar",GenerateCodeCoverageReportStep.BUCK_HOME + "/buck-out/gen/src/com/facebook/buck/java/report-generator.jar");
  List<String> expectedShellCommand=shellCommandBuilder.build();
  MoreAsserts.assertListEquals(expectedShellCommand,step.getShellCommand(context));
  verify(context);
}
