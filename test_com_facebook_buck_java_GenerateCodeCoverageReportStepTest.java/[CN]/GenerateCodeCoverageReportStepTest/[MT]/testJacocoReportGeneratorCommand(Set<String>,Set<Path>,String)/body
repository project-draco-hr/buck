{
  GenerateCodeCoverageReportStep step=new GenerateCodeCoverageReportStep(sourceDirectories,classesDirectories,Paths.get(outputDirectory),CoverageReportFormat.HTML);
  ExecutionContext context=createMock(ExecutionContext.class);
  expect(context.getProjectFilesystem()).andReturn(new ProjectFilesystem(Paths.get("."))).anyTimes();
  replay(context);
  ImmutableList.Builder<String> shellCommandBuilder=ImmutableList.builder();
  System.setProperty("buck.report_generator_jar",MorePathsForTests.rootRelativePath("/absolute/path/to/report/generator/jar").toString());
  shellCommandBuilder.add("java",String.format("-Djacoco.output.dir=%s",outputDirectory),String.format("-Djacoco.exec.data.file=%s",JUnitStep.JACOCO_EXEC_COVERAGE_FILE),"-Djacoco.format=html",String.format("-Dclasses.dir=%s",String.format("%s%c%s:%s%c%s",new File(".").getAbsoluteFile().toPath().normalize(),File.separatorChar,Paths.get("parentDirectory1/classes"),new File(".").getAbsoluteFile().toPath().normalize(),File.separatorChar,Paths.get("root/parentDirectory/classes"))),String.format("-Dsrc.dir=%s",String.format("%s:%s",MorePathsForTests.rootRelativePath("/absolute/path/to/parentDirectory1/src").toString(),MorePathsForTests.rootRelativePath("/absolute/path/to/parentDirectory2/src").toString())),"-jar",MorePathsForTests.rootRelativePath("/absolute/path/to/report/generator/jar").toString());
  List<String> expectedShellCommand=shellCommandBuilder.build();
  MoreAsserts.assertListEquals(expectedShellCommand,step.getShellCommand(context));
  verify(context);
}
