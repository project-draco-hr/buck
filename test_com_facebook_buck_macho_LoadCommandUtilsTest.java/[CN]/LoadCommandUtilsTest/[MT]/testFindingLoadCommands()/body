{
  byte[] header=MachoHeaderTestData.getBigEndian64Bit();
  header[19]=3;
  header[23]=16;
  byte[] symtabBytes=SymTabCommandTestData.getBigEndian();
  byte[] uuid1Bytes=UUIDCommandTestData.getBigEndian();
  uuid1Bytes[8]=(byte)0x11;
  byte[] uuid2Bytes=UUIDCommandTestData.getBigEndian();
  uuid2Bytes[8]=(byte)0x22;
  ByteBuffer buffer=ByteBuffer.allocate(MachoHeaderTestData.getBigEndian64Bit().length + symtabBytes.length + uuid1Bytes.length+ uuid2Bytes.length).order(ByteOrder.BIG_ENDIAN).put(header).put(uuid1Bytes).put(symtabBytes).put(uuid2Bytes);
  buffer.position(0);
  ImmutableList<UUIDCommand> uuidCommands=LoadCommandUtils.findLoadCommandsWithClass(buffer,UUIDCommand.class);
  assertThat(uuidCommands.size(),equalTo(2));
  assertThat(uuidCommands.get(0).getUuid().toString(),startsWith("11"));
  assertThat(uuidCommands.get(0).getLoadCommandCommonFields().getOffsetInBinary(),equalTo(header.length + 0));
  assertThat(uuidCommands.get(1).getUuid().toString(),startsWith("22"));
  assertThat(uuidCommands.get(1).getLoadCommandCommonFields().getOffsetInBinary(),equalTo(header.length + 48));
  buffer.position(0);
  ImmutableList<SymTabCommand> symTabCommands=LoadCommandUtils.findLoadCommandsWithClass(buffer,SymTabCommand.class);
  assertThat(symTabCommands.size(),equalTo(1));
  assertThat(symTabCommands.get(0).getLoadCommandCommonFields().getOffsetInBinary(),equalTo(header.length + 24));
}
