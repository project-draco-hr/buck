{
  String key=tmp.getRootPath().resolve(source).toRealPath().toString();
  CxxCompilationDatabaseEntry entry=fileToEntry.get(key);
  assertNotNull("There should be an entry for " + key + ".",entry);
  String clang=tmp.getRootPath().resolve(XCODE_DEVELOPER_DIR).resolve("Toolchains/XcodeDefault.xctoolchain/usr/bin/clang").toRealPath().toString();
  String sdkRoot=tmp.getRootPath().resolve(XCODE_DEVELOPER_DIR).resolve("Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk").toRealPath().toString();
  String language="objective-c";
  String languageStandard="-std=gnu11";
  if (source.endsWith(".mm")) {
    language="objective-c++";
    languageStandard="-std=c++11";
    clang+="++";
  }
  List<String> commandArgs=Lists.newArrayList(clang,"-isysroot",sdkRoot,"-arch","x86_64","'-mios-simulator-version-min=8.0'","-c","-x",language);
  if (isLibrary) {
    commandArgs.add("-fPIC");
  }
  commandArgs.add("'" + languageStandard + "'");
  commandArgs.add("-Wno-deprecated");
  commandArgs.add("-Wno-conversion");
  commandArgs.add("'" + languageStandard + "'");
  commandArgs.add("-Wno-deprecated");
  commandArgs.add("-Wno-conversion");
  for (  String include : includes) {
    commandArgs.add("-I");
    commandArgs.add(include);
  }
  for (  String framework : additionalFrameworks) {
    commandArgs.add("-F");
    commandArgs.add(sdkRoot + framework);
  }
  commandArgs.add("-o");
  commandArgs.add(output);
  commandArgs.add(source);
  MoreAsserts.assertIterablesEquals(commandArgs,ImmutableList.copyOf(entry.command.split(" ")));
}
