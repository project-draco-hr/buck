{
  ImmutableSetMultimap<BuildTarget,BuildTarget> neededDependencies;
  try {
    neededDependencies=getNeededDependencies(missingSymbolEvents);
  }
 catch (  IOException e) {
    LOG.warn("Could not find missing deps",e);
    print("Could not find missing deps because of an IOException: " + e.getMessage());
    return;
  }
  ImmutableSortedSet.Builder<String> samePackageDeps=ImmutableSortedSet.naturalOrder();
  ImmutableSortedSet.Builder<String> otherPackageDeps=ImmutableSortedSet.naturalOrder();
  for (  BuildTarget target : neededDependencies.keySet()) {
    print(formatTarget(target) + " is missing deps:");
    Set<BuildTarget> sortedDeps=ImmutableSortedSet.copyOf(neededDependencies.get(target));
    for (    BuildTarget neededDep : sortedDeps) {
      if (neededDep.getBaseName().equals(target.getBaseName())) {
        samePackageDeps.add(":" + neededDep.getShortName());
      }
 else {
        otherPackageDeps.add(neededDep.toString());
      }
    }
  }
  String format="    '%s',";
  for (  String dep : samePackageDeps.build()) {
    print(String.format(format,dep));
  }
  for (  String dep : otherPackageDeps.build()) {
    print(String.format(format,dep));
  }
}
