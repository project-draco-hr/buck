{
  Preconditions.checkArgument(Sets.intersection(baseTarget.getFlavors(),Sets.union(Type.FLAVOR_VALUES,cxxPlatforms.getFlavors())).isEmpty());
  BuildTarget target=baseTarget.withFlavors(cxxPlatform.getFlavor());
switch (depType) {
case SHARED:
    target=target.withFlavors(Type.PACKAGE_SHARED.getFlavor());
  break;
case STATIC:
target=target.withFlavors(Type.PACKAGE_STATIC.getFlavor());
break;
case STATIC_PIC:
target=target.withFlavors(Type.PACKAGE_STATIC_PIC.getFlavor());
break;
default :
throw new IllegalStateException();
}
Optional<HaskellPackageRule> packageRule=resolver.getRuleOptionalWithType(target,HaskellPackageRule.class);
if (packageRule.isPresent()) {
return packageRule.get();
}
return resolver.addToIndex(createPackage(target,baseParams,resolver,pathResolver,cxxPlatform,args,depType));
}
