{
  ImmutableSortedMap.Builder<String,HaskellPackage> depPackagesBuilder=ImmutableSortedMap.naturalOrder();
  for (  BuildRule rule : params.getDeps()) {
    if (rule instanceof HaskellCompileDep) {
      ImmutableList<HaskellPackage> packages=((HaskellCompileDep)rule).getCompileInput(cxxPlatform,picType).getPackages();
      for (      HaskellPackage pkg : packages) {
        depPackagesBuilder.put(pkg.getInfo().getIdentifier(),pkg);
      }
    }
  }
  ImmutableSortedMap<String,HaskellPackage> depPackages=depPackagesBuilder.build();
  HaskellCompileRule compileRule=requireCompileRule(params,resolver,pathResolver,cxxPlatform,args,picType);
  return HaskellPackageRule.from(params.getBuildTarget(),params,pathResolver,haskellConfig.getPackager().resolve(resolver),getPackageInfo(params.getBuildTarget()),depPackages,compileRule.getModules(),ImmutableSortedSet.<SourcePath>of(),ImmutableSortedSet.of(compileRule.getInterfaces()));
}
