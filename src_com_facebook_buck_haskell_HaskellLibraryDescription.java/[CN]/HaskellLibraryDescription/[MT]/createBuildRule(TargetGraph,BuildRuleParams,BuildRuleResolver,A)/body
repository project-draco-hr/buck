{
  BuildTarget buildTarget=params.getBuildTarget();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  Optional<Map.Entry<Flavor,Type>> type=LIBRARY_TYPE.getFlavorAndValue(buildTarget);
  Optional<CxxPlatform> cxxPlatform=cxxPlatforms.getValue(buildTarget);
  if (type.isPresent()) {
    Preconditions.checkState(cxxPlatform.isPresent());
switch (type.get().getValue()) {
case INTERFACES:
case INTERFACES_DYNAMIC:
      return createInterfaces(params,resolver,pathResolver,cxxPlatform.get(),args,type.get().getValue() == Type.INTERFACES_DYNAMIC ? CxxSourceRuleFactory.PicType.PIC : CxxSourceRuleFactory.PicType.PDC);
case SHARED:
    return createSharedLibrary(params,resolver,pathResolver,cxxPlatform.get(),args);
case STATIC_PIC:
case STATIC:
  return createStaticLibrary(params,resolver,pathResolver,cxxPlatform.get(),args,type.get().getValue() == Type.STATIC_PIC ? CxxSourceRuleFactory.PicType.PIC : CxxSourceRuleFactory.PicType.PDC);
}
throw new IllegalStateException(String.format("%s: unexpected type `%s`",params.getBuildTarget(),type.get().getValue()));
}
return new HaskellLibrary(params,pathResolver,resolver);
}
