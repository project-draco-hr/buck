{
  if (cpuFilters.isEmpty()) {
    steps.add(CopyStep.forDirectory(sourceDir,destinationDir,CopyStep.DirectoryMode.CONTENTS_ONLY));
  }
 else {
    for (    TargetCpuType cpuType : cpuFilters) {
      Optional<String> abiDirectoryComponent=getAbiDirectoryComponent(cpuType);
      Preconditions.checkState(abiDirectoryComponent.isPresent());
      final Path libSourceDir=sourceDir.resolve(abiDirectoryComponent.get());
      Path libDestinationDir=destinationDir.resolve(abiDirectoryComponent.get());
      final MkdirStep mkDirStep=new MkdirStep(libDestinationDir);
      final CopyStep copyStep=CopyStep.forDirectory(libSourceDir,libDestinationDir,CopyStep.DirectoryMode.CONTENTS_ONLY);
      steps.add(new Step(){
        @Override public int execute(        ExecutionContext context){
          if (!context.getProjectFilesystem().exists(libSourceDir.toString())) {
            return 0;
          }
          if (mkDirStep.execute(context) == 0 && copyStep.execute(context) == 0) {
            return 0;
          }
          return 1;
        }
        @Override public String getShortName(){
          return "copy_native_libraries";
        }
        @Override public String getDescription(        ExecutionContext context){
          ImmutableList.Builder<String> stringBuilder=ImmutableList.builder();
          stringBuilder.add(String.format("[ -d %s ]",libSourceDir.toString()));
          stringBuilder.add(mkDirStep.getDescription(context));
          stringBuilder.add(copyStep.getDescription(context));
          return Joiner.on(" && ").join(stringBuilder.build());
        }
      }
);
    }
  }
}
