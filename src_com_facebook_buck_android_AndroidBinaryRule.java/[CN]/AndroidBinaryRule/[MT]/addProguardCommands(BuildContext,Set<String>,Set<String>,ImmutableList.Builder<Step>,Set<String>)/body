{
  final ImmutableSetMultimap<JavaLibraryRule,String> classpathEntriesMap=getTransitiveClasspathEntries();
  ImmutableSet.Builder<String> additionalLibraryJarsForProguardBuilder=ImmutableSet.builder();
  for (  BuildRule buildRule : buildRulesToExcludeFromDex) {
    if (buildRule instanceof JavaLibraryRule) {
      additionalLibraryJarsForProguardBuilder.addAll(classpathEntriesMap.get((JavaLibraryRule)buildRule));
    }
  }
  Path proguardDirectory=getPathForProGuardDirectory();
  commands.add(new MakeCleanDirectoryStep(proguardDirectory));
  String generatedProGuardConfig=proguardDirectory + "/proguard.txt";
  GenProGuardConfigStep genProGuardConfig=new GenProGuardConfigStep(getAndroidManifestXml(),resDirectories,generatedProGuardConfig);
  commands.add(genProGuardConfig);
  ImmutableSet.Builder<String> proguardConfigsBuilder=ImmutableSet.builder();
  proguardConfigsBuilder.addAll(depsProguardConfigs);
  if (proguardConfig.isPresent()) {
    proguardConfigsBuilder.add(proguardConfig.get().resolve(context).toString());
  }
  final ImmutableMap<String,String> inputOutputEntries=FluentIterable.from(classpathEntriesToDex).toMap(new Function<String,String>(){
    @Override public String apply(    String classpathEntry){
      return getProguardOutputFromInputClasspath(classpathEntry).toString();
    }
  }
);
  ProGuardObfuscateStep obfuscateCommand=new ProGuardObfuscateStep(generatedProGuardConfig,proguardConfigsBuilder.build(),useAndroidProguardConfigWithOptimizations,inputOutputEntries,additionalLibraryJarsForProguardBuilder.build(),proguardDirectory.toString());
  commands.add(obfuscateCommand);
  return ImmutableSet.copyOf(inputOutputEntries.values());
}
