{
  ImmutableList.Builder<Step> commands=ImmutableList.builder();
  ImmutableMap.Builder<String,File> extraAssetsBuilder=ImmutableMap.builder();
  commands.add(new MkdirAndSymlinkFileStep(getManifest(),getAndroidManifestXml()));
  final AndroidTransitiveDependencies transitiveDependencies=findTransitiveDependencies(context.getDependencyGraph());
  final AndroidDexTransitiveDependencies dexTransitiveDependencies=findDexTransitiveDependencies(context.getDependencyGraph());
  Set<String> resDirectories=transitiveDependencies.resDirectories;
  Set<String> rDotJavaPackages=transitiveDependencies.rDotJavaPackages;
  FilterResourcesStep.ResourceFilter resourceFilter=getResourceFilter();
  if (resourceFilter.isEnabled()) {
    FilterResourcesStep filterResourcesCommand=new FilterResourcesStep(resDirectories,new File(getBinPath("__filtered__%s__")),resourceFilter.getDensity(),DefaultFilteredDirectoryCopier.getInstance(),FilterResourcesStep.DefaultDrawableFinder.getInstance(),resourceFilter.shouldDownscale() ? FilterResourcesStep.ImageMagickScaler.getInstance() : null);
    commands.add(filterResourcesCommand);
    resDirectories=filterResourcesCommand.getFilteredResourceDirectories();
  }
  String extractedResourcesDir=getBinPath("__resources__%s__");
  commands.add(new MakeCleanDirectoryStep(extractedResourcesDir));
  commands.add(new ExtractResourcesStep(dexTransitiveDependencies.pathsToThirdPartyJars,extractedResourcesDir));
  if (!resDirectories.isEmpty()) {
    UberRDotJavaUtil.generateRDotJavaFiles(resDirectories,rDotJavaPackages,getBuildTarget(),commands);
  }
  if (packageType.isBuildWithObfuscation()) {
    addProguardCommands(context,dexTransitiveDependencies,transitiveDependencies.proguardConfigs,commands,resDirectories);
  }
  String dexDir=getBinPath(".dex/%s");
  commands.add(new MkdirStep(dexDir));
  String dexFile=String.format("%s/classes.dex",dexDir);
  final ImmutableSet.Builder<String> secondaryDexDirectories=ImmutableSet.builder();
  addDexingCommands(dexTransitiveDependencies.classpathEntriesToDex,secondaryDexDirectories,commands,dexFile);
  final ImmutableMap<String,File> extraAssets=extraAssetsBuilder.build();
  Step collectAssets=new Step(){
    @Override public int execute(    ExecutionContext context){
      ImmutableList.Builder<Step> commands=ImmutableList.builder();
      try {
        createAllAssetsDirectory(transitiveDependencies.assetsDirectories,extraAssets,commands,new DefaultDirectoryTraverser());
      }
 catch (      IOException e) {
        e.printStackTrace(context.getStdErr());
        return 1;
      }
      for (      Step command : commands.build()) {
        int exitCode=command.execute(context);
        if (exitCode != 0) {
          throw new HumanReadableException("Error running " + command.getDescription(context));
        }
      }
      return 0;
    }
    @Override public String getShortName(){
      return "symlink_assets";
    }
    @Override public String getDescription(    ExecutionContext context){
      return getShortName();
    }
  }
;
  commands.add(collectAssets);
  ImmutableSet.Builder<String> nativeLibraryDirectories=ImmutableSet.builder();
  if (!transitiveDependencies.nativeLibsDirectories.isEmpty()) {
    String pathForNativeLibs=getPathForNativeLibs();
    String libSubdirectory=pathForNativeLibs + "/lib";
    nativeLibraryDirectories.add(libSubdirectory);
    commands.add(new MakeCleanDirectoryStep(libSubdirectory));
    for (    String nativeLibDir : transitiveDependencies.nativeLibsDirectories) {
      if (nativeLibDir.endsWith("/")) {
        nativeLibDir=nativeLibDir.substring(0,nativeLibDir.length() - 1);
      }
      copyNativeLibrary(nativeLibDir,libSubdirectory,commands);
    }
  }
  String resourceApkPath=getResourceApkPath();
  String unsignedApkPath=getUnsignedApkPath();
  Optional<String> assetsDirectory;
  if (transitiveDependencies.assetsDirectories.isEmpty() && extraAssets.isEmpty() && transitiveDependencies.nativeLibAssetsDirectories.isEmpty()) {
    assetsDirectory=Optional.absent();
  }
 else {
    assetsDirectory=Optional.of(getPathToAllAssetsDirectory());
  }
  if (!transitiveDependencies.nativeLibAssetsDirectories.isEmpty()) {
    String nativeLibAssetsDir=assetsDirectory.get() + "/lib";
    commands.add(new MakeCleanDirectoryStep(nativeLibAssetsDir));
    for (    String nativeLibDir : transitiveDependencies.nativeLibAssetsDirectories) {
      copyNativeLibrary(nativeLibDir,nativeLibAssetsDir,commands);
    }
  }
  commands.add(new MkdirStep(outputGenDirectory));
  if (!canSkipAaptResourcePackaging()) {
    AaptStep aaptCommand=new AaptStep(getAndroidManifestXml(),resDirectories,assetsDirectory,resourceApkPath,ImmutableSet.of(extractedResourcesDir),packageType.isCrunchPngFiles());
    commands.add(aaptCommand);
  }
  ImmutableSet.Builder<String> secondaryDexZips=ImmutableSet.builder();
  for (  String secondaryDexDirectory : secondaryDexDirectories.build()) {
    String zipFile=secondaryDexDirectory.replaceAll("/$","") + ".zip";
    secondaryDexZips.add(zipFile);
    commands.add(new ZipDirectoryWithMaxDeflateStep(secondaryDexDirectory,zipFile,FROYO_DEFLATE_LIMIT_BYTES));
  }
  ApkBuilderStep apkBuilderCommand=new ApkBuilderStep(resourceApkPath,unsignedApkPath,dexFile,ImmutableSet.<String>of(),nativeLibraryDirectories.build(),secondaryDexZips.build(),false);
  commands.add(apkBuilderCommand);
  String signedApkPath=getSignedApkPath();
  SignApkStep signApkStep=new SignApkStep(keystore.getPathToStore(),keystore.getPathToPropertiesFile(),unsignedApkPath,signedApkPath);
  commands.add(signApkStep);
  String apkToAlign;
  if (this.isCompressResources()) {
    String compressedApkPath=getCompressedResourcesApkPath();
    apkToAlign=compressedApkPath;
    RepackZipEntriesStep arscComp=new RepackZipEntriesStep(signedApkPath,compressedApkPath,ImmutableSet.of("resources.arsc"));
    commands.add(arscComp);
  }
 else {
    apkToAlign=signedApkPath;
  }
  String apkPath=getApkPath();
  ZipalignStep zipalign=new ZipalignStep(apkToAlign,apkPath);
  commands.add(zipalign);
  EchoStep success=new EchoStep(String.format("built APK for %s at %s",getFullyQualifiedName(),apkPath));
  commands.add(success);
  return commands.build();
}
