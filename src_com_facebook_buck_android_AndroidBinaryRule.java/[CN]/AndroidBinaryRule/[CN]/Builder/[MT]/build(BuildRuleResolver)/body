{
  BuildRule rule=ruleResolver.get(keystoreTarget);
  Buildable keystore=rule.getBuildable();
  if (!(keystore instanceof Keystore)) {
    throw new HumanReadableException("In %s, keystore='%s' must be a keystore() but was %s().",getBuildTarget(),rule.getFullyQualifiedName(),rule.getType().getName());
  }
  ImmutableSortedSet<BuildRule> classpathDeps=getBuildTargetsAsBuildRules(ruleResolver,classpathDepsBuilder.build());
  AndroidTransitiveDependencyGraph androidTransitiveDependencyGraph=new AndroidTransitiveDependencyGraph(classpathDeps);
  BuildRuleParams originalParams=createBuildRuleParams(ruleResolver);
  final ImmutableSortedSet<BuildRule> originalDeps=originalParams.getDeps();
  ImmutableSet<BuildTarget> buildTargetsToExcludeFromDex=buildTargetsToExcludeFromDexBuilder.build();
  boolean shouldPreDex=!disablePreDex && PackageType.DEBUG.equals(packageType) && !preprocessJavaClassesBash.isPresent();
  boolean allowNonExistentRule=false;
  ImmutableSortedSet<BuildRule> allRules=getBuildTargetsAsBuildRules(ruleResolver,buildTargetsToExcludeFromDex,allowNonExistentRule);
  ImmutableSortedSet<JavaLibraryRule> buildRulesToExcludeFromDex=FluentIterable.from(allRules).filter(new Predicate<BuildRule>(){
    @Override public boolean apply(    BuildRule input){
      return input.getBuildable() instanceof JavaLibraryRule;
    }
  }
).transform(new Function<BuildRule,JavaLibraryRule>(){
    @Override public JavaLibraryRule apply(    BuildRule input){
      return (JavaLibraryRule)input.getBuildable();
    }
  }
).toSortedSet(HasBuildTarget.BUILD_TARGET_COMPARATOR);
  AndroidResourceDepsFinder androidResourceDepsFinder=new AndroidResourceDepsFinder(androidTransitiveDependencyGraph,buildRulesToExcludeFromDex){
    @Override protected ImmutableList<HasAndroidResourceDeps> findMyAndroidResourceDeps(){
      return UberRDotJavaUtil.getAndroidResourceDeps(originalDeps);
    }
  }
;
  Path primaryDexPath=BuildTargets.getBinPath(getBuildTarget(),".dex/%s/classes.dex");
  AndroidBinaryGraphEnhancer graphEnhancer=new AndroidBinaryGraphEnhancer(originalParams,ruleResolver,resourceCompressionMode,resourceFilter,androidResourceDepsFinder,manifest,packageType,cpuFilters.build(),buildStringSourceMap,shouldPreDex,primaryDexPath,dexSplitMode,buildTargetsToExcludeFromDex,javacOptions,exopackage,(Keystore)keystore);
  AndroidBinaryGraphEnhancer.EnhancementResult result=graphEnhancer.createAdditionalBuildables();
  ImmutableSortedSet<BuildRule> finalDeps=result.getFinalDeps();
  BuildRuleParams newParams=originalParams.copyWithChangedDeps(finalDeps);
  return new AndroidBinaryRule(newParams,manifest,target,getBuildTargetsAsBuildRules(ruleResolver,classpathDepsBuilder.build()),(Keystore)keystore,packageType,buildRulesToExcludeFromDex,dexSplitMode,useAndroidProguardConfigWithOptimizations,optimizationPasses,proguardConfig,resourceCompressionMode,cpuFilters.build(),primaryDexPath,result.getFilteredResourcesProvider(),result.getUberRDotJava(),result.getPackageStringAssets(),result.getAaptPackageResources(),result.getPreDexMerge(),result.getComputeExopackageDepsAbi(),exopackage,getBuildTargetsAsBuildRules(ruleResolver,preprocessJavaClassesDeps.build()),preprocessJavaClassesBash,androidResourceDepsFinder);
}
