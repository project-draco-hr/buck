{
  BuildRule rule=ruleResolver.get(keystoreTarget);
  Buildable keystore=rule.getBuildable();
  if (!(keystore instanceof Keystore)) {
    throw new HumanReadableException("In %s, keystore='%s' must be a keystore() but was %s().",getBuildTarget(),rule.getFullyQualifiedName(),rule.getType().getName());
  }
  ImmutableSortedSet<BuildRule> classpathDeps=getBuildTargetsAsBuildRules(ruleResolver,classpathDepsBuilder.build());
  AndroidTransitiveDependencyGraph androidTransitiveDependencyGraph=new AndroidTransitiveDependencyGraph(classpathDeps);
  BuildRuleParams originalParams=createBuildRuleParams(ruleResolver);
  final ImmutableSortedSet<BuildRule> originalDeps=originalParams.getDeps();
  ImmutableSet<IntermediateDexRule> preDexDeps;
  ImmutableSet<BuildTarget> buildTargetsToExcludeFromDex=buildTargetsToExcludeFromDexBuilder.build();
  AndroidBinaryGraphEnhancer graphEnhancer=new AndroidBinaryGraphEnhancer(originalParams,buildTargetsToExcludeFromDex);
  if (!disablePreDex && PackageType.DEBUG.equals(packageType) && !dexSplitMode.isShouldSplitDex()&& !preprocessJavaClassesBash.isPresent()) {
    preDexDeps=graphEnhancer.createDepsForPreDexing(ruleResolver);
  }
 else {
    preDexDeps=ImmutableSet.of();
  }
  boolean allowNonExistentRule=false;
  ImmutableSortedSet<BuildRule> buildRulesToExcludeFromDex=getBuildTargetsAsBuildRules(ruleResolver,buildTargetsToExcludeFromDex,allowNonExistentRule);
  AndroidResourceDepsFinder androidResourceDepsFinder=new AndroidResourceDepsFinder(androidTransitiveDependencyGraph,buildRulesToExcludeFromDex){
    @Override protected ImmutableList<HasAndroidResourceDeps> findMyAndroidResourceDeps(){
      return UberRDotJavaUtil.getAndroidResourceDeps(originalDeps);
    }
    @Override protected Set<HasAndroidResourceDeps> findMyAndroidResourceDepsUnsorted(){
      return UberRDotJavaUtil.getAndroidResourceDepsUnsorted(originalDeps);
    }
  }
;
  AndroidBinaryGraphEnhancer.Result result=graphEnhancer.addBuildablesToCreateAaptResources(ruleResolver,resourceCompressionMode,resourceFilter,androidResourceDepsFinder,manifest,packageType,cpuFilters.build(),preDexDeps);
  return new AndroidBinaryRule(result.getParams(),manifest,target,getBuildTargetsAsBuildRules(ruleResolver,classpathDepsBuilder.build()),(Keystore)keystore,packageType,buildRulesToExcludeFromDex,dexSplitMode,useAndroidProguardConfigWithOptimizations,proguardConfig,resourceCompressionMode,primaryDexSubstrings.build(),linearAllocHardLimit,primaryDexClassesFile,cpuFilters.build(),preDexDeps,result.getUberRDotJavaBuildable(),result.getAaptPackageResources(),getBuildTargetsAsBuildRules(ruleResolver,preprocessJavaClassesDeps.build()),preprocessJavaClassesBash,androidResourceDepsFinder,androidTransitiveDependencyGraph);
}
