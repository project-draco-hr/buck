{
  BuildRule rule=ruleResolver.get(keystoreTarget);
  Buildable keystore=rule.getBuildable();
  if (!(keystore instanceof Keystore)) {
    throw new HumanReadableException("In %s, keystore='%s' must be a keystore() but was %s().",getBuildTarget(),rule.getFullyQualifiedName(),rule.getType().getName());
  }
  ImmutableSortedSet<BuildRule> classpathDeps=getBuildTargetsAsBuildRules(ruleResolver,classpathDepsBuilder.build());
  AndroidTransitiveDependencyGraph androidTransitiveDependencyGraph=new AndroidTransitiveDependencyGraph(classpathDeps);
  BuildRuleParams originalParams=createBuildRuleParams(ruleResolver);
  AndroidBinaryGraphEnhancer graphEnhancer=new AndroidBinaryGraphEnhancer(originalParams);
  final ImmutableSortedSet<BuildRule> originalDeps=originalParams.getDeps();
  ImmutableSet<BuildTarget> buildTargetsToExcludeFromDex=buildTargetsToExcludeFromDexBuilder.build();
  boolean shouldPreDex=!disablePreDex && PackageType.DEBUG.equals(packageType) && !preprocessJavaClassesBash.isPresent();
  boolean allowNonExistentRule=false;
  ImmutableSortedSet<BuildRule> buildRulesToExcludeFromDex=getBuildTargetsAsBuildRules(ruleResolver,buildTargetsToExcludeFromDex,allowNonExistentRule);
  AndroidResourceDepsFinder androidResourceDepsFinder=new AndroidResourceDepsFinder(androidTransitiveDependencyGraph,buildRulesToExcludeFromDex){
    @Override protected ImmutableList<HasAndroidResourceDeps> findMyAndroidResourceDeps(){
      return UberRDotJavaUtil.getAndroidResourceDeps(originalDeps);
    }
  }
;
  AndroidBinaryGraphEnhancer.AaptEnhancementResult aaptEnhancementResult=graphEnhancer.addBuildablesToCreateAaptResources(ruleResolver,resourceCompressionMode,resourceFilter,androidResourceDepsFinder,manifest,packageType,cpuFilters.build(),shouldPreDex,this.buildStringSourceMap);
  Path primaryDexPath=BuildTargets.getBinPath(getBuildTarget(),".dex/%s/classes.dex");
  AndroidBinaryGraphEnhancer.DexEnhancementResult dexEnhancementResult;
  if (shouldPreDex) {
    dexEnhancementResult=graphEnhancer.createDepsForPreDexing(ruleResolver,primaryDexPath,dexSplitMode,buildTargetsToExcludeFromDex,aaptEnhancementResult.getUberRDotJava());
  }
 else {
    dexEnhancementResult=new AndroidBinaryGraphEnhancer.DexEnhancementResult(Optional.<PreDexMerge>absent());
  }
  BuildRuleParams newParams=originalParams.copyWithChangedDeps(graphEnhancer.getTotalDeps());
  return new AndroidBinaryRule(newParams,manifest,target,getBuildTargetsAsBuildRules(ruleResolver,classpathDepsBuilder.build()),(Keystore)keystore,packageType,buildRulesToExcludeFromDex,dexSplitMode,useAndroidProguardConfigWithOptimizations,proguardConfig,resourceCompressionMode,cpuFilters.build(),primaryDexPath,aaptEnhancementResult.getUberRDotJava(),aaptEnhancementResult.getAaptPackageResources(),dexEnhancementResult.getPreDexMerge(),getBuildTargetsAsBuildRules(ruleResolver,preprocessJavaClassesDeps.build()),preprocessJavaClassesBash,androidResourceDepsFinder,androidTransitiveDependencyGraph);
}
