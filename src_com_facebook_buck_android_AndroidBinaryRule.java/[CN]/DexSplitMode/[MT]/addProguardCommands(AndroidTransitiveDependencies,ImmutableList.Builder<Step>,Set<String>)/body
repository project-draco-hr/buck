{
  final ImmutableSetMultimap<BuildRule,String> classpathEntriesMap=getTransitiveClasspathEntries();
  Set<String> additionalLibraryJarsForProguard=Sets.newHashSet();
  for (  BuildRule buildRule : buildRulesToExcludeFromDex) {
    additionalLibraryJarsForProguard.addAll(classpathEntriesMap.get(buildRule));
  }
  Set<String> classpathEntries=deps.classpathEntriesToDex;
  String proguardDirectory=getPathForProGuardDirectory();
  commands.add(new MakeCleanDirectoryStep(proguardDirectory));
  String generatedProGuardConfig=proguardDirectory + "/proguard.txt";
  GenProGuardConfigStep genProGuardConfig=new GenProGuardConfigStep(getAndroidManifestXml(),resDirectories,generatedProGuardConfig);
  commands.add(genProGuardConfig);
  Set<String> proguardConfigs=Sets.newHashSet();
  proguardConfigs.addAll(deps.proguardConfigs);
  if (proguardConfig != null) {
    proguardConfigs.add(proguardConfig);
  }
  ImmutableMap.Builder<String,String> inputOutputEntriesBuilder=ImmutableMap.builder();
  for (  String classpathEntry : classpathEntries) {
    inputOutputEntriesBuilder.put(classpathEntry,getProguardOutputFromInputClasspath(classpathEntry));
  }
  final Map<String,String> inputOutputEntries=inputOutputEntriesBuilder.build();
  ProGuardObfuscateStep obfuscateCommand=new ProGuardObfuscateStep(generatedProGuardConfig,proguardConfigs,useAndroidProguardConfigWithOptimizations,inputOutputEntries,additionalLibraryJarsForProguard,proguardDirectory);
  commands.add(obfuscateCommand);
  deps.applyClasspathTransformation(new AndroidTransitiveDependencies.InputTransformation(){
    @Override public String apply(    String originalClasspath){
      return inputOutputEntries.get(originalClasspath);
    }
  }
);
}
