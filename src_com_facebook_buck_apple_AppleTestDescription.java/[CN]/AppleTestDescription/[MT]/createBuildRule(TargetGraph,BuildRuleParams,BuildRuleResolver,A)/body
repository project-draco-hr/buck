{
  AppleDebugFormat debugFormat=AppleDebugFormat.FLAVOR_DOMAIN.getValue(params.getBuildTarget()).or(defaultDebugFormat);
  if (params.getBuildTarget().getFlavors().contains(debugFormat.getFlavor())) {
    params=params.withoutFlavor(debugFormat.getFlavor());
  }
  String extension=args.extension.isLeft() ? args.extension.getLeft().toFileExtension() : args.extension.getRight();
  if (!AppleBundleExtensions.VALID_XCTOOL_BUNDLE_EXTENSIONS.contains(extension)) {
    throw new HumanReadableException("Invalid bundle extension for apple_test rule: %s (must be one of %s)",extension,AppleBundleExtensions.VALID_XCTOOL_BUNDLE_EXTENSIONS);
  }
  boolean createBundle=Sets.intersection(params.getBuildTarget().getFlavors(),NON_LIBRARY_FLAVORS).isEmpty();
  Sets.SetView<Flavor> nonLibraryFlavors=Sets.difference(params.getBuildTarget().getFlavors(),NON_LIBRARY_FLAVORS);
  boolean addDefaultPlatform=nonLibraryFlavors.isEmpty();
  ImmutableSet.Builder<Flavor> extraFlavorsBuilder=ImmutableSet.builder();
  if (createBundle) {
    extraFlavorsBuilder.add(LIBRARY_FLAVOR,CxxDescriptionEnhancer.MACH_O_BUNDLE_FLAVOR);
  }
  extraFlavorsBuilder.add(debugFormat.getFlavor());
  if (addDefaultPlatform) {
    extraFlavorsBuilder.add(defaultCxxPlatform.getFlavor());
  }
  CxxPlatform cxxPlatform=cxxPlatformFlavorDomain.getValue(params.getBuildTarget()).or(defaultCxxPlatform);
  Optional<AppleBundle> testHostApp;
  Optional<SourcePath> testHostAppBinarySourcePath;
  ImmutableSet<BuildTarget> blacklist;
  if (args.testHostApp.isPresent()) {
    BuildRule rule=resolver.requireRule(BuildTarget.builder(args.testHostApp.get()).addAllFlavors(nonLibraryFlavors).addFlavors(debugFormat.getFlavor()).addFlavors(StripStyle.NON_GLOBAL_SYMBOLS.getFlavor()).build());
    if (!(rule instanceof AppleBundle)) {
      throw new HumanReadableException("Apple test rule '%s' has test_host_app '%s' not of type '%s'.",params.getBuildTarget(),args.testHostApp.get(),AppleBundleDescription.TYPE);
    }
    testHostApp=Optional.of((AppleBundle)rule);
    testHostAppBinarySourcePath=Optional.<SourcePath>of(new BuildTargetSourcePath(testHostApp.get().getBinaryBuildRule().getBuildTarget()));
    ImmutableMap<BuildTarget,NativeLinkable> roots=NativeLinkables.getNativeLinkableRoots(testHostApp.get().getBinary().get().getDeps(),Predicates.alwaysTrue());
    ImmutableMap<BuildTarget,NativeLinkable> nativeLinkables=NativeLinkables.getTransitiveNativeLinkables(cxxPlatform,roots.values());
    blacklist=ImmutableSet.copyOf(nativeLinkables.keySet());
  }
 else {
    testHostApp=Optional.absent();
    testHostAppBinarySourcePath=Optional.absent();
    blacklist=ImmutableSet.of();
  }
  BuildTarget libraryTarget=params.getBuildTarget().withAppendedFlavors(extraFlavorsBuilder.build()).withAppendedFlavors(debugFormat.getFlavor());
  BuildRule library=createTestLibraryRule(params,resolver,args,testHostAppBinarySourcePath,blacklist,libraryTarget);
  if (!createBundle) {
    return library;
  }
  AppleCxxPlatform appleCxxPlatform;
  try {
    appleCxxPlatform=appleCxxPlatformFlavorDomain.getValue(cxxPlatform.getFlavor());
  }
 catch (  FlavorDomainException e) {
    throw new HumanReadableException(e,"%s: Apple test requires an Apple platform, found '%s'",params.getBuildTarget(),cxxPlatform.getFlavor().getName());
  }
  AppleBundleResources resources=AppleResources.collectResourceDirsAndFiles(targetGraph,Preconditions.checkNotNull(targetGraph.get(params.getBuildTarget())));
  SourcePathResolver sourcePathResolver=new SourcePathResolver(resolver);
  Optional<AppleAssetCatalog> assetCatalog=AppleDescriptions.createBuildRuleForTransitiveAssetCatalogDependencies(targetGraph,params,sourcePathResolver,appleCxxPlatform.getAppleSdk().getApplePlatform(),appleCxxPlatform.getActool());
  String platformName=appleCxxPlatform.getAppleSdk().getApplePlatform().getName();
  BuildRule bundle=AppleDescriptions.createAppleBundle(cxxPlatformFlavorDomain,defaultCxxPlatform,appleCxxPlatformFlavorDomain,targetGraph,params.copyWithChanges(params.getBuildTarget().withAppendedFlavors(BUNDLE_FLAVOR,debugFormat.getFlavor(),AppleDescriptions.NO_INCLUDE_FRAMEWORKS_FLAVOR),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().add(library).addAll(assetCatalog.asSet()).addAll(params.getDeclaredDeps().get()).addAll(BuildRules.toBuildRulesFor(params.getBuildTarget(),resolver,SourcePaths.filterBuildTargetSourcePaths(resources.getAll()))).build()),params.getExtraDeps()),resolver,codeSignIdentityStore,provisioningProfileStore,library.getBuildTarget(),args.getExtension(),Optional.<String>absent(),args.infoPlist,args.infoPlistSubstitutions,args.deps.get(),args.getTests(),debugFormat);
  Optional<SourcePath> xctool;
  if (appleConfig.getXctoolZipTarget().isPresent()) {
    final BuildRule xctoolZipBuildRule=resolver.getRule(appleConfig.getXctoolZipTarget().get());
    BuildTarget unzipXctoolTarget=BuildTarget.builder(xctoolZipBuildRule.getBuildTarget()).addFlavors(UNZIP_XCTOOL_FLAVOR).build();
    final Path outputDirectory=BuildTargets.getGenPath(unzipXctoolTarget,"%s/unzipped");
    if (!resolver.getRuleOptional(unzipXctoolTarget).isPresent()) {
      BuildRuleParams unzipXctoolParams=params.copyWithChanges(unzipXctoolTarget,Suppliers.ofInstance(ImmutableSortedSet.of(xctoolZipBuildRule)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
      resolver.addToIndex(new AbstractBuildRule(unzipXctoolParams,sourcePathResolver){
        @Override public ImmutableList<Step> getBuildSteps(        BuildContext context,        BuildableContext buildableContext){
          buildableContext.recordArtifact(outputDirectory);
          return ImmutableList.of(new MakeCleanDirectoryStep(getProjectFilesystem(),outputDirectory),new UnzipStep(getProjectFilesystem(),Preconditions.checkNotNull(xctoolZipBuildRule.getPathToOutput()),outputDirectory));
        }
        @Override public Path getPathToOutput(){
          return outputDirectory;
        }
      }
);
    }
    xctool=Optional.<SourcePath>of(new BuildTargetSourcePath(unzipXctoolTarget,outputDirectory.resolve("bin/xctool")));
  }
 else   if (appleConfig.getXctoolPath().isPresent()) {
    xctool=Optional.<SourcePath>of(new PathSourcePath(params.getProjectFilesystem(),appleConfig.getXctoolPath().get()));
  }
 else {
    xctool=Optional.absent();
  }
  return new AppleTest(xctool,appleConfig.getXctoolStutterTimeoutMs(),appleCxxPlatform.getXctest(),appleCxxPlatform.getOtest(),appleConfig.getXctestPlatformNames().contains(platformName),platformName,appleConfig.getXctoolDefaultDestinationSpecifier(),args.destinationSpecifier,params.copyWithDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(bundle)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),sourcePathResolver,bundle,testHostApp,extension,args.contacts.get(),args.labels.get(),args.getRunTestSeparately(),xcodeDeveloperDirectorySupplier,appleConfig.getTestLogDirectoryEnvironmentVariable(),appleConfig.getTestLogLevelEnvironmentVariable(),appleConfig.getTestLogLevel());
}
