{
  String extension=args.extension.isLeft() ? args.extension.getLeft().toFileExtension() : args.extension.getRight();
  if (!AppleBundleExtensions.VALID_XCTOOL_BUNDLE_EXTENSIONS.contains(extension)) {
    throw new HumanReadableException("Invalid bundle extension for apple_test rule: %s (must be one of %s)",extension,AppleBundleExtensions.VALID_XCTOOL_BUNDLE_EXTENSIONS);
  }
  boolean createBundle=Sets.intersection(params.getBuildTarget().getFlavors(),NON_LIBRARY_FLAVORS).isEmpty();
  Sets.SetView<Flavor> nonLibraryFlavors=Sets.difference(params.getBuildTarget().getFlavors(),NON_LIBRARY_FLAVORS);
  boolean addDefaultPlatform=nonLibraryFlavors.isEmpty();
  ImmutableSet.Builder<Flavor> extraFlavorsBuilder=ImmutableSet.builder();
  if (createBundle) {
    extraFlavorsBuilder.add(LIBRARY_FLAVOR,CxxDescriptionEnhancer.MACH_O_BUNDLE_FLAVOR);
  }
  if (addDefaultPlatform) {
    extraFlavorsBuilder.add(defaultCxxPlatform.getFlavor());
  }
  CxxPlatform cxxPlatform=cxxPlatformFlavorDomain.getValue(params.getBuildTarget()).or(defaultCxxPlatform);
  Optional<AppleBundle> testHostApp;
  Optional<SourcePath> testHostAppBinarySourcePath;
  ImmutableSet<BuildTarget> blacklist;
  if (args.testHostApp.isPresent()) {
    TargetNode<?> testHostAppNode=targetGraph.get(args.testHostApp.get());
    Preconditions.checkNotNull(testHostAppNode);
    if (testHostAppNode.getType() != AppleBundleDescription.TYPE) {
      throw new HumanReadableException("Apple test rule %s has unrecognized test_host_app %s type %s (should be %s)",params.getBuildTarget(),args.testHostApp.get(),testHostAppNode.getType(),AppleBundleDescription.TYPE);
    }
    AppleBundleDescription.Arg testHostAppDescription=(AppleBundleDescription.Arg)testHostAppNode.getConstructorArg();
    testHostApp=Optional.of(appleBundleDescription.createBuildRule(targetGraph,params.copyWithChanges(BuildTarget.builder(args.testHostApp.get()).addAllFlavors(nonLibraryFlavors).build(),Suppliers.ofInstance(BuildRules.toBuildRulesFor(args.testHostApp.get(),resolver,testHostAppNode.getDeclaredDeps())),Suppliers.ofInstance(BuildRules.toBuildRulesFor(args.testHostApp.get(),resolver,testHostAppNode.getExtraDeps()))),resolver,testHostAppDescription).getAppleBundle());
    testHostAppBinarySourcePath=Optional.<SourcePath>of(new BuildTargetSourcePath(testHostAppDescription.binary));
    ImmutableMap<BuildTarget,NativeLinkable> roots=NativeLinkables.getNativeLinkableRoots(testHostApp.get().getBinary().get().getDeps(),Predicates.alwaysTrue());
    ImmutableMap<BuildTarget,NativeLinkable> nativeLinkables=NativeLinkables.getTransitiveNativeLinkables(cxxPlatform,roots.values());
    blacklist=ImmutableSet.copyOf(nativeLinkables.keySet());
  }
 else {
    testHostApp=Optional.absent();
    testHostAppBinarySourcePath=Optional.absent();
    blacklist=ImmutableSet.of();
  }
  BuildRule library=appleLibraryDescription.createBuildRule(params.copyWithChanges(BuildTarget.builder(params.getBuildTarget()).addAllFlavors(extraFlavorsBuilder.build()).build(),params.getDeclaredDeps(),params.getExtraDeps()),resolver,args,Optional.of(Linker.LinkableDepType.STATIC),testHostAppBinarySourcePath,blacklist);
  if (!createBundle) {
    return library;
  }
  AppleCxxPlatform appleCxxPlatform=platformFlavorsToAppleCxxPlatforms.get(cxxPlatform.getFlavor());
  if (appleCxxPlatform == null) {
    throw new HumanReadableException("%s: Apple test requires an Apple platform, found '%s'",params.getBuildTarget(),cxxPlatform.getFlavor().getName());
  }
  AppleBundleDestinations destinations=AppleBundleDestinations.platformDestinations(appleCxxPlatform.getAppleSdk().getApplePlatform());
  SourcePathResolver sourcePathResolver=new SourcePathResolver(resolver);
  ImmutableSet.Builder<SourcePath> resourceDirsBuilder=ImmutableSet.builder();
  ImmutableSet.Builder<SourcePath> dirsContainingResourceDirsBuilder=ImmutableSet.builder();
  ImmutableSet.Builder<SourcePath> resourceFilesBuilder=ImmutableSet.builder();
  ImmutableSet.Builder<SourcePath> resourceVariantFilesBuilder=ImmutableSet.builder();
  AppleResources.collectResourceDirsAndFiles(targetGraph,Preconditions.checkNotNull(targetGraph.get(params.getBuildTarget())),resourceDirsBuilder,dirsContainingResourceDirsBuilder,resourceFilesBuilder,resourceVariantFilesBuilder);
  ImmutableSet<SourcePath> resourceDirs=resourceDirsBuilder.build();
  ImmutableSet<SourcePath> dirsContainingResourceDirs=dirsContainingResourceDirsBuilder.build();
  ImmutableSet<SourcePath> resourceFiles=resourceFilesBuilder.build();
  ImmutableSet<SourcePath> resourceVariantFiles=resourceVariantFilesBuilder.build();
  Optional<AppleAssetCatalog> assetCatalog=AppleDescriptions.createBuildRuleForTransitiveAssetCatalogDependencies(targetGraph,params,sourcePathResolver,appleCxxPlatform.getAppleSdk().getApplePlatform(),appleCxxPlatform.getActool());
  String platformName=appleCxxPlatform.getAppleSdk().getApplePlatform().getName();
  BuildRule bundle=new AppleBundle(params.copyWithChanges(BuildTarget.builder(params.getBuildTarget()).addFlavors(BUNDLE_FLAVOR).build(),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().add(library).addAll(assetCatalog.asSet()).addAll(params.getDeclaredDeps().get()).addAll(BuildRules.toBuildRulesFor(params.getBuildTarget(),resolver,SourcePaths.filterBuildTargetSourcePaths(Iterables.concat(resourceFiles,resourceDirs,dirsContainingResourceDirs,resourceVariantFiles)))).build()),params.getExtraDeps()),sourcePathResolver,args.extension,args.productName,args.infoPlist,args.infoPlistSubstitutions.get(),Optional.of(library),destinations,resourceDirs,resourceFiles,dirsContainingResourceDirsBuilder.build(),ImmutableMap.<SourcePath,String>of(),Optional.of(resourceVariantFiles),ImmutableSet.<SourcePath>of(),appleCxxPlatform.getIbtool(),assetCatalog,ImmutableSortedSet.<BuildTarget>of(),appleCxxPlatform.getAppleSdk(),codeSignIdentityStore,appleCxxPlatform.getCodesignAllocate(),provisioningProfileStore);
  Optional<SourcePath> xctool;
  if (appleConfig.getXctoolZipTarget().isPresent()) {
    final BuildRule xctoolZipBuildRule=resolver.getRule(appleConfig.getXctoolZipTarget().get());
    BuildTarget unzipXctoolTarget=BuildTarget.builder(xctoolZipBuildRule.getBuildTarget()).addFlavors(UNZIP_XCTOOL_FLAVOR).build();
    final Path outputDirectory=BuildTargets.getGenPath(unzipXctoolTarget,"%s/unzipped");
    if (!resolver.getRuleOptional(unzipXctoolTarget).isPresent()) {
      BuildRuleParams unzipXctoolParams=params.copyWithChanges(unzipXctoolTarget,Suppliers.ofInstance(ImmutableSortedSet.of(xctoolZipBuildRule)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
      resolver.addToIndex(new AbstractBuildRule(unzipXctoolParams,sourcePathResolver){
        @Override public ImmutableList<Step> getBuildSteps(        BuildContext context,        BuildableContext buildableContext){
          buildableContext.recordArtifact(outputDirectory);
          return ImmutableList.of(new MakeCleanDirectoryStep(getProjectFilesystem(),outputDirectory),new UnzipStep(getProjectFilesystem(),Preconditions.checkNotNull(xctoolZipBuildRule.getPathToOutput()),outputDirectory));
        }
        @Override public Path getPathToOutput(){
          return outputDirectory;
        }
      }
);
    }
    xctool=Optional.<SourcePath>of(new BuildTargetSourcePath(unzipXctoolTarget,outputDirectory.resolve("bin/xctool")));
  }
 else   if (appleConfig.getXctoolPath().isPresent()) {
    xctool=Optional.<SourcePath>of(new PathSourcePath(params.getProjectFilesystem(),appleConfig.getXctoolPath().get()));
  }
 else {
    xctool=Optional.absent();
  }
  return new AppleTest(xctool,appleConfig.getXctoolStutterTimeoutMs(),appleCxxPlatform.getXctest(),appleCxxPlatform.getOtest(),appleConfig.getXctestPlatformNames().contains(platformName),platformName,appleConfig.getXctoolDefaultDestinationSpecifier(),args.destinationSpecifier,params.copyWithDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(bundle)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),sourcePathResolver,bundle,testHostApp,extension,args.contacts.get(),args.labels.get(),args.getRunTestSeparately(),xcodeDeveloperDirectorySupplier,appleConfig.getTestLogDirectoryEnvironmentVariable(),appleConfig.getTestLogLevelEnvironmentVariable(),appleConfig.getTestLogLevel());
}
