{
  AppleDebugFormat debugFormat=AppleDebugFormat.FLAVOR_DOMAIN.getValue(params.getBuildTarget()).or(defaultDebugFormat);
  if (params.getBuildTarget().getFlavors().contains(debugFormat.getFlavor())) {
    params=params.withoutFlavor(debugFormat.getFlavor());
  }
  if (!AppleBundleExtensions.VALID_XCTOOL_BUNDLE_EXTENSIONS.contains(args.extension.toFileExtension())) {
    throw new HumanReadableException("Invalid bundle extension for apple_test rule: %s (must be one of %s)",args.extension,AppleBundleExtensions.VALID_XCTOOL_BUNDLE_EXTENSIONS);
  }
  boolean createBundle=Sets.intersection(params.getBuildTarget().getFlavors(),AUXILIARY_LIBRARY_FLAVORS).isEmpty();
  Sets.SetView<Flavor> libraryFlavors=Sets.difference(params.getBuildTarget().getFlavors(),AUXILIARY_LIBRARY_FLAVORS);
  boolean addDefaultPlatform=libraryFlavors.isEmpty();
  ImmutableSet.Builder<Flavor> extraFlavorsBuilder=ImmutableSet.builder();
  if (createBundle) {
    extraFlavorsBuilder.add(LIBRARY_FLAVOR,CxxDescriptionEnhancer.MACH_O_BUNDLE_FLAVOR);
  }
  extraFlavorsBuilder.add(debugFormat.getFlavor());
  if (addDefaultPlatform) {
    extraFlavorsBuilder.add(defaultCxxPlatform.getFlavor());
  }
  CxxPlatform cxxPlatform=cxxPlatformFlavorDomain.getValue(params.getBuildTarget()).or(defaultCxxPlatform);
  Optional<TestHostInfo> testHostInfo;
  if (args.testHostApp.isPresent()) {
    testHostInfo=Optional.of(createTestHostInfo(params,resolver,args.testHostApp.get(),debugFormat,libraryFlavors,cxxPlatform));
  }
 else {
    testHostInfo=Optional.absent();
  }
  BuildTarget libraryTarget=params.getBuildTarget().withAppendedFlavors(extraFlavorsBuilder.build()).withAppendedFlavors(debugFormat.getFlavor());
  BuildRule library=createTestLibraryRule(params,resolver,args,testHostInfo.transform(TestHostInfo.GET_TEST_HOST_APP_BINARY_SOURCE_PATH_FUNCTION),testHostInfo.transform(TestHostInfo.GET_BLACKLIST_FUNCTION).or(ImmutableSet.<BuildTarget>of()),libraryTarget);
  if (!createBundle) {
    return library;
  }
  AppleCxxPlatform appleCxxPlatform;
  try {
    appleCxxPlatform=appleCxxPlatformFlavorDomain.getValue(cxxPlatform.getFlavor());
  }
 catch (  FlavorDomainException e) {
    throw new HumanReadableException(e,"%s: Apple test requires an Apple platform, found '%s'",params.getBuildTarget(),cxxPlatform.getFlavor().getName());
  }
  SourcePathResolver sourcePathResolver=new SourcePathResolver(resolver);
  String platformName=appleCxxPlatform.getAppleSdk().getApplePlatform().getName();
  BuildRule bundle=AppleDescriptions.createAppleBundle(cxxPlatformFlavorDomain,defaultCxxPlatform,appleCxxPlatformFlavorDomain,targetGraph,params.copyWithChanges(params.getBuildTarget().withAppendedFlavors(BUNDLE_FLAVOR,debugFormat.getFlavor(),AppleDescriptions.NO_INCLUDE_FRAMEWORKS_FLAVOR),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().add(library).addAll(params.getDeclaredDeps().get()).build()),params.getExtraDeps()),resolver,codeSignIdentityStore,provisioningProfileStore,library.getBuildTarget(),args.getExtension(),Optional.<String>absent(),args.infoPlist,args.infoPlistSubstitutions,args.deps.get(),args.getTests(),debugFormat);
  Optional<SourcePath> xctool=getXctool(params,resolver,sourcePathResolver);
  return new AppleTest(xctool,appleConfig.getXctoolStutterTimeoutMs(),appleCxxPlatform.getXctest(),appleCxxPlatform.getOtest(),appleConfig.getXctestPlatformNames().contains(platformName),platformName,appleConfig.getXctoolDefaultDestinationSpecifier(),args.destinationSpecifier,params.copyWithDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(bundle)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),sourcePathResolver,bundle,testHostInfo.transform(TestHostInfo.GET_TEST_HOST_APP_FUNCTION),args.extension,args.contacts.get(),args.labels.get(),args.getRunTestSeparately(),xcodeDeveloperDirectorySupplier,appleConfig.getTestLogDirectoryEnvironmentVariable(),appleConfig.getTestLogLevelEnvironmentVariable(),appleConfig.getTestLogLevel());
}
