{
  Path tmp=filesystem.getRootPath();
  Files.createDirectories(tmp.resolve("folder_a"));
  Files.write(tmp.resolve("folder_a/a.txt"),"".getBytes(UTF_8));
  Files.write(tmp.resolve("folder_a/b.txt"),"".getBytes(UTF_8));
  Files.createDirectories(tmp.resolve("folder_b"));
  Files.write(tmp.resolve("folder_b/c.txt"),"".getBytes(UTF_8));
  Files.write(tmp.resolve("folder_b/d.txt"),"".getBytes(UTF_8));
  BuildTarget target=BuildTargetFactory.newInstance(filesystem.getRootPath(),"//:output_folder");
  BuildRuleParams buildRuleParams=new FakeBuildRuleParamsBuilder(target).setProjectFilesystem(filesystem).build();
  ImmutableList<SourcePath> directories=ImmutableList.<SourcePath>of(new FakeSourcePath(filesystem,"folder_a"),new FakeSourcePath(filesystem,"folder_b"));
  AssembleDirectories assembleDirectories=new AssembleDirectories(buildRuleParams,new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer())),directories);
  ImmutableList<Step> steps=assembleDirectories.getBuildSteps(FakeBuildContext.NOOP_CONTEXT,new FakeBuildableContext());
  for (  Step step : steps) {
    assertEquals(0,step.execute(context));
  }
  Path outputFile=filesystem.resolve(assembleDirectories.getPathToOutput());
  try (DirectoryStream<Path> dir=Files.newDirectoryStream(outputFile)){
    assertEquals(4,Iterables.size(dir));
  }
 }
