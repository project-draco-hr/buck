{
  try {
    Optional<? extends Map<String,? extends Object>> queryResponse=watchmanClient.queryWithTimeout(TimeUnit.MILLISECONDS.toNanos(timeoutMillis),query.toArray());
    if (!queryResponse.isPresent()) {
      LOG.warn("Could get response from Watchman for query %s within %d ms",query,timeoutMillis);
      postWatchEvent(createOverflowEvent("Query to Watchman timed out after " + timeoutMillis + "ms"));
      return;
    }
    Map<String,? extends Object> response=queryResponse.get();
    String error=(String)response.get("error");
    if (error != null) {
      watchmanDiagnosticCache.addDiagnostic(WatchmanDiagnostic.of(WatchmanDiagnostic.Level.ERROR,error));
      WatchmanWatcherException e=new WatchmanWatcherException(error);
      LOG.error(e,"Error in Watchman output. Posting an overflow event to flush the caches");
      postWatchEvent(createOverflowEvent("Watchman Error occurred - " + e.getMessage()));
      throw e;
    }
    String warning=(String)response.get("warning");
    if (warning != null) {
switch (watchmanDiagnosticCache.addDiagnostic(WatchmanDiagnostic.of(WatchmanDiagnostic.Level.WARNING,warning))) {
case NEW_DIAGNOSTIC:
        buckEventBus.post(ConsoleEvent.warning("Watchman has produced a warning: %s",warning));
      LOG.warn("Watchman has produced a warning: %s",warning);
    break;
case DUPLICATE_DIAGNOSTIC:
  LOG.verbose("Watchman has produced a duplicate warning: %s",warning);
break;
}
}
Boolean isFreshInstance=(Boolean)response.get("is_fresh_instance");
if (isFreshInstance != null && isFreshInstance) {
LOG.debug("Watchman indicated a fresh instance (fresh instance action %s)",freshInstanceAction);
switch (freshInstanceAction) {
case NONE:
break;
case POST_OVERFLOW_EVENT:
postWatchEvent(createOverflowEvent("New Buck instance"));
break;
}
return;
}
List<Map<String,Object>> files=(List<Map<String,Object>>)response.get("files");
if (files != null) {
if (files.size() > overflow) {
String message="Too many changed files (" + files.size() + " > "+ overflow+ ")";
LOG.warn(message + ", posting overflow event");
postWatchEvent(createOverflowEvent(message));
return;
}
for (Map<String,Object> file : files) {
String fileName=(String)file.get("name");
if (fileName == null) {
LOG.warn("Filename missing from Watchman file response %s",file);
postWatchEvent(createOverflowEvent("Filename missing from Watchman response"));
return;
}
PathEventBuilder builder=new PathEventBuilder();
builder.setPath(Paths.get(fileName));
Boolean fileNew=(Boolean)file.get("new");
if (fileNew != null && fileNew) {
builder.setCreationEvent();
}
Boolean fileExists=(Boolean)file.get("exists");
if (fileExists != null && !fileExists) {
builder.setDeletionEvent();
}
postWatchEvent(builder.build());
}
LOG.debug("Posted %d Watchman events.",files.size());
}
}
 catch (InterruptedException e) {
String message="Watchman communication interrupted";
LOG.warn(e,message);
postWatchEvent(createOverflowEvent(message));
Thread.currentThread().interrupt();
throw e;
}
catch (IOException e) {
String message="I/O error talking to Watchman";
LOG.error(e,message);
postWatchEvent(createOverflowEvent(message + " - " + e.getMessage()));
throw e;
}
}
