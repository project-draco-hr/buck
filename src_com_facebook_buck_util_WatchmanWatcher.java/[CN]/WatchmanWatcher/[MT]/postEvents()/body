{
  Process watchmanProcess=watchmanProcessSupplier.get();
  watchmanProcess.getOutputStream().write(query.getBytes(Charsets.US_ASCII));
  watchmanProcess.getOutputStream().close();
  JsonParser jsonParser=jsonFactory.createJsonParser(watchmanProcess.getInputStream());
  PathEventBuilder builder=new PathEventBuilder();
  JsonToken token=jsonParser.nextToken();
  int eventCount=0;
  while (token != null) {
    if (eventCount > overflow) {
      eventBus.post(createOverflowEvent());
      return;
    }
switch (token) {
case FIELD_NAME:
      String fieldName=jsonParser.getCurrentName();
switch (fieldName) {
case "name":
      File file=new File(jsonParser.nextTextValue());
    if (!file.isDirectory()) {
      builder.setPath(file.toPath());
    }
  break;
case "new":
if (jsonParser.nextBooleanValue()) {
  builder.setCreationEvent();
}
break;
case "exists":
if (!jsonParser.nextBooleanValue()) {
builder.setDeletionEvent();
}
break;
}
break;
case END_OBJECT:
if (builder.canBuild()) {
eventBus.post(builder.build());
++eventCount;
}
builder=new PathEventBuilder();
break;
default :
break;
}
token=jsonParser.nextToken();
}
int watchmanExitCode;
try {
watchmanExitCode=watchmanProcess.waitFor();
}
 catch (InterruptedException e) {
throw Throwables.propagate(e);
}
if (watchmanExitCode != 0) {
ByteArrayOutputStream buffer=new ByteArrayOutputStream();
ByteStreams.copy(watchmanProcess.getErrorStream(),buffer);
throw new RuntimeException("Watchman failed with exit code " + watchmanExitCode + ": "+ buffer.toString());
}
}
