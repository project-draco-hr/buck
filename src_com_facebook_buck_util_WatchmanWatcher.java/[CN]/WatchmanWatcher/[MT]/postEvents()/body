{
  Process watchmanProcess=watchmanProcessSupplier.get();
  try {
    watchmanProcess.getOutputStream().write(query.getBytes(Charsets.US_ASCII));
    watchmanProcess.getOutputStream().close();
    JsonParser jsonParser=jsonFactory.createJsonParser(watchmanProcess.getInputStream());
    PathEventBuilder builder=new PathEventBuilder();
    JsonToken token=jsonParser.nextToken();
    int eventCount=0;
    while (token != null) {
      if (eventCount > overflow) {
        eventBus.post(createOverflowEvent());
        watchmanProcess.destroy();
        return;
      }
switch (token) {
case FIELD_NAME:
        String fieldName=jsonParser.getCurrentName();
switch (fieldName) {
case "name":
        File file=new File(jsonParser.nextTextValue());
      if (!file.isDirectory()) {
        builder.setPath(file.toPath());
      }
    break;
case "new":
  if (jsonParser.nextBooleanValue()) {
    builder.setCreationEvent();
  }
break;
case "exists":
if (!jsonParser.nextBooleanValue()) {
builder.setDeletionEvent();
}
break;
case "error":
throw new WatchmanWatcherException(jsonParser.nextTextValue());
}
break;
case END_OBJECT:
if (builder.canBuild()) {
eventBus.post(builder.build());
++eventCount;
}
builder=new PathEventBuilder();
break;
default :
break;
}
token=jsonParser.nextToken();
}
int watchmanExitCode;
watchmanExitCode=watchmanProcess.waitFor();
if (watchmanExitCode != 0) {
eventBus.post(createOverflowEvent());
ByteArrayOutputStream buffer=new ByteArrayOutputStream();
ByteStreams.copy(watchmanProcess.getErrorStream(),buffer);
throw new WatchmanWatcherException("Watchman failed with exit code " + watchmanExitCode + ": "+ buffer.toString());
}
}
 catch (InterruptedException e) {
eventBus.post(createOverflowEvent());
watchmanProcess.destroy();
Thread.currentThread().interrupt();
}
catch (IOException e) {
eventBus.post(createOverflowEvent());
watchmanProcess.destroy();
throw e;
}
}
