{
  List<Object> queryParams=new ArrayList<>();
  queryParams.add("query");
  queryParams.add(watchRoot);
  Map<String,Object> sinceParams=new LinkedHashMap<>();
  sinceParams.put("since",new StringBuilder("n:buckd").append(uuid).toString());
  List<Object> excludeAnyOf=Lists.<Object>newArrayList("anyof");
  excludeAnyOf.add(Lists.newArrayList("type","d"));
  Path projectRoot=Paths.get(watchRoot);
  if (watchPrefix.isPresent()) {
    projectRoot=projectRoot.resolve(watchPrefix.get());
  }
  for (  Path ignorePath : ignorePaths) {
    if (ignorePath.isAbsolute()) {
      ignorePath=MorePaths.relativize(projectRoot,ignorePath);
    }
    if (watchmanCapabilities.contains(Capability.DIRNAME)) {
      excludeAnyOf.add(Lists.newArrayList("dirname",ignorePath.toString()));
    }
 else {
      excludeAnyOf.add(Lists.newArrayList("match",ignorePath.toString() + File.separator + "*","wholename"));
    }
  }
  for (  String ignoreGlob : ignoreGlobs) {
    excludeAnyOf.add(Lists.newArrayList("match",ignoreGlob));
  }
  sinceParams.put("expression",Lists.newArrayList("not",excludeAnyOf));
  sinceParams.put("empty_on_fresh_instance",true);
  sinceParams.put("fields",Lists.newArrayList("name","exists","new"));
  if (watchPrefix.isPresent()) {
    sinceParams.put("relative_root",watchPrefix.get());
  }
  queryParams.add(sinceParams);
  return queryParams;
}
