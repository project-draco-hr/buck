{
  EnumSet<Capability> watchmanCapabilities=EnumSet.noneOf(Capability.class);
  try {
    ProcessExecutor.LaunchedProcess watchmanVersionProcess=processExecutor.launchProcess(ProcessExecutorParams.builder().addCommand("watchman","version").build());
    Map<String,String> watchmanVersionOutput=objectMapper.readValue(watchmanVersionProcess.getInputStream(),new TypeReference<Map<String,String>>(){
    }
);
    int exitCode=processExecutor.waitForLaunchedProcess(watchmanVersionProcess);
    if (exitCode != 0) {
      LOG.error("Error %d executing watchman version",exitCode);
    }
 else {
      Optional<String> version=Optional.fromNullable(watchmanVersionOutput.get("version"));
      if (version.isPresent()) {
        VersionStringComparator comparator=new VersionStringComparator();
        if (comparator.compare(version.get(),WATCHMAN_DIRNAME_MIN_VERSION) >= 0) {
          watchmanCapabilities.add(Capability.DIRNAME);
        }
        if (comparator.compare(version.get(),WATCHMAN_WILDMATCH_GLOB_MIN_VERSION) >= 0) {
          watchmanCapabilities.add(Capability.WILDMATCH_GLOB);
        }
      }
 else {
        LOG.warn("No version present in watchman version output: %s",watchmanVersionOutput);
      }
    }
  }
 catch (  IOException e) {
    LOG.error(e,"Could not check if Watchman is available");
  }
  return Sets.immutableEnumSet(watchmanCapabilities);
}
