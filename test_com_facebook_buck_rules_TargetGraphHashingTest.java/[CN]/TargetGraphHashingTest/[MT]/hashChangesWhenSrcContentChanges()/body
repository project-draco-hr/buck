{
  FakeProjectFilesystem projectFilesystem=new FakeProjectFilesystem();
  TestCellBuilder cellBuilder=new TestCellBuilder().setFilesystem(projectFilesystem);
  TargetNode<?> node=createJavaLibraryTargetNodeWithSrcs(BuildTargetFactory.newInstance("//foo:lib"),HashCode.fromLong(64738),ImmutableSet.of(Paths.get("foo/FooLib.java")));
  TargetGraph targetGraph=TargetGraphFactory.newInstance(node);
  FileHashCache baseCache=new FakeFileHashCache(ImmutableMap.of(projectFilesystem.resolve("foo/FooLib.java"),HashCode.fromString("abcdef")));
  FileHashCache modifiedCache=new FakeFileHashCache(ImmutableMap.of(projectFilesystem.resolve("foo/FooLib.java"),HashCode.fromString("abc1ef")));
  Map<TargetNode<?>,HashCode> baseResult=TargetGraphHashing.hashTargetGraph(cellBuilder.build(),targetGraph,baseCache,ImmutableList.<TargetNode<?>>of(node));
  Map<TargetNode<?>,HashCode> modifiedResult=TargetGraphHashing.hashTargetGraph(cellBuilder.build(),targetGraph,modifiedCache,ImmutableList.<TargetNode<?>>of(node));
  assertThat(baseResult,aMapWithSize(1));
  assertThat(baseResult,Matchers.<TargetNode<?>>hasKey(node));
  assertThat(modifiedResult,aMapWithSize(1));
  assertThat(modifiedResult,Matchers.<TargetNode<?>>hasKey(node));
  assertThat(modifiedResult.get(node),not(equalTo(baseResult.get(node))));
}
