{
  FakeProjectFilesystem projectFilesystem=new FakeProjectFilesystem();
  TargetNode<?> nodeA=createJavaLibraryTargetNodeWithSrcs(BuildTargetFactory.newInstance("//foo:lib"),HashCode.fromLong(64738),ImmutableSet.of(Paths.get("foo/FooLib.java")));
  TargetNode<?> nodeB=createJavaLibraryTargetNodeWithSrcs(BuildTargetFactory.newInstance("//bar:lib"),HashCode.fromLong(49152),ImmutableSet.of(Paths.get("bar/BarLib.java")));
  TargetGraph targetGraphA=TargetGraphFactory.newInstance(nodeA);
  TargetGraph targetGraphB=TargetGraphFactory.newInstance(nodeB);
  TargetGraph commonTargetGraph=TargetGraphFactory.newInstance(nodeA,nodeB);
  FileHashCache fileHashCache=new FakeFileHashCache(ImmutableMap.of(Paths.get("foo/FooLib.java"),HashCode.fromString("abcdef"),Paths.get("bar/BarLib.java"),HashCode.fromString("123456")));
  Map<BuildTarget,HashCode> resultsA=TargetGraphHashing.hashTargetGraph(projectFilesystem,targetGraphA,fileHashCache,ImmutableList.of(nodeA.getBuildTarget()));
  Map<BuildTarget,HashCode> resultsB=TargetGraphHashing.hashTargetGraph(projectFilesystem,targetGraphB,fileHashCache,ImmutableList.of(nodeB.getBuildTarget()));
  Map<BuildTarget,HashCode> commonResults=TargetGraphHashing.hashTargetGraph(projectFilesystem,commonTargetGraph,fileHashCache,ImmutableList.of(nodeA.getBuildTarget(),nodeB.getBuildTarget()));
  assertThat(resultsA,aMapWithSize(1));
  assertThat(resultsA,hasKey(nodeA.getBuildTarget()));
  assertThat(resultsB,aMapWithSize(1));
  assertThat(resultsB,hasKey(nodeB.getBuildTarget()));
  assertThat(commonResults,aMapWithSize(2));
  assertThat(commonResults,hasKey(nodeA.getBuildTarget()));
  assertThat(commonResults,hasKey(nodeB.getBuildTarget()));
  assertThat(resultsA.get(nodeA.getBuildTarget()),equalTo(commonResults.get(nodeA.getBuildTarget())));
  assertThat(resultsB.get(nodeB.getBuildTarget()),equalTo(commonResults.get(nodeB.getBuildTarget())));
}
