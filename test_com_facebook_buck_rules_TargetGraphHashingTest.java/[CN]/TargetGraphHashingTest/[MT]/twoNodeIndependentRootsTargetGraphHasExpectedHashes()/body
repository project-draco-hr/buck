{
  FakeProjectFilesystem projectFilesystem=new FakeProjectFilesystem();
  TestCellBuilder cellBuilder=new TestCellBuilder().setFilesystem(projectFilesystem);
  TargetNode<?> nodeA=createJavaLibraryTargetNodeWithSrcs(BuildTargetFactory.newInstance("//foo:lib"),HashCode.fromLong(64738),ImmutableSet.of(Paths.get("foo/FooLib.java")));
  TargetNode<?> nodeB=createJavaLibraryTargetNodeWithSrcs(BuildTargetFactory.newInstance("//bar:lib"),HashCode.fromLong(49152),ImmutableSet.of(Paths.get("bar/BarLib.java")));
  TargetGraph targetGraphA=TargetGraphFactory.newInstance(nodeA);
  TargetGraph targetGraphB=TargetGraphFactory.newInstance(nodeB);
  TargetGraph commonTargetGraph=TargetGraphFactory.newInstance(nodeA,nodeB);
  FileHashCache fileHashCache=new FakeFileHashCache(ImmutableMap.of(projectFilesystem.resolve("foo/FooLib.java"),HashCode.fromString("abcdef"),projectFilesystem.resolve("bar/BarLib.java"),HashCode.fromString("123456")));
  Map<TargetNode<?>,HashCode> resultsA=TargetGraphHashing.hashTargetGraph(cellBuilder.build(),targetGraphA,fileHashCache,ImmutableList.<TargetNode<?>>of(nodeA));
  Map<TargetNode<?>,HashCode> resultsB=TargetGraphHashing.hashTargetGraph(cellBuilder.build(),targetGraphB,fileHashCache,ImmutableList.<TargetNode<?>>of(nodeB));
  Map<TargetNode<?>,HashCode> commonResults=TargetGraphHashing.hashTargetGraph(cellBuilder.build(),commonTargetGraph,fileHashCache,ImmutableList.of(nodeA,nodeB));
  assertThat(resultsA,aMapWithSize(1));
  assertThat(resultsA,Matchers.<TargetNode<?>>hasKey(nodeA));
  assertThat(resultsB,aMapWithSize(1));
  assertThat(resultsB,Matchers.<TargetNode<?>>hasKey(nodeB));
  assertThat(commonResults,aMapWithSize(2));
  assertThat(commonResults,Matchers.<TargetNode<?>>hasKey(nodeA));
  assertThat(commonResults,Matchers.<TargetNode<?>>hasKey(nodeB));
  assertThat(resultsA.get(nodeA),equalTo(commonResults.get(nodeA)));
  assertThat(resultsB.get(nodeB),equalTo(commonResults.get(nodeB)));
}
