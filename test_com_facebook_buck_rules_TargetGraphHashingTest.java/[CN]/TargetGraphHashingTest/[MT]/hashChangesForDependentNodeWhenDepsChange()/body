{
  FakeProjectFilesystem projectFilesystem=new FakeProjectFilesystem();
  TestCellBuilder cellBuilder=new TestCellBuilder().setFilesystem(projectFilesystem);
  BuildTarget nodeTarget=BuildTargetFactory.newInstance("//foo:lib");
  BuildTarget depTarget=BuildTargetFactory.newInstance("//dep:lib");
  TargetGraph targetGraphA=createGraphWithANodeAndADep(nodeTarget,HashCode.fromLong(12345),depTarget,HashCode.fromLong(64738));
  TargetGraph targetGraphB=createGraphWithANodeAndADep(nodeTarget,HashCode.fromLong(12345),depTarget,HashCode.fromLong(84552));
  FileHashCache fileHashCache=new FakeFileHashCache(ImmutableMap.of(projectFilesystem.resolve("foo/FooLib.java"),HashCode.fromString("abcdef"),projectFilesystem.resolve("dep/DepLib.java"),HashCode.fromString("123456")));
  Map<BuildTarget,HashCode> resultA=TargetGraphHashing.hashTargetGraph(cellBuilder.build(),targetGraphA,fileHashCache,ImmutableList.<TargetNode<?>>of(targetGraphA.get(nodeTarget)));
  Map<BuildTarget,HashCode> resultB=TargetGraphHashing.hashTargetGraph(cellBuilder.build(),targetGraphB,fileHashCache,ImmutableList.<TargetNode<?>>of(targetGraphB.get(nodeTarget)));
  assertThat(resultA,aMapWithSize(2));
  assertThat(resultA,hasKey(nodeTarget));
  assertThat(resultA,hasKey(depTarget));
  assertThat(resultB,aMapWithSize(2));
  assertThat(resultB,hasKey(nodeTarget));
  assertThat(resultB,hasKey(depTarget));
  assertThat(resultA.get(nodeTarget),not(equalTo(resultB.get(nodeTarget))));
  assertThat(resultA.get(depTarget),not(equalTo(resultB.get(depTarget))));
}
