{
  int regSz=ssaMeth.getRegCount();
  final HashMap<TypedConstant,Integer> countUses=new HashMap<TypedConstant,Integer>();
  final HashSet<TypedConstant> usedByLocal=new HashSet<TypedConstant>();
  for (int i=0; i < regSz; i++) {
    SsaInsn insn=ssaMeth.getDefinitionForRegister(i);
    if (insn == null || insn.getOpcode() == null)     continue;
    RegisterSpec result=insn.getResult();
    TypeBearer typeBearer=result.getTypeBearer();
    if (!typeBearer.isConstant())     continue;
    TypedConstant cst=(TypedConstant)typeBearer;
    if (insn.getOpcode().getOpcode() == RegOps.MOVE_RESULT_PSEUDO) {
      int pred=insn.getBlock().getPredecessors().nextSetBit(0);
      ArrayList<SsaInsn> predInsns;
      predInsns=ssaMeth.getBlocks().get(pred).getInsns();
      insn=predInsns.get(predInsns.size() - 1);
    }
    if (insn.canThrow()) {
      if (!(cst instanceof CstString) || !COLLECT_STRINGS) {
        continue;
      }
      if (insn.getBlock().getSuccessors().cardinality() > 1) {
        continue;
      }
    }
    if (ssaMeth.isRegALocal(result)) {
      if (!COLLECT_ONE_LOCAL) {
        continue;
      }
 else {
        if (usedByLocal.contains(cst)) {
          continue;
        }
 else {
          usedByLocal.add(cst);
        }
      }
    }
    Integer has=countUses.get(cst);
    if (has == null) {
      countUses.put(cst,1);
    }
 else {
      countUses.put(cst,has + 1);
    }
  }
  ArrayList<TypedConstant> constantList=new ArrayList<TypedConstant>();
  for (  Map.Entry<TypedConstant,Integer> entry : countUses.entrySet()) {
    if (entry.getValue() > 1) {
      constantList.add(entry.getKey());
    }
  }
  Collections.sort(constantList,new Comparator<Constant>(){
    public int compare(    Constant a,    Constant b){
      int ret;
      ret=countUses.get(b) - countUses.get(a);
      if (ret == 0) {
        ret=a.compareTo(b);
      }
      return ret;
    }
    @Override public boolean equals(    Object obj){
      return obj == this;
    }
  }
);
  return constantList;
}
