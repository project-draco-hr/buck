{
  assumeThat(Platform.detect(),is(not(WINDOWS)));
  ProjectFilesystem filesystem=createFakeFilesystem("/Users/user/src");
  BuildTarget testBuildTarget=BuildTarget.builder().setUnflavoredBuildTarget(UnflavoredBuildTarget.of(filesystem.getRootPath(),Optional.<String>absent(),"//target","short")).addFlavors(CxxInferEnhancer.InferFlavors.INFER.get()).build();
  BuildRuleParams testBuildRuleParams=new FakeBuildRuleParamsBuilder(testBuildTarget).setProjectFilesystem(filesystem).build();
  BuildRuleResolver testBuildRuleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver testSourcePathResolver=new SourcePathResolver(testBuildRuleResolver);
  InferBuckConfig inferBuckConfig=new InferBuckConfig(FakeBuckConfig.builder().build());
  CxxInferCaptureAndAggregatingRules<CxxInferAnalyze> captureAndAggregatingRules=new CxxInferCaptureAndAggregatingRules<>(ImmutableSet.<CxxInferCapture>of(),ImmutableSet.<CxxInferAnalyze>of());
  CxxInferAnalyze analyzeRule=new CxxInferAnalyze(testBuildRuleParams,testSourcePathResolver,inferBuckConfig,captureAndAggregatingRules);
  Path outputFile=Paths.get("infer-deps.txt");
  CxxCollectAndLogInferDependenciesStep step=CxxCollectAndLogInferDependenciesStep.fromAnalyzeRule(analyzeRule,filesystem,outputFile);
  ExecutionContext executionContext=TestExecutionContext.newInstance();
  int exitCode=step.execute(executionContext).getExitCode();
  assertThat(exitCode,is(StepExecutionResult.SUCCESS.getExitCode()));
  String expectedOutput=InferLogLine.fromBuildTarget(testBuildTarget,analyzeRule.getAbsolutePathToResultsDir()).toString();
  assertEquals(expectedOutput + "\n",filesystem.readFileIfItExists(outputFile).get());
}
