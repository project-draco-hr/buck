{
  RuleKeyAppendableFunction<FrameworkPath,Path> defaultFrameworkPathSearchPathFunction=new RuleKeyAppendableFunction<FrameworkPath,Path>(){
    @Override public void appendToRuleKey(    RuleKeyObjectSink sink){
    }
    @Override public Path apply(    FrameworkPath input){
      return Paths.get("test","framework","path",input.toString());
    }
  }
;
  SourcePath preprocessor=new PathSourcePath(filesystem,Paths.get("preprocessor"));
  Tool preprocessorTool=new CommandTool.Builder().addInput(preprocessor).build();
  PreprocessorDelegate preprocessorDelegate=new PreprocessorDelegate(sourcePathResolver,CxxPlatformUtils.DEFAULT_DEBUG_PATH_SANITIZER,CxxPlatformUtils.DEFAULT_CONFIG.getHeaderVerification(),Paths.get("whatever"),new DefaultPreprocessor(preprocessorTool),PreprocessorFlags.builder().build(),defaultFrameworkPathSearchPathFunction,ImmutableList.<CxxHeaders>of());
  return new CxxInferCapture(buildRuleParams,sourcePathResolver,CxxToolFlags.of(),CxxToolFlags.of(),new FakeSourcePath("src.c"),AbstractCxxSource.Type.C,Paths.get("src.o"),preprocessorDelegate,inferBuckConfig,CxxPlatformUtils.DEFAULT_DEBUG_PATH_SANITIZER);
}
