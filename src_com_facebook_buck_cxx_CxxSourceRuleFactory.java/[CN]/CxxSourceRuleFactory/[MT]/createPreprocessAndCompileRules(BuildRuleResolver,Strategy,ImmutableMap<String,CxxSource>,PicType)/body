{
  ImmutableList.Builder<SourcePath> objects=ImmutableList.builder();
  for (  Map.Entry<String,CxxSource> entry : sources.entrySet()) {
    String name=entry.getKey();
    CxxSource source=entry.getValue();
    Preconditions.checkState(CxxSourceTypes.isPreprocessableType(source.getType()) || CxxSourceTypes.isCompilableType(source.getType()));
switch (strategy) {
case COMBINED_PREPROCESS_AND_COMPILE:
{
        BuildRule rule;
        if (CxxSourceTypes.isPreprocessableType(source.getType())) {
          rule=createPreprocessAndCompileBuildRule(name,source,pic);
        }
 else {
          rule=createCompileBuildRule(name,source,pic);
        }
        resolver.addToIndex(rule);
        objects.add(new BuildTargetSourcePath(params.getProjectFilesystem(),rule.getBuildTarget()));
        break;
      }
case SEPARATE_PREPROCESS_AND_COMPILE:
{
      if (CxxSourceTypes.isPreprocessableType(source.getType())) {
        BuildRule rule=createPreprocessBuildRule(name,source,pic);
        resolver.addToIndex(rule);
        source=ImmutableCxxSource.copyOf(source).withType(CxxSourceTypes.getPreprocessorOutputType(source.getType())).withPath(new BuildTargetSourcePath(params.getProjectFilesystem(),rule.getBuildTarget()));
      }
      BuildRule rule=createCompileBuildRule(name,source,pic);
      resolver.addToIndex(rule);
      objects.add(new BuildTargetSourcePath(params.getProjectFilesystem(),rule.getBuildTarget()));
      break;
    }
default :
  throw new IllegalStateException();
}
}
return objects.build();
}
