{
  Preconditions.checkArgument(CxxSourceTypes.isPreprocessableType(source.getType()));
  BuildTarget target=createPreprocessBuildTarget(name,source.getType(),pic);
  Preprocessor tool=CxxSourceTypes.getPreprocessor(cxxPlatform,source.getType());
  ImmutableSortedSet<BuildRule> dependencies=computeSourcePreprocessorAndToolDeps(Optional.of((Tool)tool),source);
  ImmutableList<String> platformFlags=computePlatformFlags(pic,source);
  ImmutableList<String> ruleFlags=computeRuleFlags(source);
  CxxPreprocessAndCompile result=CxxPreprocessAndCompile.preprocess(params.copyWithChanges(target,Suppliers.ofInstance(dependencies),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,new PreprocessorDelegate(pathResolver,cxxPlatform.getDebugPathSanitizer(),tool,platformFlags,ruleFlags,includeRoots.get(),systemIncludeRoots.get(),headerMaps.get(),CxxDescriptionEnhancer.getFrameworkSearchPaths(Optional.of(ImmutableSortedSet.copyOf(frameworks.get())),cxxPlatform,pathResolver),prefixHeader,includes.get()),getPreprocessOutputPath(target,source.getType(),name),source.getPath(),source.getType(),cxxPlatform.getDebugPathSanitizer());
  resolver.addToIndex(result);
  return result;
}
