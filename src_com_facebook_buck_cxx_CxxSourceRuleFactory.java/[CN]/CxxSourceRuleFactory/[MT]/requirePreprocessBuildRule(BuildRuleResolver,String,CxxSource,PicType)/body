{
  Preconditions.checkArgument(CxxSourceTypes.isPreprocessableType(source.getType()));
  BuildTarget target=createPreprocessBuildTarget(name,source.getType(),pic);
  Optional<CxxPreprocessAndCompile> existingRule=resolver.getRuleOptionalWithType(target,CxxPreprocessAndCompile.class);
  if (existingRule.isPresent()) {
    return existingRule.get();
  }
  Tool tool=CxxSourceTypes.getPreprocessor(cxxPlatform,source.getType());
  ImmutableSortedSet<BuildRule> dependencies=ImmutableSortedSet.<BuildRule>naturalOrder().addAll(tool.getBuildRules(pathResolver)).addAll(pathResolver.filterBuildRuleInputs(source.getPath())).addAll(preprocessDeps.get()).build();
  ImmutableList<String> args=ImmutableList.<String>builder().addAll(pic.getFlags()).addAll(getPreprocessFlags(source.getType())).addAll(source.getFlags()).build();
  CxxPreprocessAndCompile result=CxxPreprocessAndCompile.preprocess(params.copyWithChanges(target,Suppliers.ofInstance(dependencies),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,tool,args,getPreprocessOutputPath(target,source.getType(),name),source.getPath(),source.getType(),ImmutableList.copyOf(cxxPreprocessorInput.getIncludeRoots()),ImmutableList.copyOf(cxxPreprocessorInput.getSystemIncludeRoots()),ImmutableList.copyOf(cxxPreprocessorInput.getFrameworkRoots()),cxxPreprocessorInput.getIncludes(),cxxPlatform.getDebugPathSanitizer());
  resolver.addToIndex(result);
  return result;
}
