{
  Preconditions.checkArgument(CxxSourceTypes.isPreprocessableType(source.getType()));
  BuildTarget target=createCompileBuildTarget(name,pic);
  Tool tool=getCompiler(source.getType());
  ImmutableSortedSet<BuildRule> dependencies=ImmutableSortedSet.<BuildRule>naturalOrder().addAll(tool.getBuildRules(pathResolver)).addAll(pathResolver.filterBuildRuleInputs(source.getPath())).addAll(getPreprocessDeps()).build();
  ImmutableList<String> args=ImmutableList.<String>builder().add("-x",source.getType().getLanguage()).addAll(pic.getFlags()).addAll(getPreprocessFlags(source.getType())).addAll(getCompileFlags(CxxSourceTypes.getPreprocessorOutputType(source.getType()))).addAll(source.getFlags()).build();
  return CxxPreprocessAndCompile.preprocessAndCompile(params.copyWithChanges(PREPROCESS_AND_COMPILE_TYPE,target,Suppliers.ofInstance(dependencies),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,tool,args,getCompileOutputPath(target,name),source.getPath(),ImmutableList.copyOf(cxxPreprocessorInput.getIncludeRoots()),ImmutableList.copyOf(cxxPreprocessorInput.getSystemIncludeRoots()),ImmutableList.copyOf(cxxPreprocessorInput.getFrameworkRoots()),cxxPreprocessorInput.getIncludes(),cxxPlatform.getDebugPathSanitizer());
}
