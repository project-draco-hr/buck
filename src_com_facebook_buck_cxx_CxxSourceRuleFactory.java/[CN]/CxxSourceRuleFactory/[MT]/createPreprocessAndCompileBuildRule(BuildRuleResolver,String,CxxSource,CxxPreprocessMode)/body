{
  Preconditions.checkArgument(CxxSourceTypes.isPreprocessableType(source.getType()));
  BuildTarget target=createCompileBuildTarget(name);
  Compiler compiler=getCompiler(source.getType());
  LOG.verbose("Creating preprocess and compile %s for %s",target,source);
  CxxPreprocessAndCompile result=CxxPreprocessAndCompile.preprocessAndCompile(params.copyWithChanges(target,Suppliers.ofInstance(computeSourcePreprocessorAndToolDeps(Optional.of((Tool)compiler),source)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,preprocessorDelegates.getUnchecked(PreprocessAndCompilePreprocessorDelegateKey.of(source.getType(),source.getFlags())),compiler,computePlatformCompilerFlags(source),computeRuleCompilerFlags(source),getCompileOutputPath(target,name),source.getPath(),source.getType(),cxxPlatform.getDebugPathSanitizer(),strategy);
  resolver.addToIndex(result);
  return result;
}
