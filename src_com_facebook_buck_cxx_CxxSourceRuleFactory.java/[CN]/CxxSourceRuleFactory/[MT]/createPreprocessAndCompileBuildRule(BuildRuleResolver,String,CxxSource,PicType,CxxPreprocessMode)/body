{
  Preconditions.checkArgument(CxxSourceTypes.isPreprocessableType(source.getType()));
  BuildTarget target=createCompileBuildTarget(name,pic);
  Preprocessor preprocessor=CxxSourceTypes.getPreprocessor(cxxPlatform,source.getType());
  Compiler compiler=getCompiler(source.getType());
  LOG.verbose("Creating preprocess and compile %s for %s",target,source);
  CxxPreprocessAndCompile result=CxxPreprocessAndCompile.preprocessAndCompile(params.copyWithChanges(target,Suppliers.ofInstance(computeSourcePreprocessorAndToolDeps(Optional.of((Tool)compiler),source)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,new PreprocessorDelegate(pathResolver,cxxPlatform.getDebugPathSanitizer(),preprocessor,CxxSourceTypes.getPlatformPreprocessFlags(cxxPlatform,source.getType()),preprocessorFlags.getUnchecked(source.getType()),includeRoots.get(),systemIncludeRoots.get(),headerMaps.get(),CxxDescriptionEnhancer.getFrameworkSearchPaths(Optional.of(ImmutableSortedSet.copyOf(frameworks.get())),cxxPlatform,pathResolver),prefixHeader,includes.get()),compiler,computePlatformCompilerFlags(pic,source),computeRuleCompilerFlags(source),getCompileOutputPath(target,name),source.getPath(),source.getType(),cxxPlatform.getDebugPathSanitizer(),strategy);
  resolver.addToIndex(result);
  return result;
}
