{
  Preconditions.checkArgument(CxxSourceTypes.isPreprocessableType(source.getType()));
  BuildTarget target=createCompileBuildTarget(name,pic);
  Tool tool=getCompiler(source.getType());
  ImmutableSortedSet<BuildRule> dependencies=ImmutableSortedSet.<BuildRule>naturalOrder().addAll(tool.getBuildRules(pathResolver)).addAll(pathResolver.filterBuildRuleInputs(source.getPath())).addAll(preprocessDeps.get()).build();
  ImmutableList<String> compilerFlags=ImmutableList.<String>builder().addAll(pic.getFlags()).addAll(getCompileFlags(CxxSourceTypes.getPreprocessorOutputType(source.getType()))).addAll(source.getFlags()).build();
  LOG.verbose("Creating preprocess and compile %s for %s",target,source);
  CxxPreprocessAndCompile result=CxxPreprocessAndCompile.preprocessAndCompile(params.copyWithChanges(target,Suppliers.ofInstance(dependencies),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,tool,getPreprocessFlags(source.getType()),tool,compilerFlags,getCompileOutputPath(target,name),source.getPath(),source.getType(),ImmutableList.copyOf(cxxPreprocessorInput.getIncludeRoots()),ImmutableList.copyOf(cxxPreprocessorInput.getSystemIncludeRoots()),ImmutableList.copyOf(cxxPreprocessorInput.getFrameworkRoots()),cxxPreprocessorInput.getIncludes(),cxxPlatform.getDebugPathSanitizer(),strategy);
  resolver.addToIndex(result);
  return result;
}
