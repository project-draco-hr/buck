{
  Step mkdir=new MakeCleanDirectoryStep(getPathToAbiOutputDir());
  commands.add(mkdir);
  if (!getJavaSrcs().isEmpty()) {
    Path pathToSrcsList=Paths.get(BuckConstant.GEN_DIR,getBuildTarget().getBasePath(),"__" + getBuildTarget().getShortName() + "__srcs");
    commands.add(new MkdirStep(pathToSrcsList.getParent()));
    final JavacStep javacStep;
    if (javacOptions.getPathToJavac().isPresent()) {
      javacStep=new ExternalJavacStep(outputDirectory,getJavaSrcs(),transitiveClasspathEntries,declaredClasspathEntries,javacOptions,Optional.of(getPathToAbiOutputFile()),Optional.of(getFullyQualifiedName()),buildDependencies,suggestBuildRules,Optional.of(pathToSrcsList),target);
    }
 else {
      javacStep=new JavacInMemoryStep(outputDirectory,getJavaSrcs(),transitiveClasspathEntries,declaredClasspathEntries,javacOptions,Optional.of(getPathToAbiOutputFile()),Optional.of(getFullyQualifiedName()),buildDependencies,suggestBuildRules,Optional.of(pathToSrcsList));
    }
    commands.add(javacStep);
    return Suppliers.memoize(new Supplier<Sha1HashCode>(){
      @Override public Sha1HashCode get(){
        return createTotalAbiKey(javacStep.getAbiKey());
      }
    }
);
  }
 else {
    return Suppliers.ofInstance(createTotalAbiKey(new Sha1HashCode(AbiWriterProtocol.EMPTY_ABI_KEY)));
  }
}
