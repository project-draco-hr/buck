{
  super(buildRuleParams);
  this.srcs=ImmutableSortedSet.copyOf(srcs);
  this.resources=ImmutableSortedSet.copyOf(resources);
  this.optionalDummyRDotJava=Preconditions.checkNotNull(optionalDummyRDotJava);
  this.proguardConfig=Preconditions.checkNotNull(proguardConfig);
  this.exportedDeps=ImmutableSortedSet.copyOf(exportedDeps);
  this.javacOptions=Preconditions.checkNotNull(javacOptions);
  this.javac=Preconditions.checkNotNull(javac);
  this.javacVersion=Preconditions.checkNotNull(javacVersion);
  if (!srcs.isEmpty() || !resources.isEmpty()) {
    this.outputJar=Optional.of(getOutputJarPath(getBuildTarget()));
  }
 else {
    this.outputJar=Optional.absent();
  }
  outputClasspathEntriesSupplier=Suppliers.memoize(new Supplier<ImmutableSetMultimap<JavaLibraryRule,String>>(){
    @Override public ImmutableSetMultimap<JavaLibraryRule,String> get(){
      return JavaLibraryClasspathProvider.getOutputClasspathEntries(DefaultJavaLibraryRule.this,outputJar);
    }
  }
);
  transitiveClasspathEntriesSupplier=Suppliers.memoize(new Supplier<ImmutableSetMultimap<JavaLibraryRule,String>>(){
    @Override public ImmutableSetMultimap<JavaLibraryRule,String> get(){
      return JavaLibraryClasspathProvider.getTransitiveClasspathEntries(DefaultJavaLibraryRule.this,outputJar);
    }
  }
);
  declaredClasspathEntriesSupplier=Suppliers.memoize(new Supplier<ImmutableSetMultimap<JavaLibraryRule,String>>(){
    @Override public ImmutableSetMultimap<JavaLibraryRule,String> get(){
      return JavaLibraryClasspathProvider.getDeclaredClasspathEntries(DefaultJavaLibraryRule.this);
    }
  }
);
}
