{
  FakeProjectFilesystem projectFilesystem=new FakeProjectFilesystem();
  XctoolRunTestsStep step=new XctoolRunTestsStep(projectFilesystem,Paths.get("/path/to/xctool"),Optional.<Long>absent(),"iphonesimulator",Optional.<String>absent(),ImmutableSet.of(Paths.get("/path/to/FooTest.xctest"),Paths.get("/path/to/BarTest.xctest")),ImmutableMap.<Path,Path>of(),Paths.get("/path/to/output.json"),Optional.<XctoolRunTestsStep.StdoutReadingCallback>absent(),Suppliers.ofInstance(Optional.of(Paths.get("/path/to/developer/dir"))),TestSelectorList.builder().addRawSelectors("#.*Magic.*").build());
  ProcessExecutorParams xctoolListOnlyParams=ProcessExecutorParams.builder().setCommand(ImmutableList.of("/path/to/xctool","-reporter","json-stream","-sdk","iphonesimulator","run-tests","-logicTest","/path/to/FooTest.xctest","-logicTest","/path/to/BarTest.xctest","-listTestsOnly")).setEnvironment(ImmutableMap.of("DEVELOPER_DIR","/path/to/developer/dir")).setDirectory(projectFilesystem.getRootPath().toAbsolutePath().toFile()).setRedirectOutput(ProcessBuilder.Redirect.PIPE).build();
  try (InputStream stdout=getClass().getResourceAsStream("testdata/xctool-output/list-tests-only.json");InputStream stderr=new ByteArrayInputStream(new byte[0])){
    assertThat(stdout,not(nullValue()));
    FakeProcess fakeXctoolListTestsProcess=new FakeProcess(0,ByteStreams.nullOutputStream(),stdout,stderr);
    ProcessExecutorParams xctoolRunTestsParamsWithOnlyFilters=ProcessExecutorParams.builder().addCommand("/path/to/xctool","-reporter","json-stream","-sdk","iphonesimulator","run-tests","-logicTest","/path/to/FooTest.xctest","-logicTest","/path/to/BarTest.xctest","-only","/path/to/FooTest.xctest:FooTest/testMagicValue,FooTest/testAnotherMagicValue","-only","/path/to/BarTest.xctest:BarTest/testYetAnotherMagicValue").setEnvironment(ImmutableMap.of("DEVELOPER_DIR","/path/to/developer/dir")).setDirectory(projectFilesystem.getRootPath().toAbsolutePath().toFile()).setRedirectOutput(ProcessBuilder.Redirect.PIPE).build();
    FakeProcess fakeXctoolSuccess=new FakeProcess(0,"","");
    FakeProcessExecutor processExecutor=new FakeProcessExecutor(ImmutableMap.of(xctoolListOnlyParams,fakeXctoolListTestsProcess,xctoolRunTestsParamsWithOnlyFilters,fakeXctoolSuccess));
    ExecutionContext executionContext=TestExecutionContext.newBuilder().setProcessExecutor(processExecutor).setEnvironment(ImmutableMap.<String,String>of()).build();
    assertThat(step.execute(executionContext),equalTo(0));
  }
 }
