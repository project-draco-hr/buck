{
  FakeProjectFilesystem projectFilesystem=new FakeProjectFilesystem();
  XctoolRunTestsStep step=new XctoolRunTestsStep(projectFilesystem,Paths.get("/path/to/xctool"),ImmutableMap.<String,String>of(),Optional.<Long>absent(),"iphonesimulator",Optional.<String>absent(),ImmutableSet.of(Paths.get("/path/to/Foo.xctest")),ImmutableMap.<Path,Path>of(),Paths.get("/path/to/output.json"),Optional.<XctoolRunTestsStep.StdoutReadingCallback>absent(),Suppliers.ofInstance(Optional.of(Paths.get("/path/to/developer/dir"))),TestSelectorList.EMPTY,Optional.<String>absent(),Optional.<Path>absent(),Optional.<String>absent(),Optional.<String>absent(),Optional.<Long>absent());
  ProcessExecutorParams xctoolParams=ProcessExecutorParams.builder().setCommand(ImmutableList.of("/path/to/xctool","-reporter","json-stream","-sdk","iphonesimulator","run-tests","-logicTest","/path/to/Foo.xctest")).setEnvironment(ImmutableMap.of("DEVELOPER_DIR","/path/to/developer/dir")).setDirectory(projectFilesystem.getRootPath().toAbsolutePath()).setRedirectOutput(ProcessBuilder.Redirect.PIPE).build();
  FakeProcess fakeXctoolFailure=new FakeProcess(400,"","");
  FakeProcessExecutor processExecutor=new FakeProcessExecutor(ImmutableMap.of(xctoolParams,fakeXctoolFailure));
  ExecutionContext executionContext=TestExecutionContext.newBuilder().setProcessExecutor(processExecutor).setEnvironment(ImmutableMap.<String,String>of()).build();
  assertThat(step.execute(executionContext).getExitCode(),not(equalTo(0)));
}
