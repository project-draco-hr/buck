{
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  BuildRule transitiveDep=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//exciting:dep")).addSrc(Paths.get("Dep.java")).build(ruleResolver);
  BuildRule dep=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//exciting:target")).addSrc(Paths.get("Other.java")).addDep(transitiveDep.getBuildTarget()).build(ruleResolver);
  Keystore keystore=ruleResolver.addToIndex(new Keystore(new FakeBuildRuleParamsBuilder("//:keystore").build(),pathResolver,new FakeSourcePath("store"),new FakeSourcePath("properties")));
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  AndroidBinary androidBinary=(AndroidBinary)AndroidBinaryBuilder.createBuilder(target).setManifest(new FakeSourcePath("manifest.xml")).setKeystore(keystore.getBuildTarget()).setNoDx(ImmutableSet.of(transitiveDep.getBuildTarget())).setOriginalDeps(ImmutableSortedSet.of(dep.getBuildTarget())).build(ruleResolver);
  assertThat(androidBinary.getDeps(),Matchers.hasItem(transitiveDep));
}
