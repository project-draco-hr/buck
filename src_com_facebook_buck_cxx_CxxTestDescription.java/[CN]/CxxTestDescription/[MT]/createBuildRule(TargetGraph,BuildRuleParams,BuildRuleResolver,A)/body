{
  Optional<StripStyle> flavoredStripStyle=StripStyle.FLAVOR_DOMAIN.getValue(inputParams.getBuildTarget());
  final BuildRuleParams params=CxxStrip.removeStripStyleFlavorInParams(inputParams,flavoredStripStyle);
  Optional<CxxPlatform> platform=cxxPlatforms.getValue(params.getBuildTarget());
  CxxPlatform cxxPlatform=platform.or(defaultCxxPlatform);
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  if (params.getBuildTarget().getFlavors().contains(CxxCompilationDatabase.COMPILATION_DATABASE)) {
    return CxxDescriptionEnhancer.createCompilationDatabase(params,resolver,pathResolver,cxxBuckConfig,cxxPlatform,args);
  }
  if (params.getBuildTarget().getFlavors().contains(CxxCompilationDatabase.UBER_COMPILATION_DATABASE)) {
    return CxxDescriptionEnhancer.createUberCompilationDatabase(platform.isPresent() ? params : params.withFlavor(cxxPlatform.getFlavor()),resolver);
  }
  final CxxLinkAndCompileRules cxxLinkAndCompileRules=CxxDescriptionEnhancer.createBuildRulesForCxxBinaryDescriptionArg(params,resolver,cxxBuckConfig,cxxPlatform,args,flavoredStripStyle);
  BuildRuleParams testParams=params.appendExtraDeps(cxxLinkAndCompileRules.executable.getDeps(pathResolver));
  testParams=CxxStrip.restoreStripStyleFlavorInParams(testParams,flavoredStripStyle);
  Supplier<ImmutableMap<String,String>> testEnv=new Supplier<ImmutableMap<String,String>>(){
    @Override public ImmutableMap<String,String> get(){
      return ImmutableMap.copyOf(Maps.transformValues(args.env.or(ImmutableMap.<String,String>of()),CxxDescriptionEnhancer.MACRO_HANDLER.getExpander(params.getBuildTarget(),params.getCellRoots(),resolver)));
    }
  }
;
  Supplier<ImmutableList<String>> testArgs=new Supplier<ImmutableList<String>>(){
    @Override public ImmutableList<String> get(){
      return FluentIterable.from(args.args.or(ImmutableList.<String>of())).transform(CxxDescriptionEnhancer.MACRO_HANDLER.getExpander(params.getBuildTarget(),params.getCellRoots(),resolver)).toList();
    }
  }
;
  Supplier<ImmutableSortedSet<BuildRule>> additionalDeps=new Supplier<ImmutableSortedSet<BuildRule>>(){
    @Override public ImmutableSortedSet<BuildRule> get(){
      ImmutableSortedSet.Builder<BuildRule> deps=ImmutableSortedSet.naturalOrder();
      deps.addAll(Sets.difference(params.getDeps(),cxxLinkAndCompileRules.getBinaryRule().getDeps()));
      for (      String part : Iterables.concat(args.args.or(ImmutableList.<String>of()),args.env.or(ImmutableMap.<String,String>of()).values())) {
        try {
          deps.addAll(CxxDescriptionEnhancer.MACRO_HANDLER.extractBuildTimeDeps(params.getBuildTarget(),params.getCellRoots(),resolver,part));
        }
 catch (        MacroException e) {
          throw new HumanReadableException(e,"%s: %s",params.getBuildTarget(),e.getMessage());
        }
      }
      return deps.build();
    }
  }
;
  CxxTest test;
  CxxTestType type=args.framework.or(getDefaultTestType());
switch (type) {
case GTEST:
{
      test=new CxxGtestTest(testParams,pathResolver,cxxLinkAndCompileRules.getBinaryRule(),cxxLinkAndCompileRules.executable,testEnv,testArgs,FluentIterable.from(args.resources.or(ImmutableSortedSet.<Path>of())).transform(SourcePaths.toSourcePath(params.getProjectFilesystem())).toSortedSet(Ordering.natural()),additionalDeps,args.labels.get(),args.contacts.get(),resolver.getAllRules(args.sourceUnderTest.get()),args.runTestSeparately.or(false),args.testRuleTimeoutMs.or(defaultTestRuleTimeoutMs),cxxBuckConfig.getMaximumTestOutputSize());
      break;
    }
case BOOST:
{
    test=new CxxBoostTest(testParams,pathResolver,cxxLinkAndCompileRules.getBinaryRule(),cxxLinkAndCompileRules.executable,testEnv,testArgs,FluentIterable.from(args.resources.or(ImmutableSortedSet.<Path>of())).transform(SourcePaths.toSourcePath(params.getProjectFilesystem())).toSortedSet(Ordering.natural()),additionalDeps,args.labels.get(),args.contacts.get(),resolver.getAllRules(args.sourceUnderTest.get()),args.runTestSeparately.or(false),args.testRuleTimeoutMs.or(defaultTestRuleTimeoutMs));
    break;
  }
default :
{
  Preconditions.checkState(false,"Unhandled C++ test type: %s",type);
  throw new RuntimeException();
}
}
return test;
}
