{
  CxxPlatform cxxPlatform;
  try {
    cxxPlatform=cxxPlatforms.getValue(ImmutableSet.copyOf(params.getBuildTarget().getFlavors())).or(defaultCxxPlatform);
  }
 catch (  FlavorDomainException e) {
    throw new HumanReadableException("%s: %s",params.getBuildTarget(),e.getMessage());
  }
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  final CxxDescriptionEnhancer.CxxLinkAndCompileRules cxxLinkAndCompileRules=CxxDescriptionEnhancer.createBuildRulesForCxxBinaryDescriptionArg(targetGraph,params,resolver,cxxPlatform,args,cxxBuckConfig.getPreprocessMode());
  BuildRuleParams testParams=params.appendExtraDeps(cxxLinkAndCompileRules.executable.getDeps(pathResolver));
  Supplier<ImmutableMap<String,String>> testEnv=new Supplier<ImmutableMap<String,String>>(){
    @Override public ImmutableMap<String,String> get(){
      return ImmutableMap.copyOf(Maps.transformValues(args.env.or(ImmutableMap.<String,String>of()),MACRO_HANDLER.getExpander(params.getBuildTarget(),params.getCellRoots(),resolver,params.getProjectFilesystem())));
    }
  }
;
  Supplier<ImmutableList<String>> testArgs=new Supplier<ImmutableList<String>>(){
    @Override public ImmutableList<String> get(){
      return FluentIterable.from(args.args.or(ImmutableList.<String>of())).transform(MACRO_HANDLER.getExpander(params.getBuildTarget(),params.getCellRoots(),resolver,params.getProjectFilesystem())).toList();
    }
  }
;
  Supplier<ImmutableSortedSet<BuildRule>> additionalDeps=new Supplier<ImmutableSortedSet<BuildRule>>(){
    @Override public ImmutableSortedSet<BuildRule> get(){
      ImmutableSortedSet.Builder<BuildRule> deps=ImmutableSortedSet.naturalOrder();
      deps.addAll(Sets.difference(params.getDeps(),cxxLinkAndCompileRules.cxxLink.getDeps()));
      for (      String part : Iterables.concat(args.args.or(ImmutableList.<String>of()),args.env.or(ImmutableMap.<String,String>of()).values())) {
        try {
          deps.addAll(MACRO_HANDLER.extractBuildTimeDeps(params.getBuildTarget(),params.getCellRoots(),resolver,part));
        }
 catch (        MacroException e) {
          throw new HumanReadableException(e,"%s: %s",params.getBuildTarget(),e.getMessage());
        }
      }
      return deps.build();
    }
  }
;
  CxxTest test;
  CxxTestType type=args.framework.or(getDefaultTestType());
switch (type) {
case GTEST:
{
      test=new CxxGtestTest(testParams,pathResolver,cxxLinkAndCompileRules.executable,testEnv,testArgs,additionalDeps,args.labels.get(),args.contacts.get(),resolver.getAllRules(args.sourceUnderTest.get()),args.runTestSeparately.or(false),cxxBuckConfig.getMaximumTestOutputSize());
      break;
    }
case BOOST:
{
    test=new CxxBoostTest(testParams,pathResolver,cxxLinkAndCompileRules.executable,testEnv,testArgs,additionalDeps,args.labels.get(),args.contacts.get(),resolver.getAllRules(args.sourceUnderTest.get()),args.runTestSeparately.or(false));
    break;
  }
default :
{
  Preconditions.checkState(false,"Unhandled C++ test type: %s",type);
  throw new RuntimeException();
}
}
return test;
}
