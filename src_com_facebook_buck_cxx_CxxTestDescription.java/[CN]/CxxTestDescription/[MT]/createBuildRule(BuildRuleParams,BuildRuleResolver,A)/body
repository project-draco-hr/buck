{
  CxxPlatform cxxPlatform;
  try {
    cxxPlatform=cxxPlatforms.getValue(ImmutableSet.copyOf(params.getBuildTarget().getFlavors())).or(defaultCxxPlatform);
  }
 catch (  FlavorDomainException e) {
    throw new HumanReadableException("%s: %s",params.getBuildTarget(),e.getMessage());
  }
  CxxLink cxxLink=CxxDescriptionEnhancer.createBuildRulesForCxxBinaryDescriptionArg(params,resolver,cxxPlatform,args,cxxBuckConfig.getPreprocessMode()).cxxLink;
  BuildRuleParams testParams=params.copyWithDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getDeclaredDeps()).add(cxxLink).build()),Suppliers.ofInstance(params.getExtraDeps()));
  CxxTest test;
  CxxTestType type=args.framework.or(getDefaultTestType());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  SourcePath binary=new BuildTargetSourcePath(cxxLink.getProjectFilesystem(),cxxLink.getBuildTarget());
  ImmutableSortedSet<BuildRule> additionalDeps=ImmutableSortedSet.copyOf(Sets.difference(params.getDeps(),cxxLink.getDeps()));
switch (type) {
case GTEST:
{
      test=new CxxGtestTest(testParams,pathResolver,binary,additionalDeps,args.labels.get(),args.contacts.get(),resolver.getAllRules(args.sourceUnderTest.get()));
      break;
    }
case BOOST:
{
    test=new CxxBoostTest(testParams,pathResolver,binary,additionalDeps,args.labels.get(),args.contacts.get(),resolver.getAllRules(args.sourceUnderTest.get()));
    break;
  }
default :
{
  Preconditions.checkState(false,"Unhandled C++ test type: %s",type);
  throw new RuntimeException();
}
}
return test;
}
