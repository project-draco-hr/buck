{
  File inputs=temp.newFolder();
  File file=new File(inputs,fileName);
  Files.write(file.toPath(),source.getBytes(StandardCharsets.UTF_8));
  JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();
  StandardJavaFileManager fileManager=compiler.getStandardFileManager(null,null,null);
  Iterable<? extends JavaFileObject> sourceObjects=fileManager.getJavaFileObjectsFromFiles(ImmutableSet.of(file));
  final File outputDir=temp.newFolder();
  List<String> args=Lists.newArrayList("-g","-d",outputDir.getAbsolutePath());
  if (!classpath.isEmpty()) {
    args.add("-classpath");
    args.add(Joiner.on(File.pathSeparator).join(FluentIterable.from(classpath).transform(filesystem.getAbsolutifier())));
  }
  JavaCompiler.CompilationTask compilation=compiler.getTask(null,fileManager,null,args,null,sourceObjects);
  Boolean result=compilation.call();
  fileManager.close();
  assertNotNull(result);
  assertTrue(result);
  File jar=new File(outputDir,"output.jar");
  try (FileOutputStream fos=new FileOutputStream(jar);final JarOutputStream os=new JarOutputStream(fos)){
    SimpleFileVisitor<Path> visitor=new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        if (file.getFileName().toString().endsWith(".class")) {
          ZipEntry entry=new ZipEntry(MorePaths.pathWithUnixSeparators(outputDir.toPath().relativize(file)));
          os.putNextEntry(entry);
          ByteStreams.copy(Files.newInputStream(file),os);
          os.closeEntry();
        }
        return FileVisitResult.CONTINUE;
      }
    }
;
    Files.walkFileTree(outputDir.toPath(),visitor);
  }
   return jar.toPath().toAbsolutePath();
}
