{
  Path defaultToolchainPath=xcodeToolchainPaths.get(DEFAULT_TOOLCHAIN_ID);
  Preconditions.checkArgument(defaultToolchainPath != null,"xcodeToolchainPaths must contain default toolchain ID key %s",DEFAULT_TOOLCHAIN_ID);
  LOG.debug("Searching for Xcode platforms under %s",xcodeDir);
  ImmutableMap.Builder<AppleSdk,AppleSdkPaths> appleSdkPathsBuilder=ImmutableMap.builder();
  Path platforms=xcodeDir.resolve("Platforms");
  if (!Files.exists(platforms)) {
    return appleSdkPathsBuilder.build();
  }
  TreeMultimap<ApplePlatform,ImmutableAppleSdk> orderedSdksForPlatform=TreeMultimap.create(Ordering.natural(),APPLE_SDK_VERSION_ORDERING);
  try (DirectoryStream<Path> platformStream=Files.newDirectoryStream(platforms,"*.platform")){
    for (    Path platformDir : platformStream) {
      LOG.debug("Searching for Xcode SDKs under %s",platformDir);
      try (DirectoryStream<Path> sdkStream=Files.newDirectoryStream(platformDir.resolve("Developer/SDKs"),"*.sdk")){
        for (        Path sdkDir : sdkStream) {
          LOG.debug("Fetching SDK name for %s",sdkDir);
          if (Files.isSymbolicLink(sdkDir)) {
            continue;
          }
          ImmutableAppleSdk.Builder sdkBuilder=ImmutableAppleSdk.builder();
          if (buildSdkFromPath(sdkDir,sdkBuilder)) {
            ImmutableAppleSdk sdk=sdkBuilder.build();
            LOG.debug("Found SDK %s",sdk);
            ImmutableSet.Builder<Path> toolchainPathsBuilder=ImmutableSet.builder();
            for (            String toolchain : sdk.toolchains()) {
              Path toolchainPath=xcodeToolchainPaths.get(toolchain);
              if (toolchainPath == null) {
                LOG.debug("Could not find toolchain with ID %s, ignoring",toolchain);
              }
 else {
                toolchainPathsBuilder.add(toolchainPath);
              }
            }
            ImmutableSet<Path> toolchainPaths=toolchainPathsBuilder.build();
            ImmutableAppleSdkPaths.Builder xcodePathsBuilder=ImmutableAppleSdkPaths.builder();
            if (toolchainPaths.isEmpty()) {
              LOG.debug("No toolchains found for SDK %s, falling back to default %s",sdk,defaultToolchainPath);
              xcodePathsBuilder.addToolchainPaths(defaultToolchainPath);
            }
 else {
              xcodePathsBuilder.addAllToolchainPaths(toolchainPaths);
            }
            ImmutableAppleSdkPaths xcodePaths=xcodePathsBuilder.platformDeveloperPath(platformDir.resolve("Developer")).sdkPath(sdkDir).build();
            appleSdkPathsBuilder.put(sdk,xcodePaths);
            orderedSdksForPlatform.put(sdk.applePlatform(),sdk);
          }
        }
      }
     }
  }
   ImmutableMap<AppleSdk,AppleSdkPaths> discoveredSdkPaths=appleSdkPathsBuilder.build();
  for (  ApplePlatform platform : orderedSdksForPlatform.keySet()) {
    ImmutableAppleSdk mostRecentSdkForPlatform=orderedSdksForPlatform.get(platform).last();
    appleSdkPathsBuilder.put(mostRecentSdkForPlatform.withName(platform.toString()),discoveredSdkPaths.get(mostRecentSdkForPlatform));
  }
  return appleSdkPathsBuilder.build();
}
