{
  Optional<AppleToolchain> defaultToolchain=Optional.fromNullable(xcodeToolchains.get(DEFAULT_TOOLCHAIN_ID));
  ImmutableMap.Builder<AppleSdk,AppleSdkPaths> appleSdkPathsBuilder=ImmutableMap.builder();
  Iterable<Path> platformPaths=extraDirs;
  if (developerDir.isPresent()) {
    Path platformsDir=developerDir.get().resolve("Platforms");
    LOG.debug("Searching for Xcode platforms under %s",platformsDir);
    platformPaths=Iterables.concat(ImmutableSet.of(platformsDir),platformPaths);
  }
  TreeMultimap<ApplePlatform,AppleSdk> orderedSdksForPlatform=TreeMultimap.create(Ordering.natural(),APPLE_SDK_VERSION_ORDERING);
  for (  Path platforms : platformPaths) {
    if (!Files.exists(platforms)) {
      LOG.debug("Skipping platform search path %s that does not exist",platforms);
      continue;
    }
    LOG.debug("Searching for Xcode SDKs in %s",platforms);
    try (DirectoryStream<Path> platformStream=Files.newDirectoryStream(platforms,"*.platform")){
      for (      Path platformDir : platformStream) {
        Path developerSdksPath=platformDir.resolve("Developer/SDKs");
        try (DirectoryStream<Path> sdkStream=Files.newDirectoryStream(developerSdksPath,"*.sdk")){
          for (          Path sdkDir : sdkStream) {
            LOG.debug("Fetching SDK name for %s",sdkDir);
            if (Files.isSymbolicLink(sdkDir)) {
              continue;
            }
            AppleSdk.Builder sdkBuilder=AppleSdk.builder();
            if (buildSdkFromPath(sdkDir,sdkBuilder,xcodeToolchains,defaultToolchain)) {
              AppleSdk sdk=sdkBuilder.build();
              LOG.debug("Found SDK %s",sdk);
              AppleSdkPaths.Builder xcodePathsBuilder=AppleSdkPaths.builder();
              for (              AppleToolchain toolchain : sdk.getToolchains()) {
                xcodePathsBuilder.addToolchainPaths(toolchain.getPath());
              }
              AppleSdkPaths xcodePaths=xcodePathsBuilder.setDeveloperPath(developerDir).setPlatformPath(platformDir).setSdkPath(sdkDir).build();
              appleSdkPathsBuilder.put(sdk,xcodePaths);
              orderedSdksForPlatform.put(sdk.getApplePlatform(),sdk);
            }
          }
        }
 catch (        NoSuchFileException e) {
          LOG.warn(e,"Couldn't discover SDKs at path %s, ignoring platform %s",developerSdksPath,platformDir);
        }
      }
    }
   }
  ImmutableMap<AppleSdk,AppleSdkPaths> discoveredSdkPaths=appleSdkPathsBuilder.build();
  for (  ApplePlatform platform : orderedSdksForPlatform.keySet()) {
    AppleSdk mostRecentSdkForPlatform=orderedSdksForPlatform.get(platform).last();
    if (!mostRecentSdkForPlatform.getName().equals(platform.getName())) {
      appleSdkPathsBuilder.put(mostRecentSdkForPlatform.withName(platform.getName()),discoveredSdkPaths.get(mostRecentSdkForPlatform));
    }
  }
  return appleSdkPathsBuilder.build();
}
