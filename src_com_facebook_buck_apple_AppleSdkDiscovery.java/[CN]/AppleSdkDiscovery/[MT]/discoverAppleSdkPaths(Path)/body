{
  LOG.debug("Searching for Xcode platforms under %s",xcodeDir);
  ImmutableMap.Builder<AppleSdk,AppleSdkPaths> appleSdkPathsBuilder=ImmutableMap.builder();
  try (DirectoryStream<Path> platformStream=Files.newDirectoryStream(xcodeDir.resolve("Platforms"),"*.platform")){
    for (    Path platformDir : platformStream) {
      LOG.debug("Searching for Xcode SDKs under %s",platformDir);
      try (DirectoryStream<Path> sdkStream=Files.newDirectoryStream(platformDir.resolve("Developer/SDKs"),"*.sdk")){
        for (        Path sdkDir : sdkStream) {
          LOG.debug("Fetching SDK name for %s",sdkDir);
          if (Files.isSymbolicLink(sdkDir)) {
            continue;
          }
          ImmutableAppleSdk.Builder sdkBuilder=ImmutableAppleSdk.builder();
          if (buildSdkFromPath(sdkDir,sdkBuilder)) {
            ImmutableAppleSdk sdk=sdkBuilder.build();
            LOG.debug("Found SDK %s",sdk);
            ImmutableAppleSdkPaths xcodePaths=ImmutableAppleSdkPaths.builder().toolchainPath(xcodeDir.resolve("Toolchains/XcodeDefault.xctoolchain")).platformDeveloperPath(platformDir.resolve("Developer")).sdkPath(sdkDir).build();
            appleSdkPathsBuilder.put(sdk,xcodePaths);
          }
        }
      }
     }
  }
   return appleSdkPathsBuilder.build();
}
