{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  ProjectFilesystem projectFilesystem=new ProjectFilesystem(tmp.getRoot());
  BuildTarget libraryOneTarget=BuildTargetFactory.newInstance("//:libone");
  BuildRule libraryOne=JavaLibraryBuilder.createBuilder(libraryOneTarget).addSrc(Paths.get("java/src/com/libone/Bar.java")).build(ruleResolver);
  BuildTarget libraryTwoTarget=BuildTargetFactory.newInstance("//:libtwo");
  BuildRule libraryTwo=JavaLibraryBuilder.createBuilder(libraryTwoTarget).addSrc(Paths.get("java/src/com/libtwo/Foo.java")).addDep(libraryOne).build(ruleResolver);
  BuildTarget parentTarget=BuildTargetFactory.newInstance("//:parent");
  BuildRule parent=JavaLibraryBuilder.createBuilder(parentTarget).addSrc(Paths.get("java/src/com/parent/Meh.java")).addDep(libraryTwo).build(ruleResolver);
  BuildTarget grandparentTarget=BuildTargetFactory.newInstance("//:grandparent");
  BuildRule grandparent=JavaLibraryBuilder.createBuilder(grandparentTarget).addSrc(Paths.get("java/src/com/parent/OldManRiver.java")).addDep(parent).build(ruleResolver);
  BuildContext context=createSuggestContext(ruleResolver,BuildDependencies.WARN_ON_TRANSITIVE);
  ImmutableSetMultimap<JavaLibrary,String> transitive=((HasClasspathEntries)parent.getBuildable()).getTransitiveClasspathEntries();
  ImmutableMap<String,String> classToSymbols=ImmutableMap.of(Iterables.getFirst(transitive.get((JavaLibrary)parent.getBuildable()),null),"com.facebook.Foo",Iterables.getFirst(transitive.get((JavaLibrary)libraryOne.getBuildable()),null),"com.facebook.Bar",Iterables.getFirst(transitive.get((JavaLibrary)libraryTwo.getBuildable()),null),"com.facebook.Foo");
  Optional<JavacInMemoryStep.SuggestBuildRules> suggestFn=((DefaultJavaLibrary)grandparent.getBuildable()).createSuggestBuildFunction(context,transitive,ImmutableSetMultimap.<JavaLibrary,String>of(),createJarResolver(classToSymbols));
  assertTrue(suggestFn.isPresent());
  assertEquals(ImmutableSet.of("//:parent","//:libone"),suggestFn.get().suggest(projectFilesystem,ImmutableSet.of("com.facebook.Foo","com.facebook.Bar")));
  EasyMock.verify(context);
}
