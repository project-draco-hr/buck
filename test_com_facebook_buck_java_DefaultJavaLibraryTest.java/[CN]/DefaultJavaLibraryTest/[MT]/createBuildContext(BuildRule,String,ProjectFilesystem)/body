{
  AndroidPlatformTarget platformTarget=EasyMock.createMock(AndroidPlatformTarget.class);
  ImmutableList<Path> bootclasspathEntries=(bootclasspath == null) ? ImmutableList.<Path>of(Paths.get("I am not used")) : ImmutableList.of(Paths.get(bootclasspath));
  expect(platformTarget.getBootclasspathEntries()).andReturn(bootclasspathEntries).anyTimes();
  replay(platformTarget);
  if (projectFilesystem == null) {
    projectFilesystem=EasyMock.createMock(ProjectFilesystem.class);
  }
  return BuildContext.builder().setActionGraph(RuleMap.createGraphFromSingleRule(javaLibrary)).setStepRunner(EasyMock.createMock(StepRunner.class)).setProjectFilesystem(projectFilesystem).setArtifactCache(new NoopArtifactCache()).setBuildDependencies(BuildDependencies.TRANSITIVE).setJavaPackageFinder(EasyMock.createMock(JavaPackageFinder.class)).setAndroidBootclasspathForAndroidPlatformTarget(Optional.of(platformTarget)).setEventBus(BuckEventBusFactory.newInstance()).build();
}
