{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildTarget libraryOneTarget=BuildTargetFactory.newInstance("//:libone");
  BuildTarget javacTarget=BuildTargetFactory.newInstance("//langtools:javac");
  BuildRule javac=PrebuiltJarBuilder.createBuilder(javacTarget).setBinaryJar(Paths.get("java/src/com/libone/JavacJar.jar")).build(ruleResolver);
  BuildRule rule=JavaLibraryBuilder.createBuilder(libraryOneTarget).addSrc(Paths.get("java/src/com/libone/Bar.java")).setCompiler(javac).build(ruleResolver);
  DefaultJavaLibrary buildable=(DefaultJavaLibrary)rule;
  ImmutableList.Builder<Step> stepsBuilder=ImmutableList.builder();
  buildable.createCommandsForJavacJar(buildable.getPathToOutput(),ImmutableSet.copyOf(buildable.getDeclaredClasspathEntries().values()),buildable.getJavacOptions(),Optional.<JavacStep.SuggestBuildRules>absent(),stepsBuilder,libraryOneTarget,buildable.getPathToOutput().resolve("output.jar"),ImmutableList.<Step>of());
  List<Step> steps=stepsBuilder.build();
  assertEquals(steps.size(),4);
  assertTrue(((JavacStep)steps.get(2)).getJavac() instanceof Jsr199Javac);
  JarBackedJavac jsrJavac=((JarBackedJavac)(((JavacStep)steps.get(2)).getJavac()));
  assertEquals(jsrJavac.getCompilerClassPath(),ImmutableSet.of(new BuildTargetSourcePath(javac.getBuildTarget())));
}
