{
  ProjectFilesystem filesystem=new AllExistingProjectFilesystem(){
    @Override public boolean isDirectory(    Path path,    LinkOption... linkOptionsk){
      return false;
    }
  }
;
  DefaultJavaLibrary rule1=(DefaultJavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//lib:lib")).addSrc(Paths.get("agifhbkjdec.java")).addSrc(Paths.get("bdeafhkgcji.java")).addSrc(Paths.get("bdehgaifjkc.java")).addSrc(Paths.get("cfiabkjehgd.java")).addResource(new TestSourcePath("becgkaifhjd.txt")).addResource(new TestSourcePath("bkhajdifcge.txt")).addResource(new TestSourcePath("cabfghjekid.txt")).addResource(new TestSourcePath("chkdbafijge.txt")).build(new BuildRuleResolver(),filesystem);
  DefaultJavaLibrary rule2=(DefaultJavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//lib:lib")).addSrc(Paths.get("cfiabkjehgd.java")).addSrc(Paths.get("bdehgaifjkc.java")).addSrc(Paths.get("bdeafhkgcji.java")).addSrc(Paths.get("agifhbkjdec.java")).addResource(new TestSourcePath("chkdbafijge.txt")).addResource(new TestSourcePath("cabfghjekid.txt")).addResource(new TestSourcePath("bkhajdifcge.txt")).addResource(new TestSourcePath("becgkaifhjd.txt")).build(new BuildRuleResolver(),filesystem);
  Iterable<Path> inputs1=rule1.getInputsToCompareToOutput();
  Iterable<Path> inputs2=rule2.getInputsToCompareToOutput();
  assertEquals(ImmutableList.copyOf(inputs1),ImmutableList.copyOf(inputs2));
  ImmutableMap.Builder<String,String> fileHashes=ImmutableMap.builder();
  for (  String filename : ImmutableList.of("agifhbkjdec.java","bdeafhkgcji.java","bdehgaifjkc.java","cfiabkjehgd.java","becgkaifhjd.txt","bkhajdifcge.txt","cabfghjekid.txt","chkdbafijge.txt")) {
    fileHashes.put(filename,Hashing.sha1().hashString(filename,Charsets.UTF_8).toString());
  }
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new FakeRuleKeyBuilderFactory(FakeFileHashCache.createFromStrings(fileHashes.build()));
  RuleKey.Builder builder1=ruleKeyBuilderFactory.newInstance(rule1);
  RuleKey.Builder builder2=ruleKeyBuilderFactory.newInstance(rule2);
  rule1.appendToRuleKey(builder1);
  rule2.appendToRuleKey(builder2);
  RuleKey.Builder.RuleKeyPair pair1=builder1.build();
  RuleKey.Builder.RuleKeyPair pair2=builder2.build();
  assertEquals(pair1.getTotalRuleKey(),pair2.getTotalRuleKey());
  assertEquals(pair1.getRuleKeyWithoutDeps(),pair2.getRuleKeyWithoutDeps());
}
