{
  BuildTarget libraryOneTarget=BuildTargetFactory.newInstance("//:libone");
  FakeJavaLibrary libraryOne=new FakeJavaLibrary(libraryOneTarget,new SourcePathResolver(new BuildRuleResolver())){
    @Override public Sha1HashCode getAbiKey(){
      return Sha1HashCode.of(Strings.repeat("cafebabe",5));
    }
    @Override public ImmutableSetMultimap<JavaLibrary,Path> getDeclaredClasspathEntries(){
      return ImmutableSetMultimap.of((JavaLibrary)this,Paths.get("java/src/com/libone/bar.jar"));
    }
    @Override public ImmutableSetMultimap<JavaLibrary,Path> getOutputClasspathEntries(){
      return ImmutableSetMultimap.of((JavaLibrary)this,Paths.get("java/src/com/libone/bar.jar"));
    }
    @Override public ImmutableSetMultimap<JavaLibrary,Path> getTransitiveClasspathEntries(){
      return ImmutableSetMultimap.of();
    }
  }
;
  Map<BuildTarget,BuildRule> buildRuleIndex=Maps.newHashMap();
  buildRuleIndex.put(libraryOneTarget,libraryOne);
  BuildRuleResolver ruleResolver=new BuildRuleResolver(buildRuleIndex);
  BuildTarget libraryTwoTarget=BuildTargetFactory.newInstance("//:libtwo");
  BuildRule libraryTwo=JavaLibraryBuilder.createBuilder(libraryTwoTarget).addSrc(Paths.get("java/src/com/libtwo/Foo.java")).addDep(libraryOne.getBuildTarget()).build(ruleResolver);
  BuildContext buildContext=EasyMock.createMock(BuildContext.class);
  JavaPackageFinder javaPackageFinder=EasyMock.createMock(JavaPackageFinder.class);
  expect(buildContext.getJavaPackageFinder()).andReturn(javaPackageFinder);
  replay(buildContext,javaPackageFinder);
  List<Step> steps=libraryTwo.getBuildSteps(buildContext,new FakeBuildableContext());
  EasyMock.verify(buildContext,javaPackageFinder);
  ImmutableList<JavacStep> javacSteps=FluentIterable.from(steps).filter(JavacStep.class).toList();
  assertEquals("There should be only one javac step.",1,javacSteps.size());
  JavacStep javacStep=javacSteps.get(0);
  assertEquals("The classpath to use when compiling //:libtwo according to getDeclaredClasspathEntries()" + " should contain only bar.jar.",ImmutableSet.of(Paths.get("java/src/com/libone/bar.jar")),ImmutableSet.copyOf(((JavaLibrary)libraryTwo).getDeclaredClasspathEntries().values()));
  assertEquals("The classpath for the javac step to compile //:libtwo should contain only bar.jar.",ImmutableSet.of(Paths.get("java/src/com/libone/bar.jar")),javacStep.getClasspathEntries());
}
