{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildTarget nonIncludedTarget=BuildTargetFactory.newInstance("//:not_included");
  BuildRule notIncluded=JavaLibraryBuilder.createBuilder(nonIncludedTarget).addSrc(Paths.get("java/src/com/not_included/Raz.java")).build(ruleResolver);
  BuildTarget includedTarget=BuildTargetFactory.newInstance("//:included");
  BuildRule included=JavaLibraryBuilder.createBuilder(includedTarget).addSrc(Paths.get("java/src/com/included/Rofl.java")).build(ruleResolver);
  BuildTarget libraryOneTarget=BuildTargetFactory.newInstance("//:libone");
  BuildRule libraryOne=JavaLibraryBuilder.createBuilder(libraryOneTarget).addDep(notIncluded).addDep(included).addExportedDep(included).addSrc(Paths.get("java/src/com/libone/Bar.java")).build(ruleResolver);
  BuildTarget libraryTwoTarget=BuildTargetFactory.newInstance("//:libtwo");
  BuildRule libraryTwo=JavaLibraryBuilder.createBuilder(libraryTwoTarget).addSrc(Paths.get("java/src/com/libtwo/Foo.java")).addDep(libraryOne).addExportedDep(libraryOne).build(ruleResolver);
  BuildTarget parentTarget=BuildTargetFactory.newInstance("//:parent");
  BuildRule parent=JavaLibraryBuilder.createBuilder(parentTarget).addSrc(Paths.get("java/src/com/parent/Meh.java")).addDep(libraryTwo).build(ruleResolver);
  assertEquals("A java_library that depends on //:libone should include only libone.jar in its " + "classpath when compiling itself.",ImmutableSetMultimap.builder().put(notIncluded.getBuildable(),"buck-out/gen/lib__not_included__output/not_included.jar").build(),((JavaLibrary)notIncluded.getBuildable()).getOutputClasspathEntries());
  assertEquals(ImmutableSetMultimap.builder().put(included.getBuildable(),"buck-out/gen/lib__included__output/included.jar").build(),((JavaLibrary)included.getBuildable()).getOutputClasspathEntries());
  assertEquals(ImmutableSetMultimap.builder().put(included.getBuildable(),"buck-out/gen/lib__included__output/included.jar").put(libraryOne.getBuildable(),"buck-out/gen/lib__libone__output/libone.jar").put(libraryOne.getBuildable(),"buck-out/gen/lib__included__output/included.jar").build(),((JavaLibrary)libraryOne.getBuildable()).getOutputClasspathEntries());
  assertEquals("//:libtwo exports its deps, so a java_library that depends on //:libtwo should include " + "both libone.jar and libtwo.jar in its classpath when compiling itself.",ImmutableSetMultimap.builder().put(libraryOne.getBuildable(),"buck-out/gen/lib__libone__output/libone.jar").put(libraryOne.getBuildable(),"buck-out/gen/lib__included__output/included.jar").put(libraryTwo.getBuildable(),"buck-out/gen/lib__libone__output/libone.jar").put(libraryTwo.getBuildable(),"buck-out/gen/lib__libtwo__output/libtwo.jar").put(libraryTwo.getBuildable(),"buck-out/gen/lib__included__output/included.jar").build(),((JavaLibrary)libraryTwo.getBuildable()).getOutputClasspathEntries());
  assertEquals("A java_binary that depends on //:parent should include libone.jar, libtwo.jar and " + "parent.jar.",ImmutableSetMultimap.builder().put(included.getBuildable(),"buck-out/gen/lib__included__output/included.jar").put(notIncluded.getBuildable(),"buck-out/gen/lib__not_included__output/not_included.jar").put(libraryOne.getBuildable(),"buck-out/gen/lib__included__output/included.jar").put(libraryOne.getBuildable(),"buck-out/gen/lib__libone__output/libone.jar").put(libraryTwo.getBuildable(),"buck-out/gen/lib__included__output/included.jar").put(libraryTwo.getBuildable(),"buck-out/gen/lib__not_included__output/not_included.jar").put(libraryTwo.getBuildable(),"buck-out/gen/lib__libone__output/libone.jar").put(libraryTwo.getBuildable(),"buck-out/gen/lib__libtwo__output/libtwo.jar").put(parent.getBuildable(),"buck-out/gen/lib__parent__output/parent.jar").build(),((JavaLibrary)parent.getBuildable()).getTransitiveClasspathEntries());
  assertEquals("A java_library that depends on //:parent should include only parent.jar in its " + "-classpath when compiling itself.",ImmutableSetMultimap.builder().put(parent.getBuildable(),"buck-out/gen/lib__parent__output/parent.jar").build(),((JavaLibrary)parent.getBuildable()).getOutputClasspathEntries());
}
