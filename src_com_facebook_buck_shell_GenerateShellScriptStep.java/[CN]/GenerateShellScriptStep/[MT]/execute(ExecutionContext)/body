{
  List<String> lines=Lists.newArrayList();
  lines.add("#!/bin/bash");
  lines.add("set -e");
  int levelsBelowRoot=outputFile.getNameCount() - 1;
  String pathBackToRoot=Joiner.on("/").join(Collections.nCopies(levelsBelowRoot,".."));
  lines.add(String.format("BUCK_REAL_ROOT=\"$(cd `dirname $0`/%s; pwd)\"",pathBackToRoot));
  lines.add("BUCK_TMP_ROOT=`mktemp -d -t sh_binary.XXXXXXXXXX`");
  lines.add("trap \"chmod -R 755 $BUCK_TMP_ROOT " + "&& rm -rf $BUCK_TMP_ROOT\" EXIT HUP INT TERM");
  lines.add("cd $BUCK_TMP_ROOT");
  String scriptToRunEscapedRelativePath=Escaper.escapeAsBashString(scriptToRun);
  lines.add("SCRIPT_TO_RUN=" + scriptToRunEscapedRelativePath);
  createSymlinkCommands(resources,lines);
  lines.add("find $BUCK_TMP_ROOT -type d -exec chmod 555 {} \\;");
  lines.add("find $BUCK_TMP_ROOT -type f -exec chmod 444 {} \\;");
  lines.add("BUCK_PROJECT_ROOT=$BUCK_TMP_ROOT \"$BUCK_TMP_ROOT/$SCRIPT_TO_RUN\" \"$@\"");
  File output=context.getProjectFilesystem().getFileForRelativePath(outputFile.toString());
  try {
    Files.write(Joiner.on('\n').join(lines) + '\n',output,Charsets.UTF_8);
  }
 catch (  IOException e) {
    e.printStackTrace(context.getStdErr());
    return 1;
  }
  if (output.setExecutable(true,false)) {
    return 0;
  }
 else {
    context.getConsole().printErrorText("Failed to set file as executable: " + output);
    return 1;
  }
}
