{
  DepsForBuildFiles depsForBuildFiles=new DepsForBuildFiles();
  for (  final TargetNode<?> rule : dependencyInfo.rulesWithAutodeps) {
    final Set<BuildTarget> providedDeps=dependencyInfo.rulesWithAutodepsToProvidedDeps.get(rule);
    final Predicate<TargetNode<?>> isVisibleDepNotAlreadyInProvidedDeps=new Predicate<TargetNode<?>>(){
      @Override public boolean apply(      TargetNode<?> provider){
        return provider.isVisibleTo(graph,rule) && !providedDeps.contains(provider.getBuildTarget());
      }
    }
;
    final boolean isJavaTestRule=rule.getType() == JavaTestDescription.TYPE;
    for (    DependencyType type : DependencyType.values()) {
      HashMultimap<TargetNode<?>,String> ruleToSymbolsMap;
switch (type) {
case DEPS:
        ruleToSymbolsMap=dependencyInfo.ruleToRequiredSymbols;
      break;
case EXPORTED_DEPS:
    ruleToSymbolsMap=dependencyInfo.ruleToExportedSymbols;
  break;
default :
throw new IllegalStateException("Unrecognized type: " + type);
}
final DependencyType typeOfDepToAdd;
if (isJavaTestRule) {
typeOfDepToAdd=DependencyType.DEPS;
}
 else {
typeOfDepToAdd=type;
}
for (String requiredSymbol : ruleToSymbolsMap.get(rule)) {
BuildTarget provider=findProviderForSymbolFromBuckConfig(requiredSymbol);
if (provider != null) {
depsForBuildFiles.addDep(rule.getBuildTarget(),provider,typeOfDepToAdd);
continue;
}
Set<TargetNode<?>> providers=dependencyInfo.symbolToProviders.get(requiredSymbol);
SortedSet<TargetNode<?>> candidateProviders=FluentIterable.from(providers).filter(isVisibleDepNotAlreadyInProvidedDeps).toSortedSet(Ordering.<TargetNode<?>>natural());
int numCandidates=candidateProviders.size();
if (numCandidates == 1) {
depsForBuildFiles.addDep(rule.getBuildTarget(),Iterables.getOnlyElement(candidateProviders).getBuildTarget(),typeOfDepToAdd);
}
 else if (numCandidates > 1) {
console.printErrorText(String.format("WARNING: Multiple providers for %s: %s. " + "Consider adding entry to .buckconfig to eliminate ambiguity:\n" + "[autodeps]\n"+ "java-package-mappings = %s => %s",requiredSymbol,Joiner.on(", ").join(candidateProviders),requiredSymbol,Iterables.getFirst(candidateProviders,null)));
}
 else {
SortedSet<TargetNode<?>> newCandidates=new TreeSet<>();
for (TargetNode<?> candidate : providers) {
  Set<TargetNode<?>> rulesThatExportCandidate=dependencyInfo.ruleToRulesThatExportIt.get(candidate);
  for (  TargetNode<?> ruleThatExportsCandidate : rulesThatExportCandidate) {
    if (ruleThatExportsCandidate.isVisibleTo(graph,rule)) {
      newCandidates.add(ruleThatExportsCandidate);
    }
  }
}
int numNewCandidates=newCandidates.size();
if (numNewCandidates == 1) {
  depsForBuildFiles.addDep(rule.getBuildTarget(),Iterables.getOnlyElement(newCandidates).getBuildTarget(),typeOfDepToAdd);
}
 else if (numNewCandidates > 1) {
  console.printErrorText(String.format("WARNING: No providers found for '%s' for build rule %s, " + "but there are multiple rules that export a rule to provide %s: %s",requiredSymbol,rule.getBuildTarget(),requiredSymbol,Joiner.on(", ").join(newCandidates)));
}
}
}
}
}
return depsForBuildFiles;
}
