{
  BuildTarget rnLibraryTarget=BuildTarget.builder(rootPath,"//foo","rn_library").addFlavors(DEFAULT_FLAVOR).build();
  ProjectFilesystem filesystem=new AllExistingProjectFilesystem();
  ReactNativeBuckConfig buckConfig=new ReactNativeBuckConfig(FakeBuckConfig.builder().setSections(ImmutableMap.of("react-native",ImmutableMap.of("packager","react-native/packager.sh"))).setFilesystem(filesystem).build());
  TargetNode<?> rnLibraryNode=IosReactNativeLibraryBuilder.builder(rnLibraryTarget,buckConfig).setBundleName("Apps/Foo/FooBundle.js").setEntryPath(new PathSourcePath(filesystem,Paths.get("js/FooApp.js"))).build();
  BuildTarget sharedLibraryTarget=BuildTarget.builder(rootPath,"//dep","shared").addFlavors(CxxDescriptionEnhancer.SHARED_FLAVOR).build();
  TargetNode<?> sharedLibraryNode=AppleLibraryBuilder.createBuilder(sharedLibraryTarget).build();
  BuildTarget bundleTarget=BuildTarget.builder(rootPath,"//foo","bundle").build();
  TargetNode<?> bundleNode=AppleBundleBuilder.createBuilder(bundleTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.BUNDLE)).setInfoPlist(new FakeSourcePath("Info.plist")).setBinary(sharedLibraryTarget).setDeps(Optional.of(ImmutableSortedSet.of(rnLibraryTarget))).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(rnLibraryNode,sharedLibraryNode,bundleNode));
  projectGenerator.createXcodeProjects();
  PBXProject project=projectGenerator.getGeneratedProject();
  PBXTarget target=assertTargetExistsAndReturnTarget(project,"//foo:bundle");
  assertThat(target.getName(),equalTo("//foo:bundle"));
  assertThat(target.isa(),equalTo("PBXNativeTarget"));
  PBXShellScriptBuildPhase shellScriptBuildPhase=getSingletonPhaseByType(target,PBXShellScriptBuildPhase.class);
  assertThat(shellScriptBuildPhase.getShellScript(),startsWith("BASE_DIR="));
}
