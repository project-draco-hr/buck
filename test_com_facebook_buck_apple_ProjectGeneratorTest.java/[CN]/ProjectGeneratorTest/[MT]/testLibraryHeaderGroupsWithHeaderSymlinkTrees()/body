{
  BuildTarget privateGeneratedTarget=BuildTarget.builder("//foo","generated1.h").build();
  BuildTarget publicGeneratedTarget=BuildTarget.builder("//foo","generated2.h").build();
  TargetNode<?> privateGeneratedNode=ExportFileBuilder.newExportFileBuilder(privateGeneratedTarget).build();
  TargetNode<?> publicGeneratedNode=ExportFileBuilder.newExportFileBuilder(publicGeneratedTarget).build();
  BuildTarget buildTarget=BuildTarget.builder("//foo","lib").build();
  TargetNode<?> node=AppleLibraryBuilder.createBuilder(buildTarget).setSrcs(Optional.of(ImmutableList.<SourceWithFlags>of())).setHeaders(ImmutableSortedSet.<SourcePath>of(new TestSourcePath("HeaderGroup1/foo.h"),new TestSourcePath("HeaderGroup2/baz.h"),new BuildTargetSourcePath(projectFilesystem,privateGeneratedTarget))).setExportedHeaders(ImmutableSortedSet.<SourcePath>of(new TestSourcePath("HeaderGroup1/bar.h"),new BuildTargetSourcePath(projectFilesystem,publicGeneratedTarget))).setUseBuckHeaderMaps(Optional.of(true)).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(node,privateGeneratedNode,publicGeneratedNode));
  projectGenerator.createXcodeProjects();
  PBXProject project=projectGenerator.getGeneratedProject();
  PBXGroup targetGroup=project.getMainGroup().getOrCreateChildGroupByName(buildTarget.getFullyQualifiedName());
  PBXGroup sourcesGroup=targetGroup.getOrCreateChildGroupByName("Sources");
  assertThat(sourcesGroup.getChildren(),hasSize(3));
  PBXGroup group1=(PBXGroup)Iterables.get(sourcesGroup.getChildren(),0);
  assertEquals("HeaderGroup1",group1.getName());
  assertThat(group1.getChildren(),hasSize(2));
  PBXFileReference fileRefFoo=(PBXFileReference)Iterables.get(group1.getChildren(),0);
  assertEquals("bar.h",fileRefFoo.getName());
  PBXFileReference fileRefBar=(PBXFileReference)Iterables.get(group1.getChildren(),1);
  assertEquals("foo.h",fileRefBar.getName());
  PBXGroup group2=(PBXGroup)Iterables.get(sourcesGroup.getChildren(),1);
  assertEquals("HeaderGroup2",group2.getName());
  assertThat(group2.getChildren(),hasSize(1));
  PBXFileReference fileRefBaz=(PBXFileReference)Iterables.get(group2.getChildren(),0);
  assertEquals("baz.h",fileRefBaz.getName());
  PBXGroup group3=(PBXGroup)Iterables.get(sourcesGroup.getChildren(),2);
  assertEquals("foo",group3.getName());
  assertThat(group3.getChildren(),hasSize(2));
  PBXFileReference fileRefGenerated1=(PBXFileReference)Iterables.get(group3.getChildren(),0);
  assertEquals("generated1.h",fileRefGenerated1.getName());
  PBXFileReference fileRefGenerated2=(PBXFileReference)Iterables.get(group3.getChildren(),1);
  assertEquals("generated2.h",fileRefGenerated2.getName());
  PBXTarget target=assertTargetExistsAndReturnTarget(project,"//foo:lib");
  assertEquals(Optional.<PBXBuildPhase>absent(),Iterables.tryFind(target.getBuildPhases(),new Predicate<PBXBuildPhase>(){
    @Override public boolean apply(    PBXBuildPhase input){
      return input instanceof PBXHeadersBuildPhase;
    }
  }
));
  assertEquals(ImmutableSet.of(CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(buildTarget,DefaultCxxPlatforms.FLAVOR,CxxDescriptionEnhancer.HeaderVisibility.PRIVATE),CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(buildTarget,DefaultCxxPlatforms.FLAVOR,CxxDescriptionEnhancer.HeaderVisibility.PUBLIC),privateGeneratedTarget,publicGeneratedTarget),projectGenerator.getRequiredBuildTargets());
}
