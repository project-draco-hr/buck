{
  BuildTarget buildTarget=BuildTarget.builder("//foo","rule").addFlavors(CxxDescriptionEnhancer.SHARED_FLAVOR).build();
  TargetNode<?> node=AppleLibraryBuilder.createBuilder(buildTarget).setConfigs(Optional.of(ImmutableSortedMap.of("Debug",ImmutableMap.<String,String>of()))).setFrameworks(Optional.of(ImmutableSortedSet.of(ImmutableFrameworkPath.ofSourceTreePath(new SourceTreePath(PBXReference.SourceTree.BUILT_PRODUCTS_DIR,Paths.get("libfoo.a"))),ImmutableFrameworkPath.ofSourceTreePath(new SourceTreePath(PBXReference.SourceTree.SDKROOT,Paths.get("libfoo.a"))),ImmutableFrameworkPath.ofSourceTreePath(new SourceTreePath(PBXReference.SourceTree.SOURCE_ROOT,Paths.get("libfoo.a")))))).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.<TargetNode<?>>of(node));
  projectGenerator.createXcodeProjects();
  PBXProject generatedProject=projectGenerator.getGeneratedProject();
  PBXTarget target=assertTargetExistsAndReturnTarget(generatedProject,"//foo:rule#shared");
  assertHasSingletonFrameworksPhaseWithFrameworkEntries(target,ImmutableList.of("$BUILT_PRODUCTS_DIR/libfoo.a","$SDKROOT/libfoo.a","$SOURCE_ROOT/libfoo.a"));
  ImmutableMap<String,String> settings=getBuildSettings(buildTarget,target,"Debug");
  assertEquals("$(inherited) ",settings.get("HEADER_SEARCH_PATHS"));
  assertEquals("$(inherited) ",settings.get("USER_HEADER_SEARCH_PATHS"));
  assertEquals("$(inherited) $BUILT_PRODUCTS_DIR $SDKROOT $SOURCE_ROOT",settings.get("LIBRARY_SEARCH_PATHS"));
  assertEquals("$(inherited) ",settings.get("FRAMEWORK_SEARCH_PATHS"));
}
