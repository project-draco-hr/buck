{
  BuildTarget rnLibraryTarget=BuildTarget.builder("//foo","rn_library").build();
  ProjectFilesystem filesystem=new AllExistingProjectFilesystem();
  ReactNativeBuckConfig buckConfig=new ReactNativeBuckConfig(new FakeBuckConfig(ImmutableMap.of("react-native",ImmutableMap.of("packager","react-native/packager.sh")),filesystem));
  TargetNode<?> rnLibraryNode=IosReactNativeLibraryBuilder.builder(rnLibraryTarget,buckConfig).setBundleName("Apps/Foo/FooBundle.js").setEntryPath(new PathSourcePath(filesystem,Paths.get("js/FooApp.js"))).build();
  BuildTarget sharedLibraryTarget=BuildTarget.builder("//dep","shared").addFlavors(CxxDescriptionEnhancer.SHARED_FLAVOR).build();
  TargetNode<?> sharedLibraryNode=AppleLibraryBuilder.createBuilder(sharedLibraryTarget).build();
  BuildTarget bundleTarget=BuildTarget.builder("//foo","bundle").addFlavors(ReactNativeFlavors.DO_NOT_BUNDLE).build();
  TargetNode<?> bundleNode=AppleBundleBuilder.createBuilder(bundleTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.BUNDLE)).setBinary(sharedLibraryTarget).setDeps(Optional.of(ImmutableSortedSet.of(rnLibraryTarget))).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(rnLibraryNode,sharedLibraryNode,bundleNode));
  projectGenerator.createXcodeProjects();
  PBXProject project=projectGenerator.getGeneratedProject();
  PBXTarget target=assertTargetExistsAndReturnTarget(project,"//foo:bundle#rn_no_bundle");
  assertThat(target.getName(),equalTo("//foo:bundle#rn_no_bundle"));
  assertThat(target.isa(),equalTo("PBXNativeTarget"));
  Iterator<PBXShellScriptBuildPhase> iterator=Iterables.filter(target.getBuildPhases(),PBXShellScriptBuildPhase.class).iterator();
  assertThat(iterator.hasNext(),is(false));
}
