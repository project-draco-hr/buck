{
  BuildTarget hostAppBinaryTarget=BuildTarget.builder("//foo","HostAppBinary").build();
  TargetNode<?> hostAppBinaryNode=AppleBinaryBuilder.createBuilder(hostAppBinaryTarget).build();
  BuildTarget hostAppTarget=BuildTarget.builder("//foo","HostApp").build();
  TargetNode<?> hostAppNode=AppleBundleBuilder.createBuilder(hostAppTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.APP)).setInfoPlist(new TestSourcePath("Info.plist")).setBinary(hostAppBinaryTarget).build();
  BuildTarget testTarget=BuildTarget.builder("//foo","AppTest").build();
  TargetNode<?> testNode=AppleTestBuilder.createBuilder(testTarget).setConfigs(Optional.of(ImmutableSortedMap.of("Debug",ImmutableMap.<String,String>of()))).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setInfoPlist(new TestSourcePath("Info.plist")).setTestHostApp(Optional.of(hostAppTarget)).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(hostAppBinaryNode,hostAppNode,testNode),ImmutableSet.<ProjectGenerator.Option>of());
  projectGenerator.createXcodeProjects();
  PBXTarget testPBXTarget=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:AppTest");
  ImmutableMap<String,String> settings=getBuildSettings(testTarget,testPBXTarget,"Debug");
  assertEquals("$BUILT_PRODUCTS_DIR/./HostApp.app/HostApp",settings.get("BUNDLE_LOADER"));
  assertEquals("$(BUNDLE_LOADER)",settings.get("TEST_HOST"));
}
