{
  BuildTarget source1Target=BuildTarget.builder(rootPath,"//Vendor","source1").build();
  BuildTarget source2Target=BuildTarget.builder(rootPath,"//Vendor","source2").build();
  BuildTarget source2RefTarget=BuildTarget.builder(rootPath,"//Vendor","source2ref").build();
  BuildTarget source3Target=BuildTarget.builder(rootPath,"//Vendor","source3").build();
  BuildTarget headerTarget=BuildTarget.builder(rootPath,"//Vendor","header").build();
  BuildTarget libTarget=BuildTarget.builder(rootPath,"//Libraries","foo").build();
  TargetNode<ExportFileDescription.Arg> source1=ExportFileBuilder.newExportFileBuilder(source1Target).setSrc(new PathSourcePath(projectFilesystem,Paths.get("Vendor/sources/source1"))).build();
  TargetNode<ExportFileDescription.Arg> source2=ExportFileBuilder.newExportFileBuilder(source2Target).setSrc(new PathSourcePath(projectFilesystem,Paths.get("Vendor/source2"))).build();
  TargetNode<ExportFileDescription.Arg> source2Ref=ExportFileBuilder.newExportFileBuilder(source2RefTarget).setSrc(new BuildTargetSourcePath(source2Target)).build();
  TargetNode<ExportFileDescription.Arg> source3=ExportFileBuilder.newExportFileBuilder(source3Target).build();
  TargetNode<ExportFileDescription.Arg> header=ExportFileBuilder.newExportFileBuilder(headerTarget).build();
  TargetNode<AppleLibraryDescription.Arg> library=AppleLibraryBuilder.createBuilder(libTarget).setConfigs(Optional.of(ImmutableSortedMap.of("Debug",ImmutableMap.<String,String>of()))).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new BuildTargetSourcePath(source1Target)),SourceWithFlags.of(new BuildTargetSourcePath(source2RefTarget)),SourceWithFlags.of(new BuildTargetSourcePath(source3Target))))).setPrefixHeader(Optional.<SourcePath>of(new BuildTargetSourcePath(headerTarget))).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.<TargetNode<?>>of(source1,source2,source2Ref,source3,header,library));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),libTarget.toString());
  assertHasSingletonSourcesPhaseWithSourcesAndFlags(target,ImmutableMap.of("Vendor/sources/source1",Optional.<String>absent(),"Vendor/source2",Optional.<String>absent(),"Vendor/source3",Optional.<String>absent()));
  ImmutableMap<String,String> settings=getBuildSettings(libTarget,target,"Debug");
  assertEquals("../Vendor/header",settings.get("GCC_PREFIX_HEADER"));
}
