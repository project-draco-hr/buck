{
  BuildTarget buildTarget=BuildTarget.builder("//foo","lib").build();
  TargetNode<?> node=AppleLibraryBuilder.createBuilder(buildTarget).setSrcs(Optional.of(ImmutableList.of(AppleSource.of(new TestSourcePath("HeaderGroup1/foo.h")),AppleSource.of(new TestSourcePath("HeaderGroup1/bar.h"),ImmutableList.of("public")),AppleSource.of(new TestSourcePath("HeaderGroup2/baz.h"))))).setUseBuckHeaderMaps(Optional.of(true)).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.<TargetNode<?>>of(node));
  projectGenerator.createXcodeProjects();
  PBXProject project=projectGenerator.getGeneratedProject();
  PBXGroup targetGroup=project.getMainGroup().getOrCreateChildGroupByName(buildTarget.getFullyQualifiedName());
  PBXGroup sourcesGroup=targetGroup.getOrCreateChildGroupByName("Sources");
  assertThat(sourcesGroup.getChildren(),hasSize(2));
  PBXGroup group1=(PBXGroup)Iterables.get(sourcesGroup.getChildren(),0);
  assertEquals("HeaderGroup1",group1.getName());
  assertThat(group1.getChildren(),hasSize(2));
  PBXFileReference fileRefFoo=(PBXFileReference)Iterables.get(group1.getChildren(),0);
  assertEquals("bar.h",fileRefFoo.getName());
  PBXFileReference fileRefBar=(PBXFileReference)Iterables.get(group1.getChildren(),1);
  assertEquals("foo.h",fileRefBar.getName());
  PBXGroup group2=(PBXGroup)Iterables.get(sourcesGroup.getChildren(),1);
  assertEquals("HeaderGroup2",group2.getName());
  assertThat(group2.getChildren(),hasSize(1));
  PBXFileReference fileRefBaz=(PBXFileReference)Iterables.get(group2.getChildren(),0);
  assertEquals("baz.h",fileRefBaz.getName());
  PBXTarget target=assertTargetExistsAndReturnTarget(project,"//foo:lib");
  assertEquals(Optional.<PBXBuildPhase>absent(),Iterables.tryFind(target.getBuildPhases(),new Predicate<PBXBuildPhase>(){
    @Override public boolean apply(    PBXBuildPhase input){
      return input instanceof PBXHeadersBuildPhase;
    }
  }
));
  List<Path> headerMaps=projectGenerator.getGeneratedHeaderMaps();
  assertThat(headerMaps,hasSize(3));
  assertEquals("buck-out/gen/foo/lib-public-headers.hmap",headerMaps.get(0).toString());
  assertThatHeaderMapFileContains(Paths.get("buck-out/gen/foo/lib-public-headers.hmap"),ImmutableMap.of("lib/bar.h","HeaderGroup1/bar.h"));
  assertEquals("buck-out/gen/foo/lib-target-headers.hmap",headerMaps.get(1).toString());
  assertThatHeaderMapFileContains(Paths.get("buck-out/gen/foo/lib-target-headers.hmap"),ImmutableMap.of("lib/foo.h","HeaderGroup1/foo.h","lib/bar.h","HeaderGroup1/bar.h","lib/baz.h","HeaderGroup2/baz.h"));
  assertEquals("buck-out/gen/foo/lib-target-user-headers.hmap",headerMaps.get(2).toString());
  assertThatHeaderMapFileContains(Paths.get("buck-out/gen/foo/lib-target-user-headers.hmap"),ImmutableMap.of("foo.h","HeaderGroup1/foo.h","bar.h","HeaderGroup1/bar.h","baz.h","HeaderGroup2/baz.h"));
}
