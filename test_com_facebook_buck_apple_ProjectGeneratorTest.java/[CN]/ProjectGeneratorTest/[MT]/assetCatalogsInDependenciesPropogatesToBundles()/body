{
  BuildTarget assetCatalogTarget=BuildTarget.builder("//foo","asset_catalog").build();
  TargetNode<?> assetCatalogNode=AppleAssetCatalogBuilder.createBuilder(assetCatalogTarget).setDirs(ImmutableSortedSet.of(Paths.get("AssetCatalog.xcassets"))).build();
  BuildTarget libraryTarget=BuildTarget.builder("//foo","lib").build();
  TargetNode<?> libraryNode=AppleLibraryBuilder.createBuilder(libraryTarget).setDeps(Optional.of(ImmutableSortedSet.of(assetCatalogTarget))).build();
  BuildTarget bundleLibraryTarget=BuildTarget.builder("//foo","bundlelib").build();
  TargetNode<?> bundleLibraryNode=AppleLibraryBuilder.createBuilder(bundleLibraryTarget).setDeps(Optional.of(ImmutableSortedSet.of(libraryTarget))).build();
  BuildTarget bundleTarget=BuildTarget.builder("//foo","bundle").build();
  TargetNode<?> bundleNode=AppleBundleBuilder.createBuilder(bundleTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.BUNDLE)).setBinary(bundleLibraryTarget).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(assetCatalogNode,libraryNode,bundleLibraryNode,bundleNode));
  projectGenerator.createXcodeProjects();
  PBXProject generatedProject=projectGenerator.getGeneratedProject();
  PBXTarget target=assertTargetExistsAndReturnTarget(generatedProject,"//foo:bundle");
  assertTrue(hasShellScriptPhaseToCompileAssetCatalogs(target));
}
