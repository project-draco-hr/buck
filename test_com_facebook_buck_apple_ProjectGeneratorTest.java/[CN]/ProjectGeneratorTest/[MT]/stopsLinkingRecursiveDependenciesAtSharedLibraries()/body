{
  BuildTarget dependentStaticLibraryTarget=BuildTarget.builder("//dep","static").build();
  TargetNode<?> dependentStaticLibraryNode=AppleLibraryBuilder.createBuilder(dependentStaticLibraryTarget).build();
  BuildTarget dependentSharedLibraryTarget=BuildTarget.builder("//dep","shared").addFlavors(CxxDescriptionEnhancer.SHARED_FLAVOR).build();
  TargetNode<?> dependentSharedLibraryNode=AppleLibraryBuilder.createBuilder(dependentSharedLibraryTarget).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new TestSourcePath("empty.m"))))).setDeps(Optional.of(ImmutableSortedSet.of(dependentStaticLibraryTarget))).build();
  BuildTarget libraryTarget=BuildTarget.builder("//foo","library").addFlavors(CxxDescriptionEnhancer.SHARED_FLAVOR).build();
  TargetNode<?> libraryNode=AppleLibraryBuilder.createBuilder(libraryTarget).setDeps(Optional.of(ImmutableSortedSet.of(dependentSharedLibraryTarget))).build();
  BuildTarget bundleTarget=BuildTarget.builder("//foo","final").build();
  TargetNode<?> bundleNode=AppleBundleBuilder.createBuilder(bundleTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.BUNDLE)).setBinary(libraryTarget).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(dependentStaticLibraryNode,dependentSharedLibraryNode,libraryNode,bundleNode));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:final");
  assertEquals(target.getProductType(),ProductType.BUNDLE);
  assertEquals("Should have exact number of build phases ",2,target.getBuildPhases().size());
  assertHasSingletonFrameworksPhaseWithFrameworkEntries(target,ImmutableList.of("$BUILT_PRODUCTS_DIR/libshared.dylib"));
}
