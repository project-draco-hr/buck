{
  BuildTarget buildTarget=BuildTarget.builder("//foo","lib").build();
  TargetNode<?> node=AppleLibraryBuilder.createBuilder(buildTarget).setConfigs(Optional.of(ImmutableSortedMap.of("Debug",ImmutableMap.<String,String>of()))).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new TestSourcePath("foo.m"),ImmutableList.of("-foo")),SourceWithFlags.of(new TestSourcePath("bar.m"))))).setExtraXcodeSources(Optional.of(ImmutableList.<SourcePath>of(new TestSourcePath("libsomething.a")))).setHeaders(ImmutableSortedSet.<SourcePath>of(new TestSourcePath("foo.h"))).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.<TargetNode<?>>of(node));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:lib");
  assertThat(target.isa(),equalTo("PBXNativeTarget"));
  assertThat(target.getProductType(),equalTo(ProductType.STATIC_LIBRARY));
  assertHasConfigurations(target,"Debug");
  assertEquals("Should have exact number of build phases",1,target.getBuildPhases().size());
  assertHasSingletonSourcesPhaseWithSourcesAndFlags(target,ImmutableMap.of("foo.m",Optional.of("-foo"),"bar.m",Optional.<String>absent(),"libsomething.a",Optional.<String>absent()));
  assertTrue(FluentIterable.from(target.getBuildPhases()).filter(PBXResourcesBuildPhase.class).isEmpty());
}
