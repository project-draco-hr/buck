{
  TargetNode<AppleResourceDescription.Arg> testLibDepResource=AppleResourceBuilder.createBuilder(BuildTarget.builder("//lib","deplibresource").build()).setFiles(ImmutableSet.<SourcePath>of(new TestSourcePath("bar.png"))).setDirs(ImmutableSet.<SourcePath>of()).build();
  TargetNode<AppleNativeTargetDescriptionArg> testLibDepLib=AppleLibraryBuilder.createBuilder(BuildTarget.builder("//libs","deplib").build()).setFrameworks(Optional.of(ImmutableSortedSet.of(FrameworkPath.ofSourceTreePath(new SourceTreePath(PBXReference.SourceTree.SDKROOT,Paths.get("DeclaredInTestLibDep.framework"),Optional.<String>absent()))))).setDeps(Optional.of(ImmutableSortedSet.of(testLibDepResource.getBuildTarget()))).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new TestSourcePath("e.m"))))).build();
  TargetNode<AppleNativeTargetDescriptionArg> dep1=AppleLibraryBuilder.createBuilder(BuildTarget.builder("//foo","dep1").build()).setDeps(Optional.of(ImmutableSortedSet.of(testLibDepLib.getBuildTarget()))).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new TestSourcePath("e.m"))))).setFrameworks(Optional.of(ImmutableSortedSet.of(FrameworkPath.ofSourceTreePath(new SourceTreePath(PBXReference.SourceTree.SDKROOT,Paths.get("DeclaredInTestLib.framework"),Optional.<String>absent()))))).build();
  TargetNode<AppleNativeTargetDescriptionArg> dep2=AppleLibraryBuilder.createBuilder(BuildTarget.builder("//foo","dep2").build()).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new TestSourcePath("e.m"))))).build();
  TargetNode<AppleTestDescription.Arg> xctest1=AppleTestBuilder.createBuilder(BuildTarget.builder("//foo","xctest1").build()).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setDeps(Optional.of(ImmutableSortedSet.of(dep1.getBuildTarget()))).setFrameworks(Optional.of(ImmutableSortedSet.of(FrameworkPath.ofSourceTreePath(new SourceTreePath(PBXReference.SourceTree.SDKROOT,Paths.get("DeclaredInTest.framework"),Optional.<String>absent()))))).build();
  TargetNode<AppleTestDescription.Arg> xctest2=AppleTestBuilder.createBuilder(BuildTarget.builder("//foo","xctest2").build()).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setDeps(Optional.of(ImmutableSortedSet.of(dep2.getBuildTarget()))).build();
  ProjectGenerator projectGenerator=new ProjectGenerator(TargetGraphFactory.newInstance(testLibDepResource,testLibDepLib,dep1,dep2,xctest1,xctest2),ImmutableSet.<BuildTarget>of(),projectFilesystem,Optional.<Path>absent(),OUTPUT_DIRECTORY,PROJECT_NAME,"BUCK",ProjectGenerator.SEPARATED_PROJECT_OPTIONS,Optional.<BuildTarget>absent(),ImmutableList.<String>of(),PLATFORMS,DEFAULT_PLATFORM,new Function<TargetNode<?>,Path>(){
    @Nullable @Override public Path apply(    TargetNode<?> input){
      return null;
    }
  }
).setTestsToGenerateAsStaticLibraries(ImmutableSet.of(xctest1,xctest2)).setAdditionalCombinedTestTargets(ImmutableMultimap.of(AppleTestBundleParamsKey.fromAppleTestDescriptionArg(xctest1.getConstructorArg()),xctest1,AppleTestBundleParamsKey.fromAppleTestDescriptionArg(xctest2.getConstructorArg()),xctest2));
  projectGenerator.createXcodeProjects();
  ImmutableSet<PBXTarget> combinedTestTargets=projectGenerator.getBuildableCombinedTestTargets();
  assertThat(combinedTestTargets,hasSize(1));
  assertThat(combinedTestTargets,hasItem(targetWithName("_BuckCombinedTest-xctest-0")));
  PBXProject project=projectGenerator.getGeneratedProject();
  PBXTarget target=assertTargetExistsAndReturnTarget(project,"_BuckCombinedTest-xctest-0");
  assertHasSingletonSourcesPhaseWithSourcesAndFlags(target,ImmutableMap.of(BuckConstant.GEN_PATH.resolve("xcode-scripts/emptyFile.c").toString(),Optional.<String>absent()));
  assertHasSingletonFrameworksPhaseWithFrameworkEntries(target,ImmutableList.of("$BUILT_PRODUCTS_DIR/libxctest1.a","$BUILT_PRODUCTS_DIR/libxctest2.a","$BUILT_PRODUCTS_DIR/libdeplib.a","$BUILT_PRODUCTS_DIR/libdep1.a","$BUILT_PRODUCTS_DIR/libdep2.a","$SDKROOT/DeclaredInTestLib.framework","$SDKROOT/DeclaredInTestLibDep.framework","$SDKROOT/DeclaredInTest.framework"));
  assertHasSingletonResourcesPhaseWithEntries(target,"bar.png");
}
