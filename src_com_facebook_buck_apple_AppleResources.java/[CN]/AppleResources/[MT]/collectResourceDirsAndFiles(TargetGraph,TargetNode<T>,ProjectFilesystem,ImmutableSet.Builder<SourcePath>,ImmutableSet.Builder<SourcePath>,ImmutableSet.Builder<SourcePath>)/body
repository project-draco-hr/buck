{
  ImmutableSet<BuildRuleType> types=ReactNativeFlavors.skipBundling(targetNode.getBuildTarget()) ? ImmutableSet.of(AppleResourceDescription.TYPE) : ImmutableSet.of(AppleResourceDescription.TYPE,IosReactNativeLibraryDescription.TYPE);
  Iterable<TargetNode<?>> resourceNodes=AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(targetGraph,AppleBuildRules.RecursiveDependenciesMode.COPYING,targetNode,Optional.of(types));
  for (  TargetNode<?> resourceNode : resourceNodes) {
    Object constructorArg=resourceNode.getConstructorArg();
    if (constructorArg instanceof AppleResourceDescription.Arg) {
      AppleResourceDescription.Arg appleResource=(AppleResourceDescription.Arg)constructorArg;
      resourceDirs.addAll(appleResource.dirs);
      resourceFiles.addAll(appleResource.files);
    }
 else {
      Preconditions.checkState(constructorArg instanceof ReactNativeLibraryArgs);
      BuildTarget buildTarget=resourceNode.getBuildTarget();
      dirsContainingResourceDirs.add(new BuildTargetSourcePath(filesystem,buildTarget,ReactNativeBundle.getPathToJSBundleDir(buildTarget)),new BuildTargetSourcePath(filesystem,buildTarget,ReactNativeBundle.getPathToResources(buildTarget)));
    }
  }
}
