{
  ImmutableList.Builder<String> builder=ImmutableList.builder();
  ProjectFilesystem filesystem=context.getProjectFilesystem();
  AnnotationProcessingDataDecorator decorator;
  if (pathToOutputAbiFile.isPresent()) {
    abiKeyFile=filesystem.getFileForRelativePath(pathToOutputAbiFile.get());
    decorator=new AbiWritingAnnotationProcessingDataDecorator(abiKeyFile);
  }
 else {
    decorator=AnnotationProcessingDataDecorators.identity();
  }
  javacOptions.appendOptionsToList(builder,context.getProjectFilesystem().getAbsolutifier(),decorator);
  if (context.getVerbosity().shouldUseVerbosityFlagIfAvailable()) {
    builder.add("-verbose");
  }
  Function<Path,Path> pathRelativizer=filesystem.getAbsolutifier();
  builder.add("-d").add(pathRelativizer.apply(outputDirectory).toString());
  if (!buildClasspathEntries.isEmpty()) {
    String classpath=Joiner.on(File.pathSeparator).join(FluentIterable.from(buildClasspathEntries).transform(MorePaths.TO_PATH).transform(pathRelativizer));
    builder.add("-classpath",classpath);
  }
 else {
    builder.add("-classpath","''");
  }
  return builder.build();
}
