{
  CapturingPrintStream stdout=new CapturingPrintStream();
  CapturingPrintStream stderr=new CapturingPrintStream();
  try (ExecutionContext firstOrderContext=context.createSubContext(stdout,stderr)){
    Javac javac=getJavac();
    int declaredDepsResult=javac.buildWithClasspath(firstOrderContext,resolver,invokingRule,getOptions(context,declaredClasspathEntries),javaSourceFilePaths,pathToSrcsList,workingDirectory);
    String firstOrderStdout=stdout.getContentsAsString(Charsets.UTF_8);
    String firstOrderStderr=stderr.getContentsAsString(Charsets.UTF_8);
    if (declaredDepsResult != 0 && suggestBuildRules.isPresent()) {
      ImmutableSet<String> failedImports=findFailedImports(firstOrderStderr);
      ImmutableSet<String> suggestions=suggestBuildRules.get().suggest(context.getProjectFilesystem(),failedImports);
      ImmutableList.Builder<String> errorMessage=ImmutableList.builder();
      errorMessage.add(firstOrderStderr);
      if (!suggestions.isEmpty()) {
        String invoker=invokingRule.toString();
        errorMessage.add(String.format("Rule %s has failed to build.",invoker));
        errorMessage.add(Joiner.on(LINE_SEPARATOR).join(failedImports));
        errorMessage.add("Try adding the following deps:");
        errorMessage.add(Joiner.on(LINE_SEPARATOR).join(suggestions));
        errorMessage.add("");
        errorMessage.add("");
      }
      context.getStdOut().print(firstOrderStdout);
      context.getStdErr().println(Joiner.on("\n").join(errorMessage.build()));
    }
 else     if (declaredDepsResult != 0) {
      context.getStdOut().print(firstOrderStdout);
      context.getStdErr().print(firstOrderStderr);
    }
    return declaredDepsResult;
  }
 }
