{
  return new ArtifactCache(){
    @Override public CacheResult fetch(    RuleKey ruleKey,    Path output) throws InterruptedException {
      ArtifactCacheEvent.Started started=ArtifactCacheEvent.started(ArtifactCacheEvent.Operation.FETCH,ImmutableSet.of(ruleKey));
      eventBus.post(started);
      CacheResult fetchResult=delegate.fetch(ruleKey,output);
      eventBus.post(ArtifactCacheEvent.finished(started,fetchResult));
      return fetchResult;
    }
    @Override public void store(    ImmutableSet<RuleKey> ruleKeys,    ImmutableMap<String,String> metadata,    Path output) throws InterruptedException {
      ArtifactCacheEvent.Started started=ArtifactCacheEvent.started(ArtifactCacheEvent.Operation.STORE,ruleKeys);
      eventBus.post(started);
      delegate.store(ruleKeys,metadata,output);
      eventBus.post(ArtifactCacheEvent.finished(started));
    }
    @Override public boolean isStoreSupported(){
      return delegate.isStoreSupported();
    }
    @Override public void close() throws IOException {
      delegate.close();
    }
  }
;
}
