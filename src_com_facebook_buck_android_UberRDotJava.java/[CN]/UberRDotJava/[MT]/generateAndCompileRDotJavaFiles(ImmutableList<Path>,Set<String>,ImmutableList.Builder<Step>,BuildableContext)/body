{
  Path rDotJavaSrc=getPathToGeneratedRDotJavaSrcFiles();
  steps.add(new MakeCleanDirectoryStep(rDotJavaSrc));
  Path dummyManifestFile=BuildTargets.getGenPath(getBuildTarget(),"__%s_dummy_manifest/AndroidManifest.xml");
  GenRDotJavaStep genRDotJava=new GenRDotJavaStep(resDirectories,rDotJavaSrc,Iterables.get(rDotJavaPackages,0),false,FluentIterable.from(rDotJavaPackages).skip(1).toSet(),dummyManifestFile);
  steps.add(genRDotJava);
  if (shouldBuildStringSourceMap) {
    Path outputDirPath=getPathForNativeStringInfoDirectory();
    steps.add(new MakeCleanDirectoryStep(outputDirPath));
    GenStringSourceMapStep genNativeStringInfo=new GenStringSourceMapStep(rDotJavaSrc,resDirectories,outputDirPath);
    steps.add(genNativeStringInfo);
    buildableContext.recordArtifactsInDirectory(outputDirPath);
  }
  Set<SourcePath> javaSourceFilePaths=Sets.newHashSet();
  for (  String rDotJavaPackage : rDotJavaPackages) {
    Path path=rDotJavaSrc.resolve(rDotJavaPackage.replace('.','/')).resolve("R.java");
    javaSourceFilePaths.add(new PathSourcePath(path));
  }
  Path rDotJavaBin=getPathToCompiledRDotJavaFiles();
  steps.add(new MakeCleanDirectoryStep(rDotJavaBin));
  JavacStep javac=UberRDotJavaUtil.createJavacStepForUberRDotJavaFiles(javaSourceFilePaths,rDotJavaBin,javacOptions,getBuildTarget());
  steps.add(javac);
  Path rDotJavaClassesTxt=getPathToRDotJavaClassesTxt();
  steps.add(new MakeCleanDirectoryStep(rDotJavaClassesTxt.getParent()));
  steps.add(new AccumulateClassNamesStep(Optional.of(rDotJavaBin),rDotJavaClassesTxt));
  buildableContext.recordArtifactsInDirectory(rDotJavaSrc);
  buildableContext.recordArtifactsInDirectory(rDotJavaBin);
  buildableContext.recordArtifact(rDotJavaClassesTxt);
}
