{
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  ImmutableList<Path> resDirectories=filteredResourcesProvider.getResDirectories();
  if (!resDirectories.isEmpty()) {
    generateAndCompileRDotJavaFiles(resDirectories,rDotJavaPackages.get(),steps,buildableContext);
  }
  if (rDotJavaNeedsDexing && !resDirectories.isEmpty()) {
    Path rDotJavaDexDir=getPathToRDotJavaDexFiles();
    steps.add(new MakeCleanDirectoryStep(rDotJavaDexDir));
    steps.add(new DxStep(getPathToRDotJavaDex(),Collections.singleton(getPathToCompiledRDotJavaFiles()),DX_OPTIONS));
    final EstimateLinearAllocStep estimateLinearAllocStep=new EstimateLinearAllocStep(getPathToCompiledRDotJavaFiles());
    steps.add(estimateLinearAllocStep);
    buildableContext.recordArtifact(getPathToRDotJavaDex());
    steps.add(new AbstractExecutionStep("record_build_output"){
      @Override public int execute(      ExecutionContext context){
        buildableContext.addMetadata(R_DOT_JAVA_LINEAR_ALLOC_SIZE,estimateLinearAllocStep.get().toString());
        return 0;
      }
    }
);
  }
  return steps.build();
}
