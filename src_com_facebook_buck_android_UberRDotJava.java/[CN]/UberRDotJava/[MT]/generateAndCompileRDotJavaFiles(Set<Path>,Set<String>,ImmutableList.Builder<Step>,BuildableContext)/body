{
  Path rDotJavaSrc=getPathToGeneratedRDotJavaSrcFiles();
  commands.add(new MakeCleanDirectoryStep(rDotJavaSrc));
  GenRDotJavaStep genRDotJava=new GenRDotJavaStep(resDirectories,rDotJavaSrc,rDotJavaPackages.iterator().next(),false,rDotJavaPackages);
  commands.add(genRDotJava);
  if (shouldBuildStringSourceMap) {
    Path outputDirPath=getPathForNativeStringInfoDirectory();
    commands.add(new MakeCleanDirectoryStep(outputDirPath));
    GenStringSourceMapStep genNativeStringInfo=new GenStringSourceMapStep(rDotJavaSrc,resDirectories,outputDirPath);
    commands.add(genNativeStringInfo);
    buildableContext.recordArtifactsInDirectory(outputDirPath);
  }
  Set<Path> javaSourceFilePaths=Sets.newHashSet();
  for (  String rDotJavaPackage : rDotJavaPackages) {
    Path path=rDotJavaSrc.resolve(rDotJavaPackage.replace('.','/')).resolve("R.java");
    javaSourceFilePaths.add(path);
  }
  Path rDotJavaBin=getPathToCompiledRDotJavaFiles();
  commands.add(new MakeCleanDirectoryStep(rDotJavaBin));
  JavacStep javac=UberRDotJavaUtil.createJavacStepForUberRDotJavaFiles(javaSourceFilePaths,rDotJavaBin,javacOptions,buildTarget);
  commands.add(javac);
  final Path rDotJavaClassesTxt=rDotJavaBin.resolve("classes.txt");
  commands.add(new AccumulateClassNamesStep(Optional.of(rDotJavaBin),rDotJavaClassesTxt));
  commands.add(new AbstractExecutionStep("record_r_dot_java_classes_hash"){
    @Override public int execute(    ExecutionContext context){
      List<String> lines;
      try {
        ProjectFilesystem filesystem=context.getProjectFilesystem();
        lines=filesystem.readLines(rDotJavaClassesTxt);
      }
 catch (      IOException e) {
        context.logError(e,"There was an error reading classes.txt file: %s",rDotJavaClassesTxt);
        return 1;
      }
      buildableContext.addMetadata(R_DOT_JAVA_CLASSES_HASH,Hashing.combineOrdered(AccumulateClassNamesStep.parseClassHashes(lines).values()).toString());
      return 0;
    }
  }
);
  buildableContext.recordArtifactsInDirectory(rDotJavaSrc);
  buildableContext.recordArtifactsInDirectory(rDotJavaBin);
}
