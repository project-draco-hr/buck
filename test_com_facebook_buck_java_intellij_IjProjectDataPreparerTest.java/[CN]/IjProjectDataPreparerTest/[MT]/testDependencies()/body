{
  TargetNode<?> hamcrestTargetNode=PrebuiltJarBuilder.createBuilder(BuildTargetFactory.newInstance("//third-party/hamcrest:hamcrest")).setBinaryJar(Paths.get("third-party/hamcrest/hamcrest.jar")).build();
  TargetNode<?> guavaTargetNode=PrebuiltJarBuilder.createBuilder(BuildTargetFactory.newInstance("//third-party/guava:guava")).setBinaryJar(Paths.get("third-party/guava/guava.jar")).build();
  TargetNode<?> baseTargetNode=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//java/com/example/base:base")).addDep(guavaTargetNode.getBuildTarget()).addSrc(Paths.get("java/com/example/base/Base.java")).build();
  TargetNode<?> baseInlineTestsTargetNode=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//java/com/example/base:tests")).addDep(hamcrestTargetNode.getBuildTarget()).addSrc(Paths.get("java/com/example/base/TestBase.java")).build();
  TargetNode<?> baseTestsTargetNode=JavaTestBuilder.createBuilder(BuildTargetFactory.newInstance("//javatests/com/example/base:base")).addDep(baseTargetNode.getBuildTarget()).addDep(hamcrestTargetNode.getBuildTarget()).addSrc(Paths.get("javatests/com/example/base/Base.java")).build();
  IjModuleGraph moduleGraph=IjModuleGraphTest.createModuleGraph(ImmutableSet.of(hamcrestTargetNode,guavaTargetNode,baseTargetNode,baseInlineTestsTargetNode,baseTestsTargetNode));
  IjLibrary hamcrestLibrary=IjModuleGraphTest.getLibraryForTarget(moduleGraph,hamcrestTargetNode);
  IjLibrary guavaLibrary=IjModuleGraphTest.getLibraryForTarget(moduleGraph,guavaTargetNode);
  IjModule baseModule=IjModuleGraphTest.getModuleForTarget(moduleGraph,baseTargetNode);
  IjModule baseTestModule=IjModuleGraphTest.getModuleForTarget(moduleGraph,baseTestsTargetNode);
  IjProjectTemplateDataPreparer writer=new IjProjectTemplateDataPreparer(javaPackageFinder,moduleGraph,filesystem);
  assertEquals(IjModuleGraphTest.getModuleForTarget(moduleGraph,baseInlineTestsTargetNode),IjModuleGraphTest.getModuleForTarget(moduleGraph,baseTargetNode));
  DependencyEntry.Builder dependencyEntryBuilder=DependencyEntry.builder().setExported(false);
  assertEquals(ImmutableSet.of(dependencyEntryBuilder.setName(hamcrestLibrary.getName()).setType(IjDependencyListBuilder.Type.LIBRARY).setScope(IjDependencyListBuilder.Scope.COMPILE).build(),dependencyEntryBuilder.setName(guavaLibrary.getName()).setType(IjDependencyListBuilder.Type.LIBRARY).setScope(IjDependencyListBuilder.Scope.COMPILE).build()),writer.getDependencies(baseModule));
  assertEquals(ImmutableSet.of(dependencyEntryBuilder.setName(baseModule.getName()).setType(IjDependencyListBuilder.Type.MODULE).setScope(IjDependencyListBuilder.Scope.TEST).build(),dependencyEntryBuilder.setName(hamcrestLibrary.getName()).setType(IjDependencyListBuilder.Type.LIBRARY).setScope(IjDependencyListBuilder.Scope.TEST).build()),writer.getDependencies(baseTestModule));
}
