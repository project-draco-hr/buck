{
  TargetNode<?> hamcrestTargetNode=PrebuiltJarBuilder.createBuilder(BuildTargetFactory.newInstance("//third-party/hamcrest:hamcrest")).setBinaryJar(Paths.get("third-party/hamcrest/hamcrest.jar")).build();
  TargetNode<?> guavaTargetNode=PrebuiltJarBuilder.createBuilder(BuildTargetFactory.newInstance("//third-party/guava:guava")).setBinaryJar(Paths.get("third-party/guava/guava.jar")).build();
  TargetNode<?> baseTargetNode=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//java/com/example/base:base")).addDep(guavaTargetNode.getBuildTarget()).addSrc(Paths.get("java/com/example/base/Base.java")).build();
  TargetNode<?> baseGenruleTarget=GenruleBuilder.newGenruleBuilder(BuildTargetFactory.newInstance("//java/com/example/base:genrule")).build();
  TargetNode<?> baseInlineTestsTargetNode=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//java/com/example/base:tests")).addDep(hamcrestTargetNode.getBuildTarget()).addSrc(Paths.get("java/com/example/base/TestBase.java")).addSrcTarget(baseGenruleTarget.getBuildTarget()).build();
  TargetNode<?> baseTestsTargetNode=JavaTestBuilder.createBuilder(BuildTargetFactory.newInstance("//javatests/com/example/base:base")).addDep(baseTargetNode.getBuildTarget()).addDep(hamcrestTargetNode.getBuildTarget()).addSrc(Paths.get("javatests/com/example/base/Base.java")).build();
  IjModuleGraph moduleGraph=IjModuleGraphTest.createModuleGraph(ImmutableSet.of(hamcrestTargetNode,guavaTargetNode,baseTargetNode,baseGenruleTarget,baseInlineTestsTargetNode,baseTestsTargetNode),ImmutableMap.<TargetNode<?>,Path>of(baseInlineTestsTargetNode,Paths.get("buck-out/baseInlineTests.jar")));
  IjLibrary hamcrestLibrary=IjModuleGraphTest.getLibraryForTarget(moduleGraph,hamcrestTargetNode);
  IjLibrary guavaLibrary=IjModuleGraphTest.getLibraryForTarget(moduleGraph,guavaTargetNode);
  IjModule baseModule=IjModuleGraphTest.getModuleForTarget(moduleGraph,baseTargetNode);
  IjModule baseTestModule=IjModuleGraphTest.getModuleForTarget(moduleGraph,baseTestsTargetNode);
  IjProjectTemplateDataPreparer dataPreparer=new IjProjectTemplateDataPreparer(javaPackageFinder,moduleGraph,filesystem);
  assertEquals(IjModuleGraphTest.getModuleForTarget(moduleGraph,baseInlineTestsTargetNode),IjModuleGraphTest.getModuleForTarget(moduleGraph,baseTargetNode));
  DependencyEntryData.Builder dependencyEntryBuilder=DependencyEntryData.builder().setExported(false);
  assertThat(dataPreparer.getDependencies(baseModule),contains(allOf(hasProperty("type",equalTo(IjDependencyListBuilder.Type.LIBRARY)),hasProperty("data",equalTo(Optional.of(dependencyEntryBuilder.setName(guavaLibrary.getName()).setScope(IjDependencyListBuilder.Scope.COMPILE).build())))),allOf(hasProperty("type",equalTo(IjDependencyListBuilder.Type.LIBRARY)),hasProperty("data",equalTo(Optional.of(dependencyEntryBuilder.setName(hamcrestLibrary.getName()).setScope(IjDependencyListBuilder.Scope.COMPILE).build())))),allOf(hasProperty("type",equalTo(IjDependencyListBuilder.Type.SOURCE_FOLDER))),allOf(hasProperty("type",equalTo(IjDependencyListBuilder.Type.LIBRARY)),hasProperty("data",equalTo(Optional.of(dependencyEntryBuilder.setName("library_java_com_example_base_tests").setScope(IjDependencyListBuilder.Scope.PROVIDED).build()))))));
  assertThat(dataPreparer.getDependencies(baseTestModule),contains(allOf(hasProperty("type",equalTo(IjDependencyListBuilder.Type.MODULE)),hasProperty("data",equalTo(Optional.of(dependencyEntryBuilder.setName(baseModule.getName()).setScope(IjDependencyListBuilder.Scope.TEST).build())))),allOf(hasProperty("type",equalTo(IjDependencyListBuilder.Type.LIBRARY)),hasProperty("data",equalTo(Optional.of(dependencyEntryBuilder.setName(hamcrestLibrary.getName()).setScope(IjDependencyListBuilder.Scope.TEST).build())))),allOf(hasProperty("type",equalTo(IjDependencyListBuilder.Type.SOURCE_FOLDER)))));
}
