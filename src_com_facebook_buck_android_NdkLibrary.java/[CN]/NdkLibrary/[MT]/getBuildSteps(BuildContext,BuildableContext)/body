{
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  Path binDirectory=buildArtifactsDirectory.resolve("libs");
  steps.add(new RmStep(getProjectFilesystem(),makefile,true));
  steps.add(new MkdirStep(getProjectFilesystem(),makefile.getParent()));
  steps.add(new WriteFileStep(getProjectFilesystem(),makefileContents,makefile,false));
  steps.add(new NdkBuildStep(getProjectFilesystem(),root,makefile,buildArtifactsDirectory,binDirectory,flags,macroExpander));
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),genDirectory));
  steps.add(CopyStep.forDirectory(getProjectFilesystem(),binDirectory,genDirectory,CopyStep.DirectoryMode.CONTENTS_ONLY));
  buildableContext.recordArtifact(genDirectory);
  steps.add(new AbstractExecutionStep("cache_unstripped_so"){
    @Override public StepExecutionResult execute(    ExecutionContext context){
      try {
        Set<Path> unstrippedSharedObjs=getProjectFilesystem().getFilesUnderPath(buildArtifactsDirectory,new Predicate<Path>(){
          @Override public boolean apply(          Path input){
            return input.toString().endsWith(".so");
          }
        }
);
        for (        Path path : unstrippedSharedObjs) {
          buildableContext.recordArtifact(path);
        }
      }
 catch (      IOException e) {
        context.logError(e,"Failed to cache intermediate artifacts of %s.",getBuildTarget());
        return StepExecutionResult.ERROR;
      }
      return StepExecutionResult.SUCCESS;
    }
  }
);
  return steps.build();
}
