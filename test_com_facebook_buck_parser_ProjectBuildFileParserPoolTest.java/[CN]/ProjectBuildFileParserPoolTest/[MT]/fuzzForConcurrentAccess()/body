{
  final int parsersCount=3;
  Cell cell=EasyMock.createMock(Cell.class);
  ListeningExecutorService executorService=MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(4));
  try (ProjectBuildFileParserPool parserPool=new ProjectBuildFileParserPool(parsersCount,new Function<Cell,ProjectBuildFileParser>(){
    @Override public ProjectBuildFileParser apply(    Cell input){
      final AtomicInteger sleepCallCount=new AtomicInteger(0);
      return createMockParser(new IAnswer<ImmutableList<Map<String,Object>>>(){
        @Override public ImmutableList<Map<String,Object>> answer() throws Throwable {
          int numCalls=sleepCallCount.incrementAndGet();
          Preconditions.checkState(numCalls == 1);
          try {
            Thread.sleep(10);
          }
  finally {
            sleepCallCount.decrementAndGet();
          }
          return ImmutableList.of();
        }
      }
);
    }
  }
)){
    Futures.allAsList(scheduleWork(cell,parserPool,executorService,142)).get();
  }
  finally {
    executorService.shutdown();
  }
}
