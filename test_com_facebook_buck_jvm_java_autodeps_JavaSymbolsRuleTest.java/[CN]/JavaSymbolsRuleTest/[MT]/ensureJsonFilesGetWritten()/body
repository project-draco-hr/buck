{
  TestDataHelper.createProjectWorkspaceForScenario(this,"java_library_symbols_finder",tmp).setUp();
  ProjectFilesystem projectFilesystem=new ProjectFilesystem(tmp.getRootPath());
  ImmutableSortedSet<SourcePath> srcs=ImmutableSortedSet.<SourcePath>naturalOrder().addAll(FluentIterable.from(ImmutableSet.of("Example1.java","Example2.java")).transform(MorePaths.TO_PATH).transform(SourcePaths.toSourcePath(projectFilesystem))).add(new BuildTargetSourcePath(BuildTargetFactory.newInstance("//foo:bar"))).build();
  JavaFileParser javaFileParser=JavaFileParser.createJavaFileParser(JavacOptions.builder().setSourceLevel("7").setTargetLevel("7").build());
  JavaLibrarySymbolsFinder symbolsFinder=new JavaLibrarySymbolsFinder(srcs,javaFileParser,true);
  BuildTarget buildTarget=BuildTargetFactory.newInstance("//:examples");
  JavaSymbolsRule javaSymbolsRule=new JavaSymbolsRule(buildTarget,symbolsFinder,ImmutableSortedSet.of("com.example.generated.Example"),ObjectMappers.newDefaultInstance(),projectFilesystem);
  List<Step> buildSteps=javaSymbolsRule.getBuildSteps(null,null);
  ExecutionContext executionContext=createMock(ExecutionContext.class);
  ObjectMapper objectMapper=ObjectMappers.newDefaultInstance();
  expect(executionContext.getObjectMapper()).andReturn(objectMapper);
  replay(executionContext);
  for (  Step step : buildSteps) {
    step.execute(executionContext);
  }
  verify(executionContext);
  JsonNode jsonNode=objectMapper.readTree(projectFilesystem.getFileForRelativePath("buck-out/gen/__examples#java_symbols__.json"));
  assertTrue(jsonNode instanceof ObjectNode);
  assertEquals(ImmutableSet.of("com.example.Example1","com.example.Example2","com.example.generated.Example"),FluentIterable.from(jsonNode.get("provided")).transform(GET_STRING_LITERAL_VALUE_FROM_JSON_NODE).toSet());
  assertEquals(ImmutableSet.of("com.example.other.Bar","com.example.other.Foo"),FluentIterable.from(jsonNode.get("required")).transform(GET_STRING_LITERAL_VALUE_FROM_JSON_NODE).toSet());
}
