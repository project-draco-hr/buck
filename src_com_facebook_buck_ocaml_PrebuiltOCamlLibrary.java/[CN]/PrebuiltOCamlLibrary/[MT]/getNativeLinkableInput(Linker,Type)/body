{
  Preconditions.checkArgument(type == Type.STATIC,"Only supporting static linking in OCaml");
  Preconditions.checkState(bytecodeLib.equals(nativeLib.replaceFirst(OCamlCompilables.OCAML_CMXA_REGEX,OCamlCompilables.OCAML_CMA)),"Bytecode library should have the same name as native library but with a .cma extension");
  ImmutableList.Builder<SourcePath> librariesBuilder=ImmutableList.builder();
  librariesBuilder.add(new BuildTargetSourcePath(this.getBuildTarget(),getResolver().getPath(staticNativeLibraryPath)));
  librariesBuilder.add(new BuildTargetSourcePath(this.getBuildTarget(),getResolver().getPath(staticCLibraryPath)));
  final ImmutableList<SourcePath> libraries=librariesBuilder.build();
  ImmutableList.Builder<String> linkerArgsBuilder=ImmutableList.builder();
  linkerArgsBuilder.add(staticNativeLibraryPath.toString());
  linkerArgsBuilder.add(staticCLibraryPath.toString());
  final ImmutableList<String> linkerArgs=linkerArgsBuilder.build();
  return new NativeLinkableInput(libraries,linkerArgs);
}
