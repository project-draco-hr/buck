{
  Preconditions.checkState(bytecodeLib.equals(nativeLib.replaceFirst(OCamlCompilables.OCAML_CMXA_REGEX,OCamlCompilables.OCAML_CMA)),"Bytecode library should have the same name as native library but with a .cma extension");
  ImmutableList.Builder<Arg> argsBuilder=ImmutableList.builder();
  argsBuilder.add(new SourcePathArg(getResolver(),new BuildTargetSourcePath(getBuildTarget(),getResolver().getPath(staticNativeLibraryPath))));
  for (  SourcePath staticCLibraryPath : staticCLibraryPaths) {
    argsBuilder.add(new SourcePathArg(getResolver(),new BuildTargetSourcePath(getBuildTarget(),getResolver().getPath(staticCLibraryPath))));
  }
  return NativeLinkableInput.of(argsBuilder.build(),ImmutableSet.<FrameworkPath>of(),ImmutableSet.<FrameworkPath>of());
}
