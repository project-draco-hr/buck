{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"ocaml",tmp);
  workspace.setUp();
  BuildTarget target=BuildTargetFactory.newInstance("//clib:clib");
  BuildTarget binary=createOCamlLinkTarget(target);
  BuildTarget libplus=BuildTargetFactory.newInstance("//clib:plus");
  BuildTarget libplusStatic=createStaticLibraryBuildTarget(libplus);
  BuildTarget cclib=BuildTargetFactory.newInstance("//clib:cc");
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(new FakeBuckConfig()));
  CxxSourceRuleFactory cxxSourceRuleFactory=CxxSourceRuleFactoryHelper.of(cclib,cxxPlatform);
  BuildTarget cclibbin=CxxDescriptionEnhancer.createStaticLibraryBuildTarget(cclib,cxxPlatform.getFlavor(),CxxSourceRuleFactory.PicType.PDC);
  String sourceName="cc/cc.cpp";
  BuildTarget ppObj=cxxSourceRuleFactory.createPreprocessBuildTarget(sourceName,CxxSource.Type.CXX,CxxSourceRuleFactory.PicType.PDC);
  BuildTarget ccObj=cxxSourceRuleFactory.createCompileBuildTarget(sourceName,CxxSourceRuleFactory.PicType.PDC);
  BuildTarget headerSymlinkTreeTarget=CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(cclib,cxxPlatform.getFlavor(),HeaderVisibility.PRIVATE);
  BuildTarget exportedHeaderSymlinkTreeTarget=CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(cclib,cxxPlatform.getFlavor(),HeaderVisibility.PUBLIC);
  ImmutableSet<BuildTarget> targets=ImmutableSet.of(target,binary,libplus,libplusStatic,cclib,cclibbin,ccObj,ppObj,headerSymlinkTreeTarget,exportedHeaderSymlinkTreeTarget);
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  BuckBuildLog buildLog=workspace.getBuildLog();
  assertTrue(buildLog.getAllTargets().containsAll(targets));
  buildLog.assertTargetBuiltLocally(target.toString());
  buildLog.assertTargetBuiltLocally(binary.toString());
  buildLog.assertTargetBuiltLocally(libplus.toString());
  buildLog.assertTargetBuiltLocally(libplusStatic.toString());
  buildLog.assertTargetBuiltLocally(cclibbin.toString());
  buildLog.assertTargetBuiltLocally(ccObj.toString());
  buildLog.assertTargetBuiltLocally(ppObj.toString());
  buildLog.assertTargetBuiltLocally(headerSymlinkTreeTarget.toString());
  buildLog.assertTargetBuiltLocally(exportedHeaderSymlinkTreeTarget.toString());
  workspace.resetBuildLogFile();
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertTrue(buildLog.getAllTargets().containsAll(targets));
  buildLog.assertTargetHadMatchingRuleKey(target.toString());
  buildLog.assertTargetHadMatchingRuleKey(binary.toString());
  buildLog.assertTargetHadMatchingRuleKey(libplus.toString());
  buildLog.assertTargetHadMatchingRuleKey(libplusStatic.toString());
  buildLog.assertTargetHadMatchingRuleKey(cclibbin.toString());
  buildLog.assertTargetHadMatchingRuleKey(ccObj.toString());
  buildLog.assertTargetHadMatchingRuleKey(ppObj.toString());
  buildLog.assertTargetHadMatchingRuleKey(headerSymlinkTreeTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(exportedHeaderSymlinkTreeTarget.toString());
  workspace.resetBuildLogFile();
  workspace.replaceFileContents("clib/cc/cc.cpp","Hi there","hi there");
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertTrue(buildLog.getAllTargets().containsAll(targets));
  buildLog.assertTargetBuiltLocally(target.toString());
  buildLog.assertTargetBuiltLocally(binary.toString());
  buildLog.assertTargetBuiltLocally(libplus.toString());
  buildLog.assertTargetBuiltLocally(libplusStatic.toString());
  buildLog.assertTargetBuiltLocally(cclibbin.toString());
  buildLog.assertTargetBuiltLocally(ccObj.toString());
  buildLog.assertTargetBuiltLocally(ppObj.toString());
  buildLog.assertTargetHadMatchingRuleKey(headerSymlinkTreeTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(exportedHeaderSymlinkTreeTarget.toString());
}
