{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"ocaml",tmp);
  workspace.setUp();
  BuildTarget target=BuildTargetFactory.newInstance("//hello_ocaml:hello_ocaml");
  BuildTarget lib=BuildTargetFactory.newInstance("//hello_ocaml:ocamllib");
  BuildTarget staticLib=createStaticLibraryBuildTarget(lib);
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  BuckBuildLog buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(target,staticLib),buildLog.getAllTargets());
  buildLog.assertTargetBuiltLocally(target.toString());
  buildLog.assertTargetBuiltLocally(staticLib.toString());
  workspace.resetBuildLogFile();
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(target,staticLib),buildLog.getAllTargets());
  buildLog.assertTargetHadMatchingRuleKey(target.toString());
  buildLog.assertTargetHadMatchingRuleKey(staticLib.toString());
  workspace.resetBuildLogFile();
  workspace.replaceFileContents("hello_ocaml/amodule.ml","v2","v3");
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(target,staticLib),buildLog.getAllTargets());
  buildLog.assertTargetBuiltLocally(target.toString());
  buildLog.assertTargetHadMatchingRuleKey(staticLib.toString());
  workspace.resetBuildLogFile();
  workspace.replaceFileContents("ocamllib/m1.ml","print me","print Me");
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(target,staticLib),buildLog.getAllTargets());
  buildLog.assertTargetBuiltLocally(target.toString());
  buildLog.assertTargetBuiltLocally(staticLib.toString());
  workspace.resetBuildLogFile();
  workspace.replaceFileContents("hello_ocaml/BUCK","#INSERT_POINT","'../ocamllib/dummy.ml',");
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(target,staticLib),buildLog.getAllTargets());
  buildLog.assertTargetBuiltLocally(target.toString());
  buildLog.assertTargetBuiltLocally(staticLib.toString());
  workspace.resetBuildLogFile();
  BuildTarget lib1=BuildTargetFactory.newInstance("//hello_ocaml:ocamllib1");
  BuildTarget staticLib1=createStaticLibraryBuildTarget(lib1);
  workspace.replaceFileContents("hello_ocaml/BUCK","name = 'ocamllib'","name = 'ocamllib1'");
  workspace.replaceFileContents("hello_ocaml/BUCK",":ocamllib",":ocamllib1");
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(target,staticLib1),buildLog.getAllTargets());
  buildLog.assertTargetBuiltLocally(target.toString());
  buildLog.assertTargetBuiltLocally(staticLib1.toString());
}
