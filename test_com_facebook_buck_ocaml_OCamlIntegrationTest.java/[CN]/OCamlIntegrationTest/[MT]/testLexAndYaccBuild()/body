{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"ocaml",tmp);
  workspace.setUp();
  BuildTarget target=BuildTargetFactory.newInstance("//calc:calc");
  BuildTarget binary=createOCamlLinkTarget(target);
  ImmutableSet<BuildTarget> targets=ImmutableSet.of(target,binary);
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  BuckBuildLog buildLog=workspace.getBuildLog();
  assertEquals(targets,buildLog.getAllTargets());
  buildLog.assertTargetBuiltLocally(target.toString());
  buildLog.assertTargetBuiltLocally(binary.toString());
  workspace.resetBuildLogFile();
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(targets,buildLog.getAllTargets());
  buildLog.assertTargetHadMatchingRuleKey(target.toString());
  buildLog.assertTargetHadMatchingRuleKey(binary.toString());
  workspace.resetBuildLogFile();
  workspace.replaceFileContents("calc/lexer.mll","The type token","the type token");
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(targets,buildLog.getAllTargets());
  buildLog.assertTargetBuiltLocally(target.toString());
  buildLog.assertTargetBuiltLocally(binary.toString());
  workspace.resetBuildLogFile();
  workspace.replaceFileContents("calc/parser.mly","the entry point","The entry point");
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(targets,buildLog.getAllTargets());
  buildLog.assertTargetBuiltLocally(target.toString());
  buildLog.assertTargetBuiltLocally(binary.toString());
}
