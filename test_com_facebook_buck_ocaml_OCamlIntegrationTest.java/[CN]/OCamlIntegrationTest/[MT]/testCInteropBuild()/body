{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"ocaml",tmp);
  workspace.setUp();
  BuildTarget target=BuildTargetFactory.newInstance("//ctest:ctest");
  BuildTarget binary=createOCamlLinkTarget(target);
  ImmutableSet<BuildTarget> targets=ImmutableSet.of(target,binary);
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  BuckBuildLog buildLog=workspace.getBuildLog();
  assertTrue(buildLog.getAllTargets().containsAll(targets));
  buildLog.assertTargetBuiltLocally(target.toString());
  workspace.resetBuildLogFile();
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(binary,target),buildLog.getAllTargets());
  buildLog.assertTargetHadMatchingRuleKey(binary.toString());
  buildLog.assertTargetHadMatchingRuleKey(target.toString());
  workspace.resetBuildLogFile();
  workspace.replaceFileContents("ctest/ctest.c","NATIVE PLUS","Native Plus");
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertTrue(buildLog.getAllTargets().containsAll(targets));
  buildLog.assertTargetBuiltLocally(target.toString());
  buildLog.assertTargetBuiltLocally(binary.toString());
  workspace.resetBuildLogFile();
  workspace.replaceFileContents("ctest/BUCK","#INSERTION_POINT","compiler_flags=['-noassert']");
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertTrue(buildLog.getAllTargets().containsAll(targets));
  buildLog.assertTargetBuiltLocally(target.toString());
  buildLog.assertTargetBuiltLocally(binary.toString());
  workspace.resetBuildLogFile();
  workspace.replaceFileContents("ctest/BUCK","compiler_flags=['-noassert']","compiler_flags=[]");
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertTrue(buildLog.getAllTargets().containsAll(targets));
  buildLog.assertTargetBuiltLocally(target.toString());
  buildLog.assertTargetBuiltLocally(binary.toString());
  workspace.resetBuildLogFile();
  workspace.replaceFileContents("ctest/BUCK","compiler_flags=[]","compiler_flags=[]");
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(binary,target),buildLog.getAllTargets());
  buildLog.assertTargetHadMatchingRuleKey(binary.toString());
  buildLog.assertTargetHadMatchingRuleKey(target.toString());
}
