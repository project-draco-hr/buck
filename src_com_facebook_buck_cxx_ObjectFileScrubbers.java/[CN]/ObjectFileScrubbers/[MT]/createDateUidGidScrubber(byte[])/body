{
  return new FileScrubber(){
    /** 
 * Efficiently modifies the archive backed by the given buffer to remove any non-deterministic
 * meta-data such as timestamps, UIDs, and GIDs.
 * @param file a {@link ByteBuffer} wrapping the contents of the archive.
 */
    @SuppressWarnings("PMD.AvoidUsingOctalValues") @Override public void scrubFile(    ByteBuffer file) throws ScrubException {
      try {
        byte[] globalHeader=getBytes(file,expectedGlobalHeader.length);
        checkArchive(Arrays.equals(expectedGlobalHeader,globalHeader),"invalid global header");
        while (file.hasRemaining()) {
          getBytes(file,16);
          putIntAsDecimalString(file,12,0);
          putIntAsDecimalString(file,6,0);
          putIntAsDecimalString(file,6,0);
          putIntAsOctalString(file,8,0100644);
          int fileSize=getDecimalStringAsInt(file,10);
          byte[] fileMagic=getBytes(file,2);
          checkArchive(Arrays.equals(END_OF_FILE_HEADER_MARKER,fileMagic),"invalid file magic");
          file.position(file.position() + fileSize + fileSize % 2);
        }
      }
 catch (      BufferUnderflowException|ReadOnlyBufferException e) {
        throw new ScrubException(e.getMessage());
      }
    }
  }
;
}
