{
  return new FileScrubber(){
    /** 
 * Efficiently modifies the archive backed by the given buffer to remove any non-deterministic
 * meta-data such as timestamps, UIDs, and GIDs.
 */
    @SuppressWarnings("PMD.AvoidUsingOctalValues") @Override public void scrubFile(    FileChannel file) throws IOException, ScrubException {
      MappedByteBuffer map=file.map(FileChannel.MapMode.READ_WRITE,0,file.size());
      try {
        byte[] globalHeader=getBytes(map,expectedGlobalHeader.length);
        checkArchive(Arrays.equals(expectedGlobalHeader,globalHeader),"invalid global header");
        while (map.hasRemaining()) {
          getBytes(map,16);
          putIntAsDecimalString(map,12,0);
          putIntAsDecimalString(map,6,0);
          putIntAsDecimalString(map,6,0);
          putIntAsOctalString(map,8,0100644);
          int fileSize=getDecimalStringAsInt(map,10);
          byte[] fileMagic=getBytes(map,2);
          checkArchive(Arrays.equals(END_OF_FILE_HEADER_MARKER,fileMagic),"invalid file magic");
          map.position(map.position() + fileSize + fileSize % 2);
        }
      }
 catch (      BufferUnderflowException|ReadOnlyBufferException e) {
        throw new ScrubException(e.getMessage());
      }
    }
  }
;
}
