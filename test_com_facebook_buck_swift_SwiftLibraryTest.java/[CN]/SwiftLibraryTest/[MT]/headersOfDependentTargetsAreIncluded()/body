{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  BuildTarget symlinkTarget=BuildTargetFactory.newInstance("//:symlink");
  ProjectFilesystem projectFilesystem=new FakeProjectFilesystem(tmpDir.getRoot());
  Path symlinkTreeRoot=projectFilesystem.resolve(BuildTargets.getGenPath(projectFilesystem,symlinkTarget,"%s/symlink-tree-root"));
  ImmutableMap<Path,SourcePath> links=ImmutableMap.<Path,SourcePath>of();
  BuildRule symlinkTreeBuildRule=new HeaderSymlinkTreeWithHeaderMap(new FakeBuildRuleParamsBuilder(symlinkTarget).build(),pathResolver,symlinkTreeRoot,links);
  resolver.addToIndex(symlinkTreeBuildRule);
  BuildTarget libTarget=BuildTargetFactory.newInstance("//:lib");
  BuildRuleParams libParams=new FakeBuildRuleParamsBuilder(libTarget).build();
  FakeCxxLibrary depRule=new FakeCxxLibrary(libParams,pathResolver,BuildTargetFactory.newInstance("//:header"),symlinkTarget,BuildTargetFactory.newInstance("//:privateheader"),BuildTargetFactory.newInstance("//:privatesymlink"),new FakeBuildRule("//:archive",pathResolver),new FakeBuildRule("//:shared",pathResolver),Paths.get("output/path/lib.so"),"lib.so",ImmutableSortedSet.<BuildTarget>of());
  BuildTarget buildTarget=BuildTargetFactory.newInstance("//foo:bar#iphoneos-x86_64");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(buildTarget).setDeclaredDeps(ImmutableSortedSet.<BuildRule>of(depRule)).build();
  SwiftLibraryDescription.Arg args=FakeAppleRuleDescriptions.SWIFT_LIBRARY_DESCRIPTION.createUnpopulatedConstructorArg();
  args.moduleName=Optional.absent();
  args.srcs=Optional.of(ImmutableSortedSet.<SourcePath>of());
  args.compilerFlags=Optional.absent();
  args.frameworks=Optional.of(ImmutableSortedSet.<FrameworkPath>of());
  args.libraries=Optional.of(ImmutableSortedSet.<FrameworkPath>of());
  args.enableObjcInterop=Optional.absent();
  args.supportedPlatformsRegex=Optional.absent();
  SwiftCompile buildRule=(SwiftCompile)FakeAppleRuleDescriptions.SWIFT_LIBRARY_DESCRIPTION.createBuildRule(TargetGraph.EMPTY,params,resolver,args);
  ImmutableList<String> swiftIncludeArgs=buildRule.getSwiftIncludeArgs();
  assertThat(swiftIncludeArgs.size(),Matchers.equalTo(1));
  assertThat(swiftIncludeArgs.get(0),Matchers.startsWith("-I"));
  assertThat(swiftIncludeArgs.get(0),Matchers.endsWith("symlink.hmap"));
}
