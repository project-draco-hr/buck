{
  Preconditions.checkArgument("mvn".equals(uri.getScheme()),"URI must start with mvn: " + uri);
  Preconditions.checkArgument(mavenRepo.isPresent(),"You must specify the maven repo in the \"tools->maven_repo\" section of your .buckconfig");
  String repo=mavenRepo.get();
  if (!repo.endsWith("/")) {
    repo+="/";
  }
  Matcher matcher=URL_PATTERN.matcher(uri.getSchemeSpecificPart());
  if (!matcher.matches() || matcher.groupCount() != 6) {
    throw new HumanReadableException("Unable to parse: " + uri);
  }
  String host=matcher.group(2);
  if (Strings.isNullOrEmpty(host)) {
    host=repo;
  }
  String group=matcher.group(3).replace('.','/');
  String artifactId=matcher.group(4);
  String type=matcher.group(5);
  String version=matcher.group(6);
  if (!host.endsWith("/")) {
    host+="/";
  }
  try {
    String plainUri=String.format("%s%s/%s/%s/%s-%s%s",host,group,artifactId,version,artifactId,version,fileExtensionFor(type));
    URI generated=new URI(plainUri);
    if ("https".equals(generated.getScheme()) || "http".equals(generated.getScheme())) {
      return generated;
    }
    throw new HumanReadableException("Can only download maven artifacts over HTTP or HTTPS: %s",generated);
  }
 catch (  URISyntaxException e) {
    throw new HumanReadableException("Unable to parse URL: " + uri);
  }
}
