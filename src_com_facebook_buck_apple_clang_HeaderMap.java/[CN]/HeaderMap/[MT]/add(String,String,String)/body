{
  if ((numEntries + 1) / (double)numBuckets > MAX_LOAD_FACTOR) {
    return AddResult.FAILURE_FULL;
  }
  int hash0=hashKey(str) & (numBuckets - 1);
  int hash=hash0;
  while (true) {
    Bucket bucket=buckets[hash];
    if (bucket == null) {
      bucket=new Bucket(addString(str),addString(prefix),addString(suffix));
      buckets[hash]=bucket;
      numEntries++;
      maxValueLength=max(maxValueLength,prefix.length() + suffix.length());
      return AddResult.OK;
    }
    if (str.equalsIgnoreCase(getString(bucket.key))) {
      return AddResult.FAILURE_ALREADY_PRESENT;
    }
    hash=(hash + 1) & (numBuckets - 1);
    if (hash == hash0) {
      return AddResult.FAILURE_FULL;
    }
  }
}
