@classmethod
def minimum_sys_modules(cls, site_libs, modules=None):
    'Given a set of site-packages paths, return a "clean" sys.modules.\n\n    When importing site, modules within sys.modules have their __path__\'s populated with\n    additional paths as defined by *-nspkg.pth in site-packages, or alternately by distribution\n    metadata such as *.dist-info/namespace_packages.txt.  This can possibly cause namespace\n    packages to leak into imports despite being scrubbed from sys.path.\n\n    NOTE: This method mutates modules\' __path__ attributes in sys.module, so this is currently an\n    irreversible operation.\n    '
    modules = (modules or sys.modules)
    new_modules = {}
    for (module_name, module) in modules.items():
        if (not hasattr(module, '__path__')):
            new_modules[module_name] = module
            continue
        for k in reversed(range(len(module.__path__))):
            if cls._tainted_path(module.__path__[k], site_libs):
                TRACER.log(('Scrubbing %s.__path__: %s' % (module_name, module.__path__[k])), V=3)
                module.__path__.pop(k)
        if module.__path__:
            new_modules[module_name] = module
    return new_modules
