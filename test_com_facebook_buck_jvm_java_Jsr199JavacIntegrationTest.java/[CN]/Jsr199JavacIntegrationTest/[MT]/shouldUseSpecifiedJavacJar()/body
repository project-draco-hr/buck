{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  BuildRule rule=new FakeBuildRule("//:fake",pathResolver);
  resolver.addToIndex(rule);
  Path fakeJavacJar=Paths.get("ae036e57-77a7-4356-a79c-0f85b1a3290d","fakeJavac.jar");
  ExecutionContext executionContext=TestExecutionContext.newInstance();
  MockClassLoader mockClassLoader=new MockClassLoader(ClassLoader.getSystemClassLoader(),ImmutableMap.<String,Class<?>>of("com.sun.tools.javac.api.JavacTool",MockJavac.class));
  executionContext.getClassLoaderCache().injectClassLoader(ClassLoader.getSystemClassLoader(),ImmutableList.of(fakeJavacJar.toUri().toURL()),mockClassLoader);
  Jsr199Javac javac=createJavac(false,Optional.of(fakeJavacJar));
  boolean caught=false;
  try {
    javac.buildWithClasspath(executionContext,createProjectFilesystem(),PATH_RESOLVER,BuildTargetFactory.newInstance("//some:example"),ImmutableList.<String>of(),SOURCE_PATHS,pathToSrcsList,Optional.<Path>absent(),Optional.<Path>absent(),Optional.<StandardJavaFileManagerFactory>absent());
    fail("Did not expect compilation to succeed");
  }
 catch (  UnsupportedOperationException ex) {
    if (ex.toString().contains("abcdef")) {
      caught=true;
    }
  }
  assertTrue("mock Java compiler should throw",caught);
}
