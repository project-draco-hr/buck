{
  Preconditions.checkArgument(buildTargets.size() > 0,"No targets provided for the simulation.");
  SimulateReport.Builder simulateReport=SimulateReport.builder();
  for (  String timeAggregate : times.getTimeAggregates()) {
    Map<BuildTarget,NodeState> reverseDependencies=Maps.newHashMap();
    Queue<BuildTarget> leafNodes=Queues.newArrayDeque();
    int totalDagEdges=0;
    for (    BuildTarget target : buildTargets) {
      BuildRule rule;
      try {
        rule=resolver.requireRule(target);
      }
 catch (      NoSuchBuildTargetException e) {
        throw new HumanReadableException(e.getHumanReadableErrorMessage());
      }
      totalDagEdges+=recursiveTraversal(rule,reverseDependencies,leafNodes);
    }
    SingleRunReport.Builder report=SingleRunReport.builder().setTimestampMillis(currentTimeMillis).setBuildTargets(FluentIterable.from(buildTargets).transform(Functions.toStringFunction())).setSimulateTimesFile(times.getFile()).setRuleFallbackTimeMillis(times.getRuleFallbackTimeMillis()).setTotalActionGraphNodes(Iterables.size(actionGraph.getNodes())).setTimeAggregate(timeAggregate).setNumberOfThreads(numberOfThreads);
    report.setTotalDependencyDagEdges(totalDagEdges);
    simulateReport.addRunReports(runSimulation(report,reverseDependencies,leafNodes,timeAggregate));
  }
  return simulateReport.build();
}
