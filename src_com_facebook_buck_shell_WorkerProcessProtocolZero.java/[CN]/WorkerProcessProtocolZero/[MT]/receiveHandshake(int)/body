{
  int id=-1;
  String type="";
  String protocolVersion="";
  try {
    processStdoutReader.beginArray();
    processStdoutReader.beginObject();
    while (processStdoutReader.hasNext()) {
      String property=processStdoutReader.nextName();
      if (property.equals("id")) {
        id=processStdoutReader.nextInt();
      }
 else       if (property.equals("type")) {
        type=processStdoutReader.nextString();
      }
 else       if (property.equals("protocol_version")) {
        protocolVersion=processStdoutReader.nextString();
      }
 else       if (property.equals("capabilities")) {
        try {
          processStdoutReader.beginArray();
          processStdoutReader.endArray();
        }
 catch (        IllegalStateException e) {
          throw new HumanReadableException("Expected handshake response's \"capabilities\" to " + "be an empty array.");
        }
      }
 else {
        processStdoutReader.skipValue();
      }
    }
    processStdoutReader.endObject();
  }
 catch (  IOException e) {
    throw new HumanReadableException(e,"Error receiving handshake response from external process.\n" + "Stderr from external process:\n%s",getStdErrorOutput());
  }
  if (id != handshakeID) {
    throw new HumanReadableException(String.format("Expected handshake response's \"id\" value " + "to be \"%d\", got \"%d\" instead.",handshakeID,id));
  }
  if (!type.equals(TYPE_HANDSHAKE)) {
    throw new HumanReadableException(String.format("Expected handshake response's \"type\" " + "to be \"%s\", got \"%s\" instead.",TYPE_HANDSHAKE,type));
  }
  if (!protocolVersion.equals(PROTOCOL_VERSION)) {
    throw new HumanReadableException(String.format("Expected handshake response's " + "\"protocol_version\" to be \"%s\", got \"%s\" instead.",PROTOCOL_VERSION,protocolVersion));
  }
}
