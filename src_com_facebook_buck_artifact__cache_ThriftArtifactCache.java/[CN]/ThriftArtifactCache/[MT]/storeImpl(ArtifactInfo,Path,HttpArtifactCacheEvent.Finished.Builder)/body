{
  final ByteSource artifact=new ByteSource(){
    @Override public InputStream openStream() throws IOException {
      return projectFilesystem.newFileInputStream(file);
    }
  }
;
  BuckCacheStoreRequest storeRequest=new BuckCacheStoreRequest();
  storeRequest.setMetadata(infoToMetadata(info,artifact,repository,scheduleType));
  PayloadInfo payloadInfo=new PayloadInfo();
  long artifactSizeBytes=artifact.size();
  payloadInfo.setSizeBytes(artifactSizeBytes);
  BuckCacheRequest cacheRequest=new BuckCacheRequest();
  cacheRequest.addToPayloads(payloadInfo);
  cacheRequest.setType(BuckCacheRequestType.STORE);
  cacheRequest.setStoreRequest(storeRequest);
  final ThriftArtifactCacheProtocol.Request request=ThriftArtifactCacheProtocol.createRequest(PROTOCOL,cacheRequest,artifact);
  Request.Builder builder=toOkHttpRequest(request);
  try (HttpResponse httpResponse=storeClient.makeRequest(hybridThriftEndpoint,builder)){
    if (httpResponse.code() != 200) {
      throw new IOException(String.format("Failed to store cache artifact with HTTP status code [%d] " + " to url [%s] for build target [%s] that has size [%d] bytes.",httpResponse.code(),httpResponse.requestUrl(),info.getBuildTarget().orNull(),artifactSizeBytes));
    }
    try (ThriftArtifactCacheProtocol.Response response=ThriftArtifactCacheProtocol.parseResponse(PROTOCOL,httpResponse.getBody())){
      if (!response.getThriftData().isWasSuccessful()) {
        reportFailure("Failed to store artifact with thriftErrorMessage=[%s] " + "url=[%s] artifactSizeBytes=[%d]",response.getThriftData().getErrorMessage(),httpResponse.requestUrl(),artifactSizeBytes);
      }
      eventBuilder.setArtifactContentHash(storeRequest.getMetadata().artifactPayloadCrc32);
      eventBuilder.setArtifactSizeBytes(artifactSizeBytes);
      eventBuilder.setWasUploadSuccessful(response.getThriftData().isWasSuccessful());
    }
   }
 }
