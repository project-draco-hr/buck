{
  BuildJobStateBuckConfig remoteBuckConfig=remoteState.getBuckConfig();
  ImmutableMap<String,ImmutableMap<String,String>> rawConfig=ImmutableMap.copyOf(Maps.transformValues(remoteBuckConfig.getRawBuckConfig(),new Function<List<OrderedStringMapEntry>,ImmutableMap<String,String>>(){
    @Override public ImmutableMap<String,String> apply(    List<OrderedStringMapEntry> input){
      ImmutableMap.Builder<String,String> builder=ImmutableMap.builder();
      for (      OrderedStringMapEntry entry : input) {
        builder.put(entry.getKey(),entry.getValue());
      }
      return builder.build();
    }
  }
));
  Architecture remoteArchitecture=Architecture.valueOf(remoteBuckConfig.getArchitecture());
  Architecture localArchitecture=Architecture.detect();
  Preconditions.checkState(remoteArchitecture.equals(localArchitecture),"Trying to load config with architecture %s on a machine that is %s. " + "This is not supported.",remoteArchitecture,localArchitecture);
  Platform remotePlatform=Platform.valueOf(remoteBuckConfig.getPlatform());
  Platform localPlatform=Platform.detect();
  Preconditions.checkState(remotePlatform.equals(localPlatform),"Trying to load config with platform %s on a machine that is %s. This is not supported.",remotePlatform,localPlatform);
  Config config=new Config(RawConfig.of(rawConfig));
  return new BuckConfig(config,projectFilesystem,remoteArchitecture,remotePlatform,ImmutableMap.copyOf(remoteBuckConfig.getUserEnvironment()),new DefaultCellPathResolver(projectFilesystem.getRootPath(),config));
}
