{
  ImmutableMap<CxxPreprocessAndCompile,SourcePath> objects=requireObjects(params,ruleResolver,pathResolver,cxxPlatform,lexSources,yaccSources,preprocessorFlags,prefixHeaders,headers,exportedHeaders,compilerFlags,sources,frameworkSearchPaths,compileStrategy,CxxSourceRuleFactory.PicType.PIC);
  BuildTarget sharedTarget=CxxDescriptionEnhancer.createSharedLibraryBuildTarget(params.getBuildTarget(),cxxPlatform.getFlavor());
  String sharedLibrarySoname=soname.or(CxxDescriptionEnhancer.getSharedLibrarySoname(params.getBuildTarget(),cxxPlatform));
  Path sharedLibraryPath=CxxDescriptionEnhancer.getSharedLibraryPath(params.getBuildTarget(),cxxPlatform);
  ImmutableList.Builder<String> extraCxxLdFlagsBuilder=ImmutableList.builder();
  extraCxxLdFlagsBuilder.addAll(MoreIterables.zipAndConcat(Iterables.cycle("-F"),Iterables.transform(frameworkSearchPaths,Functions.toStringFunction())));
  ImmutableList<String> extraCxxLdFlags=extraCxxLdFlagsBuilder.build();
  return CxxLinkableEnhancer.createCxxLinkableBuildRule(cxxPlatform,params,pathResolver,extraCxxLdFlags,linkerFlags,sharedTarget,Linker.LinkType.SHARED,Optional.of(sharedLibrarySoname),sharedLibraryPath,objects.values(),Linker.LinkableDepType.SHARED,params.getDeps());
}
