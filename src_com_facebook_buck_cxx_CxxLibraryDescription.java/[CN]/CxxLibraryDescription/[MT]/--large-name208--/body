{
  CxxHeaderSourceSpec lexYaccSources=CxxDescriptionEnhancer.requireLexYaccSources(params,ruleResolver,pathResolver,cxxPlatform,lexSources,yaccSources);
  HeaderSymlinkTree headerSymlinkTree=CxxDescriptionEnhancer.requireHeaderSymlinkTree(params,ruleResolver,pathResolver,cxxPlatform,true,lexSources,yaccSources,headers,HeaderVisibility.PRIVATE);
  ImmutableList<CxxPreprocessorInput> cxxPreprocessorInputFromDependencies=CxxDescriptionEnhancer.collectCxxPreprocessorInput(targetGraph,params,cxxPlatform,preprocessorFlags,prefixHeaders,ImmutableList.of(headerSymlinkTree),ImmutableSet.<Path>of(),getTransitiveCxxPreprocessorInput(targetGraph,params,ruleResolver,pathResolver,cxxPlatform,exportedPreprocessorFlags,exportedHeaders,frameworkSearchPaths));
  ImmutableMap<String,CxxSource> allSources=ImmutableMap.<String,CxxSource>builder().putAll(sources).putAll(lexYaccSources.getCxxSources()).build();
  return CxxSourceRuleFactory.requirePreprocessAndCompileRules(params,ruleResolver,pathResolver,cxxPlatform,cxxPreprocessorInputFromDependencies,compilerFlags,preprocessMode,allSources,pic);
}
