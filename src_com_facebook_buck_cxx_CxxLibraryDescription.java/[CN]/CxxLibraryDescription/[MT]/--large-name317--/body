{
  ImmutableMap<CxxPreprocessAndCompile,SourcePath> objects=requireObjects(targetGraph,params,ruleResolver,pathResolver,cxxPlatform,preprocessorFlags,exportedPreprocessorFlags,prefixHeader,headers,exportedHeaders,compilerFlags,sources,frameworks,preprocessMode,pic);
  BuildTarget staticTarget=CxxDescriptionEnhancer.createStaticLibraryBuildTarget(params.getBuildTarget(),cxxPlatform.getFlavor(),pic);
  if (objects.isEmpty()) {
    return new NoopBuildRule(new BuildRuleParams(staticTarget,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),params.getProjectFilesystem(),params.getCellRoots()),pathResolver);
  }
  Path staticLibraryPath=CxxDescriptionEnhancer.getStaticLibraryPath(params.getBuildTarget(),cxxPlatform.getFlavor(),pic);
  return Archives.createArchiveRule(pathResolver,staticTarget,params,cxxPlatform.getAr(),staticLibraryPath,ImmutableList.copyOf(objects.values()));
}
