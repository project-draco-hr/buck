{
  ImmutableMap<CxxPreprocessAndCompile,SourcePath> objects=requireObjects(targetGraph,params,ruleResolver,pathResolver,cxxPlatform,lexSources,yaccSources,preprocessorFlags,exportedPreprocessorFlags,prefixHeaders,headers,exportedHeaders,compilerFlags,sources,frameworkSearchPaths,preprocessMode,CxxSourceRuleFactory.PicType.PIC);
  BuildTarget sharedTarget=CxxDescriptionEnhancer.createSharedLibraryBuildTarget(params.getBuildTarget(),cxxPlatform.getFlavor());
  String sharedLibrarySoname=soname.or(CxxDescriptionEnhancer.getDefaultSharedLibrarySoname(params.getBuildTarget(),cxxPlatform));
  Path sharedLibraryPath=CxxDescriptionEnhancer.getSharedLibraryPath(params.getBuildTarget(),sharedLibrarySoname,cxxPlatform);
  ImmutableList.Builder<String> extraLdFlagsBuilder=ImmutableList.builder();
  extraLdFlagsBuilder.addAll(linkerFlags);
  extraLdFlagsBuilder.addAll(MoreIterables.zipAndConcat(Iterables.cycle("-F"),Iterables.transform(frameworkSearchPaths,Functions.toStringFunction())));
  ImmutableList<String> extraLdFlags=extraLdFlagsBuilder.build();
  return CxxLinkableEnhancer.createCxxLinkableBuildRule(targetGraph,cxxPlatform,params,pathResolver,extraLdFlags,sharedTarget,linkType,Optional.of(sharedLibrarySoname),sharedLibraryPath,objects.values(),linkableDepType,params.getDeps(),cxxRuntimeType,bundleLoader);
}
