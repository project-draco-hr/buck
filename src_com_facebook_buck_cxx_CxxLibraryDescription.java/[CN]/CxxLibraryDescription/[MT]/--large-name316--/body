{
  ImmutableMap<CxxPreprocessAndCompile,SourcePath> objects=requireObjects(targetGraph,params,ruleResolver,pathResolver,cxxPlatform,preprocessorFlags,exportedPreprocessorFlags,prefixHeader,headers,exportedHeaders,compilerFlags,sources,frameworks,preprocessMode,CxxSourceRuleFactory.PicType.PIC);
  BuildTarget sharedTarget=CxxDescriptionEnhancer.createSharedLibraryBuildTarget(params.getBuildTarget(),cxxPlatform.getFlavor());
  if (objects.isEmpty()) {
    return new NoopBuildRule(new BuildRuleParams(sharedTarget,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),params.getProjectFilesystem(),params.getCellRoots(),params.getRuleKeyBuilderFactory()),pathResolver);
  }
  String sharedLibrarySoname=soname.or(CxxDescriptionEnhancer.getDefaultSharedLibrarySoname(params.getBuildTarget(),cxxPlatform));
  Path sharedLibraryPath=CxxDescriptionEnhancer.getSharedLibraryPath(params.getBuildTarget(),sharedLibrarySoname,cxxPlatform);
  ImmutableList.Builder<String> extraLdFlagsBuilder=ImmutableList.builder();
  extraLdFlagsBuilder.addAll(linkerFlags);
  ImmutableList<String> extraLdFlags=extraLdFlagsBuilder.build();
  return CxxLinkableEnhancer.createCxxLinkableBuildRule(targetGraph,cxxPlatform,params,pathResolver,sharedTarget,linkType,Optional.of(sharedLibrarySoname),sharedLibraryPath,ImmutableList.<com.facebook.buck.rules.args.Arg>builder().addAll(FluentIterable.from(extraLdFlags).transform(MacroArg.toMacroArgFunction(MACRO_HANDLER,params.getBuildTarget(),params.getCellRoots(),ruleResolver,params.getProjectFilesystem()))).addAll(SourcePathArg.from(pathResolver,objects.values())).build(),linkableDepType,params.getDeps(),cxxRuntimeType,bundleLoader,blacklist,frameworks);
}
