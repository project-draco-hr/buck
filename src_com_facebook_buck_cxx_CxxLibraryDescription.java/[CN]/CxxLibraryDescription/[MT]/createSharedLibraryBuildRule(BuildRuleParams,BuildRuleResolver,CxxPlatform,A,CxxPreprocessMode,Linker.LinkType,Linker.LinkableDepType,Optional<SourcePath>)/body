{
  ImmutableList.Builder<String> linkerFlags=ImmutableList.builder();
  linkerFlags.addAll(CxxFlags.getFlags(args.linkerFlags,args.platformLinkerFlags,cxxPlatform.getFlavor()));
  linkerFlags.addAll(CxxFlags.getFlags(args.exportedLinkerFlags,args.exportedPlatformLinkerFlags,cxxPlatform.getFlavor()));
  return createSharedLibrary(params,resolver,new SourcePathResolver(resolver),cxxPlatform,CxxDescriptionEnhancer.parseLexSources(params,resolver,args),CxxDescriptionEnhancer.parseYaccSources(params,resolver,args),CxxFlags.getLanguageFlags(args.preprocessorFlags,args.platformPreprocessorFlags,args.langPreprocessorFlags,cxxPlatform.getFlavor()),CxxFlags.getLanguageFlags(args.exportedPreprocessorFlags,args.exportedPlatformPreprocessorFlags,args.exportedLangPreprocessorFlags,cxxPlatform.getFlavor()),args.prefixHeaders.get(),CxxDescriptionEnhancer.parseHeaders(params,resolver,cxxPlatform,args),CxxDescriptionEnhancer.parseExportedHeaders(params,resolver,cxxPlatform,args),CxxFlags.getFlags(args.compilerFlags,args.platformCompilerFlags,cxxPlatform.getFlavor()),CxxDescriptionEnhancer.parseCxxSources(params,resolver,cxxPlatform,args),linkerFlags.build(),args.frameworkSearchPaths.get(),args.soname,preprocessMode,args.cxxRuntimeType,linkType,linkableDepType,bundleLoader);
}
