{
  BuildTarget rawTarget=params.getBuildTarget().withoutFlavors(ImmutableSet.<Flavor>builder().addAll(LIBRARY_TYPE.getFlavors()).add(cxxPlatform.getFlavor()).build());
  Optional<BuildRule> rawRule=ruleResolver.getRuleOptional(rawTarget);
  if (rawRule.isPresent()) {
    CxxLibrary rule=(CxxLibrary)rawRule.get();
    return rule.getTransitiveCxxPreprocessorInput(cxxPlatform,HeaderVisibility.PUBLIC).values();
  }
  HeaderSymlinkTree symlinkTree=CxxDescriptionEnhancer.requireHeaderSymlinkTree(params,ruleResolver,pathResolver,cxxPlatform,exportedHeaders,HeaderVisibility.PUBLIC);
  Map<BuildTarget,CxxPreprocessorInput> input=Maps.newLinkedHashMap();
  CxxSymlinkTreeHeaders.Builder headers=CxxSymlinkTreeHeaders.builder();
  headers.setIncludeType(CxxPreprocessables.IncludeType.LOCAL);
  headers.setRoot(new BuildTargetSourcePath(symlinkTree.getBuildTarget(),symlinkTree.getIncludePath()));
  headers.putAllNameToPathMap(symlinkTree.getLinks());
  if (symlinkTree.getHeaderMap().isPresent()) {
    headers.setHeaderMap(new BuildTargetSourcePath(symlinkTree.getBuildTarget(),symlinkTree.getHeaderMap().get()));
  }
  input.put(params.getBuildTarget(),CxxPreprocessorInput.builder().putAllPreprocessorFlags(exportedPreprocessorFlags).addIncludes(CxxSymlinkTreeHeaders.from(symlinkTree,CxxPreprocessables.IncludeType.LOCAL)).addAllFrameworks(frameworks).build());
  for (  BuildRule rule : params.getDeps()) {
    if (rule instanceof CxxPreprocessorDep) {
      input.putAll(((CxxPreprocessorDep)rule).getTransitiveCxxPreprocessorInput(cxxPlatform,HeaderVisibility.PUBLIC));
    }
  }
  return ImmutableList.copyOf(input.values());
}
