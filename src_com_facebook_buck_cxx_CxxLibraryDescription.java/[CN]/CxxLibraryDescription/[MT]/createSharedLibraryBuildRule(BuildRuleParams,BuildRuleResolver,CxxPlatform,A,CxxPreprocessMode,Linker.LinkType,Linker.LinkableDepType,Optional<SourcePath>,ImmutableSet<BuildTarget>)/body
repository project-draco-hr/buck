{
  ImmutableList.Builder<String> linkerFlags=ImmutableList.builder();
  linkerFlags.addAll(CxxFlags.getFlags(args.linkerFlags,args.platformLinkerFlags,cxxPlatform));
  linkerFlags.addAll(CxxFlags.getFlags(args.exportedLinkerFlags,args.exportedPlatformLinkerFlags,cxxPlatform));
  SourcePathResolver sourcePathResolver=new SourcePathResolver(resolver);
  return createSharedLibrary(params,resolver,sourcePathResolver,cxxPlatform,CxxFlags.getLanguageFlags(args.preprocessorFlags,args.platformPreprocessorFlags,args.langPreprocessorFlags,cxxPlatform),CxxFlags.getLanguageFlags(args.exportedPreprocessorFlags,args.exportedPlatformPreprocessorFlags,args.exportedLangPreprocessorFlags,cxxPlatform),args.prefixHeader,CxxDescriptionEnhancer.parseHeaders(params.getBuildTarget(),sourcePathResolver,cxxPlatform,args),CxxDescriptionEnhancer.parseExportedHeaders(params.getBuildTarget(),sourcePathResolver,cxxPlatform,args),CxxFlags.getFlags(args.compilerFlags,args.platformCompilerFlags,cxxPlatform),CxxDescriptionEnhancer.parseCxxSources(params.getBuildTarget(),sourcePathResolver,cxxPlatform,args),linkerFlags.build(),args.frameworks.or(ImmutableSortedSet.<FrameworkPath>of()),args.soname,preprocessMode,linkType,linkableDepType,bundleLoader,blacklist);
}
