{
  Arg arg=new Arg();
  arg.deps=Optional.of(ImmutableSortedSet.<BuildTarget>of());
  arg.srcs=Optional.of(SourceWithFlagsList.ofUnnamedSources(ImmutableList.<SourceWithFlags>of()));
  arg.prefixHeaders=Optional.of(ImmutableList.<SourcePath>of());
  arg.headers=Optional.of(Either.<ImmutableList<SourcePath>,ImmutableMap<String,SourcePath>>ofLeft(ImmutableList.<SourcePath>of()));
  arg.exportedHeaders=Optional.of(Either.<ImmutableList<SourcePath>,ImmutableMap<String,SourcePath>>ofLeft(ImmutableList.<SourcePath>of()));
  arg.compilerFlags=Optional.of(ImmutableList.<String>of());
  arg.platformCompilerFlags=Optional.of(ImmutableList.<Pair<String,ImmutableList<String>>>of());
  arg.exportedPreprocessorFlags=Optional.of(ImmutableList.<String>of());
  arg.exportedPlatformPreprocessorFlags=Optional.of(ImmutableList.<Pair<String,ImmutableList<String>>>of());
  arg.exportedLangPreprocessorFlags=Optional.of(ImmutableMap.<CxxSource.Type,ImmutableList<String>>of());
  arg.preprocessorFlags=Optional.of(ImmutableList.<String>of());
  arg.platformPreprocessorFlags=Optional.of(ImmutableList.<Pair<String,ImmutableList<String>>>of());
  arg.langPreprocessorFlags=Optional.of(ImmutableMap.<CxxSource.Type,ImmutableList<String>>of());
  arg.linkerFlags=Optional.of(ImmutableList.<String>of());
  arg.exportedLinkerFlags=Optional.of(ImmutableList.<String>of());
  arg.platformLinkerFlags=Optional.of(ImmutableList.<Pair<String,ImmutableList<String>>>of());
  arg.exportedPlatformLinkerFlags=Optional.of(ImmutableList.<Pair<String,ImmutableList<String>>>of());
  arg.cxxRuntimeType=Optional.absent();
  arg.forceStatic=Optional.absent();
  arg.linkWhole=Optional.absent();
  arg.lexSrcs=Optional.of(ImmutableList.<SourcePath>of());
  arg.yaccSrcs=Optional.of(ImmutableList.<SourcePath>of());
  arg.headerNamespace=Optional.absent();
  arg.soname=Optional.absent();
  arg.frameworkSearchPaths=Optional.of(ImmutableList.<Path>of());
  arg.tests=Optional.of(ImmutableSortedSet.<BuildTarget>of());
  arg.supportedPlatformsRegex=Optional.absent();
  return arg;
}
