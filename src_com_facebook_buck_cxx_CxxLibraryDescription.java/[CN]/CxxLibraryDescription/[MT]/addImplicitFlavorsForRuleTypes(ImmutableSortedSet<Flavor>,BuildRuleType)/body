{
  Optional<Flavor> typeFlavor=LIBRARY_TYPE.getFlavor(argDefaultFlavors);
  Optional<Flavor> platformFlavor=getCxxPlatforms().getFlavor(argDefaultFlavors);
  LOG.debug("Got arg default type %s platform %s",typeFlavor,platformFlavor);
  for (  BuildRuleType type : types) {
    ImmutableMap<String,Flavor> libraryDefaults=cxxBuckConfig.getDefaultFlavorsForRuleType(type);
    if (!typeFlavor.isPresent()) {
      typeFlavor=Optional.fromNullable(libraryDefaults.get(CxxBuckConfig.DEFAULT_FLAVOR_LIBRARY_TYPE));
    }
    if (!platformFlavor.isPresent()) {
      platformFlavor=Optional.fromNullable(libraryDefaults.get(CxxBuckConfig.DEFAULT_FLAVOR_PLATFORM));
    }
  }
  ImmutableSortedSet<Flavor> result=ImmutableSortedSet.of(typeFlavor.or(CxxDescriptionEnhancer.STATIC_FLAVOR),platformFlavor.or(defaultCxxPlatform.getFlavor()));
  LOG.debug("Got default flavors %s for rule types %s",result,Arrays.toString(types));
  return result;
}
