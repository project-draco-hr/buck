{
  return createSharedLibrary(params,resolver,new SourcePathResolver(resolver),cxxPlatform,CxxDescriptionEnhancer.parseLexSources(params,resolver,args),CxxDescriptionEnhancer.parseYaccSources(params,resolver,args),ImmutableMultimap.<CxxSource.Type,String>builder().putAll(CxxPreprocessorFlags.fromArgs(args.preprocessorFlags,args.langPreprocessorFlags)).putAll(CxxPreprocessorFlags.fromArgs(args.exportedPreprocessorFlags,args.exportedLangPreprocessorFlags)).build(),args.prefixHeaders.get(),CxxDescriptionEnhancer.parseHeaders(params,resolver,args),CxxDescriptionEnhancer.parseExportedHeaders(params,resolver,args),args.compilerFlags.or(ImmutableList.<String>of()),CxxDescriptionEnhancer.parseCxxSources(params,resolver,args),ImmutableList.<String>builder().addAll(args.linkerFlags.or(ImmutableList.<String>of())).addAll(CxxDescriptionEnhancer.getPlatformFlags(args.platformLinkerFlags.get(),cxxPlatform.getFlavor().toString())).build(),args.frameworkSearchPaths.get(),args.soname);
}
