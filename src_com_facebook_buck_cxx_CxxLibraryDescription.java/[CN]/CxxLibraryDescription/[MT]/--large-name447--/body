{
  ImmutableMap<CxxPreprocessAndCompile,SourcePath> objects=CxxDescriptionEnhancer.requireObjects(params,ruleResolver,pathResolver,cxxBuckConfig,cxxPlatform,CxxSourceRuleFactory.PicType.PIC,args);
  BuildTarget sharedTarget=CxxDescriptionEnhancer.createSharedLibraryBuildTarget(params.getBuildTarget(),cxxPlatform.getFlavor(),linkType);
  if (objects.isEmpty()) {
    return new NoopBuildRule(new BuildRuleParams(sharedTarget,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),params.getProjectFilesystem(),params.getCellRoots()),pathResolver);
  }
  String sharedLibrarySoname=CxxDescriptionEnhancer.getSharedLibrarySoname(soname,params.getBuildTarget(),cxxPlatform);
  Path sharedLibraryPath=CxxDescriptionEnhancer.getSharedLibraryPath(params.getProjectFilesystem(),sharedTarget,sharedLibrarySoname);
  ImmutableList.Builder<String> extraLdFlagsBuilder=ImmutableList.builder();
  extraLdFlagsBuilder.addAll(linkerFlags);
  ImmutableList<String> extraLdFlags=extraLdFlagsBuilder.build();
  return CxxLinkableEnhancer.createCxxLinkableBuildRule(cxxBuckConfig,cxxPlatform,params,ruleResolver,pathResolver,sharedTarget,linkType,Optional.of(sharedLibrarySoname),sharedLibraryPath,linkableDepType,Iterables.filter(params.getDeps(),NativeLinkable.class),cxxRuntimeType,bundleLoader,blacklist,NativeLinkableInput.builder().addAllArgs(FluentIterable.from(extraLdFlags).transform(MacroArg.toMacroArgFunction(MACRO_HANDLER,params.getBuildTarget(),params.getCellRoots(),ruleResolver))).addAllArgs(SourcePathArg.from(pathResolver,objects.values())).setFrameworks(frameworks).setLibraries(libraries).build());
}
