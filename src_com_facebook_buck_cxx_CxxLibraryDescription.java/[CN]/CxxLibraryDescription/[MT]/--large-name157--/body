{
  CxxHeaderSourceSpec lexYaccSources=CxxDescriptionEnhancer.requireLexYaccSources(params,ruleResolver,pathResolver,cxxPlatform,lexSources,yaccSources);
  SymlinkTree headerSymlinkTree=CxxDescriptionEnhancer.requireHeaderSymlinkTree(params,ruleResolver,pathResolver,cxxPlatform,true,lexSources,yaccSources,headers,HeaderVisibility.PRIVATE);
  SymlinkTree exportedHeaderSymlinkTree=CxxDescriptionEnhancer.requireHeaderSymlinkTree(params,ruleResolver,pathResolver,cxxPlatform,false,ImmutableMap.<String,SourcePath>of(),ImmutableMap.<String,SourcePath>of(),exportedHeaders,HeaderVisibility.PUBLIC);
  CxxPreprocessorInput cxxPreprocessorInputFromDependencies=CxxDescriptionEnhancer.combineCxxPreprocessorInput(params,cxxPlatform,preprocessorFlags,prefixHeaders,ImmutableList.of(headerSymlinkTree,exportedHeaderSymlinkTree),frameworkSearchPaths);
  ImmutableMap<String,CxxSource> allSources=ImmutableMap.<String,CxxSource>builder().putAll(sources).putAll(lexYaccSources.getCxxSources()).build();
  return CxxSourceRuleFactory.requirePreprocessAndCompileRules(params,ruleResolver,pathResolver,cxxPlatform,cxxPreprocessorInputFromDependencies,compilerFlags,preprocessMode,allSources,pic);
}
