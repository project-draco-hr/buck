{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ImmutableList<CxxSource> srcs=CxxDescriptionEnhancer.parseCxxSources(params.getBuildTarget(),pathResolver,args.srcs.or(ImmutableList.<SourcePath>of()));
  ImmutableMap<Path,SourcePath> headers=CxxDescriptionEnhancer.parseHeaders(params.getBuildTarget(),pathResolver,args.headers.or((ImmutableList.<SourcePath>of())));
  ImmutableMap<String,SourcePath> lexSrcs=pathResolver.getSourcePathNames(params.getBuildTarget(),"lexSrcs",args.lexSrcs.or(ImmutableList.<SourcePath>of()));
  ImmutableMap<String,SourcePath> yaccSrcs=pathResolver.getSourcePathNames(params.getBuildTarget(),"yaccSrcs",args.yaccSrcs.or(ImmutableList.<SourcePath>of()));
  CxxHeaderSourceSpec lexYaccSources=CxxDescriptionEnhancer.createLexYaccBuildRules(params,resolver,cxxPlatform,ImmutableList.<String>of(),lexSrcs,ImmutableList.<String>of(),yaccSrcs);
  return CxxDescriptionEnhancer.createCxxLibraryBuildRules(params,resolver,cxxPlatform,args.preprocessorFlags.or(ImmutableList.<String>of()),args.propagatedPpFlags.or(ImmutableList.<String>of()),ImmutableMap.<Path,SourcePath>builder().putAll(headers).putAll(lexYaccSources.getCxxHeaders()).build(),args.compilerFlags.or(ImmutableList.<String>of()),ImmutableList.<CxxSource>builder().addAll(srcs).addAll(lexYaccSources.getCxxSources()).build(),args.linkWhole.or(false));
}
