{
  Request baseRequest=createMock(Request.class);
  expect(baseRequest.getMethod()).andReturn("GET");
  expect(baseRequest.getPathInfo()).andReturn("/abcdef");
  expect(baseRequest.getParameter("callback")).andReturn(null);
  baseRequest.setHandled(true);
  HttpServletRequest request=createMock(HttpServletRequest.class);
  HttpServletResponse response=createMock(HttpServletResponse.class);
  response.setStatus(200);
  response.setContentType("application/javascript; charset=utf-8");
  StringWriter stringWriter=new StringWriter();
  PrintWriter printWriter=new PrintWriter(stringWriter);
  expect(response.getWriter()).andReturn(printWriter);
  response.flushBuffer();
  ProjectFilesystem projectFilesystem=createMock(ProjectFilesystem.class);
  File traceFile=createMock(File.class);
  String name="build.abcdef.trace";
  expect(traceFile.getName()).andStubReturn(name);
  Path pathToTraceFile=BuckConstant.BUCK_TRACE_DIR.resolve(name);
  expect(traceFile.toPath()).andReturn(pathToTraceFile);
  expect(projectFilesystem.listFiles(BuckConstant.BUCK_TRACE_DIR)).andStubReturn(new File[]{traceFile});
  expect(projectFilesystem.getInputStreamForRelativePath(Paths.get("buck-out/log/traces/build.abcdef.trace"))).andReturn(new ByteArrayInputStream("{\"foo\":\"bar\"}".getBytes()));
  TraceDataHandler traceDataHandler=new TraceDataHandler(new TracesHelper(projectFilesystem));
  replayAll();
  traceDataHandler.handle("/trace/abcdef",baseRequest,request,response);
  verifyAll();
  assertEquals("{\"foo\":\"bar\"}",stringWriter.toString());
}
