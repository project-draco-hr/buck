{
  Request baseRequest=createMock(Request.class);
  expect(baseRequest.getMethod()).andReturn("GET");
  expect(baseRequest.getPathInfo()).andReturn("/abcdef");
  expect(baseRequest.getParameter("callback")).andReturn("my.callback");
  baseRequest.setHandled(true);
  HttpServletRequest request=createMock(HttpServletRequest.class);
  HttpServletResponse response=createMock(HttpServletResponse.class);
  response.setStatus(200);
  response.setContentType("application/javascript; charset=utf-8");
  StringWriter stringWriter=new StringWriter();
  PrintWriter printWriter=new PrintWriter(stringWriter);
  expect(response.getWriter()).andReturn(printWriter);
  response.flushBuffer();
  TracesHelper tracesHelper=createMock(TracesHelper.class);
  Iterable<InputStream> traces=Arrays.<InputStream>asList(new ByteArrayInputStream("{\"foo\":\"bar\"}".getBytes(Charsets.UTF_8)));
  expect(tracesHelper.getInputsForTraces("abcdef")).andReturn(traces);
  TraceDataHandler traceDataHandler=new TraceDataHandler(tracesHelper);
  replayAll();
  traceDataHandler.handle("/trace/abcdef?callback=my.callback",baseRequest,request,response);
  verifyAll();
  assertEquals("my.callback([{\"foo\":\"bar\"}]);\n",stringWriter.toString());
}
