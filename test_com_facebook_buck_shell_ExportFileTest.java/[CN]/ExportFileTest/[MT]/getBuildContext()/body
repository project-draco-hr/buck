{
  return ImmutableBuildContext.builder().setArtifactCache(EasyMock.createMock(ArtifactCache.class)).setEventBus(BuckEventBusFactory.newInstance()).setClock(new DefaultClock()).setBuildId(new BuildId()).setObjectMapper(ObjectMappers.newDefaultInstance()).setJavaPackageFinder(new JavaPackageFinder(){
    @Override public Path findJavaPackageFolder(    Path pathRelativeToProjectRoot){
      return null;
    }
    @Override public String findJavaPackage(    Path pathRelativeToProjectRoot){
      return null;
    }
    @Override public String findJavaPackage(    BuildTarget buildTarget){
      return null;
    }
  }
).setActionGraph(new ActionGraph(ImmutableList.<BuildRule>of())).setStepRunner(new StepRunner(){
    @Override public void runStepForBuildTarget(    Step step,    Optional<BuildTarget> buildTarget) throws StepFailedException {
    }
    @Override public <T>ListenableFuture<T> runStepsAndYieldResult(    List<Step> steps,    Callable<T> interpretResults,    Optional<BuildTarget> buildTarget,    ListeningExecutorService service,    StepRunner.StepRunningCallback callback){
      return null;
    }
    @Override public void runStepsInParallelAndWait(    List<Step> steps,    Optional<BuildTarget> target,    ListeningExecutorService service,    StepRunner.StepRunningCallback callback) throws StepFailedException {
    }
    @Override public <T>ListenableFuture<Void> addCallback(    ListenableFuture<List<T>> allBuiltDeps,    FutureCallback<List<T>> futureCallback,    ListeningExecutorService service){
      return Futures.immediateFuture(null);
    }
  }
).build();
}
