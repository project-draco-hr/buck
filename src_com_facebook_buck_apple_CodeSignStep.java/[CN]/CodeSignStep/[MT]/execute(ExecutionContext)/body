{
  ProcessExecutorParams.Builder paramsBuilder=ProcessExecutorParams.builder();
  if (codesignAllocatePath.isPresent()) {
    ImmutableList<String> commandPrefix=codesignAllocatePath.get().getCommandPrefix(resolver);
    paramsBuilder.setEnvironment(ImmutableMap.of("CODESIGN_ALLOCATE",Joiner.on(" ").join(commandPrefix)));
  }
  ImmutableList.Builder<String> commandBuilder=ImmutableList.builder();
  commandBuilder.add("codesign","--force","--sign",getIdentityArg(codeSignIdentitySupplier.get()));
  if (pathToSigningEntitlements.isPresent()) {
    commandBuilder.add("--entitlements",pathToSigningEntitlements.get().toString());
  }
  commandBuilder.add(pathToSign.toString());
  ProcessExecutorParams processExecutorParams=paramsBuilder.setCommand(commandBuilder.build()).setDirectory(workingDirectory).build();
  Set<ProcessExecutor.Option> options=EnumSet.of(ProcessExecutor.Option.EXPECTING_STD_OUT);
  ProcessExecutor.Result result;
  try {
    ProcessExecutor processExecutor=context.getProcessExecutor();
    result=processExecutor.launchAndExecute(processExecutorParams,options,Optional.<String>absent(),Optional.<Long>absent(),Optional.<Function<Process,Void>>absent());
  }
 catch (  InterruptedException|IOException e) {
    context.logError(e,"Could not execute codesign.");
    return StepExecutionResult.ERROR;
  }
  if (result.getExitCode() != 0) {
    return StepExecutionResult.ERROR;
  }
  return StepExecutionResult.SUCCESS;
}
