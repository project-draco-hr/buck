{
  String sharedLibraryExtension;
  String sharedLibraryVersionedExtensionFormat;
  Path defaultCFrontend;
  Path defaultCxxFrontend;
  LinkerProvider.Type linkerType;
  Archiver archiver;
switch (platform) {
case LINUX:
    sharedLibraryExtension="so";
  sharedLibraryVersionedExtensionFormat="so.%s";
defaultCFrontend=DEFAULT_C_FRONTEND;
defaultCxxFrontend=DEFAULT_CXX_FRONTEND;
linkerType=LinkerProvider.Type.GNU;
archiver=new GnuArchiver(new HashedFileTool(DEFAULT_AR));
break;
case MACOS:
sharedLibraryExtension="dylib";
sharedLibraryVersionedExtensionFormat=".%s.dylib";
defaultCFrontend=DEFAULT_OSX_C_FRONTEND;
defaultCxxFrontend=DEFAULT_OSX_CXX_FRONTEND;
linkerType=LinkerProvider.Type.DARWIN;
archiver=new BsdArchiver(new HashedFileTool(DEFAULT_AR));
break;
case WINDOWS:
sharedLibraryExtension="dll";
sharedLibraryVersionedExtensionFormat="dll";
defaultCFrontend=DEFAULT_C_FRONTEND;
defaultCxxFrontend=DEFAULT_CXX_FRONTEND;
linkerType=LinkerProvider.Type.GNU;
archiver=new GnuArchiver(new HashedFileTool(DEFAULT_AR));
break;
default :
throw new RuntimeException(String.format("Unsupported platform: %s",platform));
}
PreprocessorProvider aspp=new PreprocessorProvider(defaultCFrontend,Optional.<CxxToolProvider.Type>absent());
CompilerProvider as=new CompilerProvider(defaultCFrontend,Optional.<CxxToolProvider.Type>absent());
PreprocessorProvider cpp=new PreprocessorProvider(defaultCFrontend,Optional.<CxxToolProvider.Type>absent());
CompilerProvider cc=new CompilerProvider(defaultCFrontend,Optional.<CxxToolProvider.Type>absent());
PreprocessorProvider cxxpp=new PreprocessorProvider(defaultCxxFrontend,Optional.<CxxToolProvider.Type>absent());
CompilerProvider cxx=new CompilerProvider(defaultCxxFrontend,Optional.<CxxToolProvider.Type>absent());
return CxxPlatforms.build(FLAVOR,config,as,aspp,cc,cxx,cpp,cxxpp,new DefaultLinkerProvider(linkerType,new ConstantToolProvider(new HashedFileTool(defaultCxxFrontend))),ImmutableList.<String>of(),new HashedFileTool(DEFAULT_STRIP),archiver,new HashedFileTool(DEFAULT_RANLIB),new PosixNmSymbolNameTool(new HashedFileTool(DEFAULT_NM)),ImmutableList.<String>of(),ImmutableList.<String>of(),ImmutableList.<String>of(),ImmutableList.<String>of(),sharedLibraryExtension,sharedLibraryVersionedExtensionFormat,Optional.<DebugPathSanitizer>absent(),ImmutableMap.<String,String>of());
}
