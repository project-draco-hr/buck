{
  if (platform == Platform.MACOS) {
    return CxxPlatforms.build(FLAVOR,config,new HashedFileTool(DEFAULT_AS),new ClangPreprocessor(new HashedFileTool(DEFAULT_OSX_C_FRONTEND)),new ClangCompiler(new HashedFileTool(DEFAULT_OSX_C_FRONTEND)),new ClangCompiler(new HashedFileTool(DEFAULT_OSX_CXX_FRONTEND)),new ClangPreprocessor(new HashedFileTool(DEFAULT_OSX_C_FRONTEND)),new ClangPreprocessor(new HashedFileTool(DEFAULT_OSX_CXX_FRONTEND)),new DarwinLinker(new HashedFileTool(DEFAULT_OSX_CXX_FRONTEND)),ImmutableList.<String>of(),new HashedFileTool(DEFAULT_STRIP),new BsdArchiver(new HashedFileTool(DEFAULT_AR)),new HashedFileTool(DEFAULT_RANLIB),new HashedFileTool(DEFAULT_NM),ImmutableList.<String>of(),ImmutableList.<String>of(),ImmutableList.<String>of(),ImmutableList.<String>of(),"dylib",".%s.dylib",Optional.<DebugPathSanitizer>absent(),ImmutableMap.<String,String>of());
  }
  String sharedLibraryExtension;
  String sharedLibraryVersionedExtensionFormat;
switch (platform) {
case LINUX:
    sharedLibraryExtension="so";
  sharedLibraryVersionedExtensionFormat="so.%s";
break;
case WINDOWS:
sharedLibraryExtension="dll";
sharedLibraryVersionedExtensionFormat="dll";
break;
default :
throw new RuntimeException(String.format("Unsupported platform: %s",platform));
}
return CxxPlatforms.build(FLAVOR,config,new HashedFileTool(DEFAULT_AS),new DefaultPreprocessor(new HashedFileTool(DEFAULT_C_FRONTEND)),new DefaultCompiler(new HashedFileTool(DEFAULT_C_FRONTEND)),new DefaultCompiler(new HashedFileTool(DEFAULT_CXX_FRONTEND)),new DefaultPreprocessor(new HashedFileTool(DEFAULT_C_FRONTEND)),new DefaultPreprocessor(new HashedFileTool(DEFAULT_CXX_FRONTEND)),new GnuLinker(new HashedFileTool(DEFAULT_CXX_FRONTEND)),ImmutableList.<String>of(),new HashedFileTool(DEFAULT_STRIP),new GnuArchiver(new HashedFileTool(DEFAULT_AR)),new HashedFileTool(DEFAULT_RANLIB),new HashedFileTool(DEFAULT_NM),ImmutableList.<String>of(),ImmutableList.<String>of(),ImmutableList.<String>of(),ImmutableList.<String>of(),sharedLibraryExtension,sharedLibraryVersionedExtensionFormat,Optional.<DebugPathSanitizer>absent(),ImmutableMap.<String,String>of());
}
