{
  String sharedLibraryExtension;
  String sharedLibraryVersionedExtensionFormat;
  Path defaultCFrontend;
  Path defaultCxxFrontend;
  Linker linker;
  Archiver archiver;
switch (platform) {
case LINUX:
    sharedLibraryExtension="so";
  sharedLibraryVersionedExtensionFormat="so.%s";
defaultCFrontend=DEFAULT_C_FRONTEND;
defaultCxxFrontend=DEFAULT_CXX_FRONTEND;
linker=new GnuLinker(new HashedFileTool(defaultCxxFrontend));
archiver=new GnuArchiver(new HashedFileTool(DEFAULT_AR));
break;
case MACOS:
sharedLibraryExtension="dylib";
sharedLibraryVersionedExtensionFormat=".%s.dylib";
defaultCFrontend=DEFAULT_OSX_C_FRONTEND;
defaultCxxFrontend=DEFAULT_OSX_CXX_FRONTEND;
linker=new DarwinLinker(new HashedFileTool(defaultCxxFrontend));
archiver=new BsdArchiver(new HashedFileTool(DEFAULT_AR));
break;
case WINDOWS:
sharedLibraryExtension="dll";
sharedLibraryVersionedExtensionFormat="dll";
defaultCFrontend=DEFAULT_C_FRONTEND;
defaultCxxFrontend=DEFAULT_CXX_FRONTEND;
linker=new GnuLinker(new HashedFileTool(defaultCxxFrontend));
archiver=new GnuArchiver(new HashedFileTool(DEFAULT_AR));
break;
default :
throw new RuntimeException(String.format("Unsupported platform: %s",platform));
}
return CxxPlatforms.build(FLAVOR,config,new DefaultCompiler(new HashedFileTool(defaultCFrontend)),new DefaultPreprocessor(new HashedFileTool(defaultCFrontend)),CxxPlatforms.getCompilerSupplier(defaultCFrontend),CxxPlatforms.getCompilerSupplier(defaultCxxFrontend),CxxPlatforms.getPreprocessorSupplier(defaultCFrontend),CxxPlatforms.getPreprocessorSupplier(defaultCxxFrontend),linker,ImmutableList.<String>of(),new HashedFileTool(DEFAULT_STRIP),archiver,new HashedFileTool(DEFAULT_RANLIB),new HashedFileTool(DEFAULT_NM),ImmutableList.<String>of(),ImmutableList.<String>of(),ImmutableList.<String>of(),ImmutableList.<String>of(),sharedLibraryExtension,sharedLibraryVersionedExtensionFormat,Optional.<DebugPathSanitizer>absent(),ImmutableMap.<String,String>of());
}
