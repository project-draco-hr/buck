{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  TargetSources targetSources=TargetSources.fromSourcesWithFlags(pathResolver,args.srcs.get());
  Optional<BuildRule> flavoredRule=AppleDescriptions.createFlavoredRule(params,resolver,args,appleConfig,pathResolver,targetSources);
  if (flavoredRule.isPresent()) {
    return flavoredRule.get();
  }
  CxxBinaryDescription.Arg delegateArg=delegate.createUnpopulatedConstructorArg();
  CxxLibraryDescription.TypeAndPlatform typeAndPlatform=CxxLibraryDescription.getTypeAndPlatform(params.getBuildTarget(),cxxPlatformFlavorDomain);
  Optional<AppleSdkPaths> appleSdkPaths=Optional.fromNullable(appleCxxPlatformsToAppleSdkPaths.get(typeAndPlatform.getPlatform()));
  Sets.SetView<SourcePath> allHeaderPaths=Sets.union(targetSources.getPublicHeaderPaths(),targetSources.getPrivateHeaderPaths());
  String headerPathPrefix=AppleDescriptions.getHeaderPathPrefix(args,params.getBuildTarget());
  ImmutableMap<String,SourcePath> headerMap=ImmutableMap.<String,SourcePath>builder().putAll(AppleDescriptions.convertToFlatCxxHeaders(Paths.get(""),pathResolver,allHeaderPaths)).putAll(AppleDescriptions.convertToFlatCxxHeaders(Paths.get(headerPathPrefix),pathResolver,allHeaderPaths)).build();
  AppleDescriptions.populateCxxConstructorArg(delegateArg,args,targetSources.getSrcPaths(),headerMap,appleSdkPaths);
  return delegate.createBuildRule(params,resolver,delegateArg);
}
