{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  CxxBinaryDescription.Arg delegateArg=delegate.createUnpopulatedConstructorArg();
  TypeAndPlatform typeAndPlatform=CxxLibraryDescription.getTypeAndPlatform(params.getBuildTarget(),cxxPlatformFlavorDomain);
  Optional<AppleCxxPlatform> appleCxxPlatform=Optionals.bind(typeAndPlatform.getPlatform(),new Function<Map.Entry<Flavor,CxxPlatform>,Optional<AppleCxxPlatform>>(){
    @Override public Optional<AppleCxxPlatform> apply(    Map.Entry<Flavor,CxxPlatform> input){
      return Optional.fromNullable(platformFlavorsToAppleCxxPlatforms.get(input.getKey()));
    }
  }
);
  Optional<AppleSdkPaths> appleSdkPaths=appleCxxPlatform.transform(AppleCxxPlatform.TO_APPLE_SDK_PATHS);
  AppleDescriptions.populateCxxConstructorArg(pathResolver,delegateArg,args,params.getBuildTarget(),appleSdkPaths);
  return delegate.createBuildRule(params,resolver,delegateArg);
}
