{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  Optional<BuildRule> flavoredRule=AppleDescriptions.createFlavoredRule(params,resolver,args,appleConfig,pathResolver);
  if (flavoredRule.isPresent()) {
    return flavoredRule.get();
  }
  CxxBinaryDescription.Arg delegateArg=delegate.createUnpopulatedConstructorArg();
  CxxLibraryDescription.TypeAndPlatform typeAndPlatform=CxxLibraryDescription.getTypeAndPlatform(params.getBuildTarget(),cxxPlatformFlavorDomain);
  Optional<AppleSdkPaths> appleSdkPaths=Optionals.bind(typeAndPlatform.getPlatform(),new Function<Map.Entry<Flavor,CxxPlatform>,Optional<AppleSdkPaths>>(){
    @Override public Optional<AppleSdkPaths> apply(    Map.Entry<Flavor,CxxPlatform> input){
      return Optional.fromNullable(appleCxxPlatformsToAppleSdkPaths.get(input.getValue()));
    }
  }
);
  Sets.SetView<SourcePath> allHeaderPaths=Sets.union(args.exportedHeaders.get(),args.headers.get());
  String headerPathPrefix=AppleDescriptions.getHeaderPathPrefix(args,params.getBuildTarget());
  ImmutableMap<String,SourcePath> headerMap=ImmutableMap.<String,SourcePath>builder().putAll(AppleDescriptions.convertToFlatCxxHeaders(Paths.get(""),pathResolver,allHeaderPaths)).putAll(AppleDescriptions.convertToFlatCxxHeaders(Paths.get(headerPathPrefix),pathResolver,allHeaderPaths)).build();
  AppleDescriptions.populateCxxConstructorArg(pathResolver,delegateArg,args,headerMap,appleSdkPaths);
  return delegate.createBuildRule(params,resolver,delegateArg);
}
