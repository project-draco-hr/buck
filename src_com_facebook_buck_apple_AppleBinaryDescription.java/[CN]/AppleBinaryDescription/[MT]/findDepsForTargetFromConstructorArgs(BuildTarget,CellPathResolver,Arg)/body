{
  Collection<ImmutableSortedSet<Flavor>> thinFlavorSets=generateThinDelegateFlavors(buildTarget.getFlavors());
  if (thinFlavorSets.size() > 0) {
    return Iterables.concat(Iterables.transform(thinFlavorSets,new Function<ImmutableSortedSet<Flavor>,Iterable<BuildTarget>>(){
      @Override public Iterable<BuildTarget> apply(      ImmutableSortedSet<Flavor> input){
        return delegate.findDepsForTargetFromConstructorArgs(buildTarget.withFlavors(input),cellRoots,constructorArg.linkerFlags.get(),constructorArg.platformLinkerFlags.get().getValues());
      }
    }
));
  }
 else {
    return delegate.findDepsForTargetFromConstructorArgs(buildTarget,cellRoots,constructorArg.linkerFlags.get(),constructorArg.platformLinkerFlags.get().getValues());
  }
}
