{
  if (FluentIterable.from(flavors).allMatch(IS_SUPPORTED_FLAVOR)) {
    return true;
  }
  Collection<ImmutableSortedSet<Flavor>> thinFlavorSets=generateThinDelegateFlavors(flavors);
  if (thinFlavorSets.size() > 0) {
    return Iterables.all(thinFlavorSets,new Predicate<ImmutableSortedSet<Flavor>>(){
      @Override public boolean apply(      ImmutableSortedSet<Flavor> input){
        return delegate.hasFlavors(input);
      }
    }
);
  }
 else {
    return delegate.hasFlavors(ImmutableSet.copyOf(Sets.difference(flavors,NON_DELEGATE_FLAVORS)));
  }
}
