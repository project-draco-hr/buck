{
  if (FluentIterable.from(flavors).allMatch(IS_SUPPORTED_FLAVOR)) {
    return true;
  }
  final ImmutableSet<Flavor> delegateFlavors=ImmutableSet.copyOf(Sets.difference(flavors,Sets.union(AppleDebugFormat.FLAVOR_DOMAIN.getFlavors(),ImmutableSet.of(APP_FLAVOR))));
  Collection<ImmutableSortedSet<Flavor>> thinFlavorSets=MultiarchFileInfos.generateThinFlavors(platformFlavorsToAppleCxxPlatforms.getFlavors(),ImmutableSortedSet.copyOf(delegateFlavors));
  if (thinFlavorSets.size() > 1) {
    return Iterables.all(thinFlavorSets,new Predicate<ImmutableSortedSet<Flavor>>(){
      @Override public boolean apply(      ImmutableSortedSet<Flavor> input){
        return delegate.hasFlavors(input);
      }
    }
);
  }
 else {
    return delegate.hasFlavors(delegateFlavors);
  }
}
