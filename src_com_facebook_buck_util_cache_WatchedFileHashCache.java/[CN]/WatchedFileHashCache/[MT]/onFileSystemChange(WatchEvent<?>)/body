{
  if (getFilesystem().isPathChangeEvent(event)) {
    final Path path=((Path)event.context()).normalize();
    LOG.verbose("Invalidating %s",path);
    Iterable<Path> pathsToInvalidate=Maps.filterEntries(loadingCache.asMap(),new Predicate<Map.Entry<Path,HashCodeAndFileType>>(){
      @Override public boolean apply(      Map.Entry<Path,HashCodeAndFileType> entry){
switch (entry.getValue().getType()) {
case FILE:
          return path.equals(entry.getKey());
case DIRECTORY:
        return path.startsWith(entry.getKey());
    }
    return false;
  }
}
).keySet();
LOG.verbose("Paths to invalidate: %s",pathsToInvalidate);
loadingCache.invalidateAll(pathsToInvalidate);
}
 else {
LOG.debug("Invalidating all");
loadingCache.invalidateAll();
}
}
