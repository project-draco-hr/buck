{
  Preconditions.checkNotNull(buildId);
  try {
    String filenameTime=dateFormat.get().format(new Date(clock.currentTimeMillis()));
    String tracePath=String.format("%s/build.%s.%s.trace",BuckConstant.BUCK_TRACE_DIR,filenameTime,buildId);
    File traceOutput=projectFilesystem.getFileForRelativePath(tracePath);
    projectFilesystem.createParentDirs(tracePath);
    ImmutableList<ChromeTraceEvent> tsSortedEvents=FluentIterable.from(eventList).toSortedList(new Comparator<ChromeTraceEvent>(){
      @Override public int compare(      ChromeTraceEvent a,      ChromeTraceEvent b){
        return Long.signum(a.getMicroTime() - b.getMicroTime());
      }
    }
);
    ObjectMapper mapper=new ObjectMapper();
    LOG.debug("Writing Chrome trace to %s",tracePath);
    mapper.writeValue(traceOutput,tsSortedEvents);
    String symlinkPath=String.format("%s/build.trace",BuckConstant.BUCK_TRACE_DIR);
    File symlinkFile=projectFilesystem.getFileForRelativePath(symlinkPath);
    projectFilesystem.createSymLink(Paths.get(traceOutput.toURI()),Paths.get(symlinkFile.toURI()),true);
    deleteOldTraces();
  }
 catch (  IOException e) {
    throw new HumanReadableException(e,"Unable to write trace file: " + e);
  }
}
