{
  ClasspathTraverser classpathTraverser=new DefaultClasspathTraverser();
  LOG.debug("Traversing (first pass)");
  classpathTraverser.traverse(new ClasspathTraversal(inFiles,filesystem){
    @Override public void visit(    FileLike entry){
      long entrySize;
      try {
        entrySize=entry.getSize();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      if (entrySize > 0) {
        remainingSize+=entrySize;
      }
    }
  }
);
  primaryOut=newZipOutput(outPrimary);
  secondaryDexWriter.reset();
  try {
    for (    Path inFile : inFiles) {
      LOG.debug("Traversing for: " + inFile);
      classpathTraverser.traverse(new ClasspathTraversal(Collections.singleton(inFile),filesystem){
        @Override public void visit(        FileLike entry) throws IOException {
          LOG.debug("Visiting " + entry.getRelativePath());
          processEntry(entry);
        }
      }
);
      DefaultZipOutputStreamHelper currentSecondaryOut=secondaryDexWriter.getCurrentOutput();
      if (currentSecondaryOut != null && currentSecondaryOut.getCurrentSize() >= zipSizeSoftLimit) {
        secondaryDexWriter.finishCurrentZipFile();
      }
    }
  }
  finally {
    primaryOut.close();
    secondaryDexWriter.close();
  }
  ImmutableMultimap.Builder<APKModule,Path> outputFilesBuilder=ImmutableMultimap.builder();
  outputFilesBuilder.putAll(apkModuleGraph.getRootAPKModule(),secondaryDexWriter.getFiles());
  return outputFilesBuilder.build();
}
