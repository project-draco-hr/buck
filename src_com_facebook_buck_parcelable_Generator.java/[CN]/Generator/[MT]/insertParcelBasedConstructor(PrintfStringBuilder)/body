{
  out.append('\n');
  out.appendLine("  public %s(Parcel parcel) {",clazz.getClassName());
  if (clazz.hasSuperClass()) {
    out.appendLine("    super(parcel);");
  }
  for (  ParcelableField field : clazz.getFields()) {
    String type=field.getType();
    String fieldName=field.getName();
    ReadWriteMethod readWriteMethod=SIMPLE_TYPE_MAPPINGS.get(type);
    if (readWriteMethod != null && readWriteMethod.hasReadMethod()) {
      out.appendLine("    this.%s = parcel.%s();",fieldName,readWriteMethod.readMethod);
    }
 else     if ("boolean".equals(type)) {
      out.appendLine("    this.%s = parcel.readByte() != 0;",fieldName);
    }
 else     if ("List".equals(type)) {
      out.appendLine("    this.%s = parcel.readArrayList(null /* classLoader */);",fieldName);
    }
 else     if (type.startsWith("List<")) {
      String genericType=type.substring("List<".length(),type.length() - 1);
      out.appendLine("    this.%s = Lists.newArrayList();",fieldName);
      out.appendLine("    parcel.readTypedList(this.%s, %s.CREATOR);",fieldName,genericType);
    }
 else {
      out.appendLine("    this.%s = parcel.readParcelable(%s.class.getClassLoader());",fieldName,field.getType());
    }
  }
  out.appendLine("  }");
}
