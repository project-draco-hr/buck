{
  out.appendLine("  public %s(",clazz.getClassName());
  if (clazz.hasSuperClass()) {
    String rawSuperParams=Strings.nullToEmpty(clazz.getRawSuperParams());
    if (!rawSuperParams.isEmpty() && !rawSuperParams.endsWith(",")) {
      rawSuperParams+=",";
    }
    out.appendLine("      %s",rawSuperParams);
  }
  final String defaultFieldVisibility=clazz.getDefaultFieldVisibility();
  Joiner.on(",\n").appendTo(out,Iterables.transform(clazz.getFields(),new Function<ParcelableField,String>(){
    @Override public String apply(    ParcelableField field){
      String visibility=field.getVisibility();
      if (visibility == null) {
        visibility=defaultFieldVisibility;
      }
      return String.format("      %s %s",field.getType(),field.getName());
    }
  }
));
  out.appendLine(") {");
  if (clazz.hasSuperClass()) {
    String rawSuperParams=Strings.nullToEmpty(clazz.getRawSuperParams());
    String superParamNames=Joiner.on(", ").join(Iterables.transform(Splitter.on(',').trimResults().omitEmptyStrings().split(rawSuperParams),new Function<String,String>(){
      @Override public String apply(      String typeAndName){
        return typeAndName.split("\\s+")[1];
      }
    }
));
    out.appendLine("    super(%s);",superParamNames);
  }
  for (  ParcelableField field : clazz.getFields()) {
    out.appendLine("    this.%s = %s;",field.getName(),field.getName());
  }
  out.appendLine("  }");
}
