{
  Set<T> fromValue=args.get(0).getExpression().eval(env);
  Set<T> toValue=args.get(1).getExpression().eval(env);
  env.buildTransitiveClosure(expression,fromValue,Integer.MAX_VALUE);
  Set<T> done=new HashSet<>();
  for (  T x : fromValue) {
    if (done.contains(x)) {
      continue;
    }
    Set<T> xtc=env.getTransitiveClosure(ImmutableSet.of(x));
    SetView<T> result;
    if (xtc.size() > toValue.size()) {
      result=Sets.intersection(toValue,xtc);
    }
 else {
      result=Sets.intersection(xtc,toValue);
    }
    if (!result.isEmpty()) {
      return env.getNodesOnPath(x,result.iterator().next());
    }
    done.addAll(xtc);
  }
  return ImmutableSet.of();
}
