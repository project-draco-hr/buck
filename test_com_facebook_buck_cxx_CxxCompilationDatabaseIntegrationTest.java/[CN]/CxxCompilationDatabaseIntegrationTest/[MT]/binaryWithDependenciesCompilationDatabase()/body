{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"compilation_database",tmp);
  workspace.setUp();
  File compilationDatabase=workspace.buildAndReturnOutput("//:binary_with_dep#compilation-database");
  assertEquals(Paths.get("buck-out/gen/__binary_with_dep#compilation-database.json"),tmp.getRootPath().relativize(compilationDatabase.toPath()));
  String binaryHeaderSymlinkTreeFolder="buck-out/gen/binary_with_dep#default,header-symlink-tree";
  String binaryExportedHeaderSymlinkTreeFoler="buck-out/gen/library_with_header#default,exported-header-symlink-tree";
  assertTrue(Files.exists(tmp.getRootPath().resolve(binaryHeaderSymlinkTreeFolder)));
  assertTrue(Files.exists(tmp.getRootPath().resolve(binaryExportedHeaderSymlinkTreeFoler)));
  String libraryExportedHeaderSymlinkTreeFoler="buck-out/gen/library_with_header#default,exported-header-symlink-tree";
  assertTrue(Files.exists(tmp.getRootPath().resolve(libraryExportedHeaderSymlinkTreeFoler)));
  assertTrue(Files.exists(tmp.getRootPath().resolve(libraryExportedHeaderSymlinkTreeFoler + "/bar.h")));
  Gson gson=new Gson();
  FileReader fileReader=new FileReader(compilationDatabase);
  List<JsonSerializableDatabaseEntry> entries=gson.fromJson(fileReader,new TypeToken<List<JsonSerializableDatabaseEntry>>(){
  }
.getType());
  Map<String,JsonSerializableDatabaseEntry> fileToEntry=Maps.newHashMap();
  for (  JsonSerializableDatabaseEntry entry : entries) {
    fileToEntry.put(entry.file,entry);
  }
  assertEquals(1,entries.size());
  assertHasEntry(fileToEntry,"foo.cpp",new ImmutableList.Builder<String>().add(COMPILER_PATH).add("-c").add("-x").add("c++").add("-I").add(binaryHeaderSymlinkTreeFolder).add("-I").add(binaryExportedHeaderSymlinkTreeFoler).add("-o").add("buck-out/bin/binary_with_dep#compile-foo.cpp.o,default/foo.cpp.o").add("foo.cpp").build());
}
