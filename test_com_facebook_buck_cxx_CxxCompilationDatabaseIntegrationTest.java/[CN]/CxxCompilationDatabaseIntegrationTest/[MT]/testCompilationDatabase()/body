{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"compilation_database",tmp);
  workspace.setUp();
  Path compilationDatabase=workspace.buildAndReturnOutput("//:test#default,compilation-database");
  Path rootPath=tmp.getRootPath();
  assertEquals(Paths.get("buck-out/gen/__test#compilation-database,default.json"),rootPath.relativize(compilationDatabase));
  String binaryHeaderSymlinkTreeFolder=String.format("buck-out/gen/test#default,%s",CxxDescriptionEnhancer.HEADER_SYMLINK_TREE_FLAVOR);
  String binaryExportedHeaderSymlinkTreeFolder=String.format("buck-out/gen/test#default,%s",CxxDescriptionEnhancer.EXPORTED_HEADER_SYMLINK_TREE_FLAVOR);
  Map<String,CxxCompilationDatabaseEntry> fileToEntry=CxxCompilationDatabaseUtils.parseCompilationDatabaseJsonFile(compilationDatabase);
  assertEquals(1,fileToEntry.size());
  assertHasEntry(fileToEntry,"test.cpp",new ImmutableList.Builder<String>().add(COMPILER_PATH).add("-fPIC").add("-fPIC").add("-I").add(headerSymlinkTreeIncludePath(binaryHeaderSymlinkTreeFolder)).add("-I").add(headerSymlinkTreeIncludePath(binaryExportedHeaderSymlinkTreeFolder)).addAll(getExtraFlagsForHeaderMaps()).addAll(COMPILER_SPECIFIC_FLAGS).add("-x").add("c++").add("-c").add("-o").add("buck-out/gen/test#compile-pic-" + sanitize("test.cpp.o") + ",default/test.cpp.o").add(rootPath.resolve(Paths.get("test.cpp")).toRealPath().toString()).build());
}
