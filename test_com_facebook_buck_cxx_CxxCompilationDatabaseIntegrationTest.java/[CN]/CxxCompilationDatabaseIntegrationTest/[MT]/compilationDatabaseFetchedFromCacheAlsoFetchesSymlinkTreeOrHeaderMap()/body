{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"compilation_database",tmp);
  workspace.setUp();
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  workspace.enableDirCache();
  addLibraryHeaderFiles(workspace);
  BuildTarget target=BuildTargetFactory.newInstance("//:library_with_header#default,compilation-database");
  workspace.buildAndReturnOutput(target.getFullyQualifiedName());
  Path headerSymlinkTreeFolder=BuildTargets.getGenPath(filesystem,target.withFlavors(ImmutableFlavor.of("default"),CxxDescriptionEnhancer.HEADER_SYMLINK_TREE_FLAVOR),"%s");
  Path exportedHeaderSymlinkTreeFolder=BuildTargets.getGenPath(filesystem,target.withFlavors(ImmutableFlavor.of("default"),CxxDescriptionEnhancer.EXPORTED_HEADER_SYMLINK_TREE_FLAVOR),"%s");
  verifyHeaders(workspace,headerSymlinkTreeFolder,"bar.h","baz.h","blech_private.h");
  verifyHeaders(workspace,exportedHeaderSymlinkTreeFolder,"bar.h","baz.h");
  Files.delete(workspace.getPath("baz.h"));
  Files.delete(workspace.getPath("blech_private.h"));
  workspace.buildAndReturnOutput(target.getFullyQualifiedName());
  verifyHeaders(workspace,headerSymlinkTreeFolder,"bar.h");
  verifyHeaders(workspace,exportedHeaderSymlinkTreeFolder,"bar.h");
  addLibraryHeaderFiles(workspace);
  workspace.buildAndReturnOutput(target.getFullyQualifiedName());
  verifyHeaders(workspace,headerSymlinkTreeFolder,"bar.h","baz.h","blech_private.h");
  verifyHeaders(workspace,exportedHeaderSymlinkTreeFolder,"bar.h","baz.h");
}
