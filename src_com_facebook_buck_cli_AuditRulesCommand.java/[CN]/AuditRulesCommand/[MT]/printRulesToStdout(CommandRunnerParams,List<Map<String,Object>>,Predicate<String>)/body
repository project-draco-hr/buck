{
  final PrintStream stdOut=params.getConsole().getStdOut();
  Iterable<Map<String,Object>> filteredRules=FluentIterable.from(rawRules).filter(new Predicate<Map<String,Object>>(){
    @Override public boolean apply(    Map<String,Object> rawRule){
      String type=(String)rawRule.get(BuckPyFunction.TYPE_PROPERTY_NAME);
      return includeType.apply(type);
    }
  }
);
  if (json) {
    Map<String,Object> rulesKeyedByName=new HashMap<>();
    for (    Map<String,Object> rawRule : filteredRules) {
      String name=(String)rawRule.get("name");
      Preconditions.checkNotNull(name);
      rulesKeyedByName.put(name,rawRule);
    }
    ObjectMapper mapper=params.getObjectMapper();
    JsonFactory factory=mapper.getJsonFactory();
    try (JsonGenerator generator=factory.createJsonGenerator(stdOut).disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET).useDefaultPrettyPrinter()){
      mapper.writeValue(generator,rulesKeyedByName);
    }
     stdOut.print('\n');
  }
 else {
    for (    Map<String,Object> rawRule : filteredRules) {
      printRuleAsPythonToStdout(stdOut,rawRule);
    }
  }
}
