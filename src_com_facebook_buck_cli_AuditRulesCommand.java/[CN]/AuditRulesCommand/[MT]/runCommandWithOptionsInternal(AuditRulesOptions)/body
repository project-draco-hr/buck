{
  ProjectFilesystem projectFilesystem=getProjectFilesystem();
  ProjectBuildFileParserFactory factory=new DefaultProjectBuildFileParserFactory(projectFilesystem,options.getBuckConfig().getPythonInterpreter(),getRepository().getAllDescriptions());
  try (ProjectBuildFileParser parser=factory.createParser(options.getBuckConfig().getDefaultIncludes(),console,environment,getBuckEventBus())){
    PrintStream out=console.getStdOut();
    for (    String pathToBuildFile : options.getArguments()) {
      out.printf("# %s\n\n",pathToBuildFile);
      Path path=Paths.get(pathToBuildFile);
      if (!path.isAbsolute()) {
        Path root=projectFilesystem.getRootPath();
        path=root.resolve(path);
      }
      List<Map<String,Object>> rawRules;
      try {
        rawRules=parser.getAllRules(path);
      }
 catch (      BuildFileParseException e) {
        throw new HumanReadableException(e);
      }
      final ImmutableSet<String> types=options.getTypes();
      Predicate<String> includeType=new Predicate<String>(){
        @Override public boolean apply(        String type){
          return types.isEmpty() || types.contains(type);
        }
      }
;
      printRulesToStdout(rawRules,includeType);
    }
  }
 catch (  BuildFileParseException e) {
    throw new HumanReadableException("Unable to create parser");
  }
  return 0;
}
