{
  ProjectFilesystem projectFilesystem=getProjectFilesystem();
  ProjectBuildFileParser parser=new ProjectBuildFileParser(projectFilesystem,options.getBuckConfig().getDefaultIncludes());
  PrintStream out=console.getStdOut();
  for (  String pathToBuildFile : options.getArguments()) {
    out.printf("# %s\n\n",pathToBuildFile);
    Path path=Paths.get(pathToBuildFile);
    if (!path.isAbsolute()) {
      Path root=projectFilesystem.getProjectRoot().toPath();
      path=root.resolve(path);
    }
    List<Map<String,Object>> rawRules;
    try {
      rawRules=parser.getAllRules(path.toString());
    }
 catch (    BuildFileParseException e) {
      throw new HumanReadableException(e);
    }
    final ImmutableSet<String> types=options.getTypes();
    Predicate<String> includeType=new Predicate<String>(){
      @Override public boolean apply(      String type){
        return types.isEmpty() || types.contains(type);
      }
    }
;
    printRulesToStdout(rawRules,includeType);
  }
  return 0;
}
