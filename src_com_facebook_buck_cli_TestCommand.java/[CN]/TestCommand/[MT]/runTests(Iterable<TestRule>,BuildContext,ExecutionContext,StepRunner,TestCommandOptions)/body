{
  ImmutableSet<JavaLibraryRule> rulesUnderTest;
  if (options.isCodeCoverageEnabled()) {
    rulesUnderTest=getRulesUnderTest(tests);
    if (!rulesUnderTest.isEmpty()) {
      try {
        stepRunner.runStep(new MakeCleanDirectoryStep(JUnitStep.EMMA_OUTPUT_DIR));
        stepRunner.runStep(getInstrumentCommand(rulesUnderTest,executionContext.getProjectFilesystem()));
      }
 catch (      StepFailedException e) {
        console.printBuildFailureWithoutStacktrace(e);
        return 1;
      }
    }
  }
 else {
    rulesUnderTest=ImmutableSet.of();
  }
  getBuckEventBus().post(TestRunEvent.started(options.isRunAllTests(),options.getArgumentsFormattedAsBuildTargets()));
  List<ListenableFuture<TestResults>> results=Lists.newArrayList();
  Verbosity verbosity=console.getVerbosity();
  final boolean printTestResults=(verbosity != Verbosity.SILENT);
  FutureCallback<TestResults> onTestFinishedCallback=new FutureCallback<TestResults>(){
    @Override public void onSuccess(    TestResults testResults){
      if (printTestResults) {
        getBuckEventBus().post(IndividualTestEvent.finished(options.getArgumentsFormattedAsBuildTargets(),testResults));
      }
    }
    @Override public void onFailure(    Throwable throwable){
      throwable.printStackTrace(getStdErr());
    }
  }
;
  TestRuleKeyFileHelper testRuleKeyFileHelper=new TestRuleKeyFileHelper(executionContext.getProjectFilesystem());
  for (  TestRule test : tests) {
    List<Step> steps;
    boolean isTestRunRequired=isTestRunRequiredForTest(test,executionContext,testRuleKeyFileHelper);
    if (isTestRunRequired) {
      getBuckEventBus().post(IndividualTestEvent.started(options.getArgumentsFormattedAsBuildTargets()));
      ImmutableList.Builder<Step> stepsBuilder=ImmutableList.builder();
      stepsBuilder.addAll(test.runTests(buildContext,executionContext));
      stepsBuilder.add(testRuleKeyFileHelper.createRuleKeyInDirStep(test));
      steps=stepsBuilder.build();
    }
 else {
      steps=ImmutableList.of();
    }
    ListenableFuture<TestResults> testResults=stepRunner.runStepsAndYieldResult(steps,getCachingStatusTransformingCallable(isTestRunRequired,test.interpretTestResults(executionContext)),test.getBuildTarget());
    Futures.addCallback(testResults,onTestFinishedCallback);
    results.add(testResults);
  }
  ListenableFuture<List<TestResults>> uberFuture=Futures.allAsList(results);
  List<TestResults> completedResults;
  try {
    completedResults=uberFuture.get();
  }
 catch (  InterruptedException e) {
    e.printStackTrace(getStdErr());
    return 1;
  }
catch (  ExecutionException e) {
    e.printStackTrace(getStdErr());
    return 1;
  }
  getBuckEventBus().post(TestRunEvent.finished(options.getArgumentsFormattedAsBuildTargets(),completedResults));
  if (options.getPathToXmlTestOutput() != null) {
    try (Writer writer=Files.newWriter(new File(options.getPathToXmlTestOutput()),Charsets.UTF_8)){
      writeXmlOutput(completedResults,writer);
    }
   }
  if (options.isCodeCoverageEnabled() && !rulesUnderTest.isEmpty()) {
    try {
      Optional<DefaultJavaPackageFinder> defaultJavaPackageFinderOptional=options.getJavaPackageFinder();
      stepRunner.runStep(getReportCommand(rulesUnderTest,defaultJavaPackageFinderOptional,getProjectFilesystem()));
    }
 catch (    StepFailedException e) {
      console.printBuildFailureWithoutStacktrace(e);
      return 1;
    }
  }
  boolean failures=Iterables.any(completedResults,new Predicate<TestResults>(){
    @Override public boolean apply(    TestResults results){
      return !results.isSuccess();
    }
  }
);
  return failures ? 1 : 0;
}
