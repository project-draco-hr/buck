{
  TestRunningOptions options=getTestRunningOptions(params);
  List<ExternalTestRunnerTestSpec> specs=Lists.newArrayList();
  for (  TestRule testRule : testRules) {
    if (!(testRule instanceof ExternalTestRunnerRule)) {
      params.getBuckEventBus().post(ConsoleEvent.severe(String.format("Test %s does not support external test running",testRule.getBuildTarget())));
      return 1;
    }
    ExternalTestRunnerRule rule=(ExternalTestRunnerRule)testRule;
    specs.add(rule.getExternalTestRunnerSpec(build.getExecutionContext(),options));
  }
  Path infoFile=params.getCell().getFilesystem().resolve(BuckConstant.SCRATCH_PATH.resolve("external_runner_specs.json"));
  Files.createDirectories(infoFile.getParent());
  Files.deleteIfExists(infoFile);
  params.getObjectMapper().writerWithDefaultPrettyPrinter().writeValue(infoFile.toFile(),specs);
  ListeningProcessExecutor processExecutor=new ListeningProcessExecutor();
  ProcessExecutorParams processExecutorParams=ProcessExecutorParams.builder().addAllCommand(command).addAllCommand(withDashArguments).addCommand("--buck-test-info",infoFile.toString()).setDirectory(params.getCell().getFilesystem().getRootPath().toFile()).build();
  final WritableByteChannel stdout=Channels.newChannel(params.getConsole().getStdOut());
  final WritableByteChannel stderr=Channels.newChannel(params.getConsole().getStdErr());
  ListeningProcessExecutor.ProcessListener processListener=new ListeningProcessExecutor.ProcessListener(){
    @Override public void onStart(    ListeningProcessExecutor.LaunchedProcess process){
    }
    @Override public void onExit(    int exitCode){
    }
    @Override public void onStdout(    ByteBuffer buffer,    boolean closed){
      try {
        stdout.write(buffer);
      }
 catch (      IOException e) {
        throw Throwables.propagate(e);
      }
    }
    @Override public void onStderr(    ByteBuffer buffer,    boolean closed){
      try {
        stderr.write(buffer);
      }
 catch (      IOException e) {
        throw Throwables.propagate(e);
      }
    }
    @Override public boolean onStdinReady(    ByteBuffer buffer){
      buffer.flip();
      return false;
    }
  }
;
  ListeningProcessExecutor.LaunchedProcess process=processExecutor.launchProcess(processExecutorParams,processListener);
  try {
    return processExecutor.waitForProcess(process,Long.MAX_VALUE,TimeUnit.DAYS);
  }
  finally {
    processExecutor.destroyProcess(process,false);
    processExecutor.waitForProcess(process,Long.MAX_VALUE,TimeUnit.DAYS);
  }
}
