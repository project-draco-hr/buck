{
  TestRunningOptions options=getTestRunningOptions(params);
  List<ExternalTestRunnerTestSpec> specs=Lists.newArrayList();
  for (  TestRule testRule : testRules) {
    if (!(testRule instanceof ExternalTestRunnerRule)) {
      params.getBuckEventBus().post(ConsoleEvent.severe(String.format("Test %s does not support external test running",testRule.getBuildTarget())));
      return 1;
    }
    ExternalTestRunnerRule rule=(ExternalTestRunnerRule)testRule;
    specs.add(rule.getExternalTestRunnerSpec(build.getExecutionContext(),options));
  }
  Path infoFile=params.getCell().getFilesystem().resolve(params.getCell().getFilesystem().getBuckPaths().getScratchDir()).resolve("external_runner_specs.json");
  Files.createDirectories(infoFile.getParent());
  Files.deleteIfExists(infoFile);
  params.getObjectMapper().writerWithDefaultPrettyPrinter().writeValue(infoFile.toFile(),specs);
  ListeningProcessExecutor processExecutor=new ListeningProcessExecutor();
  ProcessExecutorParams processExecutorParams=ProcessExecutorParams.builder().addAllCommand(command).addAllCommand(withDashArguments).setEnvironment(params.getEnvironment()).addCommand("--buck-test-info",infoFile.toString()).addCommand("--jobs",String.valueOf(getConcurrencyLimit(params.getBuckConfig()).threadLimit)).setDirectory(params.getCell().getFilesystem().getRootPath().toFile()).build();
  ForwardingProcessListener processListener=new ForwardingProcessListener(Channels.newChannel(params.getConsole().getStdOut()),Channels.newChannel(params.getConsole().getStdErr()));
  ListeningProcessExecutor.LaunchedProcess process=processExecutor.launchProcess(processExecutorParams,processListener);
  try {
    return processExecutor.waitForProcess(process);
  }
  finally {
    processExecutor.destroyProcess(process,false);
    processExecutor.waitForProcess(process);
  }
}
