{
  LOG.debug("Running with arguments %s",getArguments());
  try (CommandThreadManager pool=new CommandThreadManager("Test",params.getBuckConfig().getWorkQueueExecutionOrder(),getConcurrencyLimit(params.getBuckConfig()))){
    BuildEvent.Started started=BuildEvent.started(getArguments());
    if (params.getParser().getParseStartTime().isPresent()) {
      params.getBuckEventBus().post(started,params.getParser().getParseStartTime().get());
    }
 else {
      params.getBuckEventBus().post(started);
    }
    TargetGraph targetGraph;
    ImmutableSet<BuildTarget> explicitBuildTargets;
    try {
      boolean ignoreBuckAutodepsFiles=false;
      if (isRunAllTests()) {
        targetGraph=params.getParser().buildTargetGraphForTargetNodeSpecs(params.getBuckEventBus(),params.getCell(),getEnableParserProfiling(),pool.getExecutor(),ImmutableList.of(TargetNodePredicateSpec.of(new Predicate<TargetNode<?>>(){
          @Override public boolean apply(          TargetNode<?> input){
            return input.getType().isTestRule();
          }
        }
,BuildFileSpec.fromRecursivePath(Paths.get(""),params.getCell().getRoot()))),ignoreBuckAutodepsFiles,Parser.ApplyDefaultFlavorsMode.ENABLED).getTargetGraph();
        explicitBuildTargets=ImmutableSet.of();
      }
 else {
        LOG.debug("Parsing graph for arguments %s",getArguments());
        TargetGraphAndBuildTargets result=params.getParser().buildTargetGraphForTargetNodeSpecs(params.getBuckEventBus(),params.getCell(),getEnableParserProfiling(),pool.getExecutor(),parseArgumentsAsTargetNodeSpecs(params.getBuckConfig(),getArguments()),ignoreBuckAutodepsFiles,Parser.ApplyDefaultFlavorsMode.ENABLED);
        targetGraph=result.getTargetGraph();
        explicitBuildTargets=result.getBuildTargets();
        LOG.debug("Got explicit build targets %s",explicitBuildTargets);
        ImmutableSet.Builder<BuildTarget> testTargetsBuilder=ImmutableSet.builder();
        for (        TargetNode<?> node : targetGraph.getAll(explicitBuildTargets)) {
          ImmutableSortedSet<BuildTarget> nodeTests=TargetNodes.getTestTargetsForNode(node);
          if (!nodeTests.isEmpty()) {
            LOG.debug("Got tests for target %s: %s",node.getBuildTarget(),nodeTests);
            testTargetsBuilder.addAll(nodeTests);
          }
        }
        ImmutableSet<BuildTarget> testTargets=testTargetsBuilder.build();
        if (!testTargets.isEmpty()) {
          LOG.debug("Got related test targets %s, building new target graph...",testTargets);
          targetGraph=params.getParser().buildTargetGraph(params.getBuckEventBus(),params.getCell(),getEnableParserProfiling(),pool.getExecutor(),Iterables.concat(explicitBuildTargets,testTargets));
          LOG.debug("Finished building new target graph with tests.");
        }
      }
    }
 catch (    BuildTargetException|BuildFileParseException e) {
      params.getBuckEventBus().post(ConsoleEvent.severe(MoreExceptions.getHumanReadableOrLocalizedMessage(e)));
      return 1;
    }
    ActionGraphAndResolver actionGraphAndResolver=Preconditions.checkNotNull(params.getActionGraphCache().getActionGraph(params.getBuckEventBus(),BuildIdSampler.apply(params.getBuckConfig().getActionGraphCacheCheckSampleRate(),params.getBuckEventBus().getBuildId()),targetGraph));
    Iterable<TestRule> testRules=Iterables.filter(actionGraphAndResolver.getActionGraph().getNodes(),TestRule.class);
    if (!isBuildFiltered(params.getBuckConfig())) {
      testRules=filterTestRules(params.getBuckConfig(),explicitBuildTargets,testRules);
    }
    if (isDryRun()) {
      printMatchingTestRules(params.getConsole(),testRules);
    }
    CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(pool.getExecutor(),params.getFileHashCache(),getBuildEngineMode().or(params.getBuckConfig().getBuildEngineMode()),params.getBuckConfig().getDependencySchedulingOrder(),params.getBuckConfig().getBuildDepFiles(),params.getBuckConfig().getBuildMaxDepFileCacheEntries(),params.getBuckConfig().getBuildArtifactCacheSizeLimit(),params.getObjectMapper(),actionGraphAndResolver.getResolver());
    try (Build build=createBuild(params.getBuckConfig(),actionGraphAndResolver.getActionGraph(),actionGraphAndResolver.getResolver(),params.getAndroidPlatformTargetSupplier(),cachingBuildEngine,params.getArtifactCache(),params.getConsole(),params.getBuckEventBus(),getTargetDeviceOptional(),params.getPlatform(),params.getEnvironment(),params.getObjectMapper(),params.getClock(),Optional.of(getAdbOptions(params.getBuckConfig())),Optional.of(getTargetDeviceOptions()),params.getExecutors())){
      int exitCode=build.executeAndPrintFailuresToEventBus(testRules,isKeepGoing(),params.getBuckEventBus(),params.getConsole(),getPathToBuildReport(params.getBuckConfig()));
      params.getBuckEventBus().post(BuildEvent.finished(started,exitCode));
      if (exitCode != 0) {
        return exitCode;
      }
      if (isBuildFiltered(params.getBuckConfig())) {
        testRules=filterTestRules(params.getBuckConfig(),explicitBuildTargets,testRules);
      }
      Optional<ImmutableList<String>> externalTestRunner=params.getBuckConfig().getExternalTestRunner();
      if (externalTestRunner.isPresent()) {
        return runTestsExternal(params,build,externalTestRunner.get(),testRules);
      }
      return runTestsInternal(params,cachingBuildEngine,build,testRules);
    }
   }
 }
