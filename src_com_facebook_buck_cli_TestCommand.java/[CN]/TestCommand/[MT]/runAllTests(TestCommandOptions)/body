{
  ImmutableSet<BuildTarget> emptyTargetsList=ImmutableSet.of();
  if (getParser().getParseStartTime().isPresent()) {
    getBuckEventBus().post(BuildEvent.started(emptyTargetsList),getParser().getParseStartTime().get());
  }
 else {
    getBuckEventBus().post(BuildEvent.started(emptyTargetsList));
  }
  PartialGraph partialGraph=PartialGraph.createPartialGraph(new Predicate<TargetNode<?>>(){
    @Override public boolean apply(    TargetNode<?> input){
      return input.getType().isTestRule();
    }
  }
,getProjectFilesystem(),options.getDefaultIncludes(),getParser(),getBuckEventBus(),console,environment,false);
  final ActionGraph graph=partialGraph.getActionGraph();
  Iterable<TestRule> testRules=Iterables.transform(partialGraph.getTargets(),new Function<BuildTarget,TestRule>(){
    @Override public TestRule apply(    BuildTarget buildTarget){
      BuildRule test=graph.findBuildRuleByTarget(buildTarget);
      if (test instanceof TestRule) {
        return (TestRule)test;
      }
      throw new RuntimeException("Unexpectedly asked to find a test rule, but could not: " + buildTarget);
    }
  }
);
  testRules=filterTestRules(options,testRules);
  if (options.isDryRun()) {
    printMatchingTestRules(console,testRules);
  }
  ArtifactCache artifactCache=getArtifactCache();
  try (Build build=options.createBuild(options.getBuckConfig(),graph,getProjectFilesystem(),getAndroidDirectoryResolver(),getBuildEngine(),artifactCache,console,getBuckEventBus(),options.getTargetDeviceOptional(),getCommandRunnerParams().getPlatform(),getCommandRunnerParams().getEnvironment(),getCommandRunnerParams().getObjectMapper(),getCommandRunnerParams().getClock())){
    int exitCode=BuildCommand.executeBuildAndPrintAnyFailuresToConsole(testRules,build,console);
    getBuckEventBus().post(BuildEvent.finished(emptyTargetsList,exitCode));
    if (exitCode != 0) {
      return exitCode;
    }
    return runTestsAndShutdownExecutor(testRules,build.getBuildContext(),build.getExecutionContext(),options);
  }
 }
