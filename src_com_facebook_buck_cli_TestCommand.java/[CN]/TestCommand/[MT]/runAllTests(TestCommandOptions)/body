{
  Logging.setLoggingLevelForVerbosity(console.getVerbosity());
  RawRulePredicate predicate=RawRulePredicates.isTestRule();
  PartialGraph partialGraph=PartialGraph.createPartialGraph(predicate,getProjectFilesystem(),options.getDefaultIncludes(),getParser(),getBuckEventBus());
  final DependencyGraph graph=partialGraph.getDependencyGraph();
  Iterable<TestRule> testRules=Iterables.transform(partialGraph.getTargets(),new Function<BuildTarget,TestRule>(){
    @Override public TestRule apply(    BuildTarget buildTarget){
      Buildable test=graph.findBuildRuleByTarget(buildTarget).getBuildable();
      if (test instanceof TestRule) {
        return (TestRule)test;
      }
      throw new RuntimeException("Unexpectedly asked to find a test rule, but could not: " + buildTarget);
    }
  }
);
  testRules=filterTestRules(options,testRules);
  if (options.isPrintMatchingTestRules()) {
    printMatchingTestRules(console,testRules);
    return 0;
  }
  ArtifactCache artifactCache=getArtifactCache();
  try (Build build=options.createBuild(options.getBuckConfig(),graph,getProjectFilesystem(),getAndroidDirectoryResolver(),getBuildEngine(),artifactCache,console,getBuckEventBus(),options.getTargetDeviceOptional(),getCommandRunnerParams().getPlatform())){
    int exitCode=BuildCommand.executeBuildAndPrintAnyFailuresToConsole(testRules,build,console);
    if (exitCode != 0) {
      return exitCode;
    }
    return runTestsAndShutdownExecutor(testRules,build.getBuildContext(),build.getExecutionContext(),options);
  }
 }
