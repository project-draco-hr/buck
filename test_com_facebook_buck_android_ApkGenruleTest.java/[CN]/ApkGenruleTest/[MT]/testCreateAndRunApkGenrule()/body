{
  Map<String,BuildRule> buildRuleIndex=Maps.newHashMap();
  createSampleAndroidBinaryRule(buildRuleIndex);
  Map<String,?> instance=new ImmutableMap.Builder<String,Object>().put("name","fb4a_signed").put("srcs",ImmutableList.<String>of("signer.py","key.properties")).put("cmd","python signer.py $APK key.properties > $OUT").put("apk",":fb4a").put("out","signed_fb4a.apk").put("deps",ImmutableList.<Object>of()).build();
  BuildTargetParser parser=EasyMock.createNiceMock(BuildTargetParser.class);
  EasyMock.expect(parser.parse(EasyMock.eq(":fb4a"),EasyMock.anyObject(ParseContext.class))).andStubReturn(BuildTargetFactory.newInstance("//:fb4a"));
  EasyMock.replay(parser);
  BuildTarget buildTarget=BuildTargetFactory.newInstance("//src/com/facebook","sign_fb4a");
  BuildRuleFactoryParams params=NonCheckingBuildRuleFactoryParams.createNonCheckingBuildRuleFactoryParams(instance,parser,buildTarget);
  ApkGenruleBuildRuleFactory factory=new ApkGenruleBuildRuleFactory();
  ApkGenrule.Builder builder=(ApkGenrule.Builder)factory.newInstance(params);
  builder.setRelativeToAbsolutePathFunction(relativeToAbsolutePathFunction);
  ApkGenrule apk_genrule=builder.build(buildRuleIndex);
  String expectedApkOutput="/opt/local/fbandroid/" + GEN_DIR + "/src/com/facebook/sign_fb4a.apk";
  assertEquals(BuildRuleType.APK_GENRULE,apk_genrule.getType());
  assertEquals(expectedApkOutput,apk_genrule.getOutputFilePath());
  BuildContext buildContext=BuildContext.builder().setProjectRoot(EasyMock.createNiceMock(File.class)).setDependencyGraph(EasyMock.createMock(DependencyGraph.class)).setCommandRunner(EasyMock.createNiceMock(StepRunner.class)).setProjectFilesystem(EasyMock.createNiceMock(ProjectFilesystem.class)).setArtifactCache(EasyMock.createMock(ArtifactCache.class)).setJavaPackageFinder(EasyMock.createNiceMock(JavaPackageFinder.class)).build();
  ImmutableSortedSet<String> inputsToCompareToOutputs=ImmutableSortedSet.of("src/com/facebook/key.properties","src/com/facebook/signer.py");
  assertEquals(inputsToCompareToOutputs,apk_genrule.getInputsToCompareToOutput(buildContext));
  List<Step> steps=apk_genrule.buildInternal(buildContext);
  assertEquals(7,steps.size());
  Step firstStep=steps.get(0);
  assertTrue(firstStep instanceof ShellStep);
  ShellStep rmCommand=(ShellStep)firstStep;
  ExecutionContext executionContext=null;
  assertEquals("First command should delete the output file to be written by the genrule.",ImmutableList.of("rm","-f",expectedApkOutput),rmCommand.getShellCommand(executionContext));
  Step secondStep=steps.get(1);
  assertTrue(secondStep instanceof MkdirStep);
  MkdirStep mkdirCommand=(MkdirStep)secondStep;
  assertEquals("Second command should make sure the output directory exists.",ImmutableList.of("mkdir","-p",GEN_DIR + "/src/com/facebook/"),mkdirCommand.getShellCommand(executionContext));
  Step thirdStep=steps.get(2);
  assertTrue(thirdStep instanceof MakeCleanDirectoryStep);
  MakeCleanDirectoryStep secondMkdirCommand=(MakeCleanDirectoryStep)thirdStep;
  String tempDirPath="/opt/local/fbandroid/" + GEN_DIR + "/src/com/facebook/sign_fb4a__tmp";
  assertEquals("Third command should make sure the temp directory exists.",tempDirPath,secondMkdirCommand.getPath());
  Step fourthStep=steps.get(3);
  assertTrue(fourthStep instanceof MakeCleanDirectoryStep);
  MakeCleanDirectoryStep thirdMkdirCommand=(MakeCleanDirectoryStep)fourthStep;
  String srcDirPath="/opt/local/fbandroid/" + GEN_DIR + "/src/com/facebook/sign_fb4a__srcs";
  assertEquals("Fourth command should make sure the temp directory exists.",srcDirPath,thirdMkdirCommand.getPath());
  MkdirAndSymlinkFileStep linkSource1=(MkdirAndSymlinkFileStep)steps.get(4);
  assertEquals("/opt/local/fbandroid/src/com/facebook/signer.py",linkSource1.getSource().getAbsolutePath());
  assertEquals(srcDirPath + "/signer.py",linkSource1.getTarget().getAbsolutePath());
  MkdirAndSymlinkFileStep linkSource2=(MkdirAndSymlinkFileStep)steps.get(5);
  assertEquals("/opt/local/fbandroid/src/com/facebook/key.properties",linkSource2.getSource().getAbsolutePath());
  assertEquals(srcDirPath + "/key.properties",linkSource2.getTarget().getAbsolutePath());
  Step seventhStep=steps.get(6);
  assertTrue(seventhStep instanceof ShellStep);
  ShellStep genruleCommand=(ShellStep)seventhStep;
  assertEquals("genrule: python signer.py $APK key.properties > $OUT",genruleCommand.getShortName(executionContext));
  assertEquals(new ImmutableMap.Builder<String,String>().put("SRCS","/opt/local/fbandroid/src/com/facebook/signer.py " + "/opt/local/fbandroid/src/com/facebook/key.properties").put("APK",GEN_DIR + "/fb4a.apk").put("DEPS","").put("TMP",tempDirPath).put("SRCDIR",srcDirPath).put("OUT",expectedApkOutput).build(),genruleCommand.getEnvironmentVariables());
  assertEquals(ImmutableList.of("/bin/bash","-c","python signer.py $APK key.properties > $OUT"),genruleCommand.getShellCommand(executionContext));
  EasyMock.verify(parser);
}
