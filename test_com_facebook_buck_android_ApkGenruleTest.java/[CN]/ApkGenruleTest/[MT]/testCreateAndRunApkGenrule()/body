{
  ProjectFilesystem projectFilesystem=FakeProjectFilesystem.createJavaOnlyFilesystem();
  FileSystem fileSystem=projectFilesystem.getRootPath().getFileSystem();
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  createSampleAndroidBinaryRule(ruleResolver,projectFilesystem);
  BuildTargetParser parser=EasyMock.createNiceMock(BuildTargetParser.class);
  final BuildTarget apkTarget=BuildTargetFactory.newInstance(projectFilesystem.getRootPath(),"//:fb4a");
  EasyMock.expect(parser.parse(EasyMock.eq(":fb4a"),EasyMock.anyObject(BuildTargetPatternParser.class),EasyMock.<CellPathResolver>anyObject())).andStubReturn(apkTarget);
  EasyMock.replay(parser);
  BuildTarget buildTarget=BuildTargetFactory.newInstance(projectFilesystem.getRootPath(),"//src/com/facebook:sign_fb4a");
  ApkGenruleDescription description=new ApkGenruleDescription();
  ApkGenruleDescription.Arg arg=description.createUnpopulatedConstructorArg();
  arg.apk=new FakeInstallable(apkTarget,new SourcePathResolver(ruleResolver)).getBuildTarget();
  arg.bash=Optional.of("");
  arg.cmd=Optional.of("python signer.py $APK key.properties > $OUT");
  arg.cmdExe=Optional.of("");
  arg.out="signed_fb4a.apk";
  arg.srcs=Optional.of(ImmutableList.<SourcePath>of(new PathSourcePath(projectFilesystem,fileSystem.getPath("src/com/facebook/signer.py")),new PathSourcePath(projectFilesystem,fileSystem.getPath("src/com/facebook/key.properties"))));
  arg.tests=Optional.of(ImmutableSortedSet.<BuildTarget>of());
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(buildTarget).setProjectFilesystem(projectFilesystem).build();
  ApkGenrule apkGenrule=(ApkGenrule)description.createBuildRule(TargetGraph.EMPTY,params,ruleResolver,arg);
  ruleResolver.addToIndex(apkGenrule);
  String expectedApkOutput=projectFilesystem.resolve(projectFilesystem.getBuckPaths().getGenDir().toString() + "/src/com/facebook/sign_fb4a/sign_fb4a.apk").toString();
  assertEquals(expectedApkOutput,apkGenrule.getAbsoluteOutputFilePath());
  assertEquals("The apk that this rule is modifying must have the apk in its deps.",ImmutableSet.of(apkTarget.toString()),FluentIterable.from(apkGenrule.getDeps()).transform(Functions.toStringFunction()).toSet());
  BuildContext buildContext=ImmutableBuildContext.builder().setActionGraph(EasyMock.createMock(ActionGraph.class)).setStepRunner(EasyMock.createNiceMock(StepRunner.class)).setClock(EasyMock.createMock(Clock.class)).setBuildId(EasyMock.createMock(BuildId.class)).setObjectMapper(ObjectMappers.newDefaultInstance()).setArtifactCache(EasyMock.createMock(ArtifactCache.class)).setJavaPackageFinder(EasyMock.createNiceMock(JavaPackageFinder.class)).setEventBus(BuckEventBusFactory.newInstance()).build();
  Iterable<Path> expectedInputsToCompareToOutputs=ImmutableList.of(fileSystem.getPath("src/com/facebook/signer.py"),fileSystem.getPath("src/com/facebook/key.properties"));
  MoreAsserts.assertIterablesEquals(expectedInputsToCompareToOutputs,apkGenrule.getSrcs());
  List<Step> steps=apkGenrule.getBuildSteps(buildContext,new FakeBuildableContext());
  assertEquals(7,steps.size());
  Step firstStep=steps.get(0);
  assertTrue(firstStep instanceof RmStep);
  RmStep rmCommand=(RmStep)firstStep;
  ExecutionContext executionContext=newEmptyExecutionContext();
  assertEquals("First command should delete the output file to be written by the genrule.",ImmutableList.of("rm","-r","-f",expectedApkOutput),rmCommand.getShellCommand());
  Step secondStep=steps.get(1);
  assertTrue(secondStep instanceof MkdirStep);
  MkdirStep mkdirCommand=(MkdirStep)secondStep;
  Path mkdirDir=projectFilesystem.resolve(projectFilesystem.getBuckPaths().getGenDir().resolve("src/com/facebook/sign_fb4a"));
  assertEquals("Second command should make sure the output directory exists.",mkdirDir,mkdirCommand.getPath());
  Step thirdStep=steps.get(2);
  assertTrue(thirdStep instanceof MakeCleanDirectoryStep);
  MakeCleanDirectoryStep secondMkdirCommand=(MakeCleanDirectoryStep)thirdStep;
  Path relativePathToTmpDir=projectFilesystem.getBuckPaths().getGenDir().resolve("src/com/facebook/sign_fb4a__tmp");
  assertEquals("Third command should make sure the temp directory exists.",relativePathToTmpDir,secondMkdirCommand.getPath());
  Step fourthStep=steps.get(3);
  assertTrue(fourthStep instanceof MakeCleanDirectoryStep);
  MakeCleanDirectoryStep thirdMkdirCommand=(MakeCleanDirectoryStep)fourthStep;
  Path relativePathToSrcDir=projectFilesystem.getBuckPaths().getGenDir().resolve("src/com/facebook/sign_fb4a__srcs");
  assertEquals("Fourth command should make sure the temp directory exists.",relativePathToSrcDir,thirdMkdirCommand.getPath());
  MkdirAndSymlinkFileStep linkSource1=(MkdirAndSymlinkFileStep)steps.get(4);
  assertEquals(fileSystem.getPath("src/com/facebook/signer.py"),linkSource1.getSource());
  assertEquals(fileSystem.getPath(relativePathToSrcDir + "/signer.py"),linkSource1.getTarget());
  MkdirAndSymlinkFileStep linkSource2=(MkdirAndSymlinkFileStep)steps.get(5);
  assertEquals(fileSystem.getPath("src/com/facebook/key.properties"),linkSource2.getSource());
  assertEquals(fileSystem.getPath(relativePathToSrcDir + "/key.properties"),linkSource2.getTarget());
  Step seventhStep=steps.get(6);
  assertTrue(seventhStep instanceof AbstractGenruleStep);
  AbstractGenruleStep genruleCommand=(AbstractGenruleStep)seventhStep;
  assertEquals("genrule",genruleCommand.getShortName());
  ImmutableMap<String,String> environmentVariables=genruleCommand.getEnvironmentVariables(executionContext);
  assertEquals(new ImmutableMap.Builder<String,String>().put("APK",projectFilesystem.resolve(BuildTargets.getGenPath(projectFilesystem,apkTarget,"%s.apk")).toString()).put("OUT",expectedApkOutput).build(),environmentVariables);
  Path scriptFilePath=genruleCommand.getScriptFilePath(executionContext);
  String scriptFileContents=genruleCommand.getScriptFileContents(executionContext);
  assertEquals(ImmutableList.of("/bin/bash","-e",scriptFilePath.toString()),genruleCommand.getShellCommand(executionContext));
  assertEquals("python signer.py $APK key.properties > $OUT",scriptFileContents);
  EasyMock.verify(parser);
}
