{
  final JUnit4Builder jUnit4RunnerBuilder=new JUnit4Builder(){
    @Override public Runner runnerForClass(    Class<?> testClass) throws Throwable {
      return new BuckBlockJUnit4ClassRunner(testClass,defaultTestTimeoutMillis);
    }
  }
;
  return new AllDefaultPossibilitiesBuilder(true){
    @Override protected JUnit4Builder junit4Builder(){
      return jUnit4RunnerBuilder;
    }
    @Override protected AnnotatedBuilder annotatedBuilder(){
      if (defaultTestTimeoutMillis <= 0 || !testSelectorList.isEmpty()) {
        return super.annotatedBuilder();
      }
      return new AnnotatedBuilder(this){
        @Override public Runner buildRunner(        Class<? extends Runner> runnerClass,        Class<?> testClass) throws Exception {
          Runner originalRunner=super.buildRunner(runnerClass,testClass);
          return new DelegateRunnerWithTimeout(originalRunner,defaultTestTimeoutMillis);
        }
      }
;
    }
  }
;
}
