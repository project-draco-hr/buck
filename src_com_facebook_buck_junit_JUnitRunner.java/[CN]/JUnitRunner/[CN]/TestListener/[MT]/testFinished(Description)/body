{
  resultListener.testFinished(description);
  resultListener.testRunFinished(result);
  resultListener=null;
  System.setOut(originalOut);
  System.setErr(originalErr);
  Logger rootLogger=LogManager.getLogManager().getLogger("");
  flushAndRemoveLogHandler(rootLogger,julLogHandler);
  julLogHandler=null;
  flushAndRemoveLogHandler(rootLogger,julErrLogHandler);
  julErrLogHandler=null;
  stdOutStream.flush();
  stdErrStream.flush();
  int numFailures=result.getFailureCount();
  String className=description.getClassName();
  String methodName=description.getMethodName();
  if (numFailures < 0) {
    throw new IllegalStateException(String.format("Unexpected number of failures while testing %s#%s(): %d (%s)",className,methodName,numFailures,result.getFailures()));
  }
  Failure failure;
  ResultType type;
  if (assumptionFailure != null) {
    failure=assumptionFailure;
    type=ResultType.ASSUMPTION_VIOLATION;
    assumptionFailure=null;
  }
 else   if (numFailures == 0) {
    failure=null;
    type=ResultType.SUCCESS;
  }
 else {
    failure=result.getFailures().get(0);
    type=ResultType.FAILURE;
  }
  StringBuilder stdOut=new StringBuilder();
  stdOut.append(rawStdOutBytes.toString(ENCODING));
  if (type == ResultType.FAILURE && julLogBytes.size() > 0) {
    stdOut.append('\n');
    stdOut.append(JUL_DEBUG_LOGS_HEADER);
    stdOut.append(julLogBytes.toString(ENCODING));
  }
  StringBuilder stdErr=new StringBuilder();
  stdErr.append(rawStdErrBytes.toString(ENCODING));
  if (type == ResultType.FAILURE && julErrLogBytes.size() > 0) {
    stdErr.append('\n');
    stdErr.append(JUL_ERROR_LOGS_HEADER);
    stdErr.append(julErrLogBytes.toString(ENCODING));
  }
  results.add(new TestResult(className,methodName,result.getRunTime(),type,failure == null ? null : failure.getException(),stdOut.length() == 0 ? null : stdOut.toString(),stdErr.length() == 0 ? null : stdErr.toString()));
}
