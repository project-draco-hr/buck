{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  BuildRuleParams flavoredParams=new FakeBuildRuleParamsBuilder(TARGET).build();
  BuildRule argDep=createFakeBuildRule("//:arg_dep",pathResolver);
  resolver.addToIndex(argDep);
  ThriftConstructorArg arg=new ThriftConstructorArg();
  arg.cppHeaderNamespace=Optional.absent();
  arg.cppExportedHeaders=Optional.absent();
  arg.cppSrcs=Optional.absent();
  arg.cpp2Options=Optional.absent();
  arg.cpp2Deps=Optional.of(ImmutableSortedSet.of(argDep.getBuildTarget()));
  ThriftCompiler thrift1=createFakeThriftCompiler("//:thrift_source1",pathResolver);
  resolver.addToIndex(thrift1);
  ThriftCompiler thrift2=createFakeThriftCompiler("//:thrift_source2",pathResolver);
  resolver.addToIndex(thrift2);
  ImmutableMap<String,ThriftSource> sources=ImmutableMap.of("test1.thrift",new ThriftSource(thrift1,ImmutableList.<String>of(),Paths.get("output1")),"test2.thrift",new ThriftSource(thrift2,ImmutableList.<String>of(),Paths.get("output2")));
  CxxLibrary dep=(CxxLibrary)new CxxLibraryBuilder(BuildTargetFactory.newInstance("//:dep")).build(resolver);
  ImmutableSortedSet<BuildRule> deps=ImmutableSortedSet.<BuildRule>of(dep);
  CxxLibrary rule=(CxxLibrary)ENHANCER_CPP2.createBuildRule(TargetGraph.EMPTY,flavoredParams,resolver,arg,sources,deps);
  assertThat(ImmutableList.copyOf(rule.getNativeLinkableExportedDeps(CXX_PLATFORM)),Matchers.<NativeLinkable>hasItem(dep));
}
