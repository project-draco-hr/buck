{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRuleParams flavoredParams=BuildRuleParamsFactory.createTrivialBuildRuleParams(TARGET);
  BuildRule argDep=createFakeBuildRule("//:arg_dep");
  resolver.addToIndex(argDep);
  ThriftConstructorArg arg=new ThriftConstructorArg();
  arg.cpp2Options=Optional.absent();
  arg.cpp2Deps=Optional.of(ImmutableSortedSet.of(argDep));
  ImmutableMap<String,ThriftSource> sources=ImmutableMap.of("test1.thrift",new ThriftSource(createFakeThriftCompiler("//:thrift_source1"),ImmutableList.<String>of(),Paths.get("output1")),"test2.thrift",new ThriftSource(createFakeThriftCompiler("//:thrift_source2"),ImmutableList.<String>of(),Paths.get("output2")));
  BuildRule dep=createFakeBuildRule("//:dep");
  resolver.addToIndex(dep);
  ImmutableSortedSet<BuildRule> deps=ImmutableSortedSet.<BuildRule>of(dep);
  ENHANCER_CPP2.createBuildRule(flavoredParams,resolver,arg,sources,deps);
}
