{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  BuildRuleParams flavoredParams=new FakeBuildRuleParamsBuilder(TARGET).build();
  final String cppHeaderNamespace="foo";
  final ImmutableSortedMap<String,SourcePath> cppHeaders=ImmutableSortedMap.<String,SourcePath>of("header.h",new FakeSourcePath("header.h"));
  final ImmutableSortedMap<String,SourceWithFlags> cppSrcs=ImmutableSortedMap.of("source.cpp",SourceWithFlags.of(new FakeSourcePath("source.cpp")));
  ThriftConstructorArg arg=new ThriftConstructorArg();
  arg.cppOptions=Optional.absent();
  arg.cppDeps=Optional.absent();
  arg.cppHeaderNamespace=Optional.of(cppHeaderNamespace);
  arg.cppExportedHeaders=Optional.of(SourceList.ofNamedSources(cppHeaders));
  arg.cppSrcs=Optional.of(SourceWithFlagsList.ofNamedSources(cppSrcs));
  ThriftCompiler thrift=createFakeThriftCompiler("//:thrift_source",pathResolver);
  resolver.addToIndex(thrift);
  ImmutableMap<String,ThriftSource> sources=ImmutableMap.of("test.thrift",new ThriftSource(thrift,ImmutableList.<String>of(),Paths.get("output")));
  CxxLibraryDescription cxxLibraryDescription=new CxxLibraryDescription(CXX_BUCK_CONFIG,new InferBuckConfig(BUCK_CONFIG),CXX_PLATFORMS,CxxPreprocessMode.SEPARATE){
    @Override public <A extends Arg>BuildRule createBuildRule(    TargetGraph targetGraph,    BuildRuleParams params,    BuildRuleResolver resolver,    A args){
      assertThat(args.headerNamespace,Matchers.equalTo(Optional.of(cppHeaderNamespace)));
      for (      Map.Entry<String,SourcePath> header : cppHeaders.entrySet()) {
        assertThat(args.exportedHeaders.get().getNamedSources().get().get(header.getKey()),Matchers.equalTo(header.getValue()));
      }
      for (      Map.Entry<String,SourceWithFlags> source : cppSrcs.entrySet()) {
        assertThat(args.srcs.get(),Matchers.hasItem(source.getValue()));
      }
      return super.createBuildRule(targetGraph,params,resolver,args);
    }
  }
;
  ThriftCxxEnhancer enhancer=new ThriftCxxEnhancer(THRIFT_BUCK_CONFIG,cxxLibraryDescription,false);
  enhancer.createBuildRule(TargetGraph.EMPTY,flavoredParams,resolver,arg,sources,ImmutableSortedSet.<BuildRule>of());
}
