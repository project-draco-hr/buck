{
  ProjectFilesystem projectFilesystem=new ProjectFilesystem(tmpDir.getRoot());
  ChromeTraceBuildListener listener=new ChromeTraceBuildListener(projectFilesystem,42);
  BuildTarget target=BuildTargetFactory.newInstance("//fake:rule");
  FakeBuildRule rule=new FakeBuildRule(new BuildRuleType("fakeRule"),target,ImmutableSortedSet.<BuildRule>of(),ImmutableSet.<BuildTargetPattern>of());
  RuleKey ruleKey=new RuleKey("abc123");
  rule.setRuleKey(ruleKey);
  FakeStep step=new FakeStep("fakeStep","I'm a Fake Step!",0);
  ExecutionContext context=createMock(ExecutionContext.class);
  replay(context);
  ImmutableList<BuildTarget> buildTargets=ImmutableList.of(target);
  Clock fakeClock=new IncrementingFakeClock(TimeUnit.MILLISECONDS.toNanos(1));
  BuckEventBus eventBus=BuckEventBusFactory.newInstance(fakeClock,"ChromeTraceBuildListenerTestBuildId");
  Supplier<Long> threadIdSupplier=BuckEventBusFactory.getThreadIdSupplierFor(eventBus);
  EventBus rawEventBus=BuckEventBusFactory.getEventBusFor(eventBus);
  eventBus.register(listener);
  eventBus.post(CommandEvent.started("party",ImmutableList.of("arg1","arg2"),true));
  eventBus.post(ArtifactCacheConnectEvent.started());
  eventBus.post(ArtifactCacheConnectEvent.finished());
  eventBus.post(BuildEvent.started(buildTargets));
  eventBus.post(ArtifactCacheEvent.started(ArtifactCacheEvent.Operation.FETCH,ruleKey));
  eventBus.post(ArtifactCacheEvent.finished(ArtifactCacheEvent.Operation.FETCH,ruleKey,CacheResult.CASSANDRA_HIT));
  eventBus.post(BuildRuleEvent.started(rule));
  eventBus.post(StepEvent.started(step,"I'm a Fake Step!"));
  BuckEvent stepFinished=StepEvent.finished(step,"I'm a Fake Step!",0);
  stepFinished.configure(fakeClock.currentTimeMillis(),fakeClock.nanoTime(),threadIdSupplier.get(),eventBus.getBuildId());
  BuckEvent ruleFinished=BuildRuleEvent.finished(rule,BuildRuleStatus.SUCCESS,CacheResult.MISS,Optional.of(BuildRuleSuccess.Type.BUILT_LOCALLY));
  ruleFinished.configure(fakeClock.currentTimeMillis(),fakeClock.nanoTime(),threadIdSupplier.get(),eventBus.getBuildId());
  rawEventBus.post(ruleFinished);
  rawEventBus.post(stepFinished);
  try (TraceEventLogger ignored=TraceEventLogger.start(eventBus,"planning",ImmutableMap.of("nefarious","true"))){
    eventBus.post(new TraceEvent("scheming",ChromeTraceEvent.Phase.BEGIN));
    eventBus.post(new TraceEvent("scheming",ChromeTraceEvent.Phase.END,ImmutableMap.<String,String>of("success","false")));
  }
   eventBus.post(BuildEvent.finished(buildTargets,0));
  eventBus.post(CommandEvent.finished("party",ImmutableList.of("arg1","arg2"),true,0));
  listener.outputTrace("BUILD_ID");
  File resultFile=new File(tmpDir.getRoot(),BuckConstant.BUCK_TRACE_DIR + "/build.trace");
  ObjectMapper mapper=new ObjectMapper();
  List<ChromeTraceEvent> resultMap=mapper.readValue(resultFile,new TypeReference<List<ChromeTraceEvent>>(){
  }
);
  assertEquals(16,resultMap.size());
  assertEquals("party",resultMap.get(0).getName());
  assertEquals(ChromeTraceEvent.Phase.BEGIN,resultMap.get(0).getPhase());
  assertEquals(ImmutableMap.of("command_args","arg1 arg2"),resultMap.get(0).getArgs());
  assertEquals("artifact_connect",resultMap.get(1).getName());
  assertEquals(ChromeTraceEvent.Phase.BEGIN,resultMap.get(1).getPhase());
  assertEquals("artifact_connect",resultMap.get(2).getName());
  assertEquals(ChromeTraceEvent.Phase.END,resultMap.get(2).getPhase());
  assertEquals("build",resultMap.get(3).getName());
  assertEquals(ChromeTraceEvent.Phase.BEGIN,resultMap.get(3).getPhase());
  assertEquals("artifact_fetch",resultMap.get(4).getName());
  assertEquals(ChromeTraceEvent.Phase.BEGIN,resultMap.get(4).getPhase());
  assertEquals("artifact_fetch",resultMap.get(5).getName());
  assertEquals(ChromeTraceEvent.Phase.END,resultMap.get(5).getPhase());
  assertEquals("//fake:rule",resultMap.get(6).getName());
  assertEquals(ChromeTraceEvent.Phase.BEGIN,resultMap.get(6).getPhase());
  assertEquals(ImmutableMap.of("rule_key","abc123"),resultMap.get(6).getArgs());
  assertEquals("fakeStep",resultMap.get(7).getName());
  assertEquals(ChromeTraceEvent.Phase.BEGIN,resultMap.get(7).getPhase());
  assertEquals("fakeStep",resultMap.get(8).getName());
  assertEquals(ImmutableMap.of("description","I'm a Fake Step!","exit_code","0"),resultMap.get(8).getArgs());
  assertEquals(ChromeTraceEvent.Phase.END,resultMap.get(8).getPhase());
  assertEquals("//fake:rule",resultMap.get(9).getName());
  assertEquals(ChromeTraceEvent.Phase.END,resultMap.get(9).getPhase());
  assertEquals(ImmutableMap.of("cache_result","miss","success_type","BUILT_LOCALLY"),resultMap.get(9).getArgs());
  assertEquals("planning",resultMap.get(10).getName());
  assertEquals(ChromeTraceEvent.Phase.BEGIN,resultMap.get(10).getPhase());
  assertEquals(ImmutableMap.of("nefarious","true"),resultMap.get(10).getArgs());
  assertEquals("scheming",resultMap.get(11).getName());
  assertEquals(ChromeTraceEvent.Phase.BEGIN,resultMap.get(11).getPhase());
  assertEquals(ImmutableMap.of(),resultMap.get(11).getArgs());
  assertEquals("scheming",resultMap.get(12).getName());
  assertEquals(ChromeTraceEvent.Phase.END,resultMap.get(12).getPhase());
  assertEquals(ImmutableMap.of("success","false"),resultMap.get(12).getArgs());
  assertEquals("planning",resultMap.get(13).getName());
  assertEquals(ChromeTraceEvent.Phase.END,resultMap.get(13).getPhase());
  assertEquals(ImmutableMap.of(),resultMap.get(13).getArgs());
  assertEquals("build",resultMap.get(14).getName());
  assertEquals(ChromeTraceEvent.Phase.END,resultMap.get(14).getPhase());
  assertEquals("party",resultMap.get(15).getName());
  assertEquals(ChromeTraceEvent.Phase.END,resultMap.get(15).getPhase());
  assertEquals(ImmutableMap.of("command_args","arg1 arg2","daemon","true"),resultMap.get(15).getArgs());
  verify(context);
}
