{
  ProjectFilesystem projectFilesystem=new ProjectFilesystem(tmpDir.getRoot().toPath());
  ObjectMapper mapper=new ObjectMapper();
  BuildId buildId=new BuildId("ChromeTraceBuildListenerTestBuildId");
  ChromeTraceBuildListener listener=new ChromeTraceBuildListener(projectFilesystem,buildId,new FakeClock(1409702151000000000L),mapper,Locale.US,TimeZone.getTimeZone("America/Los_Angeles"),42,false);
  BuildTarget target=BuildTargetFactory.newInstance("//fake:rule");
  FakeBuildRule rule=new FakeBuildRule(target,new SourcePathResolver(new BuildRuleResolver()),ImmutableSortedSet.<BuildRule>of());
  RuleKey ruleKey=new RuleKey("abc123");
  String stepShortName="fakeStep";
  String stepDescription="I'm a Fake Step!";
  UUID stepUuid=UUID.randomUUID();
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new FakeRuleKeyBuilderFactory(ImmutableMap.of(target,ruleKey));
  ExecutionContext context=createMock(ExecutionContext.class);
  replay(context);
  ImmutableSet<BuildTarget> buildTargets=ImmutableSet.of(target);
  Iterable<String> buildArgs=Iterables.transform(buildTargets,Functions.toStringFunction());
  Clock fakeClock=new IncrementingFakeClock(TimeUnit.MILLISECONDS.toNanos(1));
  BuckEventBus eventBus=BuckEventBusFactory.newInstance(fakeClock,buildId);
  eventBus.register(listener);
  CommandEvent.Started commandEventStarted=CommandEvent.started("party",ImmutableList.of("arg1","arg2"),true);
  eventBus.post(commandEventStarted);
  ArtifactCacheConnectEvent.Started artifactCacheConnectEventStarted=ArtifactCacheConnectEvent.started();
  eventBus.post(artifactCacheConnectEventStarted);
  eventBus.post(ArtifactCacheConnectEvent.finished(artifactCacheConnectEventStarted));
  BuildEvent.Started buildEventStarted=BuildEvent.started(buildArgs);
  eventBus.post(buildEventStarted);
  HttpArtifactCacheEvent.Started artifactCacheEventStarted=HttpArtifactCacheEvent.newFetchStartedEvent(ImmutableSet.of(ruleKey));
  eventBus.post(artifactCacheEventStarted);
  eventBus.post(HttpArtifactCacheEvent.newFinishedEventBuilder(artifactCacheEventStarted).setFetchResult(CacheResult.hit("http")).build());
  ArtifactCompressionEvent.Started artifactCompressionStartedEvent=ArtifactCompressionEvent.started(ArtifactCompressionEvent.Operation.COMPRESS,ImmutableSet.of(ruleKey));
  eventBus.post(artifactCompressionStartedEvent);
  eventBus.post(ArtifactCompressionEvent.finished(artifactCompressionStartedEvent));
  eventBus.post(BuildRuleEvent.started(rule,ruleKeyBuilderFactory));
  eventBus.post(StepEvent.started(stepShortName,stepDescription,stepUuid));
  JavacPhaseEvent.Started runProcessorsStartedEvent=JavacPhaseEvent.started(target,JavacPhaseEvent.Phase.RUN_ANNOTATION_PROCESSORS,ImmutableMap.<String,String>of());
  eventBus.post(runProcessorsStartedEvent);
  String annotationProcessorName="com.facebook.FakeProcessor";
  AnnotationProcessingEvent.Operation operation=AnnotationProcessingEvent.Operation.PROCESS;
  int annotationRound=1;
  boolean isLastRound=false;
  AnnotationProcessingEvent.Started annotationProcessingEventStarted=AnnotationProcessingEvent.started(target,annotationProcessorName,operation,annotationRound,isLastRound);
  eventBus.post(annotationProcessingEventStarted);
  HttpArtifactCacheEvent.Scheduled httpScheduled=HttpArtifactCacheEvent.newStoreScheduledEvent(Optional.of("TARGET_ONE"),ImmutableSet.of(ruleKey));
  HttpArtifactCacheEvent.Started httpStarted=HttpArtifactCacheEvent.newStoreStartedEvent(httpScheduled);
  eventBus.post(httpStarted);
  HttpArtifactCacheEvent.Finished httpFinished=HttpArtifactCacheEvent.newFinishedEventBuilder(httpStarted).build();
  eventBus.post(httpFinished);
  final CompilerPluginDurationEvent.Started processingPartOneStarted=CompilerPluginDurationEvent.started(target,annotationProcessorName,"processingPartOne",ImmutableMap.<String,String>of());
  eventBus.post(processingPartOneStarted);
  eventBus.post(CompilerPluginDurationEvent.finished(processingPartOneStarted,ImmutableMap.<String,String>of()));
  eventBus.post(AnnotationProcessingEvent.finished(annotationProcessingEventStarted));
  eventBus.post(JavacPhaseEvent.finished(runProcessorsStartedEvent,ImmutableMap.<String,String>of()));
  eventBus.post(StepEvent.finished(StepEvent.started(stepShortName,stepDescription,stepUuid),0));
  eventBus.post(BuildRuleEvent.finished(rule,ruleKeyBuilderFactory,BuildRuleStatus.SUCCESS,CacheResult.miss(),Optional.of(BuildRuleSuccessType.BUILT_LOCALLY),Optional.<HashCode>absent(),Optional.<Long>absent()));
  try (TraceEventLogger ignored=TraceEventLogger.start(eventBus,"planning",ImmutableMap.of("nefarious","true"))){
    eventBus.post(new TraceEvent("scheming",ChromeTraceEvent.Phase.BEGIN));
    eventBus.post(new TraceEvent("scheming",ChromeTraceEvent.Phase.END,ImmutableMap.of("success","false")));
  }
   eventBus.post(BuildEvent.finished(buildEventStarted,0));
  eventBus.post(CommandEvent.finished(commandEventStarted,0));
  listener.outputTrace(new BuildId("BUILD_ID"));
  File resultFile=new File(tmpDir.getRoot(),BuckConstant.BUCK_TRACE_DIR + "/build.trace");
  List<ChromeTraceEvent> originalResultList=mapper.readValue(resultFile,new TypeReference<List<ChromeTraceEvent>>(){
  }
);
  List<ChromeTraceEvent> resultListCopy=new ArrayList<>();
  resultListCopy.addAll(originalResultList);
  ImmutableMap<String,String> emptyArgs=ImmutableMap.of();
  assertNextResult(resultListCopy,"process_name",ChromeTraceEvent.Phase.METADATA,ImmutableMap.of("name","buck"));
  assertNextResult(resultListCopy,"party",ChromeTraceEvent.Phase.BEGIN,ImmutableMap.of("command_args","arg1 arg2"));
  assertNextResult(resultListCopy,"artifact_connect",ChromeTraceEvent.Phase.BEGIN,emptyArgs);
  assertNextResult(resultListCopy,"artifact_connect",ChromeTraceEvent.Phase.END,emptyArgs);
  assertNextResult(resultListCopy,"build",ChromeTraceEvent.Phase.BEGIN,emptyArgs);
  assertNextResult(resultListCopy,"http_artifact_fetch",ChromeTraceEvent.Phase.BEGIN,ImmutableMap.of("rule_key","abc123"));
  assertNextResult(resultListCopy,"http_artifact_fetch",ChromeTraceEvent.Phase.END,ImmutableMap.of("rule_key","abc123","success","true","cache_result","HTTP_HIT"));
  assertNextResult(resultListCopy,"artifact_compress",ChromeTraceEvent.Phase.BEGIN,ImmutableMap.of("rule_key","abc123"));
  assertNextResult(resultListCopy,"artifact_compress",ChromeTraceEvent.Phase.END,ImmutableMap.of("rule_key","abc123"));
  assertNextResult(resultListCopy,"//fake:rule",ChromeTraceEvent.Phase.BEGIN,ImmutableMap.of("rule_key","abc123"));
  assertNextResult(resultListCopy,"fakeStep",ChromeTraceEvent.Phase.BEGIN,emptyArgs);
  assertNextResult(resultListCopy,"run annotation processors",ChromeTraceEvent.Phase.BEGIN,emptyArgs);
  assertNextResult(resultListCopy,"com.facebook.FakeProcessor.process",ChromeTraceEvent.Phase.BEGIN,emptyArgs);
  assertNextResult(resultListCopy,"http_artifact_store",ChromeTraceEvent.Phase.BEGIN,ImmutableMap.of("rule_key","abc123"));
  assertNextResult(resultListCopy,"http_artifact_store",ChromeTraceEvent.Phase.END,ImmutableMap.of("success","true","rule_key","abc123"));
  assertNextResult(resultListCopy,"processingPartOne",ChromeTraceEvent.Phase.BEGIN,emptyArgs);
  assertNextResult(resultListCopy,"processingPartOne",ChromeTraceEvent.Phase.END,emptyArgs);
  assertNextResult(resultListCopy,"com.facebook.FakeProcessor.process",ChromeTraceEvent.Phase.END,emptyArgs);
  assertNextResult(resultListCopy,"run annotation processors",ChromeTraceEvent.Phase.END,emptyArgs);
  assertNextResult(resultListCopy,"fakeStep",ChromeTraceEvent.Phase.END,ImmutableMap.of("description","I'm a Fake Step!","exit_code","0"));
  assertNextResult(resultListCopy,"//fake:rule",ChromeTraceEvent.Phase.END,ImmutableMap.of("cache_result","miss","success_type","BUILT_LOCALLY"));
  assertNextResult(resultListCopy,"planning",ChromeTraceEvent.Phase.BEGIN,ImmutableMap.of("nefarious","true"));
  assertNextResult(resultListCopy,"scheming",ChromeTraceEvent.Phase.BEGIN,emptyArgs);
  assertNextResult(resultListCopy,"scheming",ChromeTraceEvent.Phase.END,ImmutableMap.of("success","false"));
  assertNextResult(resultListCopy,"planning",ChromeTraceEvent.Phase.END,emptyArgs);
  assertNextResult(resultListCopy,"build",ChromeTraceEvent.Phase.END,emptyArgs);
  assertNextResult(resultListCopy,"party",ChromeTraceEvent.Phase.END,ImmutableMap.of("command_args","arg1 arg2","daemon","true"));
  assertEquals(0,resultListCopy.size());
  verify(context);
}
