{
  ProjectFilesystem projectFilesystem=new ProjectFilesystem(tmpDir.getRoot().toPath());
  String tracePath=invocationInfo.getLogDirectoryPath().resolve("build.trace").toString();
  File traceFile=new File(tracePath);
  projectFilesystem.createParentDirs(tracePath);
  traceFile.createNewFile();
  traceFile.setLastModified(0);
  for (int i=0; i < 10; ++i) {
    File oldResult=new File(String.format("%s/build.100%d.trace",invocationInfo.getLogDirectoryPath(),i));
    oldResult.createNewFile();
    oldResult.setLastModified(TimeUnit.SECONDS.toMillis(i));
  }
  ChromeTraceBuildListener listener=new ChromeTraceBuildListener(projectFilesystem,invocationInfo,new FakeClock(TIMESTAMP_NANOS),ObjectMappers.newDefaultInstance(),Locale.US,TimeZone.getTimeZone("America/Los_Angeles"),3,false);
  listener.outputTrace(invocationInfo.getBuildId());
  ImmutableList<String> files=FluentIterable.from(Arrays.asList(projectFilesystem.listFiles(invocationInfo.getLogDirectoryPath()))).filter(new Predicate<File>(){
    @Override public boolean apply(    File input){
      return input.toString().endsWith(".trace");
    }
  }
).transform(new Function<File,String>(){
    @Override public String apply(    File input){
      return input.getName();
    }
  }
).toList();
  assertEquals(4,files.size());
  assertEquals(ImmutableSortedSet.of("build.trace","build.1009.trace","build.1008.trace","build.2014-09-02.16-55-51.BUILD_ID.trace"),ImmutableSortedSet.copyOf(files));
}
