{
  ImmutableList.Builder<String> args=ImmutableList.builder();
  args.add("java");
  if (!context.isJacocoEnabled()) {
    args.add("-Xmx1024M");
    args.add("-classpath",JUnitStep.PATH_TO_EMMA_JAR.toString());
    args.add("emma","report");
    args.add(String.format("-D%s=%s",REPORT_OUTPUT_DIR,outputDirectory));
    for (    String reportFormat : CODE_COVERAGE_OUTPUT_FORMAT) {
      args.add("-report",reportFormat);
    }
    args.add("-input",String.format("%s/coverage.ec,%s/coverage.em",JUnitStep.EMMA_OUTPUT_DIR,JUnitStep.EMMA_OUTPUT_DIR));
    String sourcepathArg=Joiner.on(",").join(srcDirectories);
    args.add("-sourcepath").add(sourcepathArg);
  }
 else {
    args.add("-classpath",String.format("%s/*:%s/../report-generator-build/",JUnitStep.PATH_TO_JACOCO_JARS,JUnitStep.PATH_TO_JACOCO_JARS));
    args.add(String.format("-Djacoco.output.dir=%s",outputDirectory));
    args.add(String.format("-Djacoco.exec.data.file=%s",JUnitStep.JACOCO_EXEC_COVERAGE_FILE));
    args.add(String.format("-Dclasses.dir=%s",Joiner.on(":").join(Iterables.transform(classesDirectories,context.getProjectFilesystem().getAbsolutifier()))));
    args.add(String.format("-Dsrc.dir=%s","src"));
    args.add("ReportGenerator");
  }
  return args.build();
}
