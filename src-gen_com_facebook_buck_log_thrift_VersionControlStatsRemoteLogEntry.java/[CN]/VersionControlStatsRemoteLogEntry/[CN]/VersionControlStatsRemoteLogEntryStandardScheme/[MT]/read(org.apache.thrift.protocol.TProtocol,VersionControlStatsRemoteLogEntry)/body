{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.currentRevisionId=iprot.readString();
        struct.setCurrentRevisionIdIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list0=iprot.readListBegin();
      struct.baseBookmarks=new ArrayList<String>(_list0.size);
      String _elem1;
      for (int _i2=0; _i2 < _list0.size; ++_i2) {
        _elem1=iprot.readString();
        struct.baseBookmarks.add(_elem1);
      }
      iprot.readListEnd();
    }
    struct.setBaseBookmarksIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
  org.apache.thrift.protocol.TList _list3=iprot.readListBegin();
  struct.pathsChanged=new ArrayList<String>(_list3.size);
  String _elem4;
  for (int _i5=0; _i5 < _list3.size; ++_i5) {
    _elem4=iprot.readString();
    struct.pathsChanged.add(_elem4);
  }
  iprot.readListEnd();
}
struct.setPathsChangedIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
struct.pathsChangedSampled=iprot.readBool();
struct.setPathsChangedSampledIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.unsampledPathsChangedCount=iprot.readI32();
struct.setUnsampledPathsChangedCountIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
