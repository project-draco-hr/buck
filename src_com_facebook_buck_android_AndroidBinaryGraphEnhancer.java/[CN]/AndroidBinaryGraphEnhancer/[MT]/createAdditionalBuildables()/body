{
  ImmutableSortedSet.Builder<BuildRule> enhancedDeps=ImmutableSortedSet.naturalOrder();
  enhancedDeps.addAll(originalDeps);
  AndroidPackageableCollector collector=new AndroidPackageableCollector(originalBuildTarget,buildTargetsToExcludeFromDex,resourcesToExclude);
  collector.addPackageables(AndroidPackageableCollector.getPackageableRules(originalDeps));
  AndroidPackageableCollection packageableCollection=collector.build();
  AndroidPackageableCollection.ResourceDetails resourceDetails=packageableCollection.getResourceDetails();
  ImmutableSortedSet<BuildRule> resourceRules=getTargetsAsRules(resourceDetails.getResourcesWithNonEmptyResDir());
  FilteredResourcesProvider filteredResourcesProvider;
  boolean needsResourceFiltering=resourceFilter.isEnabled() || resourceCompressionMode.isStoreStringsAsAssets() || !locales.isEmpty();
  if (needsResourceFiltering) {
    BuildRuleParams paramsForResourcesFilter=buildRuleParams.copyWithChanges(createBuildTargetWithFlavor(RESOURCES_FILTER_FLAVOR),Suppliers.ofInstance(resourceRules),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
    ResourcesFilter resourcesFilter=new ResourcesFilter(paramsForResourcesFilter,pathResolver,resourceDetails.getResourceDirectories(),ImmutableSet.copyOf(resourceDetails.getWhitelistedStringDirectories()),locales,resourceCompressionMode,resourceFilter);
    ruleResolver.addToIndex(resourcesFilter);
    filteredResourcesProvider=resourcesFilter;
    enhancedDeps.add(resourcesFilter);
    resourceRules=ImmutableSortedSet.<BuildRule>of(resourcesFilter);
  }
 else {
    filteredResourcesProvider=new IdentityResourcesProvider(resourceDetails.getResourceDirectories());
  }
  BuildTarget buildTargetForAapt=createBuildTargetWithFlavor(AAPT_PACKAGE_FLAVOR);
  BuildRuleParams paramsForAaptPackageResources=buildRuleParams.copyWithChanges(buildTargetForAapt,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(getTargetsAsRules(resourceDetails.getResourcesWithNonEmptyResDir())).addAll(getAdditionalAaptDeps(pathResolver,resourceRules,packageableCollection)).build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  AaptPackageResources aaptPackageResources=new AaptPackageResources(paramsForAaptPackageResources,pathResolver,manifest,filteredResourcesProvider,getTargetsAsResourceDeps(resourceDetails.getResourcesWithNonEmptyResDir()),packageableCollection.getAssetsDirectories(),packageType,javacOptions,shouldPreDex,shouldBuildStringSourceMap,locales.isEmpty(),skipCrunchPngs);
  ruleResolver.addToIndex(aaptPackageResources);
  enhancedDeps.add(aaptPackageResources);
  Optional<PackageStringAssets> packageStringAssets=Optional.absent();
  if (resourceCompressionMode.isStoreStringsAsAssets()) {
    BuildTarget buildTargetForPackageStringAssets=createBuildTargetWithFlavor(PACKAGE_STRING_ASSETS_FLAVOR);
    BuildRuleParams paramsForPackageStringAssets=buildRuleParams.copyWithChanges(buildTargetForPackageStringAssets,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().add(aaptPackageResources).addAll(Iterables.filter(ImmutableList.of(filteredResourcesProvider),BuildRule.class)).build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
    packageStringAssets=Optional.of(new PackageStringAssets(paramsForPackageStringAssets,pathResolver,locales,filteredResourcesProvider,aaptPackageResources));
    ruleResolver.addToIndex(packageStringAssets.get());
    enhancedDeps.add(packageStringAssets.get());
  }
  if (packageableCollection.getResourceDetails().hasResources()) {
    collector.addClasspathEntry(aaptPackageResources,new BuildTargetSourcePath(aaptPackageResources.getProjectFilesystem(),aaptPackageResources.getBuildTarget(),aaptPackageResources.getPathToCompiledRDotJavaFiles()));
  }
  ImmutableList<DexProducedFromJavaLibrary> preDexBuildConfigs;
  ImmutableList<Path> buildConfigJarFiles;
  if (packageType == PackageType.INSTRUMENTED) {
    preDexBuildConfigs=ImmutableList.of();
    buildConfigJarFiles=ImmutableList.of();
  }
 else {
    ImmutableList.Builder<DexProducedFromJavaLibrary> preDexBuildConfigsBuilder=ImmutableList.builder();
    ImmutableList.Builder<Path> buildConfigJarFilesBuilder=ImmutableList.builder();
    addBuildConfigDeps(shouldPreDex,packageableCollection,enhancedDeps,preDexBuildConfigsBuilder,buildConfigJarFilesBuilder);
    preDexBuildConfigs=preDexBuildConfigsBuilder.build();
    buildConfigJarFiles=buildConfigJarFilesBuilder.build();
  }
  packageableCollection=collector.build();
  Optional<PreDexMerge> preDexMerge=Optional.absent();
  if (shouldPreDex) {
    preDexMerge=Optional.of(createPreDexMergeRule(aaptPackageResources,preDexBuildConfigs,packageableCollection));
    enhancedDeps.add(preDexMerge.get());
  }
 else {
    enhancedDeps.addAll(getTargetsAsRules(packageableCollection.getJavaLibrariesToDex()));
  }
  enhancedDeps.addAll(pathResolver.filterBuildRuleInputs(packageableCollection.getPathsToThirdPartyJars()));
  ImmutableMap.Builder<Pair<TargetCpuType,String>,SourcePath> nativeLinkableLibsBuilder=ImmutableMap.builder();
  ImmutableSet<TargetCpuType> filters=cpuFilters.isEmpty() ? nativePlatforms.keySet() : cpuFilters;
  for (  TargetCpuType targetCpuType : filters) {
    NdkCxxPlatform platform=Preconditions.checkNotNull(nativePlatforms.get(targetCpuType));
    boolean hasNativeLibs=false;
    for (    JavaNativeLinkable nativeLinkable : packageableCollection.getNativeLinkables()) {
      ImmutableMap<String,SourcePath> solibs=nativeLinkable.getSharedLibraries(platform.getCxxPlatform());
      for (      Map.Entry<String,SourcePath> entry : solibs.entrySet()) {
        nativeLinkableLibsBuilder.put(new Pair<>(targetCpuType,entry.getKey()),entry.getValue());
        hasNativeLibs=true;
      }
    }
    NdkCxxPlatforms.CxxRuntime cxxRuntime=platform.getCxxRuntime();
    if (hasNativeLibs && !cxxRuntime.equals(NdkCxxPlatforms.CxxRuntime.SYSTEM)) {
      nativeLinkableLibsBuilder.put(new Pair<>(targetCpuType,cxxRuntime.getSoname()),new PathSourcePath(buildRuleParams.getProjectFilesystem(),platform.getCxxSharedRuntimePath()));
    }
  }
  ImmutableMap<Pair<TargetCpuType,String>,SourcePath> nativeLinkableLibs=nativeLinkableLibsBuilder.build();
  Optional<CopyNativeLibraries> copyNativeLibraries=Optional.absent();
  if (!packageableCollection.getNativeLibsDirectories().isEmpty() || !nativeLinkableLibs.isEmpty()) {
    BuildRuleParams paramsForCopyNativeLibraries=buildRuleParams.copyWithChanges(createBuildTargetWithFlavor(COPY_NATIVE_LIBS_FLAVOR),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(getTargetsAsRules(packageableCollection.getNativeLibsTargets())).addAll(pathResolver.filterBuildRuleInputs(nativeLinkableLibs.values())).build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
    copyNativeLibraries=Optional.of(new CopyNativeLibraries(paramsForCopyNativeLibraries,pathResolver,packageableCollection.getNativeLibsDirectories(),cpuFilters,nativePlatforms,nativeLinkableLibs));
    ruleResolver.addToIndex(copyNativeLibraries.get());
    enhancedDeps.add(copyNativeLibraries.get());
  }
  Optional<ComputeExopackageDepsAbi> computeExopackageDepsAbi=Optional.absent();
  if (!exopackageModes.isEmpty()) {
    BuildRuleParams paramsForComputeExopackageAbi=buildRuleParams.copyWithChanges(createBuildTargetWithFlavor(CALCULATE_ABI_FLAVOR),Suppliers.ofInstance(enhancedDeps.build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
    computeExopackageDepsAbi=Optional.of(new ComputeExopackageDepsAbi(paramsForComputeExopackageAbi,pathResolver,exopackageModes,packageableCollection,aaptPackageResources,copyNativeLibraries,packageStringAssets,preDexMerge,keystore));
    ruleResolver.addToIndex(computeExopackageDepsAbi.get());
    enhancedDeps.add(computeExopackageDepsAbi.get());
  }
  return AndroidGraphEnhancementResult.builder().setPackageableCollection(packageableCollection).setAaptPackageResources(aaptPackageResources).setCopyNativeLibraries(copyNativeLibraries).setPackageStringAssets(packageStringAssets).setPreDexMerge(preDexMerge).setComputeExopackageDepsAbi(computeExopackageDepsAbi).setClasspathEntriesToDex(ImmutableSet.<Path>builder().addAll(pathResolver.getAllPaths(packageableCollection.getClasspathEntriesToDex())).addAll(buildConfigJarFiles).build()).setFinalDeps(enhancedDeps.build()).build();
}
