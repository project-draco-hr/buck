{
  ImmutableSortedSet.Builder<BuildRule> enhancedDeps=ImmutableSortedSet.naturalOrder();
  enhancedDeps.addAll(originalDeps);
  AndroidPackageableCollector collector=new AndroidPackageableCollector(originalBuildTarget,buildTargetsToExcludeFromDex,resourcesToExclude);
  collector.addPackageables(AndroidPackageableCollector.getPackageableRules(originalDeps));
  AndroidPackageableCollection packageableCollection=collector.build();
  AndroidPackageableCollection.ResourceDetails resourceDetails=packageableCollection.getResourceDetails();
  ImmutableSortedSet<BuildRule> resourceRules=getTargetsAsRules(resourceDetails.getResourcesWithNonEmptyResDir());
  ImmutableCollection<BuildRule> rulesWithResourceDirectories=pathResolver.filterBuildRuleInputs(resourceDetails.getResourceDirectories());
  FilteredResourcesProvider filteredResourcesProvider;
  boolean needsResourceFiltering=resourceFilter.isEnabled() || resourceCompressionMode.isStoreStringsAsAssets() || !locales.isEmpty();
  if (needsResourceFiltering) {
    BuildRuleParams paramsForResourcesFilter=buildRuleParams.copyWithChanges(createBuildTargetWithFlavor(RESOURCES_FILTER_FLAVOR),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(resourceRules).addAll(rulesWithResourceDirectories).build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
    ResourcesFilter resourcesFilter=new ResourcesFilter(paramsForResourcesFilter,pathResolver,resourceDetails.getResourceDirectories(),ImmutableSet.copyOf(resourceDetails.getWhitelistedStringDirectories()),locales,resourceCompressionMode,resourceFilter);
    ruleResolver.addToIndex(resourcesFilter);
    filteredResourcesProvider=resourcesFilter;
    enhancedDeps.add(resourcesFilter);
    resourceRules=ImmutableSortedSet.<BuildRule>of(resourcesFilter);
  }
 else {
    filteredResourcesProvider=new IdentityResourcesProvider(pathResolver.deprecatedAllPaths(resourceDetails.getResourceDirectories()));
  }
  BuildTarget buildTargetForAapt=createBuildTargetWithFlavor(AAPT_PACKAGE_FLAVOR);
  BuildRuleParams paramsForAaptPackageResources=buildRuleParams.copyWithChanges(buildTargetForAapt,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(getTargetsAsRules(resourceDetails.getResourcesWithNonEmptyResDir())).addAll(rulesWithResourceDirectories).addAll(pathResolver.filterBuildRuleInputs(packageableCollection.getAssetsDirectories())).addAll(getAdditionalAaptDeps(pathResolver,resourceRules,packageableCollection)).build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  AaptPackageResources aaptPackageResources=new AaptPackageResources(paramsForAaptPackageResources,pathResolver,manifest,filteredResourcesProvider,getTargetsAsResourceDeps(resourceDetails.getResourcesWithNonEmptyResDir()),packageableCollection.getAssetsDirectories(),resourceUnionPackage,packageType,javacOptions,shouldPreDex,shouldBuildStringSourceMap,skipCrunchPngs,manifestEntries);
  ruleResolver.addToIndex(aaptPackageResources);
  enhancedDeps.add(aaptPackageResources);
  Optional<PackageStringAssets> packageStringAssets=Optional.absent();
  if (resourceCompressionMode.isStoreStringsAsAssets()) {
    BuildTarget buildTargetForPackageStringAssets=createBuildTargetWithFlavor(PACKAGE_STRING_ASSETS_FLAVOR);
    BuildRuleParams paramsForPackageStringAssets=buildRuleParams.copyWithChanges(buildTargetForPackageStringAssets,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().add(aaptPackageResources).addAll(resourceRules).addAll(rulesWithResourceDirectories).addAll(Iterables.filter(ImmutableList.of(filteredResourcesProvider),BuildRule.class)).build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
    packageStringAssets=Optional.of(new PackageStringAssets(paramsForPackageStringAssets,pathResolver,locales,filteredResourcesProvider,aaptPackageResources));
    ruleResolver.addToIndex(packageStringAssets.get());
    enhancedDeps.add(packageStringAssets.get());
  }
  if (packageableCollection.getResourceDetails().hasResources()) {
    collector.addClasspathEntry(aaptPackageResources,new BuildTargetSourcePath(aaptPackageResources.getBuildTarget(),aaptPackageResources.getPathToCompiledRDotJavaFiles()));
  }
  ImmutableList<DexProducedFromJavaLibrary> preDexBuildConfigs;
  ImmutableList<SourcePath> buildConfigJarFiles;
  if (packageType == PackageType.INSTRUMENTED) {
    preDexBuildConfigs=ImmutableList.of();
    buildConfigJarFiles=ImmutableList.of();
  }
 else {
    ImmutableList.Builder<DexProducedFromJavaLibrary> preDexBuildConfigsBuilder=ImmutableList.builder();
    ImmutableList.Builder<SourcePath> buildConfigJarFilesBuilder=ImmutableList.builder();
    addBuildConfigDeps(shouldPreDex,packageableCollection,enhancedDeps,preDexBuildConfigsBuilder,buildConfigJarFilesBuilder);
    preDexBuildConfigs=preDexBuildConfigsBuilder.build();
    buildConfigJarFiles=buildConfigJarFilesBuilder.build();
  }
  BuildRuleParams paramsForTrimUberRDotJava=buildRuleParams.copyWithChanges(createBuildTargetWithFlavor(TRIM_UBER_R_DOT_JAVA_FLAVOR),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(aaptPackageResources)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  TrimUberRDotJava trimUberRDotJava=new TrimUberRDotJava(paramsForTrimUberRDotJava,pathResolver,aaptPackageResources);
  ruleResolver.addToIndex(trimUberRDotJava);
  BuildTarget compileUberRDotJavaTarget=createBuildTargetWithFlavor(COMPILE_UBER_R_DOT_JAVA_FLAVOR);
  BuildRuleParams paramsForCompileUberRDotJava=buildRuleParams.copyWithChanges(compileUberRDotJavaTarget,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(trimUberRDotJava)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  JavaLibrary compileUberRDotJava=new DefaultJavaLibrary(paramsForCompileUberRDotJava,pathResolver,ImmutableSet.of(new BuildTargetSourcePath(trimUberRDotJava.getBuildTarget(),trimUberRDotJava.getPathToOutput())),ImmutableSet.<SourcePath>of(),javacOptions.getGeneratedSourceFolderName(),Optional.<SourcePath>absent(),ImmutableList.<String>of(),ImmutableSortedSet.<BuildRule>of(),ImmutableSortedSet.<BuildRule>of(),new BuildTargetSourcePath(compileUberRDotJavaTarget),false,ImmutableSet.<Path>of(),new JavacToJarStepFactory(javacOptions,JavacOptionsAmender.IDENTITY),Optional.<Path>absent(),Optional.<String>absent(),ImmutableSortedSet.<BuildTarget>of());
  ruleResolver.addToIndex(compileUberRDotJava);
  BuildRuleParams paramsForDexUberRDotJava=buildRuleParams.copyWithChanges(createBuildTargetWithFlavor(DEX_UBER_R_DOT_JAVA_FLAVOR),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(compileUberRDotJava)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  DexProducedFromJavaLibrary dexUberRDotJava=new DexProducedFromJavaLibrary(paramsForDexUberRDotJava,pathResolver,compileUberRDotJava);
  ruleResolver.addToIndex(dexUberRDotJava);
  packageableCollection=collector.build();
  Optional<PreDexMerge> preDexMerge=Optional.absent();
  if (shouldPreDex) {
    preDexMerge=Optional.of(createPreDexMergeRule(aaptPackageResources,preDexBuildConfigs,packageableCollection));
    enhancedDeps.add(preDexMerge.get());
  }
 else {
    enhancedDeps.addAll(getTargetsAsRules(packageableCollection.getJavaLibrariesToDex()));
  }
  enhancedDeps.addAll(pathResolver.filterBuildRuleInputs(packageableCollection.getPathsToThirdPartyJars()));
  Optional<CopyNativeLibraries> copyNativeLibraries=nativeLibsEnhancer.getCopyNativeLibraries(packageableCollection);
  if (copyNativeLibraries.isPresent()) {
    ruleResolver.addToIndex(copyNativeLibraries.get());
    enhancedDeps.add(copyNativeLibraries.get());
  }
  Optional<ComputeExopackageDepsAbi> computeExopackageDepsAbi=Optional.absent();
  if (!exopackageModes.isEmpty()) {
    BuildRuleParams paramsForComputeExopackageAbi=buildRuleParams.copyWithChanges(createBuildTargetWithFlavor(CALCULATE_ABI_FLAVOR),Suppliers.ofInstance(enhancedDeps.build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
    computeExopackageDepsAbi=Optional.of(new ComputeExopackageDepsAbi(paramsForComputeExopackageAbi,pathResolver,exopackageModes,packageableCollection,aaptPackageResources,copyNativeLibraries,packageStringAssets,preDexMerge,keystore));
    ruleResolver.addToIndex(computeExopackageDepsAbi.get());
    enhancedDeps.add(computeExopackageDepsAbi.get());
  }
  return AndroidGraphEnhancementResult.builder().setPackageableCollection(packageableCollection).setAaptPackageResources(aaptPackageResources).setCompiledUberRDotJava(compileUberRDotJava).setCopyNativeLibraries(copyNativeLibraries).setPackageStringAssets(packageStringAssets).setPreDexMerge(preDexMerge).setComputeExopackageDepsAbi(computeExopackageDepsAbi).setClasspathEntriesToDex(ImmutableSet.<SourcePath>builder().addAll(packageableCollection.getClasspathEntriesToDex()).addAll(buildConfigJarFiles).build()).setFinalDeps(enhancedDeps.build()).build();
}
