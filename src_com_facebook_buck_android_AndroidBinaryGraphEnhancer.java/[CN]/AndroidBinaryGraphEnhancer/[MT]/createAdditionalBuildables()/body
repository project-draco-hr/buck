{
  ImmutableSortedSet.Builder<BuildRule> enhancedDeps=ImmutableSortedSet.naturalOrder();
  enhancedDeps.addAll(originalDeps);
  ImmutableSortedSet<BuildRule> resourceRules=getAndroidResourcesAsRules();
  BuildTarget buildTargetForFilterResources=createBuildTargetWithFlavor(RESOURCES_FILTER_FLAVOR);
  FilteredResourcesProvider filteredResourcesProvider;
  boolean needsResourceFiltering=resourceFilter.isEnabled() || resourceCompressionMode.isStoreStringsAsAssets();
  if (needsResourceFiltering) {
    ResourcesFilter resourcesFilter=new ResourcesFilter(buildTargetForFilterResources,androidResourceDepsFinder,resourceCompressionMode,resourceFilter);
    BuildRule resourcesFilterBuildRule=buildRuleAndAddToIndex(resourcesFilter,BuildRuleType.RESOURCES_FILTER,buildTargetForFilterResources,resourceRules);
    filteredResourcesProvider=resourcesFilter;
    enhancedDeps.add(resourcesFilterBuildRule);
    resourceRules=ImmutableSortedSet.<BuildRule>naturalOrder().addAll(resourceRules).add(resourcesFilterBuildRule).build();
  }
 else {
    filteredResourcesProvider=new IdentityResourcesProvider(androidResourceDepsFinder);
  }
  BuildTarget buildTargetForUberRDotJava=createBuildTargetWithFlavor(UBER_R_DOT_JAVA_FLAVOR);
  UberRDotJava uberRDotJava=new UberRDotJava(buildTargetForUberRDotJava,filteredResourcesProvider,javacOptions,androidResourceDepsFinder,shouldPreDex,shouldBuildStringSourceMap);
  BuildRule uberRDotJavaBuildRule=buildRuleAndAddToIndex(uberRDotJava,BuildRuleType.UBER_R_DOT_JAVA,buildTargetForUberRDotJava,resourceRules);
  enhancedDeps.add(uberRDotJavaBuildRule);
  BuildTarget buildTargetForAapt=createBuildTargetWithFlavor(AAPT_PACKAGE_FLAVOR);
  AaptPackageResources aaptPackageResources=new AaptPackageResources(buildTargetForAapt,manifest,filteredResourcesProvider,uberRDotJava,androidResourceDepsFinder.getAndroidTransitiveDependencies(),packageType,cpuFilters);
  BuildRule aaptPackageResourcesBuildRule=buildRuleAndAddToIndex(aaptPackageResources,BuildRuleType.AAPT_PACKAGE,buildTargetForAapt,getAdditionalAaptDeps(uberRDotJavaBuildRule));
  enhancedDeps.add(aaptPackageResourcesBuildRule);
  Optional<PreDexMerge> preDexMerge=Optional.absent();
  if (shouldPreDex) {
    BuildRule preDexMergeRule=createPreDexMergeRule(uberRDotJava);
    preDexMerge=Optional.of((PreDexMerge)preDexMergeRule.getBuildable());
    enhancedDeps.add(preDexMergeRule);
  }
  ImmutableSortedSet<BuildRule> finalDeps;
  Optional<ComputeExopackageDepsAbi> computeExopackageDepsAbi=Optional.absent();
  if (exopackage) {
    BuildTarget buildTargetForAbiCalculation=createBuildTargetWithFlavor(CALCULATE_ABI_FLAVOR);
    computeExopackageDepsAbi=Optional.of(new ComputeExopackageDepsAbi(buildTargetForAbiCalculation,androidResourceDepsFinder,uberRDotJava,aaptPackageResources,preDexMerge,keystore));
    BuildRule computeExopackageDepsAbiRule=buildRuleAndAddToIndex(computeExopackageDepsAbi.get(),BuildRuleType.EXOPACKAGE_DEPS_ABI,buildTargetForAbiCalculation,enhancedDeps.build());
    finalDeps=ImmutableSortedSet.of(computeExopackageDepsAbiRule);
  }
 else {
    finalDeps=enhancedDeps.build();
  }
  return new EnhancementResult(filteredResourcesProvider,uberRDotJava,aaptPackageResources,preDexMerge,computeExopackageDepsAbi,finalDeps);
}
