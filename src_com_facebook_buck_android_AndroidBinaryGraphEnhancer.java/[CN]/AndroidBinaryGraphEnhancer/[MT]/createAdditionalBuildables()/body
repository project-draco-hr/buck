{
  ImmutableSortedSet.Builder<BuildRule> enhancedDeps=ImmutableSortedSet.naturalOrder();
  enhancedDeps.addAll(originalDeps);
  BuildTarget buildTargetForFilterResources=createBuildTargetWithFlavor(RESOURCES_FILTER_FLAVOR);
  FilteredResourcesProvider filteredResourcesProvider;
  boolean needsResourceFiltering=resourceFilter.isEnabled() || resourceCompressionMode.isStoreStringsAsAssets();
  if (needsResourceFiltering) {
    BuildRule resourcesFilterBuildRule=ruleResolver.buildAndAddToIndex(ResourcesFilter.newResourcesFilterBuilder(buildRuleBuilderParams).setBuildTarget(buildTargetForFilterResources).setResourceCompressionMode(resourceCompressionMode).setResourceFilter(resourceFilter).setAndroidResourceDepsFinder(androidResourceDepsFinder));
    filteredResourcesProvider=(ResourcesFilter)resourcesFilterBuildRule.getBuildable();
    enhancedDeps.add(resourcesFilterBuildRule);
  }
 else {
    filteredResourcesProvider=new IdentityResourcesProvider(androidResourceDepsFinder);
  }
  BuildTarget buildTargetForUberRDotJava=createBuildTargetWithFlavor(UBER_R_DOT_JAVA_FLAVOR);
  UberRDotJava.Builder uberRDotJavaBuilder=UberRDotJava.newUberRDotJavaBuilder(buildRuleBuilderParams).setBuildTarget(buildTargetForUberRDotJava).setFilteredResourcesProvider(filteredResourcesProvider).setAndroidResourceDepsFinder(androidResourceDepsFinder).setJavacOptions(javacOptions).setRDotJavaNeedsDexing(shouldPreDex).setBuildStringSourceMap(shouldBuildStringSourceMap);
  if (needsResourceFiltering) {
    uberRDotJavaBuilder.addDep(buildTargetForFilterResources);
  }
  BuildRule uberRDotJavaBuildRule=ruleResolver.buildAndAddToIndex(uberRDotJavaBuilder);
  UberRDotJava uberRDotJava=(UberRDotJava)uberRDotJavaBuildRule.getBuildable();
  enhancedDeps.add(uberRDotJavaBuildRule);
  Optional<PackageStringAssets> packageStringAssets=Optional.absent();
  if (resourceCompressionMode.isStoreStringsAsAssets()) {
    BuildTarget buildTargetForPackageStringAssets=createBuildTargetWithFlavor(PACKAGE_STRING_ASSETS_FLAVOR);
    BuildRule packageStringAssetsRule=ruleResolver.buildAndAddToIndex(PackageStringAssets.newBuilder(buildRuleBuilderParams).setBuildTarget(buildTargetForPackageStringAssets).setFilteredResourcesProvider(filteredResourcesProvider).setUberRDotJava(uberRDotJava));
    packageStringAssets=Optional.of((PackageStringAssets)packageStringAssetsRule.getBuildable());
    enhancedDeps.add(packageStringAssetsRule);
  }
  BuildTarget buildTargetForAapt=createBuildTargetWithFlavor(AAPT_PACKAGE_FLAVOR);
  AaptPackageResources.Builder aaptPackageResourcesBuilder=AaptPackageResources.newAaptPackageResourcesBuildableBuilder(buildRuleBuilderParams).setBuildTarget(buildTargetForAapt).setAllParams(manifest,filteredResourcesProvider,androidResourceDepsFinder,packageType,cpuFilters);
  if (needsResourceFiltering) {
    aaptPackageResourcesBuilder.addDep(buildTargetForFilterResources);
  }
  BuildRule aaptPackageResourcesBuildRule=ruleResolver.buildAndAddToIndex(aaptPackageResourcesBuilder);
  AaptPackageResources aaptPackageResources=(AaptPackageResources)aaptPackageResourcesBuildRule.getBuildable();
  enhancedDeps.add(aaptPackageResourcesBuildRule);
  Optional<PreDexMerge> preDexMerge=Optional.absent();
  if (shouldPreDex) {
    BuildRule preDexMergeRule=createPreDexMergeRule(uberRDotJava);
    preDexMerge=Optional.of((PreDexMerge)preDexMergeRule.getBuildable());
    enhancedDeps.add(preDexMergeRule);
  }
  ImmutableSortedSet<BuildRule> finalDeps;
  Optional<ComputeExopackageDepsAbi> computeExopackageDepsAbi=Optional.absent();
  if (exopackage) {
    BuildTarget buildTargetForAbiCalculation=createBuildTargetWithFlavor(CALCULATE_ABI_FLAVOR);
    BuildRule computeExopackageDepsAbiRule=ruleResolver.buildAndAddToIndex(ComputeExopackageDepsAbi.newBuildableBuilder(buildRuleBuilderParams,buildTargetForAbiCalculation,enhancedDeps.build(),androidResourceDepsFinder,uberRDotJava,aaptPackageResources,packageStringAssets,preDexMerge,keystore));
    computeExopackageDepsAbi=Optional.of((ComputeExopackageDepsAbi)computeExopackageDepsAbiRule.getBuildable());
    finalDeps=ImmutableSortedSet.of(computeExopackageDepsAbiRule);
  }
 else {
    finalDeps=enhancedDeps.build();
  }
  return new EnhancementResult(filteredResourcesProvider,uberRDotJava,aaptPackageResources,packageStringAssets,preDexMerge,computeExopackageDepsAbi,finalDeps);
}
