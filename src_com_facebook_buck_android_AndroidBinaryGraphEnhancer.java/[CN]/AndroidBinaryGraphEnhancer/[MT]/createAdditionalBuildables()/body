{
  ImmutableSortedSet.Builder<BuildRule> enhancedDeps=ImmutableSortedSet.naturalOrder();
  enhancedDeps.addAll(originalDeps);
  AndroidPackageableCollector collector=new AndroidPackageableCollector(originalBuildTarget,buildTargetsToExcludeFromDex,resourcesToExclude);
  collector.addPackageables(AndroidPackageableCollector.getPackageableRules(originalDeps));
  AndroidPackageableCollection packageableCollection=collector.build();
  ResourceDetails resourceDetails=packageableCollection.resourceDetails;
  ImmutableSortedSet<BuildRule> resourceRules=getTargetsAsRules(resourceDetails.resourcesWithNonEmptyResDir);
  FilteredResourcesProvider filteredResourcesProvider;
  boolean needsResourceFiltering=resourceFilter.isEnabled() || resourceCompressionMode.isStoreStringsAsAssets();
  if (needsResourceFiltering) {
    BuildRuleParams paramsForResourcesFilter=buildRuleParams.copyWithChanges(BuildRuleType.RESOURCES_FILTER,createBuildTargetWithFlavor(RESOURCES_FILTER_FLAVOR),resourceRules,ImmutableSortedSet.<BuildRule>of());
    ResourcesFilter resourcesFilter=new ResourcesFilter(paramsForResourcesFilter,resourceDetails.resourceDirectories,resourceDetails.whitelistedStringDirectories,resourceCompressionMode,resourceFilter);
    ruleResolver.addToIndex(resourcesFilter);
    filteredResourcesProvider=resourcesFilter;
    enhancedDeps.add(resourcesFilter);
    resourceRules=ImmutableSortedSet.<BuildRule>of(resourcesFilter);
  }
 else {
    filteredResourcesProvider=new IdentityResourcesProvider(resourceDetails.resourceDirectories);
  }
  BuildRuleParams paramsForUberRDotJava=buildRuleParams.copyWithChanges(BuildRuleType.UBER_R_DOT_JAVA,createBuildTargetWithFlavor(UBER_R_DOT_JAVA_FLAVOR),resourceRules,ImmutableSortedSet.<BuildRule>of());
  UberRDotJava uberRDotJava=new UberRDotJava(paramsForUberRDotJava,filteredResourcesProvider,getTargetsAsResourceDeps(resourceDetails.resourcesWithNonEmptyResDir),resourceDetails.rDotJavaPackagesSupplier,javacOptions,shouldPreDex,shouldBuildStringSourceMap);
  ruleResolver.addToIndex(uberRDotJava);
  enhancedDeps.add(uberRDotJava);
  if (packageableCollection.resourceDetails.hasRDotJavaPackages) {
    collector.addClasspathEntry(uberRDotJava,uberRDotJava.getPathToCompiledRDotJavaFiles());
  }
  ImmutableList<DexProducedFromJavaLibrary> preDexBuildConfigs;
  ImmutableList<Path> buildConfigJarFiles;
  if (packageType == PackageType.INSTRUMENTED) {
    preDexBuildConfigs=ImmutableList.of();
    buildConfigJarFiles=ImmutableList.of();
  }
 else {
    ImmutableList.Builder<DexProducedFromJavaLibrary> preDexBuildConfigsBuilder=ImmutableList.builder();
    ImmutableList.Builder<Path> buildConfigJarFilesBuilder=ImmutableList.builder();
    addBuildConfigDeps(shouldPreDex,packageableCollection,enhancedDeps,preDexBuildConfigsBuilder,buildConfigJarFilesBuilder);
    preDexBuildConfigs=preDexBuildConfigsBuilder.build();
    buildConfigJarFiles=buildConfigJarFilesBuilder.build();
  }
  packageableCollection=collector.build();
  Optional<PackageStringAssets> packageStringAssets=Optional.absent();
  if (resourceCompressionMode.isStoreStringsAsAssets()) {
    BuildRuleParams paramsForPackageStringAssets=buildRuleParams.copyWithChanges(BuildRuleType.PACKAGE_STRING_ASSETS,createBuildTargetWithFlavor(PACKAGE_STRING_ASSETS_FLAVOR),ImmutableSortedSet.<BuildRule>of(uberRDotJava),ImmutableSortedSet.<BuildRule>of());
    packageStringAssets=Optional.of(new PackageStringAssets(paramsForPackageStringAssets,filteredResourcesProvider,uberRDotJava));
    ruleResolver.addToIndex(packageStringAssets.get());
    enhancedDeps.add(packageStringAssets.get());
  }
  BuildRuleParams paramsForAaptPackageResources=buildRuleParams.copyWithChanges(BuildRuleType.AAPT_PACKAGE,createBuildTargetWithFlavor(AAPT_PACKAGE_FLAVOR),getAdditionalAaptDeps(resourceRules,packageableCollection),ImmutableSortedSet.<BuildRule>of());
  AaptPackageResources aaptPackageResources=new AaptPackageResources(paramsForAaptPackageResources,manifest,filteredResourcesProvider,packageableCollection.assetsDirectories,packageType,cpuFilters);
  ruleResolver.addToIndex(aaptPackageResources);
  enhancedDeps.add(aaptPackageResources);
  Optional<PreDexMerge> preDexMerge=Optional.absent();
  if (shouldPreDex) {
    preDexMerge=Optional.of(createPreDexMergeRule(uberRDotJava,preDexBuildConfigs,packageableCollection));
    enhancedDeps.add(preDexMerge.get());
  }
 else {
    enhancedDeps.addAll(getTargetsAsRules(packageableCollection.javaLibrariesToDex));
  }
  ImmutableSortedSet<BuildRule> finalDeps;
  Optional<ComputeExopackageDepsAbi> computeExopackageDepsAbi=Optional.absent();
  if (exopackage) {
    BuildRuleParams paramsForComputeExopackageAbi=buildRuleParams.copyWithChanges(BuildRuleType.EXOPACKAGE_DEPS_ABI,createBuildTargetWithFlavor(CALCULATE_ABI_FLAVOR),enhancedDeps.build(),ImmutableSortedSet.<BuildRule>of());
    computeExopackageDepsAbi=Optional.of(new ComputeExopackageDepsAbi(paramsForComputeExopackageAbi,packageableCollection,aaptPackageResources,packageStringAssets,preDexMerge,keystore));
    ruleResolver.addToIndex(computeExopackageDepsAbi.get());
    finalDeps=ImmutableSortedSet.<BuildRule>of(computeExopackageDepsAbi.get());
  }
 else {
    finalDeps=enhancedDeps.build();
  }
  return new EnhancementResult(filteredResourcesProvider,packageableCollection,aaptPackageResources,packageStringAssets,preDexMerge,computeExopackageDepsAbi,ImmutableSet.<Path>builder().addAll(packageableCollection.classpathEntriesToDex).addAll(buildConfigJarFiles).build(),finalDeps);
}
