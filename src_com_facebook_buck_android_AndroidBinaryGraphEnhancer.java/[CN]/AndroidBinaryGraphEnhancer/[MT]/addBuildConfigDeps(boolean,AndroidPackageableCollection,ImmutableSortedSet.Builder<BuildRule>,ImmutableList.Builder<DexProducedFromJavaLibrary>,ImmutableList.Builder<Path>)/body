{
  BuildConfigFields buildConfigConstants=BuildConfigFields.fromFields(ImmutableList.of(new BuildConfigFields.Field("boolean",BuildConfigs.DEBUG_CONSTANT,String.valueOf(packageType != AndroidBinary.PackageType.RELEASE)),new BuildConfigFields.Field("boolean",BuildConfigs.IS_EXO_CONSTANT,String.valueOf(!exopackageModes.isEmpty())),new BuildConfigFields.Field("int",BuildConfigs.EXOPACKAGE_FLAGS,String.valueOf(ExopackageMode.toBitmask(exopackageModes)))));
  for (  Map.Entry<String,BuildConfigFields> entry : packageableCollection.getBuildConfigs().entrySet()) {
    BuildConfigFields totalBuildConfigValues=BuildConfigFields.empty().putAll(entry.getValue()).putAll(buildConfigValues).putAll(buildConfigConstants);
    String javaPackage=entry.getKey();
    Flavor flavor=new Flavor("buildconfig_" + javaPackage.replace('.','_'));
    BuildRuleParams buildConfigParams=new BuildRuleParams(createBuildTargetWithFlavor(flavor),ImmutableSortedSet.<BuildRule>of(),ImmutableSortedSet.<BuildRule>of(),buildRuleParams.getProjectFilesystem(),buildRuleParams.getRuleKeyBuilderFactory(),AndroidBuildConfigDescription.TYPE,buildRuleParams.getTargetGraph());
    JavaLibrary buildConfigJavaLibrary=AndroidBuildConfigDescription.createBuildRule(buildConfigParams,javaPackage,totalBuildConfigValues,buildConfigValuesFile,true,javac,javacOptions,ruleResolver);
    ruleResolver.addToIndex(buildConfigJavaLibrary);
    enhancedDeps.add(buildConfigJavaLibrary);
    Path buildConfigJar=buildConfigJavaLibrary.getPathToOutputFile();
    Preconditions.checkNotNull(buildConfigJar,"%s must have an output file.",buildConfigJavaLibrary);
    buildConfigJarFilesBuilder.add(buildConfigJar);
    if (shouldPreDex) {
      DexProducedFromJavaLibrary buildConfigDex=new DexProducedFromJavaLibrary(buildConfigParams.copyWithChanges(BuildRuleType.PRE_DEX,createBuildTargetWithFlavor(new Flavor("dex_" + flavor.getName())),ImmutableSortedSet.<BuildRule>of(buildConfigJavaLibrary),ImmutableSortedSet.<BuildRule>of()),pathResolver,buildConfigJavaLibrary);
      ruleResolver.addToIndex(buildConfigDex);
      enhancedDeps.add(buildConfigDex);
      preDexRules.add(buildConfigDex);
    }
  }
}
