{
  Path manifestPath=pathResolver.getPath(manifest);
  AndroidManifestReader manifestReader=null;
  if (buildRuleParams.getProjectFilesystem().exists(manifestPath)) {
    try {
      manifestReader=DefaultAndroidManifestReader.forPath(manifestPath,buildRuleParams.getProjectFilesystem());
    }
 catch (    IOException e) {
      throw new HumanReadableException("In %s, unable to read Android Manifest from path: %s",originalBuildTarget,manifestPath);
    }
  }
  String packageName="null";
  String versionCode="0";
  String versionName="null";
  if (manifestReader != null) {
    String manifestPackageName=manifestReader.getPackage();
    if (!manifestPackageName.isEmpty()) {
      packageName=Escaper.escapeAsJavaString(manifestPackageName);
    }
    String manifestVersionCode=manifestReader.getVersionCode();
    if (!manifestVersionCode.isEmpty()) {
      versionCode=manifestVersionCode;
    }
    String manifestVersionName=manifestReader.getVersionName();
    if (!manifestVersionName.isEmpty()) {
      versionName=Escaper.escapeAsJavaString(manifestVersionName);
    }
  }
  BuildConfigFields buildConfigConstants=BuildConfigFields.fromFields(ImmutableList.<BuildConfigFields.Field>of(ImmutableBuildConfigFields.Field.of("boolean",BuildConfigs.DEBUG_CONSTANT,String.valueOf(packageType != AndroidBinary.PackageType.RELEASE)),ImmutableBuildConfigFields.Field.of("boolean",BuildConfigs.IS_EXO_CONSTANT,String.valueOf(!exopackageModes.isEmpty())),ImmutableBuildConfigFields.Field.of("int",BuildConfigs.EXOPACKAGE_FLAGS,String.valueOf(ExopackageMode.toBitmask(exopackageModes))),ImmutableBuildConfigFields.Field.of("String",BuildConfigs.PACKAGE_NAME,packageName),ImmutableBuildConfigFields.Field.of("int",BuildConfigs.VERSION_CODE,versionCode),ImmutableBuildConfigFields.Field.of("String",BuildConfigs.VERSION_NAME,versionName)));
  for (  Map.Entry<String,BuildConfigFields> entry : packageableCollection.getBuildConfigs().entrySet()) {
    BuildConfigFields totalBuildConfigValues=BuildConfigFields.empty().putAll(entry.getValue()).putAll(buildConfigValues).putAll(buildConfigConstants);
    String javaPackage=entry.getKey();
    Flavor flavor=ImmutableFlavor.of("buildconfig_" + javaPackage.replace('.','_'));
    BuildRuleParams buildConfigParams=new BuildRuleParams(createBuildTargetWithFlavor(flavor),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),buildRuleParams.getProjectFilesystem(),buildRuleParams.getRuleKeyBuilderFactory(),AndroidBuildConfigDescription.TYPE,buildRuleParams.getTargetGraph());
    JavaLibrary buildConfigJavaLibrary=AndroidBuildConfigDescription.createBuildRule(buildConfigParams,javaPackage,totalBuildConfigValues,buildConfigValuesFile,true,javacOptions,ruleResolver);
    ruleResolver.addToIndex(buildConfigJavaLibrary);
    enhancedDeps.add(buildConfigJavaLibrary);
    Path buildConfigJar=buildConfigJavaLibrary.getPathToOutputFile();
    Preconditions.checkNotNull(buildConfigJar,"%s must have an output file.",buildConfigJavaLibrary);
    buildConfigJarFilesBuilder.add(buildConfigJar);
    if (shouldPreDex) {
      DexProducedFromJavaLibrary buildConfigDex=new DexProducedFromJavaLibrary(buildConfigParams.copyWithChanges(BuildRuleType.PRE_DEX,createBuildTargetWithFlavor(ImmutableFlavor.of("dex_" + flavor.getName())),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(buildConfigJavaLibrary)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,buildConfigJavaLibrary);
      ruleResolver.addToIndex(buildConfigDex);
      enhancedDeps.add(buildConfigDex);
      preDexRules.add(buildConfigDex);
    }
  }
}
