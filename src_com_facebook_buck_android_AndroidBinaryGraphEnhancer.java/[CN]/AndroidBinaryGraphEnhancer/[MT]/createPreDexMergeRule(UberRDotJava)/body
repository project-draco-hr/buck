{
  ImmutableSet.Builder<IntermediateDexRule> preDexDeps=ImmutableSet.builder();
  ImmutableSet<JavaLibrary> transitiveJavaDeps=Classpaths.getClasspathEntries(originalDeps).keySet();
  for (  JavaLibrary javaLibrary : transitiveJavaDeps) {
    if (javaLibrary.getPathToOutputFile() == null) {
      continue;
    }
    if (buildRulesToExcludeFromDex.contains(javaLibrary.getBuildTarget())) {
      continue;
    }
    BuildTarget originalTarget=javaLibrary.getBuildTarget();
    BuildTarget preDexTarget=new BuildTarget(originalTarget.getBaseName(),originalTarget.getShortName(),DEX_FLAVOR);
    IntermediateDexRule preDexRule=(IntermediateDexRule)ruleResolver.get(preDexTarget);
    if (preDexRule != null) {
      preDexDeps.add(preDexRule);
      continue;
    }
    IntermediateDexRule preDex=ruleResolver.buildAndAddToIndex(IntermediateDexRule.newPreDexBuilder(buildRuleBuilderParams).setBuildTarget(preDexTarget).setJavaLibraryToDex(javaLibrary).addVisibilityPattern(BuildTargetPattern.MATCH_ALL));
    preDexDeps.add(preDex);
  }
  ImmutableSet<IntermediateDexRule> allPreDexDeps=preDexDeps.build();
  BuildTarget buildTargetForDexMerge=createBuildTargetWithFlavor(DEX_MERGE_FLAVOR);
  BuildRule preDexMergeBuildRule=ruleResolver.buildAndAddToIndex(PreDexMerge.newPreDexMergeBuilder(buildRuleBuilderParams).setBuildTarget(buildTargetForDexMerge).setPrimaryDexPath(primaryDexPath).setDexSplitMode(dexSplitMode).setPreDexDeps(allPreDexDeps).setUberRDotJava(uberRDotJava));
  return preDexMergeBuildRule;
}
