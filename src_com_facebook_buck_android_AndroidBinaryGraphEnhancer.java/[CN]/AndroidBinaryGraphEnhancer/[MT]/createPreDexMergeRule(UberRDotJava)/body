{
  ImmutableSet.Builder<DexProducedFromJavaLibrary> preDexDeps=ImmutableSet.builder();
  ImmutableSet<JavaLibrary> transitiveJavaDeps=Classpaths.getClasspathEntries(originalDeps).keySet();
  for (  JavaLibrary javaLibrary : transitiveJavaDeps) {
    if (javaLibrary.getPathToOutputFile() == null) {
      continue;
    }
    if (buildRulesToExcludeFromDex.contains(javaLibrary.getBuildTarget())) {
      continue;
    }
    BuildTarget originalTarget=javaLibrary.getBuildTarget();
    BuildTarget preDexTarget=new BuildTarget(originalTarget.getBaseName(),originalTarget.getShortName(),DEX_FLAVOR);
    BuildRule preDexRule=ruleResolver.get(preDexTarget);
    if (preDexRule != null) {
      preDexDeps.add((DexProducedFromJavaLibrary)preDexRule.getBuildable());
      continue;
    }
    DexProducedFromJavaLibrary preDex=new DexProducedFromJavaLibrary(preDexTarget,javaLibrary);
    buildRuleAndAddToIndex(preDex,BuildRuleType.PRE_DEX,preDexTarget,ImmutableSortedSet.of(ruleResolver.get(javaLibrary.getBuildTarget())));
    preDexDeps.add(preDex);
  }
  ImmutableSet<DexProducedFromJavaLibrary> allPreDexDeps=preDexDeps.build();
  BuildTarget buildTargetForDexMerge=createBuildTargetWithFlavor(DEX_MERGE_FLAVOR);
  PreDexMerge preDexMerge=new PreDexMerge(buildTargetForDexMerge,primaryDexPath,dexSplitMode,allPreDexDeps,uberRDotJava);
  BuildRule preDexMergeBuildRule=buildRuleAndAddToIndex(preDexMerge,BuildRuleType.DEX_MERGE,buildTargetForDexMerge,getDexMergeDeps(uberRDotJava,allPreDexDeps));
  return preDexMergeBuildRule;
}
