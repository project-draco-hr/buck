{
  ImmutableSet.Builder<DexProducedFromJavaLibrary> preDexDeps=ImmutableSet.builder();
  preDexDeps.addAll(preDexRulesNotInThePackageableCollection);
  for (  BuildTarget buildTarget : packageableCollection.javaLibrariesToDex) {
    Preconditions.checkState(!buildTargetsToExcludeFromDex.contains(buildTarget),"JavaLibrary should have been excluded from target to dex: %s",buildTarget);
    BuildRule libraryRule=ruleResolver.get(buildTarget);
    Preconditions.checkNotNull(libraryRule);
    if (libraryRule.equals(uberRDotJava)) {
      continue;
    }
    Preconditions.checkState(libraryRule instanceof JavaLibrary);
    JavaLibrary javaLibrary=(JavaLibrary)libraryRule;
    if (javaLibrary.getPathToOutputFile() == null) {
      continue;
    }
    BuildTarget originalTarget=javaLibrary.getBuildTarget();
    BuildTarget preDexTarget=BuildTarget.builder(originalTarget).addFlavor(DEX_FLAVOR).build();
    BuildRule preDexRule=ruleResolver.get(preDexTarget);
    if (preDexRule != null) {
      preDexDeps.add((DexProducedFromJavaLibrary)preDexRule);
      continue;
    }
    BuildRuleParams paramsForPreDex=buildRuleParams.copyWithChanges(BuildRuleType.PRE_DEX,preDexTarget,ImmutableSortedSet.of(ruleResolver.get(javaLibrary.getBuildTarget())),ImmutableSortedSet.<BuildRule>of());
    DexProducedFromJavaLibrary preDex=new DexProducedFromJavaLibrary(paramsForPreDex,javaLibrary);
    ruleResolver.addToIndex(preDex);
    preDexDeps.add(preDex);
  }
  ImmutableSet<DexProducedFromJavaLibrary> allPreDexDeps=preDexDeps.build();
  BuildRuleParams paramsForPreDexMerge=buildRuleParams.copyWithChanges(BuildRuleType.DEX_MERGE,createBuildTargetWithFlavor(DEX_MERGE_FLAVOR),getDexMergeDeps(uberRDotJava,allPreDexDeps),ImmutableSortedSet.<BuildRule>of());
  PreDexMerge preDexMerge=new PreDexMerge(paramsForPreDexMerge,primaryDexPath,dexSplitMode,allPreDexDeps,uberRDotJava);
  ruleResolver.addToIndex(preDexMerge);
  return preDexMerge;
}
