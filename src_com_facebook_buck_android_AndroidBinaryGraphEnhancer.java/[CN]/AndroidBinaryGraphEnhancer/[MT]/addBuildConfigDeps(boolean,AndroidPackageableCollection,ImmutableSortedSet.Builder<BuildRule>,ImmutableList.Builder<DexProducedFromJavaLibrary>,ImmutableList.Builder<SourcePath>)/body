{
  BuildConfigFields buildConfigConstants=BuildConfigFields.fromFields(ImmutableList.<BuildConfigFields.Field>of(BuildConfigFields.Field.of("boolean",BuildConfigs.DEBUG_CONSTANT,String.valueOf(packageType != AndroidBinary.PackageType.RELEASE)),BuildConfigFields.Field.of("boolean",BuildConfigs.IS_EXO_CONSTANT,String.valueOf(!exopackageModes.isEmpty())),BuildConfigFields.Field.of("int",BuildConfigs.EXOPACKAGE_FLAGS,String.valueOf(ExopackageMode.toBitmask(exopackageModes)))));
  for (  Map.Entry<String,BuildConfigFields> entry : packageableCollection.getBuildConfigs().entrySet()) {
    BuildConfigFields totalBuildConfigValues=BuildConfigFields.empty().putAll(entry.getValue()).putAll(buildConfigValues).putAll(buildConfigConstants);
    String javaPackage=entry.getKey();
    Flavor flavor=ImmutableFlavor.of("buildconfig_" + javaPackage.replace('.','_'));
    BuildRuleParams buildConfigParams=new BuildRuleParams(createBuildTargetWithFlavor(flavor),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),buildRuleParams.getProjectFilesystem(),buildRuleParams.getCellRoots());
    JavaLibrary buildConfigJavaLibrary=AndroidBuildConfigDescription.createBuildRule(buildConfigParams,javaPackage,totalBuildConfigValues,buildConfigValuesFile,true,javacOptions,ruleResolver);
    ruleResolver.addToIndex(buildConfigJavaLibrary);
    enhancedDeps.add(buildConfigJavaLibrary);
    Preconditions.checkNotNull(buildConfigJavaLibrary.getPathToOutput(),"%s must have an output file.",buildConfigJavaLibrary);
    buildConfigJarFilesBuilder.add(new BuildTargetSourcePath(buildConfigJavaLibrary.getBuildTarget()));
    if (shouldPreDex) {
      DexProducedFromJavaLibrary buildConfigDex=new DexProducedFromJavaLibrary(buildConfigParams.copyWithChanges(createBuildTargetWithFlavor(ImmutableFlavor.of("dex_" + flavor.getName())),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(buildConfigJavaLibrary)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,buildConfigJavaLibrary);
      ruleResolver.addToIndex(buildConfigDex);
      enhancedDeps.add(buildConfigDex);
      preDexRules.add(buildConfigDex);
    }
  }
}
