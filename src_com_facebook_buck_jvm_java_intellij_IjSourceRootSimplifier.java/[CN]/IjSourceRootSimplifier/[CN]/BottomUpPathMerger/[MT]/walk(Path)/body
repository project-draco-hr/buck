{
  ImmutableList<Optional<IjFolder>> children=FluentIterable.from(tree.getOutgoingNodesFor(currentPath)).transform(new Function<Path,Optional<IjFolder>>(){
    @Override public Optional<IjFolder> apply(    Path input){
      return walk(input);
    }
  }
).toList();
  List<IjFolder> presentChildren=new ArrayList<>(children.size());
  for (  Optional<IjFolder> folderOptional : children) {
    if (!folderOptional.isPresent()) {
      return Optional.absent();
    }
    IjFolder folder=folderOptional.get();
    if (folder instanceof ExcludeFolder) {
      continue;
    }
    presentChildren.add(folderOptional.get());
  }
  IjFolder currentFolder=mergePathsMap.get(currentPath);
  if (presentChildren.isEmpty()) {
    return Optional.fromNullable(currentFolder);
  }
  final IjFolder mergeDistination;
  if (currentFolder != null) {
    mergeDistination=currentFolder;
  }
 else {
    mergeDistination=findBestChildToAggregateTo(presentChildren).createCopyWith(currentPath);
  }
  boolean allChildrenCanBeMerged=FluentIterable.from(presentChildren).allMatch(new Predicate<IjFolder>(){
    @Override public boolean apply(    IjFolder input){
      return canMerge(mergeDistination,input,packagePathCache);
    }
  }
);
  if (!allChildrenCanBeMerged) {
    return Optional.absent();
  }
  return attemptMerge(mergeDistination,presentChildren);
}
