{
  BuildContext buildContext=EasyMock.createMock(BuildContext.class);
  FakeBuildableContext buildableContext=new FakeBuildableContext();
  List<Step> buildSteps=junitJarRule.getBuildSteps(buildContext,buildableContext);
  Step calculateAbiStep=buildSteps.get(0);
  assertTrue(calculateAbiStep instanceof PrebuiltJarRule.CalculateAbiStep);
  ExecutionContext executionContext=TestExecutionContext.newBuilder().build();
  int exitCode=calculateAbiStep.execute(executionContext);
  assertEquals("Step should execute successfully.",0,exitCode);
  buildableContext.assertContainsMetadataMapping(AbiRule.ABI_KEY_ON_DISK_METADATA,"4e031bb61df09069aeb2bffb4019e7a5034a4ee0");
  OnDiskBuildInfo onDiskBuildInfo=new FakeOnDiskBuildInfo().putMetadata(AbiRule.ABI_KEY_ON_DISK_METADATA,"4e031bb61df09069aeb2bffb4019e7a5034a4ee0").setFileContentsForPath(Paths.get("buck-out/gen/lib/junit.classes.txt"),ImmutableList.of("com/example/Bar 1b1221d71c29aacb8e0b5b9eaffcd05e914ac55b","com/example/Foo cea146e5aa5565a09e6a1ae9137044eb64b2cf45"));
  junitJarRule.doHydrationAfterBuildStepsFinish(onDiskBuildInfo);
  HashCode hashForJar=ByteStreams.hash(Files.newInputStreamSupplier(PATH_TO_JUNIT_JAR.toFile()),Hashing.sha1());
  assertEquals("ABI key should be the sha1 of the file contents.",hashForJar.toString(),junitJarRule.getAbiKey().toString());
  assertEquals("initializing from OnDiskBuildInfo should populate getClassNamesToHashes().",ImmutableSortedMap.<String,HashCode>of("com/example/Bar",HashCode.fromString("1b1221d71c29aacb8e0b5b9eaffcd05e914ac55b"),"com/example/Foo",HashCode.fromString("cea146e5aa5565a09e6a1ae9137044eb64b2cf45")),junitJarRule.getClassNamesToHashes());
  assertEquals("Executing the step should record the ABI key as metadata.",ImmutableMap.of(AbiRule.ABI_KEY_ON_DISK_METADATA,hashForJar.toString()),buildableContext.getRecordedMetadata());
}
