{
  RegisterSpecSet primaryState=resultInfo.mutableCopyOfStarts(label);
  BasicBlock block=blocks.labelToBlock(label);
  InsnList insns=block.getInsns();
  int insnSz=insns.size();
  boolean canThrowDuringLastInsn=block.hasExceptionHandlers() && (insns.getLast().getResult() != null);
  int freezeSecondaryStateAt=insnSz - 1;
  RegisterSpecSet secondaryState=primaryState;
  for (int i=0; i < insnSz; i++) {
    if (canThrowDuringLastInsn && (i == freezeSecondaryStateAt)) {
      primaryState.setImmutable();
      primaryState=primaryState.mutableCopy();
    }
    Insn insn=insns.get(i);
    RegisterSpec result;
    result=insn.getLocalAssignment();
    if (result == null) {
      result=insn.getResult();
      if (result != null && primaryState.get(result.getReg()) != null) {
        primaryState.remove(primaryState.get(result.getReg()));
      }
      continue;
    }
    result=result.withSimpleType();
    RegisterSpec already=primaryState.get(result);
    if (!result.equals(already)) {
      RegisterSpec previous=primaryState.localItemToSpec(result.getLocalItem());
      if (previous != null && (previous.getReg() != result.getReg())) {
        primaryState.remove(previous);
      }
      resultInfo.addAssignment(insn,result);
      primaryState.put(result);
    }
  }
  primaryState.setImmutable();
  IntList successors=block.getSuccessors();
  int succSz=successors.size();
  int primarySuccessor=block.getPrimarySuccessor();
  for (int i=0; i < succSz; i++) {
    int succ=successors.get(i);
    RegisterSpecSet state=(succ == primarySuccessor) ? primaryState : secondaryState;
    if (resultInfo.mergeStarts(succ,state)) {
      Bits.set(workSet,succ);
    }
  }
}
