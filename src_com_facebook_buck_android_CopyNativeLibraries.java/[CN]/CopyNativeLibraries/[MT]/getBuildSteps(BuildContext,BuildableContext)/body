{
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),getBinPath()));
  final Path pathToNativeLibs=getPathToNativeLibsDir();
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),pathToNativeLibs));
  final Path pathToNativeLibsAssets=getPathToNativeLibsAssetsDir();
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),pathToNativeLibsAssets));
  for (  SourcePath nativeLibDir : nativeLibDirectories.asList().reverse()) {
    copyNativeLibrary(getProjectFilesystem(),getResolver().getAbsolutePath(nativeLibDir),pathToNativeLibs,cpuFilters,steps);
  }
  addStepsForCopyingStrippedNativeLibrariesOrAssets(getProjectFilesystem(),stripLibRules,pathToNativeLibs,steps);
  addStepsForCopyingStrippedNativeLibrariesOrAssets(getProjectFilesystem(),stripLibAssetRules,pathToNativeLibsAssets,steps);
  final Path pathToMetadataTxt=getPathToMetadataTxt();
  steps.add(new AbstractExecutionStep("hash_native_libs"){
    @Override public StepExecutionResult execute(    ExecutionContext context){
      ProjectFilesystem filesystem=getProjectFilesystem();
      ImmutableList.Builder<String> metadataLines=ImmutableList.builder();
      try {
        for (        Path nativeLib : filesystem.getFilesUnderPath(getPathToAllLibsDir())) {
          String filesha1=filesystem.computeSha1(nativeLib);
          Path relativePath=getPathToAllLibsDir().relativize(nativeLib);
          metadataLines.add(String.format("%s %s",relativePath.toString(),filesha1));
        }
        filesystem.writeLinesToPath(metadataLines.build(),pathToMetadataTxt);
      }
 catch (      IOException e) {
        context.logError(e,"There was an error hashing native libraries.");
        return StepExecutionResult.ERROR;
      }
      return StepExecutionResult.SUCCESS;
    }
  }
);
  buildableContext.recordArtifact(pathToNativeLibs);
  buildableContext.recordArtifact(pathToNativeLibsAssets);
  buildableContext.recordArtifact(pathToMetadataTxt);
  return steps.build();
}
