{
  final AtomicInteger createCount=new AtomicInteger(0);
  Cell cell=EasyMock.createMock(Cell.class);
  try (ParserLeaseVendor<ParserForTest> vendor=new ParserLeaseVendor<>(maxParsers,new Function<Cell,ParserForTest>(){
    @Override public ParserForTest apply(    Cell input){
      createCount.incrementAndGet();
      return new ParserForTest();
    }
  }
)){
    for (int i=0; i < numRequests; ++i) {
      vendor.leaseParser(cell,new AsyncFunction<ParserForTest,Void>(){
        @Override public ListenableFuture<Void> apply(        ParserForTest input) throws Exception {
          Preconditions.checkNotNull(input);
          return Futures.immediateFuture(null);
        }
      }
,executorService);
    }
    executorService.shutdown();
    return createCount.get();
  }
 }
