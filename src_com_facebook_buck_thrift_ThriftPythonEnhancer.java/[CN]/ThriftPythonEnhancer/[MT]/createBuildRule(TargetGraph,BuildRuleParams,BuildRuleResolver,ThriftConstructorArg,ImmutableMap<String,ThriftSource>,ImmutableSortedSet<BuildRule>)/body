{
  ImmutableMap.Builder<Path,SourcePath> modulesBuilder=ImmutableMap.builder();
  for (  ImmutableMap.Entry<String,ThriftSource> ent : sources.entrySet()) {
    ThriftSource source=ent.getValue();
    Path outputDir=source.getOutputDir();
    for (    String module : getGeneratedSources(params.getBuildTarget(),args,ent.getKey(),source.getServices())) {
      Path path=outputDir.resolve("gen-" + getLanguage()).resolve(module);
      modulesBuilder.put(Paths.get(module.endsWith(".py") ? module : module + ".py"),new BuildTargetSourcePath(source.getCompileRule().getBuildTarget(),path));
    }
  }
  ImmutableMap<Path,SourcePath> modules=modulesBuilder.build();
  BuildRuleParams langParams=params.copyWithChanges(params.getBuildTarget(),Suppliers.ofInstance(deps),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  Function<? super PythonPlatform,ImmutableMap<Path,SourcePath>> resources=Functions.constant(ImmutableMap.<Path,SourcePath>of());
  return new PythonLibrary(langParams,new SourcePathResolver(resolver),Functions.constant(modules),resources,Optional.of(true));
}
