{
  Path baseModule=PythonUtil.getBasePath(params.getBuildTarget(),getBaseModule(args));
  ImmutableMap.Builder<Path,SourcePath> modulesBuilder=ImmutableMap.builder();
  for (  ImmutableMap.Entry<String,ThriftSource> ent : sources.entrySet()) {
    String thriftBaseName=Files.getNameWithoutExtension(ent.getKey());
    ThriftSource source=ent.getValue();
    Path outputDir=source.getOutputDir();
    for (    String partialName : getGeneratedThriftSources(source.getServices())) {
      Path module=baseModule.resolve(thriftBaseName).resolve(partialName);
      Path path=outputDir.resolve("gen-" + getLanguage()).resolve(module);
      modulesBuilder.put(module,new BuildTargetSourcePath(source.getCompileRule().getProjectFilesystem(),source.getCompileRule().getBuildTarget(),path));
    }
  }
  ImmutableMap<Path,SourcePath> modules=modulesBuilder.build();
  BuildRuleParams langParams=params.copyWithChanges(params.getBuildTarget(),Suppliers.ofInstance(deps),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  return new PythonLibrary(langParams,new SourcePathResolver(resolver),modules,ImmutableMap.<Path,SourcePath>of(),Optional.of(true));
}
