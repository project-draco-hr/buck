{
  return ImmutableList.<Step>of(new AbstractExecutionStep("compute_android_binary_deps_abi"){
    @Override public StepExecutionResult execute(    ExecutionContext context){
      try {
        final Hasher hasher=Hashing.sha1().newHasher();
        String resourceApkHash=aaptPackageResources.getResourcePackageHash().toString();
        LOG.verbose("resource apk = %s",resourceApkHash);
        hasher.putUnencodedChars(resourceApkHash);
        String primaryDexHash=Preconditions.checkNotNull(preDexMerge.get().getPrimaryDexHash()).toString();
        LOG.verbose("primary dex = %s",primaryDexHash);
        hasher.putUnencodedChars(primaryDexHash);
        if (packageStringAssets.isPresent()) {
          String stringAssetsHash=packageStringAssets.get().getStringAssetsZipHash().toString();
          LOG.verbose("string assets = %s",stringAssetsHash);
          hasher.putUnencodedChars(stringAssetsHash);
        }
        if (!ExopackageMode.enabledForSecondaryDexes(exopackageModes) && preDexMerge.isPresent()) {
          addToHash(hasher,"secondary_dexes",preDexMerge.get().getMetadataTxtPath());
        }
        if (!ExopackageMode.enabledForNativeLibraries(exopackageModes) && copyNativeLibraries.isPresent()) {
          addToHash(hasher,"native_libs",copyNativeLibraries.get().getPathToMetadataTxt());
        }
        if (ExopackageMode.enabledForNativeLibraries(exopackageModes)) {
          String fakeNativeLibraryBundle=System.getProperty("buck.native_exopackage_fake_path");
          Preconditions.checkNotNull(fakeNativeLibraryBundle,"fake native bundle not specified in properties.");
          Path fakePath=Paths.get(fakeNativeLibraryBundle);
          Preconditions.checkState(fakePath.isAbsolute(),"Expected fake path to be absolute: %s",fakePath);
          addToHash(hasher,"fake_native_libs",fakePath,fakePath.getFileName());
        }
        final ImmutableSortedMap.Builder<Path,Path> allNativeFiles=ImmutableSortedMap.naturalOrder();
        for (        SourcePath libDir : packageableCollection.getNativeLibAssetsDirectories()) {
          final Path root=getResolver().getAbsolutePath(libDir);
          Files.walkFileTree(root,new SimpleFileVisitor<Path>(){
            @Override public FileVisitResult visitFile(            Path file,            BasicFileAttributes attrs) throws IOException {
              allNativeFiles.put(file,root.relativize(file));
              return FileVisitResult.CONTINUE;
            }
          }
);
        }
        for (        Map.Entry<Path,Path> entry : allNativeFiles.build().entrySet()) {
          addToHash(hasher,"native_lib_as_asset",entry.getKey(),entry.getValue());
        }
        for (        SourcePath jar : ImmutableSortedSet.copyOf(packageableCollection.getPathsToThirdPartyJars())) {
          addToHash(hasher,"third-party jar",jar);
        }
        addToHash(hasher,"keystore",keystore.getPathToStore());
        addToHash(hasher,"keystore properties",keystore.getPathToPropertiesFile());
        String abiHash=hasher.hash().toString();
        LOG.verbose("ABI hash = %s",abiHash);
        buildableContext.addMetadata(METADATA_KEY,abiHash);
        return StepExecutionResult.SUCCESS;
      }
 catch (      IOException e) {
        context.logError(e,"Error computing ABI hash.");
        return StepExecutionResult.ERROR;
      }
    }
  }
);
}
