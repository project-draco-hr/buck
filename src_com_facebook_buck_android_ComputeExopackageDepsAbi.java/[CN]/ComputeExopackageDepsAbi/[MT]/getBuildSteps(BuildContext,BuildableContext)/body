{
  return ImmutableList.<Step>of(new AbstractExecutionStep("compute_android_binary_deps_abi"){
    @Override public int execute(    ExecutionContext context){
      try {
        ProjectFilesystem filesystem=context.getProjectFilesystem();
        AndroidTransitiveDependencies transitiveDependencies=androidResourceDepsFinder.getAndroidTransitiveDependencies();
        AndroidDexTransitiveDependencies dexTransitiveDependencies=androidResourceDepsFinder.getAndroidDexTransitiveDependencies(uberRDotJava);
        final Hasher hasher=Hashing.sha1().newHasher();
        hasher.putUnencodedChars(aaptPackageResources.getResourcePackageHash().toString());
        hasher.putUnencodedChars(preDexMerge.get().getPrimaryDexHash().toString());
        final ImmutableSortedMap.Builder<Path,String> filesToHash=ImmutableSortedMap.naturalOrder();
        for (        final Path libDir : transitiveDependencies.nativeLibsDirectories) {
          new DirectoryTraversal(filesystem.resolve(libDir).toFile()){
            @Override public void visit(            File file,            String relativePath) throws IOException {
              filesToHash.put(libDir.resolve(relativePath),"native lib");
            }
          }
.traverse();
        }
        for (        String jar : dexTransitiveDependencies.pathsToThirdPartyJars) {
          filesToHash.put(Paths.get(jar),"third-party jar");
        }
        filesToHash.put(keystore.getPathToStore(),"keystore");
        filesToHash.put(keystore.getPathToPropertiesFile(),"keystore properties");
        for (        Map.Entry<Path,String> entry : filesToHash.build().entrySet()) {
          Path path=entry.getKey();
          hasher.putUnencodedChars(path.toString());
          hasher.putByte((byte)0);
          hasher.putUnencodedChars(filesystem.computeSha1(path));
          hasher.putByte((byte)0);
        }
        buildableContext.addMetadata(METADATA_KEY,hasher.hash().toString());
        return 0;
      }
 catch (      IOException e) {
        context.logError(e,"Error computing ABI hash.");
        return 1;
      }
    }
  }
);
}
