{
  return ImmutableList.<Step>of(new AbstractExecutionStep("compute_android_binary_deps_abi"){
    @Override public int execute(    ExecutionContext context){
      try {
        ProjectFilesystem filesystem=context.getProjectFilesystem();
        final Hasher hasher=Hashing.sha1().newHasher();
        String resourceApkHash=aaptPackageResources.getResourcePackageHash().toString();
        LOG.verbose("resource apk = %s",resourceApkHash);
        hasher.putUnencodedChars(resourceApkHash);
        String primaryDexHash=preDexMerge.get().getPrimaryDexHash().toString();
        LOG.verbose("primary dex = %s",primaryDexHash);
        hasher.putUnencodedChars(primaryDexHash);
        if (packageStringAssets.isPresent()) {
          String stringAssetsHash=packageStringAssets.get().getStringAssetsZipHash().toString();
          LOG.verbose("string assets = %s",stringAssetsHash);
          hasher.putUnencodedChars(stringAssetsHash);
        }
        ImmutableSortedMap.Builder<Path,String> filesToHash=ImmutableSortedMap.naturalOrder();
        for (        final Path libDir : packageableCollection.nativeLibsDirectories) {
          for (          Path nativeFile : filesystem.getFilesUnderPath(libDir)) {
            filesToHash.put(nativeFile,"native_lib");
          }
        }
        for (        final Path libDir : packageableCollection.nativeLibAssetsDirectories) {
          for (          Path nativeFile : filesystem.getFilesUnderPath(libDir)) {
            filesToHash.put(nativeFile,"native_lib_as_asset");
          }
        }
        for (        Path jar : packageableCollection.pathsToThirdPartyJars) {
          filesToHash.put(jar,"third-party jar");
        }
        filesToHash.put(keystore.getPathToStore(),"keystore");
        filesToHash.put(keystore.getPathToPropertiesFile(),"keystore properties");
        for (        Map.Entry<Path,String> entry : filesToHash.build().entrySet()) {
          Path path=entry.getKey();
          hasher.putUnencodedChars(path.toString());
          hasher.putByte((byte)0);
          String fileSha1=filesystem.computeSha1(path);
          hasher.putUnencodedChars(fileSha1);
          hasher.putByte((byte)0);
          hasher.putUnencodedChars(entry.getValue());
          hasher.putByte((byte)0);
          LOG.verbose("file %s(%s) = %s",path,entry.getValue(),fileSha1);
        }
        String abiHash=hasher.hash().toString();
        LOG.verbose("ABI hash = %s",abiHash);
        buildableContext.addMetadata(METADATA_KEY,abiHash);
        return 0;
      }
 catch (      IOException e) {
        context.logError(e,"Error computing ABI hash.");
        return 1;
      }
    }
  }
);
}
