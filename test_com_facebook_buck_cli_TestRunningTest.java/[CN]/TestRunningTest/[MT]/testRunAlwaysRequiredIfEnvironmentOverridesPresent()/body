{
  ExecutionContext executionContext=TestExecutionContext.newBuilder().setDebugEnabled(false).build();
  FakeTestRule testRule=new FakeTestRule(ImmutableSet.of(Label.of("windows")),BuildTargetFactory.newInstance("//:lulz"),new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer())),ImmutableSortedSet.<BuildRule>of()){
    @Override public boolean hasTestResultFiles(){
      return true;
    }
  }
;
  TestRuleKeyFileHelper testRuleKeyFileHelper=createNiceMock(TestRuleKeyFileHelper.class);
  expect(testRuleKeyFileHelper.isRuleKeyInDir(testRule)).andReturn(true).times(1);
  CachingBuildEngine cachingBuildEngine=createMock(CachingBuildEngine.class);
  BuildResult result=BuildResult.success(testRule,MATCHING_RULE_KEY,CacheResult.miss());
  expect(cachingBuildEngine.getBuildRuleResult(BuildTargetFactory.newInstance("//:lulz"))).andReturn(result).times(1);
  replay(cachingBuildEngine,testRuleKeyFileHelper);
  assertFalse("Test will normally not be rerun",TestRunning.isTestRunRequiredForTest(testRule,cachingBuildEngine,executionContext,testRuleKeyFileHelper,true,false,false));
  assertTrue("Test will be rerun when environment overrides are present",TestRunning.isTestRunRequiredForTest(testRule,cachingBuildEngine,executionContext,testRuleKeyFileHelper,true,false,true));
  verify(cachingBuildEngine,testRuleKeyFileHelper);
}
