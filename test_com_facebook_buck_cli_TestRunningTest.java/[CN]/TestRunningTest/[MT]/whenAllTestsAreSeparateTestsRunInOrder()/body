{
  CommandRunnerParams commandRunnerParams=CommandRunnerParamsForTesting.builder().build();
  AtomicInteger atomicExecutionOrder=new AtomicInteger(0);
  ExecutionOrderAwareFakeStep separateTestStep1=new ExecutionOrderAwareFakeStep("teststep1","teststep1",0,atomicExecutionOrder);
  final TestResults fakeTestResults=FakeTestResults.of(ImmutableList.of(new TestCaseSummary("TestCase",ImmutableList.of(new TestResultSummary("TestCaseResult","passTest",ResultType.SUCCESS,5000,null,null,null,null)))));
  BuildTarget separateTest1Target=BuildTargetFactory.newInstance("//:test1");
  FakeTestRule separateTest1=new FakeTestRule(new FakeBuildRuleParamsBuilder(separateTest1Target).build(),new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer())),ImmutableSet.<Label>of(),Optional.of(Paths.get("separateTestStep1OutputDir")),true,ImmutableList.<Step>of(separateTestStep1),new Callable<TestResults>(){
    @Override public TestResults call(){
      return fakeTestResults;
    }
  }
);
  ExecutionOrderAwareFakeStep separateTestStep2=new ExecutionOrderAwareFakeStep("teststep2","teststep2",0,atomicExecutionOrder);
  BuildTarget separateTest2Target=BuildTargetFactory.newInstance("//:test2");
  FakeTestRule separateTest2=new FakeTestRule(new FakeBuildRuleParamsBuilder(separateTest2Target).build(),new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer())),ImmutableSet.<Label>of(),Optional.of(Paths.get("separateTestStep2OutputDir")),true,ImmutableList.<Step>of(separateTestStep2),new Callable<TestResults>(){
    @Override public TestResults call(){
      return fakeTestResults;
    }
  }
);
  ExecutionOrderAwareFakeStep separateTestStep3=new ExecutionOrderAwareFakeStep("teststep3","teststep3",0,atomicExecutionOrder);
  BuildTarget separateTest3Target=BuildTargetFactory.newInstance("//:test3");
  FakeTestRule separateTest3=new FakeTestRule(new FakeBuildRuleParamsBuilder(separateTest3Target).build(),new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer())),ImmutableSet.<Label>of(),Optional.of(Paths.get("separateTestStep3OutputDir")),true,ImmutableList.<Step>of(separateTestStep3),new Callable<TestResults>(){
    @Override public TestResults call(){
      return fakeTestResults;
    }
  }
);
  ListeningExecutorService service=MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(3));
  FakeBuildEngine fakeBuildEngine=new FakeBuildEngine(ImmutableMap.of(separateTest1Target,BuildResult.success(separateTest1,BUILT_LOCALLY,CacheResult.miss()),separateTest2Target,BuildResult.success(separateTest2,BUILT_LOCALLY,CacheResult.miss()),separateTest3Target,BuildResult.success(separateTest3,BUILT_LOCALLY,CacheResult.miss())),ImmutableMap.of(separateTest1Target,new RuleKey("00"),separateTest2Target,new RuleKey("00"),separateTest3Target,new RuleKey("00")));
  ExecutionContext fakeExecutionContext=TestExecutionContext.newInstance();
  DefaultStepRunner stepRunner=new DefaultStepRunner(fakeExecutionContext);
  int ret=TestRunning.runTests(commandRunnerParams,ImmutableList.<TestRule>of(separateTest1,separateTest2,separateTest3),fakeExecutionContext,DEFAULT_OPTIONS,service,fakeBuildEngine,stepRunner);
  assertThat(ret,equalTo(0));
  assertThat(separateTestStep1.getExecutionBeginOrder(),equalTo(Optional.of(0)));
  assertThat(separateTestStep1.getExecutionEndOrder(),equalTo(Optional.of(1)));
  assertThat(separateTestStep2.getExecutionBeginOrder(),equalTo(Optional.of(2)));
  assertThat(separateTestStep2.getExecutionEndOrder(),equalTo(Optional.of(3)));
  assertThat(separateTestStep3.getExecutionBeginOrder(),equalTo(Optional.of(4)));
  assertThat(separateTestStep3.getExecutionEndOrder(),equalTo(Optional.of(5)));
}
