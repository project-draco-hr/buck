{
  CommandRunnerParams commandRunnerParams=CommandRunnerParamsForTesting.builder().build();
  final TestResults failingTestResults=new TestResults(ImmutableList.of(new TestCaseSummary("TestCase",ImmutableList.of(new TestResultSummary("TestCaseResult","failTest",ResultType.FAILURE,5000,null,null,null,null)))));
  BuildTarget failingTestTarget=BuildTargetFactory.newInstance("//:failingtest");
  FakeTestRule failingTest=new FakeTestRule(BuildRuleParamsFactory.createTrivialBuildRuleParams(failingTestTarget),new SourcePathResolver(new BuildRuleResolver()),ImmutableSet.<Label>of(),Optional.of(Paths.get("failingTestStep1OutputDir")),true,ImmutableList.<Step>of(),new Callable<TestResults>(){
    @Override public TestResults call(){
      return failingTestResults;
    }
  }
);
  ListeningExecutorService service=MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(3));
  FakeBuildEngine fakeBuildEngine=new FakeBuildEngine(ImmutableMap.of(failingTestTarget,BuildResult.success(failingTest,BUILT_LOCALLY,CacheResult.skip())),ImmutableMap.of(failingTestTarget,new RuleKey("00")));
  ExecutionContext fakeExecutionContext=TestExecutionContext.newBuilder().setProjectFilesystem(new FakeProjectFilesystem()).build();
  DefaultStepRunner stepRunner=new DefaultStepRunner(fakeExecutionContext);
  int ret=TestRunning.runTests(commandRunnerParams,ImmutableList.<TestRule>of(failingTest),FakeBuildContext.NOOP_CONTEXT,fakeExecutionContext,DEFAULT_OPTIONS,service,fakeBuildEngine,stepRunner);
  assertThat(ret,equalTo(TestRunning.TEST_FAILURES_EXIT_CODE));
}
