{
  checkForAndKillXcodeIfRunning(options.getIdePrompt());
  TargetGraphs targetGraphs;
  try {
    targetGraphs=createTargetGraphs(options);
  }
 catch (  BuildTargetException|BuildFileParseException e) {
    throw new HumanReadableException(e);
  }
  ImmutableSet<BuildTarget> passedInTargetsSet;
  try {
    ImmutableSet<String> argumentsAsBuildTargets=options.getArgumentsFormattedAsBuildTargets();
    passedInTargetsSet=ImmutableSet.copyOf(getBuildTargets(argumentsAsBuildTargets));
  }
 catch (  NoSuchBuildTargetException e) {
    throw new HumanReadableException(e);
  }
  ExecutionContext executionContext=createExecutionContext(options,targetGraphs.getProjectGraph().getActionGraph());
  ImmutableSet.Builder<ProjectGenerator.Option> optionsBuilder=ImmutableSet.builder();
  if (options.getReadOnly()) {
    optionsBuilder.add(ProjectGenerator.Option.GENERATE_READ_ONLY_FILES);
  }
  if (options.isWithTests()) {
    optionsBuilder.add(ProjectGenerator.Option.INCLUDE_TESTS);
  }
  if (options.getCombinedProject() || options.getWorkspaceAndProjects()) {
    boolean combinedProject=options.getCombinedProject();
    if (combinedProject && passedInTargetsSet.size() != 1) {
      throw new HumanReadableException("Combined project can only be generated for one target at a time");
    }
    ImmutableSet<BuildTarget> targets;
    if (passedInTargetsSet.isEmpty()) {
      targets=getAllTargetsOfType(targetGraphs.getMainGraph().getNodes(),XcodeWorkspaceConfigDescription.TYPE);
    }
 else {
      targets=passedInTargetsSet;
    }
    if (!combinedProject) {
      optionsBuilder.addAll(ProjectGenerator.SEPARATED_PROJECT_OPTIONS);
    }
    LOG.debug("Generating workspace for config targets %s",targets);
    Map<BuildRule,ProjectGenerator> projectGenerators=new HashMap<>();
    for (    BuildTarget workspaceConfig : targets) {
      BuildRule workspaceRule=Preconditions.checkNotNull(targetGraphs.getMainGraph().getActionGraph().findBuildRuleByTarget(workspaceConfig));
      if (!(workspaceRule instanceof XcodeWorkspaceConfig)) {
        throw new HumanReadableException("%s must be a xcode_workspace_config",workspaceRule.getFullyQualifiedName());
      }
      Iterable<BuildRule> testBuildRules;
      if (targetGraphs.getTestGraph().isPresent()) {
        testBuildRules=targetGraphs.getTestGraph().get().getActionGraph().getNodes();
      }
 else {
        testBuildRules=Collections.emptySet();
      }
      XcodeWorkspaceConfig workspaceConfigRule=(XcodeWorkspaceConfig)workspaceRule;
      WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(getProjectFilesystem(),targetGraphs.getProjectGraph(),executionContext,workspaceConfigRule,optionsBuilder.build(),AppleBuildRules.getSourceRuleToTestRulesMap(testBuildRules),workspaceConfigRule.getExtraTests(),combinedProject);
      generator.generateWorkspaceAndDependentProjects(projectGenerators);
    }
  }
 else {
    ImmutableSet<BuildTarget> targets;
    if (passedInTargetsSet.isEmpty()) {
      targets=getAllTargetsOfType(targetGraphs.getProjectGraph().getNodes(),XcodeProjectConfigDescription.TYPE);
    }
 else {
      targets=passedInTargetsSet;
    }
    SeparatedProjectsGenerator projectGenerator=new SeparatedProjectsGenerator(getProjectFilesystem(),targetGraphs.getProjectGraph(),executionContext,targets,optionsBuilder.build());
    projectGenerator.generateProjects();
  }
  return 0;
}
