{
  PartialGraph partialGraph;
  try {
    partialGraph=PartialGraph.createFullGraph(getProjectFilesystem(),options.getDefaultIncludes(),getParser(),getBuckEventBus());
  }
 catch (  BuildTargetException|BuildFileParseException e) {
    throw new HumanReadableException(e);
  }
  ImmutableSet<BuildTarget> passedInTargetsSet;
  try {
    List<String> argumentsAsBuildTargets=options.getArgumentsFormattedAsBuildTargets();
    passedInTargetsSet=ImmutableSet.copyOf(getBuildTargets(argumentsAsBuildTargets));
  }
 catch (  NoSuchBuildTargetException e) {
    throw new HumanReadableException(e);
  }
  ExecutionContext executionContext=createExecutionContext(options,partialGraph.getActionGraph());
  ImmutableSet.Builder<ProjectGenerator.Option> optionsBuilder=ImmutableSet.builder();
  if (options.getReadOnly()) {
    optionsBuilder.add(ProjectGenerator.Option.GENERATE_READ_ONLY_FILES);
  }
  if (options.getCombinedProject() != null) {
    ProjectGenerator projectGenerator=new ProjectGenerator(partialGraph,passedInTargetsSet,getProjectFilesystem(),executionContext,getProjectFilesystem().getPathForRelativePath(Paths.get("_gen")),"GeneratedProject",optionsBuilder.addAll(ProjectGenerator.COMBINED_PROJECT_OPTIONS).build());
    projectGenerator.createXcodeProjects();
  }
 else   if (options.getWorkspaceAndProjects()) {
    WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(getProjectFilesystem(),partialGraph,executionContext,Iterables.getOnlyElement(passedInTargetsSet),optionsBuilder.build());
    generator.generateWorkspaceAndDependentProjects();
  }
 else {
    ImmutableSet<BuildTarget> targets;
    if (passedInTargetsSet.isEmpty()) {
      ImmutableSet.Builder<BuildTarget> targetsBuilder=ImmutableSet.builder();
      for (      BuildRule node : partialGraph.getActionGraph().getNodes()) {
        if (node.getType() == XcodeProjectConfigDescription.TYPE) {
          targetsBuilder.add(node.getBuildTarget());
        }
      }
      targets=targetsBuilder.build();
    }
 else {
      targets=passedInTargetsSet;
    }
    SeparatedProjectsGenerator projectGenerator=new SeparatedProjectsGenerator(getProjectFilesystem(),partialGraph,executionContext,targets,optionsBuilder.build());
    ImmutableSet<Path> generatedProjectPaths=projectGenerator.generateProjects();
    for (    Path path : generatedProjectPaths) {
      console.getStdOut().println(path.toString());
    }
  }
  return 0;
}
