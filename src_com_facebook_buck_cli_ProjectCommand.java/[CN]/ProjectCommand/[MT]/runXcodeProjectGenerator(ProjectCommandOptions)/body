{
  checkForAndKillXcodeIfRunning(options.getIdePrompt());
  TargetGraphAndTargets targetGraphAndTargets;
  try {
    targetGraphAndTargets=createTargetGraph(options);
  }
 catch (  BuildTargetException|BuildFileParseException e) {
    throw new HumanReadableException(e);
  }
  ImmutableSet<BuildTarget> passedInTargetsSet;
  try {
    ImmutableSet<String> argumentsAsBuildTargets=options.getArgumentsFormattedAsBuildTargets();
    passedInTargetsSet=ImmutableSet.copyOf(getBuildTargets(argumentsAsBuildTargets));
  }
 catch (  NoSuchBuildTargetException e) {
    throw new HumanReadableException(e);
  }
  ImmutableSet.Builder<ProjectGenerator.Option> optionsBuilder=ImmutableSet.builder();
  if (options.getReadOnly()) {
    optionsBuilder.add(ProjectGenerator.Option.GENERATE_READ_ONLY_FILES);
  }
  if (options.isWithTests()) {
    optionsBuilder.add(ProjectGenerator.Option.INCLUDE_TESTS);
  }
  if (options.getCombinedProject() || options.getWorkspaceAndProjects()) {
    boolean combinedProject=options.getCombinedProject();
    if (combinedProject && passedInTargetsSet.size() != 1) {
      throw new HumanReadableException("Combined project can only be generated for one target at a time");
    }
    ImmutableSet<BuildTarget> targets;
    if (passedInTargetsSet.isEmpty()) {
      targets=FluentIterable.from(targetGraphAndTargets.getProjectRoots()).transform(HasBuildTarget.TO_TARGET).toSet();
    }
 else {
      targets=passedInTargetsSet;
    }
    if (!combinedProject) {
      optionsBuilder.addAll(ProjectGenerator.SEPARATED_PROJECT_OPTIONS);
    }
    LOG.debug("Generating workspace for config targets %s",targets);
    Map<TargetNode<?>,ProjectGenerator> projectGenerators=new HashMap<>();
    ImmutableSet<TargetNode<?>> testTargetNodes=targetGraphAndTargets.getAssociatedTests();
    ImmutableMultimap<BuildTarget,TargetNode<?>> sourceTargetToTestNodes=AppleBuildRules.getSourceTargetToTestNodesMap(testTargetNodes);
    for (    BuildTarget workspaceTarget : targets) {
      TargetNode<?> workspaceNode=Preconditions.checkNotNull(targetGraphAndTargets.getTargetGraph().get(workspaceTarget));
      if (workspaceNode.getType() != XcodeWorkspaceConfigDescription.TYPE) {
        throw new HumanReadableException("%s must be a xcode_workspace_config",workspaceTarget);
      }
      WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(getProjectFilesystem(),targetGraphAndTargets.getTargetGraph(),castToXcodeWorkspaceTargetNode(workspaceNode),optionsBuilder.build(),sourceTargetToTestNodes,combinedProject);
      generator.generateWorkspaceAndDependentProjects(projectGenerators);
    }
  }
 else {
    ImmutableSet<BuildTarget> targets;
    if (passedInTargetsSet.isEmpty()) {
      targets=FluentIterable.from(targetGraphAndTargets.getAssociatedProjects()).transform(HasBuildTarget.TO_TARGET).toSet();
    }
 else {
      targets=passedInTargetsSet;
    }
    SeparatedProjectsGenerator projectGenerator=new SeparatedProjectsGenerator(getProjectFilesystem(),targetGraphAndTargets.getTargetGraph(),targets,optionsBuilder.build());
    projectGenerator.generateProjects();
  }
  return 0;
}
