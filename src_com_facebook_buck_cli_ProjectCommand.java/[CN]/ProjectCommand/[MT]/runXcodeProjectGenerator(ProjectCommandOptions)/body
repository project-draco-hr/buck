{
  PartialGraph partialGraph;
  try {
    final ImmutableSet<String> defaultExcludePaths=options.getDefaultExcludePaths();
    final ImmutableSet<BuildTarget> passedInTargetsSet=ImmutableSet.copyOf(getBuildTargets(options.getArgumentsFormattedAsBuildTargets()));
    partialGraph=createPartialGraph(new RuleJsonPredicate(){
      @Override public boolean isMatch(      Map<String,Object> rawParseData,      BuildRuleType buildRuleType,      BuildTarget buildTarget){
        if (XcodeProjectConfigDescription.TYPE != buildRuleType) {
          return false;
        }
        String targetName=buildTarget.getFullyQualifiedName();
        for (        String prefix : defaultExcludePaths) {
          if (targetName.startsWith("//" + prefix) && !passedInTargetsSet.contains(buildTarget)) {
            LOG.debug("Ignoring build target %s (exclude_paths contains %s)",buildTarget,prefix);
            return false;
          }
        }
        return true;
      }
    }
,ASSOCIATED_XCODE_PROJECTS_PREDICATE,options);
  }
 catch (  BuildTargetException|BuildFileParseException e) {
    throw new HumanReadableException(e);
  }
  ImmutableSet<BuildTarget> passedInTargetsSet;
  try {
    ImmutableSet<String> argumentsAsBuildTargets=options.getArgumentsFormattedAsBuildTargets();
    passedInTargetsSet=getBuildTargets(argumentsAsBuildTargets);
  }
 catch (  NoSuchBuildTargetException e) {
    throw new HumanReadableException(e);
  }
  ExecutionContext executionContext=createExecutionContext(options,partialGraph.getActionGraph());
  ImmutableSet.Builder<ProjectGenerator.Option> optionsBuilder=ImmutableSet.builder();
  if (options.getReadOnly()) {
    optionsBuilder.add(ProjectGenerator.Option.GENERATE_READ_ONLY_FILES);
  }
  if (options.getCombinedProject() != null) {
    ProjectGenerator projectGenerator=new ProjectGenerator(partialGraph,passedInTargetsSet,getProjectFilesystem(),executionContext,getProjectFilesystem().getPathForRelativePath(Paths.get("_gen")),"GeneratedProject",optionsBuilder.addAll(ProjectGenerator.COMBINED_PROJECT_OPTIONS).build());
    projectGenerator.createXcodeProjects();
  }
 else   if (options.getWorkspaceAndProjects()) {
    ImmutableSet<BuildTarget> targets;
    if (passedInTargetsSet.isEmpty()) {
      targets=getAllTargetsOfType(partialGraph.getActionGraph().getNodes(),XcodeWorkspaceConfigDescription.TYPE);
    }
 else {
      targets=passedInTargetsSet;
    }
    WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(getProjectFilesystem(),partialGraph,executionContext,targets,optionsBuilder.build());
    generator.generateWorkspacesAndDependentProjects();
  }
 else {
    ImmutableSet<BuildTarget> targets;
    if (passedInTargetsSet.isEmpty()) {
      targets=getAllTargetsOfType(partialGraph.getActionGraph().getNodes(),XcodeProjectConfigDescription.TYPE);
    }
 else {
      targets=passedInTargetsSet;
    }
    SeparatedProjectsGenerator projectGenerator=new SeparatedProjectsGenerator(getProjectFilesystem(),partialGraph,executionContext,targets,optionsBuilder.build());
    ImmutableSet<Path> generatedProjectPaths=projectGenerator.generateProjects();
    for (    Path path : generatedProjectPaths) {
      console.getStdOut().println(path.toString());
    }
  }
  return 0;
}
