{
  Predicate<TargetNode<?>> projectRootsPredicate;
  AssociatedTargetNodePredicate associatedProjectPredicate;
switch (options.getIde()) {
case INTELLIJ:
    projectRootsPredicate=new Predicate<TargetNode<?>>(){
      @Override public boolean apply(      TargetNode<?> input){
        return input.getType() == ProjectConfigDescription.TYPE;
      }
    }
;
  associatedProjectPredicate=new AssociatedTargetNodePredicate(){
    @Override public boolean apply(    TargetNode<?> targetNode,    TargetGraph targetGraph){
      ProjectConfigDescription.Arg projectArg;
      if (targetNode.getType() == ProjectConfigDescription.TYPE) {
        projectArg=(ProjectConfigDescription.Arg)targetNode.getConstructorArg();
      }
 else {
        return false;
      }
      BuildTarget projectTarget=null;
      if (projectArg.srcTarget.isPresent()) {
        projectTarget=projectArg.srcTarget.get();
      }
 else       if (projectArg.testTarget.isPresent()) {
        projectTarget=projectArg.testTarget.get();
      }
      return (projectTarget != null && targetGraph.get(projectTarget) != null);
    }
  }
;
break;
case XCODE:
final ImmutableSet<String> defaultExcludePaths=options.getDefaultExcludePaths();
final ImmutableSet<BuildTarget> passedInTargetsSet=ImmutableSet.copyOf(getBuildTargets(options.getArgumentsFormattedAsBuildTargets()));
projectRootsPredicate=new Predicate<TargetNode<?>>(){
@Override public boolean apply(TargetNode<?> input){
if (XcodeWorkspaceConfigDescription.TYPE != input.getType()) {
return false;
}
String targetName=input.getBuildTarget().getFullyQualifiedName();
for (String prefix : defaultExcludePaths) {
if (targetName.startsWith("//" + prefix) && !passedInTargetsSet.contains(input.getBuildTarget())) {
  LOG.debug("Ignoring build target %s (exclude_paths contains %s)",input.getBuildTarget(),prefix);
  return false;
}
}
return true;
}
}
;
associatedProjectPredicate=new AssociatedTargetNodePredicate(){
@Override public boolean apply(TargetNode<?> targetNode,TargetGraph targetGraph){
XcodeProjectConfigDescription.Arg projectArg;
if (targetNode.getType() == XcodeProjectConfigDescription.TYPE) {
projectArg=(XcodeProjectConfigDescription.Arg)targetNode.getConstructorArg();
}
 else {
return false;
}
for (BuildTarget includedBuildTarget : projectArg.rules) {
if (targetGraph.get(includedBuildTarget) != null) {
return true;
}
}
return false;
}
}
;
break;
default :
throw new IllegalStateException("'ide' should always be of type 'INTELLIJ' or 'XCODE'");
}
TargetGraph fullGraph=getParser().buildTargetGraphForTargetNodeSpecs(ImmutableList.of(new TargetNodePredicateSpec(Predicates.<TargetNode<?>>alwaysTrue(),getProjectFilesystem().getIgnorePaths())),options.getDefaultIncludes(),getBuckEventBus(),console,environment,options.getEnableProfiling());
ImmutableSet<TargetNode<?>> projectRoots=ImmutableSet.copyOf(fullGraph.getAll(getRootsFromOptionsWithPredicate(fullGraph,options,projectRootsPredicate)));
ImmutableSet<TargetNode<?>> associatedTests=ImmutableSet.of();
if (options.isWithTests()) {
ImmutableSet<BuildTarget> explicitTests=FluentIterable.from(fullGraph.getSubgraph(projectRoots).getNodes()).transformAndConcat(new Function<TargetNode<?>,Iterable<BuildTarget>>(){
@Override public Iterable<BuildTarget> apply(TargetNode<?> node){
if (node.getConstructorArg() instanceof HasTests) {
return ((HasTests)node.getConstructorArg()).getTests();
}
 else {
return ImmutableSet.of();
}
}
}
).toSet();
AssociatedTargetNodePredicate associatedTestsPredicate=new AssociatedTargetNodePredicate(){
@Override public boolean apply(TargetNode<?> targetNode,TargetGraph targetGraph){
if (!targetNode.getType().isTestRule()) {
return false;
}
ImmutableSortedSet<BuildTarget> sourceUnderTest;
if (targetNode.getConstructorArg() instanceof HasSourceUnderTest) {
HasSourceUnderTest argWithSourceUnderTest=(HasSourceUnderTest)targetNode.getConstructorArg();
sourceUnderTest=argWithSourceUnderTest.getSourceUnderTest();
}
 else {
return false;
}
for (BuildTarget buildTargetUnderTest : sourceUnderTest) {
if (targetGraph.get(buildTargetUnderTest) != null) {
return true;
}
}
return false;
}
}
;
associatedTests=ImmutableSet.copyOf(Sets.union(ImmutableSet.copyOf(fullGraph.getAll(explicitTests)),getAssociatedTargetNodes(fullGraph,projectRoots,associatedTestsPredicate)));
}
ImmutableSet<TargetNode<?>> associatedProjects=getAssociatedTargetNodes(fullGraph,Iterables.concat(projectRoots,associatedTests),associatedProjectPredicate);
TargetGraph targetGraph=fullGraph.getSubgraph(Iterables.concat(projectRoots,associatedTests,associatedProjects));
return new TargetGraphAndTargets(targetGraph,fullGraph,projectRoots,associatedTests);
}
