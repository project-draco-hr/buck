{
  ImmutableSet<BuildTarget> targets;
  if (passedInTargetsSet.isEmpty()) {
    targets=FluentIterable.from(targetGraphAndTargets.getProjectRoots()).transform(HasBuildTarget.TO_TARGET).toSet();
  }
 else {
    targets=passedInTargetsSet;
  }
  LOG.debug("Generating workspace for config targets %s",targets);
  ImmutableSet<TargetNode<?>> testTargetNodes=targetGraphAndTargets.getAssociatedTests();
  ImmutableSet<TargetNode<AppleTestDescription.Arg>> groupableTests=combineTestBundles ? AppleBuildRules.filterGroupableTests(testTargetNodes) : ImmutableSet.<TargetNode<AppleTestDescription.Arg>>of();
  ImmutableSet.Builder<BuildTarget> requiredBuildTargetsBuilder=ImmutableSet.builder();
  for (  final BuildTarget inputTarget : targets) {
    TargetNode<?> inputNode=Preconditions.checkNotNull(targetGraphAndTargets.getTargetGraph().get(inputTarget));
    XcodeWorkspaceConfigDescription.Arg workspaceArgs;
    BuildRuleType type=inputNode.getType();
    if (type == XcodeWorkspaceConfigDescription.TYPE) {
      TargetNode<XcodeWorkspaceConfigDescription.Arg> castedWorkspaceNode=castToXcodeWorkspaceTargetNode(inputNode);
      workspaceArgs=castedWorkspaceNode.getConstructorArg();
    }
 else     if (canGenerateImplicitWorkspaceForType(type)) {
      workspaceArgs=createImplicitWorkspaceArgs(inputNode);
    }
 else {
      throw new HumanReadableException("%s must be a xcode_workspace_config, apple_binary, apple_bundle, or apple_library",inputNode);
    }
    WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(params.getCell().getFilesystem(),new ReactNativeBuckConfig(params.getBuckConfig()),targetGraphAndTargets.getTargetGraph(),workspaceArgs,inputTarget,options,combinedProject,buildWithBuck,buildWithBuckFlags,!(new AppleConfig(params.getBuckConfig()).getXcodeDisableParallelizeBuild()),new ExecutableFinder(),params.getEnvironment(),params.getCell().getKnownBuildRuleTypes().getCxxPlatforms(),params.getCell().getKnownBuildRuleTypes().getDefaultCxxPlatforms(),new ParserConfig(params.getBuckConfig()).getBuildFileName(),new Function<TargetNode<?>,Path>(){
      @Nullable @Override public Path apply(      TargetNode<?> input){
        TargetGraphToActionGraph targetGraphToActionGraph=new TargetGraphToActionGraph(params.getBuckEventBus(),new BuildTargetNodeToBuildRuleTransformer(),params.getFileHashCache());
        TargetGraph subgraph=targetGraphAndTargets.getTargetGraph().getSubgraph(ImmutableSet.of(input));
        ActionGraph actionGraph=Preconditions.checkNotNull(targetGraphToActionGraph.apply(subgraph));
        BuildRule rule=Preconditions.checkNotNull(actionGraph.findBuildRuleByTarget(input.getBuildTarget()));
        return rule.getPathToOutput();
      }
    }
);
    generator.setGroupableTests(groupableTests);
    generator.generateWorkspaceAndDependentProjects(projectGenerators);
    ImmutableSet<BuildTarget> requiredBuildTargetsForWorkspace=generator.getRequiredBuildTargets();
    LOG.debug("Required build targets for workspace %s: %s",inputTarget,requiredBuildTargetsForWorkspace);
    requiredBuildTargetsBuilder.addAll(requiredBuildTargetsForWorkspace);
  }
  return requiredBuildTargetsBuilder.build();
}
