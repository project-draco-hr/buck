{
  PartialGraph partialGraph;
  try {
    partialGraph=createPartialGraphs(options).getProjectGraph();
  }
 catch (  BuildTargetException|BuildFileParseException e) {
    throw new HumanReadableException(e);
  }
  ExecutionContext executionContext=createExecutionContext(options,partialGraph.getActionGraph());
  Project project=new Project(ImmutableSet.copyOf(FluentIterable.from(partialGraph.getActionGraph().getNodes()).filter(new Predicate<BuildRule>(){
    @Override public boolean apply(    BuildRule input){
      return input instanceof ProjectConfig;
    }
  }
).transform(new Function<BuildRule,ProjectConfig>(){
    @Override public ProjectConfig apply(    BuildRule input){
      return (ProjectConfig)input;
    }
  }
)),partialGraph.getActionGraph(),options.getBasePathToAliasMap(),options.getJavaPackageFinder(),executionContext,getProjectFilesystem(),options.getPathToDefaultAndroidManifest(),options.getPathToPostProcessScript(),options.getBuckConfig().getPythonInterpreter(),getObjectMapper());
  File tempDir=Files.createTempDir();
  File tempFile=new File(tempDir,"project.json");
  int exitCode;
  try {
    exitCode=project.createIntellijProject(tempFile,executionContext.getProcessExecutor(),!options.getArgumentsFormattedAsBuildTargets().isEmpty(),console.getStdOut(),console.getStdErr());
    if (exitCode != 0) {
      return exitCode;
    }
    List<String> additionalInitialTargets=ImmutableList.of();
    if (options.shouldProcessAnnotations()) {
      try {
        additionalInitialTargets=getAnnotationProcessingTargets(options);
      }
 catch (      BuildTargetException|BuildFileParseException e) {
        throw new HumanReadableException(e);
      }
    }
    if (options.hasInitialTargets() || !additionalInitialTargets.isEmpty()) {
      BuildCommand buildCommand=new BuildCommand(getCommandRunnerParams());
      BuildCommandOptions buildOptions=options.createBuildCommandOptionsWithInitialTargets(additionalInitialTargets);
      exitCode=buildCommand.runCommandWithOptions(buildOptions);
      if (exitCode != 0) {
        return exitCode;
      }
    }
  }
  finally {
    if (console.getVerbosity().shouldPrintOutput()) {
      getStdErr().printf("project.json was written to %s",tempFile.getAbsolutePath());
    }
 else {
      tempFile.delete();
      tempDir.delete();
    }
  }
  if (options.getArguments().isEmpty()) {
    String greenStar=console.getAnsi().asHighlightedSuccessText(" * ");
    getStdErr().printf(console.getAnsi().asHighlightedSuccessText("=== Did you know ===") + "\n" + greenStar+ "You can run `buck project <target>` to generate a minimal project "+ "just for that target.\n"+ greenStar+ "This will make your IDE faster when working on large projects.\n"+ greenStar+ "See buck project --help for more info.\n"+ console.getAnsi().asHighlightedSuccessText("--=* Knowing is half the battle!")+ "\n");
  }
  return 0;
}
