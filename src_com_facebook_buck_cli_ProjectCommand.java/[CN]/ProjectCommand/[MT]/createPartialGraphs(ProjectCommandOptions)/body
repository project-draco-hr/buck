{
  Predicate<TargetNode<?>> projectRootsPredicate;
  Predicate<TargetNode<?>> projectPredicate;
  AssociatedRulePredicate associatedProjectPredicate;
switch (options.getIde()) {
case INTELLIJ:
    projectRootsPredicate=new Predicate<TargetNode<?>>(){
      @Override public boolean apply(      TargetNode<?> input){
        return input.getType() == ProjectConfigDescription.TYPE;
      }
    }
;
  projectPredicate=projectRootsPredicate;
associatedProjectPredicate=new AssociatedRulePredicate(){
  @Override public boolean isMatch(  BuildRule buildRule,  ActionGraph actionGraph){
    ProjectConfig projectConfig;
    if (buildRule instanceof ProjectConfig) {
      projectConfig=(ProjectConfig)buildRule;
    }
 else {
      return false;
    }
    BuildRule projectRule=projectConfig.getProjectRule();
    return (projectRule != null && actionGraph.findBuildRuleByTarget(projectRule.getBuildTarget()) != null);
  }
}
;
break;
case XCODE:
final ImmutableSet<String> defaultExcludePaths=options.getDefaultExcludePaths();
final ImmutableSet<BuildTarget> passedInTargetsSet=ImmutableSet.copyOf(getBuildTargets(options.getArgumentsFormattedAsBuildTargets()));
projectRootsPredicate=new Predicate<TargetNode<?>>(){
@Override public boolean apply(TargetNode<?> input){
BuildRuleType filterType=options.getWorkspaceAndProjects() ? XcodeWorkspaceConfigDescription.TYPE : XcodeProjectConfigDescription.TYPE;
if (filterType != input.getType()) {
return false;
}
String targetName=input.getBuildTarget().getFullyQualifiedName();
for (String prefix : defaultExcludePaths) {
if (targetName.startsWith("//" + prefix) && !passedInTargetsSet.contains(input.getBuildTarget())) {
LOG.debug("Ignoring build target %s (exclude_paths contains %s)",input.getBuildTarget(),prefix);
return false;
}
}
return true;
}
}
;
projectPredicate=new Predicate<TargetNode<?>>(){
@Override public boolean apply(TargetNode<?> input){
return input.getType() == XcodeProjectConfigDescription.TYPE;
}
}
;
associatedProjectPredicate=new AssociatedRulePredicate(){
@Override public boolean isMatch(BuildRule buildRule,ActionGraph actionGraph){
XcodeProjectConfig xcodeProjectConfig;
if (buildRule instanceof XcodeProjectConfig) {
xcodeProjectConfig=(XcodeProjectConfig)buildRule;
}
 else {
return false;
}
for (BuildRule includedBuildRule : xcodeProjectConfig.getRules()) {
if (actionGraph.findBuildRuleByTarget(includedBuildRule.getBuildTarget()) != null) {
return true;
}
}
return false;
}
}
;
break;
default :
throw new IllegalStateException("'ide' should always be of type 'INTELLIJ' or 'XCODE'");
}
Optional<ImmutableSet<BuildTarget>> buildTargets=getRootsFromOptions(options);
if (options.isWithTests()) {
Predicate<TargetNode<?>> testPredicate=new Predicate<TargetNode<?>>(){
@Override public boolean apply(TargetNode<?> input){
return input.getType().isTestRule();
}
}
;
ImmutableList<PartialGraph> partialGraphs=createPartialGraphs(buildTargets,Optional.of(projectRootsPredicate),ImmutableList.of(testPredicate,projectPredicate),ImmutableList.of(AssociatedRulePredicates.associatedTestsRules(),associatedProjectPredicate),getProjectFilesystem(),options.getDefaultIncludes(),getParser(),getBuckEventBus(),console,environment,options.getEnableProfiling());
return new ActionGraphs(partialGraphs.get(0).getTargetGraph().getActionGraph(getBuckEventBus()),Optional.of(partialGraphs.get(1).getTargetGraph().getActionGraph(getBuckEventBus())),partialGraphs.get(2).getTargetGraph().getActionGraph(getBuckEventBus()));
}
 else {
ImmutableList<PartialGraph> partialGraphs=createPartialGraphs(buildTargets,Optional.of(projectRootsPredicate),ImmutableList.of(projectPredicate),ImmutableList.of(associatedProjectPredicate),getProjectFilesystem(),options.getDefaultIncludes(),getParser(),getBuckEventBus(),console,environment,options.getEnableProfiling());
return new ActionGraphs(partialGraphs.get(0).getTargetGraph().getActionGraph(getBuckEventBus()),Optional.<ActionGraph>absent(),partialGraphs.get(1).getTargetGraph().getActionGraph(getBuckEventBus()));
}
}
