{
  RuleJsonPredicate projectRootsPredicate;
  RuleJsonPredicate projectPredicate;
  AssociatedRulePredicate associatedProjectPredicate;
switch (options.getIde()) {
case INTELLIJ:
    projectRootsPredicate=projectPredicate=RuleJsonPredicates.matchBuildRuleType(ProjectConfigDescription.TYPE);
  associatedProjectPredicate=new AssociatedRulePredicate(){
    @Override public boolean isMatch(    BuildRule buildRule,    ActionGraph actionGraph){
      ProjectConfig projectConfig;
      if (buildRule instanceof ProjectConfig) {
        projectConfig=(ProjectConfig)buildRule;
      }
 else {
        return false;
      }
      BuildRule projectRule=projectConfig.getProjectRule();
      return (projectRule != null && actionGraph.findBuildRuleByTarget(projectRule.getBuildTarget()) != null);
    }
  }
;
break;
case XCODE:
final ImmutableSet<String> defaultExcludePaths=options.getDefaultExcludePaths();
final ImmutableSet<BuildTarget> passedInTargetsSet=ImmutableSet.copyOf(getBuildTargets(options.getArgumentsFormattedAsBuildTargets()));
projectRootsPredicate=new RuleJsonPredicate(){
@Override public boolean isMatch(Map<String,Object> rawParseData,BuildRuleType buildRuleType,BuildTarget buildTarget){
if (XcodeProjectConfigDescription.TYPE != buildRuleType && XcodeWorkspaceConfigDescription.TYPE != buildRuleType) {
return false;
}
String targetName=buildTarget.getFullyQualifiedName();
for (String prefix : defaultExcludePaths) {
if (targetName.startsWith("//" + prefix) && !passedInTargetsSet.contains(buildTarget)) {
  LOG.debug("Ignoring build target %s (exclude_paths contains %s)",buildTarget,prefix);
  return false;
}
}
return true;
}
}
;
projectPredicate=RuleJsonPredicates.matchBuildRuleType(XcodeProjectConfigDescription.TYPE);
associatedProjectPredicate=new AssociatedRulePredicate(){
@Override public boolean isMatch(BuildRule buildRule,ActionGraph actionGraph){
XcodeProjectConfig xcodeProjectConfig;
if (buildRule instanceof XcodeProjectConfig) {
xcodeProjectConfig=(XcodeProjectConfig)buildRule;
}
 else {
return false;
}
for (BuildRule includedBuildRule : xcodeProjectConfig.getRules()) {
if (actionGraph.findBuildRuleByTarget(includedBuildRule.getBuildTarget()) != null) {
return true;
}
}
return false;
}
}
;
break;
default :
throw new IllegalStateException("'ide' should always be of type 'INTELLIJ' or 'XCODE'");
}
Optional<ImmutableSet<BuildTarget>> buildTargets=getRootsFromOptions(options);
if (options.isWithTests()) {
ImmutableList<PartialGraph> partialGraphs=PartialGraph.createPartialGraphs(buildTargets,Optional.of(projectRootsPredicate),ImmutableList.of(RuleJsonPredicates.isTestRule(),projectPredicate),ImmutableList.of(AssociatedRulePredicates.associatedTestsRules(),associatedProjectPredicate),getProjectFilesystem(),options.getDefaultIncludes(),getParser(),getBuckEventBus(),console,environment);
return new PartialGraphs(partialGraphs.get(0),Optional.of(partialGraphs.get(1)),partialGraphs.get(2));
}
 else {
ImmutableList<PartialGraph> partialGraphs=PartialGraph.createPartialGraphs(buildTargets,Optional.of(projectRootsPredicate),ImmutableList.of(projectPredicate),ImmutableList.of(associatedProjectPredicate),getProjectFilesystem(),options.getDefaultIncludes(),getParser(),getBuckEventBus(),console,environment);
return new PartialGraphs(partialGraphs.get(0),Optional.<PartialGraph>absent(),partialGraphs.get(1));
}
}
