{
  ActionGraph actionGraph=new TargetGraphToActionGraph(params.getBuckEventBus(),new BuildTargetNodeToBuildRuleTransformer(),params.getFileHashCache()).apply(targetGraphAndTargets.getTargetGraph());
  BuildRuleResolver buildRuleResolver=new BuildRuleResolver(ImmutableSet.copyOf(actionGraph.getNodes()));
  SourcePathResolver sourcePathResolver=new SourcePathResolver(buildRuleResolver);
  JavacOptions javacOptions=new JavaBuckConfig(params.getBuckConfig()).getDefaultJavacOptions();
  IjProject project=new IjProject(targetGraphAndTargets,getJavaPackageFinder(params.getBuckConfig()),JavaFileParser.createJavaFileParser(javacOptions),buildRuleResolver,sourcePathResolver,params.getCell().getFilesystem(),getIntellijAggregationMode(params.getBuckConfig()));
  ImmutableSet<BuildTarget> requiredBuildTargets=project.write();
  if (!requiredBuildTargets.isEmpty()) {
    BuildCommand buildCommand=new BuildCommand();
    buildCommand.setKeepGoing(true);
    buildCommand.setArguments(FluentIterable.from(requiredBuildTargets).transform(Functions.toStringFunction()).toList());
    int exitCode=buildCommand.run(params);
    if (exitCode != 0) {
      params.getConsole().getAnsi().printHighlightedSuccessText(params.getConsole().getStdErr(),"Because the build did not complete successfully some parts of the project may not\n" + "work correctly with IntelliJ. Please fix the errors and run this command again.\n");
    }
    return exitCode;
  }
  return 0;
}
