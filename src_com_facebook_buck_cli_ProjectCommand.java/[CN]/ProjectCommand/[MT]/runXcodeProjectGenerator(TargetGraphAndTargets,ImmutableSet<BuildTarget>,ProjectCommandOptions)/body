{
  ImmutableMap<BuildTarget,ImmutableSet<TargetNode<GraphQLDataDescription.Arg>>> targetsToTransitiveModelDependencies=AppleDescriptions.getTargetsToTransitiveModelDependencies(targetGraphAndTargets.getTargetGraph());
  ImmutableMap<BuildTarget,TargetNode<GraphQLDataDescription.Arg>> mergedGraphQLModels=AppleDescriptions.mergeGraphQLModels(targetsToTransitiveModelDependencies);
  ImmutableSet<TargetNode<GraphQLDataDescription.Arg>> nodes=ImmutableSet.copyOf(mergedGraphQLModels.values());
  TargetGraph targetGraph=AppleDescriptions.getSubgraphWithMergedModels(targetGraphAndTargets.getTargetGraph(),nodes);
  BuildTargetNodeToBuildRuleTransformer ruleGenerator=new BuildTargetNodeToBuildRuleTransformer();
  TargetGraphToActionGraph transformer=new TargetGraphToActionGraph(getBuckEventBus(),ruleGenerator);
  ActionGraph actionGraph=transformer.apply(targetGraph);
  int exitCode;
  try (Build build=options.createBuild(options.getBuckConfig(),actionGraph,getProjectFilesystem(),getAndroidDirectoryResolver(),getBuildEngine(),getArtifactCache(),console,getBuckEventBus(),Optional.<TargetDevice>absent(),getCommandRunnerParams().getPlatform(),getCommandRunnerParams().getEnvironment(),getCommandRunnerParams().getObjectMapper(),getCommandRunnerParams().getClock())){
    exitCode=build.executeAndPrintFailuresToConsole(Iterables.transform(nodes,HasBuildTarget.TO_TARGET),options.isKeepGoing(),console,options.getPathToBuildReport());
  }
   if (exitCode != 0) {
    return exitCode;
  }
  ImmutableSet.Builder<ProjectGenerator.Option> optionsBuilder=ImmutableSet.builder();
  if (options.getReadOnly()) {
    optionsBuilder.add(ProjectGenerator.Option.GENERATE_READ_ONLY_FILES);
  }
  if (options.isWithTests()) {
    optionsBuilder.add(ProjectGenerator.Option.INCLUDE_TESTS);
  }
  boolean combinedProject=options.getCombinedProject();
  ImmutableSet<BuildTarget> targets;
  if (passedInTargetsSet.isEmpty()) {
    targets=FluentIterable.from(targetGraphAndTargets.getProjectRoots()).transform(HasBuildTarget.TO_TARGET).toSet();
  }
 else {
    targets=passedInTargetsSet;
  }
  if (combinedProject) {
    optionsBuilder.addAll(ProjectGenerator.COMBINED_PROJECT_OPTIONS);
  }
 else {
    optionsBuilder.addAll(ProjectGenerator.SEPARATED_PROJECT_OPTIONS);
  }
  LOG.debug("Generating workspace for config targets %s",targets);
  Map<Path,ProjectGenerator> projectGenerators=new HashMap<>();
  ImmutableSet<TargetNode<?>> testTargetNodes=targetGraphAndTargets.getAssociatedTests();
  ImmutableSet<TargetNode<AppleTestDescription.Arg>> groupableTests=options.getCombineTestBundles() ? AppleBuildRules.filterGroupableTests(testTargetNodes) : ImmutableSet.<TargetNode<AppleTestDescription.Arg>>of();
  for (  BuildTarget workspaceTarget : targets) {
    TargetNode<?> workspaceNode=Preconditions.checkNotNull(targetGraphAndTargets.getTargetGraph().get(workspaceTarget));
    if (workspaceNode.getType() != XcodeWorkspaceConfigDescription.TYPE) {
      throw new HumanReadableException("%s must be a xcode_workspace_config",workspaceTarget);
    }
    WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(getProjectFilesystem(),targetGraphAndTargets.getTargetGraph(),castToXcodeWorkspaceTargetNode(workspaceNode),optionsBuilder.build(),combinedProject,new ParserConfig(options.getBuckConfig()).getBuildFileName());
    generator.setGroupableTests(groupableTests);
    generator.generateWorkspaceAndDependentProjects(projectGenerators);
  }
  return 0;
}
