{
  ImmutableSet.Builder<ProjectGenerator.Option> optionsBuilder=ImmutableSet.builder();
  if (options.getReadOnly()) {
    optionsBuilder.add(ProjectGenerator.Option.GENERATE_READ_ONLY_FILES);
  }
  if (options.isWithTests()) {
    optionsBuilder.add(ProjectGenerator.Option.INCLUDE_TESTS);
  }
  boolean combinedProject=options.getCombinedProject();
  ImmutableSet<BuildTarget> targets;
  if (passedInTargetsSet.isEmpty()) {
    targets=FluentIterable.from(targetGraphAndTargets.getProjectRoots()).transform(HasBuildTarget.TO_TARGET).toSet();
  }
 else {
    targets=passedInTargetsSet;
  }
  if (combinedProject) {
    optionsBuilder.addAll(ProjectGenerator.COMBINED_PROJECT_OPTIONS);
  }
 else {
    optionsBuilder.addAll(ProjectGenerator.SEPARATED_PROJECT_OPTIONS);
  }
  LOG.debug("Generating workspace for config targets %s",targets);
  Map<Path,ProjectGenerator> projectGenerators=new HashMap<>();
  ImmutableSet<TargetNode<?>> testTargetNodes=targetGraphAndTargets.getAssociatedTests();
  ImmutableSet<TargetNode<AppleTestDescription.Arg>> groupableTests=options.getCombineTestBundles() ? AppleBuildRules.filterGroupableTests(testTargetNodes) : ImmutableSet.<TargetNode<AppleTestDescription.Arg>>of();
  ImmutableSet.Builder<BuildTarget> requiredBuildTargetsBuilder=ImmutableSet.builder();
  for (  BuildTarget workspaceTarget : targets) {
    TargetNode<?> workspaceNode=Preconditions.checkNotNull(targetGraphAndTargets.getTargetGraph().get(workspaceTarget));
    if (workspaceNode.getType() != XcodeWorkspaceConfigDescription.TYPE) {
      throw new HumanReadableException("%s must be a xcode_workspace_config",workspaceTarget);
    }
    WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(getProjectFilesystem(),targetGraphAndTargets.getTargetGraph(),castToXcodeWorkspaceTargetNode(workspaceNode),optionsBuilder.build(),combinedProject,new ParserConfig(options.getBuckConfig()).getBuildFileName());
    generator.setGroupableTests(groupableTests);
    generator.generateWorkspaceAndDependentProjects(projectGenerators);
    ImmutableSet<BuildTarget> requiredBuildTargetsForWorkspace=generator.getRequiredBuildTargets();
    LOG.debug("Required build targets for workspace %s: %s",workspaceTarget,requiredBuildTargetsForWorkspace);
    requiredBuildTargetsBuilder.addAll(requiredBuildTargetsForWorkspace);
  }
  int exitCode=0;
  ImmutableSet<BuildTarget> requiredBuildTargets=requiredBuildTargetsBuilder.build();
  if (!requiredBuildTargets.isEmpty()) {
    BuildCommand buildCommand=new BuildCommand(getCommandRunnerParams());
    BuildCommandOptions buildCommandOptions=new BuildCommandOptions(options.getBuckConfig());
    buildCommandOptions.setArguments(FluentIterable.from(requiredBuildTargets).transform(Functions.toStringFunction()).toList());
    exitCode=buildCommand.runCommandWithOptions(buildCommandOptions);
  }
  return exitCode;
}
