{
  ActionGraph actionGraph=targetGraphTransformer.apply(targetGraphAndTargets.getTargetGraph());
  try (ExecutionContext executionContext=createExecutionContext()){
    Project project=new Project(new SourcePathResolver(new BuildRuleResolver(actionGraph.getNodes())),FluentIterable.from(actionGraph.getNodes()).filter(ProjectConfig.class).toSortedSet(Ordering.natural()),actionGraph,options.getBasePathToAliasMap(),options.getJavaPackageFinder(),executionContext,new FilesystemBackedBuildFileTree(getProjectFilesystem(),new ParserConfig(options.getBuckConfig()).getBuildFileName()),getProjectFilesystem(),options.getPathToDefaultAndroidManifest(),new IntellijConfig(options.getBuckConfig()),options.getPathToPostProcessScript(),new PythonBuckConfig(options.getBuckConfig()).getPythonInterpreter(),getObjectMapper(),options.isAndroidAutoGenerateDisabled());
    File tempDir=Files.createTempDir();
    File tempFile=new File(tempDir,"project.json");
    int exitCode;
    try {
      exitCode=project.createIntellijProject(tempFile,executionContext.getProcessExecutor(),!passedInTargetsSet.isEmpty(),console.getStdOut(),console.getStdErr());
      if (exitCode != 0) {
        return exitCode;
      }
      List<String> additionalInitialTargets=ImmutableList.of();
      if (options.shouldProcessAnnotations()) {
        try {
          additionalInitialTargets=getAnnotationProcessingTargets(projectGraph,passedInTargetsSet);
        }
 catch (        BuildTargetException|BuildFileParseException e) {
          throw new HumanReadableException(e);
        }
      }
      if (options.hasInitialTargets() || !additionalInitialTargets.isEmpty()) {
        BuildCommand buildCommand=new BuildCommand(getCommandRunnerParams());
        BuildCommandOptions buildOptions=options.createBuildCommandOptionsWithInitialTargets(additionalInitialTargets);
        exitCode=buildCommand.runCommandWithOptions(buildOptions);
        if (exitCode != 0) {
          return exitCode;
        }
      }
    }
  finally {
      if (console.getVerbosity().shouldPrintOutput()) {
        getStdErr().printf("project.json was written to %s",tempFile.getAbsolutePath());
      }
 else {
        tempFile.delete();
        tempDir.delete();
      }
    }
    if (passedInTargetsSet.isEmpty()) {
      String greenStar=console.getAnsi().asHighlightedSuccessText(" * ");
      getStdErr().printf(console.getAnsi().asHighlightedSuccessText("=== Did you know ===") + "\n" + greenStar+ "You can run `buck project <target>` to generate a minimal project "+ "just for that target.\n"+ greenStar+ "This will make your IDE faster when working on large projects.\n"+ greenStar+ "See buck project --help for more info.\n"+ console.getAnsi().asHighlightedSuccessText("--=* Knowing is half the battle!")+ "\n");
    }
    return 0;
  }
 }
