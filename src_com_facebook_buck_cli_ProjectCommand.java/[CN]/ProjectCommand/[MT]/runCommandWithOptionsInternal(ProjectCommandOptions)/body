{
  if (options.getIde() == ProjectCommandOptions.Ide.XCODE) {
    checkForAndKillXcodeIfRunning(options.getIdePrompt());
  }
  TargetGraph fullGraph;
  try {
    fullGraph=getParser().buildTargetGraphForTargetNodeSpecs(ImmutableList.of(new TargetNodePredicateSpec(Predicates.<TargetNode<?>>alwaysTrue(),getProjectFilesystem().getIgnorePaths())),options.getDefaultIncludes(),getBuckEventBus(),console,environment,options.getEnableProfiling());
  }
 catch (  BuildTargetException|BuildFileParseException e) {
    throw new HumanReadableException(e);
  }
  ImmutableSet<BuildTarget> passedInTargetsSet=getBuildTargets(options.getArgumentsFormattedAsBuildTargets());
  TargetGraphAndTargets targetGraphAndTargets=createTargetGraph(fullGraph,options.getIde(),passedInTargetsSet,options.getDefaultExcludePaths(),options.isWithTests());
switch (options.getIde()) {
case INTELLIJ:
    return runIntellijProjectGenerator(fullGraph,targetGraphAndTargets,passedInTargetsSet,options);
case XCODE:
  return runXcodeProjectGenerator(targetGraphAndTargets,passedInTargetsSet,options);
default :
throw new IllegalStateException("'ide' should always be of type 'INTELLIJ' or 'XCODE'");
}
}
