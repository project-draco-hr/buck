{
  if (options.getIde() == ProjectCommandOptions.Ide.XCODE) {
    checkForAndKillXcodeIfRunning(options.getIdePrompt());
  }
  ImmutableSet<BuildTarget> passedInTargetsSet=getBuildTargets(options.getArgumentsFormattedAsBuildTargets());
  ProjectGraphParser projectGraphParser=ProjectGraphParsers.createProjectGraphParser(getParser(),new ParserConfig(options.getBuckConfig()),getBuckEventBus(),console,environment,options.getEnableProfiling());
  TargetGraph projectGraph=projectGraphParser.buildTargetGraphForTargetNodeSpecs(getTargetNodeSpecsForIde(options.getIde(),passedInTargetsSet,getProjectFilesystem().getIgnorePaths()));
  ProjectPredicates projectPredicates=ProjectPredicates.forIde(options.getIde());
  ImmutableSet<BuildTarget> graphRoots;
  if (!passedInTargetsSet.isEmpty()) {
    graphRoots=passedInTargetsSet;
  }
 else {
    graphRoots=getRootsFromPredicate(projectGraph,projectPredicates.getProjectRootsPredicate());
  }
  TargetGraphAndTargets targetGraphAndTargets=createTargetGraph(projectGraph,graphRoots,projectGraphParser,projectPredicates.getAssociatedProjectPredicate(),options.isWithTests(),options.getIde(),getProjectFilesystem().getIgnorePaths());
  if (options.getDryRun()) {
    for (    TargetNode<?> targetNode : targetGraphAndTargets.getTargetGraph().getNodes()) {
      console.getStdOut().println(targetNode.toString());
    }
    return 0;
  }
switch (options.getIde()) {
case INTELLIJ:
    return runIntellijProjectGenerator(projectGraph,targetGraphAndTargets,passedInTargetsSet,options);
case XCODE:
  return runXcodeProjectGenerator(targetGraphAndTargets,passedInTargetsSet,options);
default :
throw new IllegalStateException("'ide' should always be of type 'INTELLIJ' or 'XCODE'");
}
}
