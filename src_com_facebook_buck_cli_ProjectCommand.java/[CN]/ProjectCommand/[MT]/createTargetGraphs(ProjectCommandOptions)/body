{
  Predicate<TargetNode<?>> projectRootsPredicate;
  Predicate<TargetNode<?>> projectPredicate;
  AssociatedTargetNodePredicate associatedProjectPredicate;
switch (options.getIde()) {
case INTELLIJ:
    projectRootsPredicate=new Predicate<TargetNode<?>>(){
      @Override public boolean apply(      TargetNode<?> input){
        return input.getType() == ProjectConfigDescription.TYPE;
      }
    }
;
  projectPredicate=projectRootsPredicate;
associatedProjectPredicate=new AssociatedTargetNodePredicate(){
  @Override public boolean apply(  TargetNode<?> targetNode,  TargetGraph targetGraph){
    ProjectConfigDescription.Arg projectArg;
    if (targetNode.getType() == ProjectConfigDescription.TYPE) {
      projectArg=(ProjectConfigDescription.Arg)targetNode.getConstructorArg();
    }
 else {
      return false;
    }
    BuildTarget projectTarget=null;
    if (projectArg.srcTarget.isPresent()) {
      projectTarget=projectArg.srcTarget.get();
    }
 else     if (projectArg.testTarget.isPresent()) {
      projectTarget=projectArg.testTarget.get();
    }
    return (projectTarget != null && targetGraph.get(projectTarget) != null);
  }
}
;
break;
case XCODE:
final ImmutableSet<String> defaultExcludePaths=options.getDefaultExcludePaths();
final ImmutableSet<BuildTarget> passedInTargetsSet=ImmutableSet.copyOf(getBuildTargets(options.getArgumentsFormattedAsBuildTargets()));
projectRootsPredicate=new Predicate<TargetNode<?>>(){
@Override public boolean apply(TargetNode<?> input){
BuildRuleType filterType=options.getWorkspaceAndProjects() ? XcodeWorkspaceConfigDescription.TYPE : XcodeProjectConfigDescription.TYPE;
if (filterType != input.getType()) {
return false;
}
String targetName=input.getBuildTarget().getFullyQualifiedName();
for (String prefix : defaultExcludePaths) {
if (targetName.startsWith("//" + prefix) && !passedInTargetsSet.contains(input.getBuildTarget())) {
LOG.debug("Ignoring build target %s (exclude_paths contains %s)",input.getBuildTarget(),prefix);
return false;
}
}
return true;
}
}
;
projectPredicate=new Predicate<TargetNode<?>>(){
@Override public boolean apply(TargetNode<?> input){
return input.getType() == XcodeProjectConfigDescription.TYPE;
}
}
;
associatedProjectPredicate=new AssociatedTargetNodePredicate(){
@Override public boolean apply(TargetNode<?> targetNode,TargetGraph targetGraph){
XcodeProjectConfigDescription.Arg projectArg;
if (targetNode.getType() == XcodeProjectConfigDescription.TYPE) {
projectArg=(XcodeProjectConfigDescription.Arg)targetNode.getConstructorArg();
}
 else {
return false;
}
for (BuildTarget includedBuildTarget : projectArg.rules) {
if (targetGraph.get(includedBuildTarget) != null) {
return true;
}
}
return false;
}
}
;
break;
default :
throw new IllegalStateException("'ide' should always be of type 'INTELLIJ' or 'XCODE'");
}
TargetGraph fullGraph=getParser().buildTargetGraphForTargetNodeSpecs(ImmutableList.of(new TargetNodePredicateSpec(Predicates.<TargetNode<?>>alwaysTrue(),getProjectFilesystem().getIgnorePaths())),options.getDefaultIncludes(),getBuckEventBus(),console,environment,options.getEnableProfiling());
ImmutableSet<BuildTarget> mainRoots=getRootsFromOptionsWithPredicate(options,projectRootsPredicate);
TargetGraph mainGraph=getParser().buildTargetGraphForBuildTargets(mainRoots,options.getDefaultIncludes(),getBuckEventBus(),console,environment,options.getEnableProfiling());
Optional<TargetGraph> testGraph=Optional.absent();
if (options.isWithTests()) {
Predicate<TargetNode<?>> testPredicate=new Predicate<TargetNode<?>>(){
@Override public boolean apply(TargetNode<?> input){
return input.getType().isTestRule();
}
}
;
AssociatedTargetNodePredicate associatedTestsPredicate=new AssociatedTargetNodePredicate(){
@Override public boolean apply(TargetNode<?> targetNode,TargetGraph targetGraph){
ImmutableSortedSet<BuildTarget> sourceUnderTest;
if (targetNode.getConstructorArg() instanceof HasSourceUnderTest) {
HasSourceUnderTest argWithSourceUnderTest=(HasSourceUnderTest)targetNode.getConstructorArg();
sourceUnderTest=argWithSourceUnderTest.getSourceUnderTest();
}
 else {
return false;
}
for (BuildTarget buildTargetUnderTest : sourceUnderTest) {
if (targetGraph.get(buildTargetUnderTest) != null) {
return true;
}
}
return false;
}
}
;
testGraph=Optional.of(getAssociatedTargetGraph(mainGraph,mainRoots,fullGraph,testPredicate,associatedTestsPredicate,options));
}
TargetGraph projectGraph=getAssociatedTargetGraph(testGraph.or(mainGraph),ImmutableSet.<BuildTarget>of(),fullGraph,projectPredicate,associatedProjectPredicate,options);
return new TargetGraphs(mainGraph,testGraph,projectGraph);
}
