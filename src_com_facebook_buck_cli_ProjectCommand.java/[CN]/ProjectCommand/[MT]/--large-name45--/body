{
  ImmutableSet<BuildTarget> roots=rootsOptional.or(parser.filterAllTargetsInProject(filesystem,includes,rootsPredicate.or(RuleJsonPredicates.alwaysTrue()),console,environment,eventBus,enableProfiling));
  ImmutableList.Builder<PartialGraph> graphs=ImmutableList.builder();
  PartialGraph partialGraph=PartialGraph.createPartialGraph(roots,includes,parser,eventBus,console,environment);
  graphs.add(partialGraph);
  for (int i=0; i < predicates.size(); i++) {
    RuleJsonPredicate predicate=predicates.get(i);
    AssociatedRulePredicate associatedRulePredicate=associatedRulePredicates.get(i);
    PartialGraph associatedPartialGraph=PartialGraph.createPartialGraph(predicate,filesystem,includes,parser,eventBus,console,environment,enableProfiling);
    ImmutableSet.Builder<BuildTarget> allTargetsBuilder=ImmutableSet.builder();
    allTargetsBuilder.addAll(partialGraph.getTargets());
    for (    BuildTarget buildTarget : associatedPartialGraph.getTargets()) {
      BuildRule buildRule=associatedPartialGraph.getActionGraph().findBuildRuleByTarget(buildTarget);
      if (associatedRulePredicate.isMatch(buildRule,partialGraph.getActionGraph())) {
        allTargetsBuilder.add(buildRule.getBuildTarget());
      }
    }
    partialGraph=PartialGraph.createPartialGraph(allTargetsBuilder.build(),includes,parser,eventBus,console,environment);
    graphs.add(partialGraph);
  }
  return graphs.build();
}
