{
  if (getIde(params.getBuckConfig()) == ProjectCommand.Ide.XCODE) {
    checkForAndKillXcodeIfRunning(params,getIdePrompt(params.getBuckConfig()));
  }
  Pair<ImmutableSet<BuildTarget>,TargetGraph> traversalResult=null;
  try {
    traversalResult=params.getParser().buildTargetGraphForTargetNodeSpecs(parseArgumentsAsTargetNodeSpecs(params.getBuckConfig(),params.getRepository().getFilesystem().getIgnorePaths(),getArguments()),new ParserConfig(params.getBuckConfig()),params.getBuckEventBus(),params.getConsole(),params.getEnvironment(),getEnableProfiling());
  }
 catch (  BuildTargetException|BuildFileParseException|HumanReadableException e) {
    params.getConsole().printBuildFailureWithoutStacktrace(e);
    return 1;
  }
  ImmutableSet<BuildTarget> passedInTargetsSet=traversalResult.getFirst();
  ProjectGraphParser projectGraphParser=ProjectGraphParsers.createProjectGraphParser(params.getParser(),new ParserConfig(params.getBuckConfig()),params.getBuckEventBus(),params.getConsole(),params.getEnvironment(),getEnableProfiling());
  TargetGraph projectGraph=projectGraphParser.buildTargetGraphForTargetNodeSpecs(getTargetNodeSpecsForIde(getIde(params.getBuckConfig()),passedInTargetsSet,params.getRepository().getFilesystem().getIgnorePaths(),isExperimentalIntelliJProjectGenerationEnabled()));
  ProjectPredicates projectPredicates=ProjectPredicates.forIde(getIde(params.getBuckConfig()));
  ImmutableSet<BuildTarget> graphRoots;
  if (!passedInTargetsSet.isEmpty()) {
    ImmutableSet<BuildTarget> supplementalGraphRoots=ImmutableSet.of();
    if (getIde(params.getBuckConfig()) == Ide.INTELLIJ && !isExperimentalIntelliJProjectGenerationEnabled()) {
      supplementalGraphRoots=getRootBuildTargetsForIntelliJ(getIde(params.getBuckConfig()),projectGraph,projectPredicates);
    }
    graphRoots=Sets.union(passedInTargetsSet,supplementalGraphRoots).immutableCopy();
  }
 else {
    graphRoots=getRootsFromPredicate(projectGraph,projectPredicates.getProjectRootsPredicate());
  }
  TargetGraphAndTargets targetGraphAndTargets=createTargetGraph(projectGraph,graphRoots,projectGraphParser,projectPredicates.getAssociatedProjectPredicate(),isWithTests(),isWithDependenciesTests(),getIde(params.getBuckConfig()),params.getRepository().getFilesystem().getIgnorePaths(),isExperimentalIntelliJProjectGenerationEnabled());
  if (getDryRun()) {
    for (    TargetNode<?> targetNode : targetGraphAndTargets.getTargetGraph().getNodes()) {
      params.getConsole().getStdOut().println(targetNode.toString());
    }
    return 0;
  }
  params.getBuckEventBus().post(ProjectGenerationEvent.started());
  int result;
  try {
switch (getIde(params.getBuckConfig())) {
case INTELLIJ:
      result=runIntellijProjectGenerator(params,projectGraph,targetGraphAndTargets,passedInTargetsSet);
    break;
case XCODE:
  result=runXcodeProjectGenerator(params,targetGraphAndTargets,passedInTargetsSet);
break;
default :
throw new IllegalStateException("'ide' should always be of type 'INTELLIJ' or 'XCODE'");
}
}
  finally {
params.getBuckEventBus().post(ProjectGenerationEvent.finished());
}
return result;
}
