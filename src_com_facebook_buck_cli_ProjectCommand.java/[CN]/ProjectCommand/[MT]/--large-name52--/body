{
  TargetGraph fullGraph=parser.buildTargetGraph(ImmutableList.of(new TargetNodePredicateSpec(Predicates.<TargetNode<?>>alwaysTrue(),filesystem.getIgnorePaths())),includes,eventBus,console,environment,enableProfiling);
  ImmutableSet<BuildTarget> allTargets=FluentIterable.from(fullGraph.getNodes()).transform(HasBuildTarget.TO_TARGET).toSet();
  ImmutableSet<BuildTarget> roots;
  if (rootsOptional.isPresent()) {
    roots=rootsOptional.get();
  }
 else   if (rootsPredicate.isPresent()) {
    roots=filterTargetsFromGraph(fullGraph,rootsPredicate.get());
  }
 else {
    roots=allTargets;
  }
  ImmutableList.Builder<PartialGraph> graphs=ImmutableList.builder();
  PartialGraph partialGraph=PartialGraph.createPartialGraph(roots,includes,parser,eventBus,console,environment,predicates.size() > 0 ? new BuildRuleResolver() : resolver);
  graphs.add(partialGraph);
  for (int i=0; i < predicates.size(); i++) {
    Predicate<TargetNode<?>> predicate=predicates.get(i);
    AssociatedRulePredicate associatedRulePredicate=associatedRulePredicates.get(i);
    ImmutableSet<BuildTarget> associatedRules=filterTargetsFromGraph(fullGraph,predicate);
    PartialGraph associatedPartialGraph=PartialGraph.createPartialGraph(associatedRules,includes,parser,eventBus,console,environment,new BuildRuleResolver());
    ImmutableSet.Builder<BuildTarget> allTargetsBuilder=ImmutableSet.builder();
    allTargetsBuilder.addAll(partialGraph.getTargets());
    for (    BuildTarget buildTarget : associatedPartialGraph.getTargets()) {
      BuildRule buildRule=associatedPartialGraph.getActionGraph().findBuildRuleByTarget(buildTarget);
      if (buildRule != null && associatedRulePredicate.isMatch(buildRule,partialGraph.getActionGraph())) {
        allTargetsBuilder.add(buildRule.getBuildTarget());
      }
    }
    partialGraph=PartialGraph.createPartialGraph(allTargetsBuilder.build(),includes,parser,eventBus,console,environment,i == predicates.size() - 1 ? resolver : new BuildRuleResolver());
    graphs.add(partialGraph);
  }
  return graphs.build();
}
