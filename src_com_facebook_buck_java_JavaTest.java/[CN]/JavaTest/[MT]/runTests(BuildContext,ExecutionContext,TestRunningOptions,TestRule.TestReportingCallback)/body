{
  Set<String> testClassNames=getClassNamesForSources();
  LOG.debug("Testing these classes: %s",testClassNames.toString());
  if (testClassNames.isEmpty()) {
    return ImmutableList.of();
  }
  Iterable<String> reorderedTestClasses=reorderClasses(testClassNames,options.isShufflingTests());
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  Path pathToTestOutput=getPathToTestOutputDirectory();
  Path tmpDirectory=getPathToTmpDirectory();
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),pathToTestOutput));
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),tmpDirectory));
  ImmutableSet<Path> classpathEntries=ImmutableSet.<Path>builder().addAll(getTransitiveClasspathEntries().values()).addAll(additionalClasspathEntries).addAll(getBootClasspathEntries(executionContext)).build();
  ImmutableList<String> properVmArgs=amendVmArgs(this.vmArgs,executionContext.getTargetDeviceOptional());
  junit=new JUnitStep(getProjectFilesystem(),classpathEntries,reorderedTestClasses,properVmArgs,nativeLibsEnvironment,pathToTestOutput,getBuildTarget().getBasePath(),tmpDirectory,executionContext.isCodeCoverageEnabled(),executionContext.isDebugEnabled(),executionContext.getBuckEventBus().getBuildId(),options.getTestSelectorList(),options.isDryRun(),testType,testRuleTimeoutMs,stdOutLogLevel,stdErrLogLevel,options.getPathToJavaAgent());
  steps.add(junit);
  return steps.build();
}
