{
  Manifest manifest=new Manifest();
  ProjectFilesystem filesystem=context.getProjectFilesystem();
  if (manifestFile != null) {
    FileInputStream manifestStream=new FileInputStream(filesystem.getFileForRelativePath(manifestFile));
    boolean readSuccessfully=false;
    try {
      manifest.read(manifestStream);
      readSuccessfully=true;
    }
  finally {
      Closeables.close(manifestStream,!readSuccessfully);
    }
  }
 else {
    manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION,"1.0");
  }
  try (JarOutputStream outputFile=new JarOutputStream(new BufferedOutputStream(new FileOutputStream(filesystem.getFileForRelativePath(pathToOutputFile))))){
    Set<String> alreadyAddedEntries=Sets.newHashSet();
    ProjectFilesystem projectFilesystem=context.getProjectFilesystem();
    for (    String entry : entriesToJar) {
      File file=projectFilesystem.getFileForRelativePath(entry);
      if (file.isFile()) {
        copyZipEntriesToJar(file,outputFile,manifest,alreadyAddedEntries,context.getBuckEventBus());
      }
 else       if (file.isDirectory()) {
        addFilesInDirectoryToJar(file,outputFile,alreadyAddedEntries,context.getBuckEventBus());
      }
 else {
        throw new IllegalStateException("Must be a file or directory: " + file);
      }
    }
    if (mainClass != null) {
      manifest.getMainAttributes().put(Attributes.Name.MAIN_CLASS,mainClass);
    }
    JarEntry manifestEntry=new JarEntry(JarFile.MANIFEST_NAME);
    outputFile.putNextEntry(manifestEntry);
    manifest.write(outputFile);
  }
 }
