{
  final SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  final BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  final FakeFileHashCache hashCache=FakeFileHashCache.createFromStrings(ImmutableMap.<String,String>builder().put("preprocessor",Strings.repeat("a",40)).put("compiler",Strings.repeat("a",40)).put("test.o",Strings.repeat("b",40)).put("test.cpp",Strings.repeat("c",40)).put("different",Strings.repeat("d",40)).put("foo/test.h",Strings.repeat("e",40)).put("path/to/a/plugin.so",Strings.repeat("f",40)).put("path/to/a/different/plugin.so",Strings.repeat("a0",40)).build());
class TestData {
    public RuleKey generate(    PreprocessorFlags flags){
      return new DefaultRuleKeyBuilderFactory(hashCache,pathResolver).build(CxxPreprocessAndCompile.preprocess(params,pathResolver,new PreprocessorDelegate(pathResolver,DEFAULT_SANITIZER,DEFAULT_WORKING_DIR,DEFAULT_PREPROCESSOR,flags,DEFAULT_FRAMEWORK_PATH_SEARCH_PATH_FUNCTION,DEFAULT_INCLUDES),new CompilerDelegate(pathResolver,DEFAULT_SANITIZER,DEFAULT_COMPILER,CxxToolFlags.of()),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_SANITIZER));
    }
  }
  TestData testData=new TestData();
  PreprocessorFlags defaultFlags=PreprocessorFlags.builder().build();
  PreprocessorFlags alteredFlags=defaultFlags.withFrameworkPaths(FrameworkPath.ofSourcePath(new FakeSourcePath("different")));
  assertNotEquals(testData.generate(defaultFlags),testData.generate(alteredFlags));
}
