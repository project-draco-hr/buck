{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(FakeFileHashCache.createFromStrings(ImmutableMap.<String,String>builder().put("preprocessor",Strings.repeat("a",40)).put("compiler",Strings.repeat("a",40)).put("test.o",Strings.repeat("b",40)).put("test.cpp",Strings.repeat("c",40)).put("different",Strings.repeat("d",40)).put("foo/test.h",Strings.repeat("e",40)).put("path/to/a/plugin.so",Strings.repeat("f",40)).put("path/to/a/different/plugin.so",Strings.repeat("a0",40)).build()),pathResolver);
  RuleKey defaultRuleKey=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,CxxPreprocessAndCompileStep.Operation.COMPILE,Optional.<Preprocessor>absent(),Optional.<ImmutableList<String>>absent(),Optional.<ImmutableList<String>>absent(),Optional.of(DEFAULT_COMPILER),Optional.of(DEFAULT_PLATFORM_FLAGS),Optional.of(DEFAULT_RULE_FLAGS),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_HEADER_MAPS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  RuleKey compilerChange=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,CxxPreprocessAndCompileStep.Operation.COMPILE,Optional.<Preprocessor>absent(),Optional.<ImmutableList<String>>absent(),Optional.<ImmutableList<String>>absent(),Optional.<Compiler>of(new DefaultCompiler(new HashedFileTool(Paths.get("different")))),Optional.of(DEFAULT_PLATFORM_FLAGS),Optional.of(DEFAULT_RULE_FLAGS),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_HEADER_MAPS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,compilerChange);
  RuleKey operationChange=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,CxxPreprocessAndCompileStep.Operation.PREPROCESS,Optional.of(DEFAULT_PREPROCESSOR),Optional.of(DEFAULT_PLATFORM_FLAGS),Optional.of(DEFAULT_RULE_FLAGS),Optional.<Compiler>absent(),Optional.<ImmutableList<String>>absent(),Optional.<ImmutableList<String>>absent(),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_HEADER_MAPS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,operationChange);
  RuleKey platformFlagsChange=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,CxxPreprocessAndCompileStep.Operation.COMPILE,Optional.<Preprocessor>absent(),Optional.<ImmutableList<String>>absent(),Optional.<ImmutableList<String>>absent(),Optional.of(DEFAULT_COMPILER),Optional.of(ImmutableList.of("-different")),Optional.of(DEFAULT_RULE_FLAGS),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_HEADER_MAPS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,platformFlagsChange);
  RuleKey ruleFlagsChange=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,CxxPreprocessAndCompileStep.Operation.COMPILE,Optional.<Preprocessor>absent(),Optional.<ImmutableList<String>>absent(),Optional.<ImmutableList<String>>absent(),Optional.of(DEFAULT_COMPILER),Optional.of(DEFAULT_PLATFORM_FLAGS),Optional.of(ImmutableList.of("-other","flags")),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_HEADER_MAPS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,ruleFlagsChange);
  RuleKey inputChange=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,CxxPreprocessAndCompileStep.Operation.COMPILE,Optional.<Preprocessor>absent(),Optional.<ImmutableList<String>>absent(),Optional.<ImmutableList<String>>absent(),Optional.of(DEFAULT_COMPILER),Optional.of(DEFAULT_PLATFORM_FLAGS),Optional.of(DEFAULT_RULE_FLAGS),DEFAULT_OUTPUT,new TestSourcePath("different"),DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_HEADER_MAPS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,inputChange);
  RuleKey includesChange=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,CxxPreprocessAndCompileStep.Operation.COMPILE,Optional.<Preprocessor>absent(),Optional.<ImmutableList<String>>absent(),Optional.<ImmutableList<String>>absent(),Optional.of(DEFAULT_COMPILER),Optional.of(DEFAULT_PLATFORM_FLAGS),Optional.of(DEFAULT_RULE_FLAGS),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,ImmutableSet.of(Paths.get("different")),DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_HEADER_MAPS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertEquals(defaultRuleKey,includesChange);
  RuleKey systemIncludesChange=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,CxxPreprocessAndCompileStep.Operation.COMPILE,Optional.<Preprocessor>absent(),Optional.<ImmutableList<String>>absent(),Optional.<ImmutableList<String>>absent(),Optional.of(DEFAULT_COMPILER),Optional.of(DEFAULT_PLATFORM_FLAGS),Optional.of(DEFAULT_RULE_FLAGS),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,ImmutableSet.of(Paths.get("different")),DEFAULT_HEADER_MAPS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertEquals(defaultRuleKey,systemIncludesChange);
  RuleKey headerMapsIncludesChange=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,CxxPreprocessAndCompileStep.Operation.COMPILE,Optional.<Preprocessor>absent(),Optional.<ImmutableList<String>>absent(),Optional.<ImmutableList<String>>absent(),Optional.of(DEFAULT_COMPILER),Optional.of(DEFAULT_PLATFORM_FLAGS),Optional.of(DEFAULT_RULE_FLAGS),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,ImmutableSet.of(Paths.get("different")),DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertEquals(defaultRuleKey,headerMapsIncludesChange);
  RuleKey frameworkRootsChange=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,CxxPreprocessAndCompileStep.Operation.COMPILE,Optional.<Preprocessor>absent(),Optional.<ImmutableList<String>>absent(),Optional.<ImmutableList<String>>absent(),Optional.of(DEFAULT_COMPILER),Optional.of(DEFAULT_PLATFORM_FLAGS),Optional.of(DEFAULT_RULE_FLAGS),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_HEADER_MAPS,ImmutableSet.of(Paths.get("different")),DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,frameworkRootsChange);
}
