{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(FakeFileHashCache.createFromStrings(ImmutableMap.<String,String>builder().put("compiler",Strings.repeat("a",40)).put("test.o",Strings.repeat("b",40)).put("test.cpp",Strings.repeat("c",40)).put("different",Strings.repeat("d",40)).put("foo/test.h",Strings.repeat("e",40)).put("path/to/a/plugin.so",Strings.repeat("f",40)).put("path/to/a/different/plugin.so",Strings.repeat("a0",40)).build()),pathResolver);
  RuleKeyPair defaultRuleKey=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,DEFAULT_COMPILER,CxxPreprocessAndCompileStep.Operation.COMPILE,DEFAULT_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  RuleKeyPair compilerChange=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,new HashedFileTool(Paths.get("different")),CxxPreprocessAndCompileStep.Operation.COMPILE,DEFAULT_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,compilerChange);
  RuleKeyPair operationChange=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,DEFAULT_COMPILER,CxxPreprocessAndCompileStep.Operation.PREPROCESS,DEFAULT_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,operationChange);
  RuleKeyPair flagsChange=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,DEFAULT_COMPILER,CxxPreprocessAndCompileStep.Operation.COMPILE,ImmutableList.of("-different"),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,flagsChange);
  RuleKeyPair inputChange=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,DEFAULT_COMPILER,CxxPreprocessAndCompileStep.Operation.COMPILE,DEFAULT_FLAGS,DEFAULT_OUTPUT,new TestSourcePath("different"),DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,inputChange);
  RuleKeyPair includesChange=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,DEFAULT_COMPILER,CxxPreprocessAndCompileStep.Operation.COMPILE,DEFAULT_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,ImmutableList.of(Paths.get("different")),DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertEquals(defaultRuleKey,includesChange);
  RuleKeyPair systemIncludesChange=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,DEFAULT_COMPILER,CxxPreprocessAndCompileStep.Operation.COMPILE,DEFAULT_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,ImmutableList.of(Paths.get("different")),DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertEquals(defaultRuleKey,systemIncludesChange);
  RuleKeyPair frameworkRootsChange=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,DEFAULT_COMPILER,CxxPreprocessAndCompileStep.Operation.COMPILE,DEFAULT_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,ImmutableList.of(Paths.get("different")),DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,frameworkRootsChange);
}
