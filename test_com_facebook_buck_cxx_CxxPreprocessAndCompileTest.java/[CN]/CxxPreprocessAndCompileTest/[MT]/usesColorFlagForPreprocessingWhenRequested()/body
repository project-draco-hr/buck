{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer()));
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  Path output=Paths.get("test.ii");
  Path input=Paths.get("test.cpp");
  Path scratchDir=Paths.get("scratch");
  CxxPreprocessAndCompile buildRule=CxxPreprocessAndCompile.preprocess(params,pathResolver,new PreprocessorDelegate(pathResolver,DEFAULT_SANITIZER,CxxPlatformUtils.DEFAULT_CONFIG.getHeaderVerification(),DEFAULT_WORKING_DIR,PREPROCESSOR_WITH_COLOR_SUPPORT,PreprocessorFlags.builder().build(),DEFAULT_FRAMEWORK_PATH_SEARCH_PATH_FUNCTION,ImmutableList.<CxxHeaders>of()),new CompilerDelegate(pathResolver,DEFAULT_SANITIZER,DEFAULT_COMPILER,CxxToolFlags.of()),output,new FakeSourcePath(input.toString()),DEFAULT_INPUT_TYPE,DEFAULT_SANITIZER);
  ImmutableList<String> command=buildRule.makeMainStep(scratchDir).makePreprocessCommand(false);
  assertThat(command,not(hasItem(PreprocessorWithColorSupport.COLOR_FLAG)));
  command=buildRule.makeMainStep(scratchDir).makePreprocessCommand(true);
  assertThat(command,hasItem(PreprocessorWithColorSupport.COLOR_FLAG));
}
