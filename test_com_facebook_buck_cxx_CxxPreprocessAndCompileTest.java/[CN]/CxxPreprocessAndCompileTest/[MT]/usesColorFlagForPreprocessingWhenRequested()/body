{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  Path output=Paths.get("test.ii");
  Path input=Paths.get("test.cpp");
  Path prefixHeader=Paths.get("prefix.pch");
  CxxPreprocessAndCompile buildRule=CxxPreprocessAndCompile.preprocess(params,pathResolver,new PreprocessorDelegate(pathResolver,DEFAULT_SANITIZER,DEFAULT_WORKING_DIR,PREPROCESSOR_WITH_COLOR_SUPPORT,ImmutableList.<String>of(),ImmutableList.<String>of(),ImmutableSet.<Path>of(),ImmutableSet.<Path>of(),ImmutableSet.<Path>of(),DEFAULT_FRAMEWORK_ROOTS,DEFAULT_FRAMEWORK_PATH_SEARCH_PATH_FUNCTION,Optional.<SourcePath>of(new FakeSourcePath(filesystem,prefixHeader.toString())),ImmutableList.of(CxxHeaders.builder().build())),new CompilerDelegate(pathResolver,DEFAULT_SANITIZER,DEFAULT_COMPILER,DEFAULT_PLATFORM_FLAGS,DEFAULT_RULE_FLAGS),output,new FakeSourcePath(input.toString()),DEFAULT_INPUT_TYPE,DEFAULT_SANITIZER);
  ImmutableList<String> command=buildRule.makeMainStep().makePreprocessCommand(false);
  assertThat(command,not(hasItem(PreprocessorWithColorSupport.COLOR_FLAG)));
  command=buildRule.makeMainStep().makePreprocessCommand(true);
  assertThat(command,hasItem(PreprocessorWithColorSupport.COLOR_FLAG));
}
