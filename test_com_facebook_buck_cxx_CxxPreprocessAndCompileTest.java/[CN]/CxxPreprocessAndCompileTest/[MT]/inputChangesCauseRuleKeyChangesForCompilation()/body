{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer()));
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  FakeFileHashCache hashCache=FakeFileHashCache.createFromStrings(ImmutableMap.<String,String>builder().put("preprocessor",Strings.repeat("a",40)).put("compiler",Strings.repeat("a",40)).put("test.o",Strings.repeat("b",40)).put("test.cpp",Strings.repeat("c",40)).put("different",Strings.repeat("d",40)).put("foo/test.h",Strings.repeat("e",40)).put("path/to/a/plugin.so",Strings.repeat("f",40)).put("path/to/a/different/plugin.so",Strings.repeat("a0",40)).build());
  RuleKey defaultRuleKey=new DefaultRuleKeyBuilderFactory(hashCache,pathResolver).build(CxxPreprocessAndCompile.compile(params,pathResolver,new CompilerDelegate(pathResolver,DEFAULT_SANITIZER,DEFAULT_COMPILER,DEFAULT_TOOL_FLAGS),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_SANITIZER));
  RuleKey compilerChange=new DefaultRuleKeyBuilderFactory(hashCache,pathResolver).build(CxxPreprocessAndCompile.compile(params,pathResolver,new CompilerDelegate(pathResolver,DEFAULT_SANITIZER,new DefaultCompiler(new HashedFileTool(Paths.get("different"))),DEFAULT_TOOL_FLAGS),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,compilerChange);
  RuleKey operationChange=new DefaultRuleKeyBuilderFactory(hashCache,pathResolver).build(CxxPreprocessAndCompile.preprocess(params,pathResolver,new PreprocessorDelegate(pathResolver,DEFAULT_SANITIZER,DEFAULT_WORKING_DIR,DEFAULT_PREPROCESSOR,PreprocessorFlags.builder().build(),DEFAULT_FRAMEWORK_PATH_SEARCH_PATH_FUNCTION,DEFAULT_INCLUDES),new CompilerDelegate(pathResolver,DEFAULT_SANITIZER,DEFAULT_COMPILER,DEFAULT_TOOL_FLAGS),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,operationChange);
  RuleKey platformFlagsChange=new DefaultRuleKeyBuilderFactory(hashCache,pathResolver).build(CxxPreprocessAndCompile.compile(params,pathResolver,new CompilerDelegate(pathResolver,DEFAULT_SANITIZER,DEFAULT_COMPILER,CxxToolFlags.explicitBuilder().addPlatformFlags("-different").setRuleFlags(DEFAULT_TOOL_FLAGS.getRuleFlags()).build()),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,platformFlagsChange);
  RuleKey ruleFlagsChange=new DefaultRuleKeyBuilderFactory(hashCache,pathResolver).build(CxxPreprocessAndCompile.compile(params,pathResolver,new CompilerDelegate(pathResolver,DEFAULT_SANITIZER,DEFAULT_COMPILER,CxxToolFlags.explicitBuilder().setPlatformFlags(DEFAULT_TOOL_FLAGS.getPlatformFlags()).addRuleFlags("-other","flags").build()),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,ruleFlagsChange);
  RuleKey inputChange=new DefaultRuleKeyBuilderFactory(hashCache,pathResolver).build(CxxPreprocessAndCompile.compile(params,pathResolver,new CompilerDelegate(pathResolver,DEFAULT_SANITIZER,DEFAULT_COMPILER,DEFAULT_TOOL_FLAGS),DEFAULT_OUTPUT,new FakeSourcePath("different"),DEFAULT_INPUT_TYPE,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,inputChange);
}
