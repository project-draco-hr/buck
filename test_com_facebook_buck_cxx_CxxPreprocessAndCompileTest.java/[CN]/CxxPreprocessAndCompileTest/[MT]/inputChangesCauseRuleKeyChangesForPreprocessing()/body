{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(FakeFileHashCache.createFromStrings(ImmutableMap.<String,String>builder().put("preprocessor",Strings.repeat("a",40)).put("compiler",Strings.repeat("a",40)).put("test.o",Strings.repeat("b",40)).put("test.cpp",Strings.repeat("c",40)).put("different",Strings.repeat("d",40)).put("foo/test.h",Strings.repeat("e",40)).put("path/to/a/plugin.so",Strings.repeat("f",40)).put("path/to/a/different/plugin.so",Strings.repeat("a0",40)).build()),pathResolver);
  RuleKey defaultRuleKey=ruleKeyBuilderFactory.build(CxxPreprocessAndCompile.preprocess(params,pathResolver,DEFAULT_PREPROCESSOR,DEFAULT_PREPROCESSOR_PLATFORM_FLAGS,DEFAULT_PREPROCESOR_RULE_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_HEADER_MAPS,DEFAULT_FRAMEWORK_ROOTS,Optional.<SourcePath>absent(),DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  RuleKey includesChange=ruleKeyBuilderFactory.build(CxxPreprocessAndCompile.preprocess(params,pathResolver,DEFAULT_PREPROCESSOR,DEFAULT_PREPROCESSOR_PLATFORM_FLAGS,DEFAULT_PREPROCESOR_RULE_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,ImmutableSet.of(Paths.get("different")),DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_HEADER_MAPS,DEFAULT_FRAMEWORK_ROOTS,Optional.<SourcePath>absent(),DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertEquals(defaultRuleKey,includesChange);
  RuleKey systemIncludesChange=ruleKeyBuilderFactory.build(CxxPreprocessAndCompile.preprocess(params,pathResolver,DEFAULT_PREPROCESSOR,DEFAULT_PREPROCESSOR_PLATFORM_FLAGS,DEFAULT_PREPROCESOR_RULE_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,ImmutableSet.of(Paths.get("different")),DEFAULT_HEADER_MAPS,DEFAULT_FRAMEWORK_ROOTS,Optional.<SourcePath>absent(),DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertEquals(defaultRuleKey,systemIncludesChange);
  RuleKey headerMapsIncludesChange=ruleKeyBuilderFactory.build(CxxPreprocessAndCompile.preprocess(params,pathResolver,DEFAULT_PREPROCESSOR,DEFAULT_PREPROCESSOR_PLATFORM_FLAGS,DEFAULT_PREPROCESOR_RULE_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,ImmutableSet.of(Paths.get("different")),DEFAULT_FRAMEWORK_ROOTS,Optional.<SourcePath>absent(),DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertEquals(defaultRuleKey,headerMapsIncludesChange);
  RuleKey frameworkRootsChange=ruleKeyBuilderFactory.build(CxxPreprocessAndCompile.preprocess(params,pathResolver,DEFAULT_PREPROCESSOR,DEFAULT_PREPROCESSOR_PLATFORM_FLAGS,DEFAULT_PREPROCESOR_RULE_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_HEADER_MAPS,ImmutableSet.of(Paths.get("different")),Optional.<SourcePath>absent(),DEFAULT_INCLUDES,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,frameworkRootsChange);
}
