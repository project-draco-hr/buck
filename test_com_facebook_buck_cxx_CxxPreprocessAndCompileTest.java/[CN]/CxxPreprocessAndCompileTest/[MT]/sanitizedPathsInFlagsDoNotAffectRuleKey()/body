{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(FakeFileHashCache.createFromStrings(ImmutableMap.<String,String>builder().put("preprocessor",Strings.repeat("a",40)).put("compiler",Strings.repeat("a",40)).put("test.o",Strings.repeat("b",40)).put("test.cpp",Strings.repeat("c",40)).put("different",Strings.repeat("d",40)).put("foo/test.h",Strings.repeat("e",40)).put("path/to/a/plugin.so",Strings.repeat("f",40)).put("path/to/a/different/plugin.so",Strings.repeat("a0",40)).build()),pathResolver);
  int pathSize=10;
  DebugPathSanitizer sanitizer1=new DebugPathSanitizer(pathSize,File.separatorChar,Paths.get("PWD"),ImmutableBiMap.of(Paths.get("something"),Paths.get("A")));
  DebugPathSanitizer sanitizer2=new DebugPathSanitizer(pathSize,File.separatorChar,Paths.get("PWD"),ImmutableBiMap.of(Paths.get("different"),Paths.get("A")));
  ImmutableList<String> flags1=ImmutableList.of("-Isomething/foo");
  RuleKeyPair ruleKey1=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,CxxPreprocessAndCompileStep.Operation.PREPROCESS,Optional.of(DEFAULT_PREPROCESSOR),Optional.of(flags1),Optional.<Tool>absent(),Optional.<ImmutableList<String>>absent(),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,sanitizer1));
  ImmutableList<String> flags2=ImmutableList.of("-Idifferent/foo");
  RuleKeyPair ruleKey2=generateRuleKey(ruleKeyBuilderFactory,new CxxPreprocessAndCompile(params,pathResolver,CxxPreprocessAndCompileStep.Operation.PREPROCESS,Optional.of(DEFAULT_PREPROCESSOR),Optional.of(flags2),Optional.<Tool>absent(),Optional.<ImmutableList<String>>absent(),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,sanitizer2));
  assertEquals(ruleKey1,ruleKey2);
}
