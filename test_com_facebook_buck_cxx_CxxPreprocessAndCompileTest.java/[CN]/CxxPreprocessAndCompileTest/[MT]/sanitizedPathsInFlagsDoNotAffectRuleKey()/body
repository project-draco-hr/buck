{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(FakeFileHashCache.createFromStrings(ImmutableMap.<String,String>builder().put("preprocessor",Strings.repeat("a",40)).put("compiler",Strings.repeat("a",40)).put("test.o",Strings.repeat("b",40)).put("test.cpp",Strings.repeat("c",40)).put("different",Strings.repeat("d",40)).put("foo/test.h",Strings.repeat("e",40)).put("path/to/a/plugin.so",Strings.repeat("f",40)).put("path/to/a/different/plugin.so",Strings.repeat("a0",40)).build()),pathResolver);
  int pathSize=10;
  DebugPathSanitizer sanitizer1=new DebugPathSanitizer(pathSize,File.separatorChar,Paths.get("PWD"),ImmutableBiMap.of(Paths.get("something"),Paths.get("A")));
  DebugPathSanitizer sanitizer2=new DebugPathSanitizer(pathSize,File.separatorChar,Paths.get("PWD"),ImmutableBiMap.of(Paths.get("different"),Paths.get("A")));
  CxxToolFlags flags1=CxxToolFlags.explicitBuilder().addPlatformFlags("-Isomething/foo").addRuleFlags("-Isomething/bar").build();
  RuleKey ruleKey1=ruleKeyBuilderFactory.build(CxxPreprocessAndCompile.preprocess(params,pathResolver,new PreprocessorDelegate(pathResolver,sanitizer1,DEFAULT_WORKING_DIR,DEFAULT_PREPROCESSOR,flags1,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_HEADER_MAPS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_FRAMEWORK_PATH_SEARCH_PATH_FUNCTION,Optional.<SourcePath>absent(),DEFAULT_INCLUDES),new CompilerDelegate(pathResolver,DEFAULT_SANITIZER,DEFAULT_COMPILER,CxxToolFlags.of()),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,sanitizer1));
  CxxToolFlags flags2=CxxToolFlags.explicitBuilder().addPlatformFlags("-Idifferent/foo").addRuleFlags("-Idifferent/bar").build();
  RuleKey ruleKey2=ruleKeyBuilderFactory.build(CxxPreprocessAndCompile.preprocess(params,pathResolver,new PreprocessorDelegate(pathResolver,sanitizer2,DEFAULT_WORKING_DIR,DEFAULT_PREPROCESSOR,flags2,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_HEADER_MAPS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_FRAMEWORK_PATH_SEARCH_PATH_FUNCTION,Optional.<SourcePath>absent(),DEFAULT_INCLUDES),new CompilerDelegate(pathResolver,DEFAULT_SANITIZER,DEFAULT_COMPILER,CxxToolFlags.of()),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,sanitizer2));
  assertEquals(ruleKey1,ruleKey2);
}
