{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  ImmutableList<String> flags=ImmutableList.of("-Dtest=blah");
  Path output=Paths.get("test.ii");
  Path input=Paths.get("test.cpp");
  CxxPreprocessAndCompile buildRule=new CxxPreprocessAndCompile(params,pathResolver,CxxPreprocessAndCompileStep.Operation.PREPROCESS,Optional.of(DEFAULT_PREPROCESSOR),Optional.of(flags),Optional.<Tool>absent(),Optional.<ImmutableList<String>>absent(),output,new TestSourcePath(input.toString()),DEFAULT_INPUT_TYPE,ImmutableList.<Path>of(),ImmutableList.<Path>of(),DEFAULT_FRAMEWORK_ROOTS,CxxHeaders.builder().build(),DEFAULT_SANITIZER);
  ImmutableList<String> expectedPreprocessCommand=ImmutableList.<String>builder().add("preprocessor").add("-Dtest=blah").add("-x","c++").add("-E").add(input.toString()).build();
  ImmutableList<String> actualPreprocessCommand=buildRule.makeMainStep().getCommand();
  assertEquals(expectedPreprocessCommand,actualPreprocessCommand);
}
