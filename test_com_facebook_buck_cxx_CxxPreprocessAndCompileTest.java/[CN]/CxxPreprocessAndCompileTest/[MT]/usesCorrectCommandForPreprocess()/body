{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  ImmutableList<String> platformFlags=ImmutableList.of("-Dtest=blah");
  ImmutableList<String> ruleFlags=ImmutableList.of("-Dfoo=bar");
  Path output=Paths.get("test.ii");
  Path depFile=Paths.get("test.ii.dep");
  Path input=Paths.get("test.cpp");
  Path prefixHeader=Paths.get("prefix.pch");
  CxxPreprocessAndCompile buildRule=CxxPreprocessAndCompile.preprocess(params,pathResolver,new PreprocessorDelegate(pathResolver,DEFAULT_SANITIZER,DEFAULT_PREPROCESSOR,platformFlags,ruleFlags,ImmutableSet.<Path>of(),ImmutableSet.<Path>of(),ImmutableSet.<Path>of(),DEFAULT_FRAMEWORK_ROOTS,Optional.<SourcePath>of(new FakeSourcePath(prefixHeader.toString())),ImmutableList.of(CxxHeaders.builder().build())),output,new FakeSourcePath(input.toString()),DEFAULT_INPUT_TYPE,DEFAULT_SANITIZER);
  ImmutableList<String> expectedPreprocessCommand=ImmutableList.<String>builder().add("preprocessor").add("-Dtest=blah").add("-Dfoo=bar").add("-include").add(prefixHeader.toString()).add("-x","c++").add("-E").add("-MD").add("-MF").add(depFile.toString() + ".tmp").add(input.toString()).build();
  ImmutableList<String> actualPreprocessCommand=buildRule.makeMainStep().getCommand();
  assertEquals(expectedPreprocessCommand,actualPreprocessCommand);
}
