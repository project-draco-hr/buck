{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  Path preprocessor=Paths.get("preprocessor");
  Tool preprocessorTool=new CommandTool.Builder().addInput(new PathSourcePath(filesystem,preprocessor)).build();
  Path compiler=Paths.get("compiler");
  Tool compilerTool=new CommandTool.Builder().addInput(new PathSourcePath(filesystem,compiler)).build();
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  CxxPreprocessAndCompile cxxPreprocess=new CxxPreprocessAndCompile(params,pathResolver,CxxPreprocessAndCompileStep.Operation.PREPROCESS,Optional.<Preprocessor>of(new DefaultPreprocessor(preprocessorTool)),Optional.of(ImmutableList.<String>of()),Optional.of(ImmutableList.<String>of()),Optional.<Compiler>absent(),Optional.<ImmutableList<String>>absent(),Optional.<ImmutableList<String>>absent(),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_HEADER_MAPS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,DEFAULT_SANITIZER);
  assertThat(cxxPreprocess.getInputsAfterBuildingLocally(),Matchers.hasItem(preprocessor));
  CxxPreprocessAndCompile cxxCompile=new CxxPreprocessAndCompile(params,pathResolver,CxxPreprocessAndCompileStep.Operation.COMPILE,Optional.<Preprocessor>absent(),Optional.<ImmutableList<String>>absent(),Optional.<ImmutableList<String>>absent(),Optional.<Compiler>of(new DefaultCompiler(compilerTool)),Optional.of(ImmutableList.<String>of()),Optional.of(ImmutableList.<String>of()),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_HEADER_MAPS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_INCLUDES,DEFAULT_SANITIZER);
  assertThat(cxxCompile.getInputsAfterBuildingLocally(),Matchers.hasItem(compiler));
}
