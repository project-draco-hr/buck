{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  SourcePath preprocessor=new PathSourcePath(filesystem,Paths.get("preprocessor"));
  Tool preprocessorTool=new CommandTool.Builder().addInput(preprocessor).build();
  SourcePath compiler=new PathSourcePath(filesystem,Paths.get("compiler"));
  Tool compilerTool=new CommandTool.Builder().addInput(compiler).build();
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  CxxPreprocessAndCompile cxxPreprocess=CxxPreprocessAndCompile.preprocess(params,pathResolver,new PreprocessorDelegate(pathResolver,DEFAULT_SANITIZER,DEFAULT_WORKING_DIR,new DefaultPreprocessor(preprocessorTool),CxxToolFlags.of(),DEFAULT_INCLUDE_ROOTS,DEFAULT_SYSTEM_INCLUDE_ROOTS,DEFAULT_HEADER_MAPS,DEFAULT_FRAMEWORK_ROOTS,DEFAULT_FRAMEWORK_PATH_SEARCH_PATH_FUNCTION,Optional.<SourcePath>absent(),DEFAULT_INCLUDES),new CompilerDelegate(pathResolver,DEFAULT_SANITIZER,DEFAULT_COMPILER,CxxToolFlags.of()),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_SANITIZER);
  assertThat(cxxPreprocess.getInputsAfterBuildingLocally(),hasItem(preprocessor));
  CxxPreprocessAndCompile cxxCompile=CxxPreprocessAndCompile.compile(params,pathResolver,new CompilerDelegate(pathResolver,DEFAULT_SANITIZER,new DefaultCompiler(compilerTool),CxxToolFlags.of()),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INPUT_TYPE,DEFAULT_SANITIZER);
  assertThat(cxxCompile.getInputsAfterBuildingLocally(),hasItem(compiler));
}
