{
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  BuildRule libraryOne=createAndroidLibraryRule("//java/src/com/facebook/base:libraryOne",ruleResolver,null,null,null);
  BuildRule libraryOneRule=ruleResolver.getRule(libraryOne.getBuildTarget());
  BuildRule libraryTwo=createAndroidLibraryRule("//java/src/com/facebook/base:libraryTwo",ruleResolver,null,null,null);
  BuildRule libraryTwoRule=ruleResolver.getRule(libraryTwo.getBuildTarget());
  BuildTarget binaryBuildTarget=BuildTargetFactory.newInstance("//java/src/com/facebook/base:apk");
  ImmutableSortedSet<BuildTarget> originalDepsTargets=ImmutableSortedSet.of(libraryOneRule.getBuildTarget(),libraryTwoRule.getBuildTarget());
  BuildRule keystoreRule=addKeystoreRule(ruleResolver);
  AndroidBinary androidBinary=(AndroidBinary)AndroidBinaryBuilder.createBuilder(binaryBuildTarget).setOriginalDeps(originalDepsTargets).setBuildTargetsToExcludeFromDex(ImmutableSet.of(libraryTwoRule.getBuildTarget())).setManifest(new FakeSourcePath("java/src/com/facebook/base/AndroidManifest.xml")).setKeystore(keystoreRule.getBuildTarget()).build(ruleResolver);
  AndroidPackageableCollection packageableCollection=androidBinary.getAndroidPackageableCollection();
  ImmutableList.Builder<Step> commands=ImmutableList.builder();
  FakeBuildableContext buildableContext=new FakeBuildableContext();
  androidBinary.addProguardCommands(ImmutableSet.copyOf(pathResolver.deprecatedAllPaths(packageableCollection.getClasspathEntriesToDex())),ImmutableSet.copyOf(pathResolver.deprecatedAllPaths(packageableCollection.getProguardConfigs())),commands,buildableContext);
  BuildTarget aaptPackageTarget=binaryBuildTarget.withFlavors(AndroidBinaryGraphEnhancer.AAPT_PACKAGE_FLAVOR);
  Path proguardOutputDir=BuildTargets.getGenPath(aaptPackageTarget,"__%s__proguard__/.proguard/");
  ImmutableSet<Path> expectedRecordedArtifacts=ImmutableSet.of(proguardOutputDir.resolve("configuration.txt"),proguardOutputDir.resolve("mapping.txt"),proguardOutputDir.resolve("seeds.txt"));
  assertEquals(expectedRecordedArtifacts,buildableContext.getRecordedArtifacts());
  buildableContext=new FakeBuildableContext();
  ImmutableList.Builder<Step> expectedSteps=ImmutableList.builder();
  ProGuardObfuscateStep.create(JavaCompilationConstants.DEFAULT_JAVA_OPTIONS.getJavaRuntimeLauncher(),new FakeProjectFilesystem(),Optional.<Path>absent(),"1024M",Optional.<String>absent(),proguardOutputDir.resolve("proguard.txt"),ImmutableSet.<Path>of(),ProGuardObfuscateStep.SdkProguardType.DEFAULT,Optional.<Integer>absent(),ImmutableMap.of(BuildTargets.getGenPath(libraryOneRule.getBuildTarget(),"lib__%s__output").resolve(libraryOneRule.getBuildTarget().getShortName() + ".jar"),proguardOutputDir.resolve(BuildTargets.getGenPath(libraryOneRule.getBuildTarget(),"lib__%s__output/").resolve(libraryOne.getBuildTarget().getShortNameAndFlavorPostfix() + "-obfuscated.jar"))),ImmutableSet.of(libraryTwo.getBuildTarget().getUnflavoredBuildTarget().getCellPath().resolve(BuildTargets.getGenPath(libraryTwoRule.getBuildTarget(),"lib__%s__output").resolve(libraryTwoRule.getBuildTarget().getShortNameAndFlavorPostfix() + ".jar"))),proguardOutputDir,buildableContext,expectedSteps);
  assertEquals(expectedSteps.build(),commands.build());
  assertEquals(expectedRecordedArtifacts,buildableContext.getRecordedArtifacts());
}
