{
  Iterable<Class<?>> filteredObservedCommands=FluentIterable.from(steps).transform(new Function<Step,Class<?>>(){
    @Override public Class<?> apply(    Step command){
      return command.getClass();
    }
  }
).filter(Predicates.in(Sets.newHashSet(expectedCommands)));
  MoreAsserts.assertIterablesEquals(expectedCommands,filteredObservedCommands);
}
