{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  AndroidBinary splitDexRule=(AndroidBinary)AndroidBinaryBuilder.newBuilder().setBuildTarget(BuildTargetFactory.newInstance("//:fbandroid_with_dash_debug_fbsign")).setManifest(new FileSourcePath("AndroidManifest.xml")).setKeystore(addKeystoreRule(ruleResolver)).setTarget("Google Inc.:Google APIs:16").setDexSplitMode(new DexSplitMode(true,ZipSplitter.DexSplitStrategy.MAXIMIZE_PRIMARY_DEX_SIZE,DexStore.JAR,false,0,ImmutableSet.<String>of(),Optional.<SourcePath>absent(),Optional.<SourcePath>absent(),true)).build(ruleResolver).getBuildable();
  Set<Path> classpath=Sets.newHashSet();
  ImmutableSet.Builder<Path> secondaryDexDirectories=ImmutableSet.builder();
  ImmutableList.Builder<Step> commandsBuilder=ImmutableList.builder();
  Path primaryDexPath=BIN_PATH.resolve(".dex/classes.dex");
  splitDexRule.addDexingSteps(classpath,secondaryDexDirectories,commandsBuilder,primaryDexPath,new Function<SourcePath,Path>(){
    @Override public Path apply(    SourcePath input){
      throw new UnsupportedOperationException("This resolver should not be used.");
    }
  }
);
  assertEquals("Expected 2 new assets paths (one for metadata.txt and the other for the " + "secondary zips)",2,secondaryDexDirectories.build().size());
  List<Step> steps=commandsBuilder.build();
  assertCommandsInOrder(steps,ImmutableList.<Class<?>>of(SplitZipStep.class,SmartDexingStep.class));
}
