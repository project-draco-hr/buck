{
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  steps.add(new MkdirAndSymlinkFileStep(getResolver().getPath(manifest),getAndroidManifestXml()));
  Step collectAssets=new Step(){
    @Override public int execute(    ExecutionContext context) throws InterruptedException {
      ImmutableList.Builder<Step> commands=ImmutableList.builder();
      try {
        createAllAssetsDirectory(assetsDirectories,commands,context.getProjectFilesystem());
      }
 catch (      IOException e) {
        context.logError(e,"Error creating all assets directory in %s.",getBuildTarget());
        return 1;
      }
      for (      Step command : commands.build()) {
        int exitCode=command.execute(context);
        if (exitCode != 0) {
          throw new HumanReadableException("Error running " + command.getDescription(context));
        }
      }
      return 0;
    }
    @Override public String getShortName(){
      return "symlink_assets";
    }
    @Override public String getDescription(    ExecutionContext context){
      return getShortName();
    }
  }
;
  steps.add(collectAssets);
  Optional<Path> assetsDirectory;
  if (assetsDirectories.isEmpty()) {
    assetsDirectory=Optional.absent();
  }
 else {
    assetsDirectory=Optional.of(getPathToAllAssetsDirectory());
  }
  steps.add(new MkdirStep(getResourceApkPath().getParent()));
  Path rDotTxtDir=getPathToRDotTxtDir();
  steps.add(new MakeCleanDirectoryStep(rDotTxtDir));
  Optional<Path> pathToGeneratedProguardConfig=Optional.absent();
  if (packageType.isBuildWithObfuscation()) {
    Path proguardConfigDir=getPathToGeneratedProguardConfigDir();
    steps.add(new MakeCleanDirectoryStep(proguardConfigDir));
    pathToGeneratedProguardConfig=Optional.of(proguardConfigDir.resolve("proguard.txt"));
    buildableContext.recordArtifactsInDirectory(proguardConfigDir);
  }
  steps.add(new AaptStep(getAndroidManifestXml(),filteredResourcesProvider.getResDirectories(),assetsDirectory,getResourceApkPath(),rDotTxtDir,pathToGeneratedProguardConfig,packageType.isCrunchPngFiles()));
  if (!filteredResourcesProvider.getResDirectories().isEmpty()) {
    generateAndCompileRDotJavaFiles(steps,buildableContext);
    if (rDotJavaNeedsDexing) {
      Path rDotJavaDexDir=getPathToRDotJavaDexFiles();
      steps.add(new MakeCleanDirectoryStep(rDotJavaDexDir));
      steps.add(new DxStep(getPathToRDotJavaDex(),Collections.singleton(getPathToCompiledRDotJavaFiles()),DX_OPTIONS));
      final EstimateLinearAllocStep estimateLinearAllocStep=new EstimateLinearAllocStep(getPathToCompiledRDotJavaFiles());
      steps.add(estimateLinearAllocStep);
      buildableContext.recordArtifact(getPathToRDotJavaDex());
      steps.add(new AbstractExecutionStep("record_build_output"){
        @Override public int execute(        ExecutionContext context){
          buildableContext.addMetadata(R_DOT_JAVA_LINEAR_ALLOC_SIZE,estimateLinearAllocStep.get().toString());
          return 0;
        }
      }
);
    }
  }
  buildableContext.recordArtifact(getAndroidManifestXml());
  buildableContext.recordArtifact(getResourceApkPath());
  steps.add(new RecordFileSha1Step(getResourceApkPath(),RESOURCE_PACKAGE_HASH_KEY,buildableContext));
  return steps.build();
}
