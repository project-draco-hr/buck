{
  Path rDotJavaSrc=getPathToGeneratedRDotJavaSrcFiles();
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),rDotJavaSrc));
  Path rDotTxtDir=getPathToRDotTxtDir();
  MergeAndroidResourcesStep mergeStep=MergeAndroidResourcesStep.createStepForUberRDotJava(getProjectFilesystem(),getResolver(),resourceDeps,getPathToRDotTxtFile(),rDotJavaSrc,resourceUnionPackage);
  steps.add(mergeStep);
  if (shouldBuildStringSourceMap) {
    Path outputDirPath=getPathForNativeStringInfoDirectory();
    steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),outputDirPath));
    GenStringSourceMapStep genNativeStringInfo=new GenStringSourceMapStep(getProjectFilesystem(),rDotTxtDir,filteredResourcesProvider.getResDirectories(),outputDirPath);
    steps.add(genNativeStringInfo);
    buildableContext.recordArtifact(outputDirPath);
  }
  Path rDotJavaBin=getPathToCompiledRDotJavaFiles();
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),rDotJavaBin));
  Path pathToSrcsList=BuildTargets.getGenPath(getProjectFilesystem(),getBuildTarget(),"__%s__srcs");
  steps.add(new MkdirStep(getProjectFilesystem(),pathToSrcsList.getParent()));
  JavacStep javacStep=RDotJava.createJavacStepForUberRDotJavaFiles(mergeStep.getRDotJavaFiles(),pathToSrcsList,rDotJavaBin,javacOptions,getBuildTarget(),getResolver(),getProjectFilesystem());
  steps.add(javacStep);
  Path rDotJavaClassesTxt=getPathToRDotJavaClassesTxt();
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),rDotJavaClassesTxt.getParent()));
  steps.add(new AccumulateClassNamesStep(getProjectFilesystem(),Optional.of(rDotJavaBin),rDotJavaClassesTxt));
  buildableContext.recordArtifact(rDotTxtDir);
  buildableContext.recordArtifact(rDotJavaSrc);
  buildableContext.recordArtifact(rDotJavaBin);
  buildableContext.recordArtifact(rDotJavaClassesTxt);
}
