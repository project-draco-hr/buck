{
  if (!getClass().equals(other.getClass())) {
    return getClass().getName().compareTo(other.getClass().getName());
  }
  int lastComparison=0;
  lastComparison=Boolean.valueOf(isSetRuleKey()).compareTo(other.isSetRuleKey());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetRuleKey()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.ruleKey,other.ruleKey);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetRepository()).compareTo(other.isSetRepository());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetRepository()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.repository,other.repository);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetScheduleType()).compareTo(other.isSetScheduleType());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetScheduleType()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.scheduleType,other.scheduleType);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  return 0;
}
