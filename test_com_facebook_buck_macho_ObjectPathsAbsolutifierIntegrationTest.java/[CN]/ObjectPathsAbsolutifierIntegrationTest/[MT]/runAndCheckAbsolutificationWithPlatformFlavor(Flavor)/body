{
  assumeTrue(Platform.detect() == Platform.MACOS);
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"apple_binary_with_platform",tmp);
  workspace.setUp();
  BuildTarget target=BuildTargetFactory.newInstance("//Apps/TestApp:TestApp").withAppendedFlavors(platformFlavor);
  ProjectWorkspace.ProcessResult result=workspace.runBuckCommand("build","--config","cxx.cflags=-g",target.getFullyQualifiedName());
  result.assertSuccess();
  Path relativeSanitizedObjectFilePath=BuildTargets.getGenPath(filesystem,target.withFlavors(platformFlavor,ImmutableFlavor.of("compile-" + sanitize("main.c.o"))),"%s").resolve("main.c.o");
  Path relativeSanitizedSourceFilePath=BuildTargets.getGenPath(filesystem,target.withFlavors(platformFlavor,ImmutableFlavor.of("preprocess-" + sanitize("main.c.i"))),"%s");
  Path sanitizedBinaryPath=workspace.getPath(BuildTargets.getGenPath(filesystem,target.withFlavors(platformFlavor),"%s"));
  Path unsanizitedBinaryPath=workspace.getPath(filesystem.getBuckPaths().getScratchDir().resolve(sanitizedBinaryPath.getFileName()));
  DebugPathSanitizer sanitizer=new DebugPathSanitizer(250,File.separatorChar,Paths.get("."),ImmutableBiMap.<Path,Path>of());
  String oldCompDirValue=sanitizer.getCompilationDirectory();
  String newCompDirValue=workspace.getDestPath().toString();
  result=workspace.runBuckCommand("machoutils","absolutify_object_paths","--binary",sanitizedBinaryPath.toString(),"--output",unsanizitedBinaryPath.toString(),"--old_compdir",oldCompDirValue,"--new_compdir",newCompDirValue);
  result.assertSuccess();
  ProcessExecutor.Result sanitizedResult=workspace.runCommand("nm","-a",sanitizedBinaryPath.toString());
  ProcessExecutor.Result unsanitizedResult=workspace.runCommand("nm","-a",unsanizitedBinaryPath.toString());
  String sanitizedOutput=sanitizedResult.getStdout().or("");
  String unsanitizedOutput=unsanitizedResult.getStdout().or("");
  assertThat(sanitizedOutput,containsString("SO .///////////////////////////////////////////////////////////////"));
  assertThat(unsanitizedOutput,not(containsString("SO .///////////////////////////////////////////////////////////////")));
  assertThat(sanitizedOutput,containsString("OSO ./buck-out"));
  assertThat(unsanitizedOutput,not(containsString("OSO ./buck-out")));
  assertThat(sanitizedOutput,containsString("SOL Apps/TestApp/main.c"));
  assertThat(unsanitizedOutput,not(containsString("SOL Apps/TestApp/main.c")));
  assertThat(unsanitizedOutput,containsString("SOL " + newCompDirValue + "/Apps/TestApp/main.c"));
  assertThat(unsanitizedOutput,containsString("OSO " + newCompDirValue + "/buck-out/bin/"+ relativeSanitizedObjectFilePath.toString()));
  assertThat(unsanitizedOutput,containsString("SO " + newCompDirValue + "/"+ relativeSanitizedSourceFilePath.toString()));
}
