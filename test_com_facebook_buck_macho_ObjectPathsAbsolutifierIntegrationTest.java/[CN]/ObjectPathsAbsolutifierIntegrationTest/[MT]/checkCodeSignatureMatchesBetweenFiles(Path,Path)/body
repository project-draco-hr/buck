{
  if (!Files.exists(file1)) {
    throw new NoSuchFileException(file1.toString());
  }
  if (!Files.exists(file2)) {
    throw new NoSuchFileException(file2.toString());
  }
  ProcessExecutor processExecutor=new ProcessExecutor(new TestConsole());
  ProcessExecutor.Result result1=processExecutor.launchAndExecute(ProcessExecutorParams.builder().setCommand(ImmutableList.of("codesign","-vvvv","-d",file1.toString())).build(),EnumSet.of(ProcessExecutor.Option.EXPECTING_STD_OUT,ProcessExecutor.Option.IS_SILENT),Optional.<String>absent(),Optional.<Long>absent(),Optional.<Function<Process,Void>>absent());
  ProcessExecutor.Result result2=processExecutor.launchAndExecute(ProcessExecutorParams.builder().setCommand(ImmutableList.of("codesign","-vvvv","-d",file1.toString())).build(),EnumSet.of(ProcessExecutor.Option.EXPECTING_STD_OUT,ProcessExecutor.Option.IS_SILENT),Optional.<String>absent(),Optional.<Long>absent(),Optional.<Function<Process,Void>>absent());
  String stderr1=result1.getStderr().or("");
  String stderr2=result2.getStderr().or("");
  Assert.assertThat(stderr1,startsWith("Executable="));
  Assert.assertThat(stderr2,startsWith("Executable="));
  stderr1=stderr1.substring(stderr1.indexOf("\n"));
  stderr2=stderr2.substring(stderr2.indexOf("\n"));
  return stderr1.equals(stderr2);
}
