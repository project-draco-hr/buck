{
  File cacheDir=tmpDir.newFolder();
  File fileX=tmpDir.newFile("x");
  File fileY=tmpDir.newFile("y");
  File fileZ=tmpDir.newFile("z");
  DirArtifactCache dirArtifactCache=new DirArtifactCache(cacheDir);
  Files.write("x",fileX,Charsets.UTF_8);
  Files.write("y",fileY,Charsets.UTF_8);
  Files.write("z",fileZ,Charsets.UTF_8);
  InputRule inputRuleX=new InputRuleForTest(fileX);
  InputRule inputRuleY=new InputRuleForTest(fileY);
  InputRule inputRuleZ=new InputRuleForTest(fileZ);
  assertFalse(inputRuleX.equals(inputRuleY));
  assertFalse(inputRuleX.equals(inputRuleZ));
  assertFalse(inputRuleY.equals(inputRuleZ));
  RuleKey ruleKeyX=RuleKey.builder(inputRuleX).build();
  RuleKey ruleKeyY=RuleKey.builder(inputRuleY).build();
  RuleKey ruleKeyZ=RuleKey.builder(inputRuleZ).build();
  assertFalse(dirArtifactCache.fetch(ruleKeyX,fileX));
  assertFalse(dirArtifactCache.fetch(ruleKeyY,fileY));
  assertFalse(dirArtifactCache.fetch(ruleKeyZ,fileZ));
  dirArtifactCache.store(ruleKeyX,fileX);
  dirArtifactCache.store(ruleKeyY,fileY);
  dirArtifactCache.store(ruleKeyZ,fileZ);
  assertTrue(fileX.delete());
  assertTrue(fileY.delete());
  assertTrue(fileZ.delete());
  assertTrue(dirArtifactCache.fetch(ruleKeyX,fileX));
  assertTrue(dirArtifactCache.fetch(ruleKeyY,fileY));
  assertTrue(dirArtifactCache.fetch(ruleKeyZ,fileZ));
  assertEquals(inputRuleX,new InputRuleForTest(fileX));
  assertEquals(inputRuleY,new InputRuleForTest(fileY));
  assertEquals(inputRuleZ,new InputRuleForTest(fileZ));
}
