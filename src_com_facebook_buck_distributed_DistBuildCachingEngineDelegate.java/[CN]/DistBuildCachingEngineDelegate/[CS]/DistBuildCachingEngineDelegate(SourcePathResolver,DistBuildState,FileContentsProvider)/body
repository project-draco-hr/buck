{
  this.fileHashCacheLoader=CacheBuilder.newBuilder().build(new CacheLoader<ProjectFilesystem,FileHashCache>(){
    @Override public FileHashCache load(    @Nonnull ProjectFilesystem filesystem){
      FileHashCache remoteCache=remoteState.createFileHashLoader(filesystem);
      FileHashCache cellCache=DefaultFileHashCache.createDefaultFileHashCache(filesystem);
      FileHashCache buckOutCache=DefaultFileHashCache.createBuckOutFileHashCache(new ProjectFilesystem(filesystem.getRootPath(),ImmutableSet.<PathOrGlobMatcher>of()),filesystem.getBuckPaths().getBuckOut());
      return new StackedFileHashCache(ImmutableList.of(remoteCache,cellCache,buckOutCache));
    }
  }
);
  ruleKeyFactories=DistBuildFileHashes.createRuleKeyFactories(sourcePathResolver,CacheBuilder.newBuilder().build(new CacheLoader<ProjectFilesystem,FileHashLoader>(){
    @Override public FileHashLoader load(    ProjectFilesystem filesystem) throws Exception {
      return remoteState.createMaterializingLoader(filesystem,provider);
    }
  }
),0);
}
