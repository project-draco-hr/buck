{
  Constant cst=pool.getOrNull(idx);
  if (cst != null) {
    return cst;
  }
  int at=offsets[idx];
  try {
    int tag=bytes.getUnsignedByte(at);
switch (tag) {
case CONSTANT_Utf8:
{
        cst=parseUtf8(at);
        wasUtf8.set(idx);
        break;
      }
case CONSTANT_Integer:
{
      int value=bytes.getInt(at + 1);
      cst=CstInteger.make(value);
      break;
    }
case CONSTANT_Float:
{
    int bits=bytes.getInt(at + 1);
    cst=CstFloat.make(bits);
    break;
  }
case CONSTANT_Long:
{
  long value=bytes.getLong(at + 1);
  cst=CstLong.make(value);
  break;
}
case CONSTANT_Double:
{
long bits=bytes.getLong(at + 1);
cst=CstDouble.make(bits);
break;
}
case CONSTANT_Class:
{
int nameIndex=bytes.getUnsignedShort(at + 1);
CstString name=(CstString)parse0(nameIndex,wasUtf8);
cst=new CstType(Type.internClassName(name.getString()));
break;
}
case CONSTANT_String:
{
int stringIndex=bytes.getUnsignedShort(at + 1);
cst=parse0(stringIndex,wasUtf8);
break;
}
case CONSTANT_Fieldref:
{
int classIndex=bytes.getUnsignedShort(at + 1);
CstType type=(CstType)parse0(classIndex,wasUtf8);
int natIndex=bytes.getUnsignedShort(at + 3);
CstNat nat=(CstNat)parse0(natIndex,wasUtf8);
cst=new CstFieldRef(type,nat);
break;
}
case CONSTANT_Methodref:
{
int classIndex=bytes.getUnsignedShort(at + 1);
CstType type=(CstType)parse0(classIndex,wasUtf8);
int natIndex=bytes.getUnsignedShort(at + 3);
CstNat nat=(CstNat)parse0(natIndex,wasUtf8);
cst=new CstMethodRef(type,nat);
break;
}
case CONSTANT_InterfaceMethodref:
{
int classIndex=bytes.getUnsignedShort(at + 1);
CstType type=(CstType)parse0(classIndex,wasUtf8);
int natIndex=bytes.getUnsignedShort(at + 3);
CstNat nat=(CstNat)parse0(natIndex,wasUtf8);
cst=new CstInterfaceMethodRef(type,nat);
break;
}
case CONSTANT_NameAndType:
{
int nameIndex=bytes.getUnsignedShort(at + 1);
CstString name=(CstString)parse0(nameIndex,wasUtf8);
int descriptorIndex=bytes.getUnsignedShort(at + 3);
CstString descriptor=(CstString)parse0(descriptorIndex,wasUtf8);
cst=new CstNat(name,descriptor);
break;
}
case CONSTANT_MethodHandle:
{
throw new ParseException("MethodHandle not supported");
}
case CONSTANT_MethodType:
{
throw new ParseException("MethodType not supported");
}
case CONSTANT_InvokeDynamic:
{
throw new ParseException("InvokeDynamic not supported");
}
default :
{
throw new ParseException("unknown tag byte: " + Hex.u1(tag));
}
}
}
 catch (ParseException ex) {
ex.addContext("...while parsing cst " + Hex.u2(idx) + " at offset "+ Hex.u4(at));
throw ex;
}
catch (RuntimeException ex) {
ParseException pe=new ParseException(ex);
pe.addContext("...while parsing cst " + Hex.u2(idx) + " at offset "+ Hex.u4(at));
throw pe;
}
pool.set(idx,cst);
return cst;
}
