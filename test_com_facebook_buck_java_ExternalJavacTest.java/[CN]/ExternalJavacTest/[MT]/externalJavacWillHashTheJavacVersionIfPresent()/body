{
  Path javac=Files.createTempFile("fake","javac");
  javac.toFile().deleteOnExit();
  JavacVersion javacVersion=ImmutableJavacVersion.of("mozzarella");
  Map<Path,HashCode> hashCodes=ImmutableMap.of(javac,Hashing.sha1().hashInt(42));
  FakeFileHashCache fileHashCache=new FakeFileHashCache(hashCodes);
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildRuleParams params=new FakeBuildRuleParamsBuilder("//example:target").build();
  RuleKey.Builder builder=RuleKey.builder(new NoopBuildRule(params,pathResolver),pathResolver,fileHashCache);
  builder.setReflectively("key.javac.version",javacVersion.toString());
  RuleKey.Builder.RuleKeyPair expected=builder.build();
  builder=RuleKey.builder(new NoopBuildRule(params,pathResolver),pathResolver,fileHashCache);
  ExternalJavac compiler=new ExternalJavac(javac,Optional.of(javacVersion));
  compiler.appendToRuleKey(builder,"key");
  RuleKey.Builder.RuleKeyPair seen=builder.build();
  assertEquals(expected,seen);
}
