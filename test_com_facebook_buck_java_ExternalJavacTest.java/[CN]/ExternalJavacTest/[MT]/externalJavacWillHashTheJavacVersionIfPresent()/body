{
  Path javac=Files.createTempFile("fake","javac");
  javac.toFile().deleteOnExit();
  JavacVersion javacVersion=JavacVersion.of("mozzarella");
  Map<Path,HashCode> hashCodes=ImmutableMap.of(javac,Hashing.sha1().hashInt(42));
  FakeFileHashCache fileHashCache=new FakeFileHashCache(hashCodes);
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildRuleParams params=new FakeBuildRuleParamsBuilder("//example:target").build();
  BuildRule buildRule=new NoopBuildRule(params,pathResolver);
  RuleKey javacKey=EmptyRuleKeyBuilder.newInstance(pathResolver,fileHashCache).setReflectively("javac.version",javacVersion.toString()).build().getRuleKeyWithoutDeps();
  RuleKey.Builder builder=RuleKey.builder(buildRule,pathResolver,fileHashCache);
  builder.setReflectively("key.appendableSubKey",javacKey);
  RuleKeyPair expected=builder.build();
  builder=RuleKey.builder(buildRule,pathResolver,fileHashCache);
  ExternalJavac compiler=new ExternalJavac(javac,Optional.of(javacVersion));
  builder.setReflectively("key",compiler);
  RuleKeyPair seen=builder.build();
  assertEquals(expected,seen);
}
