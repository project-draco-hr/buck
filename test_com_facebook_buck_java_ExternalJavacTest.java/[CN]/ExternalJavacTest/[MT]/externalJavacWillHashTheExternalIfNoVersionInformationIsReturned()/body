{
  Path javac=Files.createTempFile("fake","javac");
  javac.toFile().deleteOnExit();
  Map<Path,HashCode> hashCodes=ImmutableMap.of(javac,Hashing.sha1().hashInt(42));
  FakeFileHashCache fileHashCache=new FakeFileHashCache(hashCodes);
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  AppendableRuleKeyCache appendableRuleKeyCache=new AppendableRuleKeyCache(pathResolver,fileHashCache);
  BuildRuleParams params=new FakeBuildRuleParamsBuilder("//example:target").build();
  BuildRule buildRule=new NoopBuildRule(params,pathResolver);
  DefaultRuleKeyBuilderFactory fakeRuleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(fileHashCache,pathResolver);
  RuleKey javacKey=new RuleKey.Builder(pathResolver,fileHashCache,appendableRuleKeyCache).setReflectively("javac",javac).build();
  RuleKey.Builder builder=fakeRuleKeyBuilderFactory.newInstance(buildRule);
  builder.setReflectively("key.appendableSubKey",javacKey);
  RuleKey expected=builder.build();
  builder=fakeRuleKeyBuilderFactory.newInstance(buildRule);
  ExternalJavac compiler=new ExternalJavac(javac,Optional.<JavacVersion>absent());
  builder.setReflectively("key",compiler);
  RuleKey seen=builder.build();
  assertEquals(expected,seen);
}
