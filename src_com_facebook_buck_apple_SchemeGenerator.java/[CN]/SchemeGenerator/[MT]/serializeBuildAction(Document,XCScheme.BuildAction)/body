{
  Element buildActionElem=doc.createElement("BuildAction");
  buildActionElem.setAttribute("parallelizeBuildables","NO");
  buildActionElem.setAttribute("buildImplicitDependencies","NO");
  Element buildActionEntriesElem=doc.createElement("BuildActionEntries");
  buildActionElem.appendChild(buildActionEntriesElem);
  for (  XCScheme.BuildActionEntry entry : buildAction.getBuildActionEntries()) {
    Element entryElem=doc.createElement("BuildActionEntry");
    buildActionEntriesElem.appendChild(entryElem);
    EnumSet<XCScheme.BuildActionEntry.BuildFor> buildFor=entry.getBuildFor();
    boolean buildForRunning=buildFor.contains(XCScheme.BuildActionEntry.BuildFor.RUNNING);
    entryElem.setAttribute("buildForRunning",buildForRunning ? "YES" : "NO");
    boolean buildForTesting=buildFor.contains(XCScheme.BuildActionEntry.BuildFor.TESTING);
    entryElem.setAttribute("buildForTesting",buildForTesting ? "YES" : "NO");
    boolean buildForProfiling=buildFor.contains(XCScheme.BuildActionEntry.BuildFor.PROFILING);
    entryElem.setAttribute("buildForProfiling",buildForProfiling ? "YES" : "NO");
    boolean buildForArchiving=buildFor.contains(XCScheme.BuildActionEntry.BuildFor.ARCHIVING);
    entryElem.setAttribute("buildForArchiving",buildForArchiving ? "YES" : "NO");
    boolean buildForAnalyzing=buildFor.contains(XCScheme.BuildActionEntry.BuildFor.ANALYZING);
    entryElem.setAttribute("buildForAnalyzing",buildForAnalyzing ? "YES" : "NO");
    Element refElem=serializeBuildableReference(doc,entry.getBuildableReference());
    entryElem.appendChild(refElem);
  }
  return buildActionElem;
}
