{
  if (args.includeDirs.get().size() > 0) {
    LOG.warn("Build target %s uses `include_dirs` which is deprecated. Use `exported_headers` instead",params.getBuildTarget().toString());
  }
  Optional<Map.Entry<Flavor,Type>> type=LIBRARY_TYPE.getFlavorAndValue(params.getBuildTarget());
  Optional<Map.Entry<Flavor,CxxPlatform>> platform=cxxPlatforms.getFlavorAndValue(params.getBuildTarget());
  if (type.isPresent()) {
    Preconditions.checkState(platform.isPresent());
    if (type.get().getValue() == Type.EXPORTED_HEADERS) {
      return createExportedHeaderSymlinkTreeBuildRule(params,resolver,platform.get().getValue(),args);
    }
 else     if (type.get().getValue() == Type.SHARED) {
      return createSharedLibraryBuildRule(params,resolver,platform.get().getValue(),args);
    }
  }
  final BuildTarget target=params.getBuildTarget();
  Function<String,Path> fullPathFn=new Function<String,Path>(){
    @Override public Path apply(    String input){
      return target.getBasePath().resolve(input);
    }
  }
;
  final ImmutableList<Path> includeDirs=FluentIterable.from(args.includeDirs.or(ImmutableList.of("include"))).transform(fullPathFn).toList();
  final SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  final String flav=platform.transform(new Function<Map.Entry<Flavor,CxxPlatform>,String>(){
    @Override public String apply(    Map.Entry<Flavor,CxxPlatform> input){
      return input.getValue().getFlavor().toString();
    }
  }
).or("");
  Function<String,com.facebook.buck.rules.args.Arg> macroArgFunction=MacroArg.toMacroArgFunction(getMacroHandler(flav),params.getBuildTarget(),params.getCellRoots(),resolver);
  final Optional<com.facebook.buck.rules.args.Arg> libDir=args.libDir.transform(macroArgFunction);
  return new PrebuiltCxxLibrary(params.copyWithExtraDeps(new Supplier<ImmutableSortedSet<BuildRule>>(){
    @Override public ImmutableSortedSet<BuildRule> get(){
      return ImmutableSortedSet.<BuildRule>naturalOrder().addAll(libDir.transform(com.facebook.buck.rules.args.Arg.getDepsFunction(pathResolver)).or(ImmutableList.<BuildRule>of())).build();
    }
  }
),resolver,pathResolver,FluentIterable.from(args.exportedDeps.get()).transform(resolver.getRuleFunction()).filter(NativeLinkable.class),includeDirs,args.libDir,args.libName,new Function<CxxPlatform,ImmutableMultimap<CxxSource.Type,String>>(){
    @Override public ImmutableMultimap<CxxSource.Type,String> apply(    CxxPlatform input){
      return CxxFlags.getLanguageFlags(args.exportedPreprocessorFlags,args.exportedPlatformPreprocessorFlags,args.exportedLangPreprocessorFlags,input);
    }
  }
,new Function<CxxPlatform,ImmutableList<String>>(){
    @Override public ImmutableList<String> apply(    CxxPlatform input){
      return CxxFlags.getFlags(args.exportedLinkerFlags,args.exportedPlatformLinkerFlags,input);
    }
  }
,args.soname,args.linkWithoutSoname.or(false),args.forceStatic.or(false),args.headerOnly.or(false),args.linkWhole.or(false),args.provided.or(false),new Function<CxxPlatform,Boolean>(){
    @Override public Boolean apply(    CxxPlatform cxxPlatform){
      if (args.exportedHeaders.isPresent() && !args.exportedHeaders.get().isEmpty()) {
        return true;
      }
      if (args.exportedPlatformHeaders.isPresent()) {
        for (        SourceList sourceList : args.exportedPlatformHeaders.get().getMatchingValues(cxxPlatform.getFlavor().toString())) {
          if (!sourceList.isEmpty()) {
            return true;
          }
        }
      }
      return false;
    }
  }
);
}
