{
  Optional<Map.Entry<Flavor,Type>> type;
  Optional<Map.Entry<Flavor,CxxPlatform>> platform;
  try {
    type=LIBRARY_TYPE.getFlavorAndValue(ImmutableSet.copyOf(params.getBuildTarget().getFlavors()));
    platform=cxxPlatforms.getFlavorAndValue(ImmutableSet.copyOf(params.getBuildTarget().getFlavors()));
  }
 catch (  FlavorDomainException e) {
    throw new HumanReadableException("%s: %s",params.getBuildTarget(),e.getMessage());
  }
  if (type.isPresent()) {
    Preconditions.checkState(type.get().getValue() == Type.SHARED);
    Preconditions.checkState(platform.isPresent());
    return createSharedLibraryBuildRule(params,resolver,platform.get().getValue(),args);
  }
  final BuildTarget target=params.getBuildTarget();
  Function<String,Path> fullPathFn=new Function<String,Path>(){
    @Override public Path apply(    String input){
      return target.getBasePath().resolve(input);
    }
  }
;
  final ImmutableList<Path> includeDirs=FluentIterable.from(args.includeDirs.or(ImmutableList.of("include"))).transform(fullPathFn).toList();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  return new PrebuiltCxxLibrary(params,resolver,pathResolver,includeDirs,args.libDir,args.libName,args.exportedLinkerFlags.get(),args.exportedPlatformLinkerFlags.get(),args.soname,args.headerOnly.or(false),args.linkWhole.or(false),args.provided.or(false));
}
