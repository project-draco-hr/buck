{
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  BuildTarget target=params.getBuildTarget();
  String soname=getSoname(target,cxxPlatform,args.soname,args.libName);
  Path staticLibraryPath=getStaticPicLibraryPath(target,cxxPlatform,args.libDir,args.libName);
  if (!params.getProjectFilesystem().exists(staticLibraryPath)) {
    staticLibraryPath=getStaticLibraryPath(target,cxxPlatform,args.libDir,args.libName);
  }
  BuildTarget sharedTarget=BuildTarget.builder(params.getBuildTarget()).addFlavors(CxxDescriptionEnhancer.SHARED_FLAVOR).build();
  Path builtSharedLibraryPath=BuildTargets.getGenPath(sharedTarget,"%s").resolve(soname);
  return CxxLinkableEnhancer.createCxxLinkableBuildRule(cxxPlatform,params,pathResolver,sharedTarget,Linker.LinkType.SHARED,Optional.of(soname),builtSharedLibraryPath,Linker.LinkableDepType.SHARED,FluentIterable.from(params.getDeps()).filter(NativeLinkable.class),Optional.<Linker.CxxRuntimeType>absent(),Optional.<SourcePath>absent(),ImmutableSet.<BuildTarget>of(),NativeLinkableInput.builder().addAllArgs(StringArg.from(CxxFlags.getFlags(args.exportedLinkerFlags,args.exportedPlatformLinkerFlags,cxxPlatform))).addAllArgs(cxxPlatform.getLd().linkWhole(new SourcePathArg(pathResolver,new PathSourcePath(params.getProjectFilesystem(),staticLibraryPath)))).build());
}
