{
  ImmutableSortedSet.Builder<SourceWithFlags> sourcePaths=ImmutableSortedSet.naturalOrder();
  ImmutableSortedSet.Builder<SourcePath> publicHeaderPaths=ImmutableSortedSet.naturalOrder();
  ImmutableSortedSet.Builder<SourcePath> privateHeaderPaths=ImmutableSortedSet.naturalOrder();
  ImmutableList<SourceWithFlags> input=ImmutableList.of(SourceWithFlags.of(new TestSourcePath("bar.m"),ImmutableList.of("-Wall")),SourceWithFlags.of(new TestSourcePath("blech.mm"),ImmutableList.of("-fobjc-arc")));
  ImmutableSortedSet<SourcePath> headers=ImmutableSortedSet.<SourcePath>of(new TestSourcePath("foo.h"),new TestSourcePath("baz.hh"));
  ImmutableSortedSet<SourcePath> exportedHeaders=ImmutableSortedSet.<SourcePath>of(new TestSourcePath("qux.h"));
  RuleUtils.extractSourcePaths(sourcePaths,publicHeaderPaths,privateHeaderPaths,input,headers,exportedHeaders);
  assertEquals(ImmutableSortedSet.of(SourceWithFlags.of(new TestSourcePath("bar.m"),ImmutableList.of("-Wall")),SourceWithFlags.of(new TestSourcePath("blech.mm"),ImmutableList.of("-fobjc-arc"))),sourcePaths.build());
  assertEquals(ImmutableSortedSet.<SourcePath>of(new TestSourcePath("foo.h"),new TestSourcePath("baz.hh")),privateHeaderPaths.build());
  assertEquals(ImmutableSortedSet.<SourcePath>of(new TestSourcePath("qux.h")),publicHeaderPaths.build());
}
