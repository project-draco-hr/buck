{
  ImmutableSortedSet.Builder<SourcePath> allSourcesBuilder=ImmutableSortedSet.naturalOrder();
  ImmutableMap.Builder<SourcePath,String> perFileCompileFlags=ImmutableMap.builder();
  ImmutableSortedSet.Builder<SourcePath> sourcePaths=ImmutableSortedSet.naturalOrder();
  ImmutableSortedSet.Builder<SourcePath> headerPaths=ImmutableSortedSet.naturalOrder();
  ImmutableList<AppleSource> input=ImmutableList.of(AppleSource.ofSourceGroup(new Pair<>("Ignored",ImmutableList.of(AppleSource.ofSourcePath(new TestSourcePath("foo.h")),AppleSource.ofSourcePathWithFlags(new Pair<SourcePath,String>(new TestSourcePath("bar.m"),"-Wall"))))),AppleSource.ofSourceGroup(new Pair<>("IgnoredAsWell",ImmutableList.of(AppleSource.ofSourcePath(new TestSourcePath("baz.hh")),AppleSource.ofSourcePathWithFlags(new Pair<SourcePath,String>(new TestSourcePath("blech.mm"),"-fobjc-arc"))))));
  RuleUtils.extractSourcePaths(new SourcePathResolver(new BuildRuleResolver()),allSourcesBuilder,perFileCompileFlags,sourcePaths,headerPaths,input);
  assertEquals(ImmutableSortedSet.of(new TestSourcePath("bar.m"),new TestSourcePath("blech.mm")),sourcePaths.build());
  assertEquals(ImmutableSortedSet.of(new TestSourcePath("foo.h"),new TestSourcePath("baz.hh")),headerPaths.build());
}
