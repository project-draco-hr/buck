{
  ImmutableSortedSet.Builder<SourcePath> allSourcesBuilder=ImmutableSortedSet.naturalOrder();
  ImmutableMap.Builder<SourcePath,String> perFileCompileFlags=ImmutableMap.builder();
  ImmutableSortedSet.Builder<SourcePath> sourcePaths=ImmutableSortedSet.naturalOrder();
  ImmutableSortedSet.Builder<SourcePath> publicHeaderPaths=ImmutableSortedSet.naturalOrder();
  ImmutableSortedSet.Builder<SourcePath> privateHeaderPaths=ImmutableSortedSet.naturalOrder();
  ImmutableList<AppleSource> input=ImmutableList.of(AppleSource.of(new TestSourcePath("foo.h")),AppleSource.of(new TestSourcePath("qux.h"),"public"),AppleSource.of(new TestSourcePath("bar.m"),"-Wall"),AppleSource.of(new TestSourcePath("baz.hh")),AppleSource.of(new TestSourcePath("blech.mm"),"-fobjc-arc"));
  RuleUtils.extractSourcePaths(new SourcePathResolver(new BuildRuleResolver()),allSourcesBuilder,perFileCompileFlags,sourcePaths,publicHeaderPaths,privateHeaderPaths,input);
  assertEquals(ImmutableSortedSet.of(new TestSourcePath("bar.m"),new TestSourcePath("blech.mm")),sourcePaths.build());
  assertEquals(ImmutableSortedSet.of(new TestSourcePath("foo.h"),new TestSourcePath("baz.hh")),privateHeaderPaths.build());
  assertEquals(ImmutableSortedSet.of(new TestSourcePath("qux.h")),publicHeaderPaths.build());
}
