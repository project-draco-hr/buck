{
  ImmutableSortedSet.Builder<SourcePath> allSourcesBuilder=ImmutableSortedSet.naturalOrder();
  ImmutableMap.Builder<SourcePath,ImmutableList<String>> perFileCompileFlags=ImmutableMap.builder();
  ImmutableSortedSet.Builder<SourcePath> sourcePaths=ImmutableSortedSet.naturalOrder();
  ImmutableSortedSet.Builder<SourcePath> publicHeaderPaths=ImmutableSortedSet.naturalOrder();
  ImmutableSortedSet.Builder<SourcePath> privateHeaderPaths=ImmutableSortedSet.naturalOrder();
  ImmutableList<SourceWithFlags> input=ImmutableList.of(SourceWithFlags.of(new TestSourcePath("foo.h")),SourceWithFlags.of(new TestSourcePath("qux.h"),ImmutableList.of("public")),SourceWithFlags.of(new TestSourcePath("bar.m"),ImmutableList.of("-Wall")),SourceWithFlags.of(new TestSourcePath("baz.hh")),SourceWithFlags.of(new TestSourcePath("blech.mm"),ImmutableList.of("-fobjc-arc")));
  RuleUtils.extractSourcePaths(new SourcePathResolver(new BuildRuleResolver()),allSourcesBuilder,perFileCompileFlags,sourcePaths,publicHeaderPaths,privateHeaderPaths,input);
  assertEquals(ImmutableSortedSet.of(new TestSourcePath("bar.m"),new TestSourcePath("blech.mm")),sourcePaths.build());
  assertEquals(ImmutableSortedSet.of(new TestSourcePath("foo.h"),new TestSourcePath("baz.hh")),privateHeaderPaths.build());
  assertEquals(ImmutableSortedSet.of(new TestSourcePath("qux.h")),publicHeaderPaths.build());
}
