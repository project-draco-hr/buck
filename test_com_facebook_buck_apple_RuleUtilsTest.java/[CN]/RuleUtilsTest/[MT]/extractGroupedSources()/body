{
  ImmutableList.Builder<GroupedSource> sources=ImmutableList.builder();
  ImmutableMap.Builder<SourcePath,String> perFileCompileFlags=ImmutableMap.builder();
  ImmutableSortedSet.Builder<SourcePath> sourcePaths=ImmutableSortedSet.naturalOrder();
  ImmutableSortedSet.Builder<SourcePath> headerPaths=ImmutableSortedSet.naturalOrder();
  ImmutableList<AppleSource> input=ImmutableList.of(AppleSource.ofSourceGroup(new Pair<>("Group1",ImmutableList.of(AppleSource.ofSourcePath(new TestSourcePath("foo.m")),AppleSource.ofSourcePathWithFlags(new Pair<SourcePath,String>(new TestSourcePath("bar.m"),"-Wall"))))),AppleSource.ofSourceGroup(new Pair<>("Group2",ImmutableList.of(AppleSource.ofSourcePath(new TestSourcePath("baz.m")),AppleSource.ofSourcePathWithFlags(new Pair<SourcePath,String>(new TestSourcePath("blech.m"),"-fobjc-arc"))))));
  RuleUtils.extractSourcePaths(new SourcePathResolver(new BuildRuleResolver()),sources,perFileCompileFlags,sourcePaths,headerPaths,input);
  assertEquals(ImmutableList.of(GroupedSource.ofSourceGroup("Group1",ImmutableList.of(GroupedSource.ofSourcePath(new TestSourcePath("foo.m")),GroupedSource.ofSourcePath(new TestSourcePath("bar.m")))),GroupedSource.ofSourceGroup("Group2",ImmutableList.of(GroupedSource.ofSourcePath(new TestSourcePath("baz.m")),GroupedSource.ofSourcePath(new TestSourcePath("blech.m"))))),sources.build());
  assertEquals(ImmutableMap.<SourcePath,String>of(new TestSourcePath("bar.m"),"-Wall",new TestSourcePath("blech.m"),"-fobjc-arc"),perFileCompileFlags.build());
}
