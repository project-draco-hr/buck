{
  ImmutableSortedSet.Builder<SourcePath> allSourcesBuilder=ImmutableSortedSet.naturalOrder();
  ImmutableMap.Builder<SourcePath,String> perFileCompileFlags=ImmutableMap.builder();
  ImmutableSortedSet.Builder<SourcePath> sourcePaths=ImmutableSortedSet.naturalOrder();
  ImmutableSortedSet.Builder<SourcePath> headerPaths=ImmutableSortedSet.naturalOrder();
  ImmutableList<AppleSource> input=ImmutableList.of(AppleSource.ofSourceGroup(new Pair<>("Ignored",ImmutableList.of(AppleSource.ofSourcePath(new TestSourcePath("Group1/foo.m")),AppleSource.ofSourcePathWithFlags(new Pair<SourcePath,String>(new TestSourcePath("Group1/bar.m"),"-Wall"))))),AppleSource.ofSourceGroup(new Pair<>("IgnoredAsWell",ImmutableList.of(AppleSource.ofSourcePath(new TestSourcePath("Group2/baz.m")),AppleSource.ofSourcePathWithFlags(new Pair<SourcePath,String>(new TestSourcePath("Group2/blech.m"),"-fobjc-arc"))))));
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver());
  RuleUtils.extractSourcePaths(resolver,allSourcesBuilder,perFileCompileFlags,sourcePaths,headerPaths,input);
  ImmutableList<GroupedSource> sources=RuleUtils.createGroupsFromSourcePaths(resolver,allSourcesBuilder.build());
  assertEquals(ImmutableList.of(GroupedSource.ofSourceGroup("Group1",ImmutableList.of(GroupedSource.ofSourcePath(new TestSourcePath("Group1/bar.m")),GroupedSource.ofSourcePath(new TestSourcePath("Group1/foo.m")))),GroupedSource.ofSourceGroup("Group2",ImmutableList.of(GroupedSource.ofSourcePath(new TestSourcePath("Group2/baz.m")),GroupedSource.ofSourcePath(new TestSourcePath("Group2/blech.m"))))),sources);
  assertEquals(ImmutableMap.<SourcePath,String>of(new TestSourcePath("Group1/bar.m"),"-Wall",new TestSourcePath("Group2/blech.m"),"-fobjc-arc"),perFileCompileFlags.build());
}
