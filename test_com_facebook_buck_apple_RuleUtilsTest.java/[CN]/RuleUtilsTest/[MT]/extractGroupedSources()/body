{
  ImmutableSortedSet.Builder<SourcePath> allSourcesBuilder=ImmutableSortedSet.naturalOrder();
  ImmutableMap.Builder<SourcePath,ImmutableList<String>> perFileCompileFlags=ImmutableMap.builder();
  ImmutableSortedSet.Builder<SourcePath> sourcePaths=ImmutableSortedSet.naturalOrder();
  ImmutableSortedSet.Builder<SourcePath> publicHeaderPaths=ImmutableSortedSet.naturalOrder();
  ImmutableSortedSet.Builder<SourcePath> privateHeaderPaths=ImmutableSortedSet.naturalOrder();
  ImmutableList<SourceWithFlags> input=ImmutableList.of(SourceWithFlags.of(new TestSourcePath("Group1/foo.m")),SourceWithFlags.of(new TestSourcePath("Group1/bar.m"),ImmutableList.of("-Wall")),SourceWithFlags.of(new TestSourcePath("Group2/baz.m")),SourceWithFlags.of(new TestSourcePath("Group2/blech.m"),ImmutableList.of("-fobjc-arc")));
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver());
  RuleUtils.extractSourcePaths(resolver,allSourcesBuilder,perFileCompileFlags,sourcePaths,publicHeaderPaths,privateHeaderPaths,input,ImmutableSortedSet.<SourcePath>of(),ImmutableSortedSet.<SourcePath>of());
  ImmutableList<GroupedSource> sources=RuleUtils.createGroupsFromSourcePaths(resolver,allSourcesBuilder.build());
  assertEquals(ImmutableList.of(GroupedSource.ofSourceGroup("Group1",ImmutableList.of(GroupedSource.ofSourcePath(new TestSourcePath("Group1/bar.m")),GroupedSource.ofSourcePath(new TestSourcePath("Group1/foo.m")))),GroupedSource.ofSourceGroup("Group2",ImmutableList.of(GroupedSource.ofSourcePath(new TestSourcePath("Group2/baz.m")),GroupedSource.ofSourcePath(new TestSourcePath("Group2/blech.m"))))),sources);
  assertEquals(ImmutableMap.<SourcePath,ImmutableList<String>>of(new TestSourcePath("Group1/bar.m"),ImmutableList.of("-Wall"),new TestSourcePath("Group2/blech.m"),ImmutableList.of("-fobjc-arc")),perFileCompileFlags.build());
}
