{
  ImmutableList<SourcePath> input=ImmutableList.<SourcePath>of(new FakeSourcePath("File.h"),new FakeSourcePath("Lib/Foo/File2.h"),new FakeSourcePath("App/Foo/File.h"),new FakeSourcePath("Lib/Bar/File1.h"),new FakeSourcePath("App/File.h"),new FakeSourcePath("Lib/Foo/File1.h"),new FakeSourcePath("App/Foo/Bar/File.h"));
  ImmutableList<GroupedSource> expected=ImmutableList.of(GroupedSource.ofSourceGroup("App",Paths.get("App"),ImmutableList.of(GroupedSource.ofSourceGroup("Foo",Paths.get("App/Foo"),ImmutableList.of(GroupedSource.ofSourceGroup("Bar",Paths.get("App/Foo/Bar"),ImmutableList.of(GroupedSource.ofPrivateHeader(new FakeSourcePath("App/Foo/Bar/File.h")))),GroupedSource.ofPrivateHeader(new FakeSourcePath("App/Foo/File.h")))),GroupedSource.ofPrivateHeader(new FakeSourcePath("App/File.h")))),GroupedSource.ofSourceGroup("Lib",Paths.get("Lib"),ImmutableList.of(GroupedSource.ofSourceGroup("Bar",Paths.get("Lib/Bar"),ImmutableList.of(GroupedSource.ofPrivateHeader(new FakeSourcePath("Lib/Bar/File1.h")))),GroupedSource.ofSourceGroup("Foo",Paths.get("Lib/Foo"),ImmutableList.of(GroupedSource.ofPrivateHeader(new FakeSourcePath("Lib/Foo/File1.h")),GroupedSource.ofPrivateHeader(new FakeSourcePath("Lib/Foo/File2.h")))))),GroupedSource.ofPrivateHeader(new FakeSourcePath("File.h")));
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  ImmutableList<GroupedSource> actual=RuleUtils.createGroupsFromSourcePaths(resolver.deprecatedPathFunction(),ImmutableList.<SourceWithFlags>of(),ImmutableSortedSet.<SourcePath>of(),ImmutableList.<SourcePath>of(),input);
  assertEquals(expected,actual);
}
