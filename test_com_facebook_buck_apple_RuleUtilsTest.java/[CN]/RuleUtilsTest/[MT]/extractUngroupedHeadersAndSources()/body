{
  ImmutableSortedSet.Builder<SourcePath> allSourcesBuilder=ImmutableSortedSet.naturalOrder();
  ImmutableMap.Builder<SourcePath,String> perFileCompileFlags=ImmutableMap.builder();
  ImmutableSortedSet.Builder<SourcePath> sourcePaths=ImmutableSortedSet.naturalOrder();
  ImmutableSortedSet.Builder<SourcePath> publicHeaderPaths=ImmutableSortedSet.naturalOrder();
  ImmutableSortedSet.Builder<SourcePath> privateHeaderPaths=ImmutableSortedSet.naturalOrder();
  ImmutableList<AppleSource> input=ImmutableList.of(AppleSource.ofSourcePath(new TestSourcePath("foo.m")),AppleSource.ofSourcePath(new TestSourcePath("bar.h")),AppleSource.ofSourcePath(new TestSourcePath("baz.mm")),AppleSource.ofSourcePath(new TestSourcePath("blech.hh")),AppleSource.ofSourcePath(new TestSourcePath("beeble.c")),AppleSource.ofSourcePathWithFlags(new Pair<SourcePath,String>(new TestSourcePath("file.h"),"public")));
  RuleUtils.extractSourcePaths(new SourcePathResolver(new BuildRuleResolver()),allSourcesBuilder,perFileCompileFlags,sourcePaths,publicHeaderPaths,privateHeaderPaths,input);
  assertEquals(ImmutableSortedSet.of(new TestSourcePath("foo.m"),new TestSourcePath("baz.mm"),new TestSourcePath("beeble.c")),sourcePaths.build());
  assertEquals(ImmutableSortedSet.of(new TestSourcePath("bar.h"),new TestSourcePath("blech.hh")),privateHeaderPaths.build());
  assertEquals(ImmutableSortedSet.of(new TestSourcePath("file.h")),publicHeaderPaths.build());
}
