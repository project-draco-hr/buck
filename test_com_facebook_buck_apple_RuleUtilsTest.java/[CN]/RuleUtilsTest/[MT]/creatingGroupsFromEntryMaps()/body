{
  ImmutableMultimap<Path,String> subgroups=ImmutableMultimap.<Path,String>builder().put(Paths.get("root/App/Foo"),"Bar").put(Paths.get("root"),"Lib").put(Paths.get("root/Lib"),"Bar").put(Paths.get("root/App"),"Foo").put(Paths.get("root"),"App").put(Paths.get("root/Lib"),"Foo").build();
  ImmutableMultimap<Path,GroupedSource> entries=ImmutableMultimap.<Path,GroupedSource>builder().put(Paths.get("root/Lib/Foo"),GroupedSource.ofPrivateHeader(new TestSourcePath("Lib/Foo/File2.h"))).put(Paths.get("root/App/Foo"),GroupedSource.ofPrivateHeader(new TestSourcePath("App/Foo/File.h"))).put(Paths.get("root/App"),GroupedSource.ofPrivateHeader(new TestSourcePath("App/File.h"))).put(Paths.get("root"),GroupedSource.ofPrivateHeader(new TestSourcePath("File.h"))).put(Paths.get("root/Lib/Bar"),GroupedSource.ofPrivateHeader(new TestSourcePath("Lib/Bar/File1.h"))).put(Paths.get("root/Lib/Foo"),GroupedSource.ofPrivateHeader(new TestSourcePath("Lib/Foo/File1.h"))).put(Paths.get("root/App/Foo/Bar"),GroupedSource.ofPrivateHeader(new TestSourcePath("App/Foo/Bar/File.h"))).build();
  ImmutableList<GroupedSource> expected=ImmutableList.of(ImmutableGroupedSource.ofSourceGroup("App",ImmutableList.of(ImmutableGroupedSource.ofSourceGroup("Foo",ImmutableList.of(ImmutableGroupedSource.ofSourceGroup("Bar",ImmutableList.of(ImmutableGroupedSource.ofPrivateHeader(new TestSourcePath("App/Foo/Bar/File.h")))),ImmutableGroupedSource.ofPrivateHeader(new TestSourcePath("App/Foo/File.h")))),ImmutableGroupedSource.ofPrivateHeader(new TestSourcePath("App/File.h")))),ImmutableGroupedSource.ofSourceGroup("Lib",ImmutableList.of(ImmutableGroupedSource.ofSourceGroup("Bar",ImmutableList.of(ImmutableGroupedSource.ofPrivateHeader(new TestSourcePath("Lib/Bar/File1.h")))),ImmutableGroupedSource.ofSourceGroup("Foo",ImmutableList.of(ImmutableGroupedSource.ofPrivateHeader(new TestSourcePath("Lib/Foo/File1.h")),ImmutableGroupedSource.ofPrivateHeader(new TestSourcePath("Lib/Foo/File2.h")))))),ImmutableGroupedSource.ofPrivateHeader(new TestSourcePath("File.h")));
  ImmutableList<GroupedSource> actual=RuleUtils.createGroupsFromEntryMaps(subgroups,entries,new RuleUtils.GroupedSourceNameComparator(new SourcePathResolver(new BuildRuleResolver()).getPathFunction()),Paths.get("root"));
  assertEquals(expected,actual);
}
