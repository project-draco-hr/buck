{
  ImmutableMultimap<Path,String> subgroups=ImmutableMultimap.<Path,String>builder().put(Paths.get("root/App/Foo"),"Bar").put(Paths.get("root"),"Lib").put(Paths.get("root/Lib"),"Bar").put(Paths.get("root/App"),"Foo").put(Paths.get("root"),"App").put(Paths.get("root/Lib"),"Foo").build();
  ImmutableMultimap<Path,GroupedSource> entries=ImmutableMultimap.<Path,GroupedSource>builder().put(Paths.get("root/Lib/Foo"),GroupedSource.ofPrivateHeader(new FakeSourcePath("Lib/Foo/File2.h"))).put(Paths.get("root/App/Foo"),GroupedSource.ofPrivateHeader(new FakeSourcePath("App/Foo/File.h"))).put(Paths.get("root/App"),GroupedSource.ofPrivateHeader(new FakeSourcePath("App/File.h"))).put(Paths.get("root"),GroupedSource.ofPrivateHeader(new FakeSourcePath("File.h"))).put(Paths.get("root/Lib/Bar"),GroupedSource.ofPrivateHeader(new FakeSourcePath("Lib/Bar/File1.h"))).put(Paths.get("root/Lib/Foo"),GroupedSource.ofPrivateHeader(new FakeSourcePath("Lib/Foo/File1.h"))).put(Paths.get("root/App/Foo/Bar"),GroupedSource.ofPrivateHeader(new FakeSourcePath("App/Foo/Bar/File.h"))).build();
  ImmutableList<GroupedSource> expected=ImmutableList.of(GroupedSource.ofSourceGroup("App",Paths.get("App"),ImmutableList.of(GroupedSource.ofSourceGroup("Foo",Paths.get("App/Foo"),ImmutableList.of(GroupedSource.ofSourceGroup("Bar",Paths.get("App/Foo/Bar"),ImmutableList.of(GroupedSource.ofPrivateHeader(new FakeSourcePath("App/Foo/Bar/File.h")))),GroupedSource.ofPrivateHeader(new FakeSourcePath("App/Foo/File.h")))),GroupedSource.ofPrivateHeader(new FakeSourcePath("App/File.h")))),GroupedSource.ofSourceGroup("Lib",Paths.get("Lib"),ImmutableList.of(GroupedSource.ofSourceGroup("Bar",Paths.get("Lib/Bar"),ImmutableList.of(GroupedSource.ofPrivateHeader(new FakeSourcePath("Lib/Bar/File1.h")))),GroupedSource.ofSourceGroup("Foo",Paths.get("Lib/Foo"),ImmutableList.of(GroupedSource.ofPrivateHeader(new FakeSourcePath("Lib/Foo/File1.h")),GroupedSource.ofPrivateHeader(new FakeSourcePath("Lib/Foo/File2.h")))))),GroupedSource.ofPrivateHeader(new FakeSourcePath("File.h")));
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer()));
  ImmutableList<GroupedSource> actual=RuleUtils.createGroupsFromEntryMaps(subgroups,entries,new RuleUtils.GroupedSourceNameComparator(resolver.deprecatedPathFunction()),Paths.get("root"),Paths.get("root"));
  assertEquals(expected,actual);
}
