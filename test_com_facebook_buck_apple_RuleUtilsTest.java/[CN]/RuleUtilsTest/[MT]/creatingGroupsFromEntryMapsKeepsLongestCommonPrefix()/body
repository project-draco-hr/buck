{
  ImmutableMultimap<Path,String> subgroups=ImmutableMultimap.<Path,String>builder().put(Paths.get("root"),"Lib").put(Paths.get("root/Lib"),"Bar").put(Paths.get("root/Lib"),"Foo").build();
  ImmutableMultimap<Path,GroupedSource> entries=ImmutableMultimap.<Path,GroupedSource>builder().put(Paths.get("root/Lib/Foo"),GroupedSource.ofPrivateHeader(new TestSourcePath("Lib/Foo/File2.h"))).put(Paths.get("root/Lib/Bar"),GroupedSource.ofPrivateHeader(new TestSourcePath("Lib/Bar/File1.h"))).put(Paths.get("root/Lib/Foo"),GroupedSource.ofPrivateHeader(new TestSourcePath("Lib/Foo/File1.h"))).build();
  ImmutableList<GroupedSource> expected=ImmutableList.of(GroupedSource.ofSourceGroup("Lib",Paths.get("Lib"),ImmutableList.of(GroupedSource.ofSourceGroup("Bar",Paths.get("Lib/Bar"),ImmutableList.of(GroupedSource.ofPrivateHeader(new TestSourcePath("Lib/Bar/File1.h")))),GroupedSource.ofSourceGroup("Foo",Paths.get("Lib/Foo"),ImmutableList.of(GroupedSource.ofPrivateHeader(new TestSourcePath("Lib/Foo/File1.h")),GroupedSource.ofPrivateHeader(new TestSourcePath("Lib/Foo/File2.h")))))));
  ImmutableList<GroupedSource> actual=RuleUtils.createGroupsFromEntryMaps(subgroups,entries,new RuleUtils.GroupedSourceNameComparator(new SourcePathResolver(new BuildRuleResolver()).getPathFunction()),Paths.get("root"),Paths.get("root"));
  assertEquals(expected,actual);
}
