{
  BuildRuleResolver resolver=new BuildRuleResolver();
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  Set<TargetNode<?>> targetNodes=Sets.newHashSet();
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  CxxPythonExtension extension=(CxxPythonExtension)createBuilder(resolver,filesystem,targetNodes,target).build(resolver,filesystem,targetNodes);
  PythonPackageComponents actualComponent=extension.getPythonPackageComponents(TargetGraphFactory.newInstance(ImmutableSet.copyOf(targetNodes)),PY2,CxxPlatformUtils.DEFAULT_PLATFORM);
  BuildRule rule=resolver.getRule(CxxPythonExtensionDescription.getExtensionTarget(target,PY2.getFlavor(),CxxPlatformUtils.DEFAULT_PLATFORM.getFlavor()));
  PythonPackageComponents expectedComponents=PythonPackageComponents.of(ImmutableMap.<Path,SourcePath>of(target.getBasePath().resolve(CxxPythonExtensionDescription.getExtensionName(target)),new BuildTargetSourcePath(rule.getBuildTarget())),ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableSet.<SourcePath>of(),Optional.of(false));
  assertEquals(expectedComponents,actualComponent);
}
