{
  ProjectFilesystem projectFilesystem=new FakeProjectFilesystem();
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  BuildRuleResolver resolver=new BuildRuleResolver();
  GenruleBuilder pyDepBuilder=GenruleBuilder.newGenruleBuilder(PYTHON_DEP_TARGET).setOut("out");
  pyDepBuilder.build(resolver);
  CxxPlatform cxxPlatform=CxxPythonExtensionBuilder.createDefaultPlatform();
  CxxPythonExtensionBuilder extensionBuilder=getBuilder(target);
  CxxPythonExtensionDescription desc=(CxxPythonExtensionDescription)extensionBuilder.build().getDescription();
  TargetGraph targetGraph=TargetGraphFactory.newInstance(extensionBuilder.build(),pyDepBuilder.build());
  CxxPythonExtension extension=(CxxPythonExtension)extensionBuilder.build(resolver,projectFilesystem,targetGraph);
  PythonPackageComponents actualComponent=extension.getPythonPackageComponents(targetGraph,cxxPlatform);
  BuildRule rule=resolver.getRule(desc.getExtensionTarget(target,cxxPlatform.getFlavor()));
  PythonPackageComponents expectedComponents=PythonPackageComponents.of(ImmutableMap.<Path,SourcePath>of(target.getBasePath().resolve(desc.getExtensionName(target)),new BuildTargetSourcePath(rule.getBuildTarget())),ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableSet.<SourcePath>of(),Optional.of(false));
  assertEquals(expectedComponents,actualComponent);
}
