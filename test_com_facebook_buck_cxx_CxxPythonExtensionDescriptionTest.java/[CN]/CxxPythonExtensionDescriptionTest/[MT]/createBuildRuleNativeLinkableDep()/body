{
  BuildRuleResolver resolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  final BuildRule sharedLibraryDep=createFakeBuildRule("//:shared",pathResolver);
  final Path sharedLibraryOutput=Paths.get("output/path/lib.so");
  final String sharedLibrarySoname="soname";
  BuildTarget depTarget=BuildTargetFactory.newInstance("//:dep");
  BuildRuleParams depParams=BuildRuleParamsFactory.createTrivialBuildRuleParams(depTarget);
  CxxLibrary dep=new CxxLibrary(depParams,pathResolver){
    @Override public CxxPreprocessorInput getCxxPreprocessorInput(){
      return new CxxPreprocessorInput(ImmutableSet.<BuildTarget>of(),ImmutableList.<String>of(),ImmutableList.<String>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableList.<Path>of(),ImmutableList.<Path>of());
    }
    @Override public NativeLinkableInput getNativeLinkableInput(    Linker linker,    Type type){
      return type == Type.STATIC ? new NativeLinkableInput(ImmutableList.<SourcePath>of(),ImmutableList.<String>of()) : new NativeLinkableInput(ImmutableList.<SourcePath>of(new BuildTargetSourcePath(sharedLibraryDep.getBuildTarget(),sharedLibraryOutput)),ImmutableList.of(sharedLibraryOutput.toString()));
    }
    @Override public PythonPackageComponents getPythonPackageComponents(){
      return new PythonPackageComponents(ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(Paths.get(sharedLibrarySoname),new PathSourcePath(sharedLibraryOutput)));
    }
  }
;
  resolver.addToIndex(sharedLibraryDep);
  CxxPythonExtensionDescription.Arg arg=getDefaultArg();
  arg.deps=Optional.of(ImmutableSortedSet.of(dep.getBuildTarget()));
  BuildRuleParams newParams=params.copyWithDeps(ImmutableSortedSet.<BuildRule>of(dep),ImmutableSortedSet.<BuildRule>of());
  CxxPythonExtension extension=desc.createBuildRule(newParams,resolver,arg);
  CxxLink cxxLink=extension.getRule();
  assertEquals(ImmutableSortedSet.of(sharedLibraryDep),cxxLink.getDeps());
}
