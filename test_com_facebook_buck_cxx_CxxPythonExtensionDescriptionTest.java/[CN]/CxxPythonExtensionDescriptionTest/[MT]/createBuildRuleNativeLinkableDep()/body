{
  BuildRuleResolver resolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  final BuildRule sharedLibraryDep=createFakeBuildRule("//:shared",pathResolver);
  final Path sharedLibraryOutput=Paths.get("output/path/lib.so");
  final String sharedLibrarySoname="soname";
  BuildTarget depTarget=BuildTargetFactory.newInstance("//:dep");
  BuildRuleParams depParams=BuildRuleParamsFactory.createTrivialBuildRuleParams(depTarget);
  AbstractCxxLibrary dep=new AbstractCxxLibrary(depParams,pathResolver){
    @Override public CxxPreprocessorInput getCxxPreprocessorInput(    CxxPlatform cxxPlatform){
      return CxxPreprocessorInput.EMPTY;
    }
    @Override public NativeLinkableInput getNativeLinkableInput(    CxxPlatform cxxPlatform,    Type type){
      return type == Type.STATIC ? new NativeLinkableInput(ImmutableList.<SourcePath>of(),ImmutableList.<String>of()) : new NativeLinkableInput(ImmutableList.<SourcePath>of(new BuildTargetSourcePath(sharedLibraryDep.getBuildTarget(),sharedLibraryOutput)),ImmutableList.of(sharedLibraryOutput.toString()));
    }
    @Override public PythonPackageComponents getPythonPackageComponents(    CxxPlatform cxxPlatform){
      return new PythonPackageComponents(ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(Paths.get(sharedLibrarySoname),new PathSourcePath(sharedLibraryOutput)));
    }
    @Override public Iterable<AndroidPackageable> getRequiredPackageables(){
      return ImmutableList.of();
    }
    @Override public void addToCollector(    AndroidPackageableCollector collector){
    }
    @Override public ImmutableMap<String,SourcePath> getSharedLibraries(    CxxPlatform cxxPlatform){
      return ImmutableMap.of();
    }
  }
;
  resolver.addToIndex(sharedLibraryDep);
  CxxPythonExtensionDescription.Arg arg=getDefaultArg();
  arg.deps=Optional.of(ImmutableSortedSet.of(dep.getBuildTarget()));
  params=paramsForArg(arg,pythonDep.getBuildTarget(),depTarget);
  BuildRuleParams newParams=params.copyWithDeps(ImmutableSortedSet.<BuildRule>of(dep),ImmutableSortedSet.<BuildRule>of());
  CxxPythonExtension extension=(CxxPythonExtension)desc.createBuildRule(newParams,resolver,arg);
  extension.getPythonPackageComponents(cxxPlatform);
  BuildRule rule=resolver.getRule(desc.getExtensionTarget(target,cxxPlatform.asFlavor()));
  assertEquals(ImmutableSortedSet.of(sharedLibraryDep),rule.getDeps());
}
