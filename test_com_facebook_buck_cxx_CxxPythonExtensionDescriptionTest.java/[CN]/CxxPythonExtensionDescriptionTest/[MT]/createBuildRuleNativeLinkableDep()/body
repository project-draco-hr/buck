{
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  BuildRuleResolver resolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  CxxPlatform cxxPlatform=CxxPythonExtensionBuilder.createDefaultPlatform();
  final BuildRule sharedLibraryDep=createFakeBuildRule("//:shared",pathResolver);
  final Path sharedLibraryOutput=Paths.get("output/path/lib.so");
  final String sharedLibrarySoname="soname";
  BuildTarget depTarget=BuildTargetFactory.newInstance("//:dep");
  BuildRuleParams depParams=BuildRuleParamsFactory.createTrivialBuildRuleParams(depTarget);
  AbstractCxxLibrary dep=new AbstractCxxLibrary(depParams,pathResolver){
    @Override public CxxPreprocessorInput getCxxPreprocessorInput(    CxxPlatform cxxPlatform){
      return CxxPreprocessorInput.EMPTY;
    }
    @Override public NativeLinkableInput getNativeLinkableInput(    CxxPlatform cxxPlatform,    Linker.LinkableDepType type){
      return type == Linker.LinkableDepType.STATIC ? ImmutableNativeLinkableInput.of(ImmutableList.<SourcePath>of(),ImmutableList.<String>of()) : ImmutableNativeLinkableInput.of(ImmutableList.<SourcePath>of(new BuildTargetSourcePath(sharedLibraryDep.getBuildTarget(),sharedLibraryOutput)),ImmutableList.of(sharedLibraryOutput.toString()));
    }
    @Override public PythonPackageComponents getPythonPackageComponents(    CxxPlatform cxxPlatform){
      return ImmutablePythonPackageComponents.of(ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(Paths.get(sharedLibrarySoname),new PathSourcePath(sharedLibraryOutput)));
    }
    @Override public Iterable<AndroidPackageable> getRequiredPackageables(){
      return ImmutableList.of();
    }
    @Override public void addToCollector(    AndroidPackageableCollector collector){
    }
    @Override public ImmutableMap<String,SourcePath> getSharedLibraries(    CxxPlatform cxxPlatform){
      return ImmutableMap.of();
    }
  }
;
  resolver.addAllToIndex(ImmutableList.of(sharedLibraryDep,dep));
  CxxPythonExtensionBuilder extensionBuilder=(CxxPythonExtensionBuilder)getBuilder(target).setDeps(ImmutableSortedSet.of(depTarget));
  CxxPythonExtensionDescription desc=(CxxPythonExtensionDescription)extensionBuilder.build().getDescription();
  CxxPythonExtension extension=(CxxPythonExtension)extensionBuilder.build(resolver,new FakeProjectFilesystem(),TargetGraphFactory.newInstance(extensionBuilder.build(),GenruleBuilder.newGenruleBuilder(PYTHON_DEP_TARGET).build(),GenruleBuilder.newGenruleBuilder(depTarget).build()));
  extension.getPythonPackageComponents(cxxPlatform);
  BuildRule rule=resolver.getRule(desc.getExtensionTarget(target,cxxPlatform.getFlavor()));
  assertEquals(ImmutableSortedSet.of(sharedLibraryDep),rule.getDeps());
}
