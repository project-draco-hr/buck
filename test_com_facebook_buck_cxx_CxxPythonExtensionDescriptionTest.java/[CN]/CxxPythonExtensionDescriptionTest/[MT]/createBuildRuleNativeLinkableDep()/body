{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  Set<TargetNode<?>> targetNodes=Sets.newHashSet();
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  CxxLibrary dep=(CxxLibrary)new CxxLibraryBuilder(BuildTargetFactory.newInstance("//:dep")).setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("something.cpp"),ImmutableList.<String>of()))).build(resolver,filesystem,targetNodes);
  NativeLinkableInput depInput=dep.getNativeLinkableInput(TargetGraphFactory.newInstance(ImmutableSet.copyOf(targetNodes)),CxxPlatformUtils.DEFAULT_PLATFORM,Linker.LinkableDepType.SHARED);
  CxxPythonExtension extension=(CxxPythonExtension)createBuilder(resolver,filesystem,targetNodes,target).setDeps(ImmutableSortedSet.of(dep.getBuildTarget())).build(resolver,filesystem,targetNodes);
  extension.getPythonPackageComponents(TargetGraphFactory.newInstance(ImmutableSet.copyOf(targetNodes)),PY2,CxxPlatformUtils.DEFAULT_PLATFORM);
  BuildRule rule=resolver.getRule(CxxPythonExtensionDescription.getExtensionTarget(target,PY2.getFlavor(),CxxPlatformUtils.DEFAULT_PLATFORM.getFlavor()));
  assertThat(rule.getDeps(),Matchers.hasItems(FluentIterable.from(depInput.getArgs()).transformAndConcat(Arg.getDepsFunction(pathResolver)).toArray(BuildRule.class)));
}
