{
  BuildRuleResolver resolver=new BuildRuleResolver();
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  CxxPlatform cxxPlatform=CxxPythonExtensionBuilder.createDefaultPlatform();
  GenruleBuilder pyDepBuilder=GenruleBuilder.newGenruleBuilder(PYTHON_DEP_TARGET).setOut("out");
  pyDepBuilder.build(resolver);
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  CxxPythonExtensionBuilder normalBuilder=getBuilder(target);
  CxxPythonExtensionDescription desc=(CxxPythonExtensionDescription)normalBuilder.build().getDescription();
  TargetGraph targetGraph1=TargetGraphFactory.newInstance(normalBuilder.build(),pyDepBuilder.build());
  CxxPythonExtension normal=(CxxPythonExtension)normalBuilder.build(resolver,filesystem,targetGraph1);
  PythonPackageComponents normalComps=normal.getPythonPackageComponents(targetGraph1,cxxPlatform);
  assertEquals(ImmutableSet.of(target.getBasePath().resolve(desc.getExtensionName(target))),normalComps.getModules().keySet());
  BuildTarget target2=BuildTargetFactory.newInstance("//:target2");
  String name="blah";
  CxxPythonExtensionBuilder baseModuleBuilder=getBuilder(target2).setBaseModule(name);
  desc=(CxxPythonExtensionDescription)baseModuleBuilder.build().getDescription();
  TargetGraph targetGraph2=TargetGraphFactory.newInstance(baseModuleBuilder.build(),GenruleBuilder.newGenruleBuilder(PYTHON_DEP_TARGET).build());
  CxxPythonExtension baseModule=(CxxPythonExtension)baseModuleBuilder.build(resolver,filesystem,targetGraph2);
  PythonPackageComponents baseModuleComps=baseModule.getPythonPackageComponents(targetGraph2,cxxPlatform);
  assertEquals(ImmutableSet.of(Paths.get(name).resolve(desc.getExtensionName(target2))),baseModuleComps.getModules().keySet());
}
