{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  Set<TargetNode<?>> targetNodes=Sets.newHashSet();
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  CxxPythonExtension normal=(CxxPythonExtension)createBuilder(resolver,filesystem,targetNodes,target).build(resolver,filesystem,targetNodes);
  PythonPackageComponents normalComps=normal.getPythonPackageComponents(TargetGraphFactory.newInstance(ImmutableSet.copyOf(targetNodes)),PY2,CxxPlatformUtils.DEFAULT_PLATFORM);
  assertEquals(ImmutableSet.of(target.getBasePath().resolve(CxxPythonExtensionDescription.getExtensionName(target))),normalComps.getModules().keySet());
  resolver=new BuildRuleResolver();
  BuildTarget target2=BuildTargetFactory.newInstance("//:target2#py2");
  String name="blah";
  CxxPythonExtension baseModule=(CxxPythonExtension)createBuilder(resolver,filesystem,targetNodes,target2).setBaseModule(name).build(resolver,filesystem,targetNodes);
  PythonPackageComponents baseModuleComps=baseModule.getPythonPackageComponents(TargetGraphFactory.newInstance(ImmutableSet.copyOf(targetNodes)),PY2,CxxPlatformUtils.DEFAULT_PLATFORM);
  assertEquals(ImmutableSet.of(Paths.get(name).resolve(CxxPythonExtensionDescription.getExtensionName(target2))),baseModuleComps.getModules().keySet());
}
