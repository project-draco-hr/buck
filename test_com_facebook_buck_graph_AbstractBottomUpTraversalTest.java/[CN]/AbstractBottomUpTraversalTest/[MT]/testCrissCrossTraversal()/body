{
  MutableDirectedGraph<String> mutableGraph=new MutableDirectedGraph<String>();
  final Set<String> nodes=ImmutableSet.of("A","B","C","D","E","F");
  for (  String node : nodes) {
    mutableGraph.addNode(node);
  }
  mutableGraph.addEdge("A","B");
  mutableGraph.addEdge("A","C");
  mutableGraph.addEdge("B","D");
  mutableGraph.addEdge("B","E");
  mutableGraph.addEdge("C","D");
  mutableGraph.addEdge("C","E");
  mutableGraph.addEdge("D","F");
  mutableGraph.addEdge("E","F");
  DirectedAcyclicGraph<String> immutableGraph=new DefaultDirectedAcyclicGraph<String>(mutableGraph);
  final List<String> visitedNodes=Lists.newLinkedList();
  AbstractBottomUpTraversal<String,RuntimeException> traversal=new AbstractBottomUpTraversal<String,RuntimeException>(immutableGraph){
    @Override public void visit(    String node){
      visitedNodes.add(node);
    }
  }
;
  traversal.traverse();
  assertEquals("F",visitedNodes.get(0));
  assertEquals(ImmutableSet.of("D","E"),ImmutableSet.copyOf(visitedNodes.subList(1,3)));
  assertEquals(ImmutableSet.of("B","C"),ImmutableSet.copyOf(visitedNodes.subList(3,5)));
  assertEquals("A",visitedNodes.get(5));
  assertEquals(nodes,ImmutableSet.copyOf(visitedNodes));
}
