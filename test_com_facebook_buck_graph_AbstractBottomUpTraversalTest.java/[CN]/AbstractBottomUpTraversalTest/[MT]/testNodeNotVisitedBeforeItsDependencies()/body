{
  MutableDirectedGraph<String> mutableGraph=new MutableDirectedGraph<String>();
  final Set<String> nodes=ImmutableSet.of("A","V","W","X","Y","Z");
  for (  String node : nodes) {
    mutableGraph.addNode(node);
  }
  mutableGraph.addEdge("V","W");
  mutableGraph.addEdge("W","X");
  mutableGraph.addEdge("X","Y");
  mutableGraph.addEdge("Y","Z");
  mutableGraph.addEdge("V","A");
  DirectedAcyclicGraph<String> immutableGraph=new DefaultDirectedAcyclicGraph<String>(mutableGraph);
  AbstractBottomUpTraversal<String,List<String>> traversal=new AbstractBottomUpTraversal<String,List<String>>(immutableGraph){
    private final List<String> visitedNodes=Lists.newLinkedList();
    @Override public void visit(    String node){
      visitedNodes.add(node);
    }
    @Override public List<String> getResult(){
      return visitedNodes;
    }
  }
;
  traversal.traverse();
  List<String> visitedNodes=traversal.getResult();
  assertEquals("Z and A have no depdencies, so they should be visited first.",ImmutableSet.of("Z","A"),ImmutableSet.copyOf(visitedNodes.subList(0,2)));
  assertEquals("Y",visitedNodes.get(2));
  assertEquals("X",visitedNodes.get(3));
  assertEquals("W",visitedNodes.get(4));
  assertEquals("V should be visited last, after all of its dependencies.","V",visitedNodes.get(5));
  assertEquals(nodes,ImmutableSet.copyOf(visitedNodes));
}
