{
  indexes.put(node,index);
  lowlinks.put(node,index);
  index++;
  nodeStack.push(node);
  for (  S sink : graph.getOutgoingNodesFor(node)) {
    if (!indexes.containsKey(sink)) {
      doStrongConnect(sink);
      int lowlink=Math.min(Preconditions.checkNotNull(lowlinks.get(node)),Preconditions.checkNotNull(lowlinks.get(sink)));
      lowlinks.put(node,lowlink);
    }
 else     if (nodeStack.contains(sink)) {
      int lowlink=Math.min(Preconditions.checkNotNull(lowlinks.get(node)),Preconditions.checkNotNull(indexes.get(sink)));
      lowlinks.put(node,lowlink);
    }
  }
  if (Preconditions.checkNotNull(lowlinks.get(node)).equals(indexes.get(node))) {
    Set<S> stronglyConnectedComponent=Sets.newHashSet();
    S componentElement;
    do {
      componentElement=nodeStack.pop();
      stronglyConnectedComponent.add(componentElement);
    }
 while (componentElement != node);
    stronglyConnectedComponents.add(stronglyConnectedComponent);
  }
}
