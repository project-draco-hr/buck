{
  Set<Set<T>> cycles=Sets.filter(tarjan(),new Predicate<Set<T>>(){
    @Override public boolean apply(    Set<T> stronglyConnectedComponent){
      return stronglyConnectedComponent.size() > 1;
    }
  }
);
  Iterable<ImmutableSet<T>> immutableCycles=Iterables.transform(cycles,new Function<Set<T>,ImmutableSet<T>>(){
    @Override public ImmutableSet<T> apply(    Set<T> cycle){
      return ImmutableSet.copyOf(cycle);
    }
  }
);
  ImmutableSet.Builder<ImmutableSet<T>> builder=ImmutableSet.builder();
  builder.addAll(immutableCycles);
  for (  T node : nodes) {
    if (containsEdge(node,node)) {
      builder.add(ImmutableSet.of(node));
    }
  }
  return builder.build();
}
