{
  JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();
  Preconditions.checkNotNull(compiler,"If using JRE instead of JDK, ToolProvider.getSystemJavaCompiler() may be null.");
  StandardJavaFileManager fileManager=compiler.getStandardFileManager(null,null,null);
  DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<JavaFileObject>();
  List<String> options=getOptions(context,buildClasspathEntries);
  List<String> classNamesForAnnotationProcessing=ImmutableList.of();
  Iterable<? extends JavaFileObject> compilationUnits=fileManager.getJavaFileObjectsFromStrings(javaSourceFilePaths);
  Writer compilerOutputWriter=new PrintWriter(context.getStdErr());
  JavaCompiler.CompilationTask compilationTask=compiler.getTask(compilerOutputWriter,fileManager,diagnostics,options,classNamesForAnnotationProcessing,compilationUnits);
  boolean isSuccess=compilationTask.call();
  if (isSuccess) {
    return 0;
  }
 else {
    if (context.getVerbosity().shouldPrintStandardInformation()) {
      for (      Diagnostic<? extends JavaFileObject> diagnostic : diagnostics.getDiagnostics()) {
        if (!System.getProperty("java.version").startsWith("1.6")) {
          context.getStdErr().println(diagnostic);
        }
 else {
          String newLine=System.getProperty("line.separator","\n");
          StringBuilder message=new StringBuilder();
          if (diagnostic.getSource() != null) {
            message.append(diagnostic.getSource().getName()).append(":").append(diagnostic.getLineNumber()).append(": ").append(diagnostic.getMessage(Locale.getDefault())).append(newLine);
          }
 else {
            message.append(diagnostic.getMessage(Locale.getDefault())).append(newLine);
          }
          context.getStdErr().println(message.toString());
        }
      }
    }
    return 1;
  }
}
