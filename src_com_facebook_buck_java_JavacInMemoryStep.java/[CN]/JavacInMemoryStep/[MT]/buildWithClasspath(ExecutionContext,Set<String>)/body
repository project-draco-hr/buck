{
  JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();
  Preconditions.checkNotNull(compiler,"If using JRE instead of JDK, ToolProvider.getSystemJavaCompiler() may be null.");
  StandardJavaFileManager fileManager=compiler.getStandardFileManager(null,null,null);
  Iterable<? extends JavaFileObject> compilationUnits;
  try {
    compilationUnits=createCompilationUnits(fileManager,context.getProjectFilesystem().getPathRelativizer());
  }
 catch (  IOException e) {
    e.printStackTrace(context.getStdErr());
    return 1;
  }
  DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<JavaFileObject>();
  List<String> options=getOptions(context,buildClasspathEntries);
  List<String> classNamesForAnnotationProcessing=ImmutableList.of();
  Writer compilerOutputWriter=new PrintWriter(context.getStdErr());
  JavaCompiler.CompilationTask compilationTask=compiler.getTask(compilerOutputWriter,fileManager,diagnostics,options,classNamesForAnnotationProcessing,compilationUnits);
  boolean isSuccess=compilationTask.call();
  if (isSuccess) {
    if (abiKeyFile != null) {
      try {
        String firstLine=Files.readFirstLine(abiKeyFile,Charsets.UTF_8);
        if (firstLine != null) {
          abiKey=new Sha1HashCode(firstLine);
        }
      }
 catch (      IOException e) {
        e.printStackTrace(context.getStdErr());
        return 1;
      }
    }
    return 0;
  }
 else {
    if (context.getVerbosity().shouldPrintStandardInformation()) {
      for (      Diagnostic<? extends JavaFileObject> diagnostic : diagnostics.getDiagnostics()) {
        context.getStdErr().println(diagnostic);
      }
    }
    return 1;
  }
}
