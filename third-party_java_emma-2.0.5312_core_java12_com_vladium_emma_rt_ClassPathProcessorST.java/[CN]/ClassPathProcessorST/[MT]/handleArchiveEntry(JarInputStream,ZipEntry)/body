{
  if (m_log.atTRACE2())   m_log.trace2("handleArchiveEntry","[" + entry.getName() + "]");
  final String name=entry.getName();
  final String lcName=name.toLowerCase();
  if (lcName.endsWith(".class")) {
    final String className=name.substring(0,name.length() - 6).replace('/','.');
    if ((m_coverageFilter == null) || m_coverageFilter.included(className)) {
      String srcURL=null;
      InputStream clsin=null;
      try {
        readZipEntry(in,entry);
        srcURL="jar:".concat(m_archiveFile.toURL().toExternalForm()).concat("!/").concat(name);
      }
 catch (      FileNotFoundException fnfe) {
        if ($assert.ENABLED) {
          fnfe.printStackTrace(System.out);
        }
      }
catch (      IOException ioe) {
        throw new EMMARuntimeException(ioe);
      }
 finally {
        if (clsin != null)         try {
          clsin.close();
          clsin=null;
        }
 catch (        Exception e) {
          throw new EMMARuntimeException(e);
        }
      }
      try {
        ClassDef clsDef=ClassDefParser.parseClass(m_readbuf,m_readpos);
        if (!clsDef.isInterface())         ++m_classCount;
        m_visitor.process(clsDef,false,false,true,m_instrResult);
        clsDef=null;
        boolean cacheClassDef=true;
        if (m_instrResult.m_descriptor != null) {
          if (!m_mdata.add(m_instrResult.m_descriptor,false))           cacheClassDef=false;
        }
        if (cacheClassDef && (m_cache != null)) {
          final byte[] bytes=new byte[m_readpos];
          System.arraycopy(m_readbuf,0,bytes,0,m_readpos);
          m_cache.put(className,new ClassPathCacheEntry(bytes,srcURL));
        }
      }
 catch (      IOException ioe) {
        throw new EMMARuntimeException(ioe);
      }
    }
  }
}
