{
  return Futures.transformAsync(projectBuildFileParserPool.getAllRulesAndMetaRules(cell,buildFile,executorService),new AsyncFunction<ImmutableList<Map<String,Object>>,ImmutableList<Map<String,Object>>>(){
    @Override public ListenableFuture<ImmutableList<Map<String,Object>>> apply(    ImmutableList<Map<String,Object>> rawNodes) throws Exception {
      if (shuttingDown.get()) {
        return Futures.immediateCancelledFuture();
      }
      return Futures.immediateFuture(cache.putRawNodesIfNotPresent(cell,buildFile,rawNodes));
    }
  }
,executorService);
}
