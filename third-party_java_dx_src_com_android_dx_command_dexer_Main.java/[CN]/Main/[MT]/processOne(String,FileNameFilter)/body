{
  ClassPathOpener opener;
  opener=new ClassPathOpener(pathname,false,filter,new ClassPathOpener.Consumer(){
    @Override public boolean processFileBytes(    String name,    long lastModified,    byte[] bytes){
      return Main.this.processFileBytes(name,lastModified,bytes);
    }
    @Override public void onException(    Exception ex){
      if (ex instanceof StopProcessing) {
        throw (StopProcessing)ex;
      }
 else       if (ex instanceof SimException) {
        dxConsole.err.println("\nEXCEPTION FROM SIMULATION:");
        dxConsole.err.println(ex.getMessage() + "\n");
        dxConsole.err.println(((SimException)ex).getContext());
      }
 else {
        dxConsole.err.println("\nUNEXPECTED TOP-LEVEL EXCEPTION:");
        ex.printStackTrace(dxConsole.err);
      }
      errors.incrementAndGet();
    }
    @Override public void onProcessArchiveStart(    File file){
      if (args.verbose) {
        dxConsole.out.println("processing archive " + file + "...");
      }
    }
  }
);
  if (args.numThreads > 1) {
    parallelProcessorFutures.add(threadPool.submit(new ParallelProcessor(opener)));
  }
 else {
    if (opener.process()) {
      anyFilesProcessed=true;
    }
  }
}
