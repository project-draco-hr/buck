{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"symlink_files_into_directory",tmp);
  workspace.setUp();
  Path outputFolder=tmp.newFolder("output");
  ProjectFilesystem projectFilesystem=new ProjectFilesystem(tmp.getRoot());
  ExecutionContext executionContext=TestExecutionContext.newInstance();
  SymlinkFilesIntoDirectoryStep symlinkStep=new SymlinkFilesIntoDirectoryStep(projectFilesystem,tmp.getRoot(),ImmutableSet.of(Paths.get("a.txt"),Paths.get("foo/b.txt"),Paths.get("foo/bar/c.txt")),outputFolder);
  int exitCode=symlinkStep.execute(executionContext).getExitCode();
  assertEquals(0,exitCode);
  assumeThat(Platform.detect(),not(Platform.WINDOWS));
  Path symlinkToADotTxt=tmp.getRoot().resolve("output/a.txt");
  assertTrue(Files.isSymbolicLink(symlinkToADotTxt));
  assertEquals(projectFilesystem.resolve(Paths.get("a.txt")),Files.readSymbolicLink(symlinkToADotTxt));
  Path symlinkToBDotTxt=tmp.getRoot().resolve("output/foo/b.txt");
  assertTrue(Files.isSymbolicLink(symlinkToBDotTxt));
  assertEquals(projectFilesystem.resolve(Paths.get("foo/b.txt")),Files.readSymbolicLink(symlinkToBDotTxt));
  Path symlinkToCDotTxt=tmp.getRoot().resolve("output/foo/bar/c.txt");
  assertTrue(Files.isSymbolicLink(symlinkToCDotTxt));
  assertEquals(projectFilesystem.resolve(Paths.get("foo/bar/c.txt")),Files.readSymbolicLink(symlinkToCDotTxt));
}
