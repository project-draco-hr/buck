{
  ImmutableMap<String,CxxSource> srcs=CxxDescriptionEnhancer.parseCxxSources(params.getBuildTarget(),pathResolver,cxxPlatform,halideSources,PatternMatchedCollection.<ImmutableSortedSet<SourceWithFlags>>of());
  Optional<ImmutableList<String>> preprocessorFlags=Optional.absent();
  Optional<PatternMatchedCollection<ImmutableList<String>>> platformPreprocessorFlags=Optional.absent();
  Optional<ImmutableMap<CxxSource.Type,ImmutableList<String>>> langPreprocessorFlags=Optional.absent();
  Optional<ImmutableSortedSet<FrameworkPath>> frameworks=Optional.of(ImmutableSortedSet.<FrameworkPath>of());
  Optional<ImmutableSortedSet<FrameworkPath>> libraries=Optional.of(ImmutableSortedSet.<FrameworkPath>of());
  Optional<SourcePath> prefixHeader=Optional.absent();
  Optional<Linker.CxxRuntimeType> cxxRuntimeType=Optional.absent();
  CxxLinkAndCompileRules cxxLinkAndCompileRules=CxxDescriptionEnhancer.createBuildRulesForCxxBinary(params,ruleResolver,cxxPlatform,srcs,ImmutableMap.<Path,SourcePath>of(),preprocessMode,Linker.LinkableDepType.STATIC,preprocessorFlags,platformPreprocessorFlags,langPreprocessorFlags,frameworks,libraries,compilerFlags,langCompilerFlags,platformCompilerFlags,prefixHeader,linkerFlags,platformLinkerFlags,cxxRuntimeType);
  CxxUnstrippedBinary cxxUnstrippedBinary=new CxxUnstrippedBinary(params.appendExtraDeps(cxxLinkAndCompileRules.executable.getDeps(pathResolver)),ruleResolver,pathResolver,cxxLinkAndCompileRules.cxxLink,cxxLinkAndCompileRules.executable,ImmutableSortedSet.<FrameworkPath>of(),ImmutableSortedSet.<BuildTarget>of());
  ruleResolver.addToIndex(cxxUnstrippedBinary);
  return cxxUnstrippedBinary;
}
