{
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  BuildTarget buildConfigBuildTarget;
  if (!params.getBuildTarget().isFlavored()) {
    Preconditions.checkArgument(!useConstantExpressions);
    buildConfigBuildTarget=BuildTarget.builder(params.getBuildTarget()).setFlavor(GEN_JAVA_FLAVOR).build();
  }
 else {
    Preconditions.checkArgument(useConstantExpressions);
    buildConfigBuildTarget=BuildTarget.builder(params.getBuildTarget()).setFlavor(GEN_JAVA_FLAVOR.getName() + '_' + javaPackage.replace('.','_')).build();
  }
  BuildRuleParams buildConfigParams=params.copyWithChanges(GEN_JAVA_TYPE,buildConfigBuildTarget,params.getDeclaredDeps(),ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getExtraDeps()).addAll(SourcePaths.filterBuildRuleInputs(valuesFile.asSet())).build());
  AndroidBuildConfig androidBuildConfig=new AndroidBuildConfig(buildConfigParams,pathResolver,javaPackage,values,valuesFile,useConstantExpressions);
  ruleResolver.addToIndex(androidBuildConfig);
  BuildRuleParams javaLibraryParams=params.copyWithChanges(TYPE,params.getBuildTarget(),ImmutableSortedSet.<BuildRule>of(androidBuildConfig),ImmutableSortedSet.<BuildRule>of());
  return new AndroidBuildConfigJavaLibrary(javaLibraryParams,pathResolver,androidBuildConfig);
}
