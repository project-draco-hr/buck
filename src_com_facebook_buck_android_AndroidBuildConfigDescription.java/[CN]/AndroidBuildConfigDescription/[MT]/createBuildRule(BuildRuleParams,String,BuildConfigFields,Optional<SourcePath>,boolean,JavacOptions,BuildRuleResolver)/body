{
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  BuildTarget buildConfigBuildTarget;
  if (!params.getBuildTarget().isFlavored()) {
    Preconditions.checkArgument(!useConstantExpressions);
    buildConfigBuildTarget=BuildTarget.builder(params.getBuildTarget().getUnflavoredBuildTarget()).addFlavors(GEN_JAVA_FLAVOR).build();
  }
 else {
    Preconditions.checkArgument(useConstantExpressions);
    buildConfigBuildTarget=BuildTarget.builder(params.getBuildTarget().getUnflavoredBuildTarget()).addFlavors(ImmutableFlavor.of(GEN_JAVA_FLAVOR.getName() + '_' + javaPackage.replace('.','_'))).build();
  }
  BuildRuleParams buildConfigParams=params.copyWithChanges(GEN_JAVA_TYPE,buildConfigBuildTarget,Suppliers.ofInstance(params.getDeclaredDeps()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getExtraDeps()).addAll(pathResolver.filterBuildRuleInputs(valuesFile.asSet())).build()));
  AndroidBuildConfig androidBuildConfig=new AndroidBuildConfig(buildConfigParams,pathResolver,javaPackage,values,valuesFile,useConstantExpressions);
  ruleResolver.addToIndex(androidBuildConfig);
  BuildRuleParams javaLibraryParams=params.copyWithChanges(TYPE,params.getBuildTarget(),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(androidBuildConfig)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  return new AndroidBuildConfigJavaLibrary(javaLibraryParams,pathResolver,javacOptions,androidBuildConfig);
}
