def execute(self, args=()):
    'Execute the PEX.\n\n    This function makes assumptions that it is the last function called by\n    the interpreter.\n    '
    entry_point = self.entry()
    try:
        try:
            with self.patch_sys():
                working_set = self._env.activate()
                if ('PEX_COVERAGE' in os.environ):
                    PEX.start_coverage()
                TRACER.log('PYTHONPATH contains:')
                for element in sys.path:
                    TRACER.log(('  %c %s' % ((' ' if os.path.exists(element) else '*'), element)))
                TRACER.log('  * - paths that do not exist or will be imported via zipimport')
                with self.patch_pkg_resources(working_set):
                    if (entry_point and ('PEX_INTERPRETER' not in os.environ)):
                        self.execute_entry(entry_point, args)
                    else:
                        self.execute_interpreter()
        except Exception:
            traceback.print_exc()
            raise
    finally:
        if ('PEX_TEARDOWN_VERBOSE' not in os.environ):
            sys.stderr = DevNull()
            sys.excepthook = (lambda *a, **kw: None)
