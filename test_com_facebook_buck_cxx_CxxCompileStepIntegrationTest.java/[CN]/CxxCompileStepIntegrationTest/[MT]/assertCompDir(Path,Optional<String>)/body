{
  ProjectFilesystem filesystem=new ProjectFilesystem(tmp.getRoot().toPath());
  CxxPlatform platform=DefaultCxxPlatforms.build(new FakeBuckConfig());
  ImmutableList<String> compiler=platform.getCc().getCommandPrefix(new SourcePathResolver(new BuildRuleResolver()));
  Path output=filesystem.resolve(Paths.get("output.o"));
  Path relativeInput=Paths.get("input.c");
  Path input=filesystem.resolve(relativeInput);
  filesystem.writeContentsToPath("int main() {}",relativeInput);
  ImmutableList.Builder<String> cmd=ImmutableList.builder();
  cmd.addAll(compiler);
  cmd.add(CxxPreprocessAndCompileStep.Operation.COMPILE.getFlag());
  cmd.add("-g");
  cmd.add("-o",output.toString());
  cmd.add(relativeInput.toString());
  DebugPathSanitizer sanitizer=new DebugPathSanitizer(200,File.separatorChar,compDir,ImmutableBiMap.<Path,Path>of());
  CxxPreprocessAndCompileStep step=new CxxPreprocessAndCompileStep(CxxPreprocessAndCompileStep.Operation.COMPILE,output,relativeInput,cmd.build(),ImmutableMap.<Path,Path>of(),Optional.of(sanitizer));
  ExecutionContext executionContext=TestExecutionContext.newBuilder().setProjectFilesystem(new ProjectFilesystem(tmp.getRoot().toPath())).build();
  TestConsole console=(TestConsole)executionContext.getConsole();
  int exitCode=step.execute(executionContext);
  if (failure.isPresent()) {
    assertNotEquals("compile step succeeded",0,exitCode);
    assertThat(console.getTextWrittenToStdErr(),console.getTextWrittenToStdErr(),Matchers.containsString(failure.get()));
  }
 else {
    assertEquals("compile step failed: " + console.getTextWrittenToStdErr(),0,exitCode);
    String contents=new String(Files.readAllBytes(output));
    assertThat(contents,Matchers.containsString(sanitizer.getCompilationDirectory()));
  }
  Files.delete(input);
  Files.deleteIfExists(output);
}
