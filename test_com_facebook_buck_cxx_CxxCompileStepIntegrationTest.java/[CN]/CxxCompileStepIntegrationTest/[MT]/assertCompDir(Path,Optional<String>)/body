{
  ProjectFilesystem filesystem=new ProjectFilesystem(tmp.getRoot());
  CxxPlatform platform=DefaultCxxPlatforms.build(new CxxBuckConfig(FakeBuckConfig.builder().build()));
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ImmutableList<String> compiler=platform.getCc().resolve(resolver).getCommandPrefix(pathResolver);
  Path output=filesystem.resolve(Paths.get("output.o"));
  Path depFile=filesystem.resolve(Paths.get("output.dep"));
  Path relativeInput=Paths.get("input.c");
  Path input=filesystem.resolve(relativeInput);
  filesystem.writeContentsToPath("int main() {}",relativeInput);
  Path scratchDir=filesystem.getRootPath().getFileSystem().getPath("scratchDir");
  filesystem.mkdirs(scratchDir);
  ImmutableList.Builder<String> preprocessorArguments=ImmutableList.builder();
  ImmutableList.Builder<String> compilerArguments=ImmutableList.builder();
  compilerArguments.add("-g");
  DebugPathSanitizer sanitizer=new DebugPathSanitizer(200,File.separatorChar,compDir,ImmutableBiMap.<Path,Path>of());
  CxxPreprocessAndCompileStep step=new CxxPreprocessAndCompileStep(filesystem,CxxPreprocessAndCompileStep.Operation.COMPILE_MUNGE_DEBUGINFO,output,depFile,relativeInput,CxxSource.Type.C,Optional.of(new CxxPreprocessAndCompileStep.ToolCommand(compiler,preprocessorArguments.build(),ImmutableMap.<String,String>of(),Optional.<ImmutableList<String>>absent())),Optional.of(new CxxPreprocessAndCompileStep.ToolCommand(compiler,compilerArguments.build(),ImmutableMap.<String,String>of(),Optional.<ImmutableList<String>>absent())),HeaderPathNormalizer.empty(pathResolver),sanitizer,CxxPlatformUtils.DEFAULT_CONFIG.getHeaderVerification(),scratchDir);
  ExecutionContext executionContext=TestExecutionContext.newInstance();
  TestConsole console=(TestConsole)executionContext.getConsole();
  int exitCode=step.execute(executionContext).getExitCode();
  if (failure.isPresent()) {
    assertNotEquals("compile step succeeded",0,exitCode);
    assertThat(console.getTextWrittenToStdErr(),console.getTextWrittenToStdErr(),Matchers.containsString(failure.get()));
  }
 else {
    assertEquals("compile step failed: " + console.getTextWrittenToStdErr(),0,exitCode);
    String contents=new String(Files.readAllBytes(output));
    assertThat(contents,Matchers.containsString(sanitizer.getCompilationDirectory()));
  }
  Files.delete(input);
  Files.deleteIfExists(output);
}
