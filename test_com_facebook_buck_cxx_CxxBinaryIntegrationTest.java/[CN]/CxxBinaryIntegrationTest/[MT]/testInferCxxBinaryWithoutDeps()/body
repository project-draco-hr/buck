{
  Path inferTopLevel=InferHelper.assumeInferIsInstalled();
  ProjectWorkspace workspace=InferHelper.setupCxxInferWorkspace(this,inferTopLevel,tmp);
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(new FakeBuckConfig()));
  BuildTarget inputBuildTarget=BuildTargetFactory.newInstance("//foo:simple");
  String inputBuildTargetName=inputBuildTarget.withFlavors(CxxInferEnhancer.INFER).getFullyQualifiedName();
  workspace.runBuckCommand("build",inputBuildTargetName).assertSuccess();
  String sourceName="simple.cpp";
  String sourceFull="foo/" + sourceName;
  CxxSourceRuleFactory cxxSourceRuleFactory=CxxSourceRuleFactoryHelper.of(inputBuildTarget,cxxPlatform);
  BuildTarget captureBuildTarget=cxxSourceRuleFactory.createInferCaptureBuildTarget(sourceName);
  BuildTarget headerSymlinkTreeTarget=CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(inputBuildTarget,cxxPlatform.getFlavor(),HeaderVisibility.PRIVATE);
  BuildTarget inferAnalysisTarget=inputBuildTarget.withFlavors(CxxInferEnhancer.INFER_ANALYZE);
  BuildTarget inferReportTarget=inputBuildTarget.withFlavors(CxxInferEnhancer.INFER);
  ImmutableSet<BuildTarget> expectedTargets=ImmutableSet.<BuildTarget>builder().addAll(ImmutableSet.of(headerSymlinkTreeTarget,captureBuildTarget,inferAnalysisTarget,inferReportTarget)).build();
  BuckBuildLog buildLog=workspace.getBuildLog();
  assertEquals(expectedTargets,buildLog.getAllTargets());
  buildLog.assertTargetBuiltLocally(headerSymlinkTreeTarget.toString());
  buildLog.assertTargetBuiltLocally(captureBuildTarget.toString());
  buildLog.assertTargetBuiltLocally(inferAnalysisTarget.toString());
  buildLog.assertTargetBuiltLocally(inferReportTarget.toString());
  String reportPath="buck-out/gen/foo/infer-simple#infer/report.json";
  List<InferHelper.InferBug> bugs=InferHelper.loadInferReport(workspace,reportPath);
  Assert.assertThat("1 bug expected in " + sourceFull + " not found",bugs.size(),Matchers.equalTo(1));
  InferHelper.InferBug bug=bugs.iterator().next();
  Assert.assertThat("Expected bug in " + sourceFull,bug.getFile(),Matchers.equalTo(sourceFull));
  Assert.assertThat("Expected NULL_DEREFERENCE",bug.getType(),Matchers.equalTo("NULL_DEREFERENCE"));
  workspace.resetBuildLogFile();
  workspace.runBuckCommand("build",inputBuildTargetName).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(inferReportTarget),buildLog.getAllTargets());
  buildLog.assertTargetHadMatchingRuleKey(inferReportTarget.toString());
  workspace.resetBuildLogFile();
  workspace.replaceFileContents(sourceFull,"*s = 42;","");
  workspace.runBuckCommand("build",inputBuildTargetName).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(expectedTargets,buildLog.getAllTargets());
  buildLog.assertTargetBuiltLocally(captureBuildTarget.toString());
  buildLog.assertTargetBuiltLocally(inferAnalysisTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(headerSymlinkTreeTarget.toString());
  bugs=InferHelper.loadInferReport(workspace,reportPath);
  Assert.assertThat("No bugs expected in " + sourceName,bugs.size(),Matchers.equalTo(0));
}
