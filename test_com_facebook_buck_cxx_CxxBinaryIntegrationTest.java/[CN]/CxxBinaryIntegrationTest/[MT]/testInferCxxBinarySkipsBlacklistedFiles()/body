{
  assumeTrue(Platform.detect() != Platform.WINDOWS);
  ProjectWorkspace workspace=InferHelper.setupCxxInferWorkspace(this,tmp,Optional.of(".*one\\.c"));
  ProjectFilesystem filesystem=new ProjectFilesystem(workspace.getDestPath());
  BuildTarget inputBuildTarget=BuildTargetFactory.newInstance("//foo:binary_with_chain_deps");
  String inputBuildTargetName=inputBuildTarget.withFlavors(CxxInferEnhancer.InferFlavors.INFER.get()).getFullyQualifiedName();
  workspace.runBuckCommand("build",inputBuildTargetName).assertSuccess();
  assertFalse("Cfg file for chain_dep_one.c should not exist",Files.exists(workspace.getPath(BuildTargets.getGenPath(filesystem,BuildTargetFactory.newInstance("//foo:chain_dep_one#default,infer-capture-" + sanitize("chain_dep_one.c.o")),"infer-out-%s").resolve("captured/chain_dep_one.c_captured/chain_dep_one.c.cfg"))));
  assertTrue("Expected cfg for chain_dep_two.c not found",Files.exists(workspace.getPath(BuildTargets.getGenPath(filesystem,BuildTargetFactory.newInstance("//foo:chain_dep_two#default,infer-capture-" + sanitize("chain_dep_two.c.o")),"infer-out-%s").resolve("captured/chain_dep_two.c_captured/chain_dep_two.c.cfg"))));
  assertTrue("Expected cfg for top_chain.c not found",Files.exists(workspace.getPath(BuildTargets.getGenPath(filesystem,BuildTargetFactory.newInstance("//foo:binary_with_chain_deps#infer-analyze"),"infer-analysis-%s").resolve("captured/top_chain.c_captured/top_chain.c.cfg"))));
}
