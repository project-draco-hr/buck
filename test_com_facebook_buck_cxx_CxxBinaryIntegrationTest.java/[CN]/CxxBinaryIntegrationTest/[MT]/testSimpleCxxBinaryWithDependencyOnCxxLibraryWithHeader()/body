{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"simple",tmp);
  workspace.setUp();
  BuildTarget target=BuildTargetFactory.newInstance("//foo:binary_with_dep");
  String sourceName="foo.cpp";
  BuildTarget compileTarget=CxxCompilableEnhancer.createCompileBuildTarget(target,sourceName,false);
  BuildTarget headerTarget=CxxDescriptionEnhancer.createHeaderTarget(target);
  BuildTarget headerSymlinkTreeTarget=CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target);
  BuildTarget depTarget=BuildTargetFactory.newInstance("//foo:library_with_header");
  String depSourceName="bar.cpp";
  String depSourceFull="foo/" + depSourceName;
  String depHeaderName="bar.h";
  String depHeaderFull="foo/" + depHeaderName;
  BuildTarget depCompileTarget=CxxCompilableEnhancer.createCompileBuildTarget(depTarget,depSourceName,false);
  BuildTarget depHeaderTarget=CxxDescriptionEnhancer.createHeaderTarget(depTarget);
  BuildTarget depHeaderSymlinkTreeTarget=CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(depTarget);
  BuildTarget depArchiveTarget=CxxDescriptionEnhancer.createStaticLibraryBuildTarget(depTarget);
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  BuckBuildLog buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(depHeaderTarget,depHeaderSymlinkTreeTarget,depCompileTarget,depArchiveTarget,headerTarget,headerSymlinkTreeTarget,compileTarget,target),buildLog.getAllTargets());
  buildLog.assertTargetBuiltLocally(depHeaderTarget.toString());
  buildLog.assertTargetBuiltLocally(depHeaderSymlinkTreeTarget.toString());
  buildLog.assertTargetBuiltLocally(depCompileTarget.toString());
  buildLog.assertTargetBuiltLocally(depArchiveTarget.toString());
  buildLog.assertTargetBuiltLocally(headerTarget.toString());
  buildLog.assertTargetBuiltLocally(headerSymlinkTreeTarget.toString());
  buildLog.assertTargetBuiltLocally(compileTarget.toString());
  buildLog.assertTargetBuiltLocally(target.toString());
  workspace.resetBuildLogFile();
  workspace.replaceFileContents(depHeaderFull,"int x","int y");
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(depHeaderTarget,depHeaderSymlinkTreeTarget,depCompileTarget,depArchiveTarget,headerTarget,headerSymlinkTreeTarget,compileTarget,target),buildLog.getAllTargets());
  buildLog.assertTargetBuiltLocally(depHeaderTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(depHeaderSymlinkTreeTarget.toString());
  buildLog.assertTargetBuiltLocally(depCompileTarget.toString());
  buildLog.assertTargetBuiltLocally(depArchiveTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(headerTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(headerSymlinkTreeTarget.toString());
  buildLog.assertTargetBuiltLocally(compileTarget.toString());
  buildLog.assertTargetBuiltLocally(target.toString());
  workspace.resetBuildLogFile();
  workspace.replaceFileContents(depSourceFull,"x + 5","x + 6");
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(depHeaderTarget,depHeaderSymlinkTreeTarget,depCompileTarget,depArchiveTarget,headerTarget,headerSymlinkTreeTarget,compileTarget,target),buildLog.getAllTargets());
  buildLog.assertTargetHadMatchingRuleKey(depHeaderTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(depHeaderSymlinkTreeTarget.toString());
  buildLog.assertTargetBuiltLocally(depCompileTarget.toString());
  buildLog.assertTargetBuiltLocally(depArchiveTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(headerTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(headerSymlinkTreeTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(compileTarget.toString());
  buildLog.assertTargetBuiltLocally(target.toString());
}
