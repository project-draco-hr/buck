{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"simple",tmp);
  workspace.setUp();
  ProjectFilesystem projectFilesystem=new FakeProjectFilesystem();
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(projectFilesystem,new FakeBuckConfig());
  BuildTarget target=BuildTargetFactory.newInstance("//foo:binary_with_dep");
  BuildTarget binaryTarget=CxxDescriptionEnhancer.createCxxLinkTarget(target);
  String sourceName="foo.cpp";
  BuildTarget preprocessTarget=CxxPreprocessables.createPreprocessBuildTarget(target,cxxPlatform.getFlavor(),CxxSource.Type.CXX,false,sourceName);
  BuildTarget compileTarget=CxxCompilableEnhancer.createCompileBuildTarget(target,cxxPlatform.getFlavor(),sourceName,false);
  BuildTarget headerSymlinkTreeTarget=CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target,cxxPlatform.getFlavor(),CxxDescriptionEnhancer.HeaderVisibility.PRIVATE);
  BuildTarget depTarget=BuildTargetFactory.newInstance("//foo:library_with_header");
  String depSourceName="bar.cpp";
  String depSourceFull="foo/" + depSourceName;
  String depHeaderName="bar.h";
  String depHeaderFull="foo/" + depHeaderName;
  BuildTarget depPreprocessTarget=CxxPreprocessables.createPreprocessBuildTarget(depTarget,cxxPlatform.getFlavor(),CxxSource.Type.CXX,false,depSourceName);
  BuildTarget depCompileTarget=CxxCompilableEnhancer.createCompileBuildTarget(depTarget,cxxPlatform.getFlavor(),depSourceName,false);
  BuildTarget depHeaderSymlinkTreeTarget=CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(depTarget,cxxPlatform.getFlavor(),CxxDescriptionEnhancer.HeaderVisibility.PRIVATE);
  BuildTarget depHeaderExportedSymlinkTreeTarget=CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(depTarget,cxxPlatform.getFlavor(),CxxDescriptionEnhancer.HeaderVisibility.PUBLIC);
  BuildTarget depArchiveTarget=CxxDescriptionEnhancer.createStaticLibraryBuildTarget(depTarget,cxxPlatform.getFlavor());
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  BuckBuildLog buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(depHeaderSymlinkTreeTarget,depHeaderExportedSymlinkTreeTarget,depPreprocessTarget,depCompileTarget,depArchiveTarget,depTarget,headerSymlinkTreeTarget,preprocessTarget,compileTarget,binaryTarget,target),buildLog.getAllTargets());
  buildLog.assertTargetBuiltLocally(depHeaderSymlinkTreeTarget.toString());
  buildLog.assertTargetBuiltLocally(depPreprocessTarget.toString());
  buildLog.assertTargetBuiltLocally(depCompileTarget.toString());
  buildLog.assertTargetBuiltLocally(depArchiveTarget.toString());
  buildLog.assertTargetBuiltLocally(depTarget.toString());
  buildLog.assertTargetBuiltLocally(headerSymlinkTreeTarget.toString());
  buildLog.assertTargetBuiltLocally(preprocessTarget.toString());
  buildLog.assertTargetBuiltLocally(compileTarget.toString());
  buildLog.assertTargetBuiltLocally(binaryTarget.toString());
  buildLog.assertTargetBuiltLocally(target.toString());
  workspace.resetBuildLogFile();
  workspace.replaceFileContents(depHeaderFull,"int x","int y");
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(depHeaderSymlinkTreeTarget,depHeaderExportedSymlinkTreeTarget,depPreprocessTarget,depCompileTarget,depArchiveTarget,depTarget,headerSymlinkTreeTarget,preprocessTarget,compileTarget,binaryTarget,target),buildLog.getAllTargets());
  buildLog.assertTargetHadMatchingRuleKey(depHeaderSymlinkTreeTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(depHeaderExportedSymlinkTreeTarget.toString());
  buildLog.assertTargetBuiltLocally(depPreprocessTarget.toString());
  buildLog.assertTargetBuiltLocally(depCompileTarget.toString());
  buildLog.assertTargetBuiltLocally(depArchiveTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(depTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(headerSymlinkTreeTarget.toString());
  buildLog.assertTargetBuiltLocally(preprocessTarget.toString());
  buildLog.assertTargetBuiltLocally(compileTarget.toString());
  buildLog.assertTargetBuiltLocally(binaryTarget.toString());
  buildLog.assertTargetBuiltLocally(target.toString());
  workspace.resetBuildLogFile();
  workspace.replaceFileContents(depSourceFull,"x + 5","x + 6");
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(depHeaderSymlinkTreeTarget,depHeaderExportedSymlinkTreeTarget,depPreprocessTarget,depCompileTarget,depArchiveTarget,depTarget,headerSymlinkTreeTarget,preprocessTarget,compileTarget,binaryTarget,target),buildLog.getAllTargets());
  buildLog.assertTargetHadMatchingRuleKey(depHeaderSymlinkTreeTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(depHeaderExportedSymlinkTreeTarget.toString());
  buildLog.assertTargetBuiltLocally(depPreprocessTarget.toString());
  buildLog.assertTargetBuiltLocally(depCompileTarget.toString());
  buildLog.assertTargetBuiltLocally(depArchiveTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(depTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(headerSymlinkTreeTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(preprocessTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(compileTarget.toString());
  buildLog.assertTargetBuiltLocally(binaryTarget.toString());
  buildLog.assertTargetBuiltLocally(target.toString());
}
