{
  assumeTrue(Platform.detect() != Platform.WINDOWS);
  ProjectWorkspace workspace=InferHelper.setupCxxInferWorkspace(this,tmp,Optional.<String>absent());
  ProjectFilesystem filesystem=new ProjectFilesystem(workspace.getDestPath());
  BuildTarget inputBuildTarget=BuildTargetFactory.newInstance("//foo:binary_with_diamond_deps").withFlavors(CxxInferEnhancer.InferFlavors.INFER_CAPTURE_ALL.get());
  workspace.runBuckCommand("build",inputBuildTarget.getFullyQualifiedName()).assertSuccess();
  assertTrue(Files.exists(workspace.getPath(BuildTargets.getGenPath(filesystem,inputBuildTarget,"infer-%s/infer-deps.txt"))));
  String loggedDeps=workspace.getFileContents(BuildTargets.getGenPath(filesystem,inputBuildTarget,"infer-%s/infer-deps.txt"));
  String sanitizedSimpleCpp=sanitize("simple.cpp.o");
  String sanitizedDepOne=sanitize("dep_one.c.o");
  String sanitizedDepTwo=sanitize("dep_two.c.o");
  String sanitizedSrcWithDeps=sanitize("src_with_deps.c.o");
  BuildTarget simpleCppTarget=BuildTargetFactory.newInstance("//foo:simple_lib#default,infer-capture-" + sanitizedSimpleCpp);
  BuildTarget depOneTarget=BuildTargetFactory.newInstance("//foo:diamond_dep_one#default,infer-capture-" + sanitizedDepOne);
  BuildTarget depTwoTarget=BuildTargetFactory.newInstance("//foo:diamond_dep_two#default,infer-capture-" + sanitizedDepTwo);
  BuildTarget srcWithDepsTarget=BuildTargetFactory.newInstance("//foo:binary_with_diamond_deps#default,infer-capture-" + sanitizedSrcWithDeps);
  String expectedOutput=Joiner.on('\n').join(ImmutableList.of(srcWithDepsTarget.getFullyQualifiedName() + "\t" + "[default, infer-capture-"+ sanitizedSrcWithDeps+ "]\t"+ BuildTargets.getGenPath(filesystem,srcWithDepsTarget,"infer-out-%s"),depOneTarget.getFullyQualifiedName() + "\t" + "[default, infer-capture-"+ sanitizedDepOne+ "]\t"+ BuildTargets.getGenPath(filesystem,depOneTarget,"infer-out-%s"),depTwoTarget.getFullyQualifiedName() + "\t" + "[default, infer-capture-"+ sanitizedDepTwo+ "]\t"+ BuildTargets.getGenPath(filesystem,depTwoTarget,"infer-out-%s"),simpleCppTarget.getFullyQualifiedName() + "\t" + "[default, infer-capture-"+ sanitizedSimpleCpp+ "]\t"+ BuildTargets.getGenPath(filesystem,simpleCppTarget,"infer-out-%s")));
  assertEquals(expectedOutput + "\n",loggedDeps);
}
