{
  assumeTrue(Platform.detect() != Platform.WINDOWS);
  ProjectWorkspace workspace=InferHelper.setupCxxInferWorkspace(this,tmp,Optional.<String>absent());
  workspace.enableDirCache();
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(FakeBuckConfig.builder().build()));
  BuildTarget inputBuildTarget=BuildTargetFactory.newInstance("//foo:binary_with_deps");
  final String inputBuildTargetName=inputBuildTarget.withFlavors(CxxInferEnhancer.InferFlavors.INFER.get()).getFullyQualifiedName();
  workspace.runBuckCommand("build",inputBuildTargetName).assertSuccess();
  workspace.runBuckCommand("clean").assertSuccess();
  workspace.runBuckCommand("build",inputBuildTargetName).assertSuccess();
  BuckBuildLog buildLog=workspace.getBuildLog();
  for (  BuildTarget buildTarget : buildLog.getAllTargets()) {
    buildLog.assertTargetWasFetchedFromCache(buildTarget.toString());
  }
  workspace.resetBuildLogFile();
  workspace.replaceFileContents("fake-infer/fake-bin/infer","0.12345","9.9999");
  workspace.runBuckCommand("clean").assertSuccess();
  workspace.runBuckCommand("build",inputBuildTargetName).assertSuccess();
  buildLog=workspace.getBuildLog();
  String sourceName="src_with_deps.c";
  CxxSourceRuleFactory cxxSourceRuleFactory=CxxSourceRuleFactoryHelper.of(workspace.getDestPath(),inputBuildTarget,cxxPlatform);
  BuildTarget topCaptureBuildTarget=cxxSourceRuleFactory.createInferCaptureBuildTarget(sourceName);
  BuildTarget topInferAnalysisTarget=inputBuildTarget.withFlavors(CxxInferEnhancer.InferFlavors.INFER_ANALYZE.get());
  BuildTarget topInferReportTarget=inputBuildTarget.withFlavors(CxxInferEnhancer.InferFlavors.INFER.get());
  BuildTarget depOneBuildTarget=BuildTargetFactory.newInstance(workspace.getDestPath(),"//foo:dep_one");
  String depOneSourceName="dep_one.c";
  CxxSourceRuleFactory depOneSourceRuleFactory=CxxSourceRuleFactoryHelper.of(workspace.getDestPath(),depOneBuildTarget,cxxPlatform);
  BuildTarget depOneCaptureBuildTarget=depOneSourceRuleFactory.createInferCaptureBuildTarget(depOneSourceName);
  BuildTarget depOneInferAnalysisTarget=depOneCaptureBuildTarget.withFlavors(cxxPlatform.getFlavor(),CxxInferEnhancer.InferFlavors.INFER_ANALYZE.get());
  BuildTarget depTwoBuildTarget=BuildTargetFactory.newInstance(workspace.getDestPath(),"//foo:dep_two");
  CxxSourceRuleFactory depTwoSourceRuleFactory=CxxSourceRuleFactoryHelper.of(workspace.getDestPath(),depTwoBuildTarget,cxxPlatform);
  BuildTarget depTwoCaptureBuildTarget=depTwoSourceRuleFactory.createInferCaptureBuildTarget("dep_two.c");
  BuildTarget depTwoInferAnalysisTarget=depTwoCaptureBuildTarget.withFlavors(cxxPlatform.getFlavor(),CxxInferEnhancer.InferFlavors.INFER_ANALYZE.get());
  ImmutableSet<String> locallyBuiltTargets=ImmutableSet.of(cxxSourceRuleFactory.createAggregatedPreprocessDepsBuildTarget().toString(),topCaptureBuildTarget.toString(),topInferAnalysisTarget.toString(),topInferReportTarget.toString(),depOneSourceRuleFactory.createAggregatedPreprocessDepsBuildTarget().toString(),depOneCaptureBuildTarget.toString(),depOneInferAnalysisTarget.toString(),depTwoSourceRuleFactory.createAggregatedPreprocessDepsBuildTarget().toString(),depTwoCaptureBuildTarget.toString(),depTwoInferAnalysisTarget.toString());
  for (  String t : locallyBuiltTargets) {
    buildLog.assertTargetBuiltLocally(t);
  }
  Set<String> builtFromCacheTargets=FluentIterable.from(buildLog.getAllTargets()).filter(new Predicate<BuildTarget>(){
    @Override public boolean apply(    BuildTarget target){
      return (!target.getFlavors().contains(CxxDescriptionEnhancer.EXPORTED_HEADER_SYMLINK_TREE_FLAVOR) && !target.getFlavors().contains(CxxDescriptionEnhancer.HEADER_SYMLINK_TREE_FLAVOR));
    }
  }
).transform(Functions.toStringFunction()).filter(Predicates.not(Predicates.in(locallyBuiltTargets))).toSet();
  for (  String t : builtFromCacheTargets) {
    buildLog.assertTargetWasFetchedFromCache(t);
  }
}
