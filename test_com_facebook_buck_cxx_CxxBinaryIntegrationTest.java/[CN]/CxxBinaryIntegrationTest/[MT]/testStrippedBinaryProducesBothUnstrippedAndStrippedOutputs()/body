{
  assumeTrue(Platform.detect() == Platform.MACOS);
  BuildTarget unstrippedTarget=BuildTargetFactory.newInstance("//:test");
  BuildTarget strippedTarget=unstrippedTarget.withFlavors(StripStyle.DEBUGGING_SYMBOLS.getFlavor());
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"header_namespace",tmp);
  workspace.setUp();
  ProjectFilesystem filesystem=new ProjectFilesystem(workspace.getDestPath());
  workspace.runBuckCommand("build","--config","cxx.cxxflags=-g",strippedTarget.getFullyQualifiedName()).assertSuccess();
  Path strippedPath=workspace.getPath(BuildTargets.getGenPath(filesystem,BuildTarget.builder(strippedTarget).addFlavors(CxxStrip.RULE_FLAVOR).build(),"%s"));
  Path unstrippedPath=workspace.getPath(BuildTargets.getGenPath(filesystem,unstrippedTarget,"%s"));
  String strippedOut=workspace.runCommand("dsymutil","-s",strippedPath.toString()).getStdout().or("");
  String unstrippedOut=workspace.runCommand("dsymutil","-s",unstrippedPath.toString()).getStdout().or("");
  assertThat(strippedOut,Matchers.containsStringIgnoringCase("dyld_stub_binder"));
  assertThat(unstrippedOut,Matchers.containsStringIgnoringCase("dyld_stub_binder"));
  assertThat(strippedOut,Matchers.not(Matchers.containsStringIgnoringCase("test.cpp")));
  assertThat(unstrippedOut,Matchers.containsStringIgnoringCase("test.cpp"));
}
