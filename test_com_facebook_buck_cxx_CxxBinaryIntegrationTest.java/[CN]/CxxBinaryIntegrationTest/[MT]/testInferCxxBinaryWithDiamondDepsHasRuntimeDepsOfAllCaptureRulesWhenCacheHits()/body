{
  assumeTrue(Platform.detect() != Platform.WINDOWS);
  ProjectWorkspace workspace=InferHelper.setupCxxInferWorkspace(this,tmp,Optional.<String>absent());
  workspace.enableDirCache();
  BuildTarget inputBuildTarget=BuildTargetFactory.newInstance("//foo:binary_with_diamond_deps");
  String inputBuildTargetName=inputBuildTarget.withFlavors(CxxInferEnhancer.InferFlavors.INFER_CAPTURE_ALL.get()).getFullyQualifiedName();
  workspace.runBuckCommand("build",inputBuildTargetName).assertSuccess();
  workspace.runBuckCommand("clean").assertSuccess();
  workspace.runBuckCommand("build",inputBuildTargetName).assertSuccess();
  BuckBuildLog buildLog=workspace.getBuildLog();
  for (  BuildTarget buildTarget : buildLog.getAllTargets()) {
    buildLog.assertTargetWasFetchedFromCache(buildTarget.toString());
  }
  assertTrue("This file was expected to exist because it's declared as runtime dep",workspace.getPath("buck-out/gen/foo/infer-out-binary_with_diamond_deps#default,infer-capture-" + sanitize("simple.cpp.o") + "/captured/simple.cpp_captured/simple.cpp.cfg").toFile().exists());
  assertTrue("This file was expected to exist because it's declared as runtime dep",workspace.getPath("buck-out/gen/foo/infer-out-binary_with_diamond_deps#default,infer-capture-" + sanitize("dep_one.c.o") + "/captured/dep_one.c_captured/dep_one.c.cfg").toFile().exists());
  assertTrue("This file was expected to exist because it's declared as runtime dep",workspace.getPath("buck-out/gen/foo/infer-out-binary_with_diamond_deps#default,infer-capture-" + sanitize("dep_two.c.o") + "/captured/dep_two.c_captured/dep_two.c.cfg").toFile().exists());
  assertTrue("This file was expected to exist because it's declared as runtime dep",workspace.getPath("buck-out/gen/foo/infer-out-binary_with_diamond_deps#default,infer-capture-" + sanitize("src_with_deps.c.o") + "/captured/src_with_deps.c_captured/src_with_deps.c.cfg").toFile().exists());
}
