{
  assumeTrue(Platform.detect() != Platform.WINDOWS);
  ProjectWorkspace workspace=InferHelper.setupCxxInferWorkspace(this,tmp,Optional.<String>absent());
  workspace.enableDirCache();
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(FakeBuckConfig.builder().build()));
  BuildTarget inputBuildTarget=BuildTargetFactory.newInstance("//foo:binary_with_deps");
  String inputBuildTargetName=inputBuildTarget.withFlavors(CxxInferEnhancer.InferFlavors.INFER.get()).getFullyQualifiedName();
  workspace.runBuckCommand("build",inputBuildTargetName).assertSuccess();
  workspace.runBuckCommand("clean").assertSuccess();
  workspace.runBuckCommand("build",inputBuildTargetName).assertSuccess();
  BuckBuildLog buildLog=workspace.getBuildLog();
  for (  BuildTarget buildTarget : buildLog.getAllTargets()) {
    buildLog.assertTargetWasFetchedFromCache(buildTarget.toString());
  }
  String sourceName="src_with_deps.c";
  workspace.replaceFileContents("foo/" + sourceName,"10","30");
  workspace.runBuckCommand("clean").assertSuccess();
  workspace.runBuckCommand("build",inputBuildTargetName).assertSuccess();
  buildLog=workspace.getBuildLog();
  CxxSourceRuleFactory cxxSourceRuleFactory=CxxSourceRuleFactoryHelper.of(workspace.getDestPath(),inputBuildTarget,cxxPlatform);
  BuildTarget captureBuildTarget=cxxSourceRuleFactory.createInferCaptureBuildTarget(sourceName);
  BuildTarget inferAnalysisTarget=inputBuildTarget.withFlavors(CxxInferEnhancer.InferFlavors.INFER_ANALYZE.get());
  BuildTarget inferReportTarget=inputBuildTarget.withFlavors(CxxInferEnhancer.InferFlavors.INFER.get());
  BuildTarget aggregatedDepsTarget=cxxSourceRuleFactory.createAggregatedPreprocessDepsBuildTarget();
  String bt;
  for (  BuildTarget buildTarget : buildLog.getAllTargets()) {
    bt=buildTarget.toString();
    if (bt.equals(inferAnalysisTarget.toString()) || bt.equals(captureBuildTarget.toString()) || bt.equals(inferReportTarget.toString())|| bt.equals(aggregatedDepsTarget.toString())) {
      buildLog.assertTargetBuiltLocally(bt);
    }
 else {
      buildLog.assertTargetWasFetchedFromCache(buildTarget.toString());
    }
  }
}
