{
  assumeTrue(Platform.detect() != Platform.WINDOWS);
  ProjectWorkspace workspace=InferHelper.setupCxxInferWorkspace(this,tmp,Optional.<String>absent());
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(FakeBuckConfig.builder().build()));
  BuildTarget inputBuildTarget=BuildTargetFactory.newInstance(workspace.getDestPath(),"//foo:binary_with_deps");
  String inputBuildTargetName=inputBuildTarget.withFlavors(CxxInferEnhancer.InferFlavors.INFER.get()).getFullyQualifiedName();
  workspace.runBuckCommand("build",inputBuildTargetName).assertSuccess();
  String sourceName="src_with_deps.c";
  CxxSourceRuleFactory cxxSourceRuleFactory=CxxSourceRuleFactoryHelper.of(workspace.getDestPath(),inputBuildTarget,cxxPlatform);
  BuildTarget topCaptureBuildTarget=cxxSourceRuleFactory.createInferCaptureBuildTarget(sourceName);
  BuildTarget topHeaderSymlinkTreeTarget=CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(inputBuildTarget,cxxPlatform.getFlavor(),HeaderVisibility.PRIVATE);
  BuildTarget topInferAnalysisTarget=inputBuildTarget.withFlavors(CxxInferEnhancer.InferFlavors.INFER_ANALYZE.get());
  BuildTarget topInferReportTarget=inputBuildTarget.withFlavors(CxxInferEnhancer.InferFlavors.INFER.get());
  BuildTarget depOneBuildTarget=BuildTargetFactory.newInstance(workspace.getDestPath(),"//foo:dep_one");
  String depOneSourceName="dep_one.c";
  String depOneSourceFull="foo/" + depOneSourceName;
  CxxSourceRuleFactory depOneSourceRuleFactory=CxxSourceRuleFactoryHelper.of(workspace.getDestPath(),depOneBuildTarget,cxxPlatform);
  BuildTarget depOneCaptureBuildTarget=depOneSourceRuleFactory.createInferCaptureBuildTarget(depOneSourceName);
  BuildTarget depOneHeaderSymlinkTreeTarget=CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(depOneBuildTarget,cxxPlatform.getFlavor(),HeaderVisibility.PRIVATE);
  BuildTarget depOneExportedHeaderSymlinkTreeTarget=CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(depOneBuildTarget,cxxPlatform.getFlavor(),HeaderVisibility.PUBLIC);
  BuildTarget depOneInferAnalysisTarget=depOneCaptureBuildTarget.withFlavors(cxxPlatform.getFlavor(),CxxInferEnhancer.InferFlavors.INFER_ANALYZE.get());
  BuildTarget depTwoBuildTarget=BuildTargetFactory.newInstance(workspace.getDestPath(),"//foo:dep_two");
  CxxSourceRuleFactory depTwoSourceRuleFactory=CxxSourceRuleFactoryHelper.of(workspace.getDestPath(),depTwoBuildTarget,cxxPlatform);
  BuildTarget depTwoCaptureBuildTarget=depTwoSourceRuleFactory.createInferCaptureBuildTarget("dep_two.c");
  BuildTarget depTwoHeaderSymlinkTreeTarget=CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(depTwoBuildTarget,cxxPlatform.getFlavor(),HeaderVisibility.PRIVATE);
  BuildTarget depTwoExportedHeaderSymlinkTreeTarget=CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(depTwoBuildTarget,cxxPlatform.getFlavor(),HeaderVisibility.PUBLIC);
  BuildTarget depTwoInferAnalysisTarget=depTwoCaptureBuildTarget.withFlavors(cxxPlatform.getFlavor(),CxxInferEnhancer.InferFlavors.INFER_ANALYZE.get());
  assertEquals(ImmutableSet.of(topCaptureBuildTarget,topHeaderSymlinkTreeTarget,topInferAnalysisTarget,topInferReportTarget,depOneCaptureBuildTarget,depOneHeaderSymlinkTreeTarget,depOneExportedHeaderSymlinkTreeTarget,depOneInferAnalysisTarget,depTwoCaptureBuildTarget,depTwoHeaderSymlinkTreeTarget,depTwoExportedHeaderSymlinkTreeTarget,depTwoInferAnalysisTarget),workspace.getBuildLog().getAllTargets());
  workspace.resetBuildLogFile();
  workspace.runBuckCommand("build",inputBuildTargetName).assertSuccess();
  BuckBuildLog buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(topInferReportTarget),buildLog.getAllTargets());
  buildLog.assertTargetHadMatchingRuleKey(topInferReportTarget.toString());
  workspace.resetBuildLogFile();
  workspace.replaceFileContents(depOneSourceFull,"flag > 0","flag < 0");
  workspace.runBuckCommand("build",inputBuildTargetName).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(topInferAnalysisTarget,topInferReportTarget,topCaptureBuildTarget,depTwoInferAnalysisTarget,depOneCaptureBuildTarget,depOneExportedHeaderSymlinkTreeTarget,depOneHeaderSymlinkTreeTarget,depOneInferAnalysisTarget),buildLog.getAllTargets());
  buildLog.assertTargetBuiltLocally(topInferAnalysisTarget.toString());
  buildLog.assertTargetBuiltLocally(topInferReportTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(topCaptureBuildTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(depTwoInferAnalysisTarget.toString());
  buildLog.assertTargetBuiltLocally(depOneCaptureBuildTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(depOneExportedHeaderSymlinkTreeTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(depOneHeaderSymlinkTreeTarget.toString());
  buildLog.assertTargetBuiltLocally(depOneInferAnalysisTarget.toString());
}
