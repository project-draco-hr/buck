{
  BuckConfig buckConfig=FakeBuckConfig.builder().build();
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(buckConfig));
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"resolved",tmp);
  workspace.setUp();
  workspace.writeContentsToPath("","lib2.h");
  BuildTarget target=BuildTargetFactory.newInstance("//:bin");
  CxxSourceRuleFactory cxxSourceRuleFactory=CxxSourceRuleFactoryHelper.of(workspace.getDestPath(),target,cxxPlatform);
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  BuildTarget ppTarget=cxxSourceRuleFactory.createPreprocessBuildTarget("bin.cpp",CxxSource.Type.CXX,CxxSourceRuleFactory.PicType.PDC);
  Path output=cxxSourceRuleFactory.getPreprocessOutputPath(ppTarget,CxxSource.Type.CXX,"bin.cpp");
  String contents=workspace.getFileContents(output.toString());
  assertThat(contents,Matchers.not(Matchers.containsString(BuckConstant.SCRATCH_DIR)));
  assertThat(contents,Matchers.not(Matchers.containsString(BuckConstant.GEN_DIR)));
  assertThat(contents,Matchers.containsString("# 1 \"bin.h"));
  assertThat(contents,Matchers.containsString("# 1 \"lib1.h"));
  assertThat(contents,Matchers.containsString("# 1 \"lib2.h"));
}
