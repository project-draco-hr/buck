{
  Optional<Tool> configTool=goBuckConfig.getGoTestMainGenerator(resolver);
  if (configTool.isPresent()) {
    return configTool.get();
  }
  BuildTarget generatorTarget=sourceParams.getBuildTarget().withFlavors(ImmutableFlavor.of("make-test-main-gen"));
  Optional<BuildRule> generator=resolver.getRuleOptional(generatorTarget);
  if (generator.isPresent()) {
    return ((BinaryBuildRule)generator.get()).getExecutableCommand();
  }
  BuildTarget generatorSourceTarget=sourceParams.getBuildTarget().withAppendedFlavors(ImmutableFlavor.of("test-main-gen-source"));
  WriteFile writeFile=resolver.addToIndex(new WriteFile(sourceParams.copyWithChanges(generatorSourceTarget,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),new SourcePathResolver(resolver),extractTestMainGenerator(),BuildTargets.getGenPath(sourceParams.getProjectFilesystem(),generatorSourceTarget,"%s/main.go"),false));
  GoBinary binary=resolver.addToIndex(createGoBinaryRule(sourceParams.copyWithChanges(generatorTarget,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(writeFile))),resolver,goBuckConfig,ImmutableSet.<SourcePath>of(new BuildTargetSourcePath(generatorSourceTarget)),ImmutableList.<String>of(),ImmutableList.<String>of(),ImmutableList.<String>of(),goBuckConfig.getDefaultPlatform()));
  return binary.getExecutableCommand();
}
