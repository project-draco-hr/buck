{
  Map<RDotTxtEntry,String> finalIds=null;
  IntEnumerator enumerator=null;
  if (uberRDotTxtIds.isPresent()) {
    finalIds=uberRDotTxtIds.get();
  }
 else {
    enumerator=new IntEnumerator(0x7f01001);
  }
  SortedSetMultimap<String,RDotTxtEntry> rDotJavaPackageToSymbolsFiles=TreeMultimap.create();
  for (  Map.Entry<Path,String> entry : symbolsFileToRDotJavaPackage.entrySet()) {
    Path symbolsFile=entry.getKey();
    List<String> linesInSymbolsFile;
    try {
      linesInSymbolsFile=FluentIterable.from(context.getProjectFilesystem().readLines(symbolsFile)).filter(MoreStrings.NON_EMPTY).toList();
    }
 catch (    IOException e) {
      throw new RuntimeException(e);
    }
    String packageName=entry.getValue();
    for (    String line : linesInSymbolsFile) {
      Optional<RDotTxtEntry> parsedEntry=RDotTxtEntry.parse(line);
      Preconditions.checkState(parsedEntry.isPresent(),"Should be able to match '%s'.",line);
      RDotTxtEntry resource=parsedEntry.get();
      if (uberRDotTxtIds.isPresent()) {
        Preconditions.checkNotNull(finalIds);
        if (!finalIds.containsKey(resource)) {
          if (warnMissingResource) {
            context.postEvent(ConsoleEvent.warning("Cannot find resource '%s' in the uber R.txt.",resource));
          }
          continue;
        }
        resource=resource.copyWithNewIdValue(finalIds.get(resource));
      }
 else       if (resource.idValue.startsWith("0x7f")) {
        Preconditions.checkNotNull(enumerator);
        resource=resource.copyWithNewIdValue(String.format("0x%08x",enumerator.next()));
      }
      rDotJavaPackageToSymbolsFiles.put(packageName,resource);
    }
  }
  return rDotJavaPackageToSymbolsFiles;
}
