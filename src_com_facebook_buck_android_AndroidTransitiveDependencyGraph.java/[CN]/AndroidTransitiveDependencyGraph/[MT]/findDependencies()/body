{
  final ImmutableSet.Builder<Path> assetsDirectories=ImmutableSet.builder();
  final ImmutableSet.Builder<Path> nativeLibsDirectories=ImmutableSet.builder();
  final ImmutableSet.Builder<Path> nativeLibAssetsDirectories=ImmutableSet.builder();
  final ImmutableSet.Builder<BuildTarget> nativeTargetsWithAssets=ImmutableSet.builder();
  final ImmutableSet.Builder<Path> manifestFiles=ImmutableSet.builder();
  final ImmutableSet.Builder<Path> proguardConfigs=ImmutableSet.builder();
  new AbstractDependencyVisitor(rulesToTraverseForTransitiveDeps){
    @Override public ImmutableSet<BuildRule> visit(    BuildRule rule){
      if (rule.getBuildable() instanceof NativeLibraryBuildable) {
        NativeLibraryBuildable nativeLibraryRule=(NativeLibraryBuildable)rule.getBuildable();
        if (nativeLibraryRule.isAsset()) {
          nativeLibAssetsDirectories.add(nativeLibraryRule.getLibraryPath());
          nativeTargetsWithAssets.add(rule.getBuildTarget());
        }
 else {
          nativeLibsDirectories.add(nativeLibraryRule.getLibraryPath());
        }
        if (rule.getBuildable() instanceof PrebuiltNativeLibrary) {
          return rule.getDeps();
        }
      }
 else       if (rule.getBuildable() instanceof AndroidResource) {
        AndroidResource androidRule=(AndroidResource)rule.getBuildable();
        Path assetsDirectory=androidRule.getAssets();
        if (assetsDirectory != null) {
          assetsDirectories.add(assetsDirectory);
        }
        Path manifestFile=androidRule.getManifestFile();
        if (manifestFile != null) {
          manifestFiles.add(manifestFile);
        }
      }
 else       if (rule.getBuildable() instanceof DefaultJavaLibrary) {
        DefaultJavaLibrary defaultJavaLibrary=(DefaultJavaLibrary)rule.getBuildable();
        Optionals.addIfPresent(defaultJavaLibrary.getProguardConfig(),proguardConfigs);
        if (rule.getBuildable() instanceof AndroidLibrary) {
          AndroidLibrary androidLibraryRule=(AndroidLibrary)rule.getBuildable();
          Optionals.addIfPresent(androidLibraryRule.getManifestFile(),manifestFiles);
        }
      }
      return maybeVisitAllDeps(rule,rule.getProperties().is(LIBRARY));
    }
  }
.start();
  return new AndroidTransitiveDependencies(nativeLibsDirectories.build(),nativeLibAssetsDirectories.build(),assetsDirectories.build(),nativeTargetsWithAssets.build(),manifestFiles.build(),proguardConfigs.build());
}
