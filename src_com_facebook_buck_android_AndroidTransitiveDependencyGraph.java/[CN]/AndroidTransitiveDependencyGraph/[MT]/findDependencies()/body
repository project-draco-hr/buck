{
  final ImmutableSet.Builder<Path> assetsDirectories=ImmutableSet.builder();
  final ImmutableSet.Builder<Path> nativeLibsDirectories=ImmutableSet.builder();
  final ImmutableSet.Builder<Path> nativeLibAssetsDirectories=ImmutableSet.builder();
  final ImmutableSet.Builder<BuildTarget> nativeTargetsWithAssets=ImmutableSet.builder();
  final ImmutableSet.Builder<String> manifestFiles=ImmutableSet.builder();
  final ImmutableSet.Builder<String> proguardConfigs=ImmutableSet.builder();
  new AbstractDependencyVisitor(rulesToTraverseForTransitiveDeps){
    @Override public ImmutableSet<BuildRule> visit(    BuildRule rule){
      if (rule.getBuildable() instanceof NativeLibraryBuildable) {
        NativeLibraryBuildable nativeLibraryRule=(NativeLibraryBuildable)rule.getBuildable();
        if (nativeLibraryRule.isAsset()) {
          nativeLibAssetsDirectories.add(nativeLibraryRule.getLibraryPath());
          nativeTargetsWithAssets.add(rule.getBuildTarget());
        }
 else {
          nativeLibsDirectories.add(nativeLibraryRule.getLibraryPath());
        }
        if (rule.getBuildable() instanceof PrebuiltNativeLibrary) {
          return rule.getDeps();
        }
      }
 else       if (rule instanceof AndroidResourceRule) {
        AndroidResourceRule androidRule=(AndroidResourceRule)rule;
        Path assetsDirectory=androidRule.getAssets();
        if (assetsDirectory != null) {
          assetsDirectories.add(assetsDirectory);
        }
        Path manifestFile=androidRule.getManifestFile();
        if (manifestFile != null) {
          manifestFiles.add(manifestFile.toString());
        }
      }
 else       if (rule instanceof DefaultJavaLibraryRule) {
        DefaultJavaLibraryRule defaultJavaLibraryRule=(DefaultJavaLibraryRule)rule;
        Optionals.addIfPresent(defaultJavaLibraryRule.getProguardConfig(),proguardConfigs);
        if (rule instanceof AndroidLibraryRule) {
          AndroidLibraryRule androidLibraryRule=(AndroidLibraryRule)rule;
          Optionals.addIfPresent(androidLibraryRule.getManifestFile(),manifestFiles);
        }
      }
      return maybeVisitAllDeps(rule,rule.getProperties().is(LIBRARY));
    }
  }
.start();
  return new AndroidTransitiveDependencies(nativeLibsDirectories.build(),nativeLibAssetsDirectories.build(),assetsDirectories.build(),nativeTargetsWithAssets.build(),manifestFiles.build(),proguardConfigs.build());
}
