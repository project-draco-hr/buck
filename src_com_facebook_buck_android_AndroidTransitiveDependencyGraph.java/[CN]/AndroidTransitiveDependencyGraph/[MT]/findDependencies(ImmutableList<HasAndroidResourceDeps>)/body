{
  final ImmutableSet.Builder<String> pathsToDexBuilder=ImmutableSet.builder();
  final ImmutableSet.Builder<String> noDxPathsBuilder=ImmutableSet.builder();
  final ImmutableSet.Builder<String> pathsToThirdPartyJarsBuilder=ImmutableSet.builder();
  final ImmutableSet.Builder<String> assetsDirectories=ImmutableSet.builder();
  final ImmutableSet.Builder<String> nativeLibsDirectories=ImmutableSet.builder();
  final ImmutableSet.Builder<String> manifestFiles=ImmutableSet.builder();
  final ImmutableSet.Builder<String> proguardConfigs=ImmutableSet.builder();
  ImmutableSet<Map.Entry<BuildRule,String>> classpath=Classpaths.getClasspathEntries(buildRule.getDeps()).entries();
  for (  Map.Entry<BuildRule,String> entry : classpath) {
    if (!buildRulesToExcludeFromDex.contains(entry.getKey())) {
      pathsToDexBuilder.add(entry.getValue());
    }
 else {
      noDxPathsBuilder.add(entry.getValue());
    }
  }
  UberRDotJavaUtil.AndroidResourceDetails details=new UberRDotJavaUtil.AndroidResourceDetails(androidResourceDeps);
  new AbstractDependencyVisitor(buildRule){
    @Override public boolean visit(    BuildRule rule){
      if (rule instanceof PrebuiltJarRule) {
        PrebuiltJarRule prebuiltJarRule=(PrebuiltJarRule)rule;
        pathsToThirdPartyJarsBuilder.add(prebuiltJarRule.getBinaryJar());
      }
 else       if (rule instanceof NdkLibraryRule) {
        NdkLibraryRule ndkRule=(NdkLibraryRule)rule;
        nativeLibsDirectories.add(ndkRule.getLibraryPath());
      }
 else       if (rule instanceof AndroidResourceRule) {
        AndroidResourceRule androidRule=(AndroidResourceRule)rule;
        String assetsDirectory=androidRule.getAssets();
        if (assetsDirectory != null) {
          assetsDirectories.add(assetsDirectory);
        }
        String manifestFile=androidRule.getManifestFile();
        if (manifestFile != null) {
          manifestFiles.add(manifestFile);
        }
      }
 else       if (rule instanceof PrebuiltNativeLibraryBuildRule) {
        PrebuiltNativeLibraryBuildRule androidRule=(PrebuiltNativeLibraryBuildRule)rule;
        String nativeLibsDirectory=androidRule.getNativeLibs();
        if (nativeLibsDirectory != null) {
          nativeLibsDirectories.add(nativeLibsDirectory);
        }
      }
 else       if (rule instanceof DefaultJavaLibraryRule) {
        DefaultJavaLibraryRule defaultJavaLibraryRule=(DefaultJavaLibraryRule)rule;
        Optionals.addIfPresent(defaultJavaLibraryRule.getProguardConfig(),proguardConfigs);
        if (rule instanceof AndroidLibraryRule) {
          AndroidLibraryRule androidLibraryRule=(AndroidLibraryRule)rule;
          Optionals.addIfPresent(androidLibraryRule.getManifestFile(),manifestFiles);
        }
      }
      return rule.isLibrary() || rule == buildRule;
    }
  }
.start();
  ImmutableSet<String> rDotJavaPackages=details.rDotJavaPackages;
  if (!rDotJavaPackages.isEmpty()) {
    pathsToDexBuilder.add(UberRDotJavaUtil.getPathToCompiledRDotJavaFiles(buildRule.getBuildTarget()));
  }
  ImmutableSet<String> noDxPaths=noDxPathsBuilder.build();
  Set<String> classpathEntries=Sets.difference(pathsToDexBuilder.build(),noDxPaths);
  Set<String> pathsToThirdPartyJars=Sets.difference(pathsToThirdPartyJarsBuilder.build(),noDxPaths);
  return new AndroidTransitiveDependencies(classpathEntries,pathsToThirdPartyJars,assetsDirectories.build(),nativeLibsDirectories.build(),manifestFiles.build(),details.resDirectories,rDotJavaPackages,proguardConfigs.build(),noDxPaths);
}
