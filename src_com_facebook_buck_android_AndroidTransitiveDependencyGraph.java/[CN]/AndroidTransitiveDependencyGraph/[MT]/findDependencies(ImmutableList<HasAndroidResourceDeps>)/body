{
  final ImmutableSet.Builder<String> assetsDirectories=ImmutableSet.builder();
  final ImmutableSet.Builder<String> nativeLibsDirectories=ImmutableSet.builder();
  final ImmutableSet.Builder<String> manifestFiles=ImmutableSet.builder();
  final ImmutableSet.Builder<String> proguardConfigs=ImmutableSet.builder();
  UberRDotJavaUtil.AndroidResourceDetails details=createAndroidResourceDetails(androidResourceDeps);
  new AbstractDependencyVisitor(buildRule){
    @Override public boolean visit(    BuildRule rule){
      if (rule instanceof NdkLibraryRule) {
        NdkLibraryRule ndkRule=(NdkLibraryRule)rule;
        nativeLibsDirectories.add(ndkRule.getLibraryPath());
      }
 else       if (rule instanceof AndroidResourceRule) {
        AndroidResourceRule androidRule=(AndroidResourceRule)rule;
        String assetsDirectory=androidRule.getAssets();
        if (assetsDirectory != null) {
          assetsDirectories.add(assetsDirectory);
        }
        String manifestFile=androidRule.getManifestFile();
        if (manifestFile != null) {
          manifestFiles.add(manifestFile);
        }
      }
 else       if (rule instanceof PrebuiltNativeLibraryBuildRule) {
        PrebuiltNativeLibraryBuildRule androidRule=(PrebuiltNativeLibraryBuildRule)rule;
        String nativeLibsDirectory=androidRule.getNativeLibs();
        if (nativeLibsDirectory != null) {
          nativeLibsDirectories.add(nativeLibsDirectory);
        }
      }
 else       if (rule instanceof DefaultJavaLibraryRule) {
        DefaultJavaLibraryRule defaultJavaLibraryRule=(DefaultJavaLibraryRule)rule;
        Optionals.addIfPresent(defaultJavaLibraryRule.getProguardConfig(),proguardConfigs);
        if (rule instanceof AndroidLibraryRule) {
          AndroidLibraryRule androidLibraryRule=(AndroidLibraryRule)rule;
          Optionals.addIfPresent(androidLibraryRule.getManifestFile(),manifestFiles);
        }
      }
      return rule.isLibrary() || rule == buildRule;
    }
  }
.start();
  return new AndroidTransitiveDependencies(assetsDirectories.build(),nativeLibsDirectories.build(),manifestFiles.build(),details.resDirectories,details.rDotJavaPackages,proguardConfigs.build());
}
