{
  final MutableDirectedGraph<BuildRule> graph=new MutableDirectedGraph<>();
  AbstractDependencyVisitor visitor=new AbstractDependencyVisitor(inputs){
    @Override public ImmutableSet<BuildRule> visit(    BuildRule rule){
      if (typeFilter.isAssignableFrom(rule.getClass())) {
        graph.addNode(rule);
        for (        BuildRule dep : rule.getDeps()) {
          if (typeFilter.isAssignableFrom(dep.getClass())) {
            graph.addEdge(rule,dep);
          }
        }
        return rule.getDeps();
      }
 else {
        return ImmutableSet.of();
      }
    }
  }
;
  visitor.start();
  return new DefaultImmutableDirectedAcyclicGraph<BuildRule>(graph);
}
