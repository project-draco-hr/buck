{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(FakeFileHashCache.createFromStrings(ImmutableMap.of("ld",Strings.repeat("0",40),"a.o",Strings.repeat("a",40),"b.o",Strings.repeat("b",40),"libc.a",Strings.repeat("c",40),"different",Strings.repeat("d",40))),pathResolver);
  int pathSize=10;
  DebugPathSanitizer sanitizer1=new DebugPathSanitizer(pathSize,File.separatorChar,Paths.get("PWD"),ImmutableBiMap.of(Paths.get("something"),Paths.get("A")));
  DebugPathSanitizer sanitizer2=new DebugPathSanitizer(pathSize,File.separatorChar,Paths.get("PWD"),ImmutableBiMap.of(Paths.get("different"),Paths.get("A")));
  ImmutableList<Arg> args1=ImmutableList.<Arg>of(new SanitizedArg(sanitizer1.sanitize(Optional.<Path>absent()),"-Lsomething/foo"));
  RuleKey ruleKey1=generateRuleKey(ruleKeyBuilderFactory,new CxxLink(params,pathResolver,DEFAULT_LINKER,DEFAULT_OUTPUT,args1,ImmutableSet.of(Paths.get("something/Frameworks")),DEFAULT_LIBRARIES,sanitizer1));
  ImmutableList<Arg> args2=ImmutableList.<Arg>of(new SanitizedArg(sanitizer2.sanitize(Optional.<Path>absent()),"-Ldifferent/foo"));
  RuleKey ruleKey2=generateRuleKey(ruleKeyBuilderFactory,new CxxLink(params,pathResolver,DEFAULT_LINKER,DEFAULT_OUTPUT,args2,ImmutableSet.of(Paths.get("different/Frameworks")),DEFAULT_LIBRARIES,sanitizer2));
  assertEquals(ruleKey1,ruleKey2);
}
