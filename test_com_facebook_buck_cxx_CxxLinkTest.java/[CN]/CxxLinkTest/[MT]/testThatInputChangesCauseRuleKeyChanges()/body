{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  FakeFileHashCache hashCache=FakeFileHashCache.createFromStrings(ImmutableMap.of("ld",Strings.repeat("0",40),"a.o",Strings.repeat("a",40),"b.o",Strings.repeat("b",40),"libc.a",Strings.repeat("c",40),"different",Strings.repeat("d",40)));
  RuleKey defaultRuleKey=new DefaultRuleKeyBuilderFactory(hashCache,pathResolver).build(new CxxLink(params,pathResolver,DEFAULT_LINKER,DEFAULT_OUTPUT,DEFAULT_ARGS));
  RuleKey linkerChange=new DefaultRuleKeyBuilderFactory(hashCache,pathResolver).build(new CxxLink(params,pathResolver,new GnuLinker(new HashedFileTool(Paths.get("different"))),DEFAULT_OUTPUT,DEFAULT_ARGS));
  assertNotEquals(defaultRuleKey,linkerChange);
  RuleKey outputChange=new DefaultRuleKeyBuilderFactory(hashCache,pathResolver).build(new CxxLink(params,pathResolver,DEFAULT_LINKER,Paths.get("different"),DEFAULT_ARGS));
  assertNotEquals(defaultRuleKey,outputChange);
  RuleKey flagsChange=new DefaultRuleKeyBuilderFactory(hashCache,pathResolver).build(new CxxLink(params,pathResolver,DEFAULT_LINKER,DEFAULT_OUTPUT,ImmutableList.<Arg>of(new SourcePathArg(new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer())),new FakeSourcePath("different")))));
  assertNotEquals(defaultRuleKey,flagsChange);
}
