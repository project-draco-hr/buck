{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(FakeFileHashCache.createFromStrings(ImmutableMap.of("ld",Strings.repeat("0",40),"a.o",Strings.repeat("a",40),"b.o",Strings.repeat("b",40),"libc.a",Strings.repeat("c",40),"different",Strings.repeat("d",40))),pathResolver);
  RuleKey defaultRuleKey=generateRuleKey(ruleKeyBuilderFactory,new CxxLink(params,pathResolver,DEFAULT_LINKER,DEFAULT_OUTPUT,DEFAULT_INPUTS,DEFAULT_ARGS,DEFAULT_SANITIZER));
  RuleKey linkerChange=generateRuleKey(ruleKeyBuilderFactory,new CxxLink(params,pathResolver,new HashedFileTool(Paths.get("different")),DEFAULT_OUTPUT,DEFAULT_INPUTS,DEFAULT_ARGS,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,linkerChange);
  RuleKey outputChange=generateRuleKey(ruleKeyBuilderFactory,new CxxLink(params,pathResolver,DEFAULT_LINKER,Paths.get("different"),DEFAULT_INPUTS,DEFAULT_ARGS,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,outputChange);
  RuleKey inputChange=generateRuleKey(ruleKeyBuilderFactory,new CxxLink(params,pathResolver,DEFAULT_LINKER,DEFAULT_OUTPUT,ImmutableList.<SourcePath>of(new TestSourcePath("different")),DEFAULT_ARGS,DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,inputChange);
  RuleKey flagsChange=generateRuleKey(ruleKeyBuilderFactory,new CxxLink(params,pathResolver,DEFAULT_LINKER,DEFAULT_OUTPUT,DEFAULT_INPUTS,ImmutableList.of("-different"),DEFAULT_SANITIZER));
  assertNotEquals(defaultRuleKey,flagsChange);
}
