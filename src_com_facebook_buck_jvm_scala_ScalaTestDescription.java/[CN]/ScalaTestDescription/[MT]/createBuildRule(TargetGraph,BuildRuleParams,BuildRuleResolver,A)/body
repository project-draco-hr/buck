{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  final BuildRule scalaLibrary=resolver.getRule(config.getScalaLibraryTarget());
  BuildRuleParams params=rawParams.copyWithDeps(new Supplier<ImmutableSortedSet<BuildRule>>(){
    @Override public ImmutableSortedSet<BuildRule> get(){
      return ImmutableSortedSet.<BuildRule>naturalOrder().addAll(rawParams.getDeclaredDeps().get()).add(scalaLibrary).build();
    }
  }
,rawParams.getExtraDeps());
  JavaTestDescription.CxxLibraryEnhancement cxxLibraryEnhancement=new JavaTestDescription.CxxLibraryEnhancement(params,args.useCxxLibraries,resolver,pathResolver,cxxPlatform);
  params=cxxLibraryEnhancement.updatedParams;
  Tool scalac=config.getScalac(resolver);
  BuildTarget abiJarTarget=params.getBuildTarget().withAppendedFlavors(CalculateAbi.FLAVOR);
  JavaLibrary testsLibrary=resolver.addToIndex(new DefaultJavaLibrary(params.appendExtraDeps(Iterables.concat(BuildRules.getExportedRules(Iterables.concat(params.getDeclaredDeps().get(),resolver.getAllRules(args.providedDeps.get()))),scalac.getDeps(pathResolver))).withFlavor(JavaTest.COMPILED_TESTS_LIBRARY_FLAVOR),pathResolver,args.srcs.get(),ResourceValidator.validateResources(pathResolver,params.getProjectFilesystem(),args.resources.get()),Optional.<Path>absent(),Optional.<SourcePath>absent(),ImmutableList.<String>of(),ImmutableSortedSet.<BuildRule>of(),ImmutableSortedSet.<BuildRule>of(),new BuildTargetSourcePath(abiJarTarget),false,ImmutableSet.<Path>of(),new ScalacToJarStepFactory(scalac,ImmutableList.<String>builder().addAll(config.getCompilerFlags()).addAll(args.extraArguments.get()).build()),args.resourcesRoot,args.manifestFile,args.mavenCoords,ImmutableSortedSet.<BuildTarget>of(),ImmutableSet.<Pattern>of()));
  JavaTest scalaTest=resolver.addToIndex(new JavaTest(params.copyWithDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(testsLibrary)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,testsLibrary,ImmutableSet.<Path>of(),args.labels.get(),args.contacts.get(),args.testType.or(TestType.JUNIT),javaOptions.getJavaRuntimeLauncher(),args.vmArgs.get(),cxxLibraryEnhancement.nativeLibsEnvironment,args.testRuleTimeoutMs.or(defaultTestRuleTimeoutMs),args.env.get(),args.runTestSeparately.or(false),args.forkMode.or(ForkMode.NONE),args.stdOutLogLevel,args.stdErrLogLevel));
  resolver.addToIndex(CalculateAbi.of(abiJarTarget,pathResolver,params,new BuildTargetSourcePath(testsLibrary.getBuildTarget())));
  return scalaTest;
}
