{
  final Supplier<ImmutableList<JavaLibrary>> sortedTransitiveNotDeclaredDeps=Suppliers.memoize(new Supplier<ImmutableList<JavaLibrary>>(){
    @Override public ImmutableList<JavaLibrary> get(){
      Set<JavaLibrary> transitiveNotDeclaredDeps=Sets.difference(transitiveDeps,Sets.union(ImmutableSet.of(this),declaredDeps));
      DirectedAcyclicGraph<BuildRule> graph=BuildRuleDependencyVisitors.getBuildRuleDirectedGraphFilteredBy(buildRules,Predicates.instanceOf(JavaLibrary.class),Predicates.instanceOf(JavaLibrary.class));
      return FluentIterable.from(TopologicalSort.sort(graph,Predicates.<BuildRule>alwaysTrue())).filter(JavaLibrary.class).filter(Predicates.in(transitiveNotDeclaredDeps)).toList().reverse();
    }
  }
);
  return new DefaultSuggestBuildRules(sortedTransitiveNotDeclaredDeps,jarResolver);
}
