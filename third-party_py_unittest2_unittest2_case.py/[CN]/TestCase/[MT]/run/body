def run(self, result=None):
    orig_result = result
    if (result is None):
        result = self.defaultTestResult()
        startTestRun = getattr(result, 'startTestRun', None)
        if (startTestRun is not None):
            startTestRun()
    self._resultForDoCleanups = result
    result.startTest(self)
    testMethod = getattr(self, self._testMethodName)
    if (getattr(self.__class__, '__unittest_skip__', False) or getattr(testMethod, '__unittest_skip__', False)):
        try:
            skip_why = (getattr(self.__class__, '__unittest_skip_why__', '') or getattr(testMethod, '__unittest_skip_why__', ''))
            self._addSkip(result, skip_why)
        finally:
            result.stopTest(self)
        return
    try:
        success = False
        try:
            self.setUp()
        except SkipTest as e:
            self._addSkip(result, str(e))
        except Exception:
            result.addError(self, sys.exc_info())
        else:
            try:
                testMethod()
            except self.failureException:
                result.addFailure(self, sys.exc_info())
            except _ExpectedFailure as e:
                addExpectedFailure = getattr(result, 'addExpectedFailure', None)
                if (addExpectedFailure is not None):
                    addExpectedFailure(self, e.exc_info)
                else:
                    warnings.warn('Use of a TestResult without an addExpectedFailure method is deprecated', DeprecationWarning)
                    result.addSuccess(self)
            except _UnexpectedSuccess:
                addUnexpectedSuccess = getattr(result, 'addUnexpectedSuccess', None)
                if (addUnexpectedSuccess is not None):
                    addUnexpectedSuccess(self)
                else:
                    warnings.warn('Use of a TestResult without an addUnexpectedSuccess method is deprecated', DeprecationWarning)
                    result.addFailure(self, sys.exc_info())
            except SkipTest as e:
                self._addSkip(result, str(e))
            except Exception:
                result.addError(self, sys.exc_info())
            else:
                success = True
            try:
                self.tearDown()
            except Exception:
                result.addError(self, sys.exc_info())
                success = False
        cleanUpSuccess = self.doCleanups()
        success = (success and cleanUpSuccess)
        if success:
            result.addSuccess(self)
    finally:
        result.stopTest(self)
        if (orig_result is None):
            stopTestRun = getattr(result, 'stopTestRun', None)
            if (stopTestRun is not None):
                stopTestRun()
