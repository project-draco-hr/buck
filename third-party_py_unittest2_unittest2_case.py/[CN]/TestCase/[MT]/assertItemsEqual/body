def assertItemsEqual(self, expected_seq, actual_seq, msg=None):
    'An unordered sequence specific comparison. It asserts that\n        expected_seq and actual_seq contain the same elements. It is\n        the equivalent of::\n        \n            self.assertEqual(sorted(expected_seq), sorted(actual_seq))\n\n        Raises with an error message listing which elements of expected_seq\n        are missing from actual_seq and vice versa if any.\n        \n        Asserts that each element has the same count in both sequences.\n        Example:\n            - [0, 1, 1] and [1, 0, 1] compare equal.\n            - [0, 0, 1] and [0, 1] compare unequal.\n        '
    try:
        expected = sorted(expected_seq)
        actual = sorted(actual_seq)
    except TypeError:
        expected = list(expected_seq)
        actual = list(actual_seq)
        (missing, unexpected) = unorderable_list_difference(expected, actual, ignore_duplicate=False)
    else:
        return self.assertSequenceEqual(expected, actual, msg=msg)
    errors = []
    if missing:
        errors.append(('Expected, but missing:\n    %s' % safe_repr(missing)))
    if unexpected:
        errors.append(('Unexpected, but present:\n    %s' % safe_repr(unexpected)))
    if errors:
        standardMsg = '\n'.join(errors)
        self.fail(self._formatMessage(msg, standardMsg))
