def assertRaises(self, excClass, callableObj=None, *args, **kwargs):
    "Fail unless an exception of class excClass is thrown\n           by callableObj when invoked with arguments args and keyword\n           arguments kwargs. If a different type of exception is\n           thrown, it will not be caught, and the test case will be\n           deemed to have suffered an error, exactly as for an\n           unexpected exception.\n\n           If called with callableObj omitted or None, will return a\n           context object used like this::\n\n                with self.assertRaises(SomeException):\n                    do_something()\n\n           The context manager keeps a reference to the exception as\n           the 'exception' attribute. This allows you to inspect the\n           exception after the assertion::\n\n               with self.assertRaises(SomeException) as cm:\n                   do_something()\n               the_exception = cm.exception\n               self.assertEqual(the_exception.error_code, 3)\n        "
    if (callableObj is None):
        return _AssertRaisesContext(excClass, self)
    try:
        callableObj(*args, **kwargs)
    except excClass:
        return
    if hasattr(excClass, '__name__'):
        excName = excClass.__name__
    else:
        excName = str(excClass)
    raise self.failureException, ('%s not raised' % excName)
