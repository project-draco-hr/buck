def __exit__(self, exc_type, exc_value, tb):
    if (exc_type is None):
        try:
            exc_name = self.expected.__name__
        except AttributeError:
            exc_name = str(self.expected)
        raise self.failureException(('%s not raised' % (exc_name,)))
    if (not issubclass(exc_type, self.expected)):
        return False
    self.exception = exc_value
    if (self.expected_regexp is None):
        return True
    expected_regexp = self.expected_regexp
    if isinstance(expected_regexp, basestring):
        expected_regexp = re.compile(expected_regexp)
    if (not expected_regexp.search(str(exc_value))):
        raise self.failureException(('"%s" does not match "%s"' % (expected_regexp.pattern, str(exc_value))))
    return True
