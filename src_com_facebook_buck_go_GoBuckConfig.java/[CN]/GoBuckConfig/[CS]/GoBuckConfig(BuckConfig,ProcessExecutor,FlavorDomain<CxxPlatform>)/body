{
  this.delegate=delegate;
  goRootSupplier=Suppliers.memoize(new Supplier<Path>(){
    @Override public Path get(){
      Optional<Path> configValue=delegate.getPath(SECTION,"root");
      if (configValue.isPresent()) {
        return configValue.get();
      }
      return Paths.get(getGoEnvFromTool(processExecutor,"GOROOT"));
    }
  }
);
  goToolDirSupplier=Suppliers.memoize(new Supplier<Path>(){
    @Override public Path get(){
      return Paths.get(getGoEnvFromTool(processExecutor,"GOTOOLDIR"));
    }
  }
);
  platformFlavorDomain=Suppliers.memoize(new Supplier<GoPlatformFlavorDomain>(){
    @Override public GoPlatformFlavorDomain get(){
      return new GoPlatformFlavorDomain(delegate.getPlatform(),delegate.getArchitecture(),cxxPlatforms);
    }
  }
);
  defaultPlatform=Suppliers.memoize(new Supplier<GoPlatform>(){
    @Override public GoPlatform get(){
      Optional<String> configValue=delegate.getValue(SECTION,"default_platform");
      Optional<GoPlatform> platform;
      if (configValue.isPresent()) {
        platform=platformFlavorDomain.get().getValue(ImmutableFlavor.of(configValue.get()));
        if (!platform.isPresent()) {
          throw new HumanReadableException("Bad go platform value for %s.default_platform = %s",SECTION,configValue);
        }
      }
 else {
        platform=platformFlavorDomain.get().getValue(delegate.getPlatform(),delegate.getArchitecture());
        if (!platform.isPresent()) {
          throw new HumanReadableException("Couldn't determine default go platform for %s %s",delegate.getPlatform(),delegate.getArchitecture());
        }
      }
      return platform.get();
    }
  }
);
}
