{
class NoopSetterRuleKeyBuilder extends UncachedRuleKeyBuilder {
    public NoopSetterRuleKeyBuilder(    SourcePathResolver pathResolver,    FileHashCache hashCache,    RuleKeyBuilderFactory<RuleKey> defaultRuleKeyBuilderFactory){
      super(pathResolver,hashCache,defaultRuleKeyBuilderFactory);
    }
    @Override protected NoopSetterRuleKeyBuilder setSourcePath(    SourcePath sourcePath){
      return this;
    }
  }
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer()));
  FileHashCache hashCache=new FakeFileHashCache(ImmutableMap.<Path,HashCode>of());
  RuleKeyBuilderFactory<RuleKey> ruleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(0,hashCache,pathResolver);
  RuleKey nullRuleKey=new NoopSetterRuleKeyBuilder(pathResolver,hashCache,ruleKeyBuilderFactory).build();
  RuleKey noopRuleKey=new NoopSetterRuleKeyBuilder(pathResolver,hashCache,ruleKeyBuilderFactory).setReflectively("key",new FakeSourcePath("value")).build();
  assertThat(noopRuleKey,is(equalTo(nullRuleKey)));
}
