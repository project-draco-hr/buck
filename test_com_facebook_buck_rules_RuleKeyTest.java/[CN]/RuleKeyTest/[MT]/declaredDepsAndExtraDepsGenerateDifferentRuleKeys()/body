{
  SourcePathResolver sourcePathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer()));
  FileHashCache hashCache=new FakeFileHashCache(ImmutableMap.<Path,HashCode>of());
  DefaultRuleKeyBuilderFactory ruleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(hashCache,sourcePathResolver);
  BuildTarget target=BuildTargetFactory.newInstance("//a:target");
  BuildTarget depTarget=BuildTargetFactory.newInstance("//some:dep");
  BuildRuleParams depParams=new FakeBuildRuleParamsBuilder(depTarget).build();
  NoopBuildRule dep=new NoopBuildRule(depParams,sourcePathResolver);
  BuildRuleParams paramsWithDeclaredDep=new FakeBuildRuleParamsBuilder(target).setDeclaredDeps(ImmutableSortedSet.<BuildRule>of(dep)).build();
  NoopBuildRule ruleWithDeclaredDep=new NoopBuildRule(paramsWithDeclaredDep,sourcePathResolver);
  BuildRuleParams paramsWithExtraDep=new FakeBuildRuleParamsBuilder(target).setExtraDeps(ImmutableSortedSet.<BuildRule>of(dep)).build();
  NoopBuildRule ruleWithExtraDep=new NoopBuildRule(paramsWithExtraDep,sourcePathResolver);
  BuildRuleParams paramsWithBothDeps=new FakeBuildRuleParamsBuilder(target).setDeclaredDeps(ImmutableSortedSet.<BuildRule>of(dep)).setExtraDeps(ImmutableSortedSet.<BuildRule>of(dep)).build();
  NoopBuildRule ruleWithBothDeps=new NoopBuildRule(paramsWithBothDeps,sourcePathResolver);
  assertNotEquals(ruleKeyBuilderFactory.newInstance(ruleWithDeclaredDep).build(),ruleKeyBuilderFactory.newInstance(ruleWithExtraDep).build());
  assertNotEquals(ruleKeyBuilderFactory.newInstance(ruleWithDeclaredDep).build(),ruleKeyBuilderFactory.newInstance(ruleWithBothDeps).build());
  assertNotEquals(ruleKeyBuilderFactory.newInstance(ruleWithExtraDep).build(),ruleKeyBuilderFactory.newInstance(ruleWithBothDeps).build());
}
