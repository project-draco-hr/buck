{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  final FakeBuildRule fakeBuildRule=new FakeBuildRule("//:fake",pathResolver);
  resolver.addToIndex(fakeBuildRule);
  BuildTargetSourcePath archive1=new BuildTargetSourcePath(fakeBuildRule.getBuildTarget(),Paths.get("location"));
  PathSourcePath archive2=new PathSourcePath(new FakeProjectFilesystem(),Paths.get("otherLocation"));
  assertEquals(createEmptyRuleKey(pathResolver).setReflectively("key",new ArchiveMemberSourcePath(archive1,Paths.get("location"))).build(),createEmptyRuleKey(pathResolver).setReflectively("key",new ArchiveMemberSourcePath(archive1,Paths.get("location"))).build());
  assertNotEquals(createEmptyRuleKey(pathResolver).setReflectively("key",new ArchiveMemberSourcePath(archive1,Paths.get("location"))).build(),createEmptyRuleKey(pathResolver).setReflectively("key",new ArchiveMemberSourcePath(archive2,Paths.get("location"))).build());
  assertNotEquals(createEmptyRuleKey(pathResolver).setReflectively("key",new ArchiveMemberSourcePath(archive1,Paths.get("location"))).build(),createEmptyRuleKey(pathResolver).setReflectively("key",new ArchiveMemberSourcePath(archive1,Paths.get("different"))).build());
}
