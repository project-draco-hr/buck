{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  FakeBuildRule fake1=new FakeBuildRule("//:fake1",pathResolver);
  FakeBuildRule fake2=new FakeBuildRule("//:fake2",pathResolver);
  resolver.addToIndex(fake1);
  resolver.addToIndex(fake2);
  assertEquals(createEmptyRuleKey(pathResolver).setReflectively("key",new BuildTargetSourcePath(fake1.getBuildTarget(),Paths.get("location"))).build(),createEmptyRuleKey(pathResolver).setReflectively("key",new BuildTargetSourcePath(fake1.getBuildTarget(),Paths.get("location"))).build());
  assertNotEquals(createEmptyRuleKey(pathResolver).setReflectively("key",new BuildTargetSourcePath(fake1.getBuildTarget(),Paths.get("location"))).build(),createEmptyRuleKey(pathResolver).setReflectively("key",new BuildTargetSourcePath(fake1.getBuildTarget(),Paths.get("different"))).build());
  assertNotEquals(createEmptyRuleKey(pathResolver).setReflectively("key",new BuildTargetSourcePath(fake1.getBuildTarget(),Paths.get("location"))).build(),createEmptyRuleKey(pathResolver).setReflectively("key",new BuildTargetSourcePath(fake2.getBuildTarget(),Paths.get("location"))).build());
  assertNotEquals(createEmptyRuleKey(pathResolver).setReflectively("key",new BuildTargetSourcePath(fake1.getBuildTarget(),Paths.get("location"))).build(),createEmptyRuleKey(pathResolver).setReflectively("different-key",new BuildTargetSourcePath(fake1.getBuildTarget(),Paths.get("location"))).build());
}
