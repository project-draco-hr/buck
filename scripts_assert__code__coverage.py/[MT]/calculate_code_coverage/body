def calculate_code_coverage():
    root = ElementTree.parse(PATH_TO_CODE_COVERAGE_XML)
    max_package_name = 0
    TYPES = set(['BRANCH', 'CLASS', 'COMPLEXITY', 'INSTRUCTION', 'LINE', 'METHOD'])
    COLUMN_NAMES = ['INSTRUCTION', 'LINE', 'BRANCH', 'METHOD', 'CLASS', 'LOC2FIX']
    SORT_TYPE = 'INSTRUCTION'
    total_covered_by_type = {}
    total_missed_plus_covered_type = {}
    for coverage_type in TYPES:
        total_covered_by_type[coverage_type] = 0
        total_missed_plus_covered_type[coverage_type] = 0
    coverage_by_package = []
    missed_lines_by_package = {}
    total_missed_lines = 0
    for element in root.findall('.//package'):
        package_name = element.attrib['name']
        if (not is_covered_package_name(package_name)):
            continue
        max_package_name = max(max_package_name, len(package_name))
        coverage = {}
        coverage['package_name'] = package_name
        coverage_by_package.append(coverage)
        for counter in element.findall('./counter'):
            counter_type = counter.attrib.get('type')
            missed = int(counter.attrib.get('missed'))
            covered = int(counter.attrib.get('covered'))
            percentage = round(((100 * covered) / float((missed + covered))), 2)
            total_covered_by_type[counter_type] += covered
            total_missed_plus_covered_type[counter_type] += (missed + covered)
            coverage[counter_type] = percentage
            if (counter_type == 'LINE'):
                missed_lines_by_package[package_name] = missed
                total_missed_lines += missed

    def pair_compare(p1, p2):
        diff1 = cmp(p2[SORT_TYPE], p1[SORT_TYPE])
        if diff1:
            return diff1
        return cmp(p1['package_name'], p2['package_name'])

    def label_with_padding(label):
        return ((label + (' ' * (max_package_name - len(label)))) + ' ')

    def column_format_str(column_name):
        if (column_name == 'LOC2FIX'):
            return (('%(' + column_name) + ')8d')
        else:
            return (('%(' + column_name) + ')7.2f%%')

    def print_separator(sep_len):
        print ('-' * sep_len)

    def get_color_for_percentage(percentage):
        return ('\x1b[92m' if (percentage >= CODE_COVERAGE_GOAL) else '\x1b[93m')
    column_names = map((lambda x: x[0:7].rjust(7)), COLUMN_NAMES)
    print ((label_with_padding('PACKAGE') + ' ') + ' '.join(column_names))
    separator_len = ((max_package_name + 1) + (len(column_names) * 8))
    print_separator(separator_len)
    format_string = '%(color)s%(label)s'
    for column in COLUMN_NAMES:
        format_string += column_format_str(column)
    format_string += '\x1b[0m'
    coverage_by_package.sort(cmp=pair_compare)
    for item in coverage_by_package:
        info = item.copy()
        pkg = item['package_name']
        if (not ('BRANCH' in info)):
            info['BRANCH'] = 100
        info['color'] = get_color_for_percentage(item[SORT_TYPE])
        info['label'] = label_with_padding(pkg)
        info['LOC2FIX'] = missed_lines_by_package[pkg]
        print (format_string % info)
    overall_percentages = {}
    for coverage_type in TYPES:
        numerator = total_covered_by_type[coverage_type]
        denominator = total_missed_plus_covered_type[coverage_type]
        percentage = ((100.0 * numerator) / denominator)
        overall_percentages[coverage_type] = percentage
    observed_percentage = overall_percentages[SORT_TYPE]
    overall_percentages['color'] = get_color_for_percentage(observed_percentage)
    overall_percentages['label'] = label_with_padding('TOTAL')
    overall_percentages['LOC2FIX'] = total_missed_lines
    print_separator(separator_len)
    print (format_string % overall_percentages)
    return observed_percentage
