{
  if (testSelectorList.isEmpty()) {
    return getShellStepWithArgs("-o",resultsOutputPath.toString()).execute(context);
  }
  ProcessExecutorParams params=ProcessExecutorParams.builder().setCommand(ImmutableList.<String>builder().addAll(commandPrefix).add("-l","-L","buck").build()).setDirectory(workingDirectory.toFile()).setEnvironment(environment.get()).build();
  ProcessExecutor.Result result=context.getProcessExecutor().launchAndExecute(params,EnumSet.of(ProcessExecutor.Option.EXPECTING_STD_OUT),Optional.<String>absent(),testRuleTimeoutMs,Optional.of(timeoutHandler));
  if (timedOut) {
    return StepExecutionResult.ERROR;
  }
 else   if (result.getExitCode() != 0) {
    return StepExecutionResult.of(result.getExitCode());
  }
  Preconditions.checkState(result.getStdout().isPresent());
  String testsToRunRegex=getTestsToRunRegexFromListOutput(result.getStdout().get());
  return getShellStepWithArgs("--hide-output","-o",resultsOutputPath.toString(),"-r",testsToRunRegex).execute(context);
}
