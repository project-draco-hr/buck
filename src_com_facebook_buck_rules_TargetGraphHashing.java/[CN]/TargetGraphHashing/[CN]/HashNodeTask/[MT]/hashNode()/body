{
  Hasher hasher=Hashing.sha1().newHasher();
  LOG.verbose("Hashing node %s",node);
  StringHashing.hashStringAndLength(hasher,node.getBuildTarget().toString());
  HashCode targetRuleHashCode=node.getRawInputsHashCode();
  LOG.verbose("Got rules hash %s",targetRuleHashCode);
  hasher.putBytes(targetRuleHashCode.asBytes());
  ProjectFilesystem cellFilesystem=node.getRuleFactoryParams().getProjectFilesystem();
  try {
    PathHashing.hashPaths(hasher,fileHashLoader,cellFilesystem,ImmutableSortedSet.copyOf(node.getInputs()));
  }
 catch (  IOException e) {
    throw new HumanReadableException(e,"Error reading files for rule %s",node.getBuildTarget());
  }
  for (  BuildTarget dependency : node.getDeps()) {
    ForkJoinTask<HashCode> dependencyHashCodeTask=buildTargetHashes.get(dependency);
    Preconditions.checkState(dependencyHashCodeTask != null);
    HashCode dependencyHashCode=dependencyHashCodeTask.join();
    Preconditions.checkState(dependencyHashCode != null);
    LOG.verbose("Node %s: adding dependency %s (%s)",node,dependency,dependencyHashCode);
    StringHashing.hashStringAndLength(hasher,dependency.toString());
    hasher.putBytes(dependencyHashCode.asBytes());
  }
  HashCode result=hasher.hash();
  LOG.debug("Hash for target %s: %s",node.getBuildTarget(),result);
  return result;
}
