{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","lib").build()).setType(AppleLibraryDescription.TYPE).build();
  AppleNativeTargetDescriptionArg arg=appleLibraryDescription.createUnpopulatedConstructorArg();
  arg.configs=Optional.of(ImmutableMap.<String,ImmutableList<Either<SourcePath,ImmutableMap<String,String>>>>of());
  arg.srcs=Optional.of(ImmutableList.<AppleSource>of());
  arg.frameworks=Optional.of(ImmutableSortedSet.<String>of());
  arg.deps=Optional.absent();
  arg.gid=Optional.of("D00D64738");
  arg.headerPathPrefix=Optional.absent();
  arg.useBuckHeaderMaps=Optional.absent();
  BuildRule rule=appleLibraryDescription.createBuildRule(params,resolver,arg);
  resolver.addToIndex(rule);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(rule),ImmutableSet.of(rule.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:lib");
  assertThat(target.getGlobalID(),equalTo("D00D64738"));
}
