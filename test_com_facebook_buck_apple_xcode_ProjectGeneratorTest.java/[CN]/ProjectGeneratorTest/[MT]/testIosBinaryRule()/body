{
  BuildRule depRule=createBuildRuleWithDefaults(new BuildTarget("//dep","dep"),ImmutableSortedSet.<BuildRule>of(),iosLibraryDescription);
  BuildRuleParams params=new FakeBuildRuleParams(new BuildTarget("//foo","binary"),ImmutableSortedSet.of(depRule));
  IosBinaryDescription.Arg arg=iosBinaryDescription.createUnpopulatedConstructorArg();
  arg.infoPlist=Paths.get("Info.plist");
  arg.configs=ImmutableMap.of("Debug",ImmutableList.<Either<Path,ImmutableMap<String,String>>>of());
  arg.srcs=ImmutableList.of(AppleSource.ofSourcePathWithFlags(new Pair<SourcePath,String>(new TestSourcePath("foo.m"),"-foo")),AppleSource.ofSourcePath(new TestSourcePath("foo.h")));
  arg.frameworks=ImmutableSortedSet.of("$SDKROOT/Foo.framework");
  BuildRule rule=new DescribedRule(IosBinaryDescription.TYPE,iosBinaryDescription.createBuildable(params,arg),params);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(rule),ImmutableSet.of(rule.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:binary");
  assertHasConfigurations(target,"Debug");
  assertEquals("Should have exact number of build phases",3,target.getBuildPhases().size());
  assertHasSingletonSourcesPhaseWithSourcesAndFlags(target,ImmutableMap.of("foo.m",Optional.of("-foo")));
  ProjectGeneratorTestUtils.assertHasSingletonFrameworksPhaseWithFrameworkEntries(target,ImmutableList.of("$SDKROOT/Foo.framework","$BUILT_PRODUCTS_DIR/libdep.a"));
}
