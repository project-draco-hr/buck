{
  BuildRule rootRule=createXcodeNativeRule(new BuildTarget("//foo","root"),ImmutableSortedSet.<BuildRule>of());
  BuildRule leftRule=createXcodeNativeRule(new BuildTarget("//foo","left"),ImmutableSortedSet.of(rootRule));
  BuildRule rightRule=createXcodeNativeRule(new BuildTarget("//foo","right"),ImmutableSortedSet.of(rootRule));
  BuildRule childRule=createXcodeNativeRule(new BuildTarget("//foo","child"),ImmutableSortedSet.of(leftRule,rightRule));
  BuildRuleResolver buildRuleResolver=new BuildRuleResolver(ImmutableSet.of(rootRule,leftRule,rightRule,childRule));
  ProjectGenerator projectGenerator=createProjectGenerator(buildRuleResolver,ImmutableSet.of(childRule.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXProject project=projectGenerator.getGeneratedProject();
  Map<String,String> targetNameToGid=Maps.newHashMap();
  for (  PBXTarget target : project.getTargets()) {
    targetNameToGid.put(target.getName(),target.getGlobalID());
  }
  XCScheme scheme=Preconditions.checkNotNull(projectGenerator.getGeneratedScheme());
  List<String> actualOrdering=Lists.newArrayList();
  for (  XCScheme.BuildActionEntry entry : scheme.getBuildAction()) {
    actualOrdering.add(entry.getBlueprintIdentifier());
    assertEquals(PROJECT_CONTAINER,entry.getContainerRelativePath());
  }
  List<String> expectedOrdering1=ImmutableList.of(targetNameToGid.get("//foo:root"),targetNameToGid.get("//foo:left"),targetNameToGid.get("//foo:right"),targetNameToGid.get("//foo:child"));
  List<String> expectedOrdering2=ImmutableList.of(targetNameToGid.get("//foo:root"),targetNameToGid.get("//foo:right"),targetNameToGid.get("//foo:left"),targetNameToGid.get("//foo:child"));
  assertThat(actualOrdering,either(equalTo(expectedOrdering1)).or(equalTo(expectedOrdering2)));
}
