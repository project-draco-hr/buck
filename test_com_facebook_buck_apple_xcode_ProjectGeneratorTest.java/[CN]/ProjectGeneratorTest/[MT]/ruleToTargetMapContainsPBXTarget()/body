{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","lib").build()).setType(AppleLibraryDescription.TYPE).build();
  AppleNativeTargetDescriptionArg arg=appleLibraryDescription.createUnpopulatedConstructorArg();
  arg.configs=Optional.of(ImmutableMap.of("Debug",ImmutableList.<Either<SourcePath,ImmutableMap<String,String>>>of()));
  arg.srcs=Optional.of(ImmutableList.of(AppleSource.ofSourcePathWithFlags(new Pair<SourcePath,String>(new TestSourcePath("foo.m"),"-foo")),AppleSource.ofSourcePath(new TestSourcePath("foo.h")),AppleSource.ofSourcePath(new TestSourcePath("bar.m"))));
  arg.frameworks=Optional.of(ImmutableSortedSet.<String>of());
  arg.weakFrameworks=Optional.of(ImmutableSortedSet.<String>of());
  arg.deps=Optional.absent();
  arg.gid=Optional.absent();
  arg.headerPathPrefix=Optional.absent();
  arg.useBuckHeaderMaps=Optional.absent();
  BuildRule rule=appleLibraryDescription.createBuildRule(params,resolver,arg);
  resolver.addToIndex(rule);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(rule),ImmutableSet.of(rule.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  assertEquals(rule,Iterables.getOnlyElement(projectGenerator.getBuildRuleToGeneratedTargetMap().keySet()));
  PBXTarget target=Iterables.getOnlyElement(projectGenerator.getBuildRuleToGeneratedTargetMap().values());
  assertHasSingletonSourcesPhaseWithSourcesAndFlags(target,ImmutableMap.of("foo.m",Optional.of("-foo"),"bar.m",Optional.<String>absent()));
}
