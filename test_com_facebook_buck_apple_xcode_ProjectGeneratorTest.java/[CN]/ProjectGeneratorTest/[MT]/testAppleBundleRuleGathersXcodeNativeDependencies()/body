{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRule fooRule=createBuildRuleWithDefaults(BuildTarget.builder("//external","extFoo").build(),ImmutableSortedSet.<BuildRule>of(),xcodeNativeDescription,resolver);
  resolver.addToIndex(fooRule);
  BuildRule barRule=createBuildRuleWithDefaults(BuildTarget.builder("//external","extBar").build(),ImmutableSortedSet.of(fooRule),xcodeNativeDescription,resolver);
  resolver.addToIndex(barRule);
  BuildRule dynamicLibraryDep=createBuildRuleWithDefaults(BuildTarget.builder("//dep","dynamic").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build(),ImmutableSortedSet.of(barRule),appleLibraryDescription,resolver);
  resolver.addToIndex(dynamicLibraryDep);
  BuildRule binaryRule=createAppleBundleBuildRule(BuildTarget.builder("//foo","foo").build(),resolver,appleBundleDescription,dynamicLibraryDep,AppleBundleExtension.BUNDLE);
  resolver.addToIndex(binaryRule);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(fooRule,barRule,binaryRule),ImmutableSet.of(binaryRule.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:foo");
  ProjectGeneratorTestUtils.assertHasSingletonFrameworksPhaseWithFrameworkEntries(target,ImmutableList.of("$BUILT_PRODUCTS_DIR/libextFoo.a","$BUILT_PRODUCTS_DIR/libextBar.a"));
}
