{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRule fooRule=createBuildRuleWithDefaults(BuildTarget.builder("//external","extFoo").build(),ImmutableSortedSet.<BuildRule>of(),xcodeNativeDescription,resolver);
  resolver.addToIndex(fooRule);
  BuildRule barRule=createBuildRuleWithDefaults(BuildTarget.builder("//external","extBar").build(),ImmutableSortedSet.of(fooRule),xcodeNativeDescription,resolver);
  resolver.addToIndex(barRule);
  BuildRule dynamicLibraryDep=createBuildRuleWithDefaults(BuildTarget.builder("//dep","dynamic").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build(),ImmutableSortedSet.of(barRule),appleLibraryDescription,resolver);
  resolver.addToIndex(dynamicLibraryDep);
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","foo").build()).setDeps(ImmutableSortedSet.of(dynamicLibraryDep)).setType(AppleBundleDescription.TYPE).build();
  AppleBundleDescription.Arg arg=appleBundleDescription.createUnpopulatedConstructorArg();
  arg.infoPlist=Optional.<SourcePath>of(new TestSourcePath("Info.plist"));
  arg.binary=dynamicLibraryDep.getBuildTarget();
  arg.extension=Either.ofLeft(AppleBundleExtension.BUNDLE);
  arg.deps=Optional.absent();
  BuildRule binaryRule=appleBundleDescription.createBuildRule(params,resolver,arg);
  resolver.addToIndex(binaryRule);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(fooRule,barRule,binaryRule),ImmutableSet.of(binaryRule.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:foo");
  ProjectGeneratorTestUtils.assertHasSingletonFrameworksPhaseWithFrameworkEntries(target,ImmutableList.of("$BUILT_PRODUCTS_DIR/libextFoo.a","$BUILT_PRODUCTS_DIR/libextBar.a"));
}
