{
  BuildRule dependentStaticLibrary=createBuildRuleWithDefaults(BuildTarget.builder("//dep","static").build(),ImmutableSortedSet.<BuildRule>of(),appleLibraryDescription);
  BuildTarget dependentDynamicLibraryTarget=BuildTarget.builder("//dep","dynamic").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build();
  BuildRuleParams dependentDynamicLibraryParams=new FakeBuildRuleParamsBuilder(dependentDynamicLibraryTarget).setDeps(ImmutableSortedSet.of(dependentStaticLibrary)).setType(AppleLibraryDescription.TYPE).build();
  AppleNativeTargetDescriptionArg dependentDynamicLibraryArg=appleLibraryDescription.createUnpopulatedConstructorArg();
  dependentDynamicLibraryArg.configs=Optional.of(ImmutableMap.<String,ImmutableList<Either<SourcePath,ImmutableMap<String,String>>>>of());
  dependentDynamicLibraryArg.srcs=Optional.of(ImmutableList.<AppleSource>of());
  dependentDynamicLibraryArg.frameworks=Optional.of(ImmutableSortedSet.<String>of());
  dependentDynamicLibraryArg.deps=Optional.of(ImmutableSortedSet.of(dependentStaticLibrary));
  dependentDynamicLibraryArg.gid=Optional.absent();
  dependentDynamicLibraryArg.headerPathPrefix=Optional.absent();
  dependentDynamicLibraryArg.useBuckHeaderMaps=Optional.absent();
  BuildRule dependentDynamicLibrary=appleLibraryDescription.createBuildRule(dependentDynamicLibraryParams,new BuildRuleResolver(),dependentDynamicLibraryArg);
  BuildTarget libraryTarget=BuildTarget.builder("//foo","library").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build();
  BuildRuleParams libraryParams=new FakeBuildRuleParamsBuilder(libraryTarget).setDeps(ImmutableSortedSet.of(dependentDynamicLibrary)).setType(AppleLibraryDescription.TYPE).build();
  AppleNativeTargetDescriptionArg libraryArg=appleLibraryDescription.createUnpopulatedConstructorArg();
  libraryArg.configs=Optional.of(ImmutableMap.<String,ImmutableList<Either<SourcePath,ImmutableMap<String,String>>>>of());
  libraryArg.srcs=Optional.of(ImmutableList.<AppleSource>of());
  libraryArg.frameworks=Optional.of(ImmutableSortedSet.<String>of());
  libraryArg.deps=Optional.of(ImmutableSortedSet.of(dependentDynamicLibrary));
  libraryArg.gid=Optional.absent();
  libraryArg.headerPathPrefix=Optional.absent();
  libraryArg.useBuckHeaderMaps=Optional.absent();
  BuildRule library=appleLibraryDescription.createBuildRule(libraryParams,new BuildRuleResolver(),libraryArg);
  BuildRuleParams bundleParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","final").build()).setDeps(ImmutableSortedSet.of(library)).setType(AppleBundleDescription.TYPE).build();
  AppleBundleDescription.Arg bundleArg=appleBundleDescription.createUnpopulatedConstructorArg();
  bundleArg.infoPlist=Optional.<SourcePath>of(new TestSourcePath("Info.plist"));
  bundleArg.binary=library;
  bundleArg.extension=Either.ofLeft(AppleBundleExtension.BUNDLE);
  bundleArg.deps=Optional.of(ImmutableSortedSet.of(library));
  BuildRule bundle=appleBundleDescription.createBuildRule(bundleParams,new BuildRuleResolver(),bundleArg);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(bundle),ImmutableSet.of(bundle.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:final");
  assertEquals(target.getProductType(),PBXTarget.ProductType.BUNDLE);
  assertEquals("Should have exact number of build phases ",3,target.getBuildPhases().size());
  ProjectGeneratorTestUtils.assertHasSingletonFrameworksPhaseWithFrameworkEntries(target,ImmutableList.of("$BUILT_PRODUCTS_DIR/dynamic.dylib"));
}
