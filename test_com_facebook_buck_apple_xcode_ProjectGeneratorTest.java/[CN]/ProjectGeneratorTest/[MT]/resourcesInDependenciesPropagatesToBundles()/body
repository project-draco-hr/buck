{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRule resourceRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","res").build(),resolver,ImmutableSortedSet.<BuildRule>of(),appleResourceDescription,new Function<AppleResourceDescription.Arg,AppleResourceDescription.Arg>(){
    @Override public AppleResourceDescription.Arg apply(    AppleResourceDescription.Arg input){
      input.files=ImmutableSet.<SourcePath>of(new TestSourcePath("foo.png"));
      input.dirs=ImmutableSet.of(Paths.get("foodir"));
      return input;
    }
  }
);
  resolver.addToIndex(resourceRule);
  BuildRule libraryRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","lib").build(),ImmutableSortedSet.of(resourceRule),appleLibraryDescription,resolver);
  resolver.addToIndex(libraryRule);
  BuildRule bundleLibraryRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","bundlelib").build(),ImmutableSortedSet.of(libraryRule),appleLibraryDescription,resolver);
  resolver.addToIndex(bundleLibraryRule);
  BuildRule bundleRule=createAppleBundleBuildRule(BuildTarget.builder("//foo","bundle").build(),resolver,appleBundleDescription,bundleLibraryRule,AppleBundleExtension.BUNDLE);
  resolver.addToIndex(bundleRule);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(resourceRule,libraryRule,bundleRule),ImmutableSet.of(bundleRule.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXProject generatedProject=projectGenerator.getGeneratedProject();
  PBXTarget bundleTarget=assertTargetExistsAndReturnTarget(generatedProject,"//foo:bundle");
  assertHasSingletonResourcesPhaseWithEntries(bundleTarget,"foo.png","foodir");
}
