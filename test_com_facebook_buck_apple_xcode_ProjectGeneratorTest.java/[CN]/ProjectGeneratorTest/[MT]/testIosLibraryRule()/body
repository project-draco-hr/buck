{
  BuildRuleParams params=new FakeBuildRuleParams(new BuildTarget("//foo","lib"),ImmutableSortedSet.<BuildRule>of());
  IosLibraryDescription.Arg arg=iosLibraryDescription.createUnpopulatedConstructorArg();
  arg.configs=ImmutableMap.of("Debug",ImmutableList.<Either<Path,ImmutableMap<String,String>>>of());
  arg.srcs=ImmutableList.of(AppleSource.ofSourcePathWithFlags(new Pair<SourcePath,String>(new FileSourcePath("foo.m"),"-foo")),AppleSource.ofSourcePath(new FileSourcePath("foo.h")),AppleSource.ofSourcePath(new FileSourcePath("bar.m")));
  arg.frameworks=ImmutableSortedSet.of();
  BuildRule rule=new DescribedRule(IosLibraryDescription.TYPE,iosLibraryDescription.createBuildable(params,arg),params);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(rule),ImmutableSet.of(rule.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:lib");
  assertThat(target.isa(),equalTo("PBXNativeTarget"));
  assertThat(target.getProductType(),equalTo(PBXTarget.ProductType.IOS_LIBRARY));
  assertHasConfigurations(target,"Debug");
  assertEquals("Should have exact number of build phases",2,target.getBuildPhases().size());
  assertHasSingletonSourcesPhaseWithSourcesAndFlags(target,ImmutableMap.of("foo.m",Optional.of("-foo"),"bar.m",Optional.<String>absent()));
{
    PBXBuildPhase headersBuildPhase=Iterables.find(target.getBuildPhases(),new Predicate<PBXBuildPhase>(){
      @Override public boolean apply(      PBXBuildPhase input){
        return input instanceof PBXHeadersBuildPhase;
      }
    }
);
    PBXBuildFile headerBuildFile=Iterables.getOnlyElement(headersBuildPhase.getFiles());
    String headerBuildFilePath=assertFileRefIsRelativeAndResolvePath(headerBuildFile.getFileRef());
    assertEquals(projectFilesystem.getRootPath().resolve("foo.h").toAbsolutePath().normalize().toString(),headerBuildFilePath);
  }
}
