{
  BuildRule depRule=createBuildRuleWithDefaults(BuildTarget.builder("//dep","dep").build(),ImmutableSortedSet.<BuildRule>of(),appleLibraryDescription);
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","binary").build()).setDeps(ImmutableSortedSet.of(depRule)).setType(AppleBinaryDescription.TYPE).build();
  AppleNativeTargetDescriptionArg arg=appleBinaryDescription.createUnpopulatedConstructorArg();
  arg.configs=ImmutableMap.of("Debug",ImmutableList.<Either<SourcePath,ImmutableMap<String,String>>>of());
  arg.srcs=ImmutableList.of(AppleSource.ofSourcePathWithFlags(new Pair<SourcePath,String>(new TestSourcePath("foo.m"),"-foo")),AppleSource.ofSourcePath(new TestSourcePath("foo.h")));
  arg.frameworks=ImmutableSortedSet.of("$SDKROOT/Foo.framework");
  arg.deps=Optional.absent();
  arg.gid=Optional.absent();
  arg.headerPathPrefix=Optional.absent();
  arg.useBuckHeaderMaps=Optional.absent();
  BuildRule rule=appleBinaryDescription.createBuildRule(params,new BuildRuleResolver(),arg);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(rule),ImmutableSet.of(rule.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:binary");
  assertHasConfigurations(target,"Debug");
  assertEquals(target.getProductType(),PBXTarget.ProductType.TOOL);
  assertEquals("Should have exact number of build phases",3,target.getBuildPhases().size());
  assertHasSingletonSourcesPhaseWithSourcesAndFlags(target,ImmutableMap.of("foo.m",Optional.of("-foo")));
  ProjectGeneratorTestUtils.assertHasSingletonFrameworksPhaseWithFrameworkEntries(target,ImmutableList.of("$SDKROOT/Foo.framework","$BUILT_PRODUCTS_DIR/libdep.a"));
  assertFalse(hasShellScriptPhaseToCompileAssetCatalogs(target));
}
