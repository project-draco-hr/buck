{
  BuildRuleResolver buildRuleResolver=new BuildRuleResolver();
  BuildRule genrule=GenruleBuilder.createGenrule(new BuildTarget("//foo","script")).addSrc(new TestSourcePath("script/input.png").resolve()).setBash("echo \"hello world!\"").setOut("helloworld.txt").build();
  buildRuleResolver.addToIndex(genrule.getBuildTarget(),genrule);
  BuildTarget libTarget=new BuildTarget("//foo","lib");
  BuildRuleParams libParams=new FakeBuildRuleParamsBuilder(libTarget).setDeps(ImmutableSortedSet.of(genrule)).build();
  IosLibraryDescription.Arg arg=iosLibraryDescription.createUnpopulatedConstructorArg();
  arg.configs=ImmutableMap.of("Debug",ImmutableList.<Either<Path,ImmutableMap<String,String>>>of());
  arg.srcs=ImmutableList.of(AppleSource.ofSourcePathWithFlags(new Pair<SourcePath,String>(new TestSourcePath("foo.m"),"-foo")),AppleSource.ofSourcePath(new TestSourcePath("foo.h")));
  arg.frameworks=ImmutableSortedSet.of();
  arg.deps=Optional.absent();
  BuildRule rule=new DescribedRule(IosLibraryDescription.TYPE,iosLibraryDescription.createBuildable(libParams,arg),libParams);
  buildRuleResolver.addToIndex(libTarget,rule);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(buildRuleResolver,ImmutableSet.of(rule.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXProject project=projectGenerator.getGeneratedProject();
  assertThat(project.getTargets(),hasSize(2));
  PBXTarget target=project.getTargets().get(0);
  assertThat(target.getName(),equalTo("//foo:lib"));
  assertThat(target.isa(),equalTo("PBXNativeTarget"));
  PBXShellScriptBuildPhase shellScriptBuildPhase=ProjectGeneratorTestUtils.getSingletonPhaseByType(target,PBXShellScriptBuildPhase.class);
  assertThat(Iterables.getOnlyElement(shellScriptBuildPhase.getInputPaths()),equalTo(".././script/input.png"));
  assertThat(shellScriptBuildPhase.getShellScript(),equalTo("/bin/bash -e -c 'echo \"hello world!\"'"));
}
