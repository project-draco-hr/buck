{
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(new BuildTarget("//foo","lib")).setType(IosLibraryDescription.TYPE).build();
  IosLibraryDescription.Arg arg=iosLibraryDescription.createUnpopulatedConstructorArg();
  arg.configs=ImmutableMap.of("Debug",ImmutableList.<Either<Path,ImmutableMap<String,String>>>of());
  arg.srcs=ImmutableList.of();
  arg.frameworks=ImmutableSortedSet.of();
  arg.deps=Optional.absent();
  BuildRule rule=iosLibraryDescription.createBuildRule(params,new BuildRuleResolver(),arg);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(rule),ImmutableSet.of(rule.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXProject project=projectGenerator.getGeneratedProject();
  Set<String> projectConfigurationNames=project.getBuildConfigurationList().getBuildConfigurationsByName().asMap().keySet();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"GeneratedSignedSourceTarget");
  Set<String> generatedSignedSourceTargetNames=target.getBuildConfigurationList().getBuildConfigurationsByName().asMap().keySet();
  assertEquals(ImmutableSet.of("Debug"),projectConfigurationNames);
  assertEquals(projectConfigurationNames,generatedSignedSourceTargetNames);
}
