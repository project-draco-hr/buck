{
  BuildRule assetCatalog1=createBuildRuleWithDefaults(BuildTarget.builder("//foo","asset_catalog1").build(),ImmutableSortedSet.<BuildRule>of(),new AppleAssetCatalogDescription(),new Function<AppleAssetCatalogDescription.Arg,AppleAssetCatalogDescription.Arg>(){
    @Nullable @Override public AppleAssetCatalogDescription.Arg apply(    @Nullable AppleAssetCatalogDescription.Arg input){
      input.dirs=ImmutableSet.of(Paths.get("AssetCatalog1.xcassets"));
      return input;
    }
  }
);
  BuildRule assetCatalog2=createBuildRuleWithDefaults(BuildTarget.builder("//foo","asset_catalog2").build(),ImmutableSortedSet.<BuildRule>of(),new AppleAssetCatalogDescription(),new Function<AppleAssetCatalogDescription.Arg,AppleAssetCatalogDescription.Arg>(){
    @Nullable @Override public AppleAssetCatalogDescription.Arg apply(    @Nullable AppleAssetCatalogDescription.Arg input){
      input.dirs=ImmutableSet.of(Paths.get("AssetCatalog2.xcassets"));
      input.copyToBundles=Optional.of(Boolean.TRUE);
      return input;
    }
  }
);
  BuildRule libraryRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","lib").build(),ImmutableSortedSet.of(assetCatalog1,assetCatalog2),appleLibraryDescription);
  BuildRule testRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","test").build(),ImmutableSortedSet.of(libraryRule),iosTestDescription);
  BuildRule binaryRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","bin").build(),ImmutableSortedSet.of(libraryRule),iosBinaryDescription);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(assetCatalog1,assetCatalog2,libraryRule,testRule,binaryRule),ImmutableSet.of(testRule.getBuildTarget(),binaryRule.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXProject generatedProject=projectGenerator.getGeneratedProject();
  PBXTarget testTarget=assertTargetExistsAndReturnTarget(generatedProject,"//foo:test");
  assertTrue(hasShellScriptPhaseToCompileCommonAndSplitAssetCatalogs(testTarget));
  PBXTarget binTarget=assertTargetExistsAndReturnTarget(generatedProject,"//foo:bin");
  assertTrue(hasShellScriptPhaseToCompileCommonAndSplitAssetCatalogs(binTarget));
}
