{
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","test").build()).setType(IosTestDescription.TYPE).build();
  IosTestDescription.Arg arg=iosTestDescription.createUnpopulatedConstructorArg();
  arg.infoPlist=Optional.of(Paths.get("Info.plist"));
  arg.configs=ImmutableMap.of("Debug",ImmutableList.<Either<Path,ImmutableMap<String,String>>>of());
  arg.srcs=ImmutableList.of(AppleSource.ofSourcePathWithFlags(new Pair<SourcePath,String>(new TestSourcePath("foo.m"),"-foo")),AppleSource.ofSourcePath(new TestSourcePath("foo.h")));
  arg.frameworks=ImmutableSortedSet.of("$SDKROOT/Foo.framework","$DEVELOPER_DIR/XCTest.framework");
  arg.contacts=Optional.of(ImmutableSortedSet.<String>of());
  arg.labels=Optional.of(ImmutableSortedSet.<Label>of());
  arg.sourceUnderTest=Optional.of(ImmutableSortedSet.<BuildRule>of());
  arg.testType=Optional.of("xctest");
  arg.deps=Optional.absent();
  arg.gid=Optional.absent();
  arg.headerPathPrefix=Optional.absent();
  arg.useBuckHeaderMaps=Optional.absent();
  BuildRule rule=iosTestDescription.createBuildRule(params,new BuildRuleResolver(),arg);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(rule),ImmutableSet.of(rule.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:test");
  assertEquals("PBXNativeTarget",target.isa());
  assertEquals(PBXTarget.ProductType.UNIT_TEST,target.getProductType());
  PBXFileReference productReference=target.getProductReference();
  assertEquals("test.xctest",productReference.getName());
  assertEquals(Optional.of("wrapper.cfbundle"),productReference.getExplicitFileType());
  assertHasConfigurations(target,"Debug");
  assertEquals("Should have exact number of build phases",4,target.getBuildPhases().size());
  assertHasSingletonSourcesPhaseWithSourcesAndFlags(target,ImmutableMap.of("foo.m",Optional.of("-foo")));
  assertHasSingletonHeadersPhaseWithHeaders(target,"foo.h");
  ProjectGeneratorTestUtils.assertHasSingletonFrameworksPhaseWithFrameworkEntries(target,ImmutableList.of("$DEVELOPER_DIR/XCTest.framework","$SDKROOT/Foo.framework"));
}
