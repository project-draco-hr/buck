{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRule rule1=createBuildRuleWithDefaults(BuildTarget.builder("//foo","rule1").build(),resolver,ImmutableSortedSet.<BuildRule>of(),appleLibraryDescription,new Function<AppleNativeTargetDescriptionArg,AppleNativeTargetDescriptionArg>(){
    @Override public AppleNativeTargetDescriptionArg apply(    AppleNativeTargetDescriptionArg input){
      input.configs=Optional.of(ImmutableSortedMap.of("Conf1",new XcodeRuleConfiguration(ImmutableList.<XcodeRuleConfigurationLayer>of()),"Conf2",new XcodeRuleConfiguration(ImmutableList.<XcodeRuleConfigurationLayer>of())));
      return input;
    }
  }
);
  BuildRule rule2=createBuildRuleWithDefaults(BuildTarget.builder("//foo","rule2").build(),resolver,ImmutableSortedSet.<BuildRule>of(),appleLibraryDescription,new Function<AppleNativeTargetDescriptionArg,AppleNativeTargetDescriptionArg>(){
    @Override public AppleNativeTargetDescriptionArg apply(    AppleNativeTargetDescriptionArg input){
      input.configs=Optional.of(ImmutableSortedMap.of("Conf2",new XcodeRuleConfiguration(ImmutableList.<XcodeRuleConfigurationLayer>of()),"Conf3",new XcodeRuleConfiguration(ImmutableList.<XcodeRuleConfigurationLayer>of())));
      return input;
    }
  }
);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(rule1,rule2),ImmutableSet.of(rule1.getBuildTarget(),rule2.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXProject generatedProject=projectGenerator.getGeneratedProject();
  Map<String,XCBuildConfiguration> configurations=generatedProject.getBuildConfigurationList().getBuildConfigurationsByName().asMap();
  assertThat(configurations,hasKey("Conf1"));
  assertThat(configurations,hasKey("Conf2"));
  assertThat(configurations,hasKey("Conf3"));
}
