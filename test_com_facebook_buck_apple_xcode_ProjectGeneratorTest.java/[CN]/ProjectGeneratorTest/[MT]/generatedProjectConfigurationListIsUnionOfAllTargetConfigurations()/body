{
  BuildRule rule1=createBuildRuleWithDefaults(BuildTarget.builder("//foo","rule1").build(),ImmutableSortedSet.<BuildRule>of(),iosLibraryDescription,new Function<IosLibraryDescription.Arg,IosLibraryDescription.Arg>(){
    @Override public IosLibraryDescription.Arg apply(    IosLibraryDescription.Arg input){
      input.configs=ImmutableMap.of("Conf1",ImmutableList.<Either<Path,ImmutableMap<String,String>>>of(),"Conf2",ImmutableList.<Either<Path,ImmutableMap<String,String>>>of());
      return input;
    }
  }
);
  BuildRule rule2=createBuildRuleWithDefaults(BuildTarget.builder("//foo","rule2").build(),ImmutableSortedSet.<BuildRule>of(),iosLibraryDescription,new Function<IosLibraryDescription.Arg,IosLibraryDescription.Arg>(){
    @Override public IosLibraryDescription.Arg apply(    IosLibraryDescription.Arg input){
      input.configs=ImmutableMap.of("Conf2",ImmutableList.<Either<Path,ImmutableMap<String,String>>>of(),"Conf3",ImmutableList.<Either<Path,ImmutableMap<String,String>>>of());
      return input;
    }
  }
);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(rule1,rule2),ImmutableSet.of(rule1.getBuildTarget(),rule2.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXProject generatedProject=projectGenerator.getGeneratedProject();
  Map<String,XCBuildConfiguration> configurations=generatedProject.getBuildConfigurationList().getBuildConfigurationsByName().asMap();
  assertThat(configurations,hasKey("Conf1"));
  assertThat(configurations,hasKey("Conf2"));
  assertThat(configurations,hasKey("Conf3"));
}
