{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildTarget libraryTarget=BuildTarget.builder("//foo","library").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build();
  BuildRuleParams libraryParams=new FakeBuildRuleParamsBuilder(libraryTarget).setDeps(ImmutableSortedSet.<BuildRule>of()).setType(AppleLibraryDescription.TYPE).build();
  AppleNativeTargetDescriptionArg libraryArg=createDescriptionArgWithDefaults(appleLibraryDescription);
  BuildRule library=appleLibraryDescription.createBuildRule(libraryParams,resolver,libraryArg);
  resolver.addToIndex(library);
  BuildRule bundle=createAppleBundleBuildRule(BuildTarget.builder("//foo","final").build(),resolver,appleBundleDescription,library,AppleBundleExtension.BUNDLE);
  resolver.addToIndex(bundle);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(bundle),ImmutableSet.of(bundle.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:final");
  assertEquals(target.getProductType(),PBXTarget.ProductType.BUNDLE);
  assertEquals("Should have exact number of build phases ",1,target.getBuildPhases().size());
  ProjectGeneratorTestUtils.assertHasSingletonFrameworksPhaseWithFrameworkEntries(target,ImmutableList.<String>of());
}
