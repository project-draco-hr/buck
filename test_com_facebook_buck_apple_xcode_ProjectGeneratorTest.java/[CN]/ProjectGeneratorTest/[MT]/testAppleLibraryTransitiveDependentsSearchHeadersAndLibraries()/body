{
  BuildRuleResolver resolver=new BuildRuleResolver();
  Path rawXcconfigFile=Paths.get("Test.xcconfig");
  SourcePath xcconfigFile=new PathSourcePath(rawXcconfigFile);
  projectFilesystem.writeContentsToPath("",rawXcconfigFile);
  BuildRule libraryDepRule;
  BuildRule libraryRule;
  BuildRule testRule;
  Either<SourcePath,ImmutableMap<String,String>> argConfig=Either.ofLeft(xcconfigFile);
  Either<SourcePath,ImmutableMap<String,String>> argSettings=Either.ofRight(ImmutableMap.<String,String>of());
  ImmutableMap<String,ImmutableList<Either<SourcePath,ImmutableMap<String,String>>>> configs=ImmutableMap.of("Debug",ImmutableList.of(argConfig,argSettings,argConfig,argSettings));
{
    BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//bar","lib").build()).setType(AppleLibraryDescription.TYPE).build();
    AppleNativeTargetDescriptionArg arg=createDescriptionArgWithDefaults(appleLibraryDescription);
    arg.configs=Optional.of(configs);
    arg.srcs=Optional.of(ImmutableList.of(AppleSource.ofSourcePath(new TestSourcePath("foo.m"))));
    arg.frameworks=Optional.of(ImmutableSortedSet.of("$SDKROOT/Library.framework"));
    libraryDepRule=appleLibraryDescription.createBuildRule(params,resolver,arg);
    resolver.addToIndex(libraryDepRule);
  }
{
    BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","lib").build()).setDeps(ImmutableSortedSet.of(libraryDepRule)).setType(AppleLibraryDescription.TYPE).build();
    AppleNativeTargetDescriptionArg arg=createDescriptionArgWithDefaults(appleLibraryDescription);
    arg.configs=Optional.of(configs);
    arg.srcs=Optional.of(ImmutableList.of(AppleSource.ofSourcePath(new TestSourcePath("foo.m"))));
    arg.frameworks=Optional.of(ImmutableSortedSet.of("$SDKROOT/Library.framework"));
    libraryRule=appleLibraryDescription.createBuildRule(params,resolver,arg);
    resolver.addToIndex(libraryRule);
  }
{
    BuildRuleParams dynamicLibraryParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","testlib").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build()).setDeps(ImmutableSortedSet.of(libraryRule)).setType(AppleLibraryDescription.TYPE).build();
    AppleNativeTargetDescriptionArg dynamicLibraryArg=createDescriptionArgWithDefaults(appleLibraryDescription);
    dynamicLibraryArg.configs=Optional.of(configs);
    dynamicLibraryArg.srcs=Optional.of(ImmutableList.of(AppleSource.ofSourcePath(new TestSourcePath("fooTest.m"))));
    dynamicLibraryArg.frameworks=Optional.of(ImmutableSortedSet.of("$SDKROOT/Test.framework"));
    BuildRule dynamicLibraryDep=appleLibraryDescription.createBuildRule(dynamicLibraryParams,resolver,dynamicLibraryArg);
    resolver.addToIndex(dynamicLibraryDep);
    BuildRule xctestRule=createAppleBundleBuildRule(BuildTarget.builder("//foo","xctest").build(),resolver,appleBundleDescription,dynamicLibraryDep,AppleBundleExtension.XCTEST);
    resolver.addToIndex(xctestRule);
    BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","test").build()).setDeps(ImmutableSortedSet.of(xctestRule)).setType(AppleTestDescription.TYPE).build();
    AppleTestDescription.Arg arg=appleTestDescription.createUnpopulatedConstructorArg();
    arg.testBundle=xctestRule.getBuildTarget();
    arg.contacts=Optional.of(ImmutableSortedSet.<String>of());
    arg.labels=Optional.of(ImmutableSortedSet.<Label>of());
    arg.deps=Optional.of(ImmutableSortedSet.of(xctestRule.getBuildTarget()));
    arg.sourceUnderTest=Optional.of(ImmutableSortedSet.<BuildTarget>of());
    testRule=appleTestDescription.createBuildRule(params,resolver,arg);
    resolver.addToIndex(testRule);
  }
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(createPartialGraphFromBuildRules(ImmutableSet.of(libraryRule,testRule)),ImmutableSet.of(testRule.getBuildTarget()),ImmutableSet.of(ProjectGenerator.Option.REFERENCE_EXISTING_XCCONFIGS));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:xctest");
  assertHasConfigurations(target,"Debug");
  XCBuildConfiguration configuration=target.getBuildConfigurationList().getBuildConfigurationsByName().asMap().get("Debug");
  NSDictionary settings=configuration.getBuildSettings();
  assertEquals(new NSString("$(inherited) " + "$SYMROOT/F4XWEYLSHJWGSYQ/Headers " + "$SYMROOT/F4XWM33PHJWGSYQ/Headers"),settings.get("HEADER_SEARCH_PATHS"));
  assertEquals(new NSString("$(inherited) "),settings.get("USER_HEADER_SEARCH_PATHS"));
  assertEquals(new NSString("$(inherited) " + "$SYMROOT/F4XWEYLSHJWGSYQ/$CONFIGURATION$EFFECTIVE_PLATFORM_NAME " + "$SYMROOT/F4XWM33PHJWGSYQ/$CONFIGURATION$EFFECTIVE_PLATFORM_NAME"),settings.get("LIBRARY_SEARCH_PATHS"));
  assertEquals(new NSString("$(inherited) " + "$SYMROOT/F4XWEYLSHJWGSYQ/$CONFIGURATION$EFFECTIVE_PLATFORM_NAME " + "$SYMROOT/F4XWM33PHJWGSYQ/$CONFIGURATION$EFFECTIVE_PLATFORM_NAME"),settings.get("FRAMEWORK_SEARCH_PATHS"));
}
