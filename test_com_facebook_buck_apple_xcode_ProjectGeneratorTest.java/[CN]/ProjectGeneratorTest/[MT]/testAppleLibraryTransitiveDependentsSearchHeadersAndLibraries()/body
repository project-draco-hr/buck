{
  Path xcconfigFile=Paths.get("Test.xcconfig");
  projectFilesystem.writeContentsToPath("",xcconfigFile);
  BuildRule libraryDepRule;
  BuildRule libraryRule;
  BuildRule testRule;
  Either<Path,ImmutableMap<String,String>> argConfig=Either.ofLeft(xcconfigFile);
  Either<Path,ImmutableMap<String,String>> argSettings=Either.ofRight(ImmutableMap.<String,String>of());
  ImmutableMap<String,ImmutableList<Either<Path,ImmutableMap<String,String>>>> configs=ImmutableMap.of("Debug",ImmutableList.of(argConfig,argSettings,argConfig,argSettings));
{
    BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//bar","lib").build()).setType(AppleLibraryDescription.TYPE).build();
    AppleNativeTargetDescriptionArg arg=appleLibraryDescription.createUnpopulatedConstructorArg();
    arg.configs=configs;
    arg.srcs=ImmutableList.of(AppleSource.ofSourcePath(new TestSourcePath("foo.m")));
    arg.frameworks=ImmutableSortedSet.of("$SDKROOT/Library.framework");
    arg.deps=Optional.absent();
    arg.gid=Optional.absent();
    arg.headerPathPrefix=Optional.absent();
    arg.useBuckHeaderMaps=Optional.absent();
    libraryDepRule=appleLibraryDescription.createBuildRule(params,new BuildRuleResolver(),arg);
  }
{
    BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","lib").build()).setDeps(ImmutableSortedSet.of(libraryDepRule)).setType(AppleLibraryDescription.TYPE).build();
    AppleNativeTargetDescriptionArg arg=appleLibraryDescription.createUnpopulatedConstructorArg();
    arg.configs=configs;
    arg.srcs=ImmutableList.of(AppleSource.ofSourcePath(new TestSourcePath("foo.m")));
    arg.frameworks=ImmutableSortedSet.of("$SDKROOT/Library.framework");
    arg.deps=Optional.absent();
    arg.gid=Optional.absent();
    arg.headerPathPrefix=Optional.absent();
    arg.useBuckHeaderMaps=Optional.absent();
    libraryRule=appleLibraryDescription.createBuildRule(params,new BuildRuleResolver(),arg);
  }
{
    BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","test").build()).setDeps(ImmutableSortedSet.of(libraryRule)).setType(IosTestDescription.TYPE).build();
    IosTestDescription.Arg arg=iosTestDescription.createUnpopulatedConstructorArg();
    arg.infoPlist=Optional.of(Paths.get("Info.plist"));
    arg.configs=configs;
    arg.srcs=ImmutableList.of(AppleSource.ofSourcePath(new TestSourcePath("fooTest.m")));
    arg.frameworks=ImmutableSortedSet.of("$SDKROOT/Test.framework");
    arg.contacts=Optional.of(ImmutableSortedSet.<String>of());
    arg.labels=Optional.of(ImmutableSortedSet.<Label>of());
    arg.sourceUnderTest=Optional.of(ImmutableSortedSet.<BuildRule>of());
    arg.testType=Optional.absent();
    arg.deps=Optional.absent();
    arg.gid=Optional.absent();
    arg.headerPathPrefix=Optional.absent();
    arg.useBuckHeaderMaps=Optional.absent();
    testRule=iosTestDescription.createBuildRule(params,new BuildRuleResolver(),arg);
  }
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(createPartialGraphFromBuildRules(ImmutableSet.of(libraryRule,testRule)),ImmutableSet.of(testRule.getBuildTarget()),ImmutableSet.of(ProjectGenerator.Option.REFERENCE_EXISTING_XCCONFIGS));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:test");
  assertHasConfigurations(target,"Debug");
  XCBuildConfiguration configuration=target.getBuildConfigurationList().getBuildConfigurationsByName().asMap().get("Debug");
  NSDictionary settings=configuration.getBuildSettings();
  assertEquals(new NSString("$(inherited) " + "$SYMROOT/F4XWEYLSHJWGSYQ/Headers " + "$SYMROOT/F4XWM33PHJWGSYQ/Headers "+ "../buck-out/foo/test-target-headers.hmap "+ "../buck-out/bar/lib-public-headers.hmap "+ "../buck-out/foo/lib-public-headers.hmap"),settings.get("HEADER_SEARCH_PATHS"));
  assertEquals(new NSString("$(inherited) " + "../buck-out/foo/test-target-user-headers.hmap"),settings.get("USER_HEADER_SEARCH_PATHS"));
  assertEquals(new NSString("$(inherited) " + "$SYMROOT/F4XWEYLSHJWGSYQ/$CONFIGURATION$EFFECTIVE_PLATFORM_NAME " + "$SYMROOT/F4XWM33PHJWGSYQ/$CONFIGURATION$EFFECTIVE_PLATFORM_NAME"),settings.get("LIBRARY_SEARCH_PATHS"));
  assertEquals(new NSString("$(inherited) " + "$SYMROOT/F4XWEYLSHJWGSYQ/$CONFIGURATION$EFFECTIVE_PLATFORM_NAME " + "$SYMROOT/F4XWM33PHJWGSYQ/$CONFIGURATION$EFFECTIVE_PLATFORM_NAME"),settings.get("FRAMEWORK_SEARCH_PATHS"));
}
