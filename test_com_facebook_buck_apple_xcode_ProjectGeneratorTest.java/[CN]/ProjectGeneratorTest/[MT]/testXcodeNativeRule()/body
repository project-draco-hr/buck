{
  BuildRule rule=createBuildRuleWithDefaults(new BuildTarget("//foo","rule"),ImmutableSortedSet.<BuildRule>of(),xcodeNativeDescription,new Function<XcodeNativeDescription.Arg,XcodeNativeDescription.Arg>(){
    @Override public XcodeNativeDescription.Arg apply(    XcodeNativeDescription.Arg input){
      input.product="libfoo.a";
      input.targetGid="00DEADBEEF";
      input.projectContainerPath=new FileSourcePath("foo.xcodeproj");
      return input;
    }
  }
);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(rule),ImmutableSet.of(rule.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXProject project=projectGenerator.getGeneratedProject();
  assertThat(project.getTargets(),hasSize(2));
  PBXTarget target=project.getTargets().get(0);
  assertThat(target.getName(),equalTo("//foo:rule"));
  assertThat(target.isa(),equalTo("PBXAggregateTarget"));
  assertThat(target.getDependencies(),hasSize(1));
  PBXTargetDependency dependency=target.getDependencies().get(0);
  PBXContainerItemProxy proxy=dependency.getTargetProxy();
  String containerPath=assertFileRefIsRelativeAndResolvePath(proxy.getContainerPortal());
  assertThat(containerPath,endsWith("foo.xcodeproj"));
  assertThat(proxy.getRemoteGlobalIDString(),equalTo("00DEADBEEF"));
  verifyGeneratedSignedSourceTarget(project.getTargets().get(1));
  PBXGroup projectReferenceGroup=project.getMainGroup().getOrCreateChildGroupByName("Project References");
  assertThat(projectReferenceGroup.getChildren(),hasSize(1));
  assertThat(projectReferenceGroup.getChildren(),hasItem(sameInstance(proxy.getContainerPortal())));
}
