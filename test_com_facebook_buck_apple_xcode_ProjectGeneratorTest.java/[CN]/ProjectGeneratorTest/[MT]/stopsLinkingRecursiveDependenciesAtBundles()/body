{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRule dependentStaticLibrary=createBuildRuleWithDefaults(BuildTarget.builder("//dep","static").build(),ImmutableSortedSet.<BuildRule>of(),appleLibraryDescription,resolver);
  resolver.addToIndex(dependentStaticLibrary);
  BuildTarget dependentDynamicLibraryTarget=BuildTarget.builder("//dep","dynamic").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build();
  BuildRuleParams dependentDynamicLibraryParams=new FakeBuildRuleParamsBuilder(dependentDynamicLibraryTarget).setDeps(ImmutableSortedSet.of(dependentStaticLibrary)).setType(AppleLibraryDescription.TYPE).build();
  AppleNativeTargetDescriptionArg dependentDynamicLibraryArg=createDescriptionArgWithDefaults(appleLibraryDescription);
  BuildRule dependentDynamicLibrary=appleLibraryDescription.createBuildRule(dependentDynamicLibraryParams,resolver,dependentDynamicLibraryArg);
  resolver.addToIndex(dependentDynamicLibrary);
  BuildRule dependentFramework=createAppleBundleBuildRule(BuildTarget.builder("//dep","framework").build(),resolver,appleBundleDescription,dependentDynamicLibrary,AppleBundleExtension.FRAMEWORK);
  resolver.addToIndex(dependentFramework);
  BuildTarget libraryTarget=BuildTarget.builder("//foo","library").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build();
  BuildRuleParams libraryParams=new FakeBuildRuleParamsBuilder(libraryTarget).setDeps(ImmutableSortedSet.of(dependentFramework)).setType(AppleLibraryDescription.TYPE).build();
  AppleNativeTargetDescriptionArg libraryArg=createDescriptionArgWithDefaults(appleLibraryDescription);
  BuildRule library=appleLibraryDescription.createBuildRule(libraryParams,resolver,libraryArg);
  resolver.addToIndex(library);
  BuildRule bundle=createAppleBundleBuildRule(BuildTarget.builder("//foo","final").build(),resolver,appleBundleDescription,library,AppleBundleExtension.BUNDLE);
  resolver.addToIndex(bundle);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(bundle),ImmutableSet.of(bundle.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:final");
  assertEquals(target.getProductType(),PBXTarget.ProductType.BUNDLE);
  assertEquals("Should have exact number of build phases ",2,target.getBuildPhases().size());
  ProjectGeneratorTestUtils.assertHasSingletonFrameworksPhaseWithFrameworkEntries(target,ImmutableList.of("$BUILT_PRODUCTS_DIR/framework.framework"));
}
