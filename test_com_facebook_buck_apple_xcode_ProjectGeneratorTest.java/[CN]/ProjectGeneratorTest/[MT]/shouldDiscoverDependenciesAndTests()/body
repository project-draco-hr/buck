{
  BuildRuleResolver resolver=new BuildRuleResolver();
  final BuildRule barLib=createBuildRuleWithDefaults(BuildTarget.builder("//bar","lib").build(),ImmutableSortedSet.<BuildRule>of(),appleLibraryDescription,resolver);
  resolver.addToIndex(barLib);
  final BuildRule fooLib=createBuildRuleWithDefaults(BuildTarget.builder("//foo","lib").build(),ImmutableSortedSet.of(barLib),appleLibraryDescription,resolver);
  resolver.addToIndex(fooLib);
  BuildRule fooBinBinary=createBuildRuleWithDefaults(BuildTarget.builder("//foo","binbinary").build(),ImmutableSortedSet.of(fooLib),appleBinaryDescription,resolver);
  resolver.addToIndex(fooBinBinary);
  BuildRule fooBin=createAppleBundleBuildRule(BuildTarget.builder("//foo","bin").build(),resolver,appleBundleDescription,fooBinBinary,AppleBundleExtension.APP);
  resolver.addToIndex(fooBin);
  final BuildRule bazLib=createBuildRuleWithDefaults(BuildTarget.builder("//baz","lib").build(),ImmutableSortedSet.of(fooLib),appleLibraryDescription,resolver);
  resolver.addToIndex(bazLib);
  BuildRule bazTest;
{
    BuildRuleParams dynamicLibraryParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//baz","testlib").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build()).setDeps(ImmutableSortedSet.of(bazLib)).setType(AppleLibraryDescription.TYPE).build();
    AppleNativeTargetDescriptionArg dynamicLibraryArg=createDescriptionArgWithDefaults(appleLibraryDescription);
    BuildRule dynamicLibraryDep=appleLibraryDescription.createBuildRule(dynamicLibraryParams,resolver,dynamicLibraryArg);
    resolver.addToIndex(dynamicLibraryDep);
    BuildRule xctestRule=createAppleBundleBuildRule(BuildTarget.builder("//foo","xctest").build(),resolver,appleBundleDescription,dynamicLibraryDep,AppleBundleExtension.XCTEST);
    resolver.addToIndex(xctestRule);
    BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//baz","test").build()).setDeps(ImmutableSortedSet.of(xctestRule)).setType(AppleTestDescription.TYPE).build();
    AppleTestDescription.Arg arg=appleTestDescription.createUnpopulatedConstructorArg();
    arg.testBundle=xctestRule.getBuildTarget();
    arg.contacts=Optional.of(ImmutableSortedSet.<String>of());
    arg.labels=Optional.of(ImmutableSortedSet.<Label>of());
    arg.deps=Optional.of(ImmutableSortedSet.of(xctestRule.getBuildTarget()));
    arg.sourceUnderTest=Optional.of(ImmutableSortedSet.of(bazLib.getBuildTarget()));
    bazTest=appleTestDescription.createBuildRule(params,resolver,arg);
    resolver.addToIndex(bazTest);
  }
  final BuildRule bazLibTest=bazTest;
  BuildRule fooLibTest;
{
    BuildRuleParams dynamicLibraryParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","lib-testlib").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build()).setDeps(ImmutableSortedSet.of(bazLib)).setType(AppleLibraryDescription.TYPE).build();
    AppleNativeTargetDescriptionArg dynamicLibraryArg=createDescriptionArgWithDefaults(appleLibraryDescription);
    BuildRule dynamicLibraryDep=appleLibraryDescription.createBuildRule(dynamicLibraryParams,resolver,dynamicLibraryArg);
    resolver.addToIndex(dynamicLibraryDep);
    BuildRule xctestRule=createAppleBundleBuildRule(BuildTarget.builder("//foo","lib-xctest").build(),resolver,appleBundleDescription,dynamicLibraryDep,AppleBundleExtension.XCTEST);
    resolver.addToIndex(xctestRule);
    BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","lib-test").build()).setDeps(ImmutableSortedSet.of(xctestRule)).setType(AppleTestDescription.TYPE).build();
    AppleTestDescription.Arg arg=appleTestDescription.createUnpopulatedConstructorArg();
    arg.testBundle=xctestRule.getBuildTarget();
    arg.contacts=Optional.of(ImmutableSortedSet.<String>of());
    arg.labels=Optional.of(ImmutableSortedSet.<Label>of());
    arg.deps=Optional.of(ImmutableSortedSet.of(xctestRule.getBuildTarget()));
    arg.sourceUnderTest=Optional.of(ImmutableSortedSet.of(bazLib.getBuildTarget()));
    fooLibTest=appleTestDescription.createBuildRule(params,resolver,arg);
    resolver.addToIndex(fooLibTest);
  }
  BuildRule fooBinTest;
{
    BuildRuleParams dynamicLibraryParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","bin-testlib").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build()).setDeps(ImmutableSortedSet.of(bazLib)).setType(AppleLibraryDescription.TYPE).build();
    AppleNativeTargetDescriptionArg dynamicLibraryArg=createDescriptionArgWithDefaults(appleLibraryDescription);
    BuildRule dynamicLibraryDep=appleLibraryDescription.createBuildRule(dynamicLibraryParams,resolver,dynamicLibraryArg);
    resolver.addToIndex(dynamicLibraryDep);
    BuildRule xctestRule=createAppleBundleBuildRule(BuildTarget.builder("//foo","bin-xctest").build(),resolver,appleBundleDescription,dynamicLibraryDep,AppleBundleExtension.XCTEST);
    resolver.addToIndex(xctestRule);
    BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","bin-test").build()).setDeps(ImmutableSortedSet.of(xctestRule)).setType(AppleTestDescription.TYPE).build();
    AppleTestDescription.Arg arg=appleTestDescription.createUnpopulatedConstructorArg();
    arg.testBundle=xctestRule.getBuildTarget();
    arg.contacts=Optional.of(ImmutableSortedSet.<String>of());
    arg.labels=Optional.of(ImmutableSortedSet.<Label>of());
    arg.deps=Optional.of(ImmutableSortedSet.of(xctestRule.getBuildTarget()));
    arg.sourceUnderTest=Optional.of(ImmutableSortedSet.of(bazLib.getBuildTarget()));
    fooBinTest=appleTestDescription.createBuildRule(params,resolver,arg);
    resolver.addToIndex(fooBinTest);
  }
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(barLib,fooLib,fooBin,bazLib,bazLibTest,fooLibTest,fooBinTest),ImmutableSet.of(fooBin.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:bin");
  assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:lib");
  assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//bar:lib");
  assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:bin-xctest");
  assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:lib-xctest");
  assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//baz:lib");
}
