{
  final BuildRule barLib=createBuildRuleWithDefaults(BuildTarget.builder("//bar","lib").build(),ImmutableSortedSet.<BuildRule>of(),appleLibraryDescription);
  final BuildRule fooLib=createBuildRuleWithDefaults(BuildTarget.builder("//foo","lib").build(),ImmutableSortedSet.of(barLib),appleLibraryDescription);
  final BuildRule fooBin=createBuildRuleWithDefaults(BuildTarget.builder("//foo","bin").build(),ImmutableSortedSet.of(fooLib),iosBinaryDescription);
  final BuildRule bazLib=createBuildRuleWithDefaults(BuildTarget.builder("//baz","lib").build(),ImmutableSortedSet.of(fooLib),appleLibraryDescription);
  BuildRule bazTest;
{
    BuildRuleParams dynamicLibraryParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//baz","testlib").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build()).setDeps(ImmutableSortedSet.of(bazLib)).setType(AppleLibraryDescription.TYPE).build();
    AppleNativeTargetDescriptionArg dynamicLibraryArg=appleLibraryDescription.createUnpopulatedConstructorArg();
    dynamicLibraryArg.configs=ImmutableMap.of();
    dynamicLibraryArg.srcs=ImmutableList.of();
    dynamicLibraryArg.frameworks=ImmutableSortedSet.of();
    dynamicLibraryArg.deps=Optional.of(ImmutableSortedSet.of(bazLib));
    dynamicLibraryArg.gid=Optional.absent();
    dynamicLibraryArg.headerPathPrefix=Optional.absent();
    dynamicLibraryArg.useBuckHeaderMaps=Optional.absent();
    BuildRule dynamicLibraryDep=appleLibraryDescription.createBuildRule(dynamicLibraryParams,new BuildRuleResolver(),dynamicLibraryArg);
    BuildRuleParams xctestParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//baz","xctest").build()).setDeps(ImmutableSortedSet.of(dynamicLibraryDep)).setType(AppleBundleDescription.TYPE).build();
    AppleBundleDescription.Arg xctestArg=appleBundleDescription.createUnpopulatedConstructorArg();
    xctestArg.infoPlist=Optional.<SourcePath>of(new TestSourcePath("Info.plist"));
    xctestArg.binary=dynamicLibraryDep;
    xctestArg.extension=Either.ofLeft(AppleBundleExtension.XCTEST);
    xctestArg.deps=Optional.absent();
    BuildRule xctestRule=appleBundleDescription.createBuildRule(xctestParams,new BuildRuleResolver(),xctestArg);
    BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//baz","test").build()).setDeps(ImmutableSortedSet.of(xctestRule)).setType(AppleTestDescription.TYPE).build();
    AppleTestDescription.Arg arg=appleTestDescription.createUnpopulatedConstructorArg();
    arg.testBundle=xctestRule;
    arg.contacts=Optional.of(ImmutableSortedSet.<String>of());
    arg.labels=Optional.of(ImmutableSortedSet.<Label>of());
    arg.deps=Optional.of(ImmutableSortedSet.<BuildRule>of(xctestRule));
    arg.sourceUnderTest=Optional.of(ImmutableSortedSet.of(bazLib));
    bazTest=appleTestDescription.createBuildRule(params,new BuildRuleResolver(),arg);
  }
  final BuildRule bazLibTest=bazTest;
  BuildRule fooTest;
{
    BuildRuleParams dynamicLibraryParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","lib-testlib").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build()).setDeps(ImmutableSortedSet.of(bazLib)).setType(AppleLibraryDescription.TYPE).build();
    AppleNativeTargetDescriptionArg dynamicLibraryArg=appleLibraryDescription.createUnpopulatedConstructorArg();
    dynamicLibraryArg.configs=ImmutableMap.of();
    dynamicLibraryArg.srcs=ImmutableList.of();
    dynamicLibraryArg.frameworks=ImmutableSortedSet.of();
    dynamicLibraryArg.deps=Optional.of(ImmutableSortedSet.of(bazLib));
    dynamicLibraryArg.gid=Optional.absent();
    dynamicLibraryArg.headerPathPrefix=Optional.absent();
    dynamicLibraryArg.useBuckHeaderMaps=Optional.absent();
    BuildRule dynamicLibraryDep=appleLibraryDescription.createBuildRule(dynamicLibraryParams,new BuildRuleResolver(),dynamicLibraryArg);
    BuildRuleParams xctestParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","lib-xctest").build()).setDeps(ImmutableSortedSet.of(dynamicLibraryDep)).setType(AppleBundleDescription.TYPE).build();
    AppleBundleDescription.Arg xctestArg=appleBundleDescription.createUnpopulatedConstructorArg();
    xctestArg.infoPlist=Optional.<SourcePath>of(new TestSourcePath("Info.plist"));
    xctestArg.binary=dynamicLibraryDep;
    xctestArg.extension=Either.ofLeft(AppleBundleExtension.XCTEST);
    xctestArg.deps=Optional.absent();
    BuildRule xctestRule=appleBundleDescription.createBuildRule(xctestParams,new BuildRuleResolver(),xctestArg);
    BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","lib-test").build()).setDeps(ImmutableSortedSet.of(xctestRule)).setType(AppleTestDescription.TYPE).build();
    AppleTestDescription.Arg arg=appleTestDescription.createUnpopulatedConstructorArg();
    arg.testBundle=xctestRule;
    arg.contacts=Optional.of(ImmutableSortedSet.<String>of());
    arg.labels=Optional.of(ImmutableSortedSet.<Label>of());
    arg.deps=Optional.of(ImmutableSortedSet.<BuildRule>of(xctestRule));
    arg.sourceUnderTest=Optional.of(ImmutableSortedSet.of(bazLib));
    fooTest=appleTestDescription.createBuildRule(params,new BuildRuleResolver(),arg);
  }
  final BuildRule fooLibTest=fooTest;
  BuildRule fooBinTestLib;
{
    BuildRuleParams dynamicLibraryParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","bin-testlib").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build()).setDeps(ImmutableSortedSet.of(bazLib)).setType(AppleLibraryDescription.TYPE).build();
    AppleNativeTargetDescriptionArg dynamicLibraryArg=appleLibraryDescription.createUnpopulatedConstructorArg();
    dynamicLibraryArg.configs=ImmutableMap.of();
    dynamicLibraryArg.srcs=ImmutableList.of();
    dynamicLibraryArg.frameworks=ImmutableSortedSet.of();
    dynamicLibraryArg.deps=Optional.of(ImmutableSortedSet.of(bazLib));
    dynamicLibraryArg.gid=Optional.absent();
    dynamicLibraryArg.headerPathPrefix=Optional.absent();
    dynamicLibraryArg.useBuckHeaderMaps=Optional.absent();
    BuildRule dynamicLibraryDep=appleLibraryDescription.createBuildRule(dynamicLibraryParams,new BuildRuleResolver(),dynamicLibraryArg);
    BuildRuleParams xctestParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","bin-xctest").build()).setDeps(ImmutableSortedSet.of(dynamicLibraryDep)).setType(AppleBundleDescription.TYPE).build();
    AppleBundleDescription.Arg xctestArg=appleBundleDescription.createUnpopulatedConstructorArg();
    xctestArg.infoPlist=Optional.<SourcePath>of(new TestSourcePath("Info.plist"));
    xctestArg.binary=dynamicLibraryDep;
    xctestArg.extension=Either.ofLeft(AppleBundleExtension.XCTEST);
    xctestArg.deps=Optional.absent();
    BuildRule xctestRule=appleBundleDescription.createBuildRule(xctestParams,new BuildRuleResolver(),xctestArg);
    BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","bin-test").build()).setDeps(ImmutableSortedSet.of(xctestRule)).setType(AppleTestDescription.TYPE).build();
    AppleTestDescription.Arg arg=appleTestDescription.createUnpopulatedConstructorArg();
    arg.testBundle=xctestRule;
    arg.contacts=Optional.of(ImmutableSortedSet.<String>of());
    arg.labels=Optional.of(ImmutableSortedSet.<Label>of());
    arg.deps=Optional.of(ImmutableSortedSet.<BuildRule>of(xctestRule));
    arg.sourceUnderTest=Optional.of(ImmutableSortedSet.of(bazLib));
    fooBinTestLib=appleTestDescription.createBuildRule(params,new BuildRuleResolver(),arg);
  }
  final BuildRule fooBinTest=fooBinTestLib;
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(barLib,fooLib,fooBin,bazLib,bazLibTest,fooLibTest,fooBinTest),ImmutableSet.of(fooBin.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:bin");
  assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:lib");
  assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//bar:lib");
  assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:bin-xctest");
  assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:lib-xctest");
  assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//baz:lib");
}
