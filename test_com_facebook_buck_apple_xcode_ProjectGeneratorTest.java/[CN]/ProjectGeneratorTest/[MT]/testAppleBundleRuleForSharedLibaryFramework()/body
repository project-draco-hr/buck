{
  BuildTarget sharedLibraryTarget=BuildTarget.builder("//dep","shared").addFlavors(CxxDescriptionEnhancer.SHARED_FLAVOR).build();
  TargetNode<?> sharedLibraryNode=AppleLibraryBuilder.createBuilder(sharedLibraryTarget).setConfigs(Optional.of(ImmutableSortedMap.of("Debug",ImmutableMap.<String,String>of()))).build();
  BuildTarget buildTarget=BuildTarget.builder("//foo","bundle").build();
  TargetNode<?> node=AppleBundleBuilder.createBuilder(buildTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.FRAMEWORK)).setBinary(sharedLibraryTarget).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(sharedLibraryNode,node),ImmutableSet.<ProjectGenerator.Option>of());
  projectGenerator.createXcodeProjects();
  PBXProject project=projectGenerator.getGeneratedProject();
  PBXTarget target=assertTargetExistsAndReturnTarget(project,"//foo:bundle");
  assertEquals(target.getProductType(),PBXTarget.ProductType.FRAMEWORK);
  assertThat(target.isa(),equalTo("PBXNativeTarget"));
  PBXFileReference productReference=target.getProductReference();
  assertEquals("bundle.framework",productReference.getName());
  assertEquals(Optional.of("wrapper.framework"),productReference.getExplicitFileType());
  ImmutableMap<String,String> settings=getBuildSettings(buildTarget,target,"Debug");
  assertEquals("framework",settings.get("WRAPPER_EXTENSION"));
}
