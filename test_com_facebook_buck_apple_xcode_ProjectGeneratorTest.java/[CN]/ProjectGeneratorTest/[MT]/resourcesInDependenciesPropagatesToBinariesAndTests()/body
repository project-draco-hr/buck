{
  BuildRule resourceRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","res").build(),ImmutableSortedSet.<BuildRule>of(),appleResourceDescription,new Function<AppleResourceDescription.Arg,AppleResourceDescription.Arg>(){
    @Override public AppleResourceDescription.Arg apply(    AppleResourceDescription.Arg input){
      input.files=ImmutableSet.<SourcePath>of(new TestSourcePath("foo.png"));
      input.dirs=ImmutableSet.of(Paths.get("foodir"));
      return input;
    }
  }
);
  BuildRule libraryRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","lib").build(),ImmutableSortedSet.of(resourceRule),iosLibraryDescription);
  BuildRule testRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","test").build(),ImmutableSortedSet.of(libraryRule),iosTestDescription);
  BuildRule binaryRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","bin").build(),ImmutableSortedSet.of(libraryRule),iosBinaryDescription);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(resourceRule,libraryRule,testRule,binaryRule),ImmutableSet.of(testRule.getBuildTarget(),binaryRule.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXProject generatedProject=projectGenerator.getGeneratedProject();
  PBXTarget testTarget=assertTargetExistsAndReturnTarget(generatedProject,"//foo:test");
  assertHasSingletonResourcesPhaseWithEntries(testTarget,"foo.png","foodir");
  PBXTarget binTarget=assertTargetExistsAndReturnTarget(generatedProject,"//foo:bin");
  assertHasSingletonResourcesPhaseWithEntries(binTarget,"foo.png","foodir");
}
