{
  Path rawXcconfigFile=Paths.get("Test.xcconfig");
  SourcePath xcconfigFile=new PathSourcePath(rawXcconfigFile);
  projectFilesystem.writeContentsToPath("",rawXcconfigFile);
  BuildTarget buildTarget=BuildTarget.builder("//hi","lib").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build();
  TargetNode<?> node=AppleLibraryBuilder.createBuilder(buildTarget).setConfigs(Optional.of(ImmutableSortedMap.of("Debug",new XcodeRuleConfiguration(ImmutableList.of(new XcodeRuleConfigurationLayer(xcconfigFile),new XcodeRuleConfigurationLayer(xcconfigFile)))))).setHeaderPathPrefix(Optional.of("MyHeaderPathPrefix")).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.<TargetNode<?>>of(node),ImmutableSet.of(ProjectGenerator.Option.REFERENCE_EXISTING_XCCONFIGS));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//hi:lib#dynamic");
  assertThat(target.isa(),equalTo("PBXNativeTarget"));
  assertThat(target.getProductType(),equalTo(PBXTarget.ProductType.DYNAMIC_LIBRARY));
  assertHasConfigurations(target,"Debug");
  XCBuildConfiguration configuration=target.getBuildConfigurationList().getBuildConfigurationsByName().asMap().get("Debug");
  NSDictionary settings=configuration.getBuildSettings();
  assertEquals(new NSString("$SYMROOT/$CONFIGURATION$EFFECTIVE_PLATFORM_NAME"),settings.get("BUILT_PRODUCTS_DIR"));
  assertEquals(new NSString("$BUILT_PRODUCTS_DIR/F4XWQ2J2NRUWEI3EPFXGC3LJMM"),settings.get("CONFIGURATION_BUILD_DIR"));
  assertEquals(new NSString("Headers/MyHeaderPathPrefix"),settings.get("PUBLIC_HEADERS_FOLDER_PATH"));
}
