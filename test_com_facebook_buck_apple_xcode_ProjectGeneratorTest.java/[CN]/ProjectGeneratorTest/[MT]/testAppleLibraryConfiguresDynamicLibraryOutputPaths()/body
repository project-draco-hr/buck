{
  Path rawXcconfigFile=Paths.get("Test.xcconfig");
  SourcePath xcconfigFile=new PathSourcePath(rawXcconfigFile);
  projectFilesystem.writeContentsToPath("",rawXcconfigFile);
  BuildTarget buildTarget=BuildTarget.builder("//hi","lib").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build();
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(buildTarget).setType(AppleLibraryDescription.TYPE).build();
  AppleNativeTargetDescriptionArg arg=createDescriptionArgWithDefaults(appleLibraryDescription);
  Either<SourcePath,ImmutableMap<String,String>> argConfig=Either.ofLeft(xcconfigFile);
  Either<SourcePath,ImmutableMap<String,String>> argSettings=Either.ofRight(ImmutableMap.<String,String>of());
  arg.configs=Optional.of(ImmutableMap.of("Debug",ImmutableList.of(argConfig,argSettings,argConfig,argSettings)));
  arg.headerPathPrefix=Optional.of("MyHeaderPathPrefix");
  BuildRule rule=appleLibraryDescription.createBuildRule(params,new BuildRuleResolver(),arg);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(createPartialGraphFromBuildRules(ImmutableSet.of(rule)),ImmutableSet.of(rule.getBuildTarget()),ImmutableSet.of(ProjectGenerator.Option.REFERENCE_EXISTING_XCCONFIGS));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//hi:lib#dynamic");
  assertThat(target.isa(),equalTo("PBXNativeTarget"));
  assertThat(target.getProductType(),equalTo(PBXTarget.ProductType.DYNAMIC_LIBRARY));
  assertHasConfigurations(target,"Debug");
  XCBuildConfiguration configuration=target.getBuildConfigurationList().getBuildConfigurationsByName().asMap().get("Debug");
  NSDictionary settings=configuration.getBuildSettings();
  assertEquals(new NSString("$SYMROOT/F4XWQ2J2NRUWEI3EPFXGC3LJMM/$CONFIGURATION$EFFECTIVE_PLATFORM_NAME"),settings.get("CONFIGURATION_BUILD_DIR"));
  assertEquals(new NSString("../Headers/MyHeaderPathPrefix"),settings.get("PUBLIC_HEADERS_FOLDER_PATH"));
}
