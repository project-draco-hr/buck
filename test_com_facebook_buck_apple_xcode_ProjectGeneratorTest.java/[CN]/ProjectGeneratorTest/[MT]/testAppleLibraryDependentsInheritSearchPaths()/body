{
  Path rawXcconfigFile=Paths.get("Test.xcconfig");
  SourcePath xcconfigFile=new PathSourcePath(rawXcconfigFile);
  projectFilesystem.writeContentsToPath("",rawXcconfigFile);
  ImmutableSortedMap<String,XcodeRuleConfiguration> configs=ImmutableSortedMap.of("Debug",new XcodeRuleConfiguration(ImmutableList.of(new XcodeRuleConfigurationLayer(xcconfigFile),new XcodeRuleConfigurationLayer(ImmutableMap.of("HEADER_SEARCH_PATHS","headers","USER_HEADER_SEARCH_PATHS","user_headers","LIBRARY_SEARCH_PATHS","libraries","FRAMEWORK_SEARCH_PATHS","frameworks")),new XcodeRuleConfigurationLayer(xcconfigFile),new XcodeRuleConfigurationLayer(ImmutableMap.of("HEADER_SEARCH_PATHS","headers","USER_HEADER_SEARCH_PATHS","user_headers","LIBRARY_SEARCH_PATHS","libraries","FRAMEWORK_SEARCH_PATHS","frameworks")))));
  BuildTarget libraryTarget=BuildTarget.builder("//foo","lib").build();
  TargetNode<?> libraryNode=AppleLibraryBuilder.createBuilder(libraryTarget).setConfigs(Optional.of(configs)).setSrcs(Optional.of(ImmutableList.of(AppleSource.ofSourcePath(new TestSourcePath("foo.m"))))).setFrameworks(Optional.of(ImmutableSortedSet.of("$SDKROOT/Library.framework"))).build();
  BuildTarget testLibraryTarget=BuildTarget.builder("//foo","testlib").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build();
  TargetNode<?> testLibraryNode=AppleLibraryBuilder.createBuilder(testLibraryTarget).setConfigs(Optional.of(configs)).setSrcs(Optional.of(ImmutableList.of(AppleSource.ofSourcePath(new TestSourcePath("fooTest.m"))))).setFrameworks(Optional.of(ImmutableSortedSet.of("$SDKROOT/Test.framework"))).setDeps(Optional.of(ImmutableSortedSet.of(libraryTarget))).build();
  BuildTarget testBundleTarget=BuildTarget.builder("//foo","xctest").build();
  TargetNode<?> testBundleNode=AppleBundleBuilder.createBuilder(testBundleTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setBinary(testLibraryTarget).build();
  BuildTarget testTarget=BuildTarget.builder("//foo","test").build();
  TargetNode<?> testNode=AppleTestBuilder.createBuilder(testTarget).setTestBundle(testBundleTarget).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(libraryNode,testLibraryNode,testBundleNode,testNode),ImmutableSet.of(ProjectGenerator.Option.REFERENCE_EXISTING_XCCONFIGS));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:xctest");
  assertHasConfigurations(target,"Debug");
  XCBuildConfiguration configuration=target.getBuildConfigurationList().getBuildConfigurationsByName().asMap().get("Debug");
  NSDictionary settings=configuration.getBuildSettings();
  assertEquals(new NSString("headers " + "$BUILT_PRODUCTS_DIR/F4XWM33PHJWGSYQ/Headers"),settings.get("HEADER_SEARCH_PATHS"));
  assertEquals(new NSString("user_headers "),settings.get("USER_HEADER_SEARCH_PATHS"));
  assertEquals(new NSString("libraries " + "$BUILT_PRODUCTS_DIR/F4XWM33PHJWGSYQ"),settings.get("LIBRARY_SEARCH_PATHS"));
  assertEquals(new NSString("frameworks "),settings.get("FRAMEWORK_SEARCH_PATHS"));
}
