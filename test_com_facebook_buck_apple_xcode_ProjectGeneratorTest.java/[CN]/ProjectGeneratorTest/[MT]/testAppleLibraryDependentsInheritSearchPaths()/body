{
  Path xcconfigFile=Paths.get("Test.xcconfig");
  projectFilesystem.writeContentsToPath("",xcconfigFile);
  BuildRule libraryRule;
  BuildRule testRule;
  Either<Path,ImmutableMap<String,String>> argConfig=Either.ofLeft(xcconfigFile);
  Either<Path,ImmutableMap<String,String>> argSettings=Either.ofRight(ImmutableMap.of("HEADER_SEARCH_PATHS","headers","USER_HEADER_SEARCH_PATHS","user_headers","LIBRARY_SEARCH_PATHS","libraries","FRAMEWORK_SEARCH_PATHS","frameworks"));
  ImmutableMap<String,ImmutableList<Either<Path,ImmutableMap<String,String>>>> configs=ImmutableMap.of("Debug",ImmutableList.of(argConfig,argSettings,argConfig,argSettings));
{
    BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","lib").build()).setType(AppleLibraryDescription.TYPE).build();
    AppleNativeTargetDescriptionArg arg=appleLibraryDescription.createUnpopulatedConstructorArg();
    arg.configs=configs;
    arg.srcs=ImmutableList.of(AppleSource.ofSourcePath(new TestSourcePath("foo.m")));
    arg.frameworks=ImmutableSortedSet.of("$SDKROOT/Library.framework");
    arg.deps=Optional.absent();
    arg.gid=Optional.absent();
    arg.headerPathPrefix=Optional.absent();
    arg.useBuckHeaderMaps=Optional.absent();
    libraryRule=appleLibraryDescription.createBuildRule(params,new BuildRuleResolver(),arg);
  }
{
    BuildRuleParams dynamicLibraryParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","testlib").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build()).setDeps(ImmutableSortedSet.of(libraryRule)).setType(AppleLibraryDescription.TYPE).build();
    AppleNativeTargetDescriptionArg dynamicLibraryArg=appleLibraryDescription.createUnpopulatedConstructorArg();
    dynamicLibraryArg.configs=configs;
    dynamicLibraryArg.srcs=ImmutableList.of(AppleSource.ofSourcePath(new TestSourcePath("fooTest.m")));
    dynamicLibraryArg.frameworks=ImmutableSortedSet.of("$SDKROOT/Test.framework");
    dynamicLibraryArg.deps=Optional.of(ImmutableSortedSet.of(libraryRule));
    dynamicLibraryArg.gid=Optional.absent();
    dynamicLibraryArg.headerPathPrefix=Optional.absent();
    dynamicLibraryArg.useBuckHeaderMaps=Optional.absent();
    BuildRule dynamicLibraryDep=appleLibraryDescription.createBuildRule(dynamicLibraryParams,new BuildRuleResolver(),dynamicLibraryArg);
    BuildRuleParams xctestParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","xctest").build()).setDeps(ImmutableSortedSet.of(dynamicLibraryDep)).setType(AppleBundleDescription.TYPE).build();
    AppleBundleDescription.Arg xctestArg=appleBundleDescription.createUnpopulatedConstructorArg();
    xctestArg.infoPlist=Optional.<SourcePath>of(new TestSourcePath("Info.plist"));
    xctestArg.binary=dynamicLibraryDep;
    xctestArg.extension=Either.ofLeft(AppleBundleExtension.XCTEST);
    xctestArg.deps=Optional.absent();
    BuildRule xctestRule=appleBundleDescription.createBuildRule(xctestParams,new BuildRuleResolver(),xctestArg);
    BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","test").build()).setDeps(ImmutableSortedSet.of(xctestRule)).setType(AppleTestDescription.TYPE).build();
    AppleTestDescription.Arg arg=appleTestDescription.createUnpopulatedConstructorArg();
    arg.testBundle=xctestRule;
    arg.contacts=Optional.of(ImmutableSortedSet.<String>of());
    arg.labels=Optional.of(ImmutableSortedSet.<Label>of());
    arg.deps=Optional.of(ImmutableSortedSet.<BuildRule>of(xctestRule));
    arg.sourceUnderTest=Optional.of(ImmutableSortedSet.<BuildRule>of());
    testRule=appleTestDescription.createBuildRule(params,new BuildRuleResolver(),arg);
  }
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(createPartialGraphFromBuildRules(ImmutableSet.of(libraryRule,testRule)),ImmutableSet.of(testRule.getBuildTarget()),ImmutableSet.of(ProjectGenerator.Option.REFERENCE_EXISTING_XCCONFIGS));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:xctest");
  assertHasConfigurations(target,"Debug");
  XCBuildConfiguration configuration=target.getBuildConfigurationList().getBuildConfigurationsByName().asMap().get("Debug");
  NSDictionary settings=configuration.getBuildSettings();
  assertEquals(new NSString("headers " + "$SYMROOT/F4XWM33PHJWGSYQ/Headers " + "../buck-out/foo/xctest-target-headers.hmap "+ "../buck-out/foo/lib-public-headers.hmap"),settings.get("HEADER_SEARCH_PATHS"));
  assertEquals(new NSString("user_headers " + "../buck-out/foo/xctest-target-user-headers.hmap"),settings.get("USER_HEADER_SEARCH_PATHS"));
  assertEquals(new NSString("libraries " + "$SYMROOT/F4XWM33PHJWGSYQ/$CONFIGURATION$EFFECTIVE_PLATFORM_NAME"),settings.get("LIBRARY_SEARCH_PATHS"));
  assertEquals(new NSString("frameworks " + "$SYMROOT/F4XWM33PHJWGSYQ/$CONFIGURATION$EFFECTIVE_PLATFORM_NAME"),settings.get("FRAMEWORK_SEARCH_PATHS"));
}
