{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRule fooRule=createBuildRuleWithDefaults(BuildTarget.builder("//external","extFoo").build(),resolver,ImmutableSortedSet.<BuildRule>of(),xcodeNativeDescription,new Function<XcodeNativeDescription.Arg,XcodeNativeDescription.Arg>(){
    @Override public XcodeNativeDescription.Arg apply(    XcodeNativeDescription.Arg input){
      input.buildableName=Optional.of("librickandmorty.a");
      return input;
    }
  }
);
  resolver.addToIndex(fooRule);
  BuildRule dynamicLibraryDep=createBuildRuleWithDefaults(BuildTarget.builder("//dep","dynamic").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build(),ImmutableSortedSet.of(fooRule),appleLibraryDescription,resolver);
  resolver.addToIndex(dynamicLibraryDep);
  BuildRule binaryRule=createAppleBundleBuildRule(BuildTarget.builder("//foo","foo").build(),resolver,appleBundleDescription,dynamicLibraryDep,AppleBundleExtension.FRAMEWORK);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(fooRule,binaryRule),ImmutableSet.of(binaryRule.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:foo");
  ProjectGeneratorTestUtils.assertHasSingletonFrameworksPhaseWithFrameworkEntries(target,ImmutableList.of("$BUILT_PRODUCTS_DIR/librickandmorty.a"));
}
