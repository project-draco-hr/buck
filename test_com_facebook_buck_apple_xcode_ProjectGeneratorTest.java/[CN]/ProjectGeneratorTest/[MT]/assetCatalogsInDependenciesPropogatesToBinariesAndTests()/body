{
  BuildRule assetCatalogRule=createBuildRuleWithDefaults(new BuildTarget("//foo","asset_catalog"),ImmutableSortedSet.<BuildRule>of(),new AppleAssetCatalogDescription(),new Function<AppleAssetCatalogDescription.Arg,AppleAssetCatalogDescription.Arg>(){
    @Nullable @Override public AppleAssetCatalogDescription.Arg apply(    @Nullable AppleAssetCatalogDescription.Arg input){
      input.dirs=ImmutableSet.of(Paths.get("AssetCatalog.xcassets"));
      return input;
    }
  }
);
  BuildRule libraryRule=createBuildRuleWithDefaults(new BuildTarget("//foo","lib"),ImmutableSortedSet.of(assetCatalogRule),iosLibraryDescription);
  BuildRule testRule=createBuildRuleWithDefaults(new BuildTarget("//foo","test"),ImmutableSortedSet.of(libraryRule),iosTestDescription);
  BuildRule binaryRule=createBuildRuleWithDefaults(new BuildTarget("//foo","bin"),ImmutableSortedSet.of(libraryRule),iosBinaryDescription);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(assetCatalogRule,libraryRule,testRule,binaryRule),ImmutableSet.of(testRule.getBuildTarget(),binaryRule.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXProject generatedProject=projectGenerator.getGeneratedProject();
  PBXTarget testTarget=assertTargetExistsAndReturnTarget(generatedProject,"//foo:test");
  assertTrue(hasShellScriptPhaseToCompileAssetCatalogs(testTarget));
  PBXTarget binTarget=assertTargetExistsAndReturnTarget(generatedProject,"//foo:bin");
  assertTrue(hasShellScriptPhaseToCompileAssetCatalogs(binTarget));
}
