{
  BuildRule staticLibraryDep=createBuildRuleWithDefaults(BuildTarget.builder("//dep","static").build(),ImmutableSortedSet.<BuildRule>of(),appleLibraryDescription);
  BuildRule dynamicLibraryDep=createBuildRuleWithDefaults(BuildTarget.builder("//dep","dynamic").build(),ImmutableSortedSet.<BuildRule>of(),macosxFrameworkDescription);
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","extension").build()).setDeps(ImmutableSortedSet.of(staticLibraryDep,dynamicLibraryDep)).setType(AppleExtensionDescription.TYPE).build();
  AppleExtensionDescription.Arg arg=appleExtensionDescription.createUnpopulatedConstructorArg();
  arg.infoPlist=Optional.of(Paths.get("Info.plist"));
  arg.configs=ImmutableMap.of("Debug",ImmutableList.<Either<Path,ImmutableMap<String,String>>>of());
  arg.srcs=ImmutableList.of(AppleSource.ofSourcePathWithFlags(new Pair<SourcePath,String>(new TestSourcePath("foo.m"),"-foo")),AppleSource.ofSourcePath(new TestSourcePath("foo.h")));
  arg.frameworks=ImmutableSortedSet.of("$SDKROOT/SystemFramework.framework","$BUILT_PRODUCTS_DIR/dynamic.framework");
  arg.deps=Optional.absent();
  arg.gid=Optional.absent();
  arg.headerPathPrefix=Optional.absent();
  arg.useBuckHeaderMaps=Optional.absent();
  BuildRule rule=appleExtensionDescription.createBuildRule(params,new BuildRuleResolver(),arg);
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(rule),ImmutableSet.of(rule.getBuildTarget()));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:extension");
  assertEquals(target.getProductType(),PBXTarget.ProductType.APP_EXTENSION);
  assertThat(target.isa(),equalTo("PBXNativeTarget"));
  PBXFileReference productReference=target.getProductReference();
  assertEquals("extension.appex",productReference.getName());
  assertEquals(Optional.of("wrapper.app-extension"),productReference.getExplicitFileType());
  assertHasConfigurations(target,"Debug");
  assertEquals("Should have exact number of build phases",4,target.getBuildPhases().size());
  assertHasSingletonSourcesPhaseWithSourcesAndFlags(target,ImmutableMap.of("foo.m",Optional.of("-foo")));
  ProjectGeneratorTestUtils.assertHasSingletonFrameworksPhaseWithFrameworkEntries(target,ImmutableList.of("$SDKROOT/SystemFramework.framework","$BUILT_PRODUCTS_DIR/libstatic.a","$BUILT_PRODUCTS_DIR/dynamic.framework"));
}
