{
  PrintStream output=null;
  if (context.getVerbosity().shouldUseVerbosityFlagIfAvailable()) {
    output=context.getStdOut();
  }
  ProjectFilesystem projectFilesystem=context.getProjectFilesystem();
  try {
    PrivateKeyAndCertificate privateKeyAndCertificate=createKeystoreProperties(context);
    ApkBuilder builder=new ApkBuilder(projectFilesystem.getFileForRelativePath(pathToOutputApkFile),projectFilesystem.getFileForRelativePath(resourceApk),projectFilesystem.getFileForRelativePath(dexFile),privateKeyAndCertificate.privateKey,privateKeyAndCertificate.certificate,output);
    builder.setDebugMode(debugMode);
    for (    String nativeLibraryDirectory : nativeLibraryDirectories) {
      builder.addNativeLibraries(projectFilesystem.getFileForRelativePath(nativeLibraryDirectory));
    }
    for (    String assetDirectory : assetDirectories) {
      builder.addSourceFolder(projectFilesystem.getFileForRelativePath(assetDirectory));
    }
    for (    String zipFile : zipFiles) {
      File zipFileOnDisk=projectFilesystem.getFileForRelativePath(zipFile);
      if (zipFileOnDisk.exists() && zipFileOnDisk.isFile()) {
        builder.addZipFile(zipFileOnDisk);
      }
    }
    for (    String jarFileThatMayContainResources : jarFilesThatMayContainResources) {
      File jarFile=projectFilesystem.getFileForRelativePath(jarFileThatMayContainResources);
      builder.addResourcesFromJar(jarFile);
    }
    builder.sealApk();
  }
 catch (  ApkCreationException|CertificateException|IOException|KeyStoreException|NoSuchAlgorithmException|SealedApkException|UnrecoverableKeyException e) {
    context.logError(e,"Error when creating APK at: %s.",pathToOutputApkFile);
    return 1;
  }
catch (  DuplicateFileException e) {
    throw new HumanReadableException(String.format("Found duplicate file for APK: %1$s\nOrigin 1: %2$s\nOrigin 2: %3$s",e.getArchivePath(),e.getFile1(),e.getFile2()));
  }
  return 0;
}
