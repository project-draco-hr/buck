{
  if (val == null) {
    return set(key,(String)null);
  }
  if (val instanceof RuleKeyAppendable) {
    return set(key,(RuleKeyAppendable)val);
  }
  if (val instanceof Boolean) {
    return set(key,(boolean)val);
  }
 else   if (val instanceof BuildRule) {
    return set(key,(BuildRule)val);
  }
 else   if (val instanceof Long) {
    return set(key,(long)val);
  }
 else   if (val instanceof Path) {
    return setInput(key,(Path)val);
  }
 else   if (val instanceof SourcePath) {
    return setInput(key,(SourcePath)val);
  }
 else   if (val instanceof RuleKey) {
    return set(key,(RuleKey)val);
  }
  if (val instanceof Optional) {
    Object o=((Optional<?>)val).orNull();
    return setReflectively(key,o);
  }
  if (val instanceof List) {
    Object determinant=((List<?>)val).isEmpty() ? null : ((List<?>)val).get(0);
    if (determinant instanceof SourceRoot) {
      return set(key,ImmutableList.copyOf((List<SourceRoot>)val));
    }
 else     if (determinant instanceof String) {
      return set(key,(List<String>)val);
    }
 else     if (determinant == null || determinant instanceof Enum || determinant instanceof Path) {
      setKey(key);
      for (      Object item : (List<?>)val) {
        setVal(item == null ? null : String.valueOf(item));
      }
      return separate();
    }
 else {
      throw new RuntimeException(String.format("Unsupported value type: List<%s>",determinant.getClass()));
    }
  }
 else   if (val instanceof Set) {
    Object determinant=((Set<?>)val).isEmpty() ? null : ((Set<?>)val).iterator().next();
    if (determinant instanceof BuildRule) {
      return set(key,ImmutableSortedSet.copyOf((Set<BuildRule>)val));
    }
 else     if (determinant instanceof SourcePath) {
      return setSourcePaths(key,ImmutableSortedSet.copyOf((Set<SourcePath>)val));
    }
 else     if (determinant instanceof String) {
      return set(key,ImmutableSortedSet.copyOf((Set<String>)val));
    }
 else     if (determinant == null || determinant instanceof Enum) {
      setKey(key);
      for (      Object item : (Set<?>)val) {
        setVal(item == null ? null : String.valueOf(item));
      }
      return separate();
    }
 else {
      throw new RuntimeException(String.format("Unsupported value type: Set<%s>",determinant.getClass()));
    }
  }
  if (val instanceof Iterator) {
    return setInputs(key,(Iterator<Path>)val);
  }
 else   if (val instanceof BuildTarget) {
    return set(key,((BuildTarget)val).getFullyQualifiedName());
  }
 else   if (val instanceof Enum || val instanceof Number) {
    return set(key,String.valueOf(val));
  }
 else   if (val instanceof String) {
    return set(key,(String)val);
  }
  throw new RuntimeException(String.format("Unsupported value type: %s",val.getClass()));
}
