{
  if (val instanceof Optional) {
    Object o=((Optional<?>)val).orNull();
    return setReflectively(key,o);
  }
  setKey(key);
  if (val instanceof Collection) {
    val=((Collection<?>)val).iterator();
  }
  if (val instanceof Iterable && !(val instanceof Path)) {
    val=((Iterable<?>)val).iterator();
  }
  if (val instanceof Iterator) {
    Iterator<?> iterator=(Iterator<?>)val;
    while (iterator.hasNext()) {
      setSingleValue(iterator.next());
    }
    return separate();
  }
  if (val instanceof Map) {
    if (!(val instanceof SortedMap | val instanceof ImmutableMap)) {
      logger.info("Adding an unsorted map to the rule key (%s). " + "Expect unstable ordering and caches misses: %s",key,val);
    }
    feed("{".getBytes());
    for (    Map.Entry<?,?> entry : ((Map<?,?>)val).entrySet()) {
      setSingleValue(entry.getKey());
      feed(" -> ".getBytes());
      setSingleValue(entry.getValue());
      separate();
    }
    feed("}".getBytes());
    return separate();
  }
  if (val instanceof RuleKeyAppendable) {
    return ((RuleKeyAppendable)val).appendToRuleKey(this,key);
  }
  return setSingleValue(val);
}
