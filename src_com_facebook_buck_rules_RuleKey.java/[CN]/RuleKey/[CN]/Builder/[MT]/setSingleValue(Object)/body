{
  if (val == null) {
    return separate();
  }
 else   if (val instanceof Boolean) {
    if (logElms != null) {
      logElms.add(String.format("boolean(\"%s\"):",(boolean)val ? "true" : "false"));
    }
    feed(((boolean)val ? "t" : "f").getBytes());
  }
 else   if (val instanceof Enum) {
    feed(String.valueOf(val).getBytes());
  }
 else   if (val instanceof Number) {
    if (logElms != null) {
      logElms.add(String.format("number(%s):",val));
    }
    Class<?> wrapped=Primitives.wrap(val.getClass());
    if (Double.class.equals(wrapped)) {
      hasher.putDouble(((Double)val).doubleValue());
    }
 else     if (Float.class.equals(wrapped)) {
      hasher.putFloat(((Float)val).floatValue());
    }
 else     if (Integer.class.equals(wrapped)) {
      hasher.putInt(((Integer)val).intValue());
    }
 else     if (Long.class.equals(wrapped)) {
      hasher.putLong(((Long)val).longValue());
    }
 else     if (Short.class.equals(wrapped)) {
      hasher.putShort(((Short)val).shortValue());
    }
 else {
      throw new RuntimeException(("Unhandled number type: " + val.getClass()));
    }
  }
 else   if (val instanceof Path) {
    Path path=(Path)val;
    HashCode sha1=hashCache.get(path);
    if (sha1 == null) {
      throw new RuntimeException("No SHA for " + val);
    }
    if (logElms != null) {
      logElms.add(String.format("path(%s:%s):",val,sha1));
    }
    if (path.isAbsolute()) {
      logger.warn("Attempting to add absolute path to rule key. Only using file name: %s",path);
      feed(path.getFileName().toString().getBytes()).separate();
    }
 else {
      feed(path.toString().getBytes()).separate();
    }
    feed(sha1.toString().getBytes());
  }
 else   if (val instanceof String) {
    if (logElms != null) {
      logElms.add(String.format("string(\"%s\"):",val));
    }
    feed(((String)val).getBytes());
  }
 else   if (val instanceof BuildRule) {
    return setSingleValue(((BuildRule)val).getRuleKey());
  }
 else   if (val instanceof BuildRuleType) {
    if (logElms != null) {
      logElms.add(String.format("ruleKeyType(%s):",val));
    }
    feed(val.toString().getBytes());
  }
 else   if (val instanceof RuleKey) {
    if (logElms != null) {
      logElms.add(String.format("ruleKey(sha1=%s):",val));
    }
    feed(val.toString().getBytes());
  }
 else   if (val instanceof BuildTarget || val instanceof UnflavoredBuildTarget) {
    if (logElms != null) {
      logElms.add(String.format("target(%s):",val));
    }
    feed(((HasBuildTarget)val).getBuildTarget().getFullyQualifiedName().getBytes());
  }
 else   if (val instanceof SourcePath) {
    Optional<BuildRule> buildRule=resolver.getRule((SourcePath)val);
    if (buildRule.isPresent()) {
      feed(val.toString().getBytes()).separate();
      return setSingleValue(buildRule.get());
    }
 else {
      Optional<Path> relativePath=resolver.getRelativePath((SourcePath)val);
      Preconditions.checkState(relativePath.isPresent());
      Path path=relativePath.get();
      return setSingleValue(path);
    }
  }
 else   if (val instanceof SourceRoot) {
    if (logElms != null) {
      logElms.add(String.format("sourceroot(%s):",val));
    }
    feed(((SourceRoot)val).getName().getBytes());
  }
 else   if (val instanceof SourceWithFlags) {
    SourceWithFlags source=(SourceWithFlags)val;
    setSingleValue(source.getSourcePath());
    feed("[".getBytes());
    for (    String flag : source.getFlags()) {
      feed(flag.getBytes());
      feed(",".getBytes());
    }
    feed("]".getBytes());
  }
 else {
    throw new RuntimeException("Unsupported value type: " + val.getClass());
  }
  return separate();
}
