{
  ProjectFilesystem filesystem=EasyMock.createMock(ProjectFilesystem.class);
  EasyMock.expect(filesystem.getFileForRelativePath(EasyMock.<String>anyObject())).andAnswer(new IAnswer<File>(){
    @Override public File answer() throws Throwable {
      return new File(String.valueOf(EasyMock.getCurrentArguments()[0]));
    }
  }
).anyTimes();
  filesystem.createParentDirs(scaleDest);
  EasyMock.expect(filesystem.deleteFileAtPath(scaleSource)).andReturn(true);
  String scaleSourceDir=new File(scaleSource).getParent();
  EasyMock.expect(filesystem.listFiles(scaleSourceDir)).andReturn(new File[0]);
  EasyMock.expect(filesystem.deleteFileAtPath(scaleSourceDir)).andReturn(true);
  EasyMock.replay(filesystem);
  ExecutionContext context=EasyMock.createMock(ExecutionContext.class);
  ProcessExecutor processExecutor=EasyMock.createMock(ProcessExecutor.class);
  EasyMock.expect(context.getProcessExecutor()).andReturn(processExecutor).anyTimes();
  EasyMock.expect(context.getVerbosity()).andReturn(Verbosity.SILENT).anyTimes();
  EasyMock.expect(context.getProjectFilesystem()).andReturn(filesystem).anyTimes();
  EasyMock.replay(context);
  FilterResourcesStep.DrawableFinder finder=EasyMock.createMock(FilterResourcesStep.DrawableFinder.class);
  FilteredDirectoryCopier copier=EasyMock.createMock(FilteredDirectoryCopier.class);
  Capture<Map<String,String>> dirMapCapture=new Capture<>();
  Capture<Predicate<File>> predCapture=new Capture<>();
  copier.copyDirs(EasyMock.capture(dirMapCapture),EasyMock.capture(predCapture));
  EasyMock.replay(copier);
  ImageScaler scaler=EasyMock.createMock(FilterResourcesStep.ImageScaler.class);
  scaler.scale(0.5,scaleSource,scaleDest,context);
  EasyMock.expect(scaler.isAvailable(context)).andReturn(true);
  EasyMock.replay(scaler);
  FilterResourcesStep command=new FilterResourcesStep(inResDirToOutResDirMap,true,true,copier,targetDensity,finder,scaler);
  EasyMock.expect(finder.findDrawables(inResDirToOutResDirMap.keySet())).andAnswer(new IAnswer<Set<String>>(){
    @SuppressWarnings("unchecked") @Override public Set<String> answer() throws Throwable {
      ImmutableSet.Builder<String> builder=ImmutableSet.builder();
      for (      String dir : (Iterable<String>)EasyMock.getCurrentArguments()[0]) {
        for (        String qualifier : qualifiers) {
          builder.add(getDrawableFile(dir,qualifier,"some.png"));
        }
      }
      builder.add(scaleSource);
      return builder.build();
    }
  }
).times(2);
  EasyMock.expect(finder.findDrawables(inResDirToOutResDirMap.values())).andAnswer(new IAnswer<Set<String>>(){
    @SuppressWarnings("unchecked") @Override public Set<String> answer() throws Throwable {
      ImmutableSet.Builder<String> builder=ImmutableSet.builder();
      for (      String dir : (Iterable<String>)EasyMock.getCurrentArguments()[0]) {
        builder.add(getDrawableFile(dir,targetDensity,"some.png"));
      }
      builder.add(scaleSource);
      return builder.build();
    }
  }
).once();
  EasyMock.replay(finder);
  ImmutableMap.Builder<String,String> dirMapBuilder=ImmutableMap.builder();
  Iterator<String> destIterator=inResDirToOutResDirMap.values().iterator();
  for (  String dir : inResDirToOutResDirMap.keySet()) {
    String nextDestination=destIterator.next();
    dirMapBuilder.put(dir,nextDestination);
    assertEquals(baseDestination,new File(nextDestination).getParentFile());
  }
  command.execute(context);
  assertEquals(dirMapBuilder.build(),dirMapCapture.getValue());
  Set<String> drawables=finder.findDrawables(inResDirToOutResDirMap.keySet());
  Predicate<File> expectedPred=Filters.createImageDensityFilter(drawables,targetDensity);
  Predicate<File> capturedPred=predCapture.getValue();
  for (  String drawablePath : drawables) {
    File drawableFile=new File(drawablePath);
    assertEquals(expectedPred.apply(drawableFile),capturedPred.apply(drawableFile));
  }
  EasyMock.verify(copier,context,finder,filesystem,scaler);
}
