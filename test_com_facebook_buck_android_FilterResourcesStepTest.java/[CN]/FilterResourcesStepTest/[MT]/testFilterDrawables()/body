{
  ProjectFilesystem filesystem=EasyMock.createMock(ProjectFilesystem.class);
  EasyMock.expect(filesystem.getRootPath()).andStubReturn(Paths.get("."));
  EasyMock.expect(filesystem.getFileForRelativePath(EasyMock.<Path>anyObject())).andAnswer(new IAnswer<File>(){
    @Override public File answer() throws Throwable {
      return ((Path)EasyMock.getCurrentArguments()[0]).toFile();
    }
  }
).anyTimes();
  filesystem.createParentDirs(scaleDest);
  EasyMock.expect(filesystem.deleteFileAtPath(scaleSource)).andReturn(true);
  Path scaleSourceDir=scaleSource.getParent();
  EasyMock.expect(filesystem.listFiles(scaleSourceDir)).andReturn(new File[0]);
  EasyMock.expect(filesystem.deleteFileAtPath(scaleSourceDir)).andReturn(true);
  EasyMock.replay(filesystem);
  ExecutionContext context=EasyMock.createMock(ExecutionContext.class);
  ProcessExecutor processExecutor=EasyMock.createMock(ProcessExecutor.class);
  EasyMock.expect(context.getProcessExecutor()).andReturn(processExecutor).anyTimes();
  EasyMock.expect(context.getVerbosity()).andReturn(Verbosity.SILENT).anyTimes();
  EasyMock.expect(context.getProjectFilesystem()).andReturn(filesystem).anyTimes();
  EasyMock.replay(context);
  FilterResourcesStep.DrawableFinder finder=EasyMock.createMock(FilterResourcesStep.DrawableFinder.class);
  FilteredDirectoryCopier copier=EasyMock.createMock(FilteredDirectoryCopier.class);
  Capture<Map<Path,Path>> dirMapCapture=new Capture<>();
  Capture<Predicate<Path>> predCapture=new Capture<>();
  copier.copyDirs(EasyMock.<ProjectFilesystem>anyObject(),EasyMock.capture(dirMapCapture),EasyMock.capture(predCapture));
  EasyMock.replay(copier);
  ImageScaler scaler=EasyMock.createMock(ImageScaler.class);
  scaler.scale(0.5,scaleSource,scaleDest,context);
  EasyMock.expect(scaler.isAvailable(context)).andReturn(true);
  EasyMock.replay(scaler);
  FilterResourcesStep command=new FilterResourcesStep(inResDirToOutResDirMap,true,true,ImmutableSet.<Path>of(),copier,ImmutableSet.of(targetDensity),finder,scaler);
  EasyMock.expect(finder.findDrawables(inResDirToOutResDirMap.keySet(),filesystem)).andAnswer(new IAnswer<Set<Path>>(){
    @SuppressWarnings("unchecked") @Override public Set<Path> answer() throws Throwable {
      ImmutableSet.Builder<Path> builder=ImmutableSet.builder();
      for (      Path dir : (Iterable<Path>)EasyMock.getCurrentArguments()[0]) {
        for (        String qualifier : qualifiers) {
          builder.add(getDrawableFile(dir.toString(),qualifier,"some.png"));
        }
      }
      builder.add(scaleSource);
      return builder.build();
    }
  }
).times(2);
  EasyMock.expect(finder.findDrawables(inResDirToOutResDirMap.values(),filesystem)).andAnswer(new IAnswer<Set<Path>>(){
    @SuppressWarnings("unchecked") @Override public Set<Path> answer() throws Throwable {
      ImmutableSet.Builder<Path> builder=ImmutableSet.builder();
      for (      Path dir : (Iterable<Path>)EasyMock.getCurrentArguments()[0]) {
        builder.add(getDrawableFile(dir.toString(),targetDensity.toString(),"some.png"));
      }
      builder.add(scaleSource);
      return builder.build();
    }
  }
).once();
  EasyMock.replay(finder);
  ImmutableMap.Builder<Path,Path> dirMapBuilder=ImmutableMap.builder();
  Iterator<Path> destIterator=inResDirToOutResDirMap.values().iterator();
  for (  Path dir : inResDirToOutResDirMap.keySet()) {
    Path nextDestination=destIterator.next();
    dirMapBuilder.put(dir,nextDestination);
    assertEquals(baseDestination,nextDestination.getParent().toFile());
  }
  command.execute(context);
  assertEquals(dirMapBuilder.build(),dirMapCapture.getValue());
  Set<Path> drawables=finder.findDrawables(inResDirToOutResDirMap.keySet(),filesystem);
  Predicate<Path> expectedPred=Filters.createImageDensityFilter(drawables,ImmutableSet.of(targetDensity),false);
  Predicate<Path> capturedPred=predCapture.getValue();
  for (  Path drawablePath : drawables) {
    assertEquals(expectedPred.apply(drawablePath),capturedPred.apply(drawablePath));
  }
  EasyMock.verify(copier,context,finder,filesystem,scaler);
}
