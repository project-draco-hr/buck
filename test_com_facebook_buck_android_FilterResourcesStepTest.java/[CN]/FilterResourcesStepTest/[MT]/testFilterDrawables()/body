{
  final String first="/first-path/res";
  final Path baseDestination=Paths.get("/dest");
  final ImmutableBiMap<Path,Path> inResDirToOutResDirMap=ImmutableBiMap.of(Paths.get(first),baseDestination.resolve("1"),Paths.get("/second-path/res"),baseDestination.resolve("2"),Paths.get("/third-path/res"),baseDestination.resolve("3"));
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  Path scaleSource=getDrawableFile(first,"xhdpi","other.png");
  filesystem.createNewFile(scaleSource);
  for (  Path dir : inResDirToOutResDirMap.keySet()) {
    for (    String qualifier : ImmutableSet.of("mdpi","hdpi","xhdpi")) {
      filesystem.createNewFile(getDrawableFile(dir.toString(),qualifier,"some.png"));
    }
  }
  FilterResourcesStep command=new FilterResourcesStep(filesystem,inResDirToOutResDirMap,true,false,ImmutableSet.<Path>of(),ImmutableSet.<String>of(),DefaultFilteredDirectoryCopier.getInstance(),ImmutableSet.of(ResourceFilters.Density.MDPI),new ImageScaler(){
    @Override public boolean isAvailable(    ExecutionContext context) throws IOException, InterruptedException {
      return true;
    }
    @Override public void scale(    double factor,    Path source,    Path destination,    ExecutionContext context) throws IOException, InterruptedException {
    }
  }
);
  ImmutableMap.Builder<Path,Path> dirMapBuilder=ImmutableMap.builder();
  Iterator<Path> destIterator=inResDirToOutResDirMap.values().iterator();
  for (  Path dir : inResDirToOutResDirMap.keySet()) {
    Path nextDestination=destIterator.next();
    dirMapBuilder.put(dir,nextDestination);
    assertEquals(baseDestination.toFile(),nextDestination.getParent().toFile());
  }
  assertThat(command.execute(TestExecutionContext.newInstance()),Matchers.is(0));
}
