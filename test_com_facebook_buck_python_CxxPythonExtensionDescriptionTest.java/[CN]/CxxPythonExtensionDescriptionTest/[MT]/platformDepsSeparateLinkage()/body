{
  PythonBuckConfig pythonBuckConfig=new PythonBuckConfig(FakeBuckConfig.builder().build(),new ExecutableFinder());
  FlavorDomain<PythonPlatform> pythonPlatforms=FlavorDomain.of("Python Platform",PY2,PY3);
  CxxLibraryBuilder py2Builder=new CxxLibraryBuilder(PYTHON2_DEP_TARGET);
  CxxLibraryBuilder py3Builder=new CxxLibraryBuilder(PYTHON3_DEP_TARGET);
  CxxLibraryBuilder depBuilder=new CxxLibraryBuilder(BuildTargetFactory.newInstance("//:dep")).setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("test.c"))));
  CxxPythonExtensionBuilder extensionBuilder=new CxxPythonExtensionBuilder(BuildTargetFactory.newInstance("//:rule"),pythonPlatforms,new CxxBuckConfig(FakeBuckConfig.builder().build()),CxxTestBuilder.createDefaultPlatforms()).setPlatformDeps(PatternMatchedCollection.<ImmutableSortedSet<BuildTarget>>builder().add(Pattern.compile(PY2.getFlavor().toString()),ImmutableSortedSet.of(depBuilder.getTarget())).build());
  PythonBinaryBuilder binary2Builder=new PythonBinaryBuilder(BuildTargetFactory.newInstance("//:bin2"),pythonBuckConfig,pythonPlatforms,CxxTestBuilder.createDefaultPlatform(),CxxTestBuilder.createDefaultPlatforms()).setMainModule("test").setPlatform(PY2.getFlavor().toString()).setDeps(ImmutableSortedSet.of(extensionBuilder.getTarget()));
  PythonBinaryBuilder binary3Builder=new PythonBinaryBuilder(BuildTargetFactory.newInstance("//:bin3"),pythonBuckConfig,pythonPlatforms,CxxTestBuilder.createDefaultPlatform(),CxxTestBuilder.createDefaultPlatforms()).setMainModule("test").setPlatform(PY3.getFlavor().toString()).setDeps(ImmutableSortedSet.of(extensionBuilder.getTarget()));
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraphFactory.newInstance(py2Builder.build(),py3Builder.build(),depBuilder.build(),extensionBuilder.build(),binary2Builder.build()),new BuildTargetNodeToBuildRuleTransformer());
  py2Builder.build(resolver);
  py3Builder.build(resolver);
  depBuilder.build(resolver);
  extensionBuilder.build(resolver);
  PythonBinary binary2=(PythonBinary)binary2Builder.build(resolver);
  PythonBinary binary3=(PythonBinary)binary3Builder.build(resolver);
  assertThat(binary2.getComponents().getNativeLibraries().keySet(),Matchers.contains(Paths.get("libdep.so")));
  assertThat(binary3.getComponents().getNativeLibraries().keySet(),Matchers.not(Matchers.contains(Paths.get("libdep.so"))));
}
