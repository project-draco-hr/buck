{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  PrebuiltCxxLibraryBuilder python2Builder=new PrebuiltCxxLibraryBuilder(PYTHON2_DEP_TARGET).setHeaderOnly(true).setExportedLinkerFlags(ImmutableList.of("-lpython2"));
  PrebuiltCxxLibraryBuilder python3Builder=new PrebuiltCxxLibraryBuilder(PYTHON3_DEP_TARGET).setHeaderOnly(true).setExportedLinkerFlags(ImmutableList.of("-lpython3"));
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  CxxPythonExtensionBuilder builder=new CxxPythonExtensionBuilder(target,FlavorDomain.of("Python Platform",PY2,PY3),new CxxBuckConfig(FakeBuckConfig.builder().build()),CxxTestBuilder.createDefaultPlatforms());
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraphFactory.newInstance(builder.build(),python2Builder.build(),python3Builder.build()),new DefaultTargetNodeToBuildRuleTransformer());
  python2Builder.build(resolver,filesystem);
  python3Builder.build(resolver,filesystem);
  CxxPythonExtension extension=(CxxPythonExtension)builder.build(resolver,filesystem);
  CxxLink py2Ext=(CxxLink)extension.getExtension(PY2,CxxPlatformUtils.DEFAULT_PLATFORM);
  assertThat(Arg.stringify(py2Ext.getArgs()),Matchers.allOf(Matchers.hasItem("-lpython2"),Matchers.not(Matchers.hasItem("-lpython3"))));
  CxxLink py3Ext=(CxxLink)extension.getExtension(PY3,CxxPlatformUtils.DEFAULT_PLATFORM);
  assertThat(Arg.stringify(py3Ext.getArgs()),Matchers.allOf(Matchers.hasItem("-lpython3"),Matchers.not(Matchers.hasItem("-lpython2"))));
}
