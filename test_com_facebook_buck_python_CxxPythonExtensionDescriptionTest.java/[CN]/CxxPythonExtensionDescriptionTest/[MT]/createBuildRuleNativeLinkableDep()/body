{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  PrebuiltCxxLibraryBuilder python2Builder=new PrebuiltCxxLibraryBuilder(PYTHON2_DEP_TARGET).setHeaderOnly(true).setExportedLinkerFlags(ImmutableList.of("-lpython2"));
  PrebuiltCxxLibraryBuilder python3Builder=new PrebuiltCxxLibraryBuilder(PYTHON3_DEP_TARGET).setHeaderOnly(true).setExportedLinkerFlags(ImmutableList.of("-lpython3"));
  BuildTarget cxxLibraryTarget=BuildTargetFactory.newInstance("//:dep");
  CxxLibraryBuilder cxxLibraryBuilder=new CxxLibraryBuilder(cxxLibraryTarget).setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("something.cpp"),ImmutableList.<String>of())));
  CxxPythonExtensionBuilder builder=new CxxPythonExtensionBuilder(target,FlavorDomain.of("Python Platform",PY2,PY3),new CxxBuckConfig(FakeBuckConfig.builder().build()),CxxTestBuilder.createDefaultPlatforms()).setDeps(ImmutableSortedSet.of(cxxLibraryTarget));
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraphFactory.newInstance(cxxLibraryBuilder.build(),builder.build(),python2Builder.build(),python3Builder.build()),new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  python2Builder.build(resolver,filesystem);
  python3Builder.build(resolver,filesystem);
  CxxLibrary dep=(CxxLibrary)cxxLibraryBuilder.build(resolver,filesystem);
  CxxPythonExtension extension=(CxxPythonExtension)builder.build(resolver,filesystem);
  NativeLinkableInput depInput=dep.getNativeLinkableInput(CxxPlatformUtils.DEFAULT_PLATFORM,Linker.LinkableDepType.SHARED);
  extension.getPythonPackageComponents(PY2,CxxPlatformUtils.DEFAULT_PLATFORM);
  BuildRule rule=resolver.getRule(CxxPythonExtensionDescription.getExtensionTarget(target,PY2.getFlavor(),CxxPlatformUtils.DEFAULT_PLATFORM.getFlavor()));
  assertThat(rule.getDeps(),Matchers.hasItems(FluentIterable.from(depInput.getArgs()).transformAndConcat(Arg.getDepsFunction(pathResolver)).toArray(BuildRule.class)));
}
