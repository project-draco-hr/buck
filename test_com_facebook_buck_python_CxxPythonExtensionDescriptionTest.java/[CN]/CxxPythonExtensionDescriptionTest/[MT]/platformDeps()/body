{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  new CxxLibraryBuilder(PYTHON2_DEP_TARGET).build(resolver);
  new CxxLibraryBuilder(PYTHON3_DEP_TARGET).build(resolver);
  CxxLibrary dep=(CxxLibrary)new CxxLibraryBuilder(BuildTargetFactory.newInstance("//:dep")).build(resolver);
  CxxPythonExtensionBuilder builder=new CxxPythonExtensionBuilder(BuildTargetFactory.newInstance("//:rule"),new FlavorDomain<>("Python Platform",ImmutableMap.of(PY2.getFlavor(),PY2,PY3.getFlavor(),PY3)),new CxxBuckConfig(FakeBuckConfig.builder().build()),CxxTestBuilder.createDefaultPlatforms());
  CxxPythonExtension rule=(CxxPythonExtension)builder.setPlatformDeps(PatternMatchedCollection.<ImmutableSortedSet<BuildTarget>>builder().add(Pattern.compile(PY2.getFlavor().toString()),ImmutableSortedSet.of(dep.getBuildTarget())).build()).build(resolver);
  SharedNativeLinkTarget py2SharedNativeLinkTarget=rule.getNativeLinkTarget(PY2);
  assertThat(ImmutableList.copyOf(py2SharedNativeLinkTarget.getSharedNativeLinkTargetDeps(CxxPlatformUtils.DEFAULT_PLATFORM)),Matchers.<NativeLinkable>hasItem(dep));
  SharedNativeLinkTarget py3SharedNativeLinkTarget=rule.getNativeLinkTarget(PY3);
  assertThat(ImmutableList.copyOf(py3SharedNativeLinkTarget.getSharedNativeLinkTargetDeps(CxxPlatformUtils.DEFAULT_PLATFORM)),Matchers.not(Matchers.<NativeLinkable>hasItem(dep)));
}
