{
  ImmutableMultimap.Builder<Cell,BuildTarget> projectCellToBuildTargetsBuilder=ImmutableMultimap.builder();
  for (  TargetNode<?> targetNode : projectGraph.getNodes()) {
    BuildTarget buildTarget=targetNode.getBuildTarget();
    projectCellToBuildTargetsBuilder.put(rootCell.getCell(buildTarget),buildTarget);
  }
  ImmutableMultimap<Cell,BuildTarget> projectCellToBuildTargets=projectCellToBuildTargetsBuilder.build();
  for (  Cell projectCell : projectCellToBuildTargets.keySet()) {
    ImmutableMultimap.Builder<Path,BuildTarget> projectDirectoryToBuildTargetsBuilder=ImmutableMultimap.builder();
    final ImmutableSet<BuildTarget> cellRules=ImmutableSet.copyOf(projectCellToBuildTargets.get(projectCell));
    for (    BuildTarget buildTarget : cellRules) {
      projectDirectoryToBuildTargetsBuilder.put(buildTarget.getBasePath(),buildTarget);
    }
    ImmutableMultimap<Path,BuildTarget> projectDirectoryToBuildTargets=projectDirectoryToBuildTargetsBuilder.build();
    Path relativeTargetCell=rootCell.getRoot().relativize(projectCell.getRoot());
    for (    Path projectDirectory : projectDirectoryToBuildTargets.keySet()) {
      final ImmutableSet<BuildTarget> rules=filterRulesForProjectDirectory(projectGraph,ImmutableSet.copyOf(projectDirectoryToBuildTargets.get(projectDirectory)));
      if (Sets.intersection(targetsInRequiredProjects,rules).isEmpty()) {
        continue;
      }
      generateProjectForDirectory(projectGenerators,workspaceGenerator,buildTargetToPbxTargetMapBuilder,targetToProjectPathMapBuilder,targetToBuildWithBuck,projectCell,relativeTargetCell,projectDirectory,rules);
    }
  }
  if (!groupedTests.isEmpty()) {
    synthesizedCombinedTestTargets=generateCombinedProjectForTests(workspaceGenerator,groupedTests,targetToProjectPathMapBuilder);
  }
  return synthesizedCombinedTestTargets;
}
