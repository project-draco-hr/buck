{
  ProjectGenerator combinedTestsProjectGenerator=new ProjectGenerator(projectGraph,ImmutableSortedSet.<BuildTarget>of(),rootCell,BuildTargets.getGenPath(rootCell.getFilesystem(),workspaceBuildTarget,"%s-CombinedTestBundles"),"_CombinedTestBundles",buildFileName,projectGeneratorOptions,Optional.<BuildTarget>absent(),buildWithBuckFlags,focusModules,executableFinder,environment,cxxPlatforms,defaultCxxPlatform,sourcePathResolverForNode,buckEventBus,halideBuckConfig,cxxBuckConfig,appleConfig);
  combinedTestsProjectGenerator.setAdditionalCombinedTestTargets(groupedTests).createXcodeProjects();
  workspaceGenerator.addFilePath(combinedTestsProjectGenerator.getProjectPath());
  requiredBuildTargetsBuilder.addAll(combinedTestsProjectGenerator.getRequiredBuildTargets());
  for (  PBXTarget target : combinedTestsProjectGenerator.getBuildTargetToGeneratedTargetMap().values()) {
    targetToProjectPathMapBuilder.put(target,combinedTestsProjectGenerator.getProjectPath());
  }
  Iterable<PBXTarget> synthesizedCombinedTestTargets=combinedTestsProjectGenerator.getBuildableCombinedTestTargets();
  for (  PBXTarget target : synthesizedCombinedTestTargets) {
    targetToProjectPathMapBuilder.put(target,combinedTestsProjectGenerator.getProjectPath());
  }
  this.combinedTestsProjectGenerator=Optional.of(combinedTestsProjectGenerator);
  return synthesizedCombinedTestTargets;
}
