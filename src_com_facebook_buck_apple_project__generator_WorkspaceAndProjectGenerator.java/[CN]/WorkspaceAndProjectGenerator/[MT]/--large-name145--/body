{
  for (  Map.Entry<String,XcodeWorkspaceConfigDescription.Arg> schemeConfigEntry : schemeConfigs.entrySet()) {
    String schemeName=schemeConfigEntry.getKey();
    boolean isMainScheme=schemeName.equals(workspaceName);
    XcodeWorkspaceConfigDescription.Arg schemeConfigArg=schemeConfigEntry.getValue();
    Iterable<PBXTarget> orderedBuildTargets=FluentIterable.from(ImmutableSet.copyOf(Optional.presentInstances(schemeNameToSrcTargetNode.get(schemeName)))).transformAndConcat(targetNodeToPBXTargetTransformer).toSet();
    FluentIterable<PBXTarget> orderedBuildTestTargets=FluentIterable.from(buildForTestNodes.get(schemeName)).transformAndConcat(targetNodeToPBXTargetTransformer);
    if (isMainScheme) {
      orderedBuildTestTargets=orderedBuildTestTargets.append(synthesizedCombinedTestTargets);
    }
    FluentIterable<PBXTarget> orderedRunTestTargets=FluentIterable.from(ungroupedTests.get(schemeName)).transformAndConcat(targetNodeToPBXTargetTransformer);
    if (isMainScheme) {
      orderedRunTestTargets=orderedRunTestTargets.append(synthesizedCombinedTestTargets);
    }
    Optional<String> runnablePath=schemeConfigArg.explicitRunnablePath;
    Optional<BuildTarget> targetToBuildWithBuck=getTargetToBuildWithBuck();
    if (buildWithBuck && targetToBuildWithBuck.isPresent() && !runnablePath.isPresent()) {
      Optional<String> productName=getProductName(schemeNameToSrcTargetNode.get(schemeName),targetToBuildWithBuck);
      String binaryName=AppleBundle.getBinaryName(targetToBuildWithBuck.get(),productName);
      runnablePath=Optional.of(rootCell.getFilesystem().resolve(ProjectGenerator.getScratchPathForAppBundle(targetToBuildWithBuck.get(),binaryName)).toString());
    }
    Optional<String> remoteRunnablePath;
    if (schemeConfigArg.isRemoteRunnable.or(false)) {
      remoteRunnablePath=Optional.of("/" + workspaceName);
    }
 else {
      remoteRunnablePath=Optional.absent();
    }
    SchemeGenerator schemeGenerator=new SchemeGenerator(rootCell.getFilesystem(),schemeConfigArg.srcTarget.transform(buildTargetToPBXTargetTransformer),orderedBuildTargets,orderedBuildTestTargets,orderedRunTestTargets,schemeName,combinedProject ? outputDirectory : outputDirectory.resolve(workspaceName + ".xcworkspace"),buildWithBuck,parallelizeBuild,runnablePath,remoteRunnablePath,XcodeWorkspaceConfigDescription.getActionConfigNamesFromArg(workspaceArguments),targetToProjectPathMap,schemeConfigArg.launchStyle.or(XCScheme.LaunchAction.LaunchStyle.AUTO));
    schemeGenerator.writeScheme();
    schemeGenerators.put(schemeName,schemeGenerator);
  }
}
