{
  LOG.debug("Generating workspace for target %s",workspaceBuildTarget);
  String workspaceName=XcodeWorkspaceConfigDescription.getWorkspaceNameFromArg(workspaceArguments);
  Path outputDirectory;
  if (combinedProject) {
    workspaceName+="-Combined";
    outputDirectory=BuildTargets.getGenPath(rootCell.getFilesystem(),workspaceBuildTarget,"%s").getParent().resolve(workspaceName + ".xcodeproj");
  }
 else {
    outputDirectory=workspaceBuildTarget.getBasePath();
  }
  WorkspaceGenerator workspaceGenerator=new WorkspaceGenerator(rootCell.getFilesystem(),combinedProject ? "project" : workspaceName,outputDirectory);
  ImmutableMap.Builder<String,XcodeWorkspaceConfigDescription.Arg> schemeConfigsBuilder=ImmutableMap.builder();
  ImmutableSetMultimap.Builder<String,Optional<TargetNode<?>>> schemeNameToSrcTargetNodeBuilder=ImmutableSetMultimap.builder();
  ImmutableSetMultimap.Builder<String,TargetNode<?>> buildForTestNodesBuilder=ImmutableSetMultimap.builder();
  ImmutableMultimap.Builder<AppleTestBundleParamsKey,TargetNode<AppleTestDescription.Arg>> groupedTestsBuilder=ImmutableMultimap.builder();
  ImmutableSetMultimap.Builder<String,TargetNode<AppleTestDescription.Arg>> ungroupedTestsBuilder=ImmutableSetMultimap.builder();
  buildWorkspaceSchemes(projectGraph,projectGeneratorOptions.contains(ProjectGenerator.Option.INCLUDE_TESTS),projectGeneratorOptions.contains(ProjectGenerator.Option.INCLUDE_DEPENDENCIES_TESTS),groupableTests,workspaceName,workspaceArguments,schemeConfigsBuilder,schemeNameToSrcTargetNodeBuilder,buildForTestNodesBuilder,groupedTestsBuilder,ungroupedTestsBuilder);
  ImmutableMap<String,XcodeWorkspaceConfigDescription.Arg> schemeConfigs=schemeConfigsBuilder.build();
  ImmutableSetMultimap<String,Optional<TargetNode<?>>> schemeNameToSrcTargetNode=schemeNameToSrcTargetNodeBuilder.build();
  ImmutableSetMultimap<String,TargetNode<?>> buildForTestNodes=buildForTestNodesBuilder.build();
  ImmutableMultimap<AppleTestBundleParamsKey,TargetNode<AppleTestDescription.Arg>> groupedTests=groupedTestsBuilder.build();
  ImmutableSetMultimap<String,TargetNode<AppleTestDescription.Arg>> ungroupedTests=ungroupedTestsBuilder.build();
  ImmutableSet<BuildTarget> targetsInRequiredProjects=FluentIterable.from(Optional.presentInstances(schemeNameToSrcTargetNode.values())).append(buildForTestNodes.values()).transform(HasBuildTarget.TO_TARGET).toSet();
  ImmutableMultimap.Builder<BuildTarget,PBXTarget> buildTargetToPbxTargetMapBuilder=ImmutableMultimap.builder();
  ImmutableMap.Builder<PBXTarget,Path> targetToProjectPathMapBuilder=ImmutableMap.builder();
  Optional<BuildTarget> targetToBuildWithBuck=getTargetToBuildWithBuck();
  Iterable<PBXTarget> synthesizedCombinedTestTargets=generateProjectsAndCombinedTestTargets(projectGenerators,listeningExecutorService,workspaceName,outputDirectory,workspaceGenerator,groupedTests,targetsInRequiredProjects,buildTargetToPbxTargetMapBuilder,targetToProjectPathMapBuilder,targetToBuildWithBuck);
  final Multimap<BuildTarget,PBXTarget> buildTargetToTarget=buildTargetToPbxTargetMapBuilder.build();
  writeWorkspaceSchemes(workspaceName,outputDirectory,schemeConfigs,schemeNameToSrcTargetNode,buildForTestNodes,ungroupedTests,targetToProjectPathMapBuilder.build(),synthesizedCombinedTestTargets,new Function<TargetNode<?>,Collection<PBXTarget>>(){
    @Override public Collection<PBXTarget> apply(    TargetNode<?> input){
      return buildTargetToTarget.get(input.getBuildTarget());
    }
  }
,getTargetNodeToPBXTargetTransformFunction(buildTargetToTarget,buildWithBuck));
  return workspaceGenerator.writeWorkspace();
}
