{
  ImmutableList<Map.Entry<Long,Optional<? extends BuildRuleEvent>>> eventsByThread=FluentIterable.from(threadsToRunningBuildRuleEvent.entrySet()).toSortedList(new Comparator<Map.Entry<Long,Optional<? extends BuildRuleEvent>>>(){
    @Override public int compare(    Map.Entry<Long,Optional<? extends BuildRuleEvent>> a,    Map.Entry<Long,Optional<? extends BuildRuleEvent>> b){
      return Long.signum(a.getKey() - b.getKey());
    }
  }
);
  StringBuilder lineBuilder=new StringBuilder(EXPECTED_MAXIMUM_RENDERED_LINE_LENGTH);
  lineBuilder.append(" |=> ");
  for (  Map.Entry<Long,Optional<? extends BuildRuleEvent>> entry : eventsByThread) {
    Optional<? extends BuildRuleEvent> startedEvent=entry.getValue();
    if (!startedEvent.isPresent()) {
      lineBuilder.append("IDLE");
      lines.add(ansi.asSubtleText(lineBuilder.toString()));
    }
 else {
      AtomicLong accumulatedTime=accumulatedRuleTime.get(startedEvent.get().getBuildRule().getBuildTarget());
      long elapsedTimeMs=(currentMillis - startedEvent.get().getTimestamp()) + (accumulatedTime != null ? accumulatedTime.get() : 0);
      Optional<? extends LeafEvent> leafEvent=threadsToRunningStep.get(entry.getKey());
      lineBuilder.append(startedEvent.get().getBuildRule().getFullyQualifiedName());
      lineBuilder.append("...  ");
      lineBuilder.append(formatElapsedTime(elapsedTimeMs));
      if (leafEvent != null && leafEvent.isPresent()) {
        lineBuilder.append(" (running ");
        lineBuilder.append(leafEvent.get().getCategory());
        lineBuilder.append('[');
        lineBuilder.append(formatElapsedTime(currentMillis - leafEvent.get().getTimestamp()));
        lineBuilder.append("])");
        if (elapsedTimeMs > WARNING_THRESHOLD_MS) {
          if (elapsedTimeMs > ERROR_THRESHOLD_MS) {
            lines.add(ansi.asErrorText(lineBuilder.toString()));
          }
 else {
            lines.add(ansi.asWarningText(lineBuilder.toString()));
          }
        }
 else {
          lines.add(lineBuilder.toString());
        }
      }
 else {
        lineBuilder.append(" (checking local cache)");
        lines.add(ansi.asSubtleText(lineBuilder.toString()));
      }
    }
    lineBuilder.delete(5,lineBuilder.length());
  }
}
