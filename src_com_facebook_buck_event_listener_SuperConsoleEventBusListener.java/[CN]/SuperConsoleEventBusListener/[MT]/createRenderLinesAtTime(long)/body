{
  ImmutableList.Builder<String> lines=ImmutableList.builder();
  if (buildStarted != null && buildStarted.isDistributedBuild()) {
    getDistBuildDebugInfo(lines);
  }
  if (parseStarted.isEmpty() && parseFinished.isEmpty()) {
    logEventPair("PARSING BUCK FILES",Optional.<String>absent(),currentTimeMillis,0L,projectBuildFileParseStarted,projectBuildFileParseFinished,getEstimatedProgressOfProcessingBuckFiles(),lines);
  }
  long parseTime=logEventPair("PROCESSING BUCK FILES",Optional.<String>absent(),currentTimeMillis,0L,buckFilesProcessing.values(),getEstimatedProgressOfProcessingBuckFiles(),lines);
  logEventPair("GENERATING PROJECT",Optional.<String>absent(),currentTimeMillis,0L,projectGenerationStarted,projectGenerationFinished,getEstimatedProgressOfGeneratingProjectFiles(),lines);
  if (parseTime != UNFINISHED_EVENT_PAIR) {
    lines.add(getNetworkStatsLine(buildFinished));
    if (buildStarted != null && buildStarted.isDistributedBuild()) {
      lines.add(getDistBuildStatusLine());
    }
    String jobSummary=null;
    if (ruleCount.isPresent()) {
      List<String> columns=Lists.newArrayList();
      columns.add(String.format(locale,"%d/%d JOBS",numRulesCompleted.get(),ruleCount.get()));
      columns.add(String.format(locale,"%d UPDATED",updated.get()));
      if (ruleCount.isPresent() && ruleCount.get() > 0) {
        columns.add(String.format(locale,"%d [%.1f%%] CACHE MISS",cacheMisses.get(),100 * (double)cacheMisses.get() / ruleCount.get()));
        if (cacheErrors.get() > 0) {
          columns.add(String.format(locale,"%d [%.1f%%] CACHE ERRORS",cacheErrors.get(),100 * (double)cacheErrors.get() / updated.get()));
        }
      }
      jobSummary="(" + Joiner.on(", ").join(columns) + ")";
    }
    String buildTrace=null;
    if (buildFinished != null && webServer.isPresent()) {
      Optional<Integer> port=webServer.get().getPort();
      if (port.isPresent()) {
        buildTrace=String.format(locale,"Details: http://localhost:%s/trace/%s",port.get(),buildFinished.getBuildId());
      }
    }
    if (buildStarted == null) {
      return lines.build();
    }
    String suffix=Joiner.on(" ").join(FluentIterable.of(new String[]{jobSummary,buildTrace}).filter(Predicates.notNull()));
    Optional<String> suffixOptional=suffix.isEmpty() ? Optional.<String>absent() : Optional.of(suffix);
    long buildStartedTime=buildStarted.getTimestamp();
    long buildFinishedTime=buildFinished != null ? buildFinished.getTimestamp() : currentTimeMillis;
    Collection<EventPair> processingEvents=getEventsBetween(buildStartedTime,buildFinishedTime,buckFilesProcessing.values());
    long offsetMs=getTotalCompletedTimeFromEventPairs(processingEvents);
    long buildTime=logEventPair("BUILDING",suffixOptional,currentTimeMillis,offsetMs,this.buildStarted,this.buildFinished,getApproximateBuildProgress(),lines);
    int maxThreadLines=defaultThreadLineLimit;
    if (anyWarningsPrinted.get() && threadLineLimitOnWarning < maxThreadLines) {
      maxThreadLines=threadLineLimitOnWarning;
    }
    if (anyErrorsPrinted.get() && threadLineLimitOnError < maxThreadLines) {
      maxThreadLines=threadLineLimitOnError;
    }
    if (buildTime == UNFINISHED_EVENT_PAIR) {
      ThreadStateRenderer renderer=new BuildThreadStateRenderer(ansi,formatTimeFunction,currentTimeMillis,threadsToRunningBuildRuleEvent,threadsToRunningStep,accumulatedRuleTime);
      renderLines(renderer,lines,maxThreadLines,shouldAlwaysSortThreadsByTime);
    }
    long testRunTime=logEventPair("TESTING",renderTestSuffix(),currentTimeMillis,0,testRunStarted.get(),testRunFinished.get(),Optional.<Double>absent(),lines);
    if (testRunTime == UNFINISHED_EVENT_PAIR) {
      ThreadStateRenderer renderer=new TestThreadStateRenderer(ansi,formatTimeFunction,currentTimeMillis,threadsToRunningTestRuleEvent,threadsToRunningTestSummaryEvent,threadsToRunningTestStatusMessageEvent,threadsToRunningStep,accumulatedRuleTime);
      renderLines(renderer,lines,maxThreadLines,shouldAlwaysSortThreadsByTime);
    }
    logEventPair("INSTALLING",Optional.<String>absent(),currentTimeMillis,0L,installStarted,installFinished,Optional.<Double>absent(),lines);
    logEventPair("HTTP CACHE UPLOAD",renderHttpUploads(),currentTimeMillis,0,firstHttpCacheUploadScheduled.get(),httpShutdownEvent,Optional.<Double>absent(),lines);
  }
  return lines.build();
}
