{
  ImmutableList<String> lines=createRenderLinesAtTime(clock.currentTimeMillis());
  String nextFrame=clearLastRender() + Joiner.on("\n").join(lines);
  lastNumLinesPrinted=lines.size();
  String logFrame;
  ImmutableList<String> logLines=createLogRenderLines();
  if (!logLines.isEmpty()) {
    lastNumLinesPrinted+=logLines.size();
    logFrame="\n" + Joiner.on("\n").join(logLines);
  }
 else {
    logFrame="";
  }
synchronized (console.getStdOut()) {
synchronized (console.getStdErr()) {
      boolean stdoutDirty=console.getStdOut().isDirty();
      boolean stderrDirty=console.getStdErr().isDirty();
      if (stdoutDirty || stderrDirty) {
        LOG.debug("Stopping console output (stdout dirty %s, stderr dirty %s).",stdoutDirty,stderrDirty);
        stopRenderScheduler();
      }
 else       if (!nextFrame.isEmpty() || !logFrame.isEmpty()) {
        if (!nextFrame.isEmpty()) {
          nextFrame=ansi.asNoWrap(nextFrame);
        }
        String fullFrame=nextFrame + logFrame;
        console.getStdErr().getRawStream().println(fullFrame);
      }
    }
  }
}
