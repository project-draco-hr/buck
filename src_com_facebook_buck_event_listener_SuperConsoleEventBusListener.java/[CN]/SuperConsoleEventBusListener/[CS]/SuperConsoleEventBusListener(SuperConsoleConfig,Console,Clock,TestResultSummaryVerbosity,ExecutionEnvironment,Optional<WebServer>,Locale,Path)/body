{
  super(console,clock,locale);
  this.locale=locale;
  this.formatTimeFunction=new Function<Long,String>(){
    @Override public String apply(    Long elapsedTimeMs){
      return formatElapsedTime(elapsedTimeMs);
    }
  }
;
  this.webServer=webServer;
  this.threadsToRunningBuildRuleEvent=new ConcurrentHashMap<>(executionEnvironment.getAvailableCores());
  this.threadsToRunningTestRuleEvent=new ConcurrentHashMap<>(executionEnvironment.getAvailableCores());
  this.threadsToRunningTestSummaryEvent=new ConcurrentHashMap<>(executionEnvironment.getAvailableCores());
  this.threadsToRunningTestStatusMessageEvent=new ConcurrentHashMap<>(executionEnvironment.getAvailableCores());
  this.threadsToRunningStep=new ConcurrentHashMap<>(executionEnvironment.getAvailableCores());
  this.accumulatedRuleTime=new ConcurrentHashMap<>();
  this.logEvents=new ConcurrentLinkedQueue<>();
  this.renderScheduler=Executors.newScheduledThreadPool(1,new ThreadFactoryBuilder().setNameFormat(getClass().getSimpleName() + "-%d").build());
  this.testFormatter=new TestResultFormatter(console.getAnsi(),console.getVerbosity(),summaryVerbosity,locale,Optional.of(testLogPath));
  this.testRunStarted=new AtomicReference<>();
  this.testRunFinished=new AtomicReference<>();
  this.defaultThreadLineLimit=config.getThreadLineLimit();
  this.threadLineLimitOnWarning=config.getThreadLineLimitOnWarning();
  this.threadLineLimitOnError=config.getThreadLineLimitOnError();
}
