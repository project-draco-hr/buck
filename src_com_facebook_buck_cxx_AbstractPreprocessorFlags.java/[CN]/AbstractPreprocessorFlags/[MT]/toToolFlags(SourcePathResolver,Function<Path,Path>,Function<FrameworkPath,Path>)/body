{
  ExplicitCxxToolFlags.Builder builder=CxxToolFlags.explicitBuilder();
  ExplicitCxxToolFlags.addCxxToolFlags(builder,getOtherFlags());
  builder.addAllRuleFlags(MoreIterables.zipAndConcat(Iterables.cycle("-include"),FluentIterable.from(getPrefixHeader().asSet()).transform(resolver.getAbsolutePathFunction()).transform(Functions.toStringFunction())));
  builder.addAllRuleFlags(CxxHeaders.getArgs(getIncludes(),resolver,Optional.of(pathShortener)));
  builder.addAllRuleFlags(MoreIterables.zipAndConcat(Iterables.cycle(CxxPreprocessables.IncludeType.SYSTEM.getFlag()),Iterables.transform(getSystemIncludePaths(),Functions.compose(Functions.toStringFunction(),pathShortener))));
  builder.addAllRuleFlags(MoreIterables.zipAndConcat(Iterables.cycle("-F"),FluentIterable.from(getFrameworkPaths()).transform(frameworkPathTransformer).transform(Functions.toStringFunction()).toSortedSet(Ordering.natural())));
  return builder.build();
}
