{
  ProcessExecutorParams.Builder builder=makeSubprocessBuilder(context,ImmutableMap.<String,String>of());
  if (useArgfile) {
    filesystem.writeLinesToPath(Iterables.transform(getArguments(context.getAnsi().isAnsiTerminal()),Escaper.ARGFILE_ESCAPER),getArgfile());
    builder.setCommand(ImmutableList.<String>builder().addAll(getCommandPrefix()).add("@" + getArgfile()).build());
  }
 else {
    builder.setCommand(ImmutableList.<String>builder().addAll(getCommandPrefix()).addAll(getArguments(context.getAnsi().isAnsiTerminal())).build());
  }
  if (operation == Operation.PREPROCESS) {
    builder.setRedirectOutput(ProcessBuilder.Redirect.PIPE);
  }
  ProcessExecutorParams params=builder.build();
  LOG.debug("Running command (pwd=%s): %s",params.getDirectory(),getDescription(context));
  ProcessExecutor executor=new ProcessExecutor(Console.createNullConsole());
  ProcessExecutor.LaunchedProcess process=executor.launchProcess(params);
  ByteArrayOutputStream error=new ByteArrayOutputStream();
  int exitCode;
  try {
    try (LineProcessorRunnable errorProcessor=createErrorTransformerFactory(context).createTransformerThread(context,process.getErrorStream(),error)){
      errorProcessor.start();
      if (operation == Operation.PREPROCESS) {
        try (OutputStream output=filesystem.newFileOutputStream(this.output);LineProcessorRunnable outputProcessor=createPreprocessorOutputTransformerFactory().createTransformerThread(context,process.getInputStream(),output)){
          outputProcessor.start();
          outputProcessor.waitFor();
        }
 catch (        Throwable thrown) {
          executor.destroyLaunchedProcess(process);
          throw thrown;
        }
      }
      errorProcessor.waitFor();
    }
 catch (    Throwable thrown) {
      executor.destroyLaunchedProcess(process);
      throw thrown;
    }
    exitCode=executor.waitForLaunchedProcess(process).getExitCode();
  }
  finally {
    executor.destroyLaunchedProcess(process);
    executor.waitForLaunchedProcess(process);
  }
  String err=new String(error.toByteArray());
  if (!err.isEmpty()) {
    context.getBuckEventBus().post(createConsoleEvent(context,preprocessorCommand.or(compilerCommand).get().supportsColorsInDiagnostics(),exitCode == 0 ? Level.WARNING : Level.SEVERE,err));
  }
  return exitCode;
}
