{
  Preconditions.checkState(preprocessorCommand.isPresent());
  Preconditions.checkState(compilerCommand.isPresent());
  ByteArrayOutputStream preprocessError=new ByteArrayOutputStream();
  ProcessBuilder preprocessBuilder=makeSubprocessBuilder(context);
  preprocessBuilder.command(makePreprocessCommand(context.getAnsi().isAnsiTerminal()));
  preprocessBuilder.environment().putAll(preprocessorCommand.get().getEnvironment());
  preprocessBuilder.redirectOutput(ProcessBuilder.Redirect.PIPE);
  ByteArrayOutputStream compileError=new ByteArrayOutputStream();
  ProcessBuilder compileBuilder=makeSubprocessBuilder(context);
  compileBuilder.command(makeCompileCommand("-",inputType.getPreprocessedLanguage(),false,context.getAnsi().isAnsiTerminal()));
  compileBuilder.environment().putAll(compilerCommand.get().getEnvironment());
  compileBuilder.redirectInput(ProcessBuilder.Redirect.PIPE);
  Process preprocess=null;
  Process compile=null;
  LineProcessorRunnable errorProcessorPreprocess=null;
  LineProcessorRunnable errorProcessorCompile=null;
  LineProcessorRunnable lineDirectiveMunger=null;
  CxxErrorTransformerFactory errorStreamTransformerFactory=createErrorTransformerFactory(context);
  try {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Running command (pwd=%s): %s",preprocessBuilder.directory(),getDescription(context));
    }
    preprocess=BgProcessKiller.startProcess(preprocessBuilder);
    compile=BgProcessKiller.startProcess(compileBuilder);
    errorProcessorPreprocess=errorStreamTransformerFactory.createTransformerThread(context,preprocess.getErrorStream(),preprocessError);
    errorProcessorPreprocess.start();
    errorProcessorCompile=errorStreamTransformerFactory.createTransformerThread(context,compile.getErrorStream(),compileError);
    errorProcessorCompile.start();
    lineDirectiveMunger=createPreprocessorOutputTransformerFactory().createTransformerThread(context,preprocess.getInputStream(),compile.getOutputStream());
    lineDirectiveMunger.start();
    int compileStatus=compile.waitFor();
    int preprocessStatus=preprocess.waitFor();
    safeCloseProcessor(errorProcessorPreprocess);
    safeCloseProcessor(errorProcessorCompile);
    String preprocessErr=new String(preprocessError.toByteArray());
    if (!preprocessErr.isEmpty()) {
      context.getBuckEventBus().post(createConsoleEvent(context,preprocessorCommand.get().supportsColorsInDiagnostics(),preprocessStatus == 0 ? Level.WARNING : Level.SEVERE,preprocessErr));
    }
    String compileErr=new String(compileError.toByteArray());
    if (!compileErr.isEmpty()) {
      context.getBuckEventBus().post(createConsoleEvent(context,compilerCommand.get().supportsColorsInDiagnostics(),compileStatus == 0 ? Level.WARNING : Level.SEVERE,compileErr));
    }
    if (preprocessStatus != 0) {
      LOG.warn("error %d %s(preprocess) %s: %s",preprocessStatus,operation.toString().toLowerCase(),input,preprocessErr);
    }
    if (compileStatus != 0) {
      LOG.warn("error %d %s(compile) %s: %s",compileStatus,operation.toString().toLowerCase(),input,compileErr);
    }
    if (preprocessStatus != 0) {
      return preprocessStatus;
    }
    if (compileStatus != 0) {
      return compileStatus;
    }
    return 0;
  }
  finally {
    if (preprocess != null) {
      preprocess.destroy();
      preprocess.waitFor();
    }
    if (compile != null) {
      compile.destroy();
      compile.waitFor();
    }
    safeCloseProcessor(errorProcessorPreprocess);
    safeCloseProcessor(errorProcessorCompile);
    safeCloseProcessor(lineDirectiveMunger);
  }
}
