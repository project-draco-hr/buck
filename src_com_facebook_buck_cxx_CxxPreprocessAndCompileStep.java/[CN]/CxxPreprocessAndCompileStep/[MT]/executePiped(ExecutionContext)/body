{
  Preconditions.checkState(preprocessorCommand.isPresent());
  Preconditions.checkState(compilerCommand.isPresent());
  ByteArrayOutputStream preprocessError=new ByteArrayOutputStream();
  ProcessExecutorParams preprocessParams=makeSubprocessBuilder(context,preprocessorCommand.get().getEnvironment()).setCommand(ImmutableList.<String>builder().addAll(preprocessorCommand.get().getCommandPrefix()).addAll(makePreprocessArguments(context.getAnsi().isAnsiTerminal())).build()).setRedirectOutput(ProcessBuilder.Redirect.PIPE).build();
  ByteArrayOutputStream compileError=new ByteArrayOutputStream();
  ProcessExecutorParams compileParams=makeSubprocessBuilder(context,compilerCommand.get().getEnvironment()).setCommand(ImmutableList.<String>builder().addAll(compilerCommand.get().getCommandPrefix()).addAll(makeCompileArguments("-",inputType.getPreprocessedLanguage(),false,context.getAnsi().isAnsiTerminal())).build()).setRedirectInput(ProcessBuilder.Redirect.PIPE).build();
  ProcessExecutor.LaunchedProcess preprocess=null;
  ProcessExecutor.LaunchedProcess compile=null;
  LineProcessorRunnable errorProcessorPreprocess=null;
  LineProcessorRunnable errorProcessorCompile=null;
  LineProcessorRunnable lineDirectiveMunger=null;
  CxxErrorTransformerFactory errorStreamTransformerFactory=createErrorTransformerFactory(context);
  ProcessExecutor executor=new ProcessExecutor(Console.createNullConsole());
  try {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Running command (pwd=%s): %s",preprocessParams.getDirectory(),getDescription(context));
    }
    preprocess=executor.launchProcess(preprocessParams);
    compile=executor.launchProcess(compileParams);
    errorProcessorPreprocess=errorStreamTransformerFactory.createTransformerThread(context,preprocess.getErrorStream(),preprocessError);
    errorProcessorPreprocess.start();
    errorProcessorCompile=errorStreamTransformerFactory.createTransformerThread(context,compile.getErrorStream(),compileError);
    errorProcessorCompile.start();
    lineDirectiveMunger=createPreprocessorOutputTransformerFactory().createTransformerThread(context,preprocess.getInputStream(),compile.getOutputStream());
    lineDirectiveMunger.start();
    int compileStatus=executor.waitForLaunchedProcess(compile).getExitCode();
    int preprocessStatus=executor.waitForLaunchedProcess(preprocess).getExitCode();
    safeCloseProcessor(errorProcessorPreprocess);
    safeCloseProcessor(errorProcessorCompile);
    String preprocessErr=new String(preprocessError.toByteArray());
    if (!preprocessErr.isEmpty()) {
      context.getBuckEventBus().post(createConsoleEvent(context,preprocessorCommand.get().supportsColorsInDiagnostics(),preprocessStatus == 0 ? Level.WARNING : Level.SEVERE,preprocessErr));
    }
    String compileErr=new String(compileError.toByteArray());
    if (!compileErr.isEmpty()) {
      context.getBuckEventBus().post(createConsoleEvent(context,compilerCommand.get().supportsColorsInDiagnostics(),compileStatus == 0 ? Level.WARNING : Level.SEVERE,compileErr));
    }
    if (preprocessStatus != 0) {
      LOG.warn("error %d %s(preprocess) %s: %s",preprocessStatus,operation.toString().toLowerCase(),input,preprocessErr);
    }
    if (compileStatus != 0) {
      LOG.warn("error %d %s(compile) %s: %s",compileStatus,operation.toString().toLowerCase(),input,compileErr);
    }
    if (preprocessStatus != 0) {
      return preprocessStatus;
    }
    if (compileStatus != 0) {
      return compileStatus;
    }
    return 0;
  }
  finally {
    if (preprocess != null) {
      executor.destroyLaunchedProcess(preprocess);
      executor.waitForLaunchedProcess(preprocess);
    }
    if (compile != null) {
      executor.destroyLaunchedProcess(compile);
      executor.waitForLaunchedProcess(compile);
    }
    safeCloseProcessor(errorProcessorPreprocess);
    safeCloseProcessor(errorProcessorCompile);
    safeCloseProcessor(lineDirectiveMunger);
  }
}
