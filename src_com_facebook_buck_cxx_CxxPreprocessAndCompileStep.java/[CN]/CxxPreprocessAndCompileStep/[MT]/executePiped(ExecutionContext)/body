{
  ByteArrayOutputStream preprocessError=new ByteArrayOutputStream();
  ProcessBuilder preprocessBuilder=makeSubprocessBuilder();
  preprocessBuilder.command(makePreprocessCommand());
  if (preprocessorEnvironment.isPresent()) {
    preprocessBuilder.environment().putAll(preprocessorEnvironment.get());
  }
  preprocessBuilder.redirectOutput(ProcessBuilder.Redirect.PIPE);
  ByteArrayOutputStream compileError=new ByteArrayOutputStream();
  ProcessBuilder compileBuilder=makeSubprocessBuilder();
  compileBuilder.command(makeCompileCommand("-",inputType.getPreprocessedLanguage(),false));
  if (compilerEnvironment.isPresent()) {
    compileBuilder.environment().putAll(compilerEnvironment.get());
  }
  compileBuilder.redirectInput(ProcessBuilder.Redirect.PIPE);
  Process preprocess=null;
  Process compile=null;
  LineProcessorThread errorProcessorPreprocess=null;
  LineProcessorThread errorProcessorCompile=null;
  LineProcessorThread lineDirectiveMunger=null;
  CxxErrorTransformerFactory errorStreamTransformerFactory=createErrorTransformerFactory(context);
  try {
    LOG.debug("Running command (pwd=%s): %s",preprocessBuilder.directory(),getDescription(context));
    preprocess=preprocessBuilder.start();
    compile=compileBuilder.start();
    errorProcessorPreprocess=errorStreamTransformerFactory.createTransformerThread(preprocess.getErrorStream(),preprocessError);
    errorProcessorPreprocess.start();
    errorProcessorCompile=errorStreamTransformerFactory.createTransformerThread(compile.getErrorStream(),compileError);
    errorProcessorCompile.start();
    lineDirectiveMunger=new FunctionLineProcessorThread(preprocess.getInputStream(),compile.getOutputStream(),createPreprocessOutputLineProcessor(filesystem.getRootPath()));
    lineDirectiveMunger.start();
    int compileStatus=compile.waitFor();
    int preprocessStatus=preprocess.waitFor();
    safeCloseProcessor(errorProcessorPreprocess);
    safeCloseProcessor(errorProcessorCompile);
    String preprocessErr=new String(preprocessError.toByteArray());
    if (!preprocessErr.isEmpty()) {
      context.getBuckEventBus().post(ConsoleEvent.create(preprocessStatus == 0 ? Level.WARNING : Level.SEVERE,preprocessErr));
    }
    String compileErr=new String(compileError.toByteArray());
    if (!compileErr.isEmpty()) {
      context.getBuckEventBus().post(ConsoleEvent.create(compileStatus == 0 ? Level.WARNING : Level.SEVERE,compileErr));
    }
    if (preprocessStatus != 0) {
      LOG.warn("error %d %s(preprocess) %s: %s",preprocessStatus,operation.toString().toLowerCase(),input,preprocessErr);
    }
    if (compileStatus != 0) {
      LOG.warn("error %d %s(compile) %s: %s",compileStatus,operation.toString().toLowerCase(),input,compileErr);
    }
    if (preprocessStatus != 0) {
      return preprocessStatus;
    }
    if (compileStatus != 0) {
      return compileStatus;
    }
    return 0;
  }
  finally {
    if (preprocess != null) {
      preprocess.destroy();
      preprocess.waitFor();
    }
    if (compile != null) {
      compile.destroy();
      compile.waitFor();
    }
    safeCloseProcessor(errorProcessorPreprocess);
    safeCloseProcessor(errorProcessorCompile);
    safeCloseProcessor(lineDirectiveMunger);
  }
}
