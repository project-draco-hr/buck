{
  try {
    LOG.debug("%s %s -> %s",operation.toString().toLowerCase(),input,output);
    int exitCode;
    if (operation == Operation.PIPED_PREPROCESS_AND_COMPILE) {
      exitCode=executePiped(context);
    }
 else {
      exitCode=executeOther(context);
    }
    if (operation.isPreprocess()) {
      try (InputStream input=context.getProjectFilesystem().newFileInputStream(getDepTemp());BufferedReader reader=new BufferedReader(new InputStreamReader(input));OutputStream output=context.getProjectFilesystem().newFileOutputStream(depFile);BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(output))){
        for (        String prereq : Makefiles.parseMakefile(reader).getRules().get(0).getPrereqs()) {
          Path replacement=replacementPaths.get(Paths.get(prereq));
          if (replacement != null) {
            writer.write(replacement.toString());
            writer.newLine();
          }
        }
      }
     }
    if (exitCode == 0 && operation == Operation.COMPILE_MUNGE_DEBUGINFO) {
      try {
        sanitizer.restoreCompilationDirectory(context.getProjectDirectoryRoot().toAbsolutePath().resolve(output),context.getProjectDirectoryRoot().toAbsolutePath());
      }
 catch (      IOException e) {
        context.logError(e,"error updating compilation directory");
        return 1;
      }
    }
    if (exitCode != 0) {
      LOG.warn("error %d %s %s",exitCode,operation.toString().toLowerCase(),input);
    }
    return exitCode;
  }
 catch (  Exception e) {
    MoreThrowables.propagateIfInterrupt(e);
    context.logError(e,"Build error caused by exception");
    return 1;
  }
}
