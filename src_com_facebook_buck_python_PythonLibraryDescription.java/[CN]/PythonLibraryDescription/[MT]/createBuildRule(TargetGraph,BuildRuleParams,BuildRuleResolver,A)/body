{
  final SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  final Path baseModule=PythonUtil.getBasePath(params.getBuildTarget(),args.baseModule);
  return new PythonLibrary(params,pathResolver,new Function<PythonPlatform,ImmutableMap<Path,SourcePath>>(){
    @Override public ImmutableMap<Path,SourcePath> apply(    PythonPlatform pythonPlatform){
      return ImmutableMap.<Path,SourcePath>builder().putAll(PythonUtil.toModuleMap(params.getBuildTarget(),pathResolver,"srcs",baseModule,args.srcs.asSet())).putAll(PythonUtil.toModuleMap(params.getBuildTarget(),pathResolver,"platformSrcs",baseModule,args.platformSrcs.get().getMatchingValues(pythonPlatform.getFlavor().toString()))).build();
    }
  }
,new Function<PythonPlatform,ImmutableMap<Path,SourcePath>>(){
    @Override public ImmutableMap<Path,SourcePath> apply(    PythonPlatform pythonPlatform){
      return ImmutableMap.<Path,SourcePath>builder().putAll(PythonUtil.toModuleMap(params.getBuildTarget(),pathResolver,"resources",baseModule,args.resources.asSet())).putAll(PythonUtil.toModuleMap(params.getBuildTarget(),pathResolver,"platformResources",baseModule,args.platformResources.get().getMatchingValues(pythonPlatform.getFlavor().toString()))).build();
    }
  }
,args.zipSafe);
}
