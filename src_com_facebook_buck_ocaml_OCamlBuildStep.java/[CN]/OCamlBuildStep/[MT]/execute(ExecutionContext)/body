{
  if (hasGeneratedSources) {
    int genExitCode=generateSources(context);
    if (genExitCode != 0) {
      return genExitCode;
    }
  }
  int depToolExitCode=depToolStep.execute(context);
  if (depToolExitCode != 0) {
    return depToolExitCode;
  }
  ImmutableList<String> sortedInput=sortDependency(depToolStep.getStdout());
  ImmutableList.Builder<String> linkerInputs=ImmutableList.builder();
  int mlCompileExitCode=executeMLCompilation(context,sortedInput,linkerInputs);
  if (mlCompileExitCode != 0) {
    return mlCompileExitCode;
  }
  ImmutableList.Builder<String> bytecodeLinkerInputs=ImmutableList.builder();
  int mlCompileBytecodeExitCode=executeMLCompileBytecode(context,sortedInput,bytecodeLinkerInputs);
  if (mlCompileBytecodeExitCode != 0) {
    return mlCompileBytecodeExitCode;
  }
  ImmutableList.Builder<String> cLinkerInputs=ImmutableList.builder();
  int cCompileExitCode=executeCCompilation(context,cLinkerInputs);
  if (cCompileExitCode != 0) {
    return cCompileExitCode;
  }
  ImmutableList<String> cObjects=cLinkerInputs.build();
  linkerInputs.addAll(cObjects);
  int nativeLinkExitCode=executeLinking(context,linkerInputs.build());
  if (nativeLinkExitCode != 0) {
    return nativeLinkExitCode;
  }
  bytecodeLinkerInputs.addAll(cObjects);
  int bytecodeExitCode=executeBytecodeLinking(context,bytecodeLinkerInputs.build());
  if (bytecodeExitCode != 0) {
    return bytecodeExitCode;
  }
  if (!ocamlContext.isLibrary()) {
    return buildDebugLauncher(context);
  }
 else {
    return 0;
  }
}
