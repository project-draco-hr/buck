{
  if (hasGeneratedSources) {
    int genExitCode=generateSources(context,filesystem.getRootPath());
    if (genExitCode != 0) {
      return genExitCode;
    }
  }
  int depToolExitCode=depToolStep.execute(context);
  if (depToolExitCode != 0) {
    return depToolExitCode;
  }
  ImmutableList<Path> sortedInput=sortDependency(depToolStep.getStdout());
  ImmutableList.Builder<Path> nativeLinkerInputs=ImmutableList.builder();
  if (!bytecodeOnly) {
    int mlCompileNativeExitCode=executeMLNativeCompilation(context,filesystem.getRootPath(),sortedInput,nativeLinkerInputs);
    if (mlCompileNativeExitCode != 0) {
      return mlCompileNativeExitCode;
    }
  }
  ImmutableList.Builder<Path> bytecodeLinkerInputs=ImmutableList.builder();
  int mlCompileBytecodeExitCode=executeMLBytecodeCompilation(context,filesystem.getRootPath(),sortedInput,bytecodeLinkerInputs);
  if (mlCompileBytecodeExitCode != 0) {
    return mlCompileBytecodeExitCode;
  }
  ImmutableList.Builder<Path> cLinkerInputs=ImmutableList.builder();
  int cCompileExitCode=executeCCompilation(context,cLinkerInputs);
  if (cCompileExitCode != 0) {
    return cCompileExitCode;
  }
  ImmutableList<Path> cObjects=cLinkerInputs.build();
  if (!bytecodeOnly) {
    nativeLinkerInputs.addAll(cObjects);
    int nativeLinkExitCode=executeNativeLinking(context,nativeLinkerInputs.build());
    if (nativeLinkExitCode != 0) {
      return nativeLinkExitCode;
    }
  }
  bytecodeLinkerInputs.addAll(cObjects);
  int bytecodeLinkExitCode=executeBytecodeLinking(context,bytecodeLinkerInputs.build());
  if (bytecodeLinkExitCode != 0) {
    return bytecodeLinkExitCode;
  }
  if (!ocamlContext.isLibrary()) {
    Step debugLauncher=new OCamlDebugLauncherStep(filesystem,resolver,new OCamlDebugLauncherStep.Args(ocamlContext.getOcamlDebug().get(),ocamlContext.getBytecodeOutput(),ocamlContext.getOCamlInput(),ocamlContext.getBytecodeIncludeFlags()));
    return debugLauncher.execute(context);
  }
 else {
    return 0;
  }
}
