{
  if (hasGeneratedSources) {
    StepExecutionResult genExecutionResult=generateSources(context,filesystem.getRootPath());
    if (!genExecutionResult.isSuccess()) {
      return genExecutionResult;
    }
  }
  StepExecutionResult depToolExecutionResult=depToolStep.execute(context);
  if (!depToolExecutionResult.isSuccess()) {
    return depToolExecutionResult;
  }
  ImmutableList<Path> sortedInput=sortDependency(depToolStep.getStdout());
  ImmutableList.Builder<Path> nativeLinkerInputs=ImmutableList.builder();
  if (!bytecodeOnly) {
    StepExecutionResult mlCompileNativeExecutionResult=executeMLNativeCompilation(context,filesystem.getRootPath(),sortedInput,nativeLinkerInputs);
    if (!mlCompileNativeExecutionResult.isSuccess()) {
      return mlCompileNativeExecutionResult;
    }
  }
  ImmutableList.Builder<Path> bytecodeLinkerInputs=ImmutableList.builder();
  StepExecutionResult mlCompileBytecodeExecutionResult=executeMLBytecodeCompilation(context,filesystem.getRootPath(),sortedInput,bytecodeLinkerInputs);
  if (!mlCompileBytecodeExecutionResult.isSuccess()) {
    return mlCompileBytecodeExecutionResult;
  }
  ImmutableList.Builder<Path> cLinkerInputs=ImmutableList.builder();
  StepExecutionResult cCompileExecutionResult=executeCCompilation(context,cLinkerInputs);
  if (!cCompileExecutionResult.isSuccess()) {
    return cCompileExecutionResult;
  }
  ImmutableList<Path> cObjects=cLinkerInputs.build();
  if (!bytecodeOnly) {
    nativeLinkerInputs.addAll(cObjects);
    StepExecutionResult nativeLinkExecutionResult=executeNativeLinking(context,nativeLinkerInputs.build());
    if (!nativeLinkExecutionResult.isSuccess()) {
      return nativeLinkExecutionResult;
    }
  }
  bytecodeLinkerInputs.addAll(cObjects);
  StepExecutionResult bytecodeLinkExecutionResult=executeBytecodeLinking(context,bytecodeLinkerInputs.build());
  if (!bytecodeLinkExecutionResult.isSuccess()) {
    return bytecodeLinkExecutionResult;
  }
  if (!ocamlContext.isLibrary()) {
    Step debugLauncher=new OCamlDebugLauncherStep(filesystem,resolver,new OCamlDebugLauncherStep.Args(ocamlContext.getOcamlDebug().get(),ocamlContext.getBytecodeOutput(),ocamlContext.getOCamlInput(),ocamlContext.getBytecodeIncludeFlags()));
    return debugLauncher.execute(context);
  }
 else {
    return StepExecutionResult.SUCCESS;
  }
}
