{
  ImmutableList.Builder<String> compileFlags=ImmutableList.builder();
  CxxPreprocessorInput cxxPreprocessorInput=ocamlContext.getCxxPreprocessorInput();
  for (  Path includes : cxxPreprocessorInput.getIncludeRoots()) {
    compileFlags.add("-ccopt","-I" + includes.toString());
  }
  for (  Path cSrc : ocamlContext.getCInput()) {
    Path outputPath=ocamlContext.getCOutput(cSrc);
    linkerInputs.add(outputPath.toString());
    Step compileStep=new OCamlCCompileStep(cCompiler,ocamlContext.getOcamlCompiler(),outputPath,cSrc,compileFlags.build());
    int compileExitCode=compileStep.execute(context);
    if (compileExitCode != 0) {
      return compileExitCode;
    }
  }
  return 0;
}
