{
  ImmutableList.Builder<String> cCompileFlags=ImmutableList.builder();
  cCompileFlags.addAll(ocamlContext.getCCompileFlags());
  cCompileFlags.addAll(ocamlContext.getCommonCFlags());
  CxxPreprocessorInput cxxPreprocessorInput=ocamlContext.getCxxPreprocessorInput();
  for (  SourcePath cSrc : ocamlContext.getCInput()) {
    Path outputPath=ocamlContext.getCOutput(resolver.getAbsolutePath(cSrc));
    linkerInputs.add(outputPath.toString());
    Step compileStep=new OCamlCCompileStep(resolver,filesystem.getRootPath(),new OCamlCCompileStep.Args(cCompilerEnvironment,cCompiler,ocamlContext.getOcamlCompiler().get(),outputPath,cSrc,cCompileFlags.build(),ImmutableMap.copyOf(cxxPreprocessorInput.getIncludes().getNameToPathMap())));
    int compileExitCode=compileStep.execute(context);
    if (compileExitCode != 0) {
      return compileExitCode;
    }
  }
  return 0;
}
