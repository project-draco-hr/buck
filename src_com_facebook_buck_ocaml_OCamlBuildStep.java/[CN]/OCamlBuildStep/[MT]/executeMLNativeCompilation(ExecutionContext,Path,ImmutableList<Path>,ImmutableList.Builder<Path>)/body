{
  MakeCleanDirectoryStep mkDir=new MakeCleanDirectoryStep(filesystem,ocamlContext.getCompileNativeOutputDir());
  StepExecutionResult mkDirExecutionResult=mkDir.execute(context);
  if (!mkDirExecutionResult.isSuccess()) {
    return mkDirExecutionResult;
  }
  for (  Path inputOutput : sortedInput) {
    String inputFileName=inputOutput.getFileName().toString();
    String outputFileName=inputFileName.replaceFirst(OCamlCompilables.OCAML_ML_REGEX,OCamlCompilables.OCAML_CMX).replaceFirst(OCamlCompilables.OCAML_MLI_REGEX,OCamlCompilables.OCAML_CMI);
    Path outputPath=ocamlContext.getCompileNativeOutputDir().resolve(outputFileName);
    if (!outputFileName.endsWith(OCamlCompilables.OCAML_CMI)) {
      linkerInputs.add(outputPath);
    }
    final ImmutableList<String> compileFlags=getCompileFlags(false,false);
    Step compileStep=new OCamlMLCompileStep(workingDirectory,resolver,new OCamlMLCompileStep.Args(filesystem.getAbsolutifier(),cCompilerEnvironment,cCompiler,ocamlContext.getOcamlCompiler().get(),outputPath,inputOutput,compileFlags));
    StepExecutionResult compileExecutionResult=compileStep.execute(context);
    if (!compileExecutionResult.isSuccess()) {
      return compileExecutionResult;
    }
  }
  return StepExecutionResult.SUCCESS;
}
