{
  MakeCleanDirectoryStep mkDir=new MakeCleanDirectoryStep(ocamlContext.getGeneratedSourceDir());
  int mkDirExitCode=mkDir.execute(context);
  if (mkDirExitCode != 0) {
    return mkDirExitCode;
  }
  for (  Path yaccSource : ocamlContext.getYaccInput()) {
    Path output=ocamlContext.getYaccOutput(ImmutableSet.of(yaccSource)).get(0);
    OCamlYaccStep yaccStep=new OCamlYaccStep(new OCamlYaccStep.Args(ocamlContext.getYaccCompiler(),output,yaccSource));
    int yaccExitCode=yaccStep.execute(context);
    if (yaccExitCode != 0) {
      return yaccExitCode;
    }
  }
  for (  Path lexSource : ocamlContext.getLexInput()) {
    Path output=ocamlContext.getLexOutput(ImmutableSet.of(lexSource)).get(0);
    OCamlLexStep lexStep=new OCamlLexStep(new OCamlLexStep.Args(ocamlContext.getLexCompiler(),output,lexSource));
    int lexExitCode=lexStep.execute(context);
    if (lexExitCode != 0) {
      return lexExitCode;
    }
  }
  return 0;
}
