{
  ImmutableList.Builder<String> cCompileFlags=ImmutableList.builder();
  cCompileFlags.addAll(ocamlContext.getCCompileFlags());
  cCompileFlags.addAll(ocamlContext.getCommonCFlags());
  CxxPreprocessorInput cxxPreprocessorInput=ocamlContext.getCxxPreprocessorInput();
  for (  SourcePath cSrc : ocamlContext.getCInput()) {
    Path outputPath=ocamlContext.getCOutput(resolver.getAbsolutePath(cSrc));
    linkerInputs.add(outputPath);
    Step compileStep=new OCamlCCompileStep(resolver,filesystem.getRootPath(),new OCamlCCompileStep.Args(cCompilerEnvironment,cCompiler,ocamlContext.getOcamlCompiler().get(),ocamlContext.getOCamlInteropIncludesDir(),outputPath,cSrc,cCompileFlags.build(),cxxPreprocessorInput.getIncludes()));
    StepExecutionResult compileExecutionResult=compileStep.execute(context);
    if (!compileExecutionResult.isSuccess()) {
      return compileExecutionResult;
    }
  }
  return StepExecutionResult.SUCCESS;
}
