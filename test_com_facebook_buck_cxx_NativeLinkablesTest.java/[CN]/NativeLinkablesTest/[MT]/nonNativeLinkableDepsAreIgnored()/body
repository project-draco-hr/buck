{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  FakeNativeLinkable c=new FakeNativeLinkable("//:c",ImmutableList.<NativeLinkable>of(),ImmutableList.<NativeLinkable>of(),NativeLinkable.Linkage.ANY,NativeLinkableInput.builder().addAllArgs(StringArg.from("c")).build(),ImmutableMap.<String,SourcePath>of());
  FakeBuildRule b=new FakeBuildRule("//:b",pathResolver,c);
  FakeNativeLinkable a=new FakeNativeLinkable("//:a",ImmutableList.<NativeLinkable>of(),ImmutableList.<NativeLinkable>of(),NativeLinkable.Linkage.ANY,NativeLinkableInput.builder().addAllArgs(StringArg.from("a")).build(),ImmutableMap.<String,SourcePath>of(),b);
  assertThat(a.getDeps(),Matchers.hasItem(b));
  assertThat(NativeLinkables.getNativeLinkables(CxxPlatformUtils.DEFAULT_PLATFORM,ImmutableList.of(a),Linker.LinkableDepType.STATIC).keySet(),Matchers.not(Matchers.hasItem(c.getBuildTarget())));
}
