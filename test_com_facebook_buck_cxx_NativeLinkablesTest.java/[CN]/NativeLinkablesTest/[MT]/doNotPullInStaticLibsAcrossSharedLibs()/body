{
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver());
  BuildRule d=new FakeNativeLinkable("//:d",resolver,NativeLinkableInput.builder().addArgs("d").build(),NativeLinkable.Linkage.ANY,ImmutableMap.<String,SourcePath>of());
  BuildRule c=new FakeNativeLinkable("//:c",resolver,NativeLinkableInput.builder().addArgs("c").build(),NativeLinkable.Linkage.STATIC,ImmutableMap.<String,SourcePath>of(),d);
  BuildRule b=new FakeNativeLinkable("//:b",resolver,NativeLinkableInput.builder().addArgs("b").build(),NativeLinkable.Linkage.ANY,ImmutableMap.<String,SourcePath>of(),c);
  BuildRule a=new FakeNativeLinkable("//:a",resolver,NativeLinkableInput.builder().addArgs("a").build(),NativeLinkable.Linkage.ANY,ImmutableMap.<String,SourcePath>of(),b);
  NativeLinkableInput inputForTop=NativeLinkables.getTransitiveNativeLinkableInput(CxxPlatformUtils.DEFAULT_PLATFORM,ImmutableList.of(a),Linker.LinkableDepType.SHARED,false);
  assertThat(inputForTop.getArgs(),Matchers.containsInAnyOrder("a","b","d"));
  assertThat(inputForTop.getArgs(),Matchers.not(Matchers.contains("c")));
  NativeLinkableInput inputForB=NativeLinkables.getTransitiveNativeLinkableInput(CxxPlatformUtils.DEFAULT_PLATFORM,ImmutableList.of(c),Linker.LinkableDepType.SHARED,false);
  assertThat(inputForB.getArgs(),Matchers.containsInAnyOrder("c","d"));
}
