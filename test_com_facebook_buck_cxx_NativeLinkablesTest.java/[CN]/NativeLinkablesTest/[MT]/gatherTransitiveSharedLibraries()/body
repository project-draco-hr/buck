{
  FakeNativeLinkable c=new FakeNativeLinkable("//:c",ImmutableList.<NativeLinkable>of(),ImmutableList.<NativeLinkable>of(),NativeLinkable.Linkage.ANY,NativeLinkableInput.builder().build(),ImmutableMap.<String,SourcePath>of("libc.so",new TestSourcePath("libc.so")));
  FakeNativeLinkable b=new FakeNativeLinkable("//:b",ImmutableList.of(c),ImmutableList.<NativeLinkable>of(),NativeLinkable.Linkage.STATIC,NativeLinkableInput.builder().build(),ImmutableMap.<String,SourcePath>of("libb.so",new TestSourcePath("libb.so")));
  FakeNativeLinkable a=new FakeNativeLinkable("//:a",ImmutableList.of(b),ImmutableList.<NativeLinkable>of(),NativeLinkable.Linkage.ANY,NativeLinkableInput.builder().build(),ImmutableMap.<String,SourcePath>of("liba.so",new TestSourcePath("liba.so")));
  ImmutableSortedMap<String,SourcePath> sharedLibs=NativeLinkables.getTransitiveSharedLibraries(TargetGraph.EMPTY,CxxPlatformUtils.DEFAULT_PLATFORM,ImmutableList.of(a),Predicates.instanceOf(NativeLinkable.class));
  assertThat(sharedLibs,Matchers.equalTo(ImmutableSortedMap.<String,SourcePath>of("liba.so",new TestSourcePath("liba.so"),"libc.so",new TestSourcePath("libc.so"))));
}
