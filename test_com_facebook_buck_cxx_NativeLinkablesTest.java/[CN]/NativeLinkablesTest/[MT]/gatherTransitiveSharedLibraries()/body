{
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver());
  BuildRule c=new FakeNativeLinkable("//:c",resolver,NativeLinkableInput.builder().build(),NativeLinkable.Linkage.ANY,ImmutableMap.<String,SourcePath>of("libc.so",new TestSourcePath("libc.so")));
  BuildRule b=new FakeNativeLinkable("//:b",resolver,NativeLinkableInput.builder().build(),NativeLinkable.Linkage.STATIC,ImmutableMap.<String,SourcePath>of("libb.so",new TestSourcePath("libb.so")),c);
  BuildRule a=new FakeNativeLinkable("//:a",resolver,NativeLinkableInput.builder().build(),NativeLinkable.Linkage.ANY,ImmutableMap.<String,SourcePath>of("liba.so",new TestSourcePath("liba.so")),b);
  ImmutableSortedMap<String,SourcePath> sharedLibs=NativeLinkables.getTransitiveSharedLibraries(TargetGraph.EMPTY,CxxPlatformUtils.DEFAULT_PLATFORM,ImmutableList.of(a),Linker.LinkableDepType.SHARED,Predicates.instanceOf(NativeLinkable.class));
  assertThat(sharedLibs,Matchers.equalTo(ImmutableSortedMap.<String,SourcePath>of("liba.so",new TestSourcePath("liba.so"),"libc.so",new TestSourcePath("libc.so"))));
}
