{
  String name="example.jar";
  File jarFile=tmp.newFile(name);
  try (JarOutputStream out=new JarOutputStream(new BufferedOutputStream(new FileOutputStream(jarFile)))){
    out.putNextEntry(new ZipEntry("com/example/Foo.class"));
    out.closeEntry();
    out.putNextEntry(new ZipEntry("com/example/Bar.class"));
    out.closeEntry();
    out.putNextEntry(new ZipEntry("com/example/not_a_class.png"));
    out.closeEntry();
    out.putNextEntry(new ZipEntry("com/example/subpackage/Baz.class"));
    out.closeEntry();
  }
   AccumulateClassNamesStep accumulateClassNamesStep=new AccumulateClassNamesStep(Optional.of(Paths.get(name)),Paths.get("output.txt"));
  ExecutionContext context=TestExecutionContext.newBuilder().setProjectFilesystem(new ProjectFilesystem(tmp.getRoot().toPath())).build();
  accumulateClassNamesStep.execute(context);
  String contents=Files.toString(new File(tmp.getRoot(),"output.txt"),Charsets.UTF_8);
  String separator=AccumulateClassNamesStep.CLASS_NAME_HASH_CODE_SEPARATOR;
  assertEquals("Verify that the contents are sorted alphabetically and ignore non-.class files.",Joiner.on('\n').join("com/example/Bar" + separator + SHA1_FOR_EMPTY_STRING,"com/example/Foo" + separator + SHA1_FOR_EMPTY_STRING,"com/example/subpackage/Baz" + separator + SHA1_FOR_EMPTY_STRING) + '\n',contents);
}
