{
  String name="dir";
  tmp.newFolder(name);
  tmp.newFolder("dir/com");
  tmp.newFolder("dir/com/example");
  tmp.newFolder("dir/com/example/subpackage");
  tmp.newFile("dir/com/example/Foo.class");
  tmp.newFile("dir/com/example/Bar.class");
  tmp.newFile("dir/com/example/not_a_class.png");
  tmp.newFile("dir/com/example/subpackage/Baz.class");
  AccumulateClassNamesStep accumulateClassNamesStep=new AccumulateClassNamesStep(Optional.of(Paths.get(name)),Paths.get("output.txt"));
  ExecutionContext context=TestExecutionContext.newBuilder().setProjectFilesystem(new ProjectFilesystem(tmp.getRoot().toPath())).build();
  accumulateClassNamesStep.execute(context);
  String contents=Files.toString(new File(tmp.getRoot(),"output.txt"),Charsets.UTF_8);
  String separator=AccumulateClassNamesStep.CLASS_NAME_HASH_CODE_SEPARATOR;
  assertEquals("Verify that the contents are sorted alphabetically and ignore non-.class files.",Joiner.on('\n').join("com/example/Bar" + separator + SHA1_FOR_EMPTY_STRING,"com/example/Foo" + separator + SHA1_FOR_EMPTY_STRING,"com/example/subpackage/Baz" + separator + SHA1_FOR_EMPTY_STRING) + '\n',contents);
}
