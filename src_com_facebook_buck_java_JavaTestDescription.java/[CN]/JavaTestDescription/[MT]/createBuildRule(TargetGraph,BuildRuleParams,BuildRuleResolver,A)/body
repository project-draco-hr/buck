{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  JavacOptions.Builder javacOptionsBuilder=JavaLibraryDescription.getJavacOptions(pathResolver,args,templateOptions);
  AnnotationProcessingParams annotationParams=args.buildAnnotationProcessingParams(params.getBuildTarget(),params.getProjectFilesystem(),resolver);
  javacOptionsBuilder.setAnnotationProcessingParams(annotationParams);
  JavacOptions javacOptions=javacOptionsBuilder.build();
  CxxLibraryEnhancement cxxLibraryEnhancement=new CxxLibraryEnhancement(targetGraph,params,args.useCxxLibraries,pathResolver,cxxPlatform);
  params=cxxLibraryEnhancement.updatedParams;
  return new JavaTest(params.appendExtraDeps(Iterables.concat(BuildRules.getExportedRules(Iterables.concat(params.getDeclaredDeps().get(),resolver.getAllRules(args.providedDeps.get()))),pathResolver.filterBuildRuleInputs(javacOptions.getInputs(pathResolver)))),pathResolver,args.srcs.get(),JavaLibraryDescription.validateResources(pathResolver,args,params.getProjectFilesystem()),args.labels.get(),args.contacts.get(),args.proguardConfig.transform(SourcePaths.toSourcePath(params.getProjectFilesystem())),ImmutableSet.<Path>of(),args.testType.or(TestType.JUNIT),javacOptions,args.vmArgs.get(),cxxLibraryEnhancement.nativeLibsEnvironment,validateAndGetSourcesUnderTest(args.sourceUnderTest.get(),params.getBuildTarget(),resolver),args.resourcesRoot,args.mavenCoords,testRuleTimeoutMs,args.getRunTestSeparately(),args.stdOutLogLevel,args.stdErrLogLevel);
}
