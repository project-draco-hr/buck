{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  JavacOptions.Builder javacOptionsBuilder=JavaLibraryDescription.getJavacOptions(resolver,args,templateOptions);
  AnnotationProcessingParams annotationParams=args.buildAnnotationProcessingParams(params.getBuildTarget(),params.getProjectFilesystem(),resolver);
  javacOptionsBuilder.setAnnotationProcessingParams(annotationParams);
  JavacOptions javacOptions=javacOptionsBuilder.build();
  return new JavaTest(params.appendExtraDeps(Iterables.concat(BuildRules.getExportedRules(Iterables.concat(params.getDeclaredDeps(),resolver.getAllRules(args.providedDeps.get()))),pathResolver.filterBuildRuleInputs(javacOptions.getInputs()))),pathResolver,args.srcs.get(),JavaLibraryDescription.validateResources(pathResolver,args,params.getProjectFilesystem()),args.labels.get(),args.contacts.get(),args.proguardConfig,ImmutableSet.<Path>of(),args.testType.or(TestType.JUNIT),javacOptions,args.vmArgs.get(),validateAndGetSourcesUnderTest(args.sourceUnderTest.get(),params.getBuildTarget(),resolver),args.resourcesRoot,testRuleTimeoutMs,args.getRunTestSeparately());
}
