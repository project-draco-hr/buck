{
  ImmutableList.Builder<String> args=ImmutableList.builder();
  AndroidPlatformTarget androidPlatformTarget=context.getAndroidPlatformTarget();
  Joiner pathJoiner=Joiner.on(':');
  String proguardJar=androidPlatformTarget.getProguardJar().getAbsolutePath();
  args.add("java").add("-Xmx1024M").add("-jar").add(proguardJar);
  if (useAndroidProguardConfigWithOptimizations) {
    args.add("-include").add(androidPlatformTarget.getOptimizedProguardConfig().getAbsolutePath());
  }
 else {
    args.add("-include").add(androidPlatformTarget.getProguardConfig().getAbsolutePath());
  }
  for (  String proguardConfig : customProguardConfigs) {
    args.add("-include").add(proguardConfig);
  }
  args.add("-include").add(generatedProGuardConfig);
  for (  Map.Entry<String,String> inputOutputEntry : inputAndOutputEntries.entrySet()) {
    args.add("-injars").add(inputOutputEntry.getKey());
    args.add("-outjars").add(inputOutputEntry.getValue());
  }
  Iterable<String> bootclasspathPaths=Iterables.transform(androidPlatformTarget.getBootclasspathEntries(),Functions.FILE_TO_ABSOLUTE_PATH);
  Iterable<String> libraryJars=Iterables.concat(bootclasspathPaths,additionalLibraryJarsForProguard);
  args.add("-libraryjars").add(pathJoiner.join(libraryJars));
  args.add("-dump").add(proguardDirectory + "/dump.txt");
  args.add("-printseeds").add(proguardDirectory + "/seeds.txt");
  args.add("-printusage").add(proguardDirectory + "/usage.txt");
  args.add("-printmapping").add(proguardDirectory + "/mapping.txt");
  return args.build();
}
