{
  final SourcePath inputToCompareToOutput;
  if (arg.gwtJar.isPresent()) {
    inputToCompareToOutput=arg.gwtJar.get();
  }
 else   if (arg.sourceJar.isPresent()) {
    inputToCompareToOutput=arg.sourceJar.get();
  }
 else {
    inputToCompareToOutput=arg.binaryJar;
  }
  final ImmutableCollection<Path> inputsToCompareToOutput=SourcePaths.filterInputsToCompareToOutput(Collections.singleton(inputToCompareToOutput));
  final Path pathToExistingJarFile=inputToCompareToOutput.resolve();
  BuildRule buildRule=new AbstractBuildRule(params){
    @Override protected Iterable<Path> getInputsToCompareToOutput(){
      return inputsToCompareToOutput;
    }
    @Override protected Builder appendDetailsToRuleKey(    Builder builder){
      return builder;
    }
    @Override public ImmutableList<Step> getBuildSteps(    BuildContext context,    BuildableContext buildableContext){
      buildableContext.recordArtifact(getPathToOutputFile());
      return ImmutableList.of();
    }
    @Override public Path getPathToOutputFile(){
      return pathToExistingJarFile;
    }
  }
;
  return buildRule;
}
