{
  final Path pathToExistingJarFile;
  final Iterable<SourcePath> inputsToCompareToOutput;
  if (arg.gwtJar.isPresent()) {
    inputsToCompareToOutput=Collections.singleton(arg.gwtJar.get());
    pathToExistingJarFile=arg.gwtJar.get().resolve();
  }
 else   if (arg.sourceJar.isPresent()) {
    inputsToCompareToOutput=ImmutableSet.of();
    pathToExistingJarFile=arg.sourceJar.get();
  }
 else {
    inputsToCompareToOutput=ImmutableSet.of();
    pathToExistingJarFile=arg.binaryJar;
  }
  Buildable buildable=new AbstractBuildable(){
    @Override public Collection<Path> getInputsToCompareToOutput(){
      return SourcePaths.filterInputsToCompareToOutput(inputsToCompareToOutput);
    }
    @Override public List<Step> getBuildSteps(    BuildContext context,    BuildableContext buildableContext){
      buildableContext.recordArtifact(getPathToOutputFile());
      return ImmutableList.of();
    }
    @Override public Builder appendDetailsToRuleKey(    Builder builder){
      return builder;
    }
    @Override public Path getPathToOutputFile(){
      return pathToExistingJarFile;
    }
  }
;
  return buildable;
}
