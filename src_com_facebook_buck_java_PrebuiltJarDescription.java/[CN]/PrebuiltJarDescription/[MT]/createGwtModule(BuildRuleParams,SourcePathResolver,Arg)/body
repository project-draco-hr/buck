{
  final SourcePath inputToCompareToOutput;
  if (arg.gwtJar.isPresent()) {
    inputToCompareToOutput=arg.gwtJar.get();
  }
 else   if (arg.sourceJar.isPresent()) {
    inputToCompareToOutput=arg.sourceJar.get();
  }
 else {
    inputToCompareToOutput=arg.binaryJar;
  }
  ImmutableCollection<SourcePath> inputsToCompareToOutput=ImmutableSet.of(inputToCompareToOutput);
  final Path pathToExistingJarFile=resolver.getPath(inputToCompareToOutput);
class ExistingOuputs extends AbstractBuildRule {
    @AddToRuleKey private final ImmutableCollection<SourcePath> inputs;
    protected ExistingOuputs(    BuildRuleParams buildRuleParams,    SourcePathResolver resolver,    ImmutableCollection<SourcePath> inputs){
      super(buildRuleParams,resolver);
      this.inputs=inputs;
    }
    @Override protected ImmutableCollection<Path> getInputsToCompareToOutput(){
      return ImmutableSet.of();
    }
    @Override protected Builder appendDetailsToRuleKey(    Builder builder){
      return builder;
    }
    @Override public ImmutableList<Step> getBuildSteps(    BuildContext context,    BuildableContext buildableContext){
      buildableContext.recordArtifact(getPathToOutputFile());
      return ImmutableList.of();
    }
    @Override public Path getPathToOutputFile(){
      return pathToExistingJarFile;
    }
  }
  ;
  return new ExistingOuputs(params,resolver,inputsToCompareToOutput);
}
