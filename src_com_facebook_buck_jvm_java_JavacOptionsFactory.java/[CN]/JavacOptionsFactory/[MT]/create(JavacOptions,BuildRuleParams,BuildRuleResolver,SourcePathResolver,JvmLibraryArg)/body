{
  if ((jvmLibraryArg.source.isPresent() || jvmLibraryArg.target.isPresent()) && jvmLibraryArg.javaVersion.isPresent()) {
    throw new HumanReadableException("Please set either source and target or java_version.");
  }
  JavacOptions.Builder builder=JavacOptions.builder(defaultOptions);
  if (jvmLibraryArg.javaVersion.isPresent()) {
    builder.setSourceLevel(jvmLibraryArg.javaVersion.get());
    builder.setTargetLevel(jvmLibraryArg.javaVersion.get());
  }
  if (jvmLibraryArg.source.isPresent()) {
    builder.setSourceLevel(jvmLibraryArg.source.get());
  }
  if (jvmLibraryArg.target.isPresent()) {
    builder.setTargetLevel(jvmLibraryArg.target.get());
  }
  if (jvmLibraryArg.extraArguments.isPresent()) {
    builder.addAllExtraArguments(jvmLibraryArg.extraArguments.get());
  }
  if (jvmLibraryArg.removeClasses.isPresent()) {
    builder.addAllClassesToRemoveFromJar(jvmLibraryArg.removeClasses.get());
  }
  if (jvmLibraryArg.compiler.isPresent()) {
    Either<BuiltInJavac,SourcePath> either=jvmLibraryArg.compiler.get();
    if (either.isRight()) {
      SourcePath sourcePath=either.getRight();
      Optional<BuildRule> possibleRule=pathResolver.getRule(sourcePath);
      if (possibleRule.isPresent()) {
        BuildRule rule=possibleRule.get();
        if (rule instanceof PrebuiltJar) {
          builder.setJavacJarPath(new BuildTargetSourcePath(rule.getBuildTarget()));
        }
 else {
          throw new HumanReadableException("Only prebuilt_jar targets can be used as a javac");
        }
      }
 else {
        builder.setJavacPath(pathResolver.getAbsolutePath(sourcePath));
      }
    }
  }
 else {
    if (jvmLibraryArg.javac.isPresent() || jvmLibraryArg.javacJar.isPresent()) {
      if (jvmLibraryArg.javac.isPresent() && jvmLibraryArg.javacJar.isPresent()) {
        throw new HumanReadableException("Cannot set both javac and javacjar");
      }
      builder.setJavacPath(jvmLibraryArg.javac);
      builder.setJavacJarPath(jvmLibraryArg.javacJar);
    }
  }
  AnnotationProcessingParams annotationParams=jvmLibraryArg.buildAnnotationProcessingParams(params.getBuildTarget(),params.getProjectFilesystem(),resolver);
  builder.setAnnotationProcessingParams(annotationParams);
  return builder.build();
}
