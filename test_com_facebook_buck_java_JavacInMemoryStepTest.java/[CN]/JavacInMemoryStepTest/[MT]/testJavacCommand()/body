{
  ExecutionContext context=ExecutionContext.builder().setProjectFilesystem(new ProjectFilesystem(new File(".")){
    @Override public Function<Path,Path> getAbsolutifier(){
      return IdentityPathAbsolutifier.getIdentityAbsolutifier();
    }
  }
).setConsole(new TestConsole()).setEventBus(BuckEventBusFactory.newInstance()).setPlatform(Platform.detect()).build();
  JavacInMemoryStep firstOrder=createTestStep(BuildDependencies.FIRST_ORDER_ONLY);
  JavacInMemoryStep warn=createTestStep(BuildDependencies.WARN_ON_TRANSITIVE);
  JavacInMemoryStep transitive=createTestStep(BuildDependencies.TRANSITIVE);
  assertEquals(String.format("javac -target %s -source %s -g -d . -classpath foo.jar @%s",TARGETED_JAVA_VERSION,TARGETED_JAVA_VERSION,PATH_TO_SRCS_LIST),firstOrder.getDescription(context));
  assertEquals(String.format("javac -target %s -source %s -g -d . -classpath foo.jar @%s",TARGETED_JAVA_VERSION,TARGETED_JAVA_VERSION,PATH_TO_SRCS_LIST),warn.getDescription(context));
  assertEquals(String.format("javac -target %s -source %s -g -d . -classpath bar.jar%sfoo.jar @%s",TARGETED_JAVA_VERSION,TARGETED_JAVA_VERSION,File.pathSeparator,PATH_TO_SRCS_LIST),transitive.getDescription(context));
}
