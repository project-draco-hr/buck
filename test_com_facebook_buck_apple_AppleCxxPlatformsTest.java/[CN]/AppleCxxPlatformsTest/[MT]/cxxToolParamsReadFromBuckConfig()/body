{
  AppleSdkPaths appleSdkPaths=AppleSdkPaths.builder().setDeveloperPath(Paths.get(".")).addToolchainPaths(Paths.get("Toolchains/XcodeDefault.xctoolchain")).setPlatformPath(Paths.get("Platforms/iPhoneOS.platform")).setSdkPath(Paths.get("Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS8.0.sdk")).build();
  ImmutableSet<Path> paths=ImmutableSet.<Path>builder().add(Paths.get("Toolchains/XcodeDefault.xctoolchain/usr/bin/clang")).add(Paths.get("Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++")).add(Paths.get("Toolchains/XcodeDefault.xctoolchain/usr/bin/dsymutil")).add(Paths.get("Toolchains/XcodeDefault.xctoolchain/usr/bin/lipo")).add(Paths.get("Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib")).add(Paths.get("Toolchains/XcodeDefault.xctoolchain/usr/bin/strip")).add(Paths.get("Toolchains/XcodeDefault.xctoolchain/usr/bin/nm")).add(Paths.get("Platforms/iPhoneOS.platform/Developer/usr/bin/libtool")).add(Paths.get("Platforms/iPhoneOS.platform/Developer/usr/bin/ar")).add(Paths.get("usr/bin/actool")).add(Paths.get("usr/bin/ibtool")).add(Paths.get("usr/bin/lldb")).add(Paths.get("usr/bin/xctest")).add(Paths.get("Tools/otest")).build();
  AppleToolchain toolchain=AppleToolchain.builder().setIdentifier("com.apple.dt.XcodeDefault").setPath(Paths.get("Toolchains/XcodeDefault.xctoolchain")).setVersion("1").build();
  AppleSdk targetSdk=AppleSdk.builder().setApplePlatform(ApplePlatform.IPHONEOS).setName("iphoneos8.0").setVersion("8.0").setToolchains(ImmutableList.of(toolchain)).build();
  AppleCxxPlatform appleCxxPlatform=AppleCxxPlatforms.buildWithExecutableChecker(targetSdk,"7.0","armv7",appleSdkPaths,FakeBuckConfig.builder().setSections(ImmutableMap.of("cxx",ImmutableMap.of("cflags","-std=gnu11","cppflags","-DCTHING","cxxflags","-std=c++11","cxxppflags","-DCXXTHING"))).build(),new FakeExecutableFinder(paths));
  CxxPlatform cxxPlatform=appleCxxPlatform.getCxxPlatform();
  assertThat(cxxPlatform.getCflags(),hasItem("-std=gnu11"));
  assertThat(cxxPlatform.getCppflags(),hasItems("-DCTHING"));
  assertThat(cxxPlatform.getCxxflags(),hasItem("-std=c++11"));
  assertThat(cxxPlatform.getCxxppflags(),hasItems("-DCXXTHING"));
}
