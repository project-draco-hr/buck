{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  String source="source.cpp";
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(FakeFileHashCache.createFromStrings(ImmutableMap.<String,String>builder().put("source.cpp",Strings.repeat("a",40)).build()),pathResolver);
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  ImmutableMap.Builder<Flavor,RuleKey> ruleKeys=ImmutableMap.builder();
  for (  Map.Entry<Flavor,AppleCxxPlatform> entry : cxxPlatforms.entrySet()) {
    CxxSourceRuleFactory cxxSourceRuleFactory=new CxxSourceRuleFactory(new FakeBuildRuleParamsBuilder(target).build(),resolver,pathResolver,entry.getValue().getCxxPlatform(),ImmutableList.<CxxPreprocessorInput>of(),ImmutableList.<String>of(),Optional.<SourcePath>absent(),CxxSourceRuleFactory.PicType.PIC);
    CxxPreprocessAndCompile rule;
switch (operation) {
case PREPROCESS_AND_COMPILE:
      rule=cxxSourceRuleFactory.createPreprocessAndCompileBuildRule(resolver,source,CxxSource.of(CxxSource.Type.CXX,new FakeSourcePath(source),ImmutableList.<String>of()),CxxPreprocessMode.COMBINED);
    break;
case PREPROCESS:
  rule=cxxSourceRuleFactory.createPreprocessBuildRule(resolver,source,CxxSource.of(CxxSource.Type.CXX,new FakeSourcePath(source),ImmutableList.<String>of()));
break;
case COMPILE:
rule=cxxSourceRuleFactory.createCompileBuildRule(resolver,source,CxxSource.of(CxxSource.Type.CXX_CPP_OUTPUT,new FakeSourcePath(source),ImmutableList.<String>of()));
break;
default :
throw new IllegalStateException();
}
ruleKeys.put(entry.getKey(),ruleKeyBuilderFactory.build(rule));
}
return ruleKeys.build();
}
