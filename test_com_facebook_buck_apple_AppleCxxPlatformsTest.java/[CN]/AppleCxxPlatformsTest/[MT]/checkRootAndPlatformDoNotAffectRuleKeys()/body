{
  Map<String,ImmutableMap<Flavor,RuleKey>> preprocessAndCompileRukeKeys=Maps.newHashMap();
  Map<String,ImmutableMap<Flavor,RuleKey>> preprocessRukeKeys=Maps.newHashMap();
  Map<String,ImmutableMap<Flavor,RuleKey>> compileRukeKeys=Maps.newHashMap();
  Map<String,ImmutableMap<Flavor,RuleKey>> linkRukeKeys=Maps.newHashMap();
  for (  String dir : ImmutableList.of("something","something else")) {
    AppleCxxPlatform platform=buildAppleCxxPlatform(Paths.get(dir));
    preprocessAndCompileRukeKeys.put(String.format("AppleCxxPlatform(%s)",dir),constructCompileRuleKeys(Operation.PREPROCESS_AND_COMPILE,ImmutableMap.of(platform.getCxxPlatform().getFlavor(),platform)));
    preprocessRukeKeys.put(String.format("AppleCxxPlatform(%s)",dir),constructCompileRuleKeys(Operation.PREPROCESS,ImmutableMap.of(platform.getCxxPlatform().getFlavor(),platform)));
    compileRukeKeys.put(String.format("AppleCxxPlatform(%s)",dir),constructCompileRuleKeys(Operation.COMPILE,ImmutableMap.of(platform.getCxxPlatform().getFlavor(),platform)));
    linkRukeKeys.put(String.format("AppleCxxPlatform(%s)",dir),constructLinkRuleKeys(ImmutableMap.of(platform.getCxxPlatform().getFlavor(),platform)));
  }
  assertThat(Arrays.toString(preprocessAndCompileRukeKeys.entrySet().toArray()),Sets.newHashSet(preprocessAndCompileRukeKeys.values()),Matchers.hasSize(1));
  assertThat(Arrays.toString(preprocessRukeKeys.entrySet().toArray()),Sets.newHashSet(preprocessRukeKeys.values()),Matchers.hasSize(1));
  assertThat(Arrays.toString(compileRukeKeys.entrySet().toArray()),Sets.newHashSet(compileRukeKeys.values()),Matchers.hasSize(1));
  assertThat(Arrays.toString(linkRukeKeys.entrySet().toArray()),Sets.newHashSet(linkRukeKeys.values()),Matchers.hasSize(1));
}
