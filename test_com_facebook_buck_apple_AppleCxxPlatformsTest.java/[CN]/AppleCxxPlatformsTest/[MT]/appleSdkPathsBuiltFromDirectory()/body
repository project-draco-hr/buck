{
  AppleSdkPaths appleSdkPaths=AppleSdkPaths.builder().setDeveloperPath(Paths.get(".")).addToolchainPaths(Paths.get("Toolchains/XcodeDefault.xctoolchain")).setPlatformPath(Paths.get("Platforms/iPhoneOS.platform")).setSdkPath(Paths.get("Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS8.0.sdk")).build();
  ImmutableSet<Path> paths=ImmutableSet.<Path>builder().add(Paths.get("Toolchains/XcodeDefault.xctoolchain/usr/bin/clang")).add(Paths.get("Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++")).add(Paths.get("Platforms/iPhoneOS.platform/Developer/usr/bin/libtool")).add(Paths.get("Platforms/iPhoneOS.platform/Developer/usr/bin/ar")).add(Paths.get("usr/bin/actool")).build();
  AppleCxxPlatform appleCxxPlatform=AppleCxxPlatforms.buildWithExecutableChecker(ApplePlatform.builder().setName(ApplePlatform.Name.IPHONEOS).build(),"iphoneos8.0","6A2008a","7.0","armv7",appleSdkPaths,new FakeBuckConfig(),new FakeExecutableFinder(paths));
  CxxPlatform cxxPlatform=appleCxxPlatform.getCxxPlatform();
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver());
  assertEquals(ImmutableList.of("usr/bin/actool"),appleCxxPlatform.getActool().getCommandPrefix(resolver));
  assertEquals(ImmutableFlavor.of("iphoneos8.0-armv7"),cxxPlatform.getFlavor());
  assertEquals(Paths.get("Toolchains/XcodeDefault.xctoolchain/usr/bin/clang").toString(),cxxPlatform.getCc().getCommandPrefix(resolver).get(0));
  assertThat(cxxPlatform.getCc().getCommandPrefix(resolver),hasConsecutiveItems("-isysroot",Paths.get("Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS8.0.sdk").toString()));
  assertThat(cxxPlatform.getCc().getCommandPrefix(resolver),hasConsecutiveItems("-arch","armv7"));
  assertThat(cxxPlatform.getCc().getCommandPrefix(resolver),hasConsecutiveItems("-mios-version-min=7.0"));
  assertEquals(Paths.get("Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++").toString(),cxxPlatform.getCxx().getCommandPrefix(resolver).get(0));
  assertEquals(Paths.get("Platforms/iPhoneOS.platform/Developer/usr/bin/ar").toString(),cxxPlatform.getAr().getCommandPrefix(resolver).get(0));
}
