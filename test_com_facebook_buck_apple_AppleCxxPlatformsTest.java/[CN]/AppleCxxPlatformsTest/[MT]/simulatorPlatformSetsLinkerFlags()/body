{
  AppleSdkPaths appleSdkPaths=AppleSdkPaths.builder().setDeveloperPath(Paths.get(".")).addToolchainPaths(Paths.get("Toolchains/XcodeDefault.xctoolchain")).setPlatformPath(Paths.get("Platforms/iPhoneOS.platform")).setSdkPath(Paths.get("Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS8.0.sdk")).build();
  ImmutableSet<Path> paths=ImmutableSet.<Path>builder().add(Paths.get("Toolchains/XcodeDefault.xctoolchain/usr/bin/clang")).add(Paths.get("Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++")).add(Paths.get("Platforms/iPhoneOS.platform/Developer/usr/bin/libtool")).add(Paths.get("Platforms/iPhoneOS.platform/Developer/usr/bin/ar")).build();
  AppleCxxPlatform appleCxxPlatform=AppleCxxPlatforms.buildWithExecutableChecker(ApplePlatform.builder().setName(ApplePlatform.Name.IPHONESIMULATOR).build(),"iphonesimulator8.0","6A2008a","7.0","armv7",appleSdkPaths,new FakeBuckConfig(),new FakeExecutableFinder(paths));
  CxxPlatform cxxPlatform=appleCxxPlatform.getCxxPlatform();
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver());
  assertThat(cxxPlatform.getCc().getCommandPrefix(resolver),hasItem("-mios-simulator-version-min=7.0"));
  assertThat(cxxPlatform.getCxxld().getCommandPrefix(resolver),hasItem("-mios-simulator-version-min=7.0"));
}
