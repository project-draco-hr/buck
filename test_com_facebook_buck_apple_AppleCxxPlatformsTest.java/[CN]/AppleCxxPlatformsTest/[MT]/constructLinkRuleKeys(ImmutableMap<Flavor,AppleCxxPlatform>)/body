{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(FakeFileHashCache.createFromStrings(ImmutableMap.<String,String>builder().put("input.o",Strings.repeat("a",40)).build()),pathResolver);
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  ImmutableMap.Builder<Flavor,RuleKey> ruleKeys=ImmutableMap.builder();
  for (  Map.Entry<Flavor,AppleCxxPlatform> entry : cxxPlatforms.entrySet()) {
    BuildRule rule=CxxLinkableEnhancer.createCxxLinkableBuildRule(entry.getValue().getCxxPlatform(),new FakeBuildRuleParamsBuilder(target).build(),resolver,pathResolver,target,Linker.LinkType.EXECUTABLE,Optional.<String>absent(),Paths.get("output"),Linker.LinkableDepType.SHARED,ImmutableList.<NativeLinkable>of(),Optional.<Linker.CxxRuntimeType>absent(),Optional.<SourcePath>absent(),ImmutableSet.<BuildTarget>of(),NativeLinkableInput.builder().setArgs(SourcePathArg.from(pathResolver,new FakeSourcePath("input.o"))).build());
    ruleKeys.put(entry.getKey(),ruleKeyBuilderFactory.build(rule));
  }
  return ruleKeys.build();
}
