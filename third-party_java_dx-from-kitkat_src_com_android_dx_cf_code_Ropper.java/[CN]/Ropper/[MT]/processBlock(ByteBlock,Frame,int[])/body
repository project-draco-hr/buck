{
  ByteCatchList catches=block.getCatches();
  machine.startBlock(catches.toRopCatchList());
  frame=frame.copy();
  sim.simulate(block,frame);
  frame.setImmutable();
  int extraBlockCount=machine.getExtraBlockCount();
  ArrayList<Insn> insns=machine.getInsns();
  int insnSz=insns.size();
  int catchSz=catches.size();
  IntList successors=block.getSuccessors();
  int startSuccessorIndex;
  Subroutine calledSubroutine=null;
  if (machine.hasJsr()) {
    startSuccessorIndex=1;
    int subroutineLabel=successors.get(1);
    if (subroutines[subroutineLabel] == null) {
      subroutines[subroutineLabel]=new Subroutine(subroutineLabel);
    }
    subroutines[subroutineLabel].addCallerBlock(block.getLabel());
    calledSubroutine=subroutines[subroutineLabel];
  }
 else   if (machine.hasRet()) {
    ReturnAddress ra=machine.getReturnAddress();
    int subroutineLabel=ra.getSubroutineAddress();
    if (subroutines[subroutineLabel] == null) {
      subroutines[subroutineLabel]=new Subroutine(subroutineLabel,block.getLabel());
    }
 else {
      subroutines[subroutineLabel].addRetBlock(block.getLabel());
    }
    successors=subroutines[subroutineLabel].getSuccessors();
    subroutines[subroutineLabel].mergeToSuccessors(frame,workSet);
    startSuccessorIndex=successors.size();
  }
 else   if (machine.wereCatchesUsed()) {
    startSuccessorIndex=catchSz;
  }
 else {
    startSuccessorIndex=0;
  }
  int succSz=successors.size();
  for (int i=startSuccessorIndex; i < succSz; i++) {
    int succ=successors.get(i);
    try {
      mergeAndWorkAsNecessary(succ,block.getLabel(),calledSubroutine,frame,workSet);
    }
 catch (    SimException ex) {
      ex.addContext("...while merging to block " + Hex.u2(succ));
      throw ex;
    }
  }
  if ((succSz == 0) && machine.returns()) {
    successors=IntList.makeImmutable(getSpecialLabel(RETURN));
    succSz=1;
  }
  int primarySucc;
  if (succSz == 0) {
    primarySucc=-1;
  }
 else {
    primarySucc=machine.getPrimarySuccessorIndex();
    if (primarySucc >= 0) {
      primarySucc=successors.get(primarySucc);
    }
  }
  boolean synch=isSynchronized() && machine.canThrow();
  if (synch || (catchSz != 0)) {
    boolean catchesAny=false;
    IntList newSucc=new IntList(succSz);
    for (int i=0; i < catchSz; i++) {
      ByteCatchList.Item one=catches.get(i);
      CstType exceptionClass=one.getExceptionClass();
      int targ=one.getHandlerPc();
      catchesAny|=(exceptionClass == CstType.OBJECT);
      Frame f=frame.makeExceptionHandlerStartFrame(exceptionClass);
      try {
        mergeAndWorkAsNecessary(targ,block.getLabel(),null,f,workSet);
      }
 catch (      SimException ex) {
        ex.addContext("...while merging exception to block " + Hex.u2(targ));
        throw ex;
      }
      Type already=catchTypes[targ];
      if (already == null) {
        catchTypes[targ]=exceptionClass.getClassType();
      }
 else       if (already != exceptionClass.getClassType()) {
        catchTypes[targ]=Type.OBJECT;
      }
      newSucc.add(getExceptionSetupLabel(targ));
    }
    if (synch && !catchesAny) {
      newSucc.add(getSpecialLabel(SYNCH_CATCH_1));
      synchNeedsExceptionHandler=true;
      for (int i=insnSz - extraBlockCount - 1; i < insnSz; i++) {
        Insn insn=insns.get(i);
        if (insn.canThrow()) {
          insn=insn.withAddedCatch(Type.OBJECT);
          insns.set(i,insn);
        }
      }
    }
    if (primarySucc >= 0) {
      newSucc.add(primarySucc);
    }
    newSucc.setImmutable();
    successors=newSucc;
  }
  int primarySuccListIndex=successors.indexOf(primarySucc);
  for (; extraBlockCount > 0; extraBlockCount--) {
    Insn extraInsn=insns.get(--insnSz);
    boolean needsGoto=extraInsn.getOpcode().getBranchingness() == Rop.BRANCH_NONE;
    InsnList il=new InsnList(needsGoto ? 2 : 1);
    IntList extraBlockSuccessors=successors;
    il.set(0,extraInsn);
    if (needsGoto) {
      il.set(1,new PlainInsn(Rops.GOTO,extraInsn.getPosition(),null,RegisterSpecList.EMPTY));
      extraBlockSuccessors=IntList.makeImmutable(primarySucc);
    }
    il.setImmutable();
    int label=getAvailableLabel();
    BasicBlock bb=new BasicBlock(label,il,extraBlockSuccessors,primarySucc);
    addBlock(bb,frame.getSubroutines());
    successors=successors.mutableCopy();
    successors.set(primarySuccListIndex,label);
    successors.setImmutable();
    primarySucc=label;
  }
  Insn lastInsn=(insnSz == 0) ? null : insns.get(insnSz - 1);
  if ((lastInsn == null) || (lastInsn.getOpcode().getBranchingness() == Rop.BRANCH_NONE)) {
    SourcePosition pos=(lastInsn == null) ? SourcePosition.NO_INFO : lastInsn.getPosition();
    insns.add(new PlainInsn(Rops.GOTO,pos,null,RegisterSpecList.EMPTY));
    insnSz++;
  }
  InsnList il=new InsnList(insnSz);
  for (int i=0; i < insnSz; i++) {
    il.set(i,insns.get(i));
  }
  il.setImmutable();
  BasicBlock bb=new BasicBlock(block.getLabel(),il,successors,primarySucc);
  addOrReplaceBlock(bb,frame.getSubroutines());
}
