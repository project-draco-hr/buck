{
  Path ndkRoot=ndk.getRootPath();
  NdkCxxPlatformCompiler.Type compilerType=targetConfiguration.getCompiler().getType();
  String version=Joiner.on('-').join(ImmutableList.of(readVersion(ndk),targetConfiguration.getToolchain(),targetConfiguration.getTargetAppPlatform(),compilerType,targetConfiguration.getCompiler().getVersion(),targetConfiguration.getCompiler().getGccVersion(),cxxRuntime));
  Host host=Preconditions.checkNotNull(BUILD_PLATFORMS.get(platform));
  ImmutableBiMap.Builder<Path,Path> sanitizePaths=ImmutableBiMap.builder();
  sanitizePaths.put(getNdkToolRoot(ndkRoot,targetConfiguration,host.toString()),getNdkToolRoot(Paths.get(ANDROID_NDK_ROOT),targetConfiguration,BUILD_HOST_SUBST));
  if (compilerType != NdkCxxPlatformCompiler.Type.GCC) {
    sanitizePaths.put(getNdkGccToolRoot(ndkRoot,targetConfiguration,host.toString()),getNdkGccToolRoot(Paths.get(ANDROID_NDK_ROOT),targetConfiguration,BUILD_HOST_SUBST));
  }
  sanitizePaths.put(ndkRoot,Paths.get(ANDROID_NDK_ROOT));
  CxxPlatform.Builder cxxPlatformBuilder=CxxPlatform.builder();
  cxxPlatformBuilder.setFlavor(flavor).setAs(getGccTool(ndkRoot,targetConfiguration,host,"as",version,executableFinder)).addAllAsflags(getAsflags(ndkRoot,targetConfiguration,host)).setAspp(compilerType.preprocessorFromTool(getCTool(ndkRoot,targetConfiguration,host,compilerType.getCc(),version,executableFinder))).setCc(compilerType.compilerFromTool(getCTool(ndkRoot,targetConfiguration,host,compilerType.getCc(),version,executableFinder))).addAllCflags(getCflagsInternal(ndkRoot,targetConfiguration,host)).setCpp(compilerType.preprocessorFromTool(getCTool(ndkRoot,targetConfiguration,host,compilerType.getCc(),version,executableFinder))).addAllCppflags(getCppflags(ndkRoot,targetConfiguration,host)).setCxx(compilerType.compilerFromTool(getCTool(ndkRoot,targetConfiguration,host,compilerType.getCxx(),version,executableFinder))).addAllCxxflags(getCxxflagsInternal(ndkRoot,targetConfiguration,host)).setCxxpp(compilerType.preprocessorFromTool(getCTool(ndkRoot,targetConfiguration,host,compilerType.getCxx(),version,executableFinder))).addAllCxxppflags(getCxxppflags(ndkRoot,targetConfiguration,host,cxxRuntime)).setLd(getCcLinkTool(ndkRoot,targetConfiguration,host,cxxRuntime,compilerType.getCxx(),version,executableFinder)).addAllLdflags(targetConfiguration.getLinkerFlags(compilerType)).addLdflags("-Wl,--build-id","-Wl,-z,noexecstack","-Wl,--gc-sections","-Wl,-z,defs","-Wl,-z,nocopyreloc","-Wl,--as-needed").setStrip(getGccTool(ndkRoot,targetConfiguration,host,"strip",version,executableFinder)).setSymbolNameTool(new PosixNmSymbolNameTool(getGccTool(ndkRoot,targetConfiguration,host,"nm",version,executableFinder))).setAr(new GnuArchiver(getGccTool(ndkRoot,targetConfiguration,host,"ar",version,executableFinder))).setRanlib(getGccTool(ndkRoot,targetConfiguration,host,"ranlib",version,executableFinder)).setDebugPathSanitizer(new DebugPathSanitizer(250,File.separatorChar,Paths.get("."),sanitizePaths.build())).setSharedLibraryExtension("so").setSharedLibraryVersionedExtensionFormat("so.%s");
  if (cxxRuntime != CxxRuntime.SYSTEM) {
    cxxPlatformBuilder.putRuntimeLdflags(Linker.LinkableDepType.SHARED,"-l" + cxxRuntime.getSharedName());
    cxxPlatformBuilder.putRuntimeLdflags(Linker.LinkableDepType.STATIC,"-l" + cxxRuntime.getStaticName());
  }
  CxxPlatform cxxPlatform=cxxPlatformBuilder.build();
  return NdkCxxPlatform.builder().setCxxPlatform(cxxPlatform).setCxxRuntime(cxxRuntime).setCxxSharedRuntimePath(getCxxRuntimeLibsDirectory(ndkRoot,targetConfiguration,cxxRuntime).resolve(cxxRuntime.getSoname())).setObjdump(getGccTool(ndkRoot,targetConfiguration,host,"objdump",version,executableFinder)).build();
}
