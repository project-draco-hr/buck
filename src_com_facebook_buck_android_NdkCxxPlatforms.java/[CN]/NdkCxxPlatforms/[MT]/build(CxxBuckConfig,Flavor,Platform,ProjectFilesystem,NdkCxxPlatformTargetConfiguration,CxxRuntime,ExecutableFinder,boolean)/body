{
  Path ndkRoot=ndk.getRootPath();
  NdkCxxPlatformCompiler.Type compilerType=targetConfiguration.getCompiler().getType();
  String version=Joiner.on('-').join(ImmutableList.of(readVersion(ndk.getRootPath()),targetConfiguration.getToolchain(),targetConfiguration.getTargetAppPlatform(),compilerType,targetConfiguration.getCompiler().getVersion(),targetConfiguration.getCompiler().getGccVersion(),cxxRuntime));
  Host host=Preconditions.checkNotNull(BUILD_PLATFORMS.get(platform));
  NdkCxxToolchainPaths toolchainPaths=new NdkCxxToolchainPaths(ndkRoot,targetConfiguration,host.toString(),strictToolchainPaths);
  NdkCxxToolchainPaths sanitizedPaths=toolchainPaths.getSanitizedPaths();
  ImmutableBiMap.Builder<Path,Path> sanitizePaths=ImmutableBiMap.builder();
  sanitizePaths.put(toolchainPaths.getNdkToolRoot(),sanitizedPaths.getNdkToolRoot());
  if (compilerType != NdkCxxPlatformCompiler.Type.GCC) {
    sanitizePaths.put(toolchainPaths.getNdkGccToolRoot(),sanitizedPaths.getNdkGccToolRoot());
  }
  sanitizePaths.put(ndkRoot,Paths.get(ANDROID_NDK_ROOT));
  CxxToolProvider.Type type=compilerType == NdkCxxPlatformCompiler.Type.CLANG ? CxxToolProvider.Type.CLANG : CxxToolProvider.Type.GCC;
  ToolProvider ccTool=new ConstantToolProvider(getCTool(toolchainPaths,compilerType.getCc(),version,executableFinder));
  ToolProvider cxxTool=new ConstantToolProvider(getCTool(toolchainPaths,compilerType.getCxx(),version,executableFinder));
  CompilerProvider cc=new CompilerProvider(ccTool,type);
  PreprocessorProvider cpp=new PreprocessorProvider(ccTool,type);
  CompilerProvider cxx=new CompilerProvider(cxxTool,type);
  PreprocessorProvider cxxpp=new PreprocessorProvider(cxxTool,type);
  CxxPlatform.Builder cxxPlatformBuilder=CxxPlatform.builder();
  cxxPlatformBuilder.setFlavor(flavor).setAs(cc).addAllAsflags(getAsflags(targetConfiguration,toolchainPaths)).setAspp(cpp).setCc(cc).addAllCflags(getCflagsInternal(targetConfiguration,toolchainPaths)).setCpp(cpp).addAllCppflags(getCppflags(targetConfiguration,toolchainPaths)).setCxx(cxx).addAllCxxflags(getCxxflagsInternal(targetConfiguration,toolchainPaths)).setCxxpp(cxxpp).addAllCxxppflags(getCxxppflags(targetConfiguration,toolchainPaths,cxxRuntime)).setLd(new DefaultLinkerProvider(LinkerProvider.Type.GNU,new ConstantToolProvider(getCcLinkTool(targetConfiguration,toolchainPaths,cxxRuntime,compilerType.getCxx(),version,executableFinder)))).addAllLdflags(targetConfiguration.getLinkerFlags(compilerType)).addLdflags("-Wl,--build-id","-Wl,-z,noexecstack","-Wl,--gc-sections","-Wl,-z,defs","-Wl,-z,nocopyreloc","-Wl,--as-needed").setStrip(getGccTool(toolchainPaths,"strip",version,executableFinder)).setSymbolNameTool(new PosixNmSymbolNameTool(getGccTool(toolchainPaths,"nm",version,executableFinder))).setAr(new GnuArchiver(getGccTool(toolchainPaths,"ar",version,executableFinder))).setRanlib(getGccTool(toolchainPaths,"ranlib",version,executableFinder)).setDebugPathSanitizer(new DebugPathSanitizer(config.getDebugPathSanitizerLimit(),File.separatorChar,Paths.get("."),sanitizePaths.build())).setSharedLibraryExtension("so").setSharedLibraryVersionedExtensionFormat("so.%s");
  if (cxxRuntime != CxxRuntime.SYSTEM) {
    cxxPlatformBuilder.putRuntimeLdflags(Linker.LinkableDepType.SHARED,"-l" + cxxRuntime.getSharedName());
    cxxPlatformBuilder.putRuntimeLdflags(Linker.LinkableDepType.STATIC,"-l" + cxxRuntime.getStaticName());
  }
  CxxPlatform cxxPlatform=cxxPlatformBuilder.build();
  return NdkCxxPlatform.builder().setCxxPlatform(cxxPlatform).setCxxRuntime(cxxRuntime).setCxxSharedRuntimePath(toolchainPaths.getCxxRuntimeLibsDirectory(cxxRuntime).resolve(cxxRuntime.getSoname())).setObjdump(getGccTool(toolchainPaths,"objdump",version,executableFinder)).build();
}
