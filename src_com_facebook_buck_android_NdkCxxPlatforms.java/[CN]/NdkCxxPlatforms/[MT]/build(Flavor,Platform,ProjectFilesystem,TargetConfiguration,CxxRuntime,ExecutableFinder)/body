{
  Path ndkRoot=ndk.getRootPath();
  String version=Joiner.on('-').join(ImmutableList.of(readVersion(ndk),targetConfiguration.getToolchain(),targetConfiguration.getTargetAppPlatform(),targetConfiguration.getCompiler().getType(),targetConfiguration.getCompiler().getVersion(),targetConfiguration.getCompiler().getGccVersion(),cxxRuntime));
  Host host=Preconditions.checkNotNull(BUILD_PLATFORMS.get(platform));
  ImmutableBiMap.Builder<Path,Path> sanitizePaths=ImmutableBiMap.builder();
  sanitizePaths.put(getNdkToolRoot(ndkRoot,targetConfiguration,host),Paths.get(ANDROID_NDK_TOOLS_ROOT));
  if (targetConfiguration.getCompiler().getType() != Compiler.Type.GCC) {
    sanitizePaths.put(getNdkGccToolRoot(ndkRoot,targetConfiguration,host),Paths.get(ANDROID_NDK_GCC_TOOLS_ROOT));
  }
  sanitizePaths.put(ndkRoot,Paths.get(ANDROID_NDK_ROOT));
  CxxPlatform.Builder cxxPlatformBuilder=CxxPlatform.builder();
  cxxPlatformBuilder.setFlavor(flavor).setAs(getGccTool(ndkRoot,targetConfiguration,host,"as",version,executableFinder)).addAsflags("--noexecstack").setAspp(getCTool(ndkRoot,targetConfiguration,host,targetConfiguration.getCompiler().getType().getCc(),version,executableFinder)).setCc(getCTool(ndkRoot,targetConfiguration,host,targetConfiguration.getCompiler().getType().getCc(),version,executableFinder)).addAllCflags(getCflagsInternal(ndkRoot,targetConfiguration,host)).setCpp(getCTool(ndkRoot,targetConfiguration,host,targetConfiguration.getCompiler().getType().getCc(),version,executableFinder)).addAllCppflags(getCppflags(ndkRoot,targetConfiguration,host)).setCxx(getCTool(ndkRoot,targetConfiguration,host,targetConfiguration.getCompiler().getType().getCxx(),version,executableFinder)).addAllCxxflags(getCxxflagsInternal(ndkRoot,targetConfiguration,host)).setCxxpp(getCTool(ndkRoot,targetConfiguration,host,targetConfiguration.getCompiler().getType().getCxx(),version,executableFinder)).addAllCxxppflags(getCxxppflags(ndkRoot,targetConfiguration,host,cxxRuntime)).setCxxld(getCcLinkTool(ndkRoot,targetConfiguration,host,cxxRuntime,targetConfiguration.getCompiler().getType().getCxx(),version,executableFinder)).addAllCxxldflags(targetConfiguration.getLinkerFlags(targetConfiguration.getCompiler().getType())).setLd(new GnuLinker(getGccTool(ndkRoot,targetConfiguration,host,"ld.gold",version,executableFinder))).addLdflags("--build-id","-z","noexecstack","--gc-sections","-z","defs","-z","nocopyreloc","--as-needed").setAr(getGccTool(ndkRoot,targetConfiguration,host,"ar",version,executableFinder)).setArExpectedGlobalHeader("!<arch>\n".getBytes(Charsets.US_ASCII)).setDebugPathSanitizer(new DebugPathSanitizer(250,File.separatorChar,Paths.get("."),sanitizePaths.build())).setSharedLibraryExtension("so");
  if (cxxRuntime != CxxRuntime.SYSTEM) {
    cxxPlatformBuilder.putRuntimeLdflags(Linker.LinkableDepType.SHARED,"-l" + cxxRuntime.getSharedName());
    cxxPlatformBuilder.putRuntimeLdflags(Linker.LinkableDepType.STATIC,"-l" + cxxRuntime.getStaticName());
  }
  CxxPlatform cxxPlatform=cxxPlatformBuilder.build();
  return NdkCxxPlatform.builder().setCxxPlatform(cxxPlatform).setObjcopy(getGccToolPath(ndkRoot,targetConfiguration,host,"objcopy",executableFinder)).setCxxRuntime(cxxRuntime).setCxxSharedRuntimePath(getCxxRuntimeLibsDirectory(ndkRoot,targetConfiguration,cxxRuntime).resolve(cxxRuntime.getSoname())).build();
}
