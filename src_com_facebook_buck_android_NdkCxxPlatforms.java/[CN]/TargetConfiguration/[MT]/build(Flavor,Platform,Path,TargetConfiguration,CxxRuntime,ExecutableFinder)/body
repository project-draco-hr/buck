{
  String version=readVersion(ndkRoot);
  Host host=Preconditions.checkNotNull(BUILD_PLATFORMS.get(platform));
  CxxPlatform.Builder cxxPlatformBuilder=CxxPlatform.builder();
  cxxPlatformBuilder.setFlavor(flavor).setAs(getTool(ndkRoot,targetConfiguration,host,"as",version,executableFinder)).addAsflags("--noexecstack").setAspp(getCTool(ndkRoot,targetConfiguration,host,"gcc",version,executableFinder)).setCc(getCTool(ndkRoot,targetConfiguration,host,"gcc",version,executableFinder)).addAllCflags(getCflagsInternal(targetConfiguration)).setCpp(getCTool(ndkRoot,targetConfiguration,host,"gcc",version,executableFinder)).addAllCppflags(getCppflags(ndkRoot,targetConfiguration)).setCxx(getCTool(ndkRoot,targetConfiguration,host,"g++",version,executableFinder)).addAllCxxflags(getCxxflagsInternal(targetConfiguration)).setCxxpp(getCTool(ndkRoot,targetConfiguration,host,"g++",version,executableFinder)).addAllCxxppflags(getCxxppflags(ndkRoot,targetConfiguration)).setCxxld(getCcLinkTool(ndkRoot,targetConfiguration,host,cxxRuntime,"g++",version,executableFinder)).addAllCxxldflags(targetConfiguration.linkerFlags).setLd(new GnuLinker(getTool(ndkRoot,targetConfiguration,host,"ld.gold",version,executableFinder))).addLdflags("--build-id","-z","noexecstack","--gc-sections","-z","defs","-z","nocopyreloc","--as-needed").setAr(getTool(ndkRoot,targetConfiguration,host,"ar",version,executableFinder)).setArExpectedGlobalHeader("!<arch>\n".getBytes(Charsets.US_ASCII)).setDebugPathSanitizer(Optional.of(new DebugPathSanitizer(250,File.separatorChar,Paths.get("."),ImmutableBiMap.of(getNdkToolRoot(ndkRoot,targetConfiguration,host),Paths.get("ANDROID_TOOLS_ROOT"),ndkRoot,Paths.get("ANDROID_NDK_ROOT"))))).setSharedLibraryExtension("so");
  if (cxxRuntime != CxxRuntime.SYSTEM) {
    cxxPlatformBuilder.putRuntimeLdflags(Linker.LinkableDepType.SHARED,"-l" + cxxRuntime.getSharedName());
    cxxPlatformBuilder.putRuntimeLdflags(Linker.LinkableDepType.STATIC,"-l" + cxxRuntime.getStaticName());
  }
  CxxPlatform cxxPlatform=cxxPlatformBuilder.build();
  return NdkCxxPlatform.builder().setCxxPlatform(cxxPlatform).setObjcopy(getToolPath(ndkRoot,targetConfiguration,host,"objcopy",executableFinder)).setCxxRuntime(cxxRuntime).setCxxSharedRuntimePath(getCxxRuntimeDirectory(ndkRoot,targetConfiguration).resolve(cxxRuntime.getSoname())).build();
}
