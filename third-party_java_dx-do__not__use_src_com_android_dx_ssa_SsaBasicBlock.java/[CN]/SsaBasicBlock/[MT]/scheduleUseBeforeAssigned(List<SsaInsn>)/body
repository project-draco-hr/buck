{
  BitSet regsUsedAsSources=new BitSet(parent.getRegCount());
  BitSet regsUsedAsResults=new BitSet(parent.getRegCount());
  int sz=toSchedule.size();
  int insertPlace=0;
  while (insertPlace < sz) {
    int oldInsertPlace=insertPlace;
    for (int i=insertPlace; i < sz; i++) {
      setRegsUsed(regsUsedAsSources,toSchedule.get(i).getSources().get(0));
      setRegsUsed(regsUsedAsResults,toSchedule.get(i).getResult());
    }
    for (int i=insertPlace; i < sz; i++) {
      SsaInsn insn=toSchedule.get(i);
      if (!checkRegUsed(regsUsedAsSources,insn.getResult())) {
        Collections.swap(toSchedule,i,insertPlace++);
      }
    }
    if (oldInsertPlace == insertPlace) {
      SsaInsn insnToSplit=null;
      for (int i=insertPlace; i < sz; i++) {
        SsaInsn insn=toSchedule.get(i);
        if (checkRegUsed(regsUsedAsSources,insn.getResult()) && checkRegUsed(regsUsedAsResults,insn.getSources().get(0))) {
          insnToSplit=insn;
          Collections.swap(toSchedule,insertPlace,i);
          break;
        }
      }
      RegisterSpec result=insnToSplit.getResult();
      RegisterSpec tempSpec=result.withReg(parent.borrowSpareRegister(result.getCategory()));
      NormalSsaInsn toAdd=new NormalSsaInsn(new PlainInsn(Rops.opMove(result.getType()),SourcePosition.NO_INFO,tempSpec,insnToSplit.getSources()),this);
      toSchedule.add(insertPlace++,toAdd);
      RegisterSpecList newSources=RegisterSpecList.make(tempSpec);
      NormalSsaInsn toReplace=new NormalSsaInsn(new PlainInsn(Rops.opMove(result.getType()),SourcePosition.NO_INFO,result,newSources),this);
      toSchedule.set(insertPlace,toReplace);
      sz=toSchedule.size();
    }
    regsUsedAsSources.clear();
    regsUsedAsResults.clear();
  }
}
