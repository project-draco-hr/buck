{
  if (!checkAlreadyRunning.compareAndSet(false,true)) {
    return;
  }
  checkExecutor.execute(new Runnable(){
    @Override public void run(){
      try (SimplePerfEvent.Scope scope=SimplePerfEvent.scope(eventBus,PerfEventId.of("ActionGraphCacheCheck"))){
        LOG.info("ActionGraph integrity check spawned.");
        Pair<TargetGraph,ActionGraphAndResolver> newActionGraph=new Pair<TargetGraph,ActionGraphAndResolver>(targetGraph,createActionGraph(eventBus,new DefaultTargetNodeToBuildRuleTransformer(),targetGraph));
        Map<BuildRule,RuleKey> lastActionGraphRuleKeys=getRuleKeysFromBuildRules(lastActionGraphAndResolver.getActionGraph().getNodes(),lastActionGraphAndResolver.getResolver());
        Map<BuildRule,RuleKey> newActionGraphRuleKeys=getRuleKeysFromBuildRules(newActionGraph.getSecond().getActionGraph().getNodes(),newActionGraph.getSecond().getResolver());
        if (!lastActionGraphRuleKeys.equals(newActionGraphRuleKeys)) {
          actionGraphsMismatch.inc();
          invalidateCache();
          String mismatchInfo="RuleKeys of cached and new ActionGraph don't match:\n";
          MapDifference<BuildRule,RuleKey> mismatchedRules=Maps.difference(lastActionGraphRuleKeys,newActionGraphRuleKeys);
          mismatchInfo+="Number of nodes in common/differing: " + mismatchedRules.entriesInCommon().size() + "/"+ mismatchedRules.entriesDiffering().size()+ "\n"+ "Entries only in the cached ActionGraph: "+ mismatchedRules.entriesOnlyOnLeft().size()+ "Entries only in the newly created ActionGraph: "+ mismatchedRules.entriesOnlyOnRight().size()+ "The first "+ MAX_MISMATCH_RULES_TO_PRINT+ " rules that did not match:\n";
          int rulesAlreadyPrinted=0;
          for (          BuildRule rule : mismatchedRules.entriesDiffering().keySet()) {
            if (++rulesAlreadyPrinted == MAX_MISMATCH_RULES_TO_PRINT) {
              break;
            }
            mismatchInfo+=rule.toString() + "\n";
          }
          LOG.error(mismatchInfo);
        }
      }
  finally {
        checkAlreadyRunning.set(false);
      }
    }
  }
);
}
