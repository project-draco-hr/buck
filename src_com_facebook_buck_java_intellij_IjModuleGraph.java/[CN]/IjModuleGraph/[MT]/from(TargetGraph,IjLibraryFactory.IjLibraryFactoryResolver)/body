{
  final IjLibraryFactory libraryFactory=IjLibraryFactory.create(targetGraph.getNodes(),libraryFactoryResolver);
  final ImmutableMap<BuildTarget,IjModule> rulesToModules=createModules(targetGraph);
  final ExportedDepsClosureResolver exportedDepsClosureResolver=new ExportedDepsClosureResolver(targetGraph);
  ImmutableMap.Builder<IjProjectElement,ImmutableMap<IjProjectElement,DependencyType>> depsBuilder=ImmutableMap.builder();
  final Set<IjLibrary> referencedLibraries=new HashSet<>();
  for (  IjModule module : FluentIterable.from(rulesToModules.values()).toSet()) {
    Map<IjProjectElement,DependencyType> moduleDeps=new HashMap<>();
    for (    Map.Entry<BuildTarget,DependencyType> entry : module.getDependencies().entrySet()) {
      BuildTarget depBuildTarget=entry.getKey();
      DependencyType depType=entry.getValue();
      ImmutableSet<IjProjectElement> depElements=FluentIterable.from(exportedDepsClosureResolver.getExportedDepsClosure(depBuildTarget)).append(depBuildTarget).transform(new Function<BuildTarget,IjProjectElement>(){
        @Nullable @Override public IjProjectElement apply(        BuildTarget depTarget){
          IjModule depModule=rulesToModules.get(depTarget);
          if (depModule != null) {
            return depModule;
          }
          IjLibrary library=libraryFactory.getLibrary(depTarget).orNull();
          if (library != null) {
            referencedLibraries.add(library);
          }
          return library;
        }
      }
).filter(Predicates.notNull()).toSet();
      for (      IjProjectElement depElement : depElements) {
        Preconditions.checkState(!depElement.equals(module));
        DependencyType.putWithMerge(moduleDeps,depElement,depType);
      }
    }
    depsBuilder.put(module,ImmutableMap.copyOf(moduleDeps));
  }
  for (  IjLibrary library : referencedLibraries) {
    depsBuilder.put(library,ImmutableMap.<IjProjectElement,DependencyType>of());
  }
  return new IjModuleGraph(depsBuilder.build());
}
