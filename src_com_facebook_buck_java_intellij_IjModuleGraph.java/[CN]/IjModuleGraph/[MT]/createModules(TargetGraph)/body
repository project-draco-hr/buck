{
  IjLibraryFactory libraryFactory=IjLibraryFactory.create(targetGraph.getNodes());
  IjModuleFactory moduleFactory=new IjModuleFactory(libraryFactory);
  ImmutableSet<TargetNode<?>> supportedTargets=FluentIterable.from(targetGraph.getNodes()).filter(SUPPORTED_MODULE_TYPES_PREDICATE).toSet();
  ImmutableListMultimap<Path,TargetNode<?>> baseTargetPathMultimap=FluentIterable.from(supportedTargets).index(new Function<TargetNode<?>,Path>(){
    @Override public Path apply(    TargetNode<?> input){
      return input.getBuildTarget().getBasePath();
    }
  }
);
  ImmutableMap.Builder<BuildTarget,IjModule> moduleMapBuilder=new ImmutableMap.Builder<>();
  for (  Path baseTargetPath : baseTargetPathMultimap.keySet()) {
    ImmutableSet<TargetNode<?>> targets=FluentIterable.from(baseTargetPathMultimap.get(baseTargetPath)).toSet();
    IjModule module=moduleFactory.createModule(baseTargetPath,targets);
    for (    TargetNode<?> target : targets) {
      moduleMapBuilder.put(target.getBuildTarget(),module);
    }
  }
  return moduleMapBuilder.build();
}
