{
  final MutableDirectedGraph<IjModule> moduleGraph=new MutableDirectedGraph<>();
  final ImmutableMap<BuildTarget,IjModule> rulesToModules=createModules(targetGraph);
  final ExportedDepsClosureResolver exportedDepsClosureResolver=new ExportedDepsClosureResolver(targetGraph);
  for (  IjModule module : rulesToModules.values()) {
    moduleGraph.addNode(module);
  }
  AbstractBottomUpTraversal<TargetNode<?>,IjModuleGraph> bottomUpTraversal=new AbstractBottomUpTraversal<TargetNode<?>,IjModuleGraph>(targetGraph){
    @Override public void visit(    TargetNode<?> node){
      IjModule module=rulesToModules.get(node.getBuildTarget());
      if (module == null) {
        return;
      }
      ImmutableSet<BuildTarget> deps=FluentIterable.from(node.getDeps()).transformAndConcat(new Function<BuildTarget,Iterable<BuildTarget>>(){
        @Override public Iterable<BuildTarget> apply(        BuildTarget input){
          return exportedDepsClosureResolver.getExportedDepsClosure(input);
        }
      }
).append(node.getDeps()).toSet();
      for (      BuildTarget dep : deps) {
        IjModule depModule=rulesToModules.get(dep);
        if (depModule == null || depModule.equals(module)) {
          continue;
        }
        moduleGraph.addEdge(module,depModule);
      }
    }
    @Override public IjModuleGraph getResult(){
      return new IjModuleGraph(moduleGraph);
    }
  }
;
  bottomUpTraversal.traverse();
  return bottomUpTraversal.getResult();
}
