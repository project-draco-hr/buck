{
  buildableContext.recordArtifact(specsDir);
  buildableContext.recordArtifact(this.getPathToOutput());
  return ImmutableList.<Step>builder().add(new MkdirStep(getProjectFilesystem(),specsDir)).add(new SymCopyStep(getProjectFilesystem(),FluentIterable.from(captureAndAnalyzeRules.captureRules).transform(new Function<CxxInferCapture,Path>(){
    @Override public Path apply(    CxxInferCapture input){
      return input.getPathToOutput();
    }
  }
).toList(),resultsDir)).add(new AbstractExecutionStep("write_specs_path_list"){
    @Override public StepExecutionResult execute(    ExecutionContext context) throws IOException {
      try {
        ImmutableList<String> specsDirsWithAbsolutePath=FluentIterable.from(getSpecsOfAllDeps()).transform(new Function<SourcePath,String>(){
          @Override public String apply(          SourcePath input){
            return getResolver().getAbsolutePath(input).toString();
          }
        }
).toList();
        getProjectFilesystem().writeLinesToPath(specsDirsWithAbsolutePath,specsPathList);
      }
 catch (      IOException e) {
        context.logError(e,"Error while writing specs path list file for the analyzer");
        return StepExecutionResult.ERROR;
      }
      return StepExecutionResult.SUCCESS;
    }
  }
).add(new DefaultShellStep(getProjectFilesystem().getRootPath(),getAnalyzeCommand(),ImmutableMap.<String,String>of())).build();
}
