{
  this.permState=permState;
  this.marshaller=marshaller;
  this.eventBus=eventBus;
  this.enableProfiling=enableProfiling;
  this.cells=new ConcurrentHashMap<>();
  this.cellSymlinkAllowability=new ConcurrentHashMap<>();
  this.parsers=new ThreadLocal<Map<Cell,ProjectBuildFileParser>>(){
    @Override protected Map<Cell,ProjectBuildFileParser> initialValue(){
      return new HashMap<>();
    }
  }
;
  this.buildInputPathsUnderSymlink=Sets.newHashSet();
  this.symlinkExistenceCache=new ConcurrentHashMap<>();
  this.stdout=new PrintStream(ByteStreams.nullOutputStream());
  this.stderr=new PrintStream(ByteStreams.nullOutputStream());
  this.console=new Console(Verbosity.STANDARD_INFORMATION,stdout,stderr,Ansi.withoutTty());
  this.symlinkCheckers=new TargetNodeListener(){
    @Override public void onCreate(    Path buildFile,    TargetNode<?> node) throws IOException {
      registerInputsUnderSymlinks(buildFile,node);
    }
  }
;
  this.closer=Closer.create();
  register(rootCell);
}
