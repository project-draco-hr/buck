{
  log(IAppConstants.APP_VERBOSE_BUILD_ID,Project.MSG_VERBOSE);
  if (getClasspath() == null)   throw (BuildException)SuppressableTask.newBuildException(getTaskName() + ": this task requires 'classpath' attribute to be set",location).fillInStackTrace();
  if (isEnabled()) {
    if (m_forkUserOverride && !m_fork)     log(getTaskName() + ": 'fork=\"false\"' attribute setting ignored (this task always forks)",Project.MSG_WARN);
    super.setFork(true);
    final Path libClasspath=m_libClasspath;
    if ((libClasspath != null) && (libClasspath.size() > 0)) {
      super.createClasspath().append(libClasspath);
    }
    super.setClassname("emmarun");
{
{
        String reportTypes=Strings.toListForm(m_reportCfg.getReportTypes(),',');
        if ((reportTypes == null) || (reportTypes.length() == 0))         reportTypes="txt";
        super.createArg().setValue("-r");
        super.createArg().setValue(reportTypes);
      }
{
        if (m_scanCoveragePath) {
          super.createArg().setValue("-f");
        }
      }
{
        if (m_dumpSessionData) {
          super.createArg().setValue("-raw");
          if (m_outFile != null) {
            super.createArg().setValue("-out");
            super.createArg().setValue(m_outFile.getAbsolutePath());
          }
          if (m_outFileMerge != null) {
            super.createArg().setValue("-merge");
            super.createArg().setValue(m_outFileMerge.booleanValue() ? "y" : "n");
          }
        }
 else {
          if (m_outFile != null)           log(getTaskName() + ": output file attribute ignored ('fullmetadata=\"true\"' not specified)",Project.MSG_WARN);
          if (m_outFileMerge != null)           log(getTaskName() + ": merge attribute setting ignored ('fullmetadata=\"true\"' not specified)",Project.MSG_WARN);
        }
      }
{
        final String[] specs=m_filterCfg.getFilterSpecs();
        if ((specs != null) && (specs.length > 0)) {
          super.createArg().setValue("-ix");
          super.createArg().setValue(Strings.toListForm(specs,','));
        }
      }
{
        final Path srcpath=m_reportCfg.getSourcepath();
        if (srcpath != null) {
          super.createArg().setValue("-sp");
          super.createArg().setValue(Strings.toListForm(srcpath.list(),','));
        }
      }
{
        final IProperties reportSettings=m_reportCfg.getReportSettings();
        final IProperties genericSettings=m_genericCfg.getGenericSettings();
        final IProperties fileSettings=m_genericCfg.getFileSettings();
        final IProperties verbositySettings=m_verbosityCfg.getSettings();
        final IProperties settings=IProperties.Factory.combine(reportSettings,IProperties.Factory.combine(verbositySettings,IProperties.Factory.combine(genericSettings,fileSettings)));
        final String[] argForm=settings.toAppArgsForm("-D");
        if (argForm.length > 0) {
          for (int a=0; a < argForm.length; ++a)           super.createArg().setValue(argForm[a]);
        }
      }
    }
    super.createArg().setValue("-cp");
    super.createArg().setPath(getClasspath());
    if (getClassname() != null)     super.createArg().setValue(getClassname());
 else     if (getJar() != null) {
      super.createArg().setValue("-jar");
      super.createArg().setValue(getJar().getAbsolutePath());
    }
 else     throw (BuildException)SuppressableTask.newBuildException(getTaskName() + "either 'jar' or 'classname' attribute must be set",location).fillInStackTrace();
    if (m_appArgs != null) {
      final String[] args=m_appArgs.getArguments();
      for (int a=0; a < args.length; ++a) {
        super.createArg().setValue(args[a]);
      }
    }
  }
 else {
    super.setFork(m_fork);
    super.createClasspath().append(getClasspath());
    if (getClassname() != null)     super.setClassname(getClassname());
 else     if (getJar() != null)     super.setJar(getJar());
 else     throw (BuildException)SuppressableTask.newBuildException(getTaskName() + "either 'jar' or 'classname' attribute must be set",location).fillInStackTrace();
    if (m_appArgs != null) {
      final String[] args=m_appArgs.getArguments();
      for (int a=0; a < args.length; ++a) {
        super.createArg().setValue(args[a]);
      }
    }
  }
  super.execute();
}
