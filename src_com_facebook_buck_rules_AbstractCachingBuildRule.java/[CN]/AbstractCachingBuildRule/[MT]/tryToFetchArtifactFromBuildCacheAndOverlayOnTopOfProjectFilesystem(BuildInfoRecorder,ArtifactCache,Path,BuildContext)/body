{
  File zipFile;
  try {
    zipFile=File.createTempFile(getFullyQualifiedName().replace('/','_'),".zip");
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  boolean isSuccessfulFetch=buildInfoRecorder.fetchArtifactForBuildable(zipFile,artifactCache);
  if (!isSuccessfulFetch) {
    return false;
  }
  ProcessBuilder processBuilder=new ProcessBuilder("unzip","-o","-qq",zipFile.getAbsolutePath());
  processBuilder.directory(projectRoot.toFile());
  try {
    ProcessExecutor executor=buildContext.createProcessExecutorForUnzippingArtifact();
    Process process=processBuilder.start();
    ProcessExecutor.Result result=executor.execute(process,false,false,false);
    int exitCode=result.getExitCode();
    if (exitCode != 0) {
      buildContext.getEventBus().post(LogEvent.warning("Failed to unzip the artifact for %s at %s.\n" + "The rule will be built locally, but here is the output of the failed unzip call:\n" + "Exit code: %s\n"+ "STDOUT:\n%s\n"+ "STDERR:\n%s\n",getBuildTarget(),zipFile.getAbsolutePath(),exitCode,result.getStdout(),result.getStderr()));
      return false;
    }
  }
 catch (  IOException e) {
    return false;
  }
  zipFile.delete();
  return true;
}
