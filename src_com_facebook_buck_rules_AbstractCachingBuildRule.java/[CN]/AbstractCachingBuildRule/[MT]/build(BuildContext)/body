{
synchronized (hasBuildStarted) {
    if (hasBuildStarted.get()) {
      return buildRuleResult;
    }
 else {
      hasBuildStarted.set(true);
    }
  }
  try {
    List<ListenableFuture<BuildRuleSuccess>> builtDeps=Lists.newArrayListWithCapacity(getDeps().size());
    for (    BuildRule dep : getDeps()) {
      builtDeps.add(dep.build(context));
    }
    ListenableFuture<List<BuildRuleSuccess>> allBuiltDeps=Futures.allAsList(builtDeps);
    Futures.addCallback(allBuiltDeps,new FutureCallback<List<BuildRuleSuccess>>(){
      @Override public void onSuccess(      List<BuildRuleSuccess> deps){
        buildOnceDepsAreBuilt(context);
      }
      @Override public void onFailure(      Throwable failure){
        recordBuildRuleFailure(failure);
      }
    }
,context.getExecutor());
  }
 catch (  Throwable throwable) {
    recordBuildRuleFailure(throwable);
  }
  return buildRuleResult;
}
