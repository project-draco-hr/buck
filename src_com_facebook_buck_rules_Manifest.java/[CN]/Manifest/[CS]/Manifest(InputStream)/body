{
  DataInputStream input=new DataInputStream(rawInput);
  Preconditions.checkState(input.readInt() == VERSION);
  int numberOfHeaders=input.readInt();
  headers=new ArrayList<>(numberOfHeaders);
  headerIndices=new HashMap<>(numberOfHeaders);
  for (int index=0; index < numberOfHeaders; index++) {
    String header=input.readUTF();
    headers.add(header);
    headerIndices.put(header,index);
  }
  int numberOfHashes=input.readInt();
  hashes=new ArrayList<>(numberOfHashes);
  hashIndices=new HashMap<>(numberOfHashes);
  for (int index=0; index < numberOfHashes; index++) {
    int headerIndex=input.readInt();
    HashCode headerHash=HashCode.fromString(input.readUTF());
    hashes.add(new Pair<>(headerIndex,headerHash));
    hashIndices.put(headerHash,index);
  }
  int numberOfEntries=input.readInt();
  entries=new ArrayList<>(numberOfEntries);
  for (int entryIndex=0; entryIndex < numberOfEntries; entryIndex++) {
    int numberOfEntryHashes=input.readInt();
    int[] entryHashes=new int[numberOfEntryHashes];
    for (int hashIndex=0; hashIndex < numberOfEntryHashes; hashIndex++) {
      entryHashes[hashIndex]=input.readInt();
    }
    RuleKey key=new RuleKey(input.readUTF());
    entries.add(new Pair<>(key,entryHashes));
  }
}
