{
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  ImmutableMap<String,CxxSource> srcs=CxxDescriptionEnhancer.parseCxxSources(params.getBuildTarget(),pathResolver,args.srcs.or(ImmutableList.<SourcePath>of()));
  ImmutableMap<Path,SourcePath> headers=CxxDescriptionEnhancer.parseHeaders(params.getBuildTarget(),pathResolver,args.headerNamespace.transform(MorePaths.TO_PATH).or(params.getBuildTarget().getBasePath()),args.headers.or((ImmutableList.<SourcePath>of())));
  ImmutableMap<String,SourcePath> lexSrcs=pathResolver.getSourcePathNames(params.getBuildTarget(),"lexSrcs",args.lexSrcs.or(ImmutableList.<SourcePath>of()));
  ImmutableMap<String,SourcePath> yaccSrcs=pathResolver.getSourcePathNames(params.getBuildTarget(),"yaccSrcs",args.yaccSrcs.or(ImmutableList.<SourcePath>of()));
  CxxHeaderSourceSpec lexYaccSources=CxxDescriptionEnhancer.createLexYaccBuildRules(params,ruleResolver,cxxPlatform,ImmutableList.<String>of(),lexSrcs,ImmutableList.<String>of(),yaccSrcs);
  SymlinkTree headerSymlinkTree=CxxDescriptionEnhancer.createHeaderSymlinkTreeBuildRule(params,ruleResolver,headers);
  CxxPreprocessorInput cxxPreprocessorInput=CxxDescriptionEnhancer.combineCxxPreprocessorInput(params,args.preprocessorFlags.or(ImmutableList.<String>of()),headerSymlinkTree,ImmutableMap.<Path,SourcePath>builder().putAll(headers).putAll(lexYaccSources.getCxxHeaders()).build());
  ImmutableList<SourcePath> picObjects=CxxDescriptionEnhancer.createPreprocessAndCompileBuildRules(params,ruleResolver,cxxPlatform,cxxPreprocessorInput,args.compilerFlags.or(ImmutableList.<String>of()),true,ImmutableMap.<String,CxxSource>builder().putAll(srcs).putAll(lexYaccSources.getCxxSources()).build());
  Path baseModule=PythonUtil.getBasePath(params.getBuildTarget(),args.baseModule);
  final BuildTarget extensionTarget=getExtensionTarget(params.getBuildTarget());
  String extensionName=getExtensionName(params.getBuildTarget());
  Path extensionModule=baseModule.resolve(extensionName);
  final Path extensionPath=getExtensionPath(extensionTarget);
  CxxLink extensionRule=CxxLinkableEnhancer.createCxxLinkableBuildRule(cxxPlatform,params,pathResolver,ImmutableList.<String>of(),ImmutableList.<String>of(),extensionTarget,CxxLinkableEnhancer.LinkType.SHARED,Optional.of(extensionName),extensionPath,picObjects,NativeLinkable.Type.SHARED,params.getDeps());
  ruleResolver.addToIndex(extensionRule);
  return new CxxPythonExtension(params,pathResolver,extensionModule,new BuildRuleSourcePath(extensionRule),extensionRule);
}
