{
  return new SharedNativeLinkTarget(){
    @Override public BuildTarget getBuildTarget(){
      return BuildTarget.builder(params.getBuildTarget()).addFlavors(pythonPlatform.getFlavor()).build();
    }
    @Override public Iterable<? extends NativeLinkable> getSharedNativeLinkTargetDeps(    CxxPlatform cxxPlatform){
      return FluentIterable.from(params.getDeclaredDeps().get()).filter(NativeLinkable.class).append(ruleResolver.getRuleOptionalWithType(pythonPlatform.getCxxLibrary().get().getBuildTarget(),NativeLinkable.class).get());
    }
    @Override public String getSharedNativeLinkTargetLibraryName(    CxxPlatform cxxPlatform){
      return getExtensionName(params.getBuildTarget());
    }
    @Override public NativeLinkableInput getSharedNativeLinkTargetInput(    CxxPlatform cxxPlatform) throws NoSuchBuildTargetException {
      return NativeLinkableInput.builder().addAllArgs(getExtensionArgs(params,ruleResolver,pathResolver,cxxPlatform,args)).addAllFrameworks(args.frameworks.or(ImmutableSortedSet.<FrameworkPath>of())).build();
    }
  }
;
}
