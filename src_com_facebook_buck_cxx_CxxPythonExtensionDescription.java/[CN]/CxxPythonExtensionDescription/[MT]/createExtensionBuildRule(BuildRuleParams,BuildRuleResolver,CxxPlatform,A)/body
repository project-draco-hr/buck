{
  ImmutableMap<String,CxxSource> srcs=CxxDescriptionEnhancer.parseCxxSources(params,ruleResolver,args);
  ImmutableMap<Path,SourcePath> headers=CxxDescriptionEnhancer.parseHeaders(params,ruleResolver,args);
  ImmutableMap<String,SourcePath> lexSrcs=CxxDescriptionEnhancer.parseLexSources(params,ruleResolver,args);
  ImmutableMap<String,SourcePath> yaccSrcs=CxxDescriptionEnhancer.parseYaccSources(params,ruleResolver,args);
  CxxHeaderSourceSpec lexYaccSources=CxxDescriptionEnhancer.createLexYaccBuildRules(params,ruleResolver,cxxPlatform,ImmutableList.<String>of(),lexSrcs,ImmutableList.<String>of(),yaccSrcs);
  SymlinkTree headerSymlinkTree=CxxDescriptionEnhancer.createHeaderSymlinkTreeBuildRule(params,ruleResolver,cxxPlatform.asFlavor(),ImmutableMap.<Path,SourcePath>builder().putAll(headers).putAll(lexYaccSources.getCxxHeaders()).build());
  CxxPreprocessorInput cxxPreprocessorInput=CxxDescriptionEnhancer.combineCxxPreprocessorInput(params,cxxPlatform,CxxPreprocessorFlags.fromArgs(args.preprocessorFlags,args.langPreprocessorFlags),headerSymlinkTree);
  ImmutableMap<String,CxxSource> allSources=ImmutableMap.<String,CxxSource>builder().putAll(srcs).putAll(lexYaccSources.getCxxSources()).build();
  ImmutableMap<String,CxxSource> preprocessed=CxxPreprocessables.createPreprocessBuildRules(params,ruleResolver,cxxPlatform,cxxPreprocessorInput,true,allSources);
  ImmutableList<SourcePath> picObjects=CxxDescriptionEnhancer.createCompileBuildRules(params,ruleResolver,cxxPlatform,args.compilerFlags.or(ImmutableList.<String>of()),true,preprocessed);
  String extensionName=getExtensionName(params.getBuildTarget());
  Path extensionPath=getExtensionPath(params.getBuildTarget(),cxxPlatform.asFlavor());
  return CxxLinkableEnhancer.createCxxLinkableBuildRule(cxxPlatform,params,new SourcePathResolver(ruleResolver),ImmutableList.<String>of(),ImmutableList.<String>of(),getExtensionTarget(params.getBuildTarget(),cxxPlatform.asFlavor()),Linker.LinkType.SHARED,Optional.of(extensionName),extensionPath,picObjects,Linker.LinkableDepType.SHARED,params.getDeps());
}
