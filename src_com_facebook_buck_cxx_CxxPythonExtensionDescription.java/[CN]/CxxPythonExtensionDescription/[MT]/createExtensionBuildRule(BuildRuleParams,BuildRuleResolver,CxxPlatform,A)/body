{
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  ImmutableMap<String,CxxSource> srcs=CxxDescriptionEnhancer.parseCxxSources(params,ruleResolver,args);
  ImmutableMap<Path,SourcePath> headers=CxxDescriptionEnhancer.parseHeaders(params,ruleResolver,args);
  ImmutableMap<String,SourcePath> lexSrcs=CxxDescriptionEnhancer.parseLexSources(params,ruleResolver,args);
  ImmutableMap<String,SourcePath> yaccSrcs=CxxDescriptionEnhancer.parseYaccSources(params,ruleResolver,args);
  CxxHeaderSourceSpec lexYaccSources=CxxDescriptionEnhancer.createLexYaccBuildRules(params,ruleResolver,cxxPlatform,ImmutableList.<String>of(),lexSrcs,ImmutableList.<String>of(),yaccSrcs);
  SymlinkTree headerSymlinkTree=CxxDescriptionEnhancer.requireHeaderSymlinkTree(params,ruleResolver,new SourcePathResolver(ruleResolver),cxxPlatform,true,lexSrcs,yaccSrcs,headers,HeaderVisibility.PRIVATE);
  CxxPreprocessorInput cxxPreprocessorInput=CxxDescriptionEnhancer.combineCxxPreprocessorInput(params,cxxPlatform,CxxFlags.getLanguageFlags(args.preprocessorFlags,args.platformPreprocessorFlags,args.langPreprocessorFlags,cxxPlatform.getFlavor()),args.prefixHeaders.get(),ImmutableList.of(headerSymlinkTree),ImmutableList.<Path>of());
  ImmutableMap<String,CxxSource> allSources=ImmutableMap.<String,CxxSource>builder().putAll(srcs).putAll(lexYaccSources.getCxxSources()).build();
  ImmutableMap<CxxPreprocessAndCompile,SourcePath> picObjects=CxxSourceRuleFactory.createPreprocessAndCompileRules(params,ruleResolver,pathResolver,cxxPlatform,cxxPreprocessorInput,CxxFlags.getFlags(args.compilerFlags,args.platformCompilerFlags,cxxPlatform.getFlavor()),CxxSourceRuleFactory.Strategy.SEPARATE_PREPROCESS_AND_COMPILE,allSources,CxxSourceRuleFactory.PicType.PIC);
  String extensionName=getExtensionName(params.getBuildTarget());
  Path extensionPath=getExtensionPath(params.getBuildTarget(),cxxPlatform.getFlavor());
  return CxxLinkableEnhancer.createCxxLinkableBuildRule(cxxPlatform,params,pathResolver,ImmutableList.<String>of(),CxxFlags.getFlags(args.linkerFlags,args.platformLinkerFlags,cxxPlatform.getFlavor()),getExtensionTarget(params.getBuildTarget(),cxxPlatform.getFlavor()),Linker.LinkType.SHARED,Optional.of(extensionName),extensionPath,picObjects.values(),Linker.LinkableDepType.SHARED,params.getDeps(),args.cxxRuntimeType);
}
