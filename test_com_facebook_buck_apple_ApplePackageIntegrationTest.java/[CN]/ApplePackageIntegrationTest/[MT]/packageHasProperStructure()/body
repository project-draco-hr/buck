{
  assumeTrue(Platform.detect() == Platform.MACOS);
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"simple_application_bundle_no_debug",tmp);
  workspace.setUp();
  workspace.enableDirCache();
  BuildTarget appTarget=BuildTargetFactory.newInstance("//:DemoApp#no-debug,no-include-frameworks");
  workspace.runBuckCommand("build",appTarget.getUnflavoredBuildTarget().getFullyQualifiedName()).assertSuccess();
  workspace.getBuildLog().assertTargetBuiltLocally(appTarget.getFullyQualifiedName());
  workspace.runBuckCommand("clean").assertSuccess();
  BuildTarget packageTarget=BuildTargetFactory.newInstance("//:DemoAppPackage");
  workspace.runBuckCommand("build",packageTarget.getFullyQualifiedName()).assertSuccess();
  workspace.getBuildLog().assertTargetWasFetchedFromCache(appTarget.getFullyQualifiedName());
  workspace.getBuildLog().assertTargetBuiltLocally(packageTarget.getFullyQualifiedName());
  Path templateDir=TestDataHelper.getTestDataScenario(this,"simple_application_bundle_no_debug");
  ZipInspector zipInspector=new ZipInspector(workspace.getPath(BuildTargets.getGenPath(packageTarget,"%s.ipa")));
  zipInspector.assertFileExists("Payload/DemoApp.app/DemoApp");
  zipInspector.assertFileDoesNotExist("WatchKitSupport");
  zipInspector.assertFileDoesNotExist("WatchKitSupport2");
  zipInspector.assertFileContents("Payload/DemoApp.app/PkgInfo",new String(Files.readAllBytes(templateDir.resolve("DemoApp_output.expected/DemoApp.app/PkgInfo.expected")),UTF_8));
}
