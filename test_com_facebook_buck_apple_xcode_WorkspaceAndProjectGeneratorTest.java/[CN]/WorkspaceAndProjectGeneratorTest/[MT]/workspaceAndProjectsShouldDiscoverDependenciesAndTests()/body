{
  WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(projectFilesystem,targetGraph,executionContext,buildRuleResolver,sourcePathResolver,workspaceNode,ImmutableSet.<ProjectGenerator.Option>of(),AppleBuildRules.getSourceTargetToTestNodesMap(targetGraph.getNodes()),false);
  Map<TargetNode<?>,ProjectGenerator> projectGenerators=new HashMap<>();
  generator.generateWorkspaceAndDependentProjects(projectGenerators);
  ProjectGenerator fooProjectGenerator=projectGenerators.get(fooProjectNode);
  ProjectGenerator barProjectGenerator=projectGenerators.get(barProjectNode);
  ProjectGenerator bazProjectGenerator=projectGenerators.get(bazProjectNode);
  ProjectGenerator quxProjectGenerator=projectGenerators.get(quxProjectNode);
  assertNull("The Qux project should not be generated at all",quxProjectGenerator);
  assertNotNull("The Foo project should have been generated",fooProjectGenerator);
  assertNotNull("The Bar project should have been generated",barProjectGenerator);
  assertNotNull("The Baz project should have been generated",bazProjectGenerator);
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(fooProjectGenerator.getGeneratedProject(),"//foo:bin");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(fooProjectGenerator.getGeneratedProject(),"//foo:lib");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(fooProjectGenerator.getGeneratedProject(),"//foo:bin-xctest");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(fooProjectGenerator.getGeneratedProject(),"//foo:lib-xctest");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(barProjectGenerator.getGeneratedProject(),"//bar:lib");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(bazProjectGenerator.getGeneratedProject(),"//baz:lib");
}
