{
  WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(projectFilesystem,targetGraph,workspaceNode,ImmutableSet.of(ProjectGenerator.Option.INCLUDE_TESTS),AppleBuildRules.getSourceTargetToTestNodesMap(targetGraph.getNodes()),true);
  Map<TargetNode<?>,ProjectGenerator> projectGenerators=new HashMap<>();
  generator.generateWorkspaceAndDependentProjects(projectGenerators);
  assertTrue("Combined project generation should not populate the project generators map",projectGenerators.isEmpty());
  Optional<ProjectGenerator> projectGeneratorOptional=generator.getCombinedProjectGenerator();
  assertTrue("Combined project generator should be present",projectGeneratorOptional.isPresent());
  ProjectGenerator projectGenerator=projectGeneratorOptional.get();
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:bin");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:lib");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:bin-xctest");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:lib-xctest");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//bar:lib");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//baz:lib");
}
