{
  TargetNode<AppleNativeTargetDescriptionArg> fooLib=AppleLibraryBuilder.createBuilder(BuildTarget.builder("//foo","lib").build()).build();
  TargetNode<AppleNativeTargetDescriptionArg> barLib=AppleLibraryBuilder.createBuilder(BuildTarget.builder("//bar","lib").build()).setDeps(Optional.of(ImmutableSortedSet.of(fooLib.getBuildTarget()))).build();
  TargetNode<XcodeProjectConfigDescription.Arg> barProject=XcodeProjectConfigBuilder.createBuilder(BuildTarget.builder("//bar","project").build()).setProjectName("bar").setRules(ImmutableSortedSet.of(barLib.getBuildTarget())).build();
  TargetNode<XcodeWorkspaceConfigDescription.Arg> workspace=XcodeWorkspaceConfigBuilder.createBuilder(BuildTarget.builder("//bar","workspace").build()).setSrcTarget(Optional.of(barLib.getBuildTarget())).setWorkspaceName(Optional.of("workspace")).build();
  TargetGraph targetGraph=TargetGraphFactory.newInstance(fooLib,barLib,barProject,workspace);
  WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(projectFilesystem,targetGraph,workspace,ImmutableSet.<ProjectGenerator.Option>of(),ImmutableMultimap.<BuildTarget,TargetNode<AppleTestDescription.Arg>>of(),false);
  Map<TargetNode<?>,ProjectGenerator> projectGenerators=Maps.newHashMap();
  thrown.expect(HumanReadableException.class);
  thrown.expectMessage("No xcode_project_config rule was found for the following targets: [//foo:lib]");
  generator.generateWorkspaceAndDependentProjects(projectGenerators);
}
