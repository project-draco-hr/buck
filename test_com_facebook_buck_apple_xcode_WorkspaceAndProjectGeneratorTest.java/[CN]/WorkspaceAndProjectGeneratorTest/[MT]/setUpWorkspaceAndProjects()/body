{
  BuildTarget bazTestTarget=BuildTarget.builder("//baz","xctest").build();
  BuildTarget fooBinTestTarget=BuildTarget.builder("//foo","bin-xctest").build();
  BuildTarget barLibTarget=BuildTarget.builder("//bar","lib").build();
  TargetNode<?> barLibNode=AppleLibraryBuilder.createBuilder(barLibTarget).build();
  BuildTarget fooLibTarget=BuildTarget.builder("//foo","lib").build();
  TargetNode<?> fooLibNode=AppleLibraryBuilder.createBuilder(fooLibTarget).setDeps(Optional.of(ImmutableSortedSet.of(barLibTarget))).build();
  BuildTarget fooBinBinaryTarget=BuildTarget.builder("//foo","binbinary").build();
  TargetNode<?> fooBinBinaryNode=AppleBinaryBuilder.createBuilder(fooBinBinaryTarget).setDeps(Optional.of(ImmutableSortedSet.of(fooLibTarget))).setTests(Optional.of(ImmutableSortedSet.of(fooBinTestTarget))).build();
  BuildTarget fooBinTarget=BuildTarget.builder("//foo","bin").build();
  TargetNode<?> fooBinNode=AppleBundleBuilder.createBuilder(fooBinTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.APP)).setBinary(fooBinBinaryTarget).build();
  BuildTarget bazLibTarget=BuildTarget.builder("//baz","lib").build();
  TargetNode<?> bazLibNode=AppleLibraryBuilder.createBuilder(bazLibTarget).setDeps(Optional.of(ImmutableSortedSet.of(fooLibTarget))).setTests(Optional.of(ImmutableSortedSet.of(bazTestTarget))).build();
  TargetNode<?> bazTestNode=AppleTestBuilder.createBuilder(bazTestTarget).setDeps(Optional.of(ImmutableSortedSet.of(bazLibTarget))).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).build();
  BuildTarget fooTestTarget=BuildTarget.builder("//foo","lib-xctest").build();
  TargetNode<?> fooTestNode=AppleTestBuilder.createBuilder(fooTestTarget).setSourceUnderTest(Optional.of(ImmutableSortedSet.of(fooLibTarget))).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setDeps(Optional.of(ImmutableSortedSet.of(bazLibTarget))).build();
  TargetNode<?> fooBinTestNode=AppleTestBuilder.createBuilder(fooBinTestTarget).setDeps(Optional.of(ImmutableSortedSet.of(fooBinTarget))).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).build();
  BuildTarget quxBinTarget=BuildTarget.builder("//qux","bin").build();
  TargetNode<?> quxBinNode=AppleBinaryBuilder.createBuilder(quxBinTarget).setDeps(Optional.of(ImmutableSortedSet.of(barLibTarget))).build();
  BuildTarget fooProjectTarget=BuildTarget.builder("//foo","foo").build();
  fooProjectNode=XcodeProjectConfigBuilder.createBuilder(fooProjectTarget).setProjectName("foo").setRules(ImmutableSortedSet.of(fooLibTarget,fooBinBinaryTarget,fooBinTarget,fooBinTestTarget,fooTestTarget)).build();
  BuildTarget barProjectTarget=BuildTarget.builder("//bar","bar").build();
  barProjectNode=XcodeProjectConfigBuilder.createBuilder(barProjectTarget).setProjectName("bar").setRules(ImmutableSortedSet.of(barLibTarget)).build();
  BuildTarget bazProjectTarget=BuildTarget.builder("//baz","baz").build();
  bazProjectNode=XcodeProjectConfigBuilder.createBuilder(bazProjectTarget).setProjectName("baz").setRules(ImmutableSortedSet.of(bazLibTarget)).build();
  BuildTarget quxProjectTarget=BuildTarget.builder("//qux","qux").build();
  quxProjectNode=XcodeProjectConfigBuilder.createBuilder(quxProjectTarget).setProjectName("qux").setRules(ImmutableSortedSet.of(quxBinTarget)).build();
  BuildTarget workspaceTarget=BuildTarget.builder("//foo","workspace").build();
  workspaceNode=XcodeWorkspaceConfigBuilder.createBuilder(workspaceTarget).setWorkspaceName(Optional.of("workspace")).setSrcTarget(Optional.of(fooBinTarget)).build();
  targetGraph=TargetGraphFactory.newInstance(barLibNode,fooLibNode,fooBinBinaryNode,fooBinNode,bazLibNode,bazTestNode,fooTestNode,fooBinTestNode,quxBinNode,fooProjectNode,barProjectNode,bazProjectNode,quxProjectNode,workspaceNode);
}
