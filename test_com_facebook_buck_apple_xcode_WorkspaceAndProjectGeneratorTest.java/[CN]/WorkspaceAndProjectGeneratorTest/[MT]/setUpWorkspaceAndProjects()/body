{
  BuildTarget barLibTarget=BuildTarget.builder("//bar","lib").build();
  TargetNode<?> barLibNode=AppleLibraryBuilder.createBuilder(barLibTarget).build();
  BuildTarget fooLibTarget=BuildTarget.builder("//foo","lib").build();
  TargetNode<?> fooLibNode=AppleLibraryBuilder.createBuilder(fooLibTarget).setDeps(Optional.of(ImmutableSortedSet.of(barLibTarget))).build();
  BuildTarget fooBinBinaryTarget=BuildTarget.builder("//foo","binbinary").build();
  TargetNode<?> fooBinBinaryNode=AppleBinaryBuilder.createBuilder(fooBinBinaryTarget).setDeps(Optional.of(ImmutableSortedSet.of(fooLibTarget))).build();
  BuildTarget fooBinTarget=BuildTarget.builder("//foo","bin").build();
  TargetNode<?> fooBinNode=AppleBundleBuilder.createBuilder(fooBinTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.APP)).setBinary(fooBinBinaryTarget).build();
  BuildTarget bazLibTarget=BuildTarget.builder("//baz","lib").build();
  TargetNode<?> bazLibNode=AppleLibraryBuilder.createBuilder(bazLibTarget).setDeps(Optional.of(ImmutableSortedSet.of(fooLibTarget))).build();
  BuildTarget bazTestLibTarget=BuildTarget.builder("//baz","testlib").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build();
  TargetNode<?> bazTestLibNode=AppleLibraryBuilder.createBuilder(bazTestLibTarget).build();
  BuildTarget bazTestBundleTarget=BuildTarget.builder("//baz","xctest").build();
  TargetNode<?> bazTestBundleNode=AppleBundleBuilder.createBuilder(bazTestBundleTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setBinary(bazTestLibTarget).build();
  BuildTarget bazTestTarget=BuildTarget.builder("//baz","test").build();
  TargetNode<?> bazTestNode=AppleTestBuilder.createBuilder(bazTestTarget).setTestBundle(bazTestBundleTarget).setSourceUnderTest(Optional.of(ImmutableSortedSet.of(bazLibTarget))).build();
  BuildTarget fooTestLibTarget=BuildTarget.builder("//foo","lib-testlib").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build();
  TargetNode<?> fooTestLibNode=AppleLibraryBuilder.createBuilder(fooTestLibTarget).setDeps(Optional.of(ImmutableSortedSet.of(bazLibTarget))).build();
  BuildTarget fooTestBundleTarget=BuildTarget.builder("//foo","lib-xctest").build();
  TargetNode<?> fooTestBundleNode=AppleBundleBuilder.createBuilder(fooTestBundleTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setBinary(fooTestLibTarget).build();
  BuildTarget fooTestTarget=BuildTarget.builder("//foo","lib-test").build();
  TargetNode<?> fooTestNode=AppleTestBuilder.createBuilder(fooTestTarget).setTestBundle(fooTestBundleTarget).setSourceUnderTest(Optional.of(ImmutableSortedSet.of(fooLibTarget))).build();
  BuildTarget fooBinTestLibTarget=BuildTarget.builder("//foo","bin-testlib").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build();
  TargetNode<?> fooBinTestLibNode=AppleLibraryBuilder.createBuilder(fooBinTestLibTarget).build();
  BuildTarget fooBinTestBundleTarget=BuildTarget.builder("//foo","bin-xctest").build();
  TargetNode<?> fooBinTestBundleNode=AppleBundleBuilder.createBuilder(fooBinTestBundleTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setBinary(fooBinTestLibTarget).build();
  BuildTarget fooBinTestTarget=BuildTarget.builder("//foo","bin-test").build();
  TargetNode<?> fooBinTestNode=AppleTestBuilder.createBuilder(fooBinTestTarget).setTestBundle(fooBinTestBundleTarget).setSourceUnderTest(Optional.of(ImmutableSortedSet.of(fooBinTarget))).build();
  BuildTarget quxBinTarget=BuildTarget.builder("//qux","bin").build();
  TargetNode<?> quxBinNode=AppleBinaryBuilder.createBuilder(quxBinTarget).setDeps(Optional.of(ImmutableSortedSet.of(barLibTarget))).build();
  BuildTarget fooProjectTarget=BuildTarget.builder("//foo","foo").build();
  fooProjectNode=XcodeProjectConfigBuilder.createBuilder(fooProjectTarget).setProjectName("foo").setRules(ImmutableSortedSet.of(fooLibTarget,fooBinBinaryTarget,fooBinTarget,fooTestLibTarget,fooTestBundleTarget,fooBinTestLibTarget,fooBinTestBundleTarget)).build();
  BuildTarget barProjectTarget=BuildTarget.builder("//bar","bar").build();
  barProjectNode=XcodeProjectConfigBuilder.createBuilder(barProjectTarget).setProjectName("bar").setRules(ImmutableSortedSet.of(barLibTarget)).build();
  BuildTarget bazProjectTarget=BuildTarget.builder("//baz","baz").build();
  bazProjectNode=XcodeProjectConfigBuilder.createBuilder(bazProjectTarget).setProjectName("baz").setRules(ImmutableSortedSet.of(bazLibTarget,bazTestLibTarget,bazTestBundleTarget)).build();
  BuildTarget quxProjectTarget=BuildTarget.builder("//qux","qux").build();
  quxProjectNode=XcodeProjectConfigBuilder.createBuilder(quxProjectTarget).setProjectName("qux").setRules(ImmutableSortedSet.of(quxBinTarget)).build();
  BuildTarget workspaceTarget=BuildTarget.builder("//foo","workspace").build();
  workspaceNode=XcodeWorkspaceConfigBuilder.createBuilder(workspaceTarget).setWorkspaceName(Optional.of("workspace")).setSrcTarget(Optional.of(fooBinTarget)).build();
  targetGraph=TargetGraphFactory.newInstance(barLibNode,fooLibNode,fooBinBinaryNode,fooBinNode,bazLibNode,bazTestLibNode,bazTestBundleNode,bazTestNode,fooTestLibNode,fooTestBundleNode,fooTestNode,fooBinTestLibNode,fooBinTestBundleNode,fooBinTestNode,quxBinNode,fooProjectNode,barProjectNode,bazProjectNode,quxProjectNode,workspaceNode);
}
