{
  boolean annotates=out.annotates();
  int regSz=getRegistersSize();
  int outsSz=getOutsSize();
  int insSz=getInsSize();
  int insnsSz=code.getInsns().codeSize();
  boolean needPadding=(insnsSz & 1) != 0;
  int triesSz=(catches == null) ? 0 : catches.triesSize();
  int debugOff=(debugInfo == null) ? 0 : debugInfo.getAbsoluteOffset();
  if (annotates) {
    out.annotate(0,offsetString() + ' ' + ref.toHuman());
    out.annotate(2,"  registers_size: " + Hex.u2(regSz));
    out.annotate(2,"  ins_size:       " + Hex.u2(insSz));
    out.annotate(2,"  outs_size:      " + Hex.u2(outsSz));
    out.annotate(2,"  tries_size:     " + Hex.u2(triesSz));
    out.annotate(4,"  debug_off:      " + Hex.u4(debugOff));
    out.annotate(4,"  insns_size:     " + Hex.u4(insnsSz));
    int size=throwsList.size();
    if (size != 0) {
      out.annotate(0,"  throws " + StdTypeList.toHuman(throwsList));
    }
  }
  out.writeShort(regSz);
  out.writeShort(insSz);
  out.writeShort(outsSz);
  out.writeShort(triesSz);
  out.writeInt(debugOff);
  out.writeInt(insnsSz);
  writeCodes(file,out);
  if (catches != null) {
    if (needPadding) {
      if (annotates) {
        out.annotate(2,"  padding: 0");
      }
      out.writeShort(0);
    }
    catches.writeTo(file,out);
  }
  if (annotates) {
    if (debugInfo != null) {
      out.annotate(0,"  debug info");
      debugInfo.annotateTo(file,out,"    ");
    }
  }
}
