{
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  steps.add(new RmStep(getProjectFilesystem(),getPathToDex(),true));
  steps.add(new MkdirStep(getProjectFilesystem(),getPathToDex().getParent()));
  final ImmutableSortedMap<String,HashCode> classNamesToHashes=javaLibrary.getClassNamesToHashes();
  final boolean hasClassesToDx=!classNamesToHashes.isEmpty();
  final Supplier<Integer> linearAllocEstimate;
  @Nullable final DxStep dx;
  if (hasClassesToDx) {
    Path pathToOutputFile=javaLibrary.getPathToOutput();
    EstimateLinearAllocStep estimate=new EstimateLinearAllocStep(getProjectFilesystem(),pathToOutputFile);
    steps.add(estimate);
    linearAllocEstimate=estimate;
    dx=new DxStep(getProjectFilesystem(),getPathToDex(),Collections.singleton(pathToOutputFile),EnumSet.of(DxStep.Option.USE_CUSTOM_DX_IF_AVAILABLE,DxStep.Option.RUN_IN_PROCESS,DxStep.Option.NO_OPTIMIZE,DxStep.Option.FORCE_JUMBO));
    steps.add(dx);
    steps.add(new ZipScrubberStep(getProjectFilesystem(),getPathToDex()));
  }
 else {
    dx=null;
    linearAllocEstimate=Suppliers.ofInstance(0);
  }
  String stepName=hasClassesToDx ? "record_dx_success" : "record_empty_dx";
  AbstractExecutionStep recordArtifactAndMetadataStep=new AbstractExecutionStep(stepName){
    @Override public StepExecutionResult execute(    ExecutionContext context) throws IOException {
      if (hasClassesToDx) {
        buildableContext.recordArtifact(getPathToDex());
        @Nullable Collection<String> referencedResources=dx.getResourcesReferencedInCode();
        if (referencedResources != null) {
          buildableContext.addMetadata(REFERENCED_RESOURCES,Ordering.natural().immutableSortedCopy(referencedResources));
        }
      }
      buildableContext.addMetadata(LINEAR_ALLOC_KEY_ON_DISK_METADATA,String.valueOf(linearAllocEstimate.get()));
      buildableContext.addMetadata(CLASSNAMES_TO_HASHES,context.getObjectMapper().writeValueAsString(Maps.transformValues(classNamesToHashes,Functions.toStringFunction())));
      return StepExecutionResult.SUCCESS;
    }
  }
;
  steps.add(recordArtifactAndMetadataStep);
  return steps.build();
}
