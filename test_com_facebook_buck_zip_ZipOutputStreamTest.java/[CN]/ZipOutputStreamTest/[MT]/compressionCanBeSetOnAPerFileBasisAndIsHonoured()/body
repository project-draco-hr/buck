{
  String packageName=getClass().getPackage().getName().replace(".","/");
  URL sample=Resources.getResource(packageName + "/sample-bytes.properties");
  byte[] input=Resources.toByteArray(sample);
  try (CustomZipOutputStream out=ZipOutputStreams.newOutputStream(output)){
    CustomZipEntry entry=new CustomZipEntry("default");
    out.putNextEntry(entry);
    out.write(input);
    entry=new CustomZipEntry("stored");
    entry.setCompressionLevel(NO_COMPRESSION);
    byte[] bytes="stored".getBytes();
    entry.setSize(bytes.length);
    entry.setCrc(Hashing.crc32().hashBytes(bytes).padToLong());
    out.putNextEntry(entry);
    out.write(bytes);
    entry=new CustomZipEntry("best");
    entry.setCompressionLevel(BEST_COMPRESSION);
    out.putNextEntry(entry);
    out.write(input);
  }
   try (ZipInputStream in=new ZipInputStream(Files.newInputStream(output))){
    ZipEntry entry=in.getNextEntry();
    assertEquals("default",entry.getName());
    ByteStreams.copy(in,ByteStreams.nullOutputStream());
    long defaultCompressedSize=entry.getCompressedSize();
    assertNotEquals(entry.getCompressedSize(),entry.getSize());
    entry=in.getNextEntry();
    ByteStreams.copy(in,ByteStreams.nullOutputStream());
    assertEquals("stored",entry.getName());
    assertEquals(entry.getCompressedSize(),entry.getSize());
    entry=in.getNextEntry();
    ByteStreams.copy(in,ByteStreams.nullOutputStream());
    assertEquals("best",entry.getName());
    ByteStreams.copy(in,ByteStreams.nullOutputStream());
    assertThat(entry.getCompressedSize(),lessThan(defaultCompressedSize));
  }
 }
