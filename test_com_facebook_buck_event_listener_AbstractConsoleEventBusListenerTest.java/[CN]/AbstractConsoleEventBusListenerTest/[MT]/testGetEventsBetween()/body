{
  final EventPair zeroToOneHundred=EventPair.proxy(0,100);
  final EventPair oneToTwoHundred=EventPair.proxy(100,200);
  final EventPair twoToThreeHundred=EventPair.proxy(200,300);
  final EventPair threeToFourHundred=EventPair.proxy(300,400);
  final EventPair fourToFiveHundred=EventPair.proxy(400,500);
  List<EventPair> events=ImmutableList.<EventPair>builder().add(zeroToOneHundred).add(oneToTwoHundred).add(twoToThreeHundred).add(threeToFourHundred).add(fourToFiveHundred).build();
  Collection<EventPair> fiftyToThreeHundred=AbstractConsoleEventBusListener.getEventsBetween(50,300,events);
  assertFalse("0-100 event straddled a boundary, should have been replaced by a proxy of 50-100",fiftyToThreeHundred.contains(zeroToOneHundred));
  assertTrue("0-100 event straddled a boundary, should have been replaced by a proxy of 50-100",fiftyToThreeHundred.contains(EventPair.proxy(50,100)));
  assertTrue("Second event (100-200) is totally contained, so it should pass the filter",fiftyToThreeHundred.contains(oneToTwoHundred));
  assertTrue("Third event (200-300) matches the boundary which should be inclusive",fiftyToThreeHundred.contains(twoToThreeHundred));
  assertFalse("Fourth event (300-400) starts on a boundary, so it should have been proxied",fiftyToThreeHundred.contains(threeToFourHundred));
  assertTrue("Fourth event (300-400) starts on a boundary, so it should have been proxied",fiftyToThreeHundred.contains(EventPair.proxy(300,300)));
  assertFalse("Fifth event (400-500) is totally out of range, should be absent",fiftyToThreeHundred.contains(fourToFiveHundred));
}
