{
  ImmutableList.Builder<Step> commands=ImmutableList.builder();
  Path outputDirectory=getOutputDirectory();
  Step mkdir=new MkdirStep(getProjectFilesystem(),outputDirectory);
  commands.add(mkdir);
  ImmutableSortedSet<Path> includePaths;
  if (metaInfDirectory != null) {
    Path stagingRoot=outputDirectory.resolve("meta_inf_staging");
    Path stagingTarget=stagingRoot.resolve("META-INF");
    MakeCleanDirectoryStep createStagingRoot=new MakeCleanDirectoryStep(getProjectFilesystem(),stagingRoot);
    commands.add(createStagingRoot);
    MkdirAndSymlinkFileStep link=new MkdirAndSymlinkFileStep(getProjectFilesystem(),metaInfDirectory != null ? getResolver().getAbsolutePath(metaInfDirectory) : null,stagingTarget);
    commands.add(link);
    includePaths=ImmutableSortedSet.<Path>naturalOrder().add(stagingRoot).addAll(getTransitiveClasspaths()).build();
  }
 else {
    includePaths=ImmutableSortedSet.copyOf(getTransitiveClasspaths());
  }
  Path outputFile=getPathToOutput();
  Path manifestPath=manifestFile == null ? null : getResolver().getAbsolutePath(manifestFile);
  Step jar=new JarDirectoryStep(getProjectFilesystem(),outputFile,includePaths,mainClass,manifestPath,mergeManifests,blacklist);
  commands.add(jar);
  buildableContext.recordArtifact(outputFile);
  return commands.build();
}
