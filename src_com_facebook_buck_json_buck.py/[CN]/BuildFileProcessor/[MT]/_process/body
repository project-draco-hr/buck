def _process(self, build_env, path, implicit_includes=[]):
    '\n        Process a build file or include at the given path.\n        '
    cached = self._cache.get(path)
    if (cached is not None):
        return cached
    self._push_build_env(build_env)
    default_globals = {}
    self._install_functions(default_globals)
    default_globals['include_defs'] = functools.partial(self._include_defs, implicit_includes=implicit_includes)
    for include in implicit_includes:
        include_path = self._get_include_path(include)
        (inner_env, mod) = self._process_include(include_path)
        self._merge_globals(mod, default_globals)
        build_env.includes.add(include_path)
        build_env.includes.update(inner_env.includes)
    module = imp.new_module(path)
    module.__file__ = path
    module.__dict__.update(default_globals)
    with open(path) as f:
        contents = f.read()
    future_features = __future__.absolute_import.compiler_flag
    code = compile(contents, path, 'exec', future_features, 1)
    exec code in module.__dict__
    self._pop_build_env()
    self._cache[path] = (build_env, module)
    return (build_env, module)
