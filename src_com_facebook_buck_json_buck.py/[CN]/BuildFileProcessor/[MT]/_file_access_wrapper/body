def _file_access_wrapper(self, real):
    '\n        Return wrapper around function so that accessing a file produces warning if it is\n        not a known dependency.\n        '

    @functools.wraps(real)
    def wrapper(filename, *arg, **kwargs):
        with self._wrap_file_access(wrap=False):
            if self._called_from_project_file():
                path = os.path.abspath(filename)
                if (path not in self._build_env_stack[(-1)].includes):
                    dep_path = ('//' + os.path.relpath(path, self._project_root))
                    warning_message = ((((('Access to a non-tracked file detected! {0} is not a '.format(path) + "known dependency and it should be added using 'add_build_file_dep' ") + 'function before trying to access the file, e.g.\n') + "'add_build_file_dep('{0}')'\n".format(dep_path)) + "The 'add_build_file_dep' function is documented at ") + 'https://buckbuild.com/function/add_build_file_dep.html\n')
                    self._emit_warning(warning_message, 'sandboxing')
            return real(filename, *arg, **kwargs)
    wrapper._real = real
    return wrapper
