def _process_build_file(self, watch_root, project_prefix, path, implicit_includes=None):
    '\n        Process the build file at the given path.\n        '
    if (implicit_includes is None):
        implicit_includes = []
    relative_path_to_build_file = os.path.relpath(path, self._project_root).replace('\\', '/')
    len_suffix = (- len(('/' + self._build_file_name)))
    base_path = relative_path_to_build_file[:len_suffix]
    dirname = os.path.dirname(path)
    autodeps = None
    autodeps_file = None
    invalid_signature_error_message = None
    try:
        results = self._try_parse_autodeps(dirname)
        if results:
            (autodeps, autodeps_file) = results
    except InvalidSignatureError as e:
        invalid_signature_error_message = e.message
    build_env = BuildFileContext(self._project_root, base_path, dirname, (autodeps or {}), self._allow_empty_globs, self._ignore_paths, self._watchman_client, watch_root, project_prefix, self._sync_cookie_state, self._watchman_error, self._watchman_glob_stat_results, self._watchman_use_glob_generator)
    if autodeps_file:
        build_env.includes.add(autodeps_file)
    if invalid_signature_error_message:
        build_env.diagnostics.add(Diagnostic(message=invalid_signature_error_message, level='fatal', source='autodeps'))
    return self._process(build_env, path, implicit_includes=implicit_includes)
