@contextlib.contextmanager
def _with_env_interceptor(self, read, obj, attr):
    '\n        Wrap a function, found at `obj.attr`, that reads an environment\n        variable in a new function which records the env var read.\n        '
    real = getattr(obj, attr)
    wrapped = self._wrap_env_var_read(read, real)
    setattr(obj, attr, wrapped)
    try:
        yield
    finally:
        setattr(obj, attr, real)
