def process(self, path, diagnostics):
    "\n        Process a build file returning a dict of it's rules and includes.\n        "
    (build_env, mod) = self._process_build_file(os.path.join(self._project_root, path), implicit_includes=self._implicit_includes)
    values = build_env.rules.values()
    values.append({'__includes': ([path] + sorted(build_env.includes)), })
    configs = {}
    for ((section, field), value) in build_env.used_configs.iteritems():
        configs.setdefault(section, {})
        configs[section][field] = value
    values.append({'__configs': configs, })
    diagnostics.update(build_env.diagnostics)
    return values
