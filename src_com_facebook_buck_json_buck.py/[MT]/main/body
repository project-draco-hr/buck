def main():
    to_parent = os.fdopen(os.dup(sys.stdout.fileno()), 'a')
    os.dup2(sys.stderr.fileno(), sys.stdout.fileno())
    parser = optparse.OptionParser()
    parser.add_option('--project_root', action='store', type='string', dest='project_root')
    parser.add_option('--build_file_name', action='store', type='string', dest='build_file_name')
    parser.add_option('--allow_empty_globs', action='store_true', dest='allow_empty_globs', help='Tells the parser not to raise an error when glob returns no results.')
    parser.add_option('--include', action='append', dest='include')
    (options, args) = parser.parse_args()
    options.project_root = cygwin_adjusted_path(options.project_root)
    project_root = os.path.abspath(options.project_root)
    buildFileProcessor = BuildFileProcessor(project_root, options.build_file_name, options.allow_empty_globs, implicit_includes=(options.include or []))
    buildFileProcessor.install_builtins(__builtin__.__dict__)
    for build_file in args:
        build_file = cygwin_adjusted_path(build_file)
        values = buildFileProcessor.process(build_file)
        to_parent.write(json.dumps(values))
        to_parent.flush()
    for build_file in iter(sys.stdin.readline, ''):
        build_file = cygwin_adjusted_path(build_file)
        values = buildFileProcessor.process(build_file.rstrip())
        to_parent.write(json.dumps(values))
        to_parent.flush()
    try:
        to_parent.close()
    except IOError:
        pass
