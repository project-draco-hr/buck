def main():
    to_parent = os.fdopen(os.dup(sys.stdout.fileno()), 'ab')
    os.dup2(sys.stderr.fileno(), sys.stdout.fileno())
    parser = optparse.OptionParser()
    parser.add_option('--project_root', action='store', type='string', dest='project_root')
    parser.add_option('--cell_root', action='callback', type='string', dest='cell_roots', metavar='NAME=PATH', help='Cell roots that can be referenced by includes.', callback=_optparse_store_kv, default={})
    parser.add_option('--build_file_name', action='store', type='string', dest='build_file_name')
    parser.add_option('--allow_empty_globs', action='store_true', dest='allow_empty_globs', help='Tells the parser not to raise an error when glob returns no results.')
    parser.add_option('--use_watchman_glob', action='store_true', dest='use_watchman_glob', help='Invokes `watchman query` to get lists of files instead of globbing in-process.')
    parser.add_option('--watchman_use_glob_generator', action='store_true', dest='watchman_use_glob_generator', help='Uses Watchman glob generator to speed queries')
    parser.add_option('--watchman_glob_stat_results', action='store_true', dest='watchman_glob_stat_results', help='Invokes `stat()` to sanity check result of `watchman query`.')
    parser.add_option('--watchman_socket_path', action='store', type='string', dest='watchman_socket_path', help='Path to Unix domain socket/named pipe as returned by `watchman get-sockname`.')
    parser.add_option('--watchman_query_timeout_ms', action='store', type='int', dest='watchman_query_timeout_ms', help='Maximum time in milliseconds to wait for watchman query to respond.')
    parser.add_option('--include', action='append', dest='include')
    parser.add_option('--config', help='BuckConfig settings available at parse time.')
    parser.add_option('--ignore_paths', help='Paths that should be ignored.')
    parser.add_option('--quiet', action='store_true', dest='quiet', help='Stifles exception backtraces printed to stderr during parsing.')
    parser.add_option('--ignore_buck_autodeps_files', action='store_true', help='Profile every buck file execution')
    parser.add_option('--profile', action='store_true', help='Profile every buck file execution')
    parser.add_option('--enable_build_file_sandboxing', action='store_true', help='Limits abilities of buck files')
    parser.add_option('--build_file_import_whitelist', action='append', dest='build_file_import_whitelist')
    (options, args) = parser.parse_args()
    options.project_root = cygwin_adjusted_path(options.project_root)
    project_root = os.path.abspath(options.project_root)
    cell_roots = dict(((k, os.path.abspath(cygwin_adjusted_path(v))) for (k, v) in options.cell_roots.iteritems()))
    watchman_client = None
    watchman_error = None
    if options.use_watchman_glob:
        import pywatchman
        client_args = {}
        if (options.watchman_query_timeout_ms is not None):
            client_args['timeout'] = max(0.0, (options.watchman_query_timeout_ms / 1000.0))
        else:
            client_args['timeout'] = DEFAULT_WATCHMAN_QUERY_TIMEOUT
        if (options.watchman_socket_path is not None):
            client_args['sockpath'] = options.watchman_socket_path
            client_args['transport'] = 'local'
        watchman_client = pywatchman.client(**client_args)
        watchman_error = pywatchman.WatchmanError
    configs = {}
    if (options.config is not None):
        with open(options.config, 'rb') as f:
            for (section, contents) in bser.loads(f.read()).iteritems():
                for (field, value) in contents.iteritems():
                    configs[(section, field)] = value
    ignore_paths = []
    if (options.ignore_paths is not None):
        with open(options.ignore_paths, 'rb') as f:
            ignore_paths = [make_glob(i) for i in bser.loads(f.read())]
    buildFileProcessor = BuildFileProcessor(project_root, cell_roots, options.build_file_name, options.allow_empty_globs, options.ignore_buck_autodeps_files, watchman_client, watchman_error, options.watchman_glob_stat_results, options.watchman_use_glob_generator, options.enable_build_file_sandboxing, project_import_whitelist=(options.build_file_import_whitelist or []), implicit_includes=(options.include or []), configs=configs, ignore_paths=ignore_paths)
    buildFileProcessor.install_builtins(__builtin__.__dict__)
    orig_excepthook = None
    if options.quiet:
        orig_excepthook = sys.excepthook
        sys.excepthook = silent_excepthook
    with buildFileProcessor.with_env_interceptors():
        for build_file in args:
            query = {'buildFile': build_file, 'watchRoot': project_root, 'projectPrefix': project_root, }
            process_with_diagnostics(query, buildFileProcessor, to_parent, should_profile=options.profile)
        for build_file_query in iter((lambda : bser.load(sys.stdin)), None):
            process_with_diagnostics(build_file_query, buildFileProcessor, to_parent, should_profile=options.profile)
    if options.quiet:
        sys.excepthook = orig_excepthook
    try:
        to_parent.close()
    except IOError:
        pass
