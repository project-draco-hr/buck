@memoized
def glob_watchman(includes, excludes, include_dotfiles, base_path, watchman_watch_root, watchman_project_prefix, sync_cookie_state, watchman_client, diagnostics, watchman_glob_stat_results):
    assert includes, 'The includes argument must be a non-empty list of strings.'
    if watchman_project_prefix:
        relative_root = os.path.join(watchman_project_prefix, base_path)
    else:
        relative_root = base_path
    query_params = format_watchman_query_params(includes, excludes, include_dotfiles, relative_root)
    if sync_cookie_state.use_sync_cookies:
        sync_cookie_state.use_sync_cookies = False
    else:
        query_params['sync_timeout'] = 0
    query = ['query', watchman_watch_root, query_params]
    res = watchman_client.query(*query)
    if res.get('warning'):
        diagnostics.add(DiagnosticMessageAndLevel(message='Watchman warning: {0}'.format(res.get('warning')), level='warning'))
    result = res.get('files', [])
    if watchman_glob_stat_results:
        result = stat_results(base_path, result, diagnostics)
    return sorted(result)
