@provide_for_build
def glob(includes, excludes=[], include_dotfiles=False, build_env=None):
    assert (build_env.type == BuildContextType.BUILD_FILE), 'Cannot use `glob()` at the top-level of an included file.'
    assert (not isinstance(includes, basestring)), 'The first argument to glob() must be a list of strings.'
    assert (not isinstance(excludes, basestring)), 'The excludes argument must be a list of strings.'
    if (not includes):
        results = []
    elif build_env.watchman_client:
        results = glob_watchman(includes, excludes, include_dotfiles, build_env.base_path, build_env.project_root, build_env.sync_cookie_state, build_env.watchman_client)
    else:
        search_base = Path(build_env.dirname)
        results = glob_internal(includes, excludes, include_dotfiles, search_base)
    assert (build_env.allow_empty_globs or results), (('glob(includes={includes}, excludes={excludes}, include_dotfiles={include_dotfiles}) ' + 'returned no results.  (allow_empty_globs is set to false in the Buck ') + 'configuration)').format(includes=includes, excludes=excludes, include_dotfiles=include_dotfiles)
    return results
