@provide_for_build
def glob(includes, excludes=[], include_dotfiles=False, build_env=None, search_base=None):
    assert (build_env.type == BuildContextType.BUILD_FILE), 'Cannot use `glob()` at the top-level of an included file.'
    assert (not isinstance(includes, basestring)), 'The first argument to glob() must be a list of strings.'
    assert (not isinstance(excludes, basestring)), 'The excludes argument must be a list of strings.'
    results = None
    if (not includes):
        results = []
    elif build_env.watchman_client:
        try:
            results = glob_watchman(includes, excludes, include_dotfiles, build_env.base_path, build_env.watchman_watch_root, build_env.watchman_project_prefix, build_env.sync_cookie_state, build_env.watchman_client, build_env.diagnostics)
        except build_env.watchman_error as e:
            build_env.diagnostics.add(DiagnosticMessageAndLevel(message='Watchman error, falling back to slow glob: {0}'.format(e), level='error'))
            try:
                build_env.watchman_client.close()
            except:
                pass
            build_env.watchman_client = None
    if (results is None):
        if (search_base is None):
            search_base = Path(build_env.dirname)
        results = glob_internal(includes, excludes, build_env.ignore_paths, include_dotfiles, search_base, build_env.project_root)
    assert (build_env.allow_empty_globs or results), (('glob(includes={includes}, excludes={excludes}, include_dotfiles={include_dotfiles}) ' + 'returned no results.  (allow_empty_globs is set to false in the Buck ') + 'configuration)').format(includes=includes, excludes=excludes, include_dotfiles=include_dotfiles)
    return results
