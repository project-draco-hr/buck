{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  final FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  final BuildRule dep=GenruleBuilder.newGenruleBuilder(BuildTargetFactory.newInstance("//:dep")).setOut("out").build(resolver,filesystem);
  BuildRuleParams params=new FakeBuildRuleParamsBuilder("//:rule").setDeclaredDeps(ImmutableSortedSet.of(dep)).setProjectFilesystem(filesystem).build();
  BuildRule rule=new NoopBuildRule(params,pathResolver){
    @AddToRuleKey RuleKeyAppendableWithInput input=new RuleKeyAppendableWithInput(new BuildTargetSourcePath(dep.getBuildTarget()));
  }
;
  FakeFileHashCache hashCache=new FakeFileHashCache(ImmutableMap.of(filesystem.resolve(Preconditions.checkNotNull(dep.getPathToOutput())),HashCode.fromInt(0)));
  RuleKey inputKey1=new InputBasedRuleKeyBuilderFactory(0,hashCache,pathResolver).build(rule).get();
  hashCache=new FakeFileHashCache(ImmutableMap.of(filesystem.resolve(Preconditions.checkNotNull(dep.getPathToOutput())),HashCode.fromInt(1)));
  RuleKey inputKey2=new InputBasedRuleKeyBuilderFactory(0,hashCache,pathResolver).build(rule).get();
  assertThat(inputKey1,Matchers.not(Matchers.equalTo(inputKey2)));
}
