{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  ThriftCompiler thriftCompiler=new ThriftCompiler(params,pathResolver,DEFAULT_COMPILER,DEFAULT_FLAGS,DEFAULT_OUTPUT_DIR,DEFAULT_INPUT,DEFAULT_LANGUAGE,DEFAULT_OPTIONS,DEFAULT_INCLUDE_ROOTS,DEFAULT_HEADER_MAPS,DEFAULT_INCLUDES,DEFAULT_GENERATED_SOURCES);
  ImmutableList<Step> expected=ImmutableList.of(new MakeCleanDirectoryStep(params.getProjectFilesystem(),DEFAULT_OUTPUT_DIR),new ThriftCompilerStep(params.getProjectFilesystem().getRootPath(),ImmutableMap.<String,String>of(),ImmutableList.<String>builder().addAll(DEFAULT_COMPILER.getCommandPrefix(pathResolver)).addAll(DEFAULT_FLAGS).build(),DEFAULT_OUTPUT_DIR,pathResolver.getAbsolutePath(DEFAULT_INPUT),DEFAULT_LANGUAGE,DEFAULT_OPTIONS,ImmutableList.<Path>builder().addAll(DEFAULT_HEADER_MAPS).addAll(DEFAULT_INCLUDE_ROOTS).build()));
  ImmutableList<Step> actual=thriftCompiler.getBuildSteps(FakeBuildContext.NOOP_CONTEXT,new FakeBuildableContext());
  assertEquals(expected,actual);
}
