{
  List<MergedNativeLibraryConstituents> allConstituents=new ArrayList<>();
  for (  Map.Entry<String,List<Pattern>> mergeConfigEntry : mergeMap.entrySet()) {
    String mergeSoname=mergeConfigEntry.getKey();
    List<Pattern> patterns=mergeConfigEntry.getValue();
    MergedNativeLibraryConstituents.Builder constituentsBuilder=MergedNativeLibraryConstituents.builder().setSoname(mergeSoname);
    for (    Pattern pattern : patterns) {
      for (      NativeLinkable linkable : allLinkables) {
        if (pattern.matcher(linkable.getBuildTarget().toString()).find()) {
          constituentsBuilder.addLinkables(linkable);
        }
      }
    }
    allConstituents.add(constituentsBuilder.build());
  }
  Map<NativeLinkable,MergedNativeLibraryConstituents> linkableMembership=new HashMap<>();
  for (  MergedNativeLibraryConstituents constituents : allConstituents) {
    boolean hasNonAssets=false;
    boolean hasAssets=false;
    for (    NativeLinkable linkable : constituents.getLinkables()) {
      if (linkableMembership.containsKey(linkable)) {
        throw new RuntimeException(String.format("When processing %s, attempted to merge %s into both %s and %s",buildRuleParams.getBuildTarget(),linkable,linkableMembership.get(linkable),constituents));
      }
      linkableMembership.put(linkable,constituents);
      if (linkableAssetSet.contains(linkable)) {
        hasAssets=true;
      }
 else {
        hasNonAssets=true;
      }
    }
    if (hasAssets && hasNonAssets) {
      StringBuilder sb=new StringBuilder();
      sb.append(String.format("When processing %s, merged lib '%s' contains both asset and non-asset libraries.\n",buildRuleParams.getBuildTarget(),constituents));
      for (      NativeLinkable linkable : constituents.getLinkables()) {
        sb.append(String.format("  %s -> %s\n",linkable,linkableAssetSet.contains(linkable) ? "asset" : "not asset"));
      }
      throw new RuntimeException(sb.toString());
    }
  }
  for (  NativeLinkable linkable : allLinkables) {
    if (!linkableMembership.containsKey(linkable)) {
      linkableMembership.put(linkable,MergedNativeLibraryConstituents.builder().addLinkables(linkable).build());
    }
  }
  return linkableMembership;
}
