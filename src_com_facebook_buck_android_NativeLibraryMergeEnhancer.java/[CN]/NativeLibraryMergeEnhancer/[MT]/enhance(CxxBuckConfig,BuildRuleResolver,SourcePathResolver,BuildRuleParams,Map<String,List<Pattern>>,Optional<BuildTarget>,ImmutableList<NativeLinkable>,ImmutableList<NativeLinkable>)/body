{
  nativeLibraryMergeGlue.isPresent();
  Iterable<NativeLinkable> allLinkables=FluentIterable.from(Iterables.concat(linkables,linkablesAssets)).toSortedList(HasBuildTarget.BUILD_TARGET_COMPARATOR);
  final ImmutableSet<NativeLinkable> linkableAssetSet=ImmutableSet.copyOf(linkablesAssets);
  Map<NativeLinkable,MergedNativeLibraryConstituents> linkableMembership=makeConstituentMap(buildRuleParams,mergeMap,allLinkables,linkableAssetSet);
  Iterable<MergedNativeLibraryConstituents> orderedConstituents=getOrderedMergedConstituents(buildRuleParams,linkableMembership);
  Set<MergedLibNativeLinkable> mergedLinkables=createLinkables(cxxBuckConfig,ruleResolver,pathResolver,buildRuleParams,orderedConstituents);
  return NativeLibraryMergeEnhancementResult.builder().addAllMergedLinkables(FluentIterable.from(mergedLinkables).filter(new Predicate<MergedLibNativeLinkable>(){
    @Override public boolean apply(    MergedLibNativeLinkable linkable){
      return Collections.disjoint(linkable.constituents.getLinkables(),linkableAssetSet);
    }
  }
)).addAllMergedLinkablesAssets(FluentIterable.from(mergedLinkables).filter(new Predicate<MergedLibNativeLinkable>(){
    @Override public boolean apply(    MergedLibNativeLinkable linkable){
      return linkableAssetSet.containsAll(linkable.constituents.getLinkables());
    }
  }
)).build();
}
