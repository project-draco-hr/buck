{
  TargetNode<AppleTestDescription.Arg> combinableTest1=AppleTestBuilder.createBuilder(BuildTarget.builder(rootCell.getRoot(),"//foo","combinableTest1").build()).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setInfoPlist(new FakeSourcePath("Info.plist")).setCanGroup(Optional.of(true)).build();
  TargetNode<AppleTestDescription.Arg> combinableTest2=AppleTestBuilder.createBuilder(BuildTarget.builder(rootCell.getRoot(),"//bar","combinableTest2").build()).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setInfoPlist(new FakeSourcePath("Info.plist")).setCanGroup(Optional.of(true)).build();
  TargetNode<AppleTestDescription.Arg> testMarkedUncombinable=AppleTestBuilder.createBuilder(BuildTarget.builder(rootCell.getRoot(),"//foo","testMarkedUncombinable").build()).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setInfoPlist(new FakeSourcePath("Info.plist")).setCanGroup(Optional.of(false)).build();
  TargetNode<AppleTestDescription.Arg> anotherTest=AppleTestBuilder.createBuilder(BuildTarget.builder(rootCell.getRoot(),"//foo","anotherTest").build()).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.OCTEST)).setInfoPlist(new FakeSourcePath("Info.plist")).setCanGroup(Optional.of(true)).build();
  TargetNode<AppleLibraryDescription.Arg> library=AppleLibraryBuilder.createBuilder(BuildTarget.builder(rootCell.getRoot(),"//foo","lib").build()).setTests(Optional.of(ImmutableSortedSet.of(combinableTest1.getBuildTarget(),combinableTest2.getBuildTarget(),testMarkedUncombinable.getBuildTarget(),anotherTest.getBuildTarget()))).build();
  TargetNode<XcodeWorkspaceConfigDescription.Arg> workspace=XcodeWorkspaceConfigBuilder.createBuilder(BuildTarget.builder(rootCell.getRoot(),"//foo","workspace").build()).setSrcTarget(Optional.of(library.getBuildTarget())).setWorkspaceName(Optional.of("workspace")).build();
  TargetGraph targetGraph=TargetGraphFactory.newInstance(library,combinableTest1,combinableTest2,testMarkedUncombinable,anotherTest,workspace);
  WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(rootCell,targetGraph,workspace.getConstructorArg(),workspaceNode.getBuildTarget(),ImmutableSet.of(ProjectGenerator.Option.INCLUDE_TESTS,ProjectGenerator.Option.INCLUDE_DEPENDENCIES_TESTS),false,false,ImmutableList.<String>of(),ImmutableList.<BuildTarget>of(),false,false,new AlwaysFoundExecutableFinder(),ImmutableMap.<String,String>of(),PLATFORMS,DEFAULT_PLATFORM,"BUCK",getSourcePathResolverForNodeFunction(targetGraph),getFakeBuckEventBus(),halideBuckConfig,cxxBuckConfig);
  generator.setGroupableTests(AppleBuildRules.filterGroupableTests(targetGraph.getNodes()));
  Map<Path,ProjectGenerator> projectGenerators=Maps.newHashMap();
  generator.generateWorkspaceAndDependentProjects(projectGenerators);
  PBXTarget combinableTestTarget1=ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerators.get(Paths.get("foo")).getGeneratedProject(),"//foo:combinableTest1");
  assertEquals("Test in the bundle should be built as a static library.",ProductType.STATIC_LIBRARY,combinableTestTarget1.getProductType());
  PBXTarget combinableTestTarget2=ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerators.get(Paths.get("bar")).getGeneratedProject(),"//bar:combinableTest2");
  assertEquals("Other test in the bundle should be built as a static library.",ProductType.STATIC_LIBRARY,combinableTestTarget2.getProductType());
  PBXTarget notCombinedTest=ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerators.get(Paths.get("foo")).getGeneratedProject(),"//foo:anotherTest");
  assertEquals("Test that is not combined with other tests should also generate a test bundle.",ProductType.STATIC_LIBRARY,notCombinedTest.getProductType());
  PBXTarget uncombinableTest=ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerators.get(Paths.get("foo")).getGeneratedProject(),"//foo:testMarkedUncombinable");
  assertEquals("Test marked uncombinable should not be combined",ProductType.UNIT_TEST,uncombinableTest.getProductType());
  PBXTarget combinedTestBundle=ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(generator.getCombinedTestsProjectGenerator().get().getGeneratedProject(),"_BuckCombinedTest-xctest-0");
  assertEquals("Combined test project target should be test bundle.",ProductType.UNIT_TEST,combinedTestBundle.getProductType());
  XCScheme scheme=generator.getSchemeGenerators().get("workspace").getOutputScheme().get();
  XCScheme.TestAction testAction=scheme.getTestAction().get();
  assertThat("Combined test target should be a testable",testAction.getTestables(),hasItem(testableWithName("_BuckCombinedTest-xctest-0")));
  assertThat("Uncombined but groupable test should be a testable",testAction.getTestables(),hasItem(testableWithName("_BuckCombinedTest-octest-1")));
  assertThat("Bundled test library is not a testable",testAction.getTestables(),not(hasItem(testableWithName("combinableTest1"))));
  XCScheme.BuildAction buildAction=scheme.getBuildAction().get();
  assertThat("Bundled test library should be built for tests",buildAction.getBuildActionEntries(),hasItem(withNameAndBuildingFor("combinableTest1",equalTo(XCScheme.BuildActionEntry.BuildFor.TEST_ONLY))));
  assertThat("Combined test library should be built for tests",buildAction.getBuildActionEntries(),hasItem(withNameAndBuildingFor("_BuckCombinedTest-xctest-0",equalTo(XCScheme.BuildActionEntry.BuildFor.TEST_ONLY))));
}
