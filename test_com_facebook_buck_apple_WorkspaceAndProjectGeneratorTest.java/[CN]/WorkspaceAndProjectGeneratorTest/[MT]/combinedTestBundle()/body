{
  TargetNode<AppleNativeTargetDescriptionArg> library=AppleLibraryBuilder.createBuilder(BuildTarget.builder("//foo","lib").build()).build();
  TargetNode<AppleTestDescription.Arg> combinableTest1=AppleTestBuilder.createBuilder(BuildTarget.builder("//foo","combinableTest1").build()).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setSourceUnderTest(Optional.of(ImmutableSortedSet.of(library.getBuildTarget()))).setCanGroup(Optional.of(true)).build();
  TargetNode<AppleTestDescription.Arg> combinableTest2=AppleTestBuilder.createBuilder(BuildTarget.builder("//bar","combinableTest2").build()).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setSourceUnderTest(Optional.of(ImmutableSortedSet.of(library.getBuildTarget()))).setCanGroup(Optional.of(true)).build();
  TargetNode<AppleTestDescription.Arg> testMarkedUncombinable=AppleTestBuilder.createBuilder(BuildTarget.builder("//foo","testMarkedUncombinable").build()).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setSourceUnderTest(Optional.of(ImmutableSortedSet.of(library.getBuildTarget()))).setCanGroup(Optional.of(false)).build();
  TargetNode<AppleTestDescription.Arg> anotherTest=AppleTestBuilder.createBuilder(BuildTarget.builder("//foo","anotherTest").build()).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.OCTEST)).setSourceUnderTest(Optional.of(ImmutableSortedSet.of(library.getBuildTarget()))).setCanGroup(Optional.of(true)).build();
  TargetNode<XcodeProjectConfigDescription.Arg> fooProject=XcodeProjectConfigBuilder.createBuilder(BuildTarget.builder("//foo","project").build()).setProjectName("foo").setRules(ImmutableSortedSet.of(library.getBuildTarget(),combinableTest1.getBuildTarget(),testMarkedUncombinable.getBuildTarget(),anotherTest.getBuildTarget())).build();
  TargetNode<XcodeProjectConfigDescription.Arg> barProject=XcodeProjectConfigBuilder.createBuilder(BuildTarget.builder("//bar","project").build()).setProjectName("bar").setRules(ImmutableSortedSet.of(combinableTest2.getBuildTarget())).build();
  TargetNode<XcodeWorkspaceConfigDescription.Arg> workspace=XcodeWorkspaceConfigBuilder.createBuilder(BuildTarget.builder("//foo","workspace").build()).setSrcTarget(Optional.of(library.getBuildTarget())).setWorkspaceName(Optional.of("workspace")).build();
  TargetGraph targetGraph=TargetGraphFactory.newInstance(library,combinableTest1,combinableTest2,testMarkedUncombinable,anotherTest,fooProject,barProject,workspace);
  WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(projectFilesystem,targetGraph,workspace,ImmutableSet.of(ProjectGenerator.Option.INCLUDE_TESTS),ImmutableMultimap.of(library.getBuildTarget(),combinableTest1,library.getBuildTarget(),combinableTest2,library.getBuildTarget(),testMarkedUncombinable,library.getBuildTarget(),anotherTest),false,"BUCK");
  generator.setGroupableTests(AppleBuildRules.filterGroupableTests(targetGraph.getNodes()));
  Map<TargetNode<?>,ProjectGenerator> projectGenerators=Maps.newHashMap();
  generator.generateWorkspaceAndDependentProjects(projectGenerators);
  PBXTarget combinableTestTarget1=ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerators.get(fooProject).getGeneratedProject(),"//foo:combinableTest1");
  assertEquals("Test in the bundle should be built as a static library.",PBXTarget.ProductType.STATIC_LIBRARY,combinableTestTarget1.getProductType());
  PBXTarget combinableTestTarget2=ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerators.get(barProject).getGeneratedProject(),"//bar:combinableTest2");
  assertEquals("Other test in the bundle should be built as a static library.",PBXTarget.ProductType.STATIC_LIBRARY,combinableTestTarget2.getProductType());
  PBXTarget notCombinedTest=ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerators.get(fooProject).getGeneratedProject(),"//foo:anotherTest");
  assertEquals("Test that is not combined with other tests should also generate a test bundle.",PBXTarget.ProductType.STATIC_LIBRARY,notCombinedTest.getProductType());
  PBXTarget uncombinableTest=ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerators.get(fooProject).getGeneratedProject(),"//foo:testMarkedUncombinable");
  assertEquals("Test marked uncombinable should not be combined",PBXTarget.ProductType.UNIT_TEST,uncombinableTest.getProductType());
  PBXTarget combinedTestBundle=ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(generator.getCombinedTestsProjectGenerator().get().getGeneratedProject(),"_BuckCombinedTest-xctest-0");
  assertEquals("Combined test project target should be test bundle.",PBXTarget.ProductType.UNIT_TEST,combinedTestBundle.getProductType());
  XCScheme scheme=generator.getSchemeGenerator().get().getOutputScheme().get();
  XCScheme.TestAction testAction=scheme.getTestAction().get();
  assertThat("Combined test target should be a testable",testAction.getTestables(),hasItem(testableWithName("_BuckCombinedTest-xctest-0")));
  assertThat("Uncombined but groupable test should be a testable",testAction.getTestables(),hasItem(testableWithName("_BuckCombinedTest-octest-1")));
  assertThat("Bundled test library is not a testable",testAction.getTestables(),not(hasItem(testableWithName("combinableTest1"))));
  XCScheme.BuildAction buildAction=scheme.getBuildAction().get();
  assertThat("Bundled test library should be built for tests",buildAction.getBuildActionEntries(),hasItem(withNameAndBuildingFor("combinableTest1",equalTo(XCScheme.BuildActionEntry.BuildFor.TEST_ONLY))));
  assertThat("Combined test library should be built for tests",buildAction.getBuildActionEntries(),hasItem(withNameAndBuildingFor("_BuckCombinedTest-xctest-0",equalTo(XCScheme.BuildActionEntry.BuildFor.TEST_ONLY))));
}
