{
  Optional<Path> buck=new ExecutableFinder().getOptionalExecutable(Paths.get("buck"),ImmutableMap.<String,String>of());
  assumeThat(buck.isPresent(),is(true));
  WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(projectFilesystem,targetGraph,workspaceNode.getConstructorArg(),workspaceNode.getBuildTarget(),ImmutableSet.of(ProjectGenerator.Option.INCLUDE_TESTS,ProjectGenerator.Option.INCLUDE_DEPENDENCIES_TESTS),false,true,ImmutableList.<String>of(),false,true,new AlwaysFoundExecutableFinder(),ImmutableMap.<String,String>of(),PLATFORMS,DEFAULT_PLATFORM,"BUCK",getOutputPathOfNodeFunction(targetGraph),getFakeBuckEventBus());
  Map<Path,ProjectGenerator> projectGenerators=new HashMap<>();
  generator.generateWorkspaceAndDependentProjects(projectGenerators);
  ProjectGenerator fooProjectGenerator=projectGenerators.get(Paths.get("foo"));
  assertThat(fooProjectGenerator,is(notNullValue()));
  PBXTarget buildWithBuckTarget=null;
  for (  PBXTarget target : fooProjectGenerator.getGeneratedProject().getTargets()) {
    if (target.getProductName() != null && target.getProductName().endsWith("-Buck")) {
      buildWithBuckTarget=target;
      break;
    }
  }
  assertThat(buildWithBuckTarget,is(notNullValue()));
  assertThat(buildWithBuckTarget,is(instanceOf(PBXAggregateTarget.class)));
  PBXShellScriptBuildPhase phase=(PBXShellScriptBuildPhase)buildWithBuckTarget.getBuildPhases().get(0);
  String script=phase.getShellScript();
  assertThat(script.contains("--config cxx.default_platform=$PLATFORM_NAME-$arch"),Matchers.equalTo(true));
}
