{
  BuildTarget bazTestTarget=BuildTarget.builder(ROOT,"//baz","BazTest").build();
  BuildTarget fooBinTestTarget=BuildTarget.builder(ROOT,"//foo","FooBinTest").build();
  BuildTarget fooTestTarget=BuildTarget.builder(ROOT,"//foo","FooLibTest").build();
  BuildTarget barLibTarget=BuildTarget.builder(ROOT,"//bar","BarLib").build();
  TargetNode<?> barLibNode=AppleLibraryBuilder.createBuilder(barLibTarget).build();
  BuildTarget fooLibTarget=BuildTarget.builder(ROOT,"//foo","FooLib").build();
  TargetNode<?> fooLibNode=AppleLibraryBuilder.createBuilder(fooLibTarget).setDeps(Optional.of(ImmutableSortedSet.of(barLibTarget))).setTests(Optional.of(ImmutableSortedSet.of(fooTestTarget))).build();
  BuildTarget fooBinBinaryTarget=BuildTarget.builder(ROOT,"//foo","FooBinBinary").build();
  TargetNode<?> fooBinBinaryNode=AppleBinaryBuilder.createBuilder(fooBinBinaryTarget).setDeps(Optional.of(ImmutableSortedSet.of(fooLibTarget))).build();
  BuildTarget fooBinTarget=BuildTarget.builder(ROOT,"//foo","FooBin").build();
  TargetNode<?> fooBinNode=AppleBundleBuilder.createBuilder(fooBinTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.APP)).setInfoPlist(new FakeSourcePath("Info.plist")).setBinary(fooBinBinaryTarget).setTests(Optional.of(ImmutableSortedSet.of(fooBinTestTarget))).build();
  BuildTarget bazLibTarget=BuildTarget.builder(ROOT,"//baz","BazLib").build();
  TargetNode<?> bazLibNode=AppleLibraryBuilder.createBuilder(bazLibTarget).setDeps(Optional.of(ImmutableSortedSet.of(fooLibTarget))).setTests(Optional.of(ImmutableSortedSet.of(bazTestTarget))).build();
  TargetNode<?> bazTestNode=AppleTestBuilder.createBuilder(bazTestTarget).setDeps(Optional.of(ImmutableSortedSet.of(bazLibTarget))).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setInfoPlist(new FakeSourcePath("Info.plist")).build();
  TargetNode<?> fooTestNode=AppleTestBuilder.createBuilder(fooTestTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setInfoPlist(new FakeSourcePath("Info.plist")).setDeps(Optional.of(ImmutableSortedSet.of(bazLibTarget))).build();
  TargetNode<?> fooBinTestNode=AppleTestBuilder.createBuilder(fooBinTestTarget).setDeps(Optional.of(ImmutableSortedSet.of(fooBinTarget))).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setInfoPlist(new FakeSourcePath("Info.plist")).build();
  BuildTarget quxBinTarget=BuildTarget.builder(ROOT,"//qux","QuxBin").build();
  TargetNode<?> quxBinNode=AppleBinaryBuilder.createBuilder(quxBinTarget).setDeps(Optional.of(ImmutableSortedSet.of(barLibTarget))).build();
  BuildTarget workspaceTarget=BuildTarget.builder(ROOT,"//foo","workspace").build();
  workspaceNode=XcodeWorkspaceConfigBuilder.createBuilder(workspaceTarget).setWorkspaceName(Optional.of("workspace")).setSrcTarget(Optional.of(fooBinTarget)).build();
  BuildTarget workspaceWithExtraSchemeTarget=BuildTarget.builder(ROOT,"//qux","workspace").build();
  workspaceWithExtraSchemeNode=XcodeWorkspaceConfigBuilder.createBuilder(workspaceWithExtraSchemeTarget).setWorkspaceName(Optional.of("workspace")).setSrcTarget(Optional.of(quxBinTarget)).setExtraSchemes(Optional.of(ImmutableSortedMap.of("FooScheme",workspaceTarget))).build();
  targetGraph=TargetGraphFactory.newInstance(barLibNode,fooLibNode,fooBinBinaryNode,fooBinNode,bazLibNode,bazTestNode,fooTestNode,fooBinTestNode,quxBinNode,workspaceNode,workspaceWithExtraSchemeNode);
}
