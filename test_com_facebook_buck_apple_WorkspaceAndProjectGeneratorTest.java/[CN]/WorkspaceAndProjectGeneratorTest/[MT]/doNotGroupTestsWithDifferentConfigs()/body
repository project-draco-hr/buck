{
  ImmutableSortedMap<String,ImmutableMap<String,String>> configs=ImmutableSortedMap.of("Debug",ImmutableMap.of("KEY","VALUE"));
  TargetNode<AppleTestDescription.Arg> combinableTest1=AppleTestBuilder.createBuilder(BuildTarget.builder(ROOT,"//foo","test1").build()).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setInfoPlist(new FakeSourcePath("Info.plist")).setCanGroup(Optional.of(true)).build();
  TargetNode<AppleTestDescription.Arg> combinableTest2=AppleTestBuilder.createBuilder(BuildTarget.builder(ROOT,"//bar","test2").build()).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setInfoPlist(new FakeSourcePath("Info.plist")).setConfigs(Optional.of(configs)).setCanGroup(Optional.of(true)).build();
  ImmutableMultimap.Builder<AppleTestBundleParamsKey,TargetNode<AppleTestDescription.Arg>> groupedTestsMapBuilder=ImmutableMultimap.builder();
  ImmutableSetMultimap.Builder<String,TargetNode<AppleTestDescription.Arg>> ungroupedTestsMapBuilder=ImmutableSetMultimap.builder();
  WorkspaceAndProjectGenerator.groupSchemeTests(ImmutableSet.of(combinableTest1,combinableTest2),ImmutableSetMultimap.of("workspace",combinableTest1,"workspace",combinableTest2),groupedTestsMapBuilder,ungroupedTestsMapBuilder);
  ImmutableMultimap<AppleTestBundleParamsKey,TargetNode<AppleTestDescription.Arg>> groupedTestsMap=groupedTestsMapBuilder.build();
  assertThat(ungroupedTestsMapBuilder.build().entries(),empty());
  assertEquals(ImmutableSortedSet.of(combinableTest1,combinableTest2),ImmutableSortedSet.copyOf(groupedTestsMap.values()));
  ImmutableList<Map.Entry<AppleTestBundleParamsKey,TargetNode<AppleTestDescription.Arg>>> groupedTests=ImmutableList.copyOf(groupedTestsMap.entries());
  assertEquals(2,groupedTests.size());
  assertNotEquals(groupedTests.get(0).getKey(),groupedTests.get(1).getKey());
}
