{
  Optional<Path> buck=new ExecutableFinder().getOptionalExecutable(Paths.get("buck"),ImmutableMap.<String,String>of());
  assumeThat(buck.isPresent(),is(true));
  WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(projectFilesystem,reactNativeBuckConfig,targetGraph,workspaceNode.getConstructorArg(),workspaceNode.getBuildTarget(),ImmutableSet.of(ProjectGenerator.Option.INCLUDE_TESTS,ProjectGenerator.Option.INCLUDE_DEPENDENCIES_TESTS),false,true,ImmutableList.<String>of(),false,new AlwaysFoundExecutableFinder(),ImmutableMap.<String,String>of(),PLATFORMS,DEFAULT_PLATFORM,"BUCK",getOutputPathOfNodeFunction(targetGraph),getFakeBuckEventBus());
  Map<Path,ProjectGenerator> projectGenerators=new HashMap<>();
  generator.generateWorkspaceAndDependentProjects(projectGenerators);
  ProjectGenerator fooProjectGenerator=projectGenerators.get(Paths.get("foo"));
  assertThat(fooProjectGenerator,is(notNullValue()));
  PBXTarget buildWithBuckTarget=null;
  for (  PBXTarget target : fooProjectGenerator.getGeneratedProject().getTargets()) {
    if (target.getProductName() != null && target.getProductName().endsWith("-Buck")) {
      buildWithBuckTarget=target;
      break;
    }
  }
  assertThat(buildWithBuckTarget,is(notNullValue()));
  assertThat(buildWithBuckTarget,is(instanceOf(PBXAggregateTarget.class)));
  String gid=buildWithBuckTarget.getGlobalID();
  Optional<XCScheme> scheme=Iterables.getOnlyElement(generator.getSchemeGenerators().values()).getOutputScheme();
  assertThat(scheme.isPresent(),is(true));
  XCScheme.BuildableReference buildWithBuckBuildableReference=null;
  for (  XCScheme.BuildActionEntry buildActionEntry : scheme.get().getBuildAction().get().getBuildActionEntries()) {
    XCScheme.BuildableReference buildableReference=buildActionEntry.getBuildableReference();
    if (buildableReference.getBlueprintIdentifier().equals(gid)) {
      buildWithBuckBuildableReference=buildableReference;
    }
  }
  assertThat(buildWithBuckBuildableReference,is(notNullValue()));
  assertThat(buildWithBuckBuildableReference.getBuildableName(),equalTo("//foo:bin-Buck"));
}
