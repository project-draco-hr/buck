{
  WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(projectFilesystem,reactNativeBuckConfig,targetGraph,workspaceNode.getConstructorArg(),workspaceNode.getBuildTarget(),ImmutableSet.of(ProjectGenerator.Option.INCLUDE_TESTS),false,false,ImmutableList.<String>of(),"BUCK",getOutputPathOfNodeFunction(targetGraph));
  Map<Path,ProjectGenerator> projectGenerators=new HashMap<>();
  generator.generateWorkspaceAndDependentProjects(projectGenerators);
  ProjectGenerator fooProjectGenerator=projectGenerators.get(Paths.get("foo"));
  ProjectGenerator barProjectGenerator=projectGenerators.get(Paths.get("bar"));
  ProjectGenerator bazProjectGenerator=projectGenerators.get(Paths.get("baz"));
  ProjectGenerator quxProjectGenerator=projectGenerators.get(Paths.get("qux"));
  assertNull("The Qux project should not be generated at all",quxProjectGenerator);
  assertNotNull("The Foo project should have been generated",fooProjectGenerator);
  assertNotNull("The Bar project should have been generated",barProjectGenerator);
  assertNotNull("The Baz project should have been generated",bazProjectGenerator);
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(fooProjectGenerator.getGeneratedProject(),"//foo:bin");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(fooProjectGenerator.getGeneratedProject(),"//foo:lib");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(fooProjectGenerator.getGeneratedProject(),"//foo:bin-xctest");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(fooProjectGenerator.getGeneratedProject(),"//foo:lib-xctest");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(barProjectGenerator.getGeneratedProject(),"//bar:lib");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(bazProjectGenerator.getGeneratedProject(),"//baz:lib");
}
