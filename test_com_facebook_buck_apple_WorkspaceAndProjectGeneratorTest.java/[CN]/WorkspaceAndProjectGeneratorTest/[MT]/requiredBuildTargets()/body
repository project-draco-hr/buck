{
  BuildTarget genruleTarget=BuildTarget.builder(ROOT,"//foo","gen").build();
  TargetNode<GenruleDescription.Arg> genrule=GenruleBuilder.newGenruleBuilder(genruleTarget).setOut("source.m").build();
  BuildTarget libraryTarget=BuildTarget.builder(ROOT,"//foo","lib").build();
  TargetNode<AppleLibraryDescription.Arg> library=AppleLibraryBuilder.createBuilder(libraryTarget).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new BuildTargetSourcePath(genruleTarget))))).build();
  TargetNode<XcodeWorkspaceConfigDescription.Arg> workspaceNode=XcodeWorkspaceConfigBuilder.createBuilder(BuildTarget.builder(ROOT,"//foo","workspace").build()).setSrcTarget(Optional.of(libraryTarget)).build();
  TargetGraph targetGraph=TargetGraphFactory.newInstance(genrule,library,workspaceNode);
  WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(projectFilesystem,targetGraph,workspaceNode.getConstructorArg(),workspaceNode.getBuildTarget(),ImmutableSet.<ProjectGenerator.Option>of(),false,false,ImmutableList.<String>of(),false,false,new AlwaysFoundExecutableFinder(),ImmutableMap.<String,String>of(),PLATFORMS,DEFAULT_PLATFORM,"BUCK",getSourcePathResolverForNodeFunction(targetGraph),getFakeBuckEventBus(),halideBuckConfig);
  Map<Path,ProjectGenerator> projectGenerators=new HashMap<>();
  generator.generateWorkspaceAndDependentProjects(projectGenerators);
  assertEquals(generator.getRequiredBuildTargets(),ImmutableSet.of(genruleTarget));
}
