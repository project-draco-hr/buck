{
  Optional<String> proguardConfig=params.getOptionalStringAttribute("proguard_config");
  builder.setProguardConfig(proguardConfig.transform(params.getResolveFilePathRelativeToBuildFileDirectoryTransform()));
  List<String> postprocessClassesCommands=params.getOptionalListAttribute("postprocess_classes_commands");
  builder.addPostprocessClassesCommands(postprocessClassesCommands);
  for (  String exportedDep : params.getOptionalListAttribute("exported_deps")) {
    BuildTarget buildTarget=params.resolveBuildTarget(exportedDep);
    builder.addExportedDep(buildTarget);
  }
  extractAnnotationProcessorParameters(builder.getAnnotationProcessingBuilder(),builder,params);
  Optional<String> sourceLevel=params.getOptionalStringAttribute("source");
  if (sourceLevel.isPresent()) {
    builder.setSourceLevel(sourceLevel.get());
  }
  Optional<String> targetLevel=params.getOptionalStringAttribute("target");
  if (targetLevel.isPresent()) {
    builder.setTargetLevel(targetLevel.get());
  }
}
