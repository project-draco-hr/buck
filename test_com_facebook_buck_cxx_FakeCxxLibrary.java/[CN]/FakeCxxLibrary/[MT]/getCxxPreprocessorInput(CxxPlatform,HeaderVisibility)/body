{
switch (headerVisibility) {
case PUBLIC:
    return CxxPreprocessorInput.builder().addIncludes(CxxHeaders.builder().setIncludeType(CxxPreprocessables.IncludeType.LOCAL).putNameToPathMap(Paths.get("header.h"),new BuildTargetSourcePath(publicHeaderTarget)).setRoot(new BuildTargetSourcePath(publicHeaderSymlinkTreeTarget)).build()).build();
case PRIVATE:
  return CxxPreprocessorInput.builder().addIncludes(CxxHeaders.builder().setIncludeType(CxxPreprocessables.IncludeType.LOCAL).setRoot(new BuildTargetSourcePath(privateHeaderSymlinkTreeTarget)).putNameToPathMap(Paths.get("header.h"),new BuildTargetSourcePath(privateHeaderTarget)).build()).build();
}
throw new RuntimeException("Invalid header visibility value: " + headerVisibility);
}
