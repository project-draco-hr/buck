{
  Map<String,BuildRule> buildRuleIndex=Maps.newHashMap();
  BuildTarget libraryOneTarget=BuildTargetFactory.newInstance("//:libone");
  DefaultJavaLibraryRule libraryOne=DefaultJavaLibraryRule.newJavaLibraryRuleBuilder().setBuildTarget(libraryOneTarget).addSrc("java/src/com/libone/Bar.java").addVisibilityPattern(BuildTargetPattern.MATCH_ALL).setArtifactCache(artifactCache).build(buildRuleIndex);
  buildRuleIndex.put(libraryOne.getFullyQualifiedName(),libraryOne);
  BuildTarget libraryTwoTarget=BuildTargetFactory.newInstance("//:libtwo");
  DefaultJavaLibraryRule libraryTwo=DefaultJavaLibraryRule.newJavaLibraryRuleBuilder().setBuildTarget(libraryTwoTarget).addSrc("java/src/com/libtwo/Foo.java").addDep("//:libone").setArtifactCache(artifactCache).build(buildRuleIndex);
  buildRuleIndex.put(libraryTwo.getFullyQualifiedName(),libraryTwo);
  BuildTarget parentTarget=BuildTargetFactory.newInstance("//:parent");
  DefaultJavaLibraryRule parent=DefaultJavaLibraryRule.newJavaLibraryRuleBuilder().setBuildTarget(parentTarget).addSrc("java/src/com/parent/Meh.java").addDep("//:libtwo").addVisibilityPattern(BuildTargetPattern.MATCH_ALL).setArtifactCache(artifactCache).build(buildRuleIndex);
  buildRuleIndex.put(parent.getFullyQualifiedName(),parent);
  BuildTarget grandparentTarget=BuildTargetFactory.newInstance("//:grandparent");
  DefaultJavaLibraryRule grandparent=DefaultJavaLibraryRule.newJavaLibraryRuleBuilder().setBuildTarget(grandparentTarget).addSrc("java/src/com/parent/OldManRiver.java").addDep("//:parent").setArtifactCache(artifactCache).build(buildRuleIndex);
  buildRuleIndex.put(grandparent.getFullyQualifiedName(),parent);
  BuildContext context=createSuggestContext(buildRuleIndex,BuildDependencies.WARN_ON_TRANSITIVE);
  ImmutableSetMultimap<BuildRule,String> transitive=parent.getTransitiveClasspathEntries();
  ImmutableMap<String,String> classToSymbols=ImmutableMap.of(Iterables.getFirst(transitive.get(parent),null),"com.facebook.Foo",Iterables.getFirst(transitive.get(libraryOne),null),"com.facebook.Bar",Iterables.getFirst(transitive.get(libraryTwo),null),"com.facebook.Foo");
  Optional<DependencyCheckingJavacStep.SuggestBuildRules> suggestFn=grandparent.createSuggestBuildFunction(context,transitive,ImmutableSetMultimap.<BuildRule,String>of(),createJarResolver(classToSymbols));
  assertTrue(suggestFn.isPresent());
  assertEquals(ImmutableSet.of("//:parent","//:libone"),suggestFn.get().apply(ImmutableSet.of("com.facebook.Foo","com.facebook.Bar")));
  EasyMock.verify(context);
}
