{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildTarget libraryOneTarget=BuildTargetFactory.newInstance("//:libone");
  PrebuiltJarRule libraryOne=ruleResolver.buildAndAddToIndex(PrebuiltJarRule.newPrebuiltJarRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(libraryOneTarget).setBinaryJar("java/src/com/libone/bar.jar"));
  BuildTarget libraryTwoTarget=BuildTargetFactory.newInstance("//:libtwo");
  JavaLibraryRule libraryTwo=ruleResolver.buildAndAddToIndex(DefaultJavaLibraryRule.newJavaLibraryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(libraryTwoTarget).addSrc("java/src/com/libtwo/Foo.java").addDep(BuildTargetFactory.newInstance("//:libone")));
  DependencyGraph graph=RuleMap.createGraphFromBuildRules(ruleResolver);
  BuildContext buildContext=EasyMock.createMock(BuildContext.class);
  expect(buildContext.getDependencyGraph()).andReturn(graph);
  expect(buildContext.getBuildDependencies()).andReturn(BuildDependencies.FIRST_ORDER_ONLY).times(2);
  JavaPackageFinder javaPackageFinder=EasyMock.createMock(JavaPackageFinder.class);
  expect(buildContext.getJavaPackageFinder()).andReturn(javaPackageFinder);
  replay(buildContext,javaPackageFinder);
  libraryOne.build(buildContext);
  libraryOne.setAbiKey(new Sha1HashCode(Strings.repeat("cafebabe",5)));
  List<Step> steps=libraryTwo.getBuildSteps(buildContext,new FakeBuildableContext());
  EasyMock.verify(buildContext,javaPackageFinder);
  ImmutableList<JavacInMemoryStep> javacSteps=FluentIterable.from(steps).filter(JavacInMemoryStep.class).toList();
  assertEquals("There should be only one javac step.",1,javacSteps.size());
  JavacInMemoryStep javacStep=javacSteps.get(0);
  assertEquals("The classpath to use when compiling //:libtwo according to getDeclaredClasspathEntries()" + "should contain only bar.jar.",ImmutableSet.of("java/src/com/libone/bar.jar"),ImmutableSet.copyOf(libraryTwo.getDeclaredClasspathEntries().values()));
  assertEquals("The classpath for the javac step to compile //:libtwo should contain only bar.jar.",ImmutableSet.of("java/src/com/libone/bar.jar"),javacStep.getClasspathEntries());
}
