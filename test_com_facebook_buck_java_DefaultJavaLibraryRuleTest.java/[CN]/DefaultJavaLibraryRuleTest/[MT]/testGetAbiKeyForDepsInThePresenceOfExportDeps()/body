{
  String tinyLibAbiKeyHash=Strings.repeat("a",40);
  JavaLibraryRule tinyLibrary=createDefaultJavaLibaryRuleWithAbiKey(tinyLibAbiKeyHash,BuildTargetFactory.newInstance("//:tinylib"),ImmutableSet.of("foo/Bar.java"),ImmutableSet.<BuildRule>of(),false);
  String commonWithExportAbiKeyHash=Strings.repeat("b",40);
  DefaultJavaLibraryRule commonWithExport=createDefaultJavaLibaryRuleWithAbiKey(commonWithExportAbiKeyHash,BuildTargetFactory.newInstance("//:common_with_export"),ImmutableSet.<String>of(),ImmutableSet.<BuildRule>of(tinyLibrary),true);
  DefaultJavaLibraryRule commonNoExport=createDefaultJavaLibaryRuleWithAbiKey(null,BuildTargetFactory.newInstance("//:common_no_export"),ImmutableSet.<String>of(),ImmutableSet.<BuildRule>of(tinyLibrary),false);
  assertEquals("getAbiKeyForDeps() should be the same for both rules because they have the same deps.",commonNoExport.getAbiKeyForDeps(),commonWithExport.getAbiKeyForDeps());
  String expectedAbiKeyForDepsHash=Hashing.sha1().newHasher().putString(tinyLibAbiKeyHash).hash().toString();
  String observedAbiKeyForDepsHash=commonNoExport.getAbiKeyForDeps().get().getHash();
  assertEquals(expectedAbiKeyForDepsHash,observedAbiKeyForDepsHash);
  Map<BuildTarget,BuildRule> buildRuleIndex=Maps.newHashMap();
  buildRuleIndex.put(tinyLibrary.getBuildTarget(),tinyLibrary);
  buildRuleIndex.put(commonWithExport.getBuildTarget(),commonWithExport);
  buildRuleIndex.put(commonNoExport.getBuildTarget(),commonNoExport);
  BuildRuleResolver ruleResolver=new BuildRuleResolver(buildRuleIndex);
  DefaultJavaLibraryRule consumerNoExport=ruleResolver.buildAndAddToIndex(DefaultJavaLibraryRule.newJavaLibraryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//:consumer_no_export")).addDep(BuildTargetFactory.newInstance("//:common_no_export")));
  DefaultJavaLibraryRule consumerWithExport=ruleResolver.buildAndAddToIndex(DefaultJavaLibraryRule.newJavaLibraryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//:consumer_with_export")).addDep(BuildTargetFactory.newInstance("//:common_with_export")));
  assertEquals("The ABI of the deps of //:consumer_no_export should be the empty ABI.",consumerNoExport.getAbiKeyForDeps(),Optional.of(new Sha1HashCode(AbiWriterProtocol.EMPTY_ABI_KEY)));
  assertThat("Although //:consumer_no_export and //:consumer_with_export have the same deps, " + "the ABIs of their deps will differ because of the use of export_deps=True.",consumerNoExport.getAbiKeyForDeps(),not(equalTo(consumerWithExport.getAbiKeyForDeps())));
  String expectedAbiKeyNoDepsHashForConsumerWithExport=Hashing.sha1().newHasher().putString(commonWithExportAbiKeyHash).putString(tinyLibAbiKeyHash).hash().toString();
  String observedAbiKeyNoDepsHashForConsumerWithExport=consumerWithExport.getAbiKeyForDeps().get().getHash();
  assertEquals("By hardcoding the ABI keys for the deps, we made getAbiKeyForDeps() a predictable value.",expectedAbiKeyNoDepsHashForConsumerWithExport,observedAbiKeyNoDepsHashForConsumerWithExport);
}
