{
  String commonLibAbiKeyHash=Strings.repeat("a",40);
  JavaLibraryRule commonLibrary=createDefaultJavaLibaryRuleWithAbiKey(commonLibAbiKeyHash,BuildTargetFactory.newInstance("//:commonlib"),ImmutableSet.of("foo/Bar.java"),ImmutableSet.<BuildRule>of(),ImmutableSortedSet.<BuildRule>of());
  String libWithExportAbiKeyHash=Strings.repeat("b",40);
  DefaultJavaLibraryRule libWithExport=createDefaultJavaLibaryRuleWithAbiKey(libWithExportAbiKeyHash,BuildTargetFactory.newInstance("//:lib_with_export"),ImmutableSet.<String>of(),ImmutableSet.<BuildRule>of(commonLibrary),ImmutableSortedSet.<BuildRule>of(commonLibrary));
  String libNoExportAbiKeyHash=Strings.repeat("c",40);
  DefaultJavaLibraryRule libNoExport=createDefaultJavaLibaryRuleWithAbiKey(libNoExportAbiKeyHash,BuildTargetFactory.newInstance("//:lib_no_export"),ImmutableSet.<String>of(),ImmutableSet.<BuildRule>of(commonLibrary),ImmutableSortedSet.<BuildRule>of());
  String expectedLibWithExportAbiKeyHash=Hashing.sha1().newHasher().putUnencodedChars(commonLibAbiKeyHash).putUnencodedChars(libWithExportAbiKeyHash).hash().toString();
  assertEquals("getAbiKey() should include the dependencies' ABI keys for the rule with export_deps=true.",expectedLibWithExportAbiKeyHash,libWithExport.getAbiKey().getHash());
  assertEquals("getAbiKey() should not include the dependencies' ABI keys for the rule with " + "export_deps=false.",libNoExportAbiKeyHash,libNoExport.getAbiKey().getHash());
}
