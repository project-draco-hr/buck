{
  Map<String,BuildRule> buildRuleIndex=Maps.newHashMap();
  BuildTarget libraryOneTarget=BuildTargetFactory.newInstance("//:libone");
  JavaLibraryRule libraryOne=DefaultJavaLibraryRule.newJavaLibraryRuleBuilder().setBuildTarget(libraryOneTarget).addSrc("java/src/com/libone/Bar.java").build(buildRuleIndex);
  buildRuleIndex.put(libraryOne.getFullyQualifiedName(),libraryOne);
  BuildTarget libraryTwoTarget=BuildTargetFactory.newInstance("//:libtwo");
  JavaLibraryRule libraryTwo=DefaultJavaLibraryRule.newJavaLibraryRuleBuilder().setBuildTarget(libraryTwoTarget).addSrc("java/src/com/libtwo/Foo.java").addDep("//:libone").build(buildRuleIndex);
  buildRuleIndex.put(libraryTwo.getFullyQualifiedName(),libraryTwo);
  BuildTarget parentTarget=BuildTargetFactory.newInstance("//:parent");
  JavaLibraryRule parent=DefaultJavaLibraryRule.newJavaLibraryRuleBuilder().setBuildTarget(parentTarget).addSrc("java/src/com/parent/Meh.java").addDep("//:libtwo").build(buildRuleIndex);
  buildRuleIndex.put(parent.getFullyQualifiedName(),parent);
  assertEquals(ImmutableSetMultimap.of(libraryOne,"buck-out/gen/lib__libone__output/libone.jar",libraryTwo,"buck-out/gen/lib__libtwo__output/libtwo.jar",parent,"buck-out/gen/lib__parent__output/parent.jar"),parent.getTransitiveClasspathEntries());
}
