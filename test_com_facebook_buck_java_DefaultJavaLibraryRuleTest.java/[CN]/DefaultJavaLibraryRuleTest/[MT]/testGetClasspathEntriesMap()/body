{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildTarget libraryOneTarget=BuildTargetFactory.newInstance("//:libone");
  JavaLibraryRule libraryOne=ruleResolver.buildAndAddToIndex(DefaultJavaLibraryRule.newJavaLibraryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(libraryOneTarget).addSrc("java/src/com/libone/Bar.java"));
  BuildTarget libraryTwoTarget=BuildTargetFactory.newInstance("//:libtwo");
  JavaLibraryRule libraryTwo=ruleResolver.buildAndAddToIndex(DefaultJavaLibraryRule.newJavaLibraryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(libraryTwoTarget).addSrc("java/src/com/libtwo/Foo.java").addDep(BuildTargetFactory.newInstance("//:libone")));
  BuildTarget parentTarget=BuildTargetFactory.newInstance("//:parent");
  JavaLibraryRule parent=ruleResolver.buildAndAddToIndex(DefaultJavaLibraryRule.newJavaLibraryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(parentTarget).addSrc("java/src/com/parent/Meh.java").addDep(BuildTargetFactory.newInstance("//:libtwo")));
  assertEquals(ImmutableSetMultimap.of(libraryOne,"buck-out/gen/lib__libone__output/libone.jar",libraryTwo,"buck-out/gen/lib__libtwo__output/libtwo.jar",parent,"buck-out/gen/lib__parent__output/parent.jar"),parent.getTransitiveClasspathEntries());
}
