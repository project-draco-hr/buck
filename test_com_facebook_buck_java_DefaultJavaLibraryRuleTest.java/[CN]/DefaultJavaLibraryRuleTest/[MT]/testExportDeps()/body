{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildTarget libraryOneTarget=BuildTargetFactory.newInstance("//:libone");
  JavaLibraryRule libraryOne=ruleResolver.buildAndAddToIndex(DefaultJavaLibraryRule.newJavaLibraryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(libraryOneTarget).addSrc("java/src/com/libone/Bar.java"));
  BuildTarget libraryTwoTarget=BuildTargetFactory.newInstance("//:libtwo");
  JavaLibraryRule libraryTwo=ruleResolver.buildAndAddToIndex(DefaultJavaLibraryRule.newJavaLibraryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(libraryTwoTarget).addSrc("java/src/com/libtwo/Foo.java").addDep(BuildTargetFactory.newInstance("//:libone")).setExportDeps(true));
  BuildTarget parentTarget=BuildTargetFactory.newInstance("//:parent");
  JavaLibraryRule parent=ruleResolver.buildAndAddToIndex(DefaultJavaLibraryRule.newJavaLibraryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(parentTarget).addSrc("java/src/com/parent/Meh.java").addDep(BuildTargetFactory.newInstance("//:libtwo")));
  assertEquals("A java_library that depends on //:libone should include only libone.jar in its " + "classpath when compiling itself.",ImmutableSetMultimap.builder().put(libraryOne,"buck-out/gen/lib__libone__output/libone.jar").build(),libraryOne.getOutputClasspathEntries());
  assertEquals("//:libtwo exports its deps, so a java_library that depends on //:libtwo should include " + "both libone.jar and libtwo.jar in its classpath when compiling itself.",ImmutableSetMultimap.builder().put(libraryOne,"buck-out/gen/lib__libone__output/libone.jar").put(libraryTwo,"buck-out/gen/lib__libone__output/libone.jar").put(libraryTwo,"buck-out/gen/lib__libtwo__output/libtwo.jar").build(),libraryTwo.getOutputClasspathEntries());
  assertEquals("//:libtwo exports its deps, so both libone.jar and libtwo.jar should be on the classpath" + " when compiling //:parent.",ImmutableSetMultimap.builder().put(libraryTwo,"buck-out/gen/lib__libone__output/libone.jar").put(libraryTwo,"buck-out/gen/lib__libtwo__output/libtwo.jar").build(),parent.getDeclaredClasspathEntries());
  assertEquals("A java_binary that depends on //:parent should include libone.jar, libtwo.jar and " + "parent.jar.",ImmutableSetMultimap.builder().put(libraryOne,"buck-out/gen/lib__libone__output/libone.jar").put(libraryTwo,"buck-out/gen/lib__libone__output/libone.jar").put(libraryTwo,"buck-out/gen/lib__libtwo__output/libtwo.jar").put(parent,"buck-out/gen/lib__parent__output/parent.jar").build(),parent.getTransitiveClasspathEntries());
  assertEquals("A java_library that depends on //:parent should include only parent.jar in its " + "-classpath when compiling itself.",ImmutableSetMultimap.builder().put(parent,"buck-out/gen/lib__parent__output/parent.jar").build(),parent.getOutputClasspathEntries());
}
