{
  AndroidPlatformTarget platformTarget=EasyMock.createMock(AndroidPlatformTarget.class);
  ImmutableList<File> bootclasspathEntries=(bootclasspath == null) ? ImmutableList.<File>of(new File("I am not used")) : ImmutableList.of(new File(bootclasspath));
  EasyMock.expect(platformTarget.getBootclasspathEntries()).andReturn(bootclasspathEntries).anyTimes();
  replay(platformTarget);
  File projectRoot;
  if (projectFilesystem == null) {
    projectRoot=EasyMock.createMock(File.class);
    projectFilesystem=EasyMock.createMock(ProjectFilesystem.class);
  }
 else {
    projectRoot=projectFilesystem.getProjectRoot();
  }
  return BuildContext.builder().setProjectRoot(projectRoot).setDependencyGraph(RuleMap.createGraphFromSingleRule(javaLibrary)).setStepRunner(EasyMock.createMock(StepRunner.class)).setProjectFilesystem(projectFilesystem).setArtifactCache(new NoopArtifactCache()).setBuildDependencies(BuildDependencies.TRANSITIVE).setJavaPackageFinder(EasyMock.createMock(JavaPackageFinder.class)).setAndroidBootclasspathForAndroidPlatformTarget(Optional.of(platformTarget)).setEventBus(BuckEventBusFactory.newInstance()).build();
}
