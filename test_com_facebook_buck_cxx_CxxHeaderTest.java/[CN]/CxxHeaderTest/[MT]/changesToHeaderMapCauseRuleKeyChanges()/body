{
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new FakeRuleKeyBuilderFactory(FakeFileHashCache.createFromStrings(ImmutableMap.of("header1.h",Strings.repeat("a",40),"header2.h",Strings.repeat("b",40),"header2b.h",Strings.repeat("b",40),"header3.h",Strings.repeat("c",40))));
  ImmutableMap<Path,SourcePath> defaultHeaders=ImmutableMap.<Path,SourcePath>of(Paths.get("foo.h"),new TestSourcePath("header1.h"),Paths.get("bar.h"),new TestSourcePath("header2.h"));
  RuleKey.Builder.RuleKeyPair defaultRuleKey=generateRuleKey(ruleKeyBuilderFactory,new CxxHeader(params,defaultHeaders));
  ImmutableMap<Path,SourcePath> changeLayoutHeaders=ImmutableMap.<Path,SourcePath>of(Paths.get("hello.h"),new TestSourcePath("header1.h"),Paths.get("bar.h"),new TestSourcePath("header2.h"));
  RuleKey.Builder.RuleKeyPair changeLayoutRuleKey=generateRuleKey(ruleKeyBuilderFactory,new CxxHeader(params,changeLayoutHeaders));
  assertNotEquals(defaultRuleKey.getTotalRuleKey(),changeLayoutRuleKey.getTotalRuleKey());
  ImmutableMap<Path,SourcePath> changeContentsHeaders=ImmutableMap.<Path,SourcePath>of(Paths.get("foo.h"),new TestSourcePath("header1.h"),Paths.get("bar.h"),new TestSourcePath("header3.h"));
  RuleKey.Builder.RuleKeyPair changeContentsRuleKey=generateRuleKey(ruleKeyBuilderFactory,new CxxHeader(params,changeContentsHeaders));
  assertNotEquals(defaultRuleKey.getTotalRuleKey(),changeContentsRuleKey.getTotalRuleKey());
  ImmutableMap<Path,SourcePath> addHeaders=ImmutableMap.<Path,SourcePath>of(Paths.get("foo.h"),new TestSourcePath("header1.h"),Paths.get("bar.h"),new TestSourcePath("header2.h"),Paths.get("hello.h"),new TestSourcePath("header3.h"));
  RuleKey.Builder.RuleKeyPair addRuleKey=generateRuleKey(ruleKeyBuilderFactory,new CxxHeader(params,addHeaders));
  assertNotEquals(defaultRuleKey.getTotalRuleKey(),addRuleKey.getTotalRuleKey());
  ImmutableMap<Path,SourcePath> noopChangeHeaders=ImmutableMap.<Path,SourcePath>of(Paths.get("foo.h"),new TestSourcePath("header1.h"),Paths.get("bar.h"),new TestSourcePath("header2b.h"));
  RuleKey.Builder.RuleKeyPair noopChangeRuleKey=generateRuleKey(ruleKeyBuilderFactory,new CxxHeader(params,noopChangeHeaders));
  assertEquals(defaultRuleKey.getTotalRuleKey(),noopChangeRuleKey.getTotalRuleKey());
}
