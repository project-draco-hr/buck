{
  ProjectFilesystem projectFilesystem=context.getProjectFilesystem();
  String fileToCompile=projectFilesystem.resolve(getResolver().getPath(sourcePath)).toString();
  String language;
  String languageStandard;
  if (fileToCompile.endsWith(".mm")) {
    language="objective-c++";
    languageStandard="-std=c++11";
  }
 else {
    language="objective-c";
    languageStandard="-std=gnu99";
  }
  List<String> commandArgs=Lists.newArrayList("clang","-x",language,"-arch","i386","-mios-simulator-version-min=7.0","-fmessage-length=0","-fdiagnostics-show-note-include-stack","-fmacro-backtrace-limit=0",languageStandard,"-fpascal-strings","-fexceptions","-fasm-blocks","-fstrict-aliasing","-fobjc-abi-version=2","-fobjc-legacy-dispatch","-O0","-g","-MMD");
  commandArgs.add("-fobjc-arc");
  ImmutableMap<AppleSdk,AppleSdkPaths> allAppleSdkPaths=appleConfig.getAppleSdkPaths(context.getProcessExecutor());
  AppleSdkPaths appleSdkPaths=selectNewestSimulatorSdk(allAppleSdkPaths);
  commandArgs.add("-isysroot");
  Path sysroot=appleSdkPaths.getSdkPath();
  commandArgs.add(sysroot.toString());
  for (  FrameworkPath framework : frameworks) {
    Optional<SourceTreePath> sourceTreePath=framework.getSourceTreePath();
    if (!sourceTreePath.isPresent()) {
      throw new HumanReadableException("Cannot add framework '%s' to compilation database:\nCompilation database " + "generation only supports source tree path framework references",framework.getSourcePath().get());
    }
    commandArgs.add("-F" + appleSdkPaths.resolve(sourceTreePath.get()));
  }
  for (  Path includePath : includePaths) {
    commandArgs.add("-I" + projectFilesystem.resolve(includePath));
  }
  Path iquoteArg=internalHeaderMap.get();
  if (iquoteArg != null) {
    commandArgs.add("-iquote");
    commandArgs.add(projectFilesystem.resolve(iquoteArg).toString());
  }
  if (pchFile.isPresent()) {
    commandArgs.add("-include");
    Path relativePathToPchFile=getResolver().getPath(pchFile.get());
    commandArgs.add(projectFilesystem.resolve(relativePathToPchFile).toString());
  }
  commandArgs.add("-c");
  commandArgs.add(fileToCompile);
  commandArgs.addAll(perFileFlags);
  String command=Joiner.on(' ').join(commandArgs);
  return new JsonSerializableDatabaseEntry(projectFilesystem.resolve(getBuildTarget().getBasePath()).toString(),fileToCompile,command);
}
