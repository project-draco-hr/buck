{
  return new HaskellPackageRule(baseParams.copyWithChanges(target,Suppliers.memoize(new Supplier<ImmutableSortedSet<BuildRule>>(){
    @Override public ImmutableSortedSet<BuildRule> get(){
      return ImmutableSortedSet.<BuildRule>naturalOrder().addAll(ghcPkg.getDeps(resolver)).addAll(FluentIterable.from(depPackages.values()).transformAndConcat(HaskellPackage.getDepsFunction(resolver))).addAll(resolver.filterBuildRuleInputs(Iterables.concat(libraries,interfaces))).build();
    }
  }
),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),resolver,ghcPkg,packageInfo,depPackages,modules,libraries,interfaces);
}
