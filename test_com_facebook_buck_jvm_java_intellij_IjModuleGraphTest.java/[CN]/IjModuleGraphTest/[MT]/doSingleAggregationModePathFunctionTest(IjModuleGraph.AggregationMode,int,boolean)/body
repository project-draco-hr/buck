{
  ImmutableList<Path> originalPaths=ImmutableList.of(Paths.get("a","b","c","d","e"),Paths.get("a","b","c","d"),Paths.get("a","b","c"),Paths.get("a","b"),Paths.get("a"),Paths.get(""));
  ImmutableList<Path> trimmedPaths=ImmutableList.of(Paths.get("a","b","c"),Paths.get("a","b","c"),Paths.get("a","b","c"),Paths.get("a","b"),Paths.get("a"),Paths.get(""));
  ImmutableSet<Path> dummyAggregationStops=ImmutableSet.of();
  int minimumDepth=aggregationMode.getGraphMinimumDepth(graphSize);
  ImmutableList.Builder<Path> transformedPaths=ImmutableList.builder();
  for (  Path path : originalPaths) {
    transformedPaths.add(IjModuleGraph.simplifyPath(path,minimumDepth,dummyAggregationStops));
  }
  assertThat(transformedPaths.build(),Matchers.equalTo(expectTrimmed ? trimmedPaths : originalPaths));
}
