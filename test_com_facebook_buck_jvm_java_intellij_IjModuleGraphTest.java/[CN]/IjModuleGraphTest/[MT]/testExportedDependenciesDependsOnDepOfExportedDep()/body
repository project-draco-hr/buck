{
  TargetNode<?> junitReflect=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//third-party/junit/reflect:reflect")).build();
  TargetNode<?> junitCore=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//third-party/junit/core:core")).addExportedDep(junitReflect.getBuildTarget()).build();
  TargetNode<?> junitRule=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//third-party/junit/rule:rule")).addExportedDep(junitCore.getBuildTarget()).build();
  IjModuleGraph moduleGraph=createModuleGraph(ImmutableSet.of(junitReflect,junitCore,junitRule));
  IjModule junitReflectModule=getModuleForTarget(moduleGraph,junitReflect);
  IjModule junitCoreModule=getModuleForTarget(moduleGraph,junitCore);
  IjModule junitRuleModule=getModuleForTarget(moduleGraph,junitRule);
  assertEquals(ImmutableMap.of(junitReflectModule,IjModuleGraph.DependencyType.PROD,junitCoreModule,IjModuleGraph.DependencyType.PROD),moduleGraph.getDependentModulesFor(junitRuleModule));
}
