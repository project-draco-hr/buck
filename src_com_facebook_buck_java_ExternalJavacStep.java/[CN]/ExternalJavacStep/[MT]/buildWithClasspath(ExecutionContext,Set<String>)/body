{
  ImmutableList.Builder<String> command=ImmutableList.builder();
  command.add(pathToJavac.toString());
  command.addAll(getOptions(context,buildClasspathEntries));
  if (pathToSrcsList.isPresent()) {
    try {
      context.getProjectFilesystem().writeLinesToPath(Iterables.transform(javaSourceFilePaths,Functions.toStringFunction()),pathToSrcsList.get());
      command.add("@" + pathToSrcsList.get());
    }
 catch (    IOException e) {
      context.logError(e,"Cannot write list of .java files to compile to %s file! Terminating compilation.",pathToSrcsList.get());
      return 1;
    }
  }
 else {
    for (    Path source : getSrcs()) {
      command.add(source.toString());
    }
  }
  ProcessBuilder pb=new ProcessBuilder(command.build());
  Map<String,String> env=pb.environment();
  env.put("BUCK_INVOKING_RULE",invokingRule.or(""));
  env.put("BUCK_TARGET",target.toString());
  env.put("BUCK_DIRECTORY_ROOT",context.getProjectDirectoryRoot().toString());
  env.put("BUCK_OUTPUT_ABI_FILE",pathToOutputAbiFile.or(new File("").toPath()).toString());
  int exitCode=-1;
  try {
    ProcessExecutor.Result result=context.getProcessExecutor().execute(pb.start());
    exitCode=result.getExitCode();
  }
 catch (  IOException e) {
    e.printStackTrace(context.getStdErr());
    return exitCode;
  }
  if (exitCode != 0) {
    return exitCode;
  }
  if (abiKeyFile != null) {
    try {
      String firstLine=Files.readFirstLine(abiKeyFile,Charsets.UTF_8);
      if (firstLine != null) {
        abiKey=new Sha1HashCode(firstLine);
      }
    }
 catch (    IOException e) {
      e.printStackTrace(context.getStdErr());
      return 1;
    }
  }
  return 0;
}
