{
  Logger.get(Depfiles.class).debug("Processing dependency file %s as Makefile",sourceDepFile);
  ImmutableMap<String,Object> params=ImmutableMap.<String,Object>of("input",inputPath,"output",outputPath);
  try (InputStream input=filesystem.newFileInputStream(sourceDepFile);BufferedReader reader=new BufferedReader(new InputStreamReader(input));OutputStream output=filesystem.newFileOutputStream(destDepFile);BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(output));SimplePerfEvent.Scope perfEvent=SimplePerfEvent.scope(context.getBuckEventBus(),PerfEventId.of("depfile-parse"),params)){
    ImmutableList<String> prereqs=Depfiles.parseDepfile(reader).getPrereqs();
    Preconditions.checkState(inputPath.toString().equals(prereqs.get(0)));
    ImmutableList<String> headers=prereqs.subList(1,prereqs.size());
    for (    String header : headers) {
      Optional<Path> absolutePath=headerPathNormalizer.getAbsolutePathForUnnormalizedPath(Paths.get(header));
      if (absolutePath.isPresent()) {
        Preconditions.checkState(absolutePath.get().isAbsolute());
        writer.write(absolutePath.get().toString());
        writer.newLine();
      }
 else       if (headerVerification.getMode() != HeaderVerification.Mode.IGNORE && !headerVerification.isWhitelisted(header)) {
        context.getBuckEventBus().post(ConsoleEvent.create(headerVerification.getMode() == HeaderVerification.Mode.ERROR ? Level.SEVERE : Level.WARNING,"%s: included an untracked header \"%s\"",inputPath,header));
        if (headerVerification.getMode() == HeaderVerification.Mode.ERROR) {
          return 1;
        }
      }
    }
  }
   return 0;
}
