{
  MutableDirectedGraph<BuildRule> dag=new MutableDirectedGraph<>();
  dag.addNode(new FakeBuildRule(new BuildRuleType("example"),target,ImmutableSortedSet.<BuildRule>of(),ImmutableSet.<BuildTargetPattern>of()){
    @Override public Path getPathToOutputFile(){
      return Paths.get("cheese");
    }
  }
);
  DependencyGraph graph=new DependencyGraph(dag);
  BuildContext context=EasyMock.createNiceMock(BuildContext.class);
  EasyMock.expect(context.getDependencyGraph()).andStubReturn(graph);
  EasyMock.replay(context);
  BuildTargetSourcePath path=new BuildTargetSourcePath(target);
  Path resolved=path.resolve(context);
  assertEquals(Paths.get("cheese"),resolved);
  EasyMock.verify(context);
}
