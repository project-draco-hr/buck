{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  String flag="-exported-compiler-flags";
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  PrebuiltHaskellLibrary library=(PrebuiltHaskellLibrary)new PrebuiltHaskellLibraryBuilder(target).setExportedCompilerFlags(ImmutableList.of(flag)).build(resolver);
  HaskellCompileInput staticInput=library.getCompileInput(CxxPlatformUtils.DEFAULT_PLATFORM,CxxSourceRuleFactory.PicType.PDC);
  assertThat(staticInput.getFlags(),Matchers.contains(flag));
  HaskellCompileInput sharedInput=library.getCompileInput(CxxPlatformUtils.DEFAULT_PLATFORM,CxxSourceRuleFactory.PicType.PIC);
  assertThat(sharedInput.getFlags(),Matchers.contains(flag));
}
