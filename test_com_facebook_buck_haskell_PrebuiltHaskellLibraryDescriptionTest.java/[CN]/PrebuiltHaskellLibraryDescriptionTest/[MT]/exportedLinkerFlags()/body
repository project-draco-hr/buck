{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  String flag="-exported-linker-flags";
  PrebuiltHaskellLibrary library=(PrebuiltHaskellLibrary)new PrebuiltHaskellLibraryBuilder(target).setExportedLinkerFlags(ImmutableList.of(flag)).build(resolver);
  NativeLinkableInput staticInput=library.getNativeLinkableInput(CxxPlatformUtils.DEFAULT_PLATFORM,Linker.LinkableDepType.STATIC);
  assertThat(Arg.stringify(staticInput.getArgs()),Matchers.contains(flag));
  NativeLinkableInput sharedInput=library.getNativeLinkableInput(CxxPlatformUtils.DEFAULT_PLATFORM,Linker.LinkableDepType.SHARED);
  assertThat(Arg.stringify(sharedInput.getArgs()),Matchers.contains(flag));
}
