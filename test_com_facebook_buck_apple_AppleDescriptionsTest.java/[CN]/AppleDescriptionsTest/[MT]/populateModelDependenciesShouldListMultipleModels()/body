{
  BuildTarget binaryTarget=BuildTargetFactory.newInstance("//:binary");
  BuildTarget libraryTargetA=BuildTargetFactory.newInstance("//:libraryA");
  BuildTarget modelTargetA=BuildTargetFactory.newInstance("//:modelA");
  BuildTarget libraryTargetB=BuildTargetFactory.newInstance("//:libraryB");
  BuildTarget modelTargetB=BuildTargetFactory.newInstance("//:modelB");
  BuildTarget modelTargetC=BuildTargetFactory.newInstance("//:modelC");
  BuildTarget modelTargetD=BuildTargetFactory.newInstance("//:modelD");
  TargetNode<AppleNativeTargetDescriptionArg> binary=AppleBinaryBuilder.createBuilder(binaryTarget).setDeps(Optional.of(ImmutableSortedSet.of(libraryTargetA,libraryTargetB,modelTargetD))).build();
  TargetNode<AppleNativeTargetDescriptionArg> libraryA=AppleLibraryBuilder.createBuilder(libraryTargetA).setDeps(Optional.of(ImmutableSortedSet.of(modelTargetA,modelTargetC))).build();
  TargetNode<AppleNativeTargetDescriptionArg> libraryB=AppleLibraryBuilder.createBuilder(libraryTargetB).setDeps(Optional.of(ImmutableSortedSet.of(modelTargetB,modelTargetC))).build();
  TargetNode<GraphQLDataDescription.Arg> modelA=GraphQLDataBuilder.createBuilder(modelTargetA).build();
  TargetNode<GraphQLDataDescription.Arg> modelB=GraphQLDataBuilder.createBuilder(modelTargetB).build();
  TargetNode<GraphQLDataDescription.Arg> modelC=GraphQLDataBuilder.createBuilder(modelTargetC).build();
  TargetNode<GraphQLDataDescription.Arg> modelD=GraphQLDataBuilder.createBuilder(modelTargetD).build();
  TargetGraph graph=TargetGraphFactory.newInstance(ImmutableSet.<TargetNode<?>>of(binary,libraryA,libraryB,modelA,modelB,modelC,modelD));
  assertEquals(ImmutableMap.of(binaryTarget,ImmutableSet.of(modelA,modelB,modelC,modelD),libraryTargetA,ImmutableSet.of(modelA,modelC),libraryTargetB,ImmutableSet.of(modelB,modelC)),AppleDescriptions.getTargetsToTransitiveModelDependencies(graph));
}
