{
  ProjectFilesystem projectFilesystem=new FakeProjectFilesystem();
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver());
  Path appleSdkRoot=Paths.get("Root");
  AppleSdkPaths appleSdkPaths=AppleSdkPaths.builder().setDeveloperPath(appleSdkRoot).addToolchainPaths(appleSdkRoot.resolve("Toolchain")).setPlatformPath(appleSdkRoot.resolve("Platform")).setSdkPath(appleSdkRoot.resolve("SDK")).build();
  Function<ImmutableSortedSet<FrameworkPath>,ImmutableList<Path>> frameworksToSearchPathsTransformer=AppleDescriptions.frameworksToSearchPathsFunction(resolver,appleSdkPaths);
  ImmutableList<Path> searchPaths=frameworksToSearchPathsTransformer.apply(ImmutableSortedSet.of(FrameworkPath.ofSourceTreePath(new SourceTreePath(PBXReference.SourceTree.SDKROOT,Paths.get("usr/lib/libz.dylib"),Optional.<String>absent())),FrameworkPath.ofSourcePath(new PathSourcePath(projectFilesystem,Paths.get("Vendor/Foo/libFoo.a"))),FrameworkPath.ofSourceTreePath(new SourceTreePath(PBXReference.SourceTree.DEVELOPER_DIR,Paths.get("Library/Frameworks/XCTest.framework"),Optional.<String>absent())),FrameworkPath.ofSourcePath(new PathSourcePath(projectFilesystem,Paths.get("Vendor/Bar/Bar.framework")))));
  assertEquals(ImmutableList.of(Paths.get("Root/SDK/usr/lib"),Paths.get("Root/Library/Frameworks"),Paths.get("Vendor/Bar"),Paths.get("Vendor/Foo")),searchPaths);
}
