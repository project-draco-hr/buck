{
  ProjectFilesystem projectFilesystem=new FakeProjectFilesystem();
  BuildTarget binaryTarget=BuildTargetFactory.newInstance("//:binary");
  BuildTarget libraryTargetA=BuildTargetFactory.newInstance("//:libraryA");
  BuildTarget modelTargetA=BuildTargetFactory.newInstance("//:modelA");
  BuildTarget libraryTargetB=BuildTargetFactory.newInstance("//:libraryB");
  BuildTarget modelTargetB=BuildTargetFactory.newInstance("//:modelB");
  BuildTarget modelTargetC=BuildTargetFactory.newInstance("//:modelC");
  BuildTarget modelTargetD=BuildTargetFactory.newInstance("//:modelD");
  SourcePath queryA=new PathSourcePath(projectFilesystem,Paths.get("queryA.graphql"));
  SourcePath queryB=new PathSourcePath(projectFilesystem,Paths.get("queryB.graphql"));
  SourcePath queryC=new PathSourcePath(projectFilesystem,Paths.get("queryC.graphql"));
  SourcePath queryD=new PathSourcePath(projectFilesystem,Paths.get("queryD.graphql"));
  TargetNode<GraphQLDataDescription.Arg> modelA=GraphQLDataBuilder.createBuilder(modelTargetA).setQueries(ImmutableSortedSet.of(queryA)).build();
  TargetNode<GraphQLDataDescription.Arg> modelB=GraphQLDataBuilder.createBuilder(modelTargetB).setQueries(ImmutableSortedSet.of(queryB)).build();
  TargetNode<GraphQLDataDescription.Arg> modelC=GraphQLDataBuilder.createBuilder(modelTargetC).setQueries(ImmutableSortedSet.of(queryA,queryB,queryC)).build();
  TargetNode<GraphQLDataDescription.Arg> modelD=GraphQLDataBuilder.createBuilder(modelTargetD).setQueries(ImmutableSortedSet.of(queryD)).build();
  ImmutableMap<BuildTarget,TargetNode<GraphQLDataDescription.Arg>> mergedGraphQLModels=AppleDescriptions.mergeGraphQLModels(ImmutableMap.of(binaryTarget,ImmutableSet.of(modelA,modelB,modelC,modelD),libraryTargetA,ImmutableSet.of(modelA,modelC),libraryTargetB,ImmutableSet.of(modelB,modelC)));
  assertEquals(ImmutableMap.of(binaryTarget,GraphQLDataBuilder.createBuilder(AppleDescriptions.getMergedBuildTarget(ImmutableSet.of(modelA,modelB,modelC,modelD))).setQueries(ImmutableSortedSet.of(queryA,queryB,queryC,queryD)).build(),libraryTargetA,GraphQLDataBuilder.createBuilder(AppleDescriptions.getMergedBuildTarget(ImmutableSet.of(modelA,modelC))).setQueries(ImmutableSortedSet.of(queryA,queryC)).build(),libraryTargetB,GraphQLDataBuilder.createBuilder(AppleDescriptions.getMergedBuildTarget(ImmutableSet.of(modelB,modelC))).setQueries(ImmutableSortedSet.of(queryB,queryC)).build()),mergedGraphQLModels);
}
