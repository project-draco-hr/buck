{
  final BuildTarget buildTarget=params.getBuildTarget();
  Optional<Map.Entry<Flavor,CxxPlatform>> platform=cxxPlatformFlavorDomain.getFlavorAndValue(buildTarget);
  final ImmutableSortedSet<Flavor> buildFlavors=buildTarget.getFlavors();
  if (!buildFlavors.contains(SWIFT_COMPANION_FLAVOR) && platform.isPresent()) {
    AppleCxxPlatform appleCxxPlatform=ApplePlatforms.getAppleCxxPlatformForBuildTarget(cxxPlatformFlavorDomain,defaultCxxPlatform,appleCxxPlatformFlavorDomain,buildTarget,Optional.<MultiarchFileInfo>absent());
    Optional<Tool> swiftCompiler=appleCxxPlatform.getSwift();
    if (!swiftCompiler.isPresent()) {
      throw new HumanReadableException("Platform %s is missing swift compiler",appleCxxPlatform);
    }
    final CxxPlatform cxxPlatform=platform.get().getValue();
    Optional<Map.Entry<Flavor,Type>> type=LIBRARY_TYPE.getFlavorAndValue(buildTarget);
    if (!buildFlavors.contains(SWIFT_COMPILE_FLAVOR) && type.isPresent() && platform.isPresent()) {
      Set<Flavor> flavors=Sets.newHashSet(params.getBuildTarget().getFlavors());
      flavors.remove(type.get().getKey());
      BuildTarget target=BuildTarget.builder(params.getBuildTarget().getUnflavoredBuildTarget()).addAllFlavors(flavors).build();
      BuildRuleParams typeParams=params.copyWithChanges(target,params.getDeclaredDeps(),params.getExtraDeps());
switch (type.get().getValue()) {
case SHARED:
        return createSharedLibraryBuildRule(typeParams,resolver,target,appleCxxPlatform,cxxPlatform,args.soname);
case STATIC:
case MACH_O_BUNDLE:
    }
    throw new RuntimeException("unhandled library build type");
  }
  params=params.appendExtraDeps(FluentIterable.from(params.getDeps()).filter(SwiftLibrary.class).transform(new Function<SwiftLibrary,BuildRule>(){
    @Override public BuildRule apply(    SwiftLibrary input){
      try {
        return input.requireSwiftCompileRule(cxxPlatform.getFlavor());
      }
 catch (      NoSuchBuildTargetException e) {
        throw new HumanReadableException(e,"Could not find SwiftCompile with target %s",buildTarget);
      }
    }
  }
).toSortedSet(Ordering.natural()));
  return new SwiftCompile(cxxPlatform,swiftBuckConfig,params,new SourcePathResolver(resolver),swiftCompiler.get(),args.moduleName.or(buildTarget.getShortName()),BuildTargets.getGenPath(params.getProjectFilesystem(),buildTarget,"%s"),args.srcs.get(),Optional.<Boolean>absent(),args.bridgingHeader);
}
return new SwiftLibrary(params,resolver,new SourcePathResolver(resolver),ImmutableSet.<BuildRule>of(),args.frameworks.get(),args.libraries.get(),appleCxxPlatformFlavorDomain,args.supportedPlatformsRegex,args.preferredLinkage.or(NativeLinkable.Linkage.ANY));
}
