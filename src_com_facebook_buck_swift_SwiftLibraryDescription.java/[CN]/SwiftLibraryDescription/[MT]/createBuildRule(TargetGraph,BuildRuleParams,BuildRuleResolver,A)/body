{
  final BuildTarget buildTarget=params.getBuildTarget();
  Optional<Map.Entry<Flavor,CxxPlatform>> platform=cxxPlatformFlavorDomain.getFlavorAndValue(buildTarget);
  final ImmutableSortedSet<Flavor> buildFlavors=buildTarget.getFlavors();
  if (buildFlavors.contains(SWIFT_COMPILE_FLAVOR) || !buildFlavors.contains(SWIFT_LIBRARY_FLAVOR) && platform.isPresent()) {
    AppleCxxPlatform appleCxxPlatform=ApplePlatforms.getAppleCxxPlatformForBuildTarget(cxxPlatformFlavorDomain,defaultCxxPlatform,appleCxxPlatformFlavorDomain,params.getBuildTarget(),Optional.<MultiarchFileInfo>absent());
    Optional<Tool> swiftCompiler=appleCxxPlatform.getSwift();
    if (!swiftCompiler.isPresent()) {
      throw new HumanReadableException("Platform %s is missing swift compiler",appleCxxPlatform);
    }
    params=params.appendExtraDeps(Suppliers.ofInstance(FluentIterable.from(params.getDeps()).filter(SwiftLibrary.class).transform(new Function<SwiftLibrary,BuildRule>(){
      @Override public BuildRule apply(      SwiftLibrary input){
        try {
          return input.requireSwiftCompileRule(Iterables.toArray(buildFlavors,Flavor.class));
        }
 catch (        NoSuchBuildTargetException e) {
          throw new HumanReadableException(e,"Could not find SwiftCompile with target %s",buildTarget);
        }
      }
    }
).toSortedSet(Ordering.natural())));
    return new SwiftCompile(platform.get().getValue(),params,new SourcePathResolver(resolver),swiftCompiler.get(),params.getBuildTarget().getShortName(),BuildTargets.getGenPath(params.getProjectFilesystem(),params.getBuildTarget(),"%s"),args.srcs.get(),Optional.<Boolean>absent());
  }
  return new SwiftLibrary(params,resolver,new SourcePathResolver(resolver),ImmutableSet.<BuildRule>of(),args.frameworks.get(),args.libraries.get(),appleCxxPlatformFlavorDomain,args.supportedPlatformsRegex);
}
