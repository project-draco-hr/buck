{
  try {
    if (!m_done) {
      final IMetaData mdataSnashot=m_mdata.shallowCopy();
      m_mdata=null;
      final ICoverageData cdataSnapshot=m_cdata.shallowCopy();
      m_cdata=null;
      if (mdataSnashot.isEmpty()) {
        m_log.warning("no metadata collected at runtime [no reports generated]");
        return;
      }
      if (cdataSnapshot.isEmpty()) {
        m_log.warning("no coverage data collected at runtime [all reports will be empty]");
      }
      final ISessionData sdata=new SessionData(mdataSnashot,cdataSnapshot);
      if (m_dumpRawData && (m_sdataOutFile != null)) {
        try {
          final boolean info=m_log.atINFO();
          final long start=info ? System.currentTimeMillis() : 0;
{
            DataFactory.persist(sdata,m_sdataOutFile,m_sdataOutMerge);
          }
          if (info) {
            final long end=System.currentTimeMillis();
            m_log.info("raw session data " + (m_sdataOutMerge ? "merged into" : "written to") + " ["+ m_sdataOutFile.getAbsolutePath()+ "] {in "+ (end - start)+ " ms}");
          }
        }
 catch (        Throwable t) {
          m_dataDumpFailure=t;
        }
      }
      for (int g=0; g < m_generators.length; ++g) {
        final IReportGenerator generator=m_generators[g];
        if (generator != null) {
          try {
            generator.process(mdataSnashot,cdataSnapshot,m_cache,m_properties);
          }
 catch (          Throwable t) {
            if (m_reportFailures == null)             m_reportFailures=new ArrayList();
            m_reportFailures.add(t);
            continue;
          }
 finally {
            try {
              generator.cleanup();
            }
 catch (            Throwable ignore) {
            }
            m_generators[g]=null;
          }
        }
      }
    }
  }
  finally {
    m_generators=null;
    m_mdata=null;
    m_cdata=null;
    m_properties=null;
    m_cache=null;
    m_done=true;
  }
}
