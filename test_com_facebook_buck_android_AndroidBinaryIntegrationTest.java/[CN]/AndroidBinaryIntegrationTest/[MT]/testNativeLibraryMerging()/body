{
  NdkCxxPlatform platform=getNdkCxxPlatform();
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer()));
  Path tmpDir=tmpFolder.newFolder("merging_tmp");
  SymbolGetter syms=new SymbolGetter(tmpDir,platform.getObjdump(),pathResolver);
  SymbolsAndDtNeeded info;
  workspace.replaceFileContents(".buckconfig","#cpu_abis","cpu_abis = x86");
  Map<String,Path> paths=workspace.buildMultipleAndReturnOutputs("//apps/sample:app_with_merged_libs","//apps/sample:app_with_alternate_merge_glue");
  Path apkPath=paths.get("//apps/sample:app_with_merged_libs");
  ZipInspector zipInspector=new ZipInspector(apkPath);
  zipInspector.assertFileDoesNotExist("lib/x86/lib1a.so");
  zipInspector.assertFileDoesNotExist("lib/x86/lib1b.so");
  zipInspector.assertFileDoesNotExist("lib/x86/lib2e.so");
  zipInspector.assertFileDoesNotExist("lib/x86/lib2f.so");
  info=syms.getSymbolsAndDtNeeded(apkPath,"lib/x86/lib1.so");
  assertThat(info.symbols.global,Matchers.hasItem("A"));
  assertThat(info.symbols.global,Matchers.hasItem("B"));
  assertThat(info.symbols.global,Matchers.hasItem("glue_1"));
  assertThat(info.symbols.global,not(Matchers.hasItem("glue_2")));
  assertThat(info.dtNeeded,Matchers.hasItem("libnative_merge_C.so"));
  assertThat(info.dtNeeded,Matchers.hasItem("libnative_merge_D.so"));
  assertThat(info.dtNeeded,not(Matchers.hasItem("libnative_merge_B.so")));
  info=syms.getSymbolsAndDtNeeded(apkPath,"lib/x86/libnative_merge_C.so");
  assertThat(info.symbols.global,Matchers.hasItem("C"));
  assertThat(info.symbols.global,Matchers.hasItem("static_func_C"));
  assertThat(info.symbols.global,not(Matchers.hasItem("glue_1")));
  assertThat(info.symbols.global,not(Matchers.hasItem("glue_2")));
  assertThat(info.dtNeeded,Matchers.hasItem("libnative_merge_D.so"));
  assertThat(info.dtNeeded,Matchers.hasItem("libprebuilt_for_C.so"));
  info=syms.getSymbolsAndDtNeeded(apkPath,"lib/x86/libnative_merge_D.so");
  assertThat(info.symbols.global,Matchers.hasItem("D"));
  assertThat(info.symbols.global,not(Matchers.hasItem("glue_1")));
  assertThat(info.symbols.global,not(Matchers.hasItem("glue_2")));
  assertThat(info.dtNeeded,Matchers.hasItem("lib2.so"));
  assertThat(info.dtNeeded,not(Matchers.hasItem("libnative_merge_E.so")));
  assertThat(info.dtNeeded,not(Matchers.hasItem("libnative_merge_F.so")));
  info=syms.getSymbolsAndDtNeeded(apkPath,"lib/x86/lib2.so");
  assertThat(info.symbols.global,Matchers.hasItem("E"));
  assertThat(info.symbols.global,Matchers.hasItem("F"));
  assertThat(info.symbols.global,Matchers.hasItem("static_func_F"));
  assertThat(info.symbols.global,Matchers.hasItem("glue_1"));
  assertThat(info.symbols.global,not(Matchers.hasItem("glue_2")));
  assertThat(info.dtNeeded,Matchers.hasItem("libprebuilt_for_F.so"));
  Path otherPath=paths.get("//apps/sample:app_with_alternate_merge_glue");
  info=syms.getSymbolsAndDtNeeded(otherPath,"lib/x86/lib2.so");
  assertThat(info.symbols.global,not(Matchers.hasItem("glue_1")));
  assertThat(info.symbols.global,Matchers.hasItem("glue_2"));
  assertThat(info.dtNeeded,Matchers.hasItem("libprebuilt_for_F.so"));
}
