{
  AndroidDirectoryResolver androidResolver=new DefaultAndroidDirectoryResolver(workspace.asCell().getFilesystem(),Optional.<String>absent(),Optional.<String>absent(),new DefaultPropertyFinder(workspace.asCell().getFilesystem(),ImmutableMap.copyOf(System.getenv())));
  Optional<Path> ndkPath=androidResolver.findAndroidNdkDir();
  assertTrue(ndkPath.isPresent());
  ImmutableCollection<NdkCxxPlatform> platforms=NdkCxxPlatforms.getPlatforms(new ProjectFilesystem(ndkPath.get()),NdkCxxPlatformCompiler.builder().setType(NdkCxxPlatforms.DEFAULT_COMPILER_TYPE).setVersion(NdkCxxPlatforms.DEFAULT_GCC_VERSION).setGccVersion(NdkCxxPlatforms.DEFAULT_GCC_VERSION).build(),NdkCxxPlatforms.DEFAULT_CXX_RUNTIME,NdkCxxPlatforms.DEFAULT_TARGET_APP_PLATFORM,NdkCxxPlatforms.DEFAULT_CPU_ABIS,Platform.detect()).values();
  assertFalse(platforms.isEmpty());
  NdkCxxPlatform platform=platforms.iterator().next();
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer()));
  Path apkPath=workspace.buildAndReturnOutput("//apps/sample:app_xdso_dce");
  ZipInspector zipInspector=new ZipInspector(apkPath);
  zipInspector.assertFileExists("lib/x86/libnative_xdsodce_top.so");
  zipInspector.assertFileExists("lib/x86/libnative_xdsodce_mid.so");
  zipInspector.assertFileExists("lib/x86/libnative_xdsodce_bot.so");
  Path tmpDir=tmpFolder.newFolder("xdso");
  Path lib=unzip(tmpDir,apkPath,"lib/x86/libnative_xdsodce_top.so");
  Symbols sym=Symbols.getSymbols(platform.getObjdump(),pathResolver,lib);
  assertTrue(sym.global.contains("_Z10JNI_OnLoadii"));
  assertTrue(sym.undefined.contains("_Z10midFromTopi"));
  assertTrue(sym.undefined.contains("_Z10botFromTopi"));
  assertFalse(sym.all.contains("_Z6unusedi"));
  lib=unzip(tmpDir,apkPath,"lib/x86/libnative_xdsodce_mid.so");
  sym=Symbols.getSymbols(platform.getObjdump(),pathResolver,lib);
  assertTrue(sym.global.contains("_Z10midFromTopi"));
  assertTrue(sym.undefined.contains("_Z10botFromMidi"));
  assertFalse(sym.all.contains("_Z6unusedi"));
  lib=unzip(tmpDir,apkPath,"lib/x86/libnative_xdsodce_bot.so");
  sym=Symbols.getSymbols(platform.getObjdump(),pathResolver,lib);
  assertTrue(sym.global.contains("_Z10botFromTopi"));
  assertTrue(sym.global.contains("_Z10botFromMidi"));
  assertFalse(sym.all.contains("_Z6unusedi"));
  apkPath=workspace.buildAndReturnOutput("//apps/sample:app_no_xdso_dce");
  zipInspector=new ZipInspector(apkPath);
  zipInspector.assertFileExists("lib/x86/libnative_xdsodce_top.so");
  zipInspector.assertFileExists("lib/x86/libnative_xdsodce_mid.so");
  zipInspector.assertFileExists("lib/x86/libnative_xdsodce_bot.so");
  lib=unzip(tmpDir,apkPath,"lib/x86/libnative_xdsodce_top.so");
  sym=Symbols.getSymbols(platform.getObjdump(),pathResolver,lib);
  assertTrue(sym.all.contains("_Z6unusedi"));
  lib=unzip(tmpDir,apkPath,"lib/x86/libnative_xdsodce_mid.so");
  sym=Symbols.getSymbols(platform.getObjdump(),pathResolver,lib);
  assertTrue(sym.all.contains("_Z6unusedi"));
  lib=unzip(tmpDir,apkPath,"lib/x86/libnative_xdsodce_bot.so");
  sym=Symbols.getSymbols(platform.getObjdump(),pathResolver,lib);
  assertTrue(sym.all.contains("_Z6unusedi"));
}
