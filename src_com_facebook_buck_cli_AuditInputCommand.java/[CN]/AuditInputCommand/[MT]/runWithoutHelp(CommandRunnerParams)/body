{
  final ImmutableSet<String> fullyQualifiedBuildTargets=ImmutableSet.copyOf(getArgumentsFormattedAsBuildTargets(params.getBuckConfig()));
  if (fullyQualifiedBuildTargets.isEmpty()) {
    params.getBuckEventBus().post(ConsoleEvent.severe("Please specify at least one build target."));
    return 1;
  }
  ImmutableSet<BuildTarget> targets=FluentIterable.from(getArgumentsFormattedAsBuildTargets(params.getBuckConfig())).transform(new Function<String,BuildTarget>(){
    @Override public BuildTarget apply(    String input){
      return BuildTargetParser.INSTANCE.parse(input,BuildTargetPatternParser.fullyQualified(),params.getCell().getCellRoots());
    }
  }
).toSet();
  LOG.debug("Getting input for targets: %s",targets);
  TargetGraph graph;
  try (CommandThreadManager pool=new CommandThreadManager("Audit",params.getBuckConfig().getWorkQueueExecutionOrder(),getConcurrencyLimit(params.getBuckConfig()))){
    graph=params.getParser().buildTargetGraph(params.getBuckEventBus(),params.getCell(),getEnableProfiling(),pool.getExecutor(),targets);
  }
 catch (  BuildFileParseException|BuildTargetException e) {
    params.getBuckEventBus().post(ConsoleEvent.severe(MoreExceptions.getHumanReadableOrLocalizedMessage(e)));
    return 1;
  }
  if (shouldGenerateJsonOutput()) {
    return printJsonInputs(params,graph);
  }
  return printInputs(params,graph);
}
