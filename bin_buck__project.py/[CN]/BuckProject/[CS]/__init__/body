def __init__(self, root):
    self.root = root
    self._buck_out = os.path.join(root, 'buck-out')
    buck_out_tmp = os.path.join(self._buck_out, 'tmp')
    if (not os.path.exists(buck_out_tmp)):
        os.makedirs(buck_out_tmp)
    self._buck_out_log = os.path.join(self._buck_out, 'log')
    if (not os.path.exists(self._buck_out_log)):
        os.makedirs(self._buck_out_log)
    self.tmp_dir = tempfile.mkdtemp(prefix='buck_run.', dir=buck_out_tmp)
    self.buckd_tmp_dir = None
    self.buckd_dir = os.path.join(root, '.buckd')
    self.buckd_pid_file = os.path.join(self.buckd_dir, 'buckd.pid')
    self.autobuild_pid_file = os.path.join(self.buckd_dir, 'autobuild.pid')
    self.buckd_port_file = os.path.join(self.buckd_dir, 'buckd.port')
    self.buckd_run_count_file = os.path.join(self.buckd_dir, 'buckd.runcount')
    self.buckd_version_file = os.path.join(self.buckd_dir, 'buckd.version')
    self.has_no_buck_check = os.path.exists(os.path.join(self.root, '.nobuckcheck'))
    if self.has_no_buck_check:
        print(textwrap.dedent("            :::\n            ::: '.nobuckcheck' file is present. Not updating buck.\n            :::"), file=sys.stderr)
    buck_version_path = os.path.join(self.root, '.buckversion')
    buck_version = get_file_contents_if_exists(buck_version_path)
    self.buck_version = (buck_version.split(':') if buck_version else None)
    buck_javaargs_path = os.path.join(self.root, '.buckjavaargs')
    self.buck_javaargs = get_file_contents_if_exists(buck_javaargs_path)
