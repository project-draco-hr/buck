{
  ImmutableList<Step> step=ImmutableList.<Step>of(new SleepingStep(1000,0));
  DefaultStepRunner runner=new DefaultStepRunner(TestExecutionContext.newInstance(),1);
  ListenableFuture<?> future=runner.runStepsAndYieldResult(step,new Callable<Object>(){
    @Override public Object call() throws Exception {
      return "Some Result";
    }
  }
,new BuildTarget("//some/base/name","Some Short Name"));
  runner.shutdownNow();
  try {
    future.get();
    fail("Should throw exception due to cancellation");
  }
 catch (  ExecutionException e) {
  }
}
