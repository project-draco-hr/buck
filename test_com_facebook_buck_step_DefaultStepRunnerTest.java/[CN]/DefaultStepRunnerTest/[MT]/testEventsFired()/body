{
  Step passingStep=new FakeStep("step1","fake step 1",0);
  Step failingStep=new FakeStep("step1","fake step 1",1);
  BuckEventBus eventBus=BuckEventBusFactory.newInstance();
  FakeBuckEventListener listener=new FakeBuckEventListener();
  eventBus.register(listener);
  ExecutionContext context=ExecutionContext.builder().setProjectFilesystem(createMock(ProjectFilesystem.class)).setConsole(new TestConsole()).setEventBus(eventBus).setPlatform(Platform.detect()).build();
  ListeningExecutorService executorService=listeningDecorator(newMultiThreadExecutor(getClass().getSimpleName(),3));
  DefaultStepRunner runner=new DefaultStepRunner(context,executorService);
  runner.runStep(passingStep);
  try {
    runner.runStep(failingStep);
    fail("Failing step should have thrown an exception");
  }
 catch (  StepFailedException e) {
    assertEquals(e.getStep(),failingStep);
  }
  ImmutableList<StepEvent> expected=ImmutableList.of(TestEventConfigerator.configureTestEvent(StepEvent.started(passingStep,"fake step 1"),eventBus),TestEventConfigerator.configureTestEvent(StepEvent.finished(passingStep,"fake step 1",0),eventBus),TestEventConfigerator.configureTestEvent(StepEvent.started(failingStep,"fake step 1"),eventBus),TestEventConfigerator.configureTestEvent(StepEvent.finished(failingStep,"fake step 1",1),eventBus));
  Iterable<StepEvent> events=Iterables.filter(listener.getEvents(),StepEvent.class);
  assertEquals(expected,ImmutableList.copyOf(events));
}
