{
  Step passingStep=new FakeStep("step1","fake step 1",0);
  Step failingStep=new FakeStep("step1","fake step 1",1);
  BuckEventBus eventBus=BuckEventBusFactory.newInstance();
  FakeBuckEventListener listener=new FakeBuckEventListener();
  eventBus.register(listener);
  ExecutionContext context=TestExecutionContext.newBuilder().setEventBus(eventBus).build();
  DefaultStepRunner runner=new DefaultStepRunner(context);
  runner.runStepForBuildTarget(passingStep,Optional.<BuildTarget>absent());
  try {
    runner.runStepForBuildTarget(failingStep,Optional.<BuildTarget>absent());
    fail("Failing step should have thrown an exception");
  }
 catch (  StepFailedException e) {
    assertEquals(e.getStep(),failingStep);
  }
  ImmutableList<StepEvent> events=FluentIterable.from(listener.getEvents()).filter(StepEvent.class).toList();
  assertEquals(4,events.size());
  assertTrue(events.get(0) instanceof StepEvent.Started);
  assertEquals(events.get(0).getShortStepName(),"step1");
  assertEquals(events.get(0).getDescription(),"fake step 1");
  assertTrue(events.get(1) instanceof StepEvent.Finished);
  assertEquals(events.get(1).getShortStepName(),"step1");
  assertEquals(events.get(1).getDescription(),"fake step 1");
  assertTrue(events.get(2) instanceof StepEvent.Started);
  assertEquals(events.get(2).getShortStepName(),"step1");
  assertEquals(events.get(2).getDescription(),"fake step 1");
  assertTrue(events.get(3) instanceof StepEvent.Finished);
  assertEquals(events.get(3).getShortStepName(),"step1");
  assertEquals(events.get(3).getDescription(),"fake step 1");
  assertTrue(events.get(0).isRelatedTo(events.get(1)));
  assertTrue(events.get(2).isRelatedTo(events.get(3)));
  assertFalse(events.get(0).isRelatedTo(events.get(2)));
  assertFalse(events.get(0).isRelatedTo(events.get(3)));
  assertFalse(events.get(1).isRelatedTo(events.get(2)));
  assertFalse(events.get(1).isRelatedTo(events.get(3)));
}
