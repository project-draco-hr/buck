{
  String pathToGenFile=(GEN_DIR + "/com/facebook/GeneratedFile.java");
  String pathToNonGenFile1=("package/src/SourceFile1.java");
  String pathToNonGenFile2=("package/src-gen/SourceFile2.java");
  ImmutableSortedSet<String> javaSrcs=ImmutableSortedSet.of(pathToGenFile,pathToNonGenFile1,pathToNonGenFile2);
  File parentFile1=createMock(File.class);
  expect(parentFile1.getName()).andReturn("src");
  expect(parentFile1.getPath()).andReturn("package/src");
  File sourceFile1=createMock(File.class);
  expect(sourceFile1.getParentFile()).andReturn(parentFile1);
  File parentFile2=createMock(File.class);
  expect(parentFile2.getName()).andReturn("src");
  expect(parentFile2.getPath()).andReturn("package/src-gen");
  File sourceFile2=createMock(File.class);
  expect(sourceFile2.getParentFile()).andReturn(parentFile2);
  DefaultJavaPackageFinder defaultJavaPackageFinder=createMock(DefaultJavaPackageFinder.class);
  expect(defaultJavaPackageFinder.getPathsFromRoot()).andReturn(pathsFromRoot).times(2);
  expect(defaultJavaPackageFinder.getPathElements()).andReturn(pathElements).times(2);
  ProjectFilesystem projectFilesystem=createMock(ProjectFilesystem.class);
  expect(projectFilesystem.getFileForRelativePath(pathToNonGenFile1)).andReturn(sourceFile1);
  expect(projectFilesystem.getFileForRelativePath(pathToNonGenFile2)).andReturn(sourceFile2);
  JavaLibraryRule javaLibraryRule=new FakeJavaLibraryRule(new BuildTarget("//foo","bar")).setJavaSrcs(javaSrcs);
  Object[] mocks=new Object[]{parentFile1,sourceFile1,parentFile2,sourceFile2,defaultJavaPackageFinder,projectFilesystem};
  replay(mocks);
  ImmutableSet<String> result=TestCommand.getPathToSourceFolders(javaLibraryRule,Optional.of(defaultJavaPackageFinder),projectFilesystem);
  assertEquals("The non-generated source files are under two different source folders.",ImmutableSet.of("package/src-gen/","package/src/"),result);
  verify(mocks);
}
