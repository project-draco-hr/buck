{
  String pathToNonGenFile="package/src/SourceFile1.java";
  assertFalse(JavaTestRule.isGeneratedFile(pathToNonGenFile));
  ImmutableSortedSet<String> javaSrcs=ImmutableSortedSet.of(pathToNonGenFile);
  File parentFile=createMock(File.class);
  expect(parentFile.getName()).andReturn("src");
  expect(parentFile.getPath()).andReturn("package/src");
  File sourceFile=createMock(File.class);
  expect(sourceFile.getParentFile()).andReturn(parentFile);
  DefaultJavaPackageFinder defaultJavaPackageFinder=createMock(DefaultJavaPackageFinder.class);
  expect(defaultJavaPackageFinder.getPathsFromRoot()).andReturn(pathsFromRoot);
  expect(defaultJavaPackageFinder.getPathElements()).andReturn(pathElements);
  ProjectFilesystem projectFilesystem=createMock(ProjectFilesystem.class);
  expect(projectFilesystem.getFileForRelativePath(pathToNonGenFile)).andReturn(sourceFile);
  JavaLibraryRule javaLibraryRule=createMock(JavaLibraryRule.class);
  expect(javaLibraryRule.getJavaSrcs()).andReturn(ImmutableSortedSet.copyOf(javaSrcs));
  Object[] mocks=new Object[]{parentFile,sourceFile,defaultJavaPackageFinder,projectFilesystem,javaLibraryRule};
  replay(mocks);
  ImmutableSet<String> result=TestCommand.getPathToSourceFolders(javaLibraryRule,Optional.of(defaultJavaPackageFinder),projectFilesystem);
  assertEquals("All non-generated source files are under one source tmp.",ImmutableSet.of("package/src/"),result);
  verify(mocks);
}
