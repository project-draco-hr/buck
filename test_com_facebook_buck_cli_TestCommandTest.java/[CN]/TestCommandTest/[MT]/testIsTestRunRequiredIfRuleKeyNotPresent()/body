{
  ExecutionContext executionContext=createMock(ExecutionContext.class);
  expect(executionContext.isDebugEnabled()).andReturn(false);
  FakeTestRule testRule=new FakeTestRule(BuildRuleType.JAVA_TEST,ImmutableSet.of(new Label("windows")),BuildTargetFactory.newInstance("//:lulz"),ImmutableSortedSet.<BuildRule>of(),ImmutableSet.<BuildTargetPattern>of()){
    @Override public BuildRuleSuccess.Type getBuildResultType(){
      return BuildRuleSuccess.Type.MATCHING_RULE_KEY;
    }
    @Override public boolean hasTestResultFiles(    ExecutionContext context){
      return true;
    }
  }
;
  TestRuleKeyFileHelper testRuleKeyFileHelper=createNiceMock(TestRuleKeyFileHelper.class);
  expect(testRuleKeyFileHelper.isRuleKeyInDir(testRule)).andReturn(false);
  replay(executionContext,testRuleKeyFileHelper);
  assertTrue("A cached build should run the tests if the test output directory\'s rule key is not " + "present or does not matche the rule key for the test.",TestCommand.isTestRunRequiredForTest(testRule,executionContext,testRuleKeyFileHelper,true,false));
  verify(executionContext,testRuleKeyFileHelper);
}
