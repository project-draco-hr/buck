{
  FakeTestRule rule1=new FakeTestRule(BuildRuleType.JAVA_TEST,ImmutableSet.of(new Label("windows"),new Label("linux")),BuildTargetFactory.newInstance("//:for"),ImmutableSortedSet.<BuildRule>of(),ImmutableSet.<BuildTargetPattern>of());
  FakeTestRule rule2=new FakeTestRule(BuildRuleType.JAVA_TEST,ImmutableSet.of(new Label("android")),BuildTargetFactory.newInstance("//:teh"),ImmutableSortedSet.<BuildRule>of(rule1),ImmutableSet.<BuildTargetPattern>of());
  FakeTestRule rule3=new FakeTestRule(BuildRuleType.JAVA_TEST,ImmutableSet.of(new Label("windows")),BuildTargetFactory.newInstance("//:lulz"),ImmutableSortedSet.<BuildRule>of(rule2),ImmutableSet.<BuildTargetPattern>of());
  Iterable<FakeTestRule> rules=Lists.newArrayList(rule1,rule2,rule3);
  DependencyGraph graph=createDependencyGraphFromBuildRules(rules);
  TestCommandOptions options=getOptions("--include","linux","windows");
  Iterable<TestRule> result=TestCommand.filterTestRules(options,TestCommand.getCandidateRules(graph));
  assertThat(result,containsInAnyOrder((TestRule)rule1,(TestRule)rule3));
}
