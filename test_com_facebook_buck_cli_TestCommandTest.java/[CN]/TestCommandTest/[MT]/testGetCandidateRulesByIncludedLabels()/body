{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  FakeTestRule rule1=new FakeTestRule(JavaTestDescription.TYPE,ImmutableSet.of(new Label("windows"),new Label("linux")),BuildTargetFactory.newInstance("//:for"),pathResolver,ImmutableSortedSet.<BuildRule>of());
  FakeTestRule rule2=new FakeTestRule(JavaTestDescription.TYPE,ImmutableSet.of(new Label("android")),BuildTargetFactory.newInstance("//:teh"),pathResolver,ImmutableSortedSet.<BuildRule>of(rule1));
  FakeTestRule rule3=new FakeTestRule(JavaTestDescription.TYPE,ImmutableSet.of(new Label("windows")),BuildTargetFactory.newInstance("//:lulz"),pathResolver,ImmutableSortedSet.<BuildRule>of(rule2));
  Iterable<FakeTestRule> rules=Lists.newArrayList(rule1,rule2,rule3);
  ActionGraph graph=createDependencyGraphFromBuildRules(rules);
  TestCommandOptions options=getOptions("--include","linux","windows");
  Iterable<TestRule> result=TestCommand.filterTestRules(options,TestCommand.getCandidateRules(graph));
  assertThat(result,containsInAnyOrder((TestRule)rule1,(TestRule)rule3));
}
