{
  final Path destinationDir=Paths.get("");
  Path rDotJavaSrcDir=Paths.get("");
  ExecutionContext context=createMock(ExecutionContext.class);
  FakeProjectFileSystem fileSystem=new FakeProjectFileSystem();
  expect(context.getProjectFilesystem()).andStubReturn(fileSystem);
  ImmutableList<Path> stringFiles=ImmutableList.of(firstFile,secondFile,thirdFile,fourthFile,fifthFile);
  replayAll();
  CompileStringsStep step=new CompileStringsStep(stringFiles,rDotJavaSrcDir,new Function<String,Path>(){
    @Override public Path apply(    String input){
      return destinationDir.resolve(input + PackageStringAssets.STRING_ASSET_FILE_EXTENSION);
    }
  }
);
  assertEquals(0,step.execute(context));
  Map<String,byte[]> fileContentsMap=fileSystem.getFileContents();
  assertEquals("Incorrect number of string files written.",4,fileContentsMap.size());
  for (  Map.Entry<String,byte[]> entry : fileContentsMap.entrySet()) {
    File expectedFile=testdataDir.resolve(entry.getKey()).toFile();
    assertArrayEquals(createBinaryStream(expectedFile),fileContentsMap.get(entry.getKey()));
  }
  verifyAll();
}
