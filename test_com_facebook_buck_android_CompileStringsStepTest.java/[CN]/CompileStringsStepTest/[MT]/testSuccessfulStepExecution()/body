{
  Path destinationDir=Paths.get("");
  Path rDotJavaSrcDir=Paths.get("");
  ExecutionContext context=createMock(ExecutionContext.class);
  FakeProjectFileSystem fileSystem=new FakeProjectFileSystem();
  expect(context.getProjectFilesystem()).andStubReturn(fileSystem);
  FilterResourcesStep filterResourcesStep=createMock(FilterResourcesStep.class);
  expect(filterResourcesStep.getNonEnglishStringFiles()).andReturn(ImmutableSet.of(FIRST_FILE,SECOND_FILE,THIRD_FILE,FOURTH_FILE));
  replayAll();
  CompileStringsStep step=new CompileStringsStep(filterResourcesStep,rDotJavaSrcDir,destinationDir);
  assertEquals(0,step.execute(context));
  Map<String,byte[]> fileContentsMap=fileSystem.getFileContents();
  assertEquals("Incorrect number of string files written.",3,fileContentsMap.size());
  for (  Map.Entry<String,byte[]> entry : fileContentsMap.entrySet()) {
    File expectedFile=TESTDATA_DIR.resolve(entry.getKey()).toFile();
    assertArrayEquals(createBinaryStream(expectedFile),fileContentsMap.get(entry.getKey()));
  }
  verifyAll();
}
