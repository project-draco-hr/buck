{
  String xmlInput="<string name='name1' gender='unknown'>Value1</string>" + "<string name='name1_f1gender' gender='female'>Value1_f1</string>" + "<string name='name2' gender='unknown'>Value with space</string>"+ "<string name='name2_m2gender' gender='male'>Value with space m2</string>"+ "<string name='name3' gender='unknown'>Value with \"quotes\"</string>"+ "<string name='name4' gender='unknown'></string>"+ "<string name='name3' gender='unknown'>IGNORE</string>"+ "<string name='name5' gender='unknown'>Value with %1$s</string>";
  NodeList stringNodes=XmlDomParser.parse(createResourcesXml(xmlInput)).getElementsByTagName("string");
  EnumMap<Gender,String> map1=Maps.newEnumMap(Gender.class);
  map1.put(Gender.unknown,"Value1");
  map1.put(Gender.female,"Value1_f1");
  EnumMap<Gender,String> map2=Maps.newEnumMap(Gender.class);
  map2.put(Gender.unknown,"Value with space");
  map2.put(Gender.male,"Value with space m2");
  EnumMap<Gender,String> map3=Maps.newEnumMap(Gender.class);
  map3.put(Gender.unknown,"Value with \"quotes\"");
  EnumMap<Gender,String> map4=Maps.newEnumMap(Gender.class);
  map4.put(Gender.unknown,"");
  EnumMap<Gender,String> map5=Maps.newEnumMap(Gender.class);
  map5.put(Gender.unknown,"Value with %1$s");
  Map<Integer,EnumMap<Gender,String>> stringsMap=Maps.newHashMap();
  CompileStringsStep step=createNonExecutingStep();
  step.addStringResourceNameToIdMap(ImmutableMap.of("name1",1,"name2",2,"name3",3,"name4",4,"name5",5));
  step.scrapeStringNodes(stringNodes,stringsMap);
  assertEquals("Incorrect map of resource id to string values.",ImmutableMap.of(1,map1,2,map2,3,map3,4,map4,5,map5),stringsMap);
}
