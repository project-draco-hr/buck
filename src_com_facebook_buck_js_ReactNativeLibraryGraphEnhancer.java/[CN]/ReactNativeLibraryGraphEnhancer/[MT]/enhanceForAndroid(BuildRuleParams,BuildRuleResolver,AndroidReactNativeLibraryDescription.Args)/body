{
  final ReactNativeDeps reactNativeDeps=createReactNativeDeps(params,resolver,args,ReactNativePlatform.ANDROID);
  SourcePathResolver sourcePathResolver=new SourcePathResolver(resolver);
  BuildTarget originalBuildTarget=params.getBuildTarget();
  BuildRuleParams paramsForBundle=params.copyWithBuildTarget(BuildTarget.builder(originalBuildTarget).addFlavors(REACT_NATIVE_BUNDLE_FLAVOR).build()).copyWithExtraDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(reactNativeDeps)));
  ReactNativeBundle bundle=new ReactNativeBundle(paramsForBundle,sourcePathResolver,args.entryPath,ReactNativeFlavors.isDevMode(originalBuildTarget),args.bundleName,getPackager(),ReactNativePlatform.ANDROID,reactNativeDeps);
  resolver.addToIndex(bundle);
  ImmutableList.Builder<BuildRule> extraDeps=ImmutableList.builder();
  extraDeps.add(bundle);
  if (args.rDotJavaPackage.isPresent()) {
    BuildRuleParams paramsForResource=params.copyWithBuildTarget(BuildTarget.builder(originalBuildTarget).addFlavors(REACT_NATIVE_ANDROID_RES_FLAVOR).build()).copyWithExtraDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(bundle,reactNativeDeps)));
    BuildRule resource=new AndroidResource(paramsForResource,sourcePathResolver,ImmutableSortedSet.<BuildRule>of(),new PathSourcePath(params.getProjectFilesystem(),bundle.getResources()),ImmutableSortedSet.<Path>of(),args.rDotJavaPackage.get(),null,ImmutableSortedSet.<Path>of(),null,false,Optional.of(Suppliers.memoize(new Supplier<Sha1HashCode>(){
      @Override public Sha1HashCode get(){
        return reactNativeDeps.getInputsHash();
      }
    }
)));
    resolver.addToIndex(resource);
    extraDeps.add(resource);
  }
  return new AndroidReactNativeLibrary(params.appendExtraDeps(extraDeps.build()),sourcePathResolver,bundle);
}
