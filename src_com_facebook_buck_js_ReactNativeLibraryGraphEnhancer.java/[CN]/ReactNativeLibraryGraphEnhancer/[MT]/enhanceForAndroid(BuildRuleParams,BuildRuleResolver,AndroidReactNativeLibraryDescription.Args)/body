{
  final ReactNativeDeps reactNativeDeps=createReactNativeDeps(params,resolver,args,ReactNativePlatform.ANDROID);
  SourcePathResolver sourcePathResolver=new SourcePathResolver(resolver);
  BuildTarget originalBuildTarget=params.getBuildTarget();
  BuildRuleParams paramsForBundle=params.copyWithBuildTarget(BuildTarget.builder(originalBuildTarget).addFlavors(REACT_NATIVE_BUNDLE_FLAVOR).build()).appendExtraDeps(ImmutableList.<BuildRule>builder().add(reactNativeDeps).addAll(resolver.getAllRules(SourcePaths.filterBuildTargetSourcePaths(Collections.singleton(buckConfig.getPackager())))).build());
  ReactNativeBundle bundle=new ReactNativeBundle(paramsForBundle,sourcePathResolver,args.entryPath,ReactNativeFlavors.isDevMode(originalBuildTarget),args.bundleName,args.packagerFlags,buckConfig.getPackager(),ReactNativePlatform.ANDROID,reactNativeDeps);
  resolver.addToIndex(bundle);
  ImmutableList.Builder<BuildRule> extraDeps=ImmutableList.builder();
  extraDeps.add(bundle);
  if (args.rDotJavaPackage.isPresent()) {
    BuildRuleParams paramsForResource=params.copyWithBuildTarget(BuildTarget.builder(originalBuildTarget).addFlavors(REACT_NATIVE_ANDROID_RES_FLAVOR).build()).copyWithExtraDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(bundle,reactNativeDeps)));
    SourcePath resources=new BuildTargetSourcePath(bundle.getBuildTarget(),bundle.getResources());
    BuildRule resource=new AndroidResource(paramsForResource,sourcePathResolver,ImmutableSortedSet.<BuildRule>of(),resources,ImmutableSortedSet.<Path>of(),Optional.of(resources),args.rDotJavaPackage.get(),null,ImmutableSortedSet.<Path>of(),Optional.<SourcePath>absent(),null,false);
    resolver.addToIndex(resource);
    extraDeps.add(resource);
  }
  return new AndroidReactNativeLibrary(params.appendExtraDeps(extraDeps.build()),sourcePathResolver,bundle);
}
