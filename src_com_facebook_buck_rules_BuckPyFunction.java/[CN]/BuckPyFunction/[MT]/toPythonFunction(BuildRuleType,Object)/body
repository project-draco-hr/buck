{
  @Nullable TargetName defaultName=dto.getClass().getAnnotation(TargetName.class);
  ImmutableList.Builder<StParamInfo> mandatory=ImmutableList.builder();
  ImmutableList.Builder<StParamInfo> optional=ImmutableList.builder();
  for (  ParamInfo param : ImmutableSortedSet.copyOf(argMarshaller.getAllParamInfo(dto))) {
    if (isSkippable(param)) {
      continue;
    }
    if (param.isOptional()) {
      optional.add(new StParamInfo(param.getName(),param.getPythonName(),getPythonDefault(param)));
    }
 else {
      mandatory.add(new StParamInfo(param.getName(),param.getPythonName(),null));
    }
  }
  optional.add(new StParamInfo("visibility","visibility","[]"));
  STGroup stGroup=new STGroupFile(Resources.getResource(BuckPyFunction.class,BUCK_PY_FUNCTION_TEMPLATE),"UTF-8",'<','>');
  ST st=stGroup.getInstanceOf("buck_py_function");
  st.add("name",type.getName());
  st.add("params",ImmutableList.builder().addAll(mandatory.build()).addAll(optional.build()).build());
  st.add("typePropName",TYPE_PROPERTY_NAME);
  st.add("defaultName",defaultName == null ? null : defaultName.name());
  StringWriter stringWriter=new StringWriter();
  try {
    st.write(new AutoIndentWriter(stringWriter,"\n"));
  }
 catch (  IOException e) {
    throw new IllegalStateException("ST writer should not throw with StringWriter",e);
  }
  return stringWriter.toString();
}
