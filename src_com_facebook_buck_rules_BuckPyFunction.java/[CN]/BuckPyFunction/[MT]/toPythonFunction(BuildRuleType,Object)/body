{
  StringBuilder builder=new StringBuilder();
  SortedSet<ParamInfo<?>> mandatory=Sets.newTreeSet();
  SortedSet<ParamInfo<?>> optional=Sets.newTreeSet();
  for (  ParamInfo<?> param : argMarshaller.getAllParamInfo(dto)) {
    if (isSkippable(param)) {
      continue;
    }
    if (param.isOptional()) {
      optional.add(param);
    }
 else {
      mandatory.add(param);
    }
  }
  @Nullable TargetName defaultName=dto.getClass().getAnnotation(TargetName.class);
  builder.append("@provide_for_build\n").append("def ").append(type.getName()).append("(");
  if (defaultName == null) {
    builder.append("name, ");
  }
  for (  ParamInfo<?> param : Iterables.concat(mandatory,optional)) {
    appendPythonParameter(builder,param);
  }
  builder.append("visibility=[], build_env=None):\n").append("  add_rule({\n").append("    '" + TYPE_PROPERTY_NAME + "' : '").append(type.getName()).append("',\n");
  if (defaultName != null) {
    builder.append("    'name' : '").append(defaultName.name()).append("',\n");
  }
 else {
    builder.append("    'name' : name,\n");
  }
  for (  ParamInfo<?> param : Iterables.concat(mandatory,optional)) {
    builder.append("    '").append(param.getName()).append("' : ").append(param.getPythonName()).append(",\n");
  }
  builder.append("    'visibility' : visibility,\n");
  builder.append("  }, build_env)\n\n");
  return builder.toString();
}
