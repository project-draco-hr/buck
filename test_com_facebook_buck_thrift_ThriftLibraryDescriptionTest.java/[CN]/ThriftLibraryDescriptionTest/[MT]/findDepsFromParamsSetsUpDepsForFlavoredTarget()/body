{
  BuildTarget thriftTarget=BuildTargetFactory.newInstance("//bar:thrift_compiler");
  FakeBuildRule implicitDep=createFakeBuildRule("//foo:implicit_dep",new SourcePathResolver(new BuildRuleResolver()));
  String language="fake";
  Flavor flavor=ImmutableFlavor.of("fake");
  ImmutableSet<String> options=ImmutableSet.of();
  ImmutableSet<BuildTarget> implicitDeps=ImmutableSet.of(implicitDep.getBuildTarget());
  BuildTarget unflavoredTarget=BuildTargetFactory.newInstance("//:thrift");
  BuildTarget flavoredTarget=BuildTargets.createFlavoredBuildTarget(unflavoredTarget.checkUnflavored(),flavor);
  FakeBuckConfig buckConfig=new FakeBuckConfig(ImmutableMap.of("thrift",ImmutableMap.of("compiler",thriftTarget.toString())));
  ThriftBuckConfig thriftBuckConfig=new ThriftBuckConfig(buckConfig);
  ThriftLanguageSpecificEnhancer enhancer=new FakeThriftLanguageSpecificEnhancer(language,flavor,implicitDeps,options);
  ThriftLibraryDescription desc=new ThriftLibraryDescription(thriftBuckConfig,ImmutableList.of(enhancer));
  ThriftConstructorArg constructorArg=desc.createUnpopulatedConstructorArg();
  constructorArg.deps=Optional.of(ImmutableSortedSet.<BuildTarget>of());
  Iterable<BuildTarget> results=desc.findDepsForTargetFromConstructorArgs(flavoredTarget,constructorArg);
  assertEquals(ImmutableSet.<BuildTarget>builder().add(unflavoredTarget).add(thriftTarget).addAll(implicitDeps).build(),ImmutableSet.copyOf(results));
}
