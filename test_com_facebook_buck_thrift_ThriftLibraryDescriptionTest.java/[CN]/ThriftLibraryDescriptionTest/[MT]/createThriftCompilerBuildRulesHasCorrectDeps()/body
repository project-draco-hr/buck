{
  BuildRuleResolver resolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  String language="fake";
  Flavor flavor=ImmutableFlavor.of("fake");
  ImmutableSet<String> options=ImmutableSet.of();
  BuildTarget unflavoredTarget=BuildTargetFactory.newInstance("//:thrift");
  BuildRuleParams unflavoredParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder(unflavoredTarget).build()).setProjectFilesystem(filesystem).build();
  BuildTarget flavoredTarget=BuildTargets.createFlavoredBuildTarget(unflavoredTarget.checkUnflavored(),flavor);
  BuildRuleParams flavoredParams=new FakeBuildRuleParamsBuilder(flavoredTarget).setProjectFilesystem(filesystem).build();
  Path thriftPath=Paths.get("thrift_path");
  filesystem.touch(thriftPath);
  FakeBuckConfig buckConfig=new FakeBuckConfig(ImmutableMap.of("thrift",ImmutableMap.of("compiler",thriftPath.toString())),filesystem);
  ThriftBuckConfig thriftBuckConfig=new ThriftBuckConfig(buckConfig);
  ThriftLibraryDescription desc=new ThriftLibraryDescription(thriftBuckConfig,ImmutableList.<ThriftLanguageSpecificEnhancer>of());
  String sourceName="test.thrift";
  SourcePath sourcePath=new TestSourcePath(sourceName);
  ImmutableMap<String,ThriftCompiler> rules=desc.createThriftCompilerBuildRules(flavoredParams,resolver,ThriftLibraryDescription.CompilerType.THRIFT,ImmutableList.<String>of(),language,options,ImmutableMap.of(sourceName,sourcePath),ImmutableSortedSet.<ThriftLibrary>of());
  assertSame(rules.size(),1);
  ThriftCompiler rule=rules.get(sourceName);
  assertNotNull(rule);
  assertEquals(ImmutableSortedSet.<BuildRule>of(),rule.getDeps());
  Path includeRoot=desc.getIncludeRoot(unflavoredTarget);
  SymlinkTree thriftIncludeSymlinkTree=createFakeSymlinkTree(desc.createThriftIncludeSymlinkTreeTarget(unflavoredTarget),pathResolver,includeRoot);
  ThriftLibrary lib=new ThriftLibrary(unflavoredParams,pathResolver,ImmutableSortedSet.<ThriftLibrary>of(),thriftIncludeSymlinkTree,ImmutableMap.<Path,SourcePath>of());
  rules=desc.createThriftCompilerBuildRules(flavoredParams,resolver,ThriftLibraryDescription.CompilerType.THRIFT,ImmutableList.<String>of(),language,options,ImmutableMap.of(sourceName,sourcePath),ImmutableSortedSet.of(lib));
  assertSame(rules.size(),1);
  rule=rules.get(sourceName);
  assertNotNull(rule);
  assertEquals(ImmutableSortedSet.<BuildRule>of(thriftIncludeSymlinkTree),rule.getDeps());
  Genrule genrule=(Genrule)GenruleBuilder.newGenruleBuilder(BuildTargetFactory.newInstance("//:genrule")).setOut(sourceName).build(resolver);
  SourcePath ruleSourcePath=new BuildTargetSourcePath(genrule.getBuildTarget());
  rules=desc.createThriftCompilerBuildRules(flavoredParams,resolver,ThriftLibraryDescription.CompilerType.THRIFT,ImmutableList.<String>of(),language,options,ImmutableMap.of(sourceName,ruleSourcePath),ImmutableSortedSet.<ThriftLibrary>of());
  assertSame(rules.size(),1);
  rule=rules.get(sourceName);
  assertNotNull(rule);
  assertEquals(ImmutableSortedSet.<BuildRule>of(genrule),rule.getDeps());
  FakeBuildRule thriftRule=createFakeBuildRule("//thrift:target",pathResolver);
  resolver.addToIndex(thriftRule);
  filesystem.mkdirs(thriftRule.getBuildTarget().getBasePath());
  filesystem.touch(thriftRule.getBuildTarget().getBasePath().resolve("BUCK"));
  buckConfig=new FakeBuckConfig(ImmutableMap.of("thrift",ImmutableMap.of("compiler",thriftRule.getBuildTarget().toString())),filesystem);
  thriftBuckConfig=new ThriftBuckConfig(buckConfig);
  desc=new ThriftLibraryDescription(thriftBuckConfig,ImmutableList.<ThriftLanguageSpecificEnhancer>of());
  rules=desc.createThriftCompilerBuildRules(flavoredParams,resolver,ThriftLibraryDescription.CompilerType.THRIFT,ImmutableList.<String>of(),language,options,ImmutableMap.of(sourceName,sourcePath),ImmutableSortedSet.<ThriftLibrary>of());
  assertSame(rules.size(),1);
  rule=rules.get(sourceName);
  assertNotNull(rule);
  assertEquals(ImmutableSortedSet.<BuildRule>of(thriftRule),rule.getDeps());
}
