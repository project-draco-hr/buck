{
  BuildRuleResolver resolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  String language="fake";
  Flavor flavor=new Flavor("fake");
  final BuildRule implicitDep=createFakeBuildRule("//implicit:dep",pathResolver);
  resolver.addToIndex(implicitDep);
  filesystem.mkdirs(implicitDep.getBuildTarget().getBasePath());
  filesystem.touch(implicitDep.getBuildTarget().getBuildFilePath());
  ImmutableSet<BuildTarget> implicitDeps=ImmutableSet.of(implicitDep.getBuildTarget());
  ImmutableSet<String> options=ImmutableSet.of();
  BuildTarget unflavoredTarget=BuildTargetFactory.newInstance("//:thrift");
  BuildRuleParams unflavoredParams=new FakeBuildRuleParamsBuilder(unflavoredTarget).setProjectFilesystem(filesystem).build();
  BuildTarget flavoredTarget=BuildTargets.createFlavoredBuildTarget(unflavoredTarget,flavor);
  BuildRuleParams flavoredParams=new FakeBuildRuleParamsBuilder(flavoredTarget).setProjectFilesystem(filesystem).build();
  final String thriftSourceName1="foo.thrift";
  BuildTarget genruleTarget=BuildTargetFactory.newInstance("//:genrule");
  final Genrule genrule=(Genrule)GenruleBuilder.newGenruleBuilder(genruleTarget).setOut(thriftSourceName1).build(resolver);
  SourcePath thriftSource1=new BuildRuleSourcePath(genrule);
  final ImmutableList<String> thriftServices1=ImmutableList.of();
  final String thriftSourceName2="bar.thrift";
  SourcePath thriftSource2=new TestSourcePath(thriftSourceName2);
  final ImmutableList<String> thriftServices2=ImmutableList.of();
  final FakeBuildRule thriftRule=createFakeBuildRule("//thrift:target",pathResolver);
  resolver.addToIndex(thriftRule);
  filesystem.mkdirs(thriftRule.getBuildTarget().getBasePath());
  filesystem.touch(thriftRule.getBuildTarget().getBuildFilePath());
  FakeBuckConfig buckConfig=new FakeBuckConfig(ImmutableMap.<String,Map<String,String>>of("thrift",ImmutableMap.of("compiler_target",thriftRule.getBuildTarget().toString())));
  ThriftBuckConfig thriftBuckConfig=new ThriftBuckConfig(buckConfig);
  ThriftLibraryDescription desc=new ThriftLibraryDescription(thriftBuckConfig,ImmutableList.<ThriftLanguageSpecificEnhancer>of());
  final BuildRule thriftIncludeSymlinkTree=createFakeBuildRule(desc.createThriftIncludeSymlinkTreeTarget(unflavoredTarget),pathResolver);
  FakeThriftLanguageSpecificEnhancer enhancer=new FakeThriftLanguageSpecificEnhancer(language,flavor,implicitDeps,options){
    @Override public void checkCreateBuildRuleInputs(    ImmutableMap<String,ThriftSource> sources,    ImmutableSortedSet<BuildRule> deps){
      assertEquals(2,sources.size());
      ThriftSource src1=sources.get(thriftSourceName1);
      assertNotNull(src1);
      ThriftSource src2=sources.get(thriftSourceName2);
      assertNotNull(src2);
      assertEquals(thriftServices1,src1.getServices());
      assertEquals(thriftServices2,src2.getServices());
      assertEquals(ImmutableSortedSet.of(genrule,thriftRule,thriftIncludeSymlinkTree),src1.getCompileRule().getDeps());
      assertEquals(ImmutableSortedSet.of(genrule,thriftRule,thriftIncludeSymlinkTree),src2.getCompileRule().getDeps());
      assertEquals(ImmutableSortedSet.<BuildRule>naturalOrder().add(implicitDep).build(),deps);
    }
  }
;
  desc=new ThriftLibraryDescription(thriftBuckConfig,ImmutableList.<ThriftLanguageSpecificEnhancer>of(enhancer));
  ThriftConstructorArg arg=desc.createUnpopulatedConstructorArg();
  arg.name="thrift";
  arg.srcs=ImmutableMap.of(thriftSource1,thriftServices1,thriftSource2,thriftServices2);
  arg.deps=Optional.absent();
  arg.flags=Optional.absent();
  BuildRule rule=desc.createBuildRule(unflavoredParams,resolver,arg);
  resolver.addToIndex(rule);
  desc.createBuildRule(flavoredParams,resolver,arg);
}
