{
  BuildRuleResolver resolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  BuildTarget unflavoredTarget=BuildTargetFactory.newInstance("//:thrift");
  BuildRuleParams unflavoredParams=BuildRuleParamsFactory.createTrivialBuildRuleParams(unflavoredTarget);
  FakeBuckConfig buckConfig=new FakeBuckConfig(ImmutableMap.<String,ImmutableMap<String,String>>of(),ImmutableMap.<String,String>of());
  ThriftBuckConfig thriftBuckConfig=new ThriftBuckConfig(buckConfig);
  ThriftLibraryDescription desc=new ThriftLibraryDescription(thriftBuckConfig,ImmutableList.<ThriftLanguageSpecificEnhancer>of());
  String sourceName="test.thrift";
  SourcePath source=new TestSourcePath(sourceName);
  BuildTarget depTarget=BuildTargetFactory.newInstance("//:dep");
  Path depIncludeRoot=desc.getIncludeRoot(depTarget);
  SymlinkTree depIncludeSymlinkTree=createFakeSymlinkTree(depTarget,pathResolver,depIncludeRoot);
  ThriftLibrary dep=new ThriftLibrary(BuildRuleParamsFactory.createTrivialBuildRuleParams(depTarget),pathResolver,ImmutableSortedSet.<ThriftLibrary>of(),depIncludeSymlinkTree,ImmutableMap.<Path,SourcePath>of());
  resolver.addToIndex(dep);
  ThriftConstructorArg arg=desc.createUnpopulatedConstructorArg();
  arg.name="thrift";
  arg.srcs=ImmutableMap.of(source,ImmutableList.<String>of());
  arg.deps=Optional.of(ImmutableSortedSet.of(dep.getBuildTarget()));
  arg.flags=Optional.absent();
  BuildRule rule=desc.createBuildRule(TargetGraph.EMPTY,unflavoredParams,resolver,arg);
  assertTrue(rule instanceof ThriftLibrary);
  ThriftLibrary me=(ThriftLibrary)rule;
  assertEquals(ImmutableSortedSet.of(dep),me.getThriftDeps());
  assertEquals(desc.getIncludeRoot(unflavoredTarget),me.getIncludeTreeRule().getRoot());
}
