{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  BuildTarget unflavoredTarget=BuildTargetFactory.newInstance("//:thrift");
  BuildRuleParams unflavoredParams=new FakeBuildRuleParamsBuilder(unflavoredTarget).build();
  ProjectFilesystem filesystem=unflavoredParams.getProjectFilesystem();
  BuckConfig buckConfig=FakeBuckConfig.builder().build();
  ThriftBuckConfig thriftBuckConfig=new ThriftBuckConfig(buckConfig);
  ThriftLibraryDescription desc=new ThriftLibraryDescription(thriftBuckConfig,ImmutableList.<ThriftLanguageSpecificEnhancer>of());
  String sourceName="test.thrift";
  SourcePath source=new FakeSourcePath(sourceName);
  BuildTarget depTarget=BuildTargetFactory.newInstance("//:dep");
  Path depIncludeRoot=filesystem.resolve(desc.getIncludeRoot(depTarget));
  HeaderSymlinkTree depIncludeSymlinkTree=createFakeSymlinkTree(depTarget,pathResolver,depIncludeRoot);
  ThriftLibrary dep=new ThriftLibrary(new FakeBuildRuleParamsBuilder(depTarget).build(),pathResolver,ImmutableSortedSet.<ThriftLibrary>of(),depIncludeSymlinkTree,ImmutableMap.<Path,SourcePath>of());
  resolver.addToIndex(dep);
  ThriftConstructorArg arg=desc.createUnpopulatedConstructorArg();
  arg.name="thrift";
  arg.srcs=ImmutableMap.of(source,ImmutableList.<String>of());
  arg.deps=Optional.of(ImmutableSortedSet.of(dep.getBuildTarget()));
  arg.flags=Optional.absent();
  BuildRule rule=desc.createBuildRule(TargetGraph.EMPTY,unflavoredParams,resolver,arg);
  assertTrue(rule instanceof ThriftLibrary);
  ThriftLibrary me=(ThriftLibrary)rule;
  assertEquals(ImmutableSortedSet.of(dep),me.getThriftDeps());
  assertEquals(filesystem.resolve(desc.getIncludeRoot(unflavoredTarget)),me.getIncludeTreeRule().getIncludePath());
}
