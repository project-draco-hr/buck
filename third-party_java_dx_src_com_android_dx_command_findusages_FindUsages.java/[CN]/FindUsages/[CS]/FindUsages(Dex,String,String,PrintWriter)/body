{
  this.dex=dex;
  this.out=out;
  Set<Integer> typeStringIndexes=new HashSet<Integer>();
  Set<Integer> memberNameIndexes=new HashSet<Integer>();
  Pattern declaredByPattern=Pattern.compile(declaredBy);
  Pattern memberNamePattern=Pattern.compile(memberName);
  List<String> strings=dex.strings();
  for (int i=0; i < strings.size(); ++i) {
    String string=strings.get(i);
    if (declaredByPattern.matcher(string).matches()) {
      typeStringIndexes.add(i);
    }
    if (memberNamePattern.matcher(string).matches()) {
      memberNameIndexes.add(i);
    }
  }
  if (typeStringIndexes.isEmpty() || memberNameIndexes.isEmpty()) {
    methodIds=fieldIds=null;
    return;
  }
  methodIds=new HashSet<Integer>();
  fieldIds=new HashSet<Integer>();
  for (  int typeStringIndex : typeStringIndexes) {
    int typeIndex=Collections.binarySearch(dex.typeIds(),typeStringIndex);
    if (typeIndex < 0) {
      continue;
    }
    methodIds.addAll(getMethodIds(dex,memberNameIndexes,typeIndex));
    fieldIds.addAll(getFieldIds(dex,memberNameIndexes,typeIndex));
  }
  codeReader.setFieldVisitor(new CodeReader.Visitor(){
    public void visit(    DecodedInstruction[] all,    DecodedInstruction one){
      int fieldId=one.getIndex();
      if (fieldIds.contains(fieldId)) {
        out.println(location() + ": field reference " + dex.fieldIds().get(fieldId)+ " ("+ OpcodeInfo.getName(one.getOpcode())+ ")");
      }
    }
  }
);
  codeReader.setMethodVisitor(new CodeReader.Visitor(){
    public void visit(    DecodedInstruction[] all,    DecodedInstruction one){
      int methodId=one.getIndex();
      if (methodIds.contains(methodId)) {
        out.println(location() + ": method reference " + dex.methodIds().get(methodId)+ " ("+ OpcodeInfo.getName(one.getOpcode())+ ")");
      }
    }
  }
);
}
