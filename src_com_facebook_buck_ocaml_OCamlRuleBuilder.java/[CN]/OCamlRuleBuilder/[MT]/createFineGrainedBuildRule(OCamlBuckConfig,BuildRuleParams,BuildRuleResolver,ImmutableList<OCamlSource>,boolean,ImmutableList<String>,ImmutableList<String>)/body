{
  CxxPreprocessorInput cxxPreprocessorInputFromDeps;
  try {
    cxxPreprocessorInputFromDeps=CxxPreprocessorInput.concat(CxxPreprocessables.getTransitiveCxxPreprocessorInput(ocamlBuckConfig.getCxxPlatform(),FluentIterable.from(params.getDeps()).filter(Predicates.instanceOf(CxxPreprocessorDep.class))));
  }
 catch (  CxxPreprocessorInput.ConflictingHeadersException e) {
    throw e.getHumanReadableExceptionForBuildTarget(params.getBuildTarget());
  }
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ImmutableList<String> includes=FluentIterable.from(params.getDeps()).transformAndConcat(getLibInclude(false)).toList();
  ImmutableList<String> bytecodeIncludes=FluentIterable.from(params.getDeps()).transformAndConcat(getLibInclude(true)).toList();
  NativeLinkableInput linkableInput=NativeLinkables.getTransitiveNativeLinkableInput(ocamlBuckConfig.getCxxPlatform(),params.getDeps(),Linker.LinkableDepType.STATIC,false);
  ImmutableList<OCamlLibrary> ocamlInput=OCamlUtil.getTransitiveOCamlInput(params.getDeps());
  ImmutableList<SourcePath> allInputs=ImmutableList.<SourcePath>builder().addAll(getInput(srcs)).addAll(linkableInput.getInputs()).build();
  BuildTarget buildTarget=isLibrary ? createStaticLibraryBuildTarget(params.getBuildTarget()) : createOCamlLinkTarget(params.getBuildTarget());
  final BuildRuleParams compileParams=params.copyWithChanges(buildTarget,Suppliers.ofInstance(ImmutableSortedSet.copyOf(pathResolver.filterBuildRuleInputs(allInputs))),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  ImmutableList.Builder<String> flagsBuilder=ImmutableList.builder();
  flagsBuilder.addAll(argFlags);
  ImmutableSortedSet.Builder<BuildRule> compileDepsBuilder=ImmutableSortedSet.naturalOrder();
  ImmutableSortedSet.Builder<BuildRule> bytecodeCompileDepsBuilder=ImmutableSortedSet.naturalOrder();
  ImmutableSortedSet.Builder<BuildRule> bytecodeLinkDepsBuilder=ImmutableSortedSet.naturalOrder();
  for (  OCamlLibrary library : ocamlInput) {
    compileDepsBuilder.addAll(library.getCompileDeps());
    bytecodeCompileDepsBuilder.addAll(library.getBytecodeCompileDeps());
    bytecodeLinkDepsBuilder.addAll(library.getBytecodeLinkDeps());
  }
  OCamlBuildContext ocamlContext=OCamlBuildContext.builder(ocamlBuckConfig).setFlags(flagsBuilder.build()).setIncludes(includes).setBytecodeIncludes(bytecodeIncludes).setOCamlInput(ocamlInput).setLinkableInput(linkableInput).setBuildTarget(buildTarget).setLibrary(isLibrary).setCxxPreprocessorInput(cxxPreprocessorInputFromDeps).setInput(pathResolver.getAllPaths(getInput(srcs))).setCompileDeps(compileDepsBuilder.build()).setBytecodeCompileDeps(bytecodeCompileDepsBuilder.build()).setBytecodeLinkDeps(bytecodeLinkDepsBuilder.build()).build();
  File baseDir=params.getProjectFilesystem().getRootPath().toAbsolutePath().toFile();
  ImmutableMap<Path,ImmutableList<Path>> mlInput=getMLInputWithDeps(baseDir,ocamlContext);
  ImmutableList<SourcePath> cInput=getCInput(pathResolver,getInput(srcs));
  OCamlBuildRulesGenerator generator=new OCamlBuildRulesGenerator(compileParams,pathResolver,resolver,ocamlContext,mlInput,cInput,ocamlBuckConfig.getCCompiler(),ocamlBuckConfig.getCxxCompiler());
  OCamlGeneratedBuildRules result=generator.generate();
  if (isLibrary) {
    return new OCamlStaticLibrary(params.copyWithDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getDeclaredDeps()).addAll(result.getRules()).build()),Suppliers.ofInstance(params.getExtraDeps())),pathResolver,compileParams,linkerFlags,result.getObjectFiles(),ocamlContext,result.getRules().get(0),result.getCompileDeps(),result.getBytecodeCompileDeps(),ImmutableSortedSet.<BuildRule>naturalOrder().add(result.getBytecodeLink()).addAll(pathResolver.filterBuildRuleInputs(result.getObjectFiles())).build());
  }
 else {
    return new OCamlBinary(params.copyWithDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getDeclaredDeps()).addAll(result.getRules()).build()),Suppliers.ofInstance(params.getExtraDeps())),pathResolver,result.getRules().get(0));
  }
}
