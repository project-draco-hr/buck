{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ImmutableList<String> includes=FluentIterable.from(params.getDeps()).transformAndConcat(getLibInclude(false)).toList();
  ImmutableList<String> bytecodeIncludes=FluentIterable.from(params.getDeps()).transformAndConcat(getLibInclude(true)).toList();
  final FluentIterable<SourcePath> srcSourcePaths=FluentIterable.from(srcs).transform(OCamlSource.TO_SOURCE_PATH);
  final FluentIterable<Path> srcPaths=srcSourcePaths.transform(pathResolver.getPathFunction());
  NativeLinkableInput linkableInput=NativeLinkables.getTransitiveNativeLinkableInput(ocamlBuckConfig.getCxxPlatform(),params.getDeps(),Linker.LinkableDepType.STATIC,false);
  ImmutableList<OCamlLibrary> ocamlInput=OCamlUtil.getTransitiveOCamlInput(params.getDeps());
  ImmutableList<SourcePath> allInputs=ImmutableList.<SourcePath>builder().addAll(getInput(srcs)).addAll(linkableInput.getInputs()).build();
  BuildTarget buildTarget=isLibrary ? createStaticLibraryBuildTarget(params.getBuildTarget()) : createOCamlLinkTarget(params.getBuildTarget());
  final BuildRuleParams compileParams=params.copyWithChanges(NativeLinkable.NATIVE_LINKABLE_TYPE,buildTarget,ImmutableSortedSet.copyOf(pathResolver.filterBuildRuleInputs(allInputs)),ImmutableSortedSet.<BuildRule>of());
  ImmutableList.Builder<String> flagsBuilder=ImmutableList.<String>builder();
  flagsBuilder.addAll(argFlags);
  CxxPreprocessorInput cxxPreprocessorInputFromDeps=CxxPreprocessables.getTransitiveCxxPreprocessorInput(ocamlBuckConfig.getCxxPlatform(),FluentIterable.from(params.getDeps()).filter(Predicates.instanceOf(CxxPreprocessorDep.class)));
  final OCamlBuildContext ocamlContext=OCamlBuildContext.builder(ocamlBuckConfig,pathResolver).setFlags(flagsBuilder.build()).setIncludes(includes).setBytecodeIncludes(bytecodeIncludes).setOcamlInput(ocamlInput).setLinkableInput(linkableInput).setUpDirectories(buildTarget,isLibrary).setCxxPreprocessorInput(cxxPreprocessorInputFromDeps).setInput(getInput(srcs)).build();
  final OCamlBuild ocamlLibraryBuild=new OCamlBuild(compileParams,pathResolver,ocamlContext,ocamlBuckConfig.getCCompiler(),ocamlBuckConfig.getCxxCompiler());
  resolver.addToIndex(ocamlLibraryBuild);
  if (isLibrary) {
    return new OCamlStaticLibrary(params.copyWithDeps(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getDeclaredDeps()).add(ocamlLibraryBuild).build(),params.getExtraDeps()),pathResolver,compileParams,linkerFlags,srcPaths,ocamlContext,ocamlLibraryBuild);
  }
 else {
    return new OCamlBinary(params.copyWithDeps(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getDeclaredDeps()).add(ocamlLibraryBuild).build(),params.getExtraDeps()),pathResolver,ocamlLibraryBuild.getPathToOutputFile());
  }
}
