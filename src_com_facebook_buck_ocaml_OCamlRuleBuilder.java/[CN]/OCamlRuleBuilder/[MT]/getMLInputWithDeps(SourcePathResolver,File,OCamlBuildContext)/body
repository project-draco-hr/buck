{
  OCamlDepToolStep depToolStep=new OCamlDepToolStep(ocamlContext.getOcamlDepTool(),ocamlContext.getMLInput(),ocamlContext.getIncludeFlags(false,true));
  ImmutableList<String> cmd=depToolStep.getShellCommand(null);
  Optional<String> depsString;
  try {
    depsString=executeProcessAndGetStdout(baseDir,cmd);
  }
 catch (  IOException e) {
    throw new HumanReadableException(e,"Unable to execute ocamldep due to io error: %s",Joiner.on(" ").join(cmd));
  }
catch (  InterruptedException e) {
    throw new HumanReadableException(e,"Unable to calculate dependencies. ocamldep is interrupted: %s",Joiner.on(" ").join(cmd));
  }
  if (depsString.isPresent()) {
    OCamlDependencyGraphGenerator graphGenerator=new OCamlDependencyGraphGenerator();
    return filterCurrentRuleInput(resolver,ocamlContext.getMLInput(),graphGenerator.generateDependencyMap(depsString.get()));
  }
 else {
    throw new HumanReadableException("ocamldep execution failed");
  }
}
