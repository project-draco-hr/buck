{
  Comparator<Long> comparator;
  if (sortByTime) {
    comparator=new Comparator<Long>(){
      private Comparator<Long> reverseOrdering=Ordering.natural().reverse();
      @Override public int compare(      Long threadId1,      Long threadId2){
        long elapsedTime1=Preconditions.checkNotNull(threadInformationMap.get(threadId1)).getElapsedTimeMs();
        long elapsedTime2=Preconditions.checkNotNull(threadInformationMap.get(threadId2)).getElapsedTimeMs();
        return ComparisonChain.start().compare(elapsedTime1,elapsedTime2,reverseOrdering).compare(threadId1,threadId2).result();
      }
    }
;
  }
 else {
    comparator=Ordering.natural();
  }
  return FluentIterable.from(threadInformationMap.keySet()).toSortedList(comparator);
}
