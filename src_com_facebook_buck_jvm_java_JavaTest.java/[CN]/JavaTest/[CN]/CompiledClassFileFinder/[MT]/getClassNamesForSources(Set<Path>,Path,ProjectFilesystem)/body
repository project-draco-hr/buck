{
  if (jarFilePath == null) {
    return ImmutableSet.of();
  }
  final Set<String> sourceClassNames=Sets.newHashSetWithExpectedSize(sources.size());
  for (  Path path : sources) {
    sourceClassNames.add(MorePaths.getNameWithoutExtension(path));
  }
  final ImmutableSet.Builder<String> testClassNames=ImmutableSet.builder();
  Path jarFile=projectFilesystem.getPathForRelativePath(jarFilePath);
  ZipFileTraversal traversal=new ZipFileTraversal(jarFile){
    @Override public void visit(    ZipFile zipFile,    ZipEntry zipEntry){
      final String name=new File(zipEntry.getName()).getName();
      if (!name.endsWith(".class")) {
        return;
      }
      String nameWithoutDotClass=name.substring(0,name.length() - ".class".length());
      if (!sourceClassNames.contains(nameWithoutDotClass)) {
        return;
      }
      if (!name.contains("$")) {
        String fullyQualifiedNameWithDotClassSuffix=zipEntry.getName().replace('/','.');
        String className=fullyQualifiedNameWithDotClassSuffix.substring(0,fullyQualifiedNameWithDotClassSuffix.length() - ".class".length());
        testClassNames.add(className);
      }
    }
  }
;
  try {
    traversal.traverse();
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return testClassNames.build();
}
