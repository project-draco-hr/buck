{
  final ImmutableSet<String> contacts=getContacts();
  return new Callable<TestResults>(){
    @Override public TestResults call() throws Exception {
      Set<String> testClassNames=getClassNamesForSources();
      if (testClassNames.isEmpty()) {
        return TestResults.of(getBuildTarget(),ImmutableList.<TestCaseSummary>of(),contacts,FluentIterable.from(labels).transform(Functions.toStringFunction()).toSet());
      }
      List<TestCaseSummary> summaries=Lists.newArrayListWithCapacity(testClassNames.size());
      for (      String testClass : testClassNames) {
        String testSelectorSuffix="";
        if (isUsingTestSelectors) {
          testSelectorSuffix+=".test_selectors";
        }
        if (isDryRun) {
          testSelectorSuffix+=".dry_run";
        }
        String path=String.format("%s%s.xml",testClass,testSelectorSuffix);
        Path testResultFile=getProjectFilesystem().getPathForRelativePath(getPathToTestOutputDirectory().resolve(path));
        if (!isUsingTestSelectors && !Files.isRegularFile(testResultFile)) {
          String message;
          if (Preconditions.checkNotNull(junit).hasTimedOut()) {
            message="test timed out before generating results file";
          }
 else {
            message="test exited before generating results file";
          }
          summaries.add(getTestClassFailedSummary(testClass,message));
        }
 else         if (Files.isRegularFile(testResultFile)) {
          summaries.add(XmlTestResultParser.parse(testResultFile));
        }
      }
      return TestResults.builder().setBuildTarget(getBuildTarget()).setTestCases(summaries).setContacts(contacts).setLabels(FluentIterable.from(labels).transform(Functions.toStringFunction()).toSet()).addTestLogPaths(getProjectFilesystem().resolve(pathToTestLogs)).build();
    }
  }
;
}
