{
  this.description=Preconditions.checkNotNull(description);
  this.ruleFactoryParams=Preconditions.checkNotNull(params);
  final ImmutableSet.Builder<Path> paths=ImmutableSet.builder();
  final ImmutableSortedSet.Builder<BuildTarget> extraDeps=ImmutableSortedSet.naturalOrder();
  final ImmutableSortedSet.Builder<BuildTarget> declaredDeps=ImmutableSortedSet.naturalOrder();
  for (  String rawDep : params.getOptionalListAttribute("deps")) {
    BuildTarget target=params.resolveBuildTarget(rawDep);
    declaredDeps.add(Preconditions.checkNotNull(target));
  }
  this.declaredDeps=declaredDeps.build();
  TypeCoercerFactory typeCoercerFactory=new TypeCoercerFactory();
  T arg=description.createUnpopulatedConstructorArg();
  for (  Field field : arg.getClass().getFields()) {
    ParamInfo info=new ParamInfo(typeCoercerFactory,params.target.getBasePath(),field);
    if (info.hasElementTypes(BuildRule.class,SourcePath.class,Path.class)) {
      detectBuildTargetsAndPathsForParameter(extraDeps,paths,info,params);
    }
  }
  if (description instanceof ImplicitDepsInferringDescription) {
    Iterable<String> rawTargets=((ImplicitDepsInferringDescription)description).findDepsFromParams(params);
    for (    String rawTarget : rawTargets) {
      if (isPossiblyATarget(rawTarget)) {
        extraDeps.add(params.resolveBuildTarget(rawTarget));
      }
    }
  }
  this.extraDeps=ImmutableSortedSet.copyOf(Sets.difference(extraDeps.build(),this.declaredDeps));
  this.pathsReferenced=paths.build();
  ImmutableSet.Builder<BuildTargetPattern> visibilityPatterns=ImmutableSet.builder();
  for (  String visibility : params.getOptionalListAttribute("visibility")) {
    visibilityPatterns.add(params.buildTargetPatternParser.parse(visibility,ParseContext.forVisibilityArgument()));
  }
  this.visibilityPatterns=visibilityPatterns.build();
}
