{
  return new Supplier<ImmutableSortedSet<BuildRule>>(){
    @Override public ImmutableSortedSet<BuildRule> get(){
      BuildRule relevantCxxLibrary=ruleResolver.getRule(pythonPlatform.getCxxLibrary().get());
      Set<BuildRule> extraDeps=Sets.newHashSet(originalExtraDeps.get());
      for (      PythonPlatform python : pythonPlatforms.getValues()) {
        Optional<BuildTarget> cxxLibraryTarget=python.getCxxLibrary();
        if (cxxLibraryTarget.isPresent()) {
          Optional<BuildRule> cxxLibrary=ruleResolver.getRuleOptional(cxxLibraryTarget.get());
          if (cxxLibrary.isPresent() && !cxxLibrary.get().equals(relevantCxxLibrary)) {
            extraDeps.remove(cxxLibrary.get());
          }
        }
      }
      return ImmutableSortedSet.copyOf(extraDeps);
    }
  }
;
}
