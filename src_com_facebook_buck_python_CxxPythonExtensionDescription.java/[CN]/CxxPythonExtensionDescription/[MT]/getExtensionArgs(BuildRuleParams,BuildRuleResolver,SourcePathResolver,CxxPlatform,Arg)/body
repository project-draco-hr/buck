{
  ImmutableMap<String,CxxSource> srcs=CxxDescriptionEnhancer.parseCxxSources(params.getBuildTarget(),pathResolver,cxxPlatform,args);
  ImmutableMap<Path,SourcePath> headers=CxxDescriptionEnhancer.parseHeaders(params.getBuildTarget(),pathResolver,Optional.of(cxxPlatform),args);
  HeaderSymlinkTree headerSymlinkTree=CxxDescriptionEnhancer.requireHeaderSymlinkTree(params,ruleResolver,new SourcePathResolver(ruleResolver),cxxPlatform,headers,HeaderVisibility.PRIVATE);
  ImmutableList<CxxPreprocessorInput> cxxPreprocessorInput=CxxDescriptionEnhancer.collectCxxPreprocessorInput(params,cxxPlatform,CxxFlags.getLanguageFlags(args.preprocessorFlags,args.platformPreprocessorFlags,args.langPreprocessorFlags,cxxPlatform),ImmutableList.of(headerSymlinkTree),ImmutableSet.<FrameworkPath>of(),CxxPreprocessables.getTransitiveCxxPreprocessorInput(cxxPlatform,params.getDeps()));
  ImmutableMap<CxxPreprocessAndCompile,SourcePath> picObjects=CxxSourceRuleFactory.requirePreprocessAndCompileRules(params,ruleResolver,pathResolver,cxxPlatform,cxxPreprocessorInput,CxxFlags.getLanguageFlags(args.compilerFlags,args.platformCompilerFlags,args.langCompilerFlags,cxxPlatform),args.prefixHeader,cxxBuckConfig.getPreprocessMode(),srcs,CxxSourceRuleFactory.PicType.PIC);
  ImmutableList.Builder<com.facebook.buck.rules.args.Arg> argsBuilder=ImmutableList.builder();
  argsBuilder.addAll(StringArg.from(CxxFlags.getFlags(args.linkerFlags,args.platformLinkerFlags,cxxPlatform)));
  argsBuilder.addAll(StringArg.from(Linkers.iXlinker("-rpath",String.format("%s/",cxxPlatform.getLd().resolve(ruleResolver).libOrigin()))));
  argsBuilder.addAll(SourcePathArg.from(pathResolver,picObjects.values()));
  return argsBuilder.build();
}
