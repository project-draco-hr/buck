{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"dependency_project",tmp);
  workspace.setUp();
  ProcessResult result1=workspace.runBuckCommand("query","//modules/tip:tip -> //libs:guava");
  result1.assertExitCode(0);
  assertEquals("//modules/tip:tip -> //libs:guava\n",result1.getStdout());
  ProcessResult result2=workspace.runBuckCommand("query","//modules/tip:tip -2>");
  result2.assertExitCode(0);
  assertEquals("//modules/tip:tip\n" + "//libs:guava\n" + "//libs:jsr305\n"+ "//modules/dep1:dep1\n",result2.getStdout());
  try {
    workspace.runBuckCommand("query","//modules/tip:tip -x>");
    fail("Should have thrown exception on malformed query.");
  }
 catch (  HumanReadableException e) {
    assertEquals("Invalid query string: //modules/tip:tip -x>.",e.getMessage());
  }
  try {
    workspace.runBuckCommand("query","//modules/tip:tip -> //:x");
    fail("Should have thrown exception on invalid target.");
  }
 catch (  HumanReadableException e) {
    assertEquals("Unknown build target: //:x.",e.getMessage());
  }
}
