{
  if (javaPackageFinder == null) {
    javaPackageFinder=new FakeJavaPackageFinder();
  }
  if (intellijConfig == null) {
    intellijConfig=new IntellijConfig(FakeBuckConfig.builder().build());
  }
  ExecutionContext executionContext=TestExecutionContext.newInstance();
  ProjectFilesystem projectFilesystem=new FakeProjectFilesystem();
  Properties keystoreProperties=new Properties();
  keystoreProperties.put("key.alias","androiddebugkey");
  keystoreProperties.put("key.store.password","android");
  keystoreProperties.put("key.alias.password","android");
  try (OutputStream output=projectFilesystem.newFileOutputStream(Paths.get("keystore/debug.keystore.properties"))){
    keystoreProperties.store(output,"");
  }
   ImmutableMap<Path,String> basePathToAliasMap=ImmutableMap.of();
  Project project=new Project(new SourcePathResolver(ruleResolver),projectConfigs,basePathToAliasMap,javaPackageFinder,executionContext,new InMemoryBuildFileTree(Iterables.transform(ruleResolver.getBuildRules(),BuildTarget.TO_TARGET)),projectFilesystem,Optional.<String>absent(),intellijConfig,Optional.<String>absent(),BuckTestConstant.PYTHON_INTERPRETER,ObjectMappers.newDefaultInstance(),true);
  List<SerializableModule> modules=new ArrayList<>(project.createModulesForProjectConfigs());
  return new ProjectWithModules(project,ImmutableList.copyOf(modules));
}
