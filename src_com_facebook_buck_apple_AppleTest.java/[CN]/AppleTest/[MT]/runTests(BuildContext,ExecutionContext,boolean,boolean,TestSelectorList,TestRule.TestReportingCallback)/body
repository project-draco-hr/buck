{
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  Path resolvedTestBundleDirectory=executionContext.getProjectFilesystem().resolve(Preconditions.checkNotNull(testBundle.getPathToOutput()));
  Path pathToTestOutput=executionContext.getProjectFilesystem().resolve(getPathToTestOutputDirectory());
  steps.add(new MakeCleanDirectoryStep(pathToTestOutput));
  Path resolvedTestOutputPath=executionContext.getProjectFilesystem().resolve(testOutputPath);
  Optional<Path> testHostAppPath=Optional.absent();
  if (testHostApp.isPresent()) {
    Path resolvedTestHostAppDirectory=executionContext.getProjectFilesystem().resolve(Preconditions.checkNotNull(testHostApp.get().getPathToOutput()));
    testHostAppPath=Optional.of(resolvedTestHostAppDirectory.resolve(testHostApp.get().getUnzippedOutputFilePathToBinary()));
  }
  if (!useXctest) {
    if (!xctoolPath.isPresent() && !xctoolZipRule.isPresent()) {
      throw new HumanReadableException("Set xctool_path = /path/to/xctool or xctool_zip_target = //path/to:xctool-zip " + "in the [apple] section of .buckconfig to run this test");
    }
    ImmutableSet.Builder<Path> logicTestPathsBuilder=ImmutableSet.builder();
    ImmutableMap.Builder<Path,Path> appTestPathsToHostAppsBuilder=ImmutableMap.builder();
    if (testHostAppPath.isPresent()) {
      appTestPathsToHostAppsBuilder.put(resolvedTestBundleDirectory,testHostAppPath.get());
    }
 else {
      logicTestPathsBuilder.add(resolvedTestBundleDirectory);
    }
    Path xctoolBinaryPath;
    if (xctoolZipRule.isPresent()) {
      Path resolvedXctoolUnzipDirectory=executionContext.getProjectFilesystem().resolve(xctoolUnzipDirectory);
      steps.add(new MakeCleanDirectoryStep(resolvedXctoolUnzipDirectory));
      steps.add(new UnzipStep(Preconditions.checkNotNull(xctoolZipRule.get().getPathToOutput()),resolvedXctoolUnzipDirectory));
      xctoolBinaryPath=resolvedXctoolUnzipDirectory.resolve("bin/xctool");
    }
 else {
      xctoolBinaryPath=xctoolPath.get();
    }
    xctoolStdoutReader=Optional.of(new AppleTestXctoolStdoutReader(testReportingCallback));
    steps.add(new XctoolRunTestsStep(xctoolBinaryPath,platformName,simulatorName,logicTestPathsBuilder.build(),appTestPathsToHostAppsBuilder.build(),resolvedTestOutputPath,xctoolStdoutReader));
  }
 else {
    Tool testRunningTool;
    if (testBundleExtension == "xctest") {
      testRunningTool=xctest;
    }
 else     if (otest.isPresent()) {
      testRunningTool=otest.get();
    }
 else {
      throw new HumanReadableException("Cannot run non-xctest bundle type %s (otest not present)",testBundleExtension);
    }
    steps.add(new XctestRunTestsStep(testRunningTool.getCommandPrefix(getResolver()),(testBundleExtension == "xctest" ? "-XCTest" : "-SenTest"),resolvedTestBundleDirectory,resolvedTestOutputPath));
  }
  return steps.build();
}
