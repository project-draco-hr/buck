{
  if (!xctoolPath.isPresent()) {
    throw new HumanReadableException("Set xctool_path = /path/to/xctool in the [apple] section of .buckconfig " + "to run this test");
  }
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  Path resolvedTestBundleDirectory=executionContext.getProjectFilesystem().resolve(testBundleDirectory);
  steps.add(new MakeCleanDirectoryStep(resolvedTestBundleDirectory));
  steps.add(new UnzipStep(testBundle.getPathToOutputFile(),resolvedTestBundleDirectory));
  Path pathToTestOutput=executionContext.getProjectFilesystem().resolve(getPathToTestOutputDirectory());
  steps.add(new MakeCleanDirectoryStep(pathToTestOutput));
  Path resolvedTestOutputPath=executionContext.getProjectFilesystem().resolve(testOutputPath);
  ImmutableSet.Builder<Path> logicTestPathsBuilder=ImmutableSet.builder();
  ImmutableMap.Builder<Path,Path> appTestPathsToHostAppsBuilder=ImmutableMap.builder();
  if (testHostApp.isPresent()) {
    Path resolvedTestHostAppDirectory=executionContext.getProjectFilesystem().resolve(testHostAppDirectory);
    steps.add(new MakeCleanDirectoryStep(resolvedTestHostAppDirectory));
    steps.add(new UnzipStep(testHostApp.get().getPathToOutputFile(),resolvedTestHostAppDirectory));
    appTestPathsToHostAppsBuilder.put(resolvedTestBundleDirectory,resolvedTestHostAppDirectory.resolve(testHostApp.get().getUnzippedOutputFilePathToBinary()));
  }
 else {
    logicTestPathsBuilder.add(resolvedTestBundleDirectory);
  }
  steps.add(new XctoolRunTestsStep(xctoolPath.get(),sdkName,simulatorName,logicTestPathsBuilder.build(),appTestPathsToHostAppsBuilder.build(),resolvedTestOutputPath));
  return steps.build();
}
