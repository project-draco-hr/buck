{
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  Path resolvedTestBundleDirectory=getProjectFilesystem().resolve(Preconditions.checkNotNull(testBundle.getPathToOutput()));
  Path pathToTestOutput=getProjectFilesystem().resolve(getPathToTestOutputDirectory());
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),pathToTestOutput));
  Path resolvedTestOutputPath=getProjectFilesystem().resolve(testOutputPath);
  Optional<Path> testHostAppPath=Optional.absent();
  if (testHostApp.isPresent()) {
    Path resolvedTestHostAppDirectory=getProjectFilesystem().resolve(Preconditions.checkNotNull(testHostApp.get().getPathToOutput()));
    testHostAppPath=Optional.of(resolvedTestHostAppDirectory.resolve(testHostApp.get().getUnzippedOutputFilePathToBinary()));
  }
  if (!useXctest) {
    if (!xctoolPath.isPresent() && !xctoolZipRule.isPresent()) {
      throw new HumanReadableException("Set xctool_path = /path/to/xctool or xctool_zip_target = //path/to:xctool-zip " + "in the [apple] section of .buckconfig to run this test");
    }
    ImmutableSet.Builder<Path> logicTestPathsBuilder=ImmutableSet.builder();
    ImmutableMap.Builder<Path,Path> appTestPathsToHostAppsBuilder=ImmutableMap.builder();
    if (testHostAppPath.isPresent()) {
      appTestPathsToHostAppsBuilder.put(resolvedTestBundleDirectory,testHostAppPath.get());
    }
 else {
      logicTestPathsBuilder.add(resolvedTestBundleDirectory);
    }
    Path xctoolBinaryPath;
    if (xctoolZipRule.isPresent()) {
      Path resolvedXctoolUnzipDirectory=getProjectFilesystem().resolve(xctoolUnzipDirectory);
      steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),resolvedXctoolUnzipDirectory));
      steps.add(new UnzipStep(getProjectFilesystem(),Preconditions.checkNotNull(xctoolZipRule.get().getPathToOutput()),resolvedXctoolUnzipDirectory));
      xctoolBinaryPath=resolvedXctoolUnzipDirectory.resolve("bin/xctool");
    }
 else {
      xctoolBinaryPath=xctoolPath.get();
    }
    xctoolStdoutReader=Optional.of(new AppleTestXctoolStdoutReader(testReportingCallback));
    Optional<String> destinationSpecifierArg;
    if (!destinationSpecifier.get().isEmpty()) {
      destinationSpecifierArg=Optional.of(Joiner.on(',').join(Iterables.transform(destinationSpecifier.get().entrySet(),new Function<Map.Entry<String,String>,String>(){
        @Override public String apply(        Map.Entry<String,String> input){
          return input.getKey() + "=" + input.getValue();
        }
      }
)));
    }
 else {
      destinationSpecifierArg=defaultDestinationSpecifier;
    }
    steps.add(new XctoolRunTestsStep(getProjectFilesystem(),xctoolBinaryPath,xctoolStutterTimeout,platformName,destinationSpecifierArg,logicTestPathsBuilder.build(),appTestPathsToHostAppsBuilder.build(),resolvedTestOutputPath,xctoolStdoutReader));
  }
 else {
    Tool testRunningTool;
    if (testBundleExtension.equals("xctest")) {
      testRunningTool=xctest;
    }
 else     if (otest.isPresent()) {
      testRunningTool=otest.get();
    }
 else {
      throw new HumanReadableException("Cannot run non-xctest bundle type %s (otest not present)",testBundleExtension);
    }
    steps.add(new XctestRunTestsStep(getProjectFilesystem(),testRunningTool.getCommandPrefix(getResolver()),(testBundleExtension.equals("xctest") ? "-XCTest" : "-SenTest"),resolvedTestBundleDirectory,resolvedTestOutputPath));
  }
  return steps.build();
}
