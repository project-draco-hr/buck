{
  if (!importClass.isPresent() || !currentClass.isPresent()) {
    return;
  }
  BuckAuditOwner.execute(mProject,new FutureCallback<String>(){
    @Override public void onSuccess(    @Nullable String buckTargetResult){
      try {
        String currentClassPath=currentClass.get().getPath();
        Map<String,List<String>> pathAndTargetData=mObjectMapper.readValue(buckTargetResult,Map.class);
        String importTargetName="";
        String importPath="";
        String currentTargetName="";
        String currentPath="";
        for (        Map.Entry<String,List<String>> targetAndPathEntry : pathAndTargetData.entrySet()) {
          String[] pathAndTarget=targetAndPathEntry.getValue().get(0).replaceFirst("//","").split(":");
          if (currentClassPath.contains(targetAndPathEntry.getKey())) {
            currentTargetName=pathAndTarget[1];
            currentPath=pathAndTarget[0];
          }
 else {
            importTargetName=pathAndTarget[1];
            importPath=pathAndTarget[0];
          }
        }
        BuckDeps.addDeps(mProject,importPath,currentPath,importTargetName,currentTargetName);
      }
 catch (      IOException e) {
        LOG.error(e.toString());
      }
    }
    @Override public void onFailure(    Throwable throwable){
    }
  }
,importClass.get().getPath(),currentClass.get().getPath());
}
