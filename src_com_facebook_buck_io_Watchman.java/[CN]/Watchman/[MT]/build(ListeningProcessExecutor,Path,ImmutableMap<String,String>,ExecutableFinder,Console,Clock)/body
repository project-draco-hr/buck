{
  LOG.info("Creating for: " + rootPath);
  try {
    String watchman=exeFinder.getExecutable(WATCHMAN,env).toAbsolutePath().toString();
    Optional<Map<String,String>> result;
    long remainingTimeNanos=TIMEOUT_NANOS;
    long startTimeNanos=clock.nanoTime();
    result=execute(executor,console,clock,remainingTimeNanos,watchman,"version");
    if (!result.isPresent()) {
      return NULL_WATCHMAN;
    }
    Optional<String> rawVersion=Optional.fromNullable(result.get().get("version"));
    if (!rawVersion.isPresent()) {
      return NULL_WATCHMAN;
    }
    LOG.debug("Discovered watchman version: %s",rawVersion.get());
    ImmutableSet<Capability> capabilities=deriveCapabilities(rawVersion.get());
    Path absoluteRootPath=rootPath.toAbsolutePath();
    LOG.info("Adding watchman root: %s",absoluteRootPath);
    long watchStartTimeNanos=clock.nanoTime();
    remainingTimeNanos-=(watchStartTimeNanos - startTimeNanos);
    if (capabilities.contains(Capability.SUPPORTS_PROJECT_WATCH)) {
      result=execute(executor,console,clock,remainingTimeNanos,watchman,"watch-project",absoluteRootPath.toString());
    }
 else {
      result=execute(executor,console,clock,remainingTimeNanos,watchman,"watch",absoluteRootPath.toString());
    }
    LOG.info("Took %d ms to add root %s",TimeUnit.NANOSECONDS.toMillis(clock.nanoTime() - watchStartTimeNanos),absoluteRootPath);
    if (!result.isPresent()) {
      return NULL_WATCHMAN;
    }
    Map<String,String> map=result.get();
    if (map.containsKey("error")) {
      LOG.warn("Error in watchman output: %s",map.get("error"));
      return NULL_WATCHMAN;
    }
    if (map.containsKey("warning")) {
      LOG.warn("Warning in watchman output: %s",map.get("warning"));
    }
    if (!map.containsKey("watch")) {
      return NULL_WATCHMAN;
    }
    return new Watchman(rawVersion,Optional.fromNullable(map.get("relative_path")),Optional.fromNullable(map.get("watch")),capabilities);
  }
 catch (  ClassCastException|HumanReadableException|IOException e) {
    LOG.warn(e,"Unable to determine the version of watchman. Going without.");
    return NULL_WATCHMAN;
  }
}
