{
  workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"rulekey_changed_while_abi_stable",tmp);
  workspace.setUp();
  BuildTarget bizTarget=BuildTargetFactory.newInstance("//:biz");
  BuildTarget utilTarget=BuildTargetFactory.newInstance("//:util");
  ProcessResult buildResult=workspace.runBuckCommand("build",bizTarget.getFullyQualifiedName());
  buildResult.assertSuccess("Successful build should exit with 0.");
  Path utilRuleKeyPath=BuildTargets.getScratchPath(filesystem,utilTarget,".%s/metadata/RULE_KEY");
  String utilRuleKey=getContents(utilRuleKeyPath);
  Path utilAbiRuleKeyPath=BuildTargets.getScratchPath(filesystem,utilTarget,".%s/metadata/INPUT_BASED_RULE_KEY");
  String utilAbiRuleKey=getContents(utilAbiRuleKeyPath);
  Path bizRuleKeyPath=BuildTargets.getScratchPath(filesystem,bizTarget,".%s/metadata/RULE_KEY");
  String bizRuleKey=getContents(bizRuleKeyPath);
  Path bizAbiRuleKeyPath=BuildTargets.getScratchPath(filesystem,bizTarget,".%s/metadata/INPUT_BASED_RULE_KEY");
  String bizAbiRuleKey=getContents(bizAbiRuleKeyPath);
  Path utilOutputPath=BuildTargets.getGenPath(filesystem,utilTarget,"lib__%s__output/" + utilTarget.getShortName() + ".jar");
  long utilJarSize=Files.size(workspace.getPath(utilOutputPath));
  Path bizOutputPath=BuildTargets.getGenPath(filesystem,bizTarget,"lib__%s__output/" + bizTarget.getShortName() + ".jar");
  FileTime bizJarLastModified=Files.getLastModifiedTime(workspace.getPath(bizOutputPath));
  workspace.replaceFileContents("Util.java","Hello World","Hola Mundo");
  ProcessResult buildResult2=workspace.runBuckCommand("build","//:biz");
  buildResult2.assertSuccess("Successful build should exit with 0.");
  assertThat(utilRuleKey,not(equalTo(getContents(utilRuleKeyPath))));
  assertThat(utilAbiRuleKey,not(equalTo(getContents(utilAbiRuleKeyPath))));
  workspace.getBuildLog().assertTargetBuiltLocally(utilTarget.toString());
  assertThat(bizRuleKey,not(equalTo(getContents(bizRuleKeyPath))));
  assertEquals(bizAbiRuleKey,getContents(bizAbiRuleKeyPath));
  workspace.getBuildLog().assertTargetHadMatchingDepfileRuleKey(bizTarget.toString());
  assertThat("util.jar should have been rewritten, so its file size should have changed.",utilJarSize,not(equalTo(Files.size(workspace.getPath(utilOutputPath)))));
  assertEquals("biz.jar should not have been rewritten, so its last-modified time should be the same.",bizJarLastModified,Files.getLastModifiedTime(workspace.getPath(bizOutputPath)));
  ProcessResult buildResult3=workspace.runBuckCommand("build","//:biz");
  buildResult3.assertSuccess("Successful build should exit with 0.");
}
