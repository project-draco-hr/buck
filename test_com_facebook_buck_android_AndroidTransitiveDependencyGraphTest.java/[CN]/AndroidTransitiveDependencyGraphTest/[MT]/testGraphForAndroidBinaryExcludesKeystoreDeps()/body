{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildTarget androidLibraryKeystoreTarget=new BuildTarget("//java/com/keystore/base","base");
  BuildRule androidLibraryKeystore=ruleResolver.buildAndAddToIndex(AndroidLibrary.newAndroidLibraryRuleBuilder(new FakeBuildRuleBuilderParams()).setBuildTarget(androidLibraryKeystoreTarget).addSrc(Paths.get("java/com/facebook/keystore/Base.java")).addVisibilityPattern(BuildTargetPattern.MATCH_ALL));
  BuildTarget keystoreTarget=new BuildTarget("//keystore","debug");
  KeystoreBuilder.createBuilder(keystoreTarget).setStore(Paths.get("keystore/debug.keystore")).setProperties(Paths.get("keystore/debug.keystore.properties")).addDep(androidLibraryKeystore).build(ruleResolver);
  BuildTarget androidLibraryTarget=new BuildTarget("//java/com/facebook/base","base");
  ruleResolver.buildAndAddToIndex(AndroidLibrary.newAndroidLibraryRuleBuilder(new FakeBuildRuleBuilderParams()).setBuildTarget(androidLibraryTarget).addSrc(Paths.get("java/com/facebook/base/Base.java")).addVisibilityPattern(BuildTargetPattern.MATCH_ALL));
  AndroidBinaryRule androidBinaryRule=ruleResolver.buildAndAddToIndex(AndroidBinaryRule.newAndroidBinaryRuleBuilder(new FakeBuildRuleBuilderParams()).setBuildTarget(new BuildTarget("//apps/sample","app")).setManifest(new FileSourcePath("apps/sample/AndroidManifest.xml")).setTarget("Google Inc.:Google APIs:16").setKeystore(keystoreTarget).addClasspathDep(androidLibraryTarget));
  AndroidDexTransitiveDependencies androidTransitiveDeps=androidBinaryRule.findDexTransitiveDependencies();
  assertEquals("Classpath entries should include facebook/base but not keystore/base.",ImmutableSet.of(BuckConstant.GEN_DIR + "/java/com/facebook/base/lib__base__output/base.jar"),androidTransitiveDeps.classpathEntriesToDex);
}
