{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildTarget androidLibraryKeystoreTarget=new BuildTarget("//java/com/keystore/base","base");
  ruleResolver.buildAndAddToIndex(AndroidLibraryRule.newAndroidLibraryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(androidLibraryKeystoreTarget).addSrc("java/com/facebook/keystore/Base.java").addVisibilityPattern(BuildTargetPattern.MATCH_ALL));
  BuildTarget keystoreTarget=new BuildTarget("//keystore","debug");
  ruleResolver.buildAndAddToIndex(Keystore.newKeystoreBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(keystoreTarget).setStore("keystore/debug.keystore").setProperties("keystore/debug.keystore.properties").addDep(androidLibraryKeystoreTarget).addVisibilityPattern(BuildTargetPattern.MATCH_ALL));
  BuildTarget androidLibraryTarget=new BuildTarget("//java/com/facebook/base","base");
  ruleResolver.buildAndAddToIndex(AndroidLibraryRule.newAndroidLibraryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(androidLibraryTarget).addSrc("java/com/facebook/base/Base.java").addVisibilityPattern(BuildTargetPattern.MATCH_ALL));
  AndroidBinaryRule androidBinaryRule=ruleResolver.buildAndAddToIndex(AndroidBinaryRule.newAndroidBinaryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(new BuildTarget("//apps/sample","app")).setManifest("apps/sample/AndroidManifest.xml").setTarget("Google Inc.:Google APIs:16").setKeystore(keystoreTarget).addClasspathDep(androidLibraryTarget));
  DependencyGraph dependencyGraph=RuleMap.createGraphFromBuildRules(ruleResolver);
  AndroidDexTransitiveDependencies androidTransitiveDeps=androidBinaryRule.findDexTransitiveDependencies(dependencyGraph);
  assertEquals("Classpath entries should include facebook/base but not keystore/base.",ImmutableSet.of(BuckConstant.GEN_DIR + "/java/com/facebook/base/lib__base__output/base.jar"),androidTransitiveDeps.classpathEntriesToDex);
}
