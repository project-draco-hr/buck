{
  ProcessExecutorParams.Builder builder=ProcessExecutorParams.builder();
  File workDir=getFinalWorkingDirectory(context);
  builder.setCommand(getShellCommand(context));
  Map<String,String> environment=Maps.newHashMap();
  setProcessEnvironment(context,environment,workDir);
  builder.setEnvironment(environment);
  builder.setDirectory(workDir);
  Optional<String> stdin=getStdin(context);
  if (stdin.isPresent()) {
    builder.setRedirectInput(ProcessBuilder.Redirect.PIPE);
  }
  int exitCode;
  double initialLoad=OS_JMX.getSystemLoadAverage();
  try {
    startTime=System.currentTimeMillis();
    exitCode=launchAndInteractWithProcess(context,builder.build());
  }
 catch (  IOException e) {
    e.printStackTrace(context.getStdErr());
    exitCode=1;
  }
  endTime=System.currentTimeMillis();
  double endLoad=OS_JMX.getSystemLoadAverage();
  LOG.debug("%s: exit code: %d. os load (before, after): (%f, %f). CPU count: %d",shellCommandArgs,exitCode,initialLoad,endLoad,OS_JMX.getAvailableProcessors());
  return exitCode;
}
