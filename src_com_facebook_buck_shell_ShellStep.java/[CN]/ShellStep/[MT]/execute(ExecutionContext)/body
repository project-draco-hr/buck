{
  ProcessExecutorParams.Builder builder=ProcessExecutorParams.builder();
  builder.setCommand(getShellCommand(context));
  Map<String,String> environment=Maps.newHashMap();
  setProcessEnvironment(context,environment,workingDirectory.toFile());
  builder.setEnvironment(environment);
  builder.setDirectory(workingDirectory.toFile());
  Optional<String> stdin=getStdin(context);
  if (stdin.isPresent()) {
    builder.setRedirectInput(ProcessBuilder.Redirect.PIPE);
  }
  double initialLoad=OS_JMX.getSystemLoadAverage();
  startTime=System.currentTimeMillis();
  int exitCode=launchAndInteractWithProcess(context,builder.build());
  endTime=System.currentTimeMillis();
  double endLoad=OS_JMX.getSystemLoadAverage();
  LOG.debug("%s: exit code: %d. os load (before, after): (%f, %f). CPU count: %d." + "\nstdout:\n%s\nstderr:\n%s\n",shellCommandArgs,exitCode,initialLoad,endLoad,OS_JMX.getAvailableProcessors(),stdout.or(""),stderr.or(""));
  return StepExecutionResult.of(exitCode,stderr);
}
