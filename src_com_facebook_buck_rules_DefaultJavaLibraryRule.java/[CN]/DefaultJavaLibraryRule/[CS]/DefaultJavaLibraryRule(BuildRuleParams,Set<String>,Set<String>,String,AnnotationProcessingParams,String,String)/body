{
  super(buildRuleParams);
  this.srcs=ImmutableSortedSet.copyOf(srcs);
  this.resources=ImmutableSortedSet.copyOf(resources);
  this.annotationProcessingParams=Preconditions.checkNotNull(annotationProcessingParams);
  this.proguardConfig=proguardConfig;
  this.sourceLevel=sourceLevel;
  this.targetLevel=targetLevel;
  if (!srcs.isEmpty() || !resources.isEmpty()) {
    File file=new File(getOutputJarPath(getBuildTarget()));
    this.outputJar=Optional.of(file);
  }
 else {
    this.outputJar=Optional.absent();
  }
  inputsToConsiderForCachingPurposes=ImmutableList.<String>builder().addAll(this.srcs).addAll(this.resources).add(this.sourceLevel).add(this.targetLevel).build();
  classpathEntriesSupplier=Suppliers.memoize(new Supplier<ImmutableSet<String>>(){
    @Override public ImmutableSet<String> get(){
      return ImmutableSet.copyOf(getClasspathEntriesMap().values());
    }
  }
);
  classpathEntriesMapSupplier=Suppliers.memoize(new Supplier<ImmutableSetMultimap<BuildRule,String>>(){
    @Override public ImmutableSetMultimap<BuildRule,String> get(){
      final ImmutableSetMultimap.Builder<BuildRule,String> classpathEntries=ImmutableSetMultimap.builder();
      classpathEntries.putAll(getClasspathEntriesForDeps());
      if (outputJar.isPresent()) {
        classpathEntries.put(DefaultJavaLibraryRule.this,getOutput().getPath());
      }
      return classpathEntries.build();
    }
  }
);
}
