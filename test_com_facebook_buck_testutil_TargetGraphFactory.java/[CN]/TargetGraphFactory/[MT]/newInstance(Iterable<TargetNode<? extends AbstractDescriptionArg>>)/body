{
  Map<BuildTarget,TargetNode<? extends AbstractDescriptionArg>> builder=new HashMap<>();
  for (  TargetNode<? extends AbstractDescriptionArg> node : nodes) {
    builder.put(node.getBuildTarget(),node);
    BuildTarget unflavoredTarget=BuildTarget.of(node.getBuildTarget().getUnflavoredBuildTarget());
    if (node.getBuildTarget().isFlavored() && !builder.containsKey(unflavoredTarget)) {
      builder.put(unflavoredTarget,node);
    }
  }
  ImmutableMap<BuildTarget,TargetNode<? extends AbstractDescriptionArg>> map=ImmutableMap.copyOf(builder);
  MutableDirectedGraph<TargetNode<? extends AbstractDescriptionArg>> graph=new MutableDirectedGraph<>();
  for (  TargetNode<? extends AbstractDescriptionArg> node : map.values()) {
    graph.addNode(node);
    for (    BuildTarget dep : node.getDeps()) {
      graph.addEdge(node,Preconditions.checkNotNull(map.get(dep),dep));
    }
  }
  return new TargetGraph(graph,map);
}
