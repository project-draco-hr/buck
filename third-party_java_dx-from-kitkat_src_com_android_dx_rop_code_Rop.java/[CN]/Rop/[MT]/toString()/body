{
  StringBuffer sb=new StringBuffer(40);
  sb.append("Rop{");
  sb.append(RegOps.opName(opcode));
  if (result != Type.VOID) {
    sb.append(" ");
    sb.append(result);
  }
 else {
    sb.append(" .");
  }
  sb.append(" <-");
  int sz=sources.size();
  if (sz == 0) {
    sb.append(" .");
  }
 else {
    for (int i=0; i < sz; i++) {
      sb.append(' ');
      sb.append(sources.getType(i));
    }
  }
  if (isCallLike) {
    sb.append(" call");
  }
  sz=exceptions.size();
  if (sz != 0) {
    sb.append(" throws");
    for (int i=0; i < sz; i++) {
      sb.append(' ');
      Type one=exceptions.getType(i);
      if (one == Type.THROWABLE) {
        sb.append("<any>");
      }
 else {
        sb.append(exceptions.getType(i));
      }
    }
  }
 else {
switch (branchingness) {
case BRANCH_NONE:
      sb.append(" flows");
    break;
case BRANCH_RETURN:
  sb.append(" returns");
break;
case BRANCH_GOTO:
sb.append(" gotos");
break;
case BRANCH_IF:
sb.append(" ifs");
break;
case BRANCH_SWITCH:
sb.append(" switches");
break;
default :
sb.append(" " + Hex.u1(branchingness));
break;
}
}
sb.append('}');
return sb.toString();
}
