{
  if (!processAtFiles)   return merge(strings,delimiters,true);
 else {
    if (strings == null)     return strings;
    final int length=strings.length;
    if (length == 0)     return strings;
    if ((delimiters == null) || (delimiters.length() == 0))     throw new IllegalArgumentException("null/empty input: delimiters");
    final Set _strings=new HashSet(length);
    final List _result=new ArrayList(length);
    for (int i=0; i < length; ++i) {
      final String s=strings[i];
      if (s == null)       continue;
      final StringTokenizer tokenizer=new StringTokenizer(s,delimiters);
      while (tokenizer.hasMoreTokens()) {
        final String ss=tokenizer.nextToken();
        if (ss.startsWith("@")) {
          final String[] fileList=Files.readFileList(new File(ss.substring(1)));
          for (int j=0; j < fileList.length; ++j) {
            final String sss=fileList[j];
            if (_strings.add(sss))             _result.add(sss);
          }
        }
 else         if (_strings.add(ss))         _result.add(ss);
      }
    }
    final String[] result=new String[_result.size()];
    _result.toArray(result);
    return result;
  }
}
