{
  if (obj instanceof Map) {
    Map<?,?> map=(Map<?,?>)obj;
    ImmutableSortedMap.Builder<String,Optional<Object>> sortedMapBuilder=ImmutableSortedMap.naturalOrder();
    for (    Map.Entry<?,?> entry : map.entrySet()) {
      Object key=entry.getKey();
      if (!(key instanceof String)) {
        throw new RuntimeException(String.format("Keys of JSON maps are expected to be strings. Actual type: %s, contents: %s",key.getClass().getName(),key));
      }
      Object value=entry.getValue();
      if (value != null) {
        sortedMapBuilder.put((String)key,Optional.of(value));
      }
    }
    ImmutableSortedMap<String,Optional<Object>> sortedMap=sortedMapBuilder.build();
    hasher.putInt(HashedObjectType.MAP.ordinal());
    hasher.putInt(sortedMap.size());
    for (    Map.Entry<String,Optional<Object>> entry : sortedMap.entrySet()) {
      hashJsonObject(hasher,entry.getKey());
      if (entry.getValue().isPresent()) {
        hashJsonObject(hasher,entry.getValue().get());
      }
 else {
        hashJsonObject(hasher,null);
      }
    }
  }
 else   if (obj instanceof Collection) {
    Collection<?> collection=(Collection<?>)obj;
    hasher.putInt(HashedObjectType.LIST.ordinal());
    hasher.putInt(collection.size());
    for (    Object collectionEntry : collection) {
      hashJsonObject(hasher,collectionEntry);
    }
  }
 else   if (obj instanceof String) {
    hasher.putInt(HashedObjectType.STRING.ordinal());
    byte[] stringBytes=((String)obj).getBytes(Charsets.UTF_8);
    hasher.putInt(stringBytes.length);
    hasher.putBytes(stringBytes);
  }
 else   if (obj instanceof Boolean) {
    hasher.putInt(HashedObjectType.BOOLEAN.ordinal());
    hasher.putBoolean((boolean)obj);
  }
 else   if (obj instanceof Number) {
    Number number=(Number)obj;
    if (number.longValue() == number.doubleValue()) {
      hasher.putInt(HashedObjectType.LONG.ordinal());
      hasher.putLong(number.longValue());
    }
 else {
      hasher.putInt(HashedObjectType.DOUBLE.ordinal());
      hasher.putDouble(number.doubleValue());
    }
  }
 else   if (obj instanceof Void || obj == null) {
    hasher.putInt(HashedObjectType.NULL.ordinal());
  }
 else {
    throw new RuntimeException(String.format("Unsupported object %s (class %s)",obj,obj.getClass()));
  }
}
