{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ImmutableMap<String,SourcePath> nativeLibraries=JavaLibraryRules.getNativeLibraries(params.getDeps(),cxxPlatform);
  BuildRuleParams binaryParams=params;
  if (!nativeLibraries.isEmpty()) {
    binaryParams=params.copyWithChanges(params.getBuildTarget().withAppendedFlavors(FAT_JAR_INNER_JAR_FLAVOR),params.getDeclaredDeps(),params.getExtraDeps());
  }
  ImmutableSet<JavaLibrary> transitiveClasspathDeps=JavaLibraryClasspathProvider.getClasspathDeps(binaryParams.getDeps());
  ImmutableSet<Path> transitiveClasspaths=JavaLibraryClasspathProvider.getClasspathsFromLibraries(transitiveClasspathDeps);
  BuildRule rule=new JavaBinary(binaryParams.appendExtraDeps(transitiveClasspathDeps),pathResolver,javaOptions.getJavaRuntimeLauncher(),args.mainClass.orNull(),args.manifestFile.orNull(),args.mergeManifests.or(true),args.metaInfDirectory.orNull(),args.blacklist.or(ImmutableSet.<Pattern>of()),transitiveClasspathDeps,transitiveClasspaths);
  if (!nativeLibraries.isEmpty()) {
    BuildRule innerJarRule=rule;
    resolver.addToIndex(innerJarRule);
    SourcePath innerJar=new BuildTargetSourcePath(innerJarRule.getBuildTarget());
    rule=new JarFattener(params.appendExtraDeps(Suppliers.<Iterable<BuildRule>>ofInstance(pathResolver.filterBuildRuleInputs(ImmutableList.<SourcePath>builder().add(innerJar).addAll(nativeLibraries.values()).build()))),pathResolver,javacOptions,innerJar,nativeLibraries,javaOptions.getJavaRuntimeLauncher());
  }
  return rule;
}
