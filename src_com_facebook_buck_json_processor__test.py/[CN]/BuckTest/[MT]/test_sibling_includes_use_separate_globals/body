def test_sibling_includes_use_separate_globals(self):
    "\n        Test that consecutive includes can't see each others globals.\n\n        If a build file includes two include defs, one after another, verify\n        that the first's globals don't pollute the second's (e.g. the second\n        cannot implicitly reference globals from the first without including\n        it itself).\n        "
    include_def1 = ProjectFile(self.project_root, path='inc_def1', contents=('FOO = 1',))
    include_def2 = ProjectFile(self.project_root, path='inc_def2', contents=('BAR = FOO',))
    self.write_files(include_def1, include_def2)
    build_file = ProjectFile(self.project_root, path='BUCK', contents='')
    self.write_file(build_file)
    build_file_processor = self.create_build_file_processor(includes=[include_def1.name, include_def2.name])
    self.assertRaises(NameError, build_file_processor.process, build_file.root, build_file.prefix, build_file.path, set())
    build_file = ProjectFile(self.project_root, path='BUCK', contents=('include_defs({0!r})'.format(include_def1.name), 'include_defs({0!r})'.format(include_def2.name)))
    self.write_file(build_file)
    build_file_processor = self.create_build_file_processor()
    self.assertRaises(NameError, build_file_processor.process, build_file.root, build_file.prefix, build_file.path, set())
