def test_watchman_glob_warning_adds_diagnostic(self):


    class FakeWatchmanClient:

        def query(self, *args):
            return {'warning': 'This is a warning', 'files': ['Foo.java'], }

        def close(self):
            pass
    self.watchman_client = FakeWatchmanClient()
    build_file = ProjectFile(self.project_root, path='BUCK', contents=('foo_rule(', '  name="foo",  srcs=glob(["*.java"]),', ')'))
    java_file = ProjectFile(self.project_root, path='Foo.java', contents=())
    self.write_files(build_file, java_file)
    build_file_processor = self.create_build_file_processor(extra_funcs=[foo_rule])
    build_file_processor.install_builtins(__builtin__.__dict__)
    diagnostics = set()
    rules = build_file_processor.process(build_file.root, build_file.prefix, build_file.path, diagnostics)
    self.assertEqual(['Foo.java'], rules[0]['srcs'])
    self.assertEqual(set([Diagnostic(message='This is a warning', level='warning', source='watchman')]), diagnostics)
