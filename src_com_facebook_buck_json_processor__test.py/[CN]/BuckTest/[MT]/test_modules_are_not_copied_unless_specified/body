def test_modules_are_not_copied_unless_specified(self):
    "\n        Test that modules are not copied by 'include_defs' unless specified in '__all__'.\n        "
    include_def = ProjectFile(self.project_root, path='inc_def', contents=('import math', 'def math_pi():', '    return math.pi'))
    self.write_files(include_def)
    build_file = ProjectFile(self.project_root, path='BUCK', contents=('include_defs({0!r})'.format(include_def.name), 'assert(round(math.pi, 2) == 3.14)'))
    self.write_file(build_file)
    build_file_processor = self.create_build_file_processor()
    self.assertRaises(NameError, build_file_processor.process, build_file.root, build_file.prefix, build_file.path, set())
    build_file = ProjectFile(self.project_root, path='BUCK', contents=('include_defs({0!r})'.format(include_def.name), 'assert(round(math_pi(), 2) == 3.14)'))
    self.write_file(build_file)
    build_file_processor = self.create_build_file_processor()
    build_file_processor.process(build_file.root, build_file.prefix, build_file.path, set())
    include_def = ProjectFile(self.project_root, path='inc_def', contents=('__all__ = ["math"]', 'import math'))
    build_file = ProjectFile(self.project_root, path='BUCK', contents=('include_defs({0!r})'.format(include_def.name), 'assert(round(math.pi, 2) == 3.14)'))
    self.write_files(include_def, build_file)
    build_file_processor = self.create_build_file_processor()
    build_file_processor.process(build_file.root, build_file.prefix, build_file.path, set())
