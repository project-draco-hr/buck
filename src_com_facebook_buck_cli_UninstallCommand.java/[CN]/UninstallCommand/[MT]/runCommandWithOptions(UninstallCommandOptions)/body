{
  Verbosity verbosity=options.getVerbosity();
  Logging.setLoggingLevelForVerbosity(verbosity);
  if (options.getArguments().size() != 1) {
    getStdErr().println("Must specify exactly one android_binary() rule.");
    return 1;
  }
  Parser parser=getParser();
  BuildTargetParser buildTargetParser=parser.getBuildTargetParser();
  String buildTargetName=options.getArgumentsFormattedAsBuildTargets().get(0);
  DependencyGraph dependencyGraph;
  BuildTarget buildTarget;
  try {
    buildTarget=buildTargetParser.parse(buildTargetName,ParseContext.fullyQualified());
    dependencyGraph=parser.parseBuildFilesForTargets(ImmutableList.of(buildTarget),options.getDefaultIncludes());
  }
 catch (  NoSuchBuildTargetException e) {
    console.printFailureWithoutStacktrace(e);
    return 1;
  }
  BuildRule buildRule=dependencyGraph.findBuildRuleByTarget(buildTarget);
  if (!(buildRule instanceof InstallableBuildRule)) {
    console.printFailure(String.format("Specified rule %s must be of type android_binary() or apk_genrule() but was %s().\n",buildRule.getFullyQualifiedName(),buildRule.getType().getName()));
    return 1;
  }
  InstallableBuildRule installableBuildRule=(InstallableBuildRule)buildRule;
  ExecutionContext context=createExecutionContext(options,dependencyGraph);
  String appId=tryToExtractPackageNameFromManifest(installableBuildRule);
  return uninstallApk(appId,options.adbOptions(),options.uninstallOptions(),context) ? 0 : 1;
}
