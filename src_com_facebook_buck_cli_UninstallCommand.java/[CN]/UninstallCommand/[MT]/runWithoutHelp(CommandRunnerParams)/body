{
  ActionGraph actionGraph;
  ImmutableSet<BuildTarget> buildTargets;
  try {
    Pair<ImmutableSet<BuildTarget>,TargetGraph> result=params.getParser().buildTargetGraphForTargetNodeSpecs(parseArgumentsAsTargetNodeSpecs(params.getBuckConfig(),getArguments()),new ParserConfig(params.getBuckConfig()),params.getBuckEventBus(),params.getConsole(),params.getEnvironment(),getEnableProfiling());
    buildTargets=result.getFirst();
    TargetGraphTransformer targetGraphTransformer=new TargetGraphToActionGraph(params.getBuckEventBus(),new BuildTargetNodeToBuildRuleTransformer(),params.getFileHashCache());
    actionGraph=Preconditions.checkNotNull(targetGraphTransformer.apply(result.getSecond())).getFirst();
  }
 catch (  BuildTargetException|BuildFileParseException e) {
    params.getBuckEventBus().post(ConsoleEvent.severe(MoreExceptions.getHumanReadableOrLocalizedMessage(e)));
    return 1;
  }
  if (buildTargets.size() != 1) {
    params.getBuckEventBus().post(ConsoleEvent.severe("Must specify exactly one android_binary() rule."));
    return 1;
  }
  BuildTarget buildTarget=Iterables.get(buildTargets,0);
  BuildRule buildRule=Preconditions.checkNotNull(actionGraph.findBuildRuleByTarget(buildTarget));
  if (!(buildRule instanceof InstallableApk)) {
    params.getBuckEventBus().post(ConsoleEvent.severe(String.format("Specified rule %s must be of type android_binary() or apk_genrule() but was %s().\n",buildRule.getFullyQualifiedName(),buildRule.getType())));
    return 1;
  }
  InstallableApk installableApk=(InstallableApk)buildRule;
  try (ExecutionContext context=createExecutionContext(params)){
    final AdbHelper adbHelper=new AdbHelper(adbOptions(params.getBuckConfig()),targetDeviceOptions(),context,params.getConsole(),params.getBuckEventBus(),params.getBuckConfig().getRestartAdbOnFailure());
    String appId=AdbHelper.tryToExtractPackageNameFromManifest(installableApk);
    return adbHelper.uninstallApp(appId,uninstallOptions().shouldKeepUserData()) ? 0 : 1;
  }
 }
