{
  if (options.getArguments().size() != 1) {
    getStdErr().println("Must specify exactly one android_binary() rule.");
    return 1;
  }
  Parser parser=getParser();
  BuildTargetParser buildTargetParser=parser.getBuildTargetParser();
  String buildTargetName=options.getArgumentsFormattedAsBuildTargets().get(0);
  ActionGraph actionGraph;
  BuildTarget buildTarget;
  try {
    buildTarget=buildTargetParser.parse(buildTargetName,ParseContext.fullyQualified());
    actionGraph=parser.buildTargetGraphForBuildTargets(ImmutableList.of(buildTarget),options.getDefaultIncludes(),getBuckEventBus(),console,environment,options.getEnableProfiling()).getActionGraph(getBuckEventBus());
  }
 catch (  BuildTargetException|BuildFileParseException e) {
    console.printBuildFailureWithoutStacktrace(e);
    return 1;
  }
  BuildRule buildRule=Preconditions.checkNotNull(actionGraph.findBuildRuleByTarget(buildTarget));
  if (buildRule == null || !(buildRule instanceof InstallableApk)) {
    console.printBuildFailure(String.format("Specified rule %s must be of type android_binary() or apk_genrule() but was %s().\n",buildRule.getFullyQualifiedName(),buildRule.getType().getName()));
    return 1;
  }
  InstallableApk installableApk=(InstallableApk)buildRule;
  ExecutionContext context=createExecutionContext(options,actionGraph);
  final AdbHelper adbHelper=new AdbHelper(options.adbOptions(),options.targetDeviceOptions(),context,console,getBuckEventBus(),options.getBuckConfig());
  String appId=AdbHelper.tryToExtractPackageNameFromManifest(installableApk,context);
  return adbHelper.uninstallApp(appId,options.uninstallOptions()) ? 0 : 1;
}
