{
  this.target=buildRuleParams.getBuildTarget();
  this.deps=buildRuleParams.getDeps();
  this.binaryJar=Preconditions.checkNotNull(classesJar);
  this.sourceJar=Preconditions.checkNotNull(sourceJar);
  this.javadocUrl=Preconditions.checkNotNull(javadocUrl);
  transitiveClasspathEntriesSupplier=Suppliers.memoize(new Supplier<ImmutableSetMultimap<JavaLibrary,String>>(){
    @Override public ImmutableSetMultimap<JavaLibrary,String> get(){
      ImmutableSetMultimap.Builder<JavaLibrary,String> classpathEntries=ImmutableSetMultimap.builder();
      classpathEntries.put(PrebuiltJar.this,getBinaryJar().toString());
      classpathEntries.putAll(Classpaths.getClasspathEntries(deps));
      return classpathEntries.build();
    }
  }
);
  declaredClasspathEntriesSupplier=Suppliers.memoize(new Supplier<ImmutableSetMultimap<JavaLibrary,String>>(){
    @Override public ImmutableSetMultimap<JavaLibrary,String> get(){
      ImmutableSetMultimap.Builder<JavaLibrary,String> classpathEntries=ImmutableSetMultimap.builder();
      classpathEntries.put(PrebuiltJar.this,getBinaryJar().toString());
      return classpathEntries.build();
    }
  }
);
  buildOutputInitializer=new BuildOutputInitializer<>(buildRuleParams.getBuildTarget(),this);
}
