{
  long start=System.nanoTime();
  Dex result=mergeDexes();
  WriterSizes compactedSizes=new WriterSizes(this);
  int wastedByteCount=writerSizes.size() - compactedSizes.size();
  if (wastedByteCount > +compactWasteThreshold) {
    DexMerger compacter=new DexMerger(ImmutableList.of(dexOut,new Dex(0)),CollisionPolicy.FAIL,compactedSizes);
    result=compacter.mergeDexes();
    System.out.printf("Result compacted from %.1fKiB to %.1fKiB to save %.1fKiB%n",dexOut.getLength() / 1024f,result.getLength() / 1024f,wastedByteCount / 1024f);
  }
  int origDefs=0;
  int origSizes=0;
  for (  Dex d : dexs) {
    origDefs+=d.getTableOfContents().classDefs.size;
    origSizes+=d.getLength();
  }
  long elapsed=System.nanoTime() - start;
  System.out.printf("Merged dexs (%d defs/%.1fKiB). " + "Result is %d defs/%.1fKiB. Took %.1fs%n",origDefs,origSizes / 1024f,result.getTableOfContents().classDefs.size,result.getLength() / 1024f,elapsed / 1000000000f);
  return result;
}
