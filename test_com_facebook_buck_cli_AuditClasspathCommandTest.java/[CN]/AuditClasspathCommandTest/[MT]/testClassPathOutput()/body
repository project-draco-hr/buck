{
  auditClasspathCommand.printClasspath(params,TargetGraphFactory.newInstance(ImmutableSet.<TargetNode<?>>of()),targetGraphTransformer,ImmutableSet.<BuildTarget>of());
  assertEquals("",console.getTextWrittenToStdOut());
  assertEquals("",console.getTextWrittenToStdErr());
  BuildTarget javaLibraryTarget=BuildTargetFactory.newInstance("//:test-java-library");
  TargetNode<?> javaLibraryNode=JavaLibraryBuilder.createBuilder(javaLibraryTarget).addSrc(Paths.get("src/com/facebook/TestJavaLibrary.java")).build();
  BuildTarget androidLibraryTarget=BuildTargetFactory.newInstance("//:test-android-library");
  TargetNode<?> androidLibraryNode=AndroidLibraryBuilder.createBuilder(androidLibraryTarget).addSrc(Paths.get("src/com/facebook/TestAndroidLibrary.java")).addDep(javaLibraryTarget).build();
  BuildTarget keystoreTarget=BuildTargetFactory.newInstance("//:keystore");
  TargetNode<?> keystoreNode=KeystoreBuilder.createBuilder(keystoreTarget).setStore(new FakeSourcePath("debug.keystore")).setProperties(new FakeSourcePath("keystore.properties")).build();
  BuildTarget testAndroidTarget=BuildTargetFactory.newInstance("//:test-android-binary");
  TargetNode<?> testAndroidNode=AndroidBinaryBuilder.createBuilder(testAndroidTarget).setManifest(new FakeSourcePath("AndroidManifest.xml")).setKeystore(keystoreTarget).setOriginalDeps(ImmutableSortedSet.of(androidLibraryTarget,javaLibraryTarget)).build();
  BuildTarget testJavaTarget=BuildTargetFactory.newInstance("//:project-tests");
  TargetNode<?> testJavaNode=JavaTestBuilder.createBuilder(testJavaTarget).addDep(javaLibraryTarget).setSourceUnderTest(ImmutableSortedSet.of(javaLibraryTarget)).addSrc(Paths.get("src/com/facebook/test/ProjectTests.java")).build();
  auditClasspathCommand.printClasspath(params,TargetGraphFactory.newInstance(ImmutableSet.of(javaLibraryNode,androidLibraryNode,keystoreNode,testAndroidNode,testJavaNode)),targetGraphTransformer,ImmutableSet.<BuildTarget>of());
  assertEquals("",console.getTextWrittenToStdOut());
  assertEquals("",console.getTextWrittenToStdErr());
  auditClasspathCommand.printClasspath(params,TargetGraphFactory.newInstance(ImmutableSet.of(javaLibraryNode,androidLibraryNode,keystoreNode,testAndroidNode,testJavaNode)),targetGraphTransformer,ImmutableSet.of(testAndroidTarget));
  SortedSet<String> expectedPaths=Sets.newTreeSet(Arrays.asList(GEN_DIR + "/lib__test-android-library__output/test-android-library.jar",GEN_DIR + "/lib__test-java-library__output/test-java-library.jar"));
  String expectedClasspath=Joiner.on("\n").join(expectedPaths) + "\n";
  assertEquals(expectedClasspath,console.getTextWrittenToStdOut());
  assertEquals("",console.getTextWrittenToStdErr());
  setUp();
  auditClasspathCommand.printClasspath(params,TargetGraphFactory.newInstance(ImmutableSet.of(javaLibraryNode,androidLibraryNode,keystoreNode,testAndroidNode,testJavaNode)),targetGraphTransformer,ImmutableSet.of(testAndroidTarget,javaLibraryTarget,androidLibraryTarget,testJavaTarget));
  expectedPaths.add(GEN_DIR + "/lib__project-tests__output/project-tests.jar");
  expectedClasspath=Joiner.on("\n").join(expectedPaths) + "\n";
  assertEquals(expectedClasspath,console.getTextWrittenToStdOut());
  assertEquals("",console.getTextWrittenToStdErr());
}
