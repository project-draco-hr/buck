{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  List<String> targets=Lists.newArrayList();
  PartialGraph partialGraph1=createGraphFromBuildRules(ruleResolver,targets);
  auditClasspathCommand.printClasspath(partialGraph1);
  assertEquals("",console.getTextWrittenToStdOut());
  assertEquals("",console.getTextWrittenToStdErr());
  BuildRule javaLibrary=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:test-java-library")).addSrc(Paths.get("src/com/facebook/TestJavaLibrary.java")).build(ruleResolver);
  BuildRule androidLibrary=AndroidLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:test-android-library")).addSrc(Paths.get("src/com/facebook/TestAndroidLibrary.java")).addDep(javaLibrary.getBuildTarget()).build(ruleResolver);
  BuildTarget keystoreBuildTarget=BuildTargetFactory.newInstance("//:keystore");
  Keystore keystore=(Keystore)KeystoreBuilder.createBuilder(keystoreBuildTarget).setStore(Paths.get("debug.keystore")).setProperties(Paths.get("keystore.properties")).build(ruleResolver);
  AndroidBinaryBuilder.createBuilder(BuildTargetFactory.newInstance("//:test-android-binary")).setManifest(new TestSourcePath("AndroidManifest.xml")).setTarget("Google Inc.:Google APIs:16").setKeystore(keystore.getBuildTarget()).setOriginalDeps(ImmutableSortedSet.of(androidLibrary.getBuildTarget(),javaLibrary.getBuildTarget())).build(ruleResolver);
  JavaTestBuilder.newJavaTestBuilder(BuildTargetFactory.newInstance("//:project-tests")).addDep(javaLibrary.getBuildTarget()).setSourceUnderTest(ImmutableSortedSet.of(javaLibrary.getBuildTarget())).addSrc(Paths.get("src/com/facebook/test/ProjectTests.java")).build(ruleResolver);
  PartialGraph partialGraph2=createGraphFromBuildRules(ruleResolver,targets);
  auditClasspathCommand.printClasspath(partialGraph2);
  assertEquals("",console.getTextWrittenToStdOut());
  assertEquals("",console.getTextWrittenToStdErr());
  targets.add("//:test-android-binary");
  PartialGraph partialGraph3=createGraphFromBuildRules(ruleResolver,targets);
  auditClasspathCommand.printClasspath(partialGraph3);
  SortedSet<String> expectedPaths=Sets.newTreeSet(Arrays.asList(GEN_DIR + "/lib__test-android-library__output/test-android-library.jar",GEN_DIR + "/lib__test-java-library__output/test-java-library.jar"));
  String expectedClasspath=Joiner.on("\n").join(expectedPaths) + "\n";
  assertEquals(expectedClasspath,console.getTextWrittenToStdOut());
  assertEquals("",console.getTextWrittenToStdErr());
  setUp();
  targets.add("//:test-java-library");
  targets.add("//:test-android-library");
  targets.add("//:project-tests");
  PartialGraph partialGraph4=createGraphFromBuildRules(ruleResolver,targets);
  auditClasspathCommand.printClasspath(partialGraph4);
  expectedPaths.add(GEN_DIR + "/lib__project-tests__output/project-tests.jar");
  expectedClasspath=Joiner.on("\n").join(expectedPaths) + "\n";
  assertEquals(expectedClasspath,console.getTextWrittenToStdOut());
  assertEquals("",console.getTextWrittenToStdErr());
}
