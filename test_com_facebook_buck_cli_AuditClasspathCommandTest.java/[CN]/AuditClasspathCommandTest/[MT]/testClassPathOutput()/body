{
  Map<String,BuildRule> buildRuleIndex1=Maps.newHashMap();
  List<String> targets=Lists.newArrayList();
  PartialGraph partialGraph1=createGraphFromBuildRules(buildRuleIndex1.values(),targets);
  auditClasspathCommand.printClasspath(partialGraph1);
  assertEquals("",getCapturedOutput(stdOutStream));
  assertEquals("",getCapturedOutput(stdErrStream));
  DefaultJavaLibraryRule javaLibraryRule=DefaultJavaLibraryRule.newJavaLibraryRuleBuilder().setBuildTarget(BuildTargetFactory.newInstance("//:test-java-library")).addSrc("src/com/facebook/TestJavaLibrary.java").setArtifactCache(artifactCache).build(buildRuleIndex1);
  buildRuleIndex1.put(javaLibraryRule.getFullyQualifiedName(),javaLibraryRule);
  JavaLibraryRule androidLibraryRule=DefaultJavaLibraryRule.newJavaLibraryRuleBuilder().setBuildTarget(BuildTargetFactory.newInstance("//:test-android-library")).addSrc("src/com/facebook/TestAndroidLibrary.java").addDep("//:test-java-library").setArtifactCache(artifactCache).build(buildRuleIndex1);
  buildRuleIndex1.put(androidLibraryRule.getFullyQualifiedName(),androidLibraryRule);
  AndroidBinaryRule androidBinaryRule=AndroidBinaryRule.newAndroidBinaryRuleBuilder().setBuildTarget(BuildTargetFactory.newInstance("//:test-android-binary")).setManifest("AndroidManifest.xml").setTarget("Google Inc.:Google APIs:16").setKeystorePropertiesPath("keystore.properties").addDep("//:test-android-library").addDep("//:test-java-library").setArtifactCache(artifactCache).build(buildRuleIndex1);
  buildRuleIndex1.put(androidBinaryRule.getFullyQualifiedName(),androidBinaryRule);
  JavaTestRule testRule=JavaTestRule.newJavaTestRuleBuilder().setBuildTarget(BuildTargetFactory.newInstance("//:project-tests")).addDep("//:test-java-library").setSourceUnderTest(ImmutableSet.of("//:test-java-library")).addSrc("src/com/facebook/test/ProjectTests.java").setArtifactCache(artifactCache).build(buildRuleIndex1);
  buildRuleIndex1.put(testRule.getFullyQualifiedName(),testRule);
  PartialGraph partialGraph2=createGraphFromBuildRules(buildRuleIndex1.values(),targets);
  auditClasspathCommand.printClasspath(partialGraph2);
  assertEquals("",getCapturedOutput(stdOutStream));
  assertEquals("",getCapturedOutput(stdErrStream));
  targets.add("//:test-android-binary");
  PartialGraph partialGraph3=createGraphFromBuildRules(buildRuleIndex1.values(),targets);
  auditClasspathCommand.printClasspath(partialGraph3);
  SortedSet<String> expectedPaths=Sets.newTreeSet(Arrays.asList(GEN_DIR + "/lib__test-android-library__output/test-android-library.jar",GEN_DIR + "/lib__test-java-library__output/test-java-library.jar"));
  String expectedClasspath=Joiner.on("\n").join(expectedPaths) + "\n";
  assertEquals(expectedClasspath,getCapturedOutput(stdOutStream));
  assertEquals("",getCapturedOutput(stdErrStream));
  setUp();
  targets.add("//:test-java-library");
  targets.add("//:test-android-library");
  targets.add("//:project-tests");
  PartialGraph partialGraph4=createGraphFromBuildRules(buildRuleIndex1.values(),targets);
  auditClasspathCommand.printClasspath(partialGraph4);
  expectedPaths.add(GEN_DIR + "/lib__project-tests__output/project-tests.jar");
  expectedClasspath=Joiner.on("\n").join(expectedPaths) + "\n";
  assertEquals(expectedClasspath,getCapturedOutput(stdOutStream));
  assertEquals("",getCapturedOutput(stdErrStream));
}
