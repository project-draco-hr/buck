{
  Random random=new Random();
  ListeningSemaphore semaphore=new ListeningSemaphore(10,ListeningSemaphore.Cap.HARD,ListeningSemaphore.Fairness.FAST);
  List<Pair<Integer,AtomicBoolean>> tasks=new ArrayList<>();
  for (int i=0; i < 1000; i++) {
    int permits=1 + random.nextInt(10);
    AtomicBoolean flag=acquire(semaphore,permits);
    tasks.add(new Pair<>(permits,flag));
  }
  assertThat(semaphore.getQueueLength(),Matchers.greaterThan(0));
  while (true) {
    List<Pair<Integer,AtomicBoolean>> remaining=new ArrayList<>();
    for (    Pair<Integer,AtomicBoolean> task : tasks) {
      if (task.getSecond().get()) {
        semaphore.release(task.getFirst());
      }
 else {
        remaining.add(task);
      }
    }
    if (remaining.size() == tasks.size()) {
      assertThat(remaining.size(),Matchers.equalTo(0));
      break;
    }
    tasks=remaining;
  }
  assertThat(semaphore.getQueueLength(),Matchers.equalTo(0));
  assertThat(semaphore.availablePermits(),Matchers.equalTo(10));
}
