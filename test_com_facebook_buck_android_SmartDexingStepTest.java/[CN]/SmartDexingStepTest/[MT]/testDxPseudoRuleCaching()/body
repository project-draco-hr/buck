{
  ExecutionContext context=createMock(ExecutionContext.class);
  replay(context);
  File testIn=new File(tmpDir.getRoot(),"testIn");
  ZipOutputStream zipOut=new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(testIn)));
  try {
    zipOut.putNextEntry(new ZipEntry("foobar"));
    zipOut.write(new byte[]{0});
  }
  finally {
    zipOut.close();
  }
  File outputFile=tmpDir.newFile("out.dex");
  Path outputHashFile=new File(tmpDir.getRoot(),"out.dex.hash").toPath();
  Files.write("dummy",outputHashFile.toFile(),Charsets.UTF_8);
  ProjectFilesystem filesystem=new ProjectFilesystem(tmpDir.getRoot().toPath());
  Sha1HashCode actualHashCode=ImmutableSha1HashCode.of(Strings.repeat("a",40));
  DxPseudoRule rule=new DxPseudoRule(filesystem,ImmutableMap.of(testIn.toPath(),actualHashCode),ImmutableSet.of(testIn.toPath()),outputFile.toPath(),outputHashFile,EnumSet.of(DxStep.Option.NO_OPTIMIZE));
  assertFalse("'dummy' is not a matching input hash",rule.checkIsCached());
  String actualHash=rule.hashInputs();
  assertFalse(actualHash.isEmpty());
  Files.write(actualHash,outputHashFile.toFile(),Charsets.UTF_8);
  assertTrue("Matching input hash should be considered cached",rule.checkIsCached());
}
