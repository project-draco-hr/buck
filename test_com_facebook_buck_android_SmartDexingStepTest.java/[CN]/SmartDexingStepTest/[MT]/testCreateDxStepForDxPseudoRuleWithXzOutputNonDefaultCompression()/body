{
  ProjectFilesystem filesystem=FakeProjectFilesystem.createJavaOnlyFilesystem();
  ImmutableList<Path> filesToDex=ImmutableList.of(Paths.get("foo.dex.jar"),Paths.get("bar.dex.jar"));
  Path outputPath=Paths.get("classes.dex.jar.xz");
  EnumSet<DxStep.Option> dxOptions=EnumSet.noneOf(DxStep.Option.class);
  Step dxStep=SmartDexingStep.createDxStepForDxPseudoRule(filesystem,filesToDex,outputPath,dxOptions,Optional.of(9));
  assertTrue("Result should be a CompositeStep.",dxStep instanceof CompositeStep);
  List<Step> steps=ImmutableList.copyOf((CompositeStep)dxStep);
  String xmx=DxStep.XMX_OVERRIDE.isEmpty() ? "" : DxStep.XMX_OVERRIDE + " ";
  MoreAsserts.assertSteps("Steps should repack zip entries and then compress using xz.",ImmutableList.of(Joiner.on(" ").join("(cd",filesystem.getRootPath(),"&&",Paths.get("/usr/bin/dx"),xmx + "--dex --output",filesystem.resolve("classes.dex.tmp.jar"),filesystem.resolve("foo.dex.jar"),filesystem.resolve("bar.dex.jar") + ")"),"repack classes.dex.tmp.jar in classes.dex.jar","rm -f " + filesystem.resolve("classes.dex.tmp.jar"),"dex_meta dexPath:classes.dex.jar dexMetaPath:classes.dex.jar.meta","xz -z -9 --check=crc32 classes.dex.jar"),steps,createMockedExecutionContext());
  verifyAll();
}
