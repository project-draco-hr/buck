{
  assumeTrue(Platform.detect() == Platform.MACOS);
  assumeTrue(AppleNativeIntegrationTestUtils.isApplePlatformAvailable(ApplePlatform.MACOSX));
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"apple_binary_with_library_dependency_builds_something",tmp);
  workspace.setUp();
  BuildTarget target=BuildTargetFactory.newInstance("//Apps/TestApp:TestApp#app,macosx-x86_64");
  workspace.runBuckCommand("build",target.getFullyQualifiedName()).assertSuccess();
  Path bundlePath=workspace.getPath(BuildTargets.getGenPath(filesystem,target.withAppendedFlavors(AppleDebugFormat.DWARF_AND_DSYM.getFlavor(),AppleDescriptions.INCLUDE_FRAMEWORKS_FLAVOR),"%s/TestApp.app"));
  assertThat(Files.exists(bundlePath),is(true));
  Path binaryPath=bundlePath.resolve("Contents/MacOS/TestApp");
  assertThat(Files.exists(binaryPath),is(true));
  assertThat(workspace.runCommand("file",binaryPath.toString()).getStdout().get(),containsString("executable"));
  Path frameworkBundlePath=bundlePath.resolve("Contents/Frameworks/TestLibrary.framework");
  assertThat(Files.exists(frameworkBundlePath),is(true));
  Path frameworkBinaryPath=frameworkBundlePath.resolve("Contents/MacOS/TestLibrary");
  assertThat(Files.exists(frameworkBinaryPath),is(true));
  assertThat(workspace.runCommand("file",frameworkBinaryPath.toString()).getStdout().get(),containsString("dynamically linked shared library"));
}
