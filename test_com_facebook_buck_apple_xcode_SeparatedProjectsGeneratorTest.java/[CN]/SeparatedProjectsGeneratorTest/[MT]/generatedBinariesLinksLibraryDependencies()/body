{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRule depRule=createBuildRuleWithDefaults(BuildTarget.builder("//elsewhere","somedep").build(),ImmutableSortedSet.<BuildRule>of(),appleLibraryDescription,resolver);
  resolver.addToIndex(depRule);
  BuildRule dynamicLibraryDep=createBuildRuleWithDefaults(BuildTarget.builder("//dep","dynamic").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build(),ImmutableSortedSet.of(depRule),appleLibraryDescription,resolver);
  resolver.addToIndex(dynamicLibraryDep);
  BuildRule rule=createAppleBundleBuildRule(BuildTarget.builder("//foo","bin").build(),resolver,appleBundleDescription,dynamicLibraryDep,AppleBundleExtension.FRAMEWORK);
  resolver.addToIndex(rule);
  BuildRule configRule=createXcodeProjectConfigRule("//foo/bar","fooproject",resolver,ImmutableSortedSet.of(rule.getBuildTarget()));
  resolver.addToIndex(configRule);
  SeparatedProjectsGenerator generator=new SeparatedProjectsGenerator(new SourcePathResolver(resolver),projectFilesystem,RuleMap.createGraphFromBuildRules(resolver),executionContext,ImmutableSet.of(configRule.getBuildTarget()),ImmutableSet.<ProjectGenerator.Option>of());
  generator.generateProjects();
  PBXProject project=getGeneratedProjectOfConfigRule(generator,configRule);
  PBXTarget target=assertTargetExistsAndReturnTarget(project,"bin");
  assertHasSingletonFrameworksPhaseWithFrameworkEntries(target,ImmutableList.of("$BUILT_PRODUCTS_DIR/libsomedep.a"));
}
