{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRule depRule=createBuildRuleWithDefaults(BuildTarget.builder("//elsewhere","somedep").build(),ImmutableSortedSet.<BuildRule>of(),appleLibraryDescription,resolver);
  resolver.addToIndex(depRule);
  BuildRule dynamicLibraryDep=createBuildRuleWithDefaults(BuildTarget.builder("//dep","dynamic").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build(),ImmutableSortedSet.of(depRule),appleLibraryDescription,resolver);
  resolver.addToIndex(dynamicLibraryDep);
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","bin").build()).setDeps(ImmutableSortedSet.of(dynamicLibraryDep)).setType(AppleBundleDescription.TYPE).build();
  AppleBundleDescription.Arg arg=appleBundleDescription.createUnpopulatedConstructorArg();
  arg.infoPlist=Optional.<SourcePath>of(new TestSourcePath("Info.plist"));
  arg.binary=dynamicLibraryDep.getBuildTarget();
  arg.extension=Either.ofLeft(AppleBundleExtension.FRAMEWORK);
  arg.deps=Optional.absent();
  BuildRule rule=appleBundleDescription.createBuildRule(params,resolver,arg);
  resolver.addToIndex(rule);
  BuildRule configRule=createXcodeProjectConfigRule("//foo/bar","fooproject",resolver,ImmutableSortedSet.of(rule.getBuildTarget()));
  PartialGraph partialGraph=createPartialGraphFromBuildRules(ImmutableSet.of(rule,configRule));
  SeparatedProjectsGenerator generator=new SeparatedProjectsGenerator(projectFilesystem,partialGraph.getActionGraph(),executionContext,ImmutableSet.of(configRule.getBuildTarget()),ImmutableSet.<ProjectGenerator.Option>of());
  generator.generateProjects();
  PBXProject project=getGeneratedProjectOfConfigRule(generator,configRule);
  PBXTarget target=assertTargetExistsAndReturnTarget(project,"bin");
  assertHasSingletonFrameworksPhaseWithFrameworkEntries(target,ImmutableList.of("$BUILT_PRODUCTS_DIR/libsomedep.a"));
}
