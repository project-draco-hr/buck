{
  BuildRule libraryRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","library").build(),ImmutableSortedSet.<BuildRule>of(),appleLibraryDescription);
  BuildRule binaryDep=createBuildRuleWithDefaults(BuildTarget.builder("//foo","binarybin").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build(),ImmutableSortedSet.<BuildRule>of(),appleBinaryDescription);
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","binary").build()).setDeps(ImmutableSortedSet.of(binaryDep)).setType(AppleBundleDescription.TYPE).build();
  AppleBundleDescription.Arg arg=appleBundleDescription.createUnpopulatedConstructorArg();
  arg.infoPlist=Optional.<SourcePath>of(new TestSourcePath("Info.plist"));
  arg.binary=binaryDep;
  arg.extension=Either.ofLeft(AppleBundleExtension.APP);
  arg.deps=Optional.absent();
  BuildRule binaryRule=appleBundleDescription.createBuildRule(params,new BuildRuleResolver(),arg);
  BuildRule nativeRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","native").build(),ImmutableSortedSet.<BuildRule>of(),appleLibraryDescription);
  BuildRule configRule=createXcodeProjectConfigRule("//foo","fooproject",ImmutableSet.of(libraryRule,binaryRule,nativeRule));
  SeparatedProjectsGenerator generator=new SeparatedProjectsGenerator(projectFilesystem,createPartialGraphFromBuildRules(ImmutableSet.of(configRule,libraryRule,binaryRule,nativeRule)).getActionGraph(),executionContext,ImmutableSet.of(configRule.getBuildTarget()),ImmutableSet.<ProjectGenerator.Option>of());
  generator.generateProjects();
  PBXProject project=getGeneratedProjectOfConfigRule(generator,configRule);
  assertTargetExistsAndReturnTarget(project,"library");
  assertTargetExistsAndReturnTarget(project,"binary");
  assertTargetExistsAndReturnTarget(project,"native");
}
