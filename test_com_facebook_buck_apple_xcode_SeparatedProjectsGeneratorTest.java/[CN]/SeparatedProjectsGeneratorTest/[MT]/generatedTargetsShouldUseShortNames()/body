{
  BuildTarget libraryTarget=BuildTarget.builder("//foo","library").build();
  TargetNode<?> libraryNode=AppleLibraryBuilder.createBuilder(libraryTarget).build();
  BuildTarget binaryDepTarget=BuildTarget.builder("//foo","binarybin").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build();
  TargetNode<?> binaryDepNode=AppleBinaryBuilder.createBuilder(binaryDepTarget).build();
  BuildTarget binaryTarget=BuildTarget.builder("//foo","binary").build();
  TargetNode<?> binaryNode=AppleBundleBuilder.createBuilder(binaryTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.APP)).setBinary(binaryDepTarget).build();
  BuildTarget nativeTarget=BuildTarget.builder("//foo","native").build();
  TargetNode<?> nativeNode=AppleLibraryBuilder.createBuilder(nativeTarget).build();
  BuildTarget configTarget=BuildTarget.builder("//foo","project").build();
  TargetNode<?> configNode=XcodeProjectConfigBuilder.createBuilder(configTarget).setProjectName("fooproject").setRules(ImmutableSortedSet.of(libraryTarget,binaryTarget,nativeTarget)).build();
  SeparatedProjectsGenerator generator=new SeparatedProjectsGenerator(projectFilesystem,TargetGraphFactory.newInstance(ImmutableSet.of(libraryNode,binaryDepNode,binaryNode,nativeNode,configNode)),executionContext,buildRuleResolver,sourcePathResolver,ImmutableSet.of(configTarget),ImmutableSet.<ProjectGenerator.Option>of());
  generator.generateProjects();
  PBXProject project=getGeneratedProjectOfConfigRule(generator,configTarget);
  assertTargetExistsAndReturnTarget(project,"library");
  assertTargetExistsAndReturnTarget(project,"binary");
  assertTargetExistsAndReturnTarget(project,"native");
}
