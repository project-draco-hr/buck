{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRule libraryRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","library").build(),ImmutableSortedSet.<BuildRule>of(),appleLibraryDescription,resolver);
  resolver.addToIndex(libraryRule);
  BuildRule binaryDep=createBuildRuleWithDefaults(BuildTarget.builder("//foo","binarybin").setFlavor(AppleLibraryDescription.DYNAMIC_LIBRARY).build(),ImmutableSortedSet.<BuildRule>of(),appleBinaryDescription,resolver);
  resolver.addToIndex(binaryDep);
  BuildRule binaryRule=createAppleBundleBuildRule(BuildTarget.builder("//foo","binary").build(),resolver,appleBundleDescription,binaryDep,AppleBundleExtension.APP);
  resolver.addToIndex(binaryRule);
  BuildRule nativeRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","native").build(),ImmutableSortedSet.<BuildRule>of(),appleLibraryDescription,resolver);
  resolver.addToIndex(nativeRule);
  BuildRule configRule=createXcodeProjectConfigRule("//foo","fooproject",resolver,ImmutableSortedSet.of(libraryRule.getBuildTarget(),binaryRule.getBuildTarget(),nativeRule.getBuildTarget()));
  resolver.addToIndex(configRule);
  SeparatedProjectsGenerator generator=new SeparatedProjectsGenerator(new SourcePathResolver(resolver),projectFilesystem,RuleMap.createGraphFromBuildRules(resolver),executionContext,ImmutableSet.of(configRule.getBuildTarget()),ImmutableSet.<ProjectGenerator.Option>of());
  generator.generateProjects();
  PBXProject project=getGeneratedProjectOfConfigRule(generator,configRule);
  assertTargetExistsAndReturnTarget(project,"library");
  assertTargetExistsAndReturnTarget(project,"binary");
  assertTargetExistsAndReturnTarget(project,"native");
}
