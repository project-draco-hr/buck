{
  BuildRule libraryRule=createBuildRuleWithDefaults(new BuildTarget("//foo","library"),ImmutableSortedSet.<BuildRule>of(),iosLibraryDescription);
  BuildRule binaryRule=createBuildRuleWithDefaults(new BuildTarget("//foo","binary"),ImmutableSortedSet.<BuildRule>of(),iosBinaryDescription);
  BuildRule testRule=createBuildRuleWithDefaults(new BuildTarget("//foo","test"),ImmutableSortedSet.<BuildRule>of(),iosTestDescription);
  BuildRule nativeRule=createBuildRuleWithDefaults(new BuildTarget("//foo","native"),ImmutableSortedSet.<BuildRule>of(),iosTestDescription);
  BuildRule configRule=createXcodeProjectConfigRule("//foo","fooproject",ImmutableSet.of(libraryRule,binaryRule,testRule,nativeRule));
  SeparatedProjectsGenerator generator=new SeparatedProjectsGenerator(projectFilesystem,createPartialGraphFromBuildRules(ImmutableSet.of(configRule,libraryRule,binaryRule,testRule,nativeRule)),executionContext,ImmutableSet.of(configRule.getBuildTarget()));
  generator.generateProjects();
  PBXProject project=getGeneratedProjectOfConfigRule(generator,configRule);
  assertTargetExistsAndReturnTarget(project,"library");
  assertTargetExistsAndReturnTarget(project,"binary");
  assertTargetExistsAndReturnTarget(project,"test");
  assertTargetExistsAndReturnTarget(project,"native");
}
