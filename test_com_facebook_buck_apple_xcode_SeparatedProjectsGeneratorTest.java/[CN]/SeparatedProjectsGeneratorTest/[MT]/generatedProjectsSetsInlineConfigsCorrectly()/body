{
  BuildTarget target1=BuildTarget.builder("//foo","rule1").build();
  TargetNode<?> node1=AppleLibraryBuilder.createBuilder(target1).setConfigs(Optional.of(ImmutableSortedMap.of("Debug",ImmutableMap.of("TARGET_FLAG1","t1","TARGET_FLAG2","t2")))).build();
  BuildTarget target2=BuildTarget.builder("//foo","rule2").build();
  TargetNode<?> node2=AppleLibraryBuilder.createBuilder(target2).setConfigs(Optional.of(ImmutableSortedMap.of("Debug",ImmutableMap.of("TARGET_FLAG3","t3","TARGET_FLAG4","t4")))).build();
  BuildTarget configTarget=BuildTarget.builder("//foo","project").build();
  TargetNode<?> configNode=XcodeProjectConfigBuilder.createBuilder(configTarget).setProjectName("fooproject").setRules(ImmutableSortedSet.of(target1,target2)).build();
  SeparatedProjectsGenerator generator=new SeparatedProjectsGenerator(projectFilesystem,TargetGraphFactory.newInstance(ImmutableSet.of(node1,node2,configNode)),executionContext,ImmutableSet.of(configTarget),ImmutableSet.<ProjectGenerator.Option>of());
  generator.generateProjects();
  PBXProject project=getGeneratedProjectOfConfigRule(generator,configTarget);
{
    PBXTarget target=ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(project,"rule1");
    ImmutableMap<String,String> settings=ProjectGeneratorTestUtils.getBuildSettings(projectFilesystem,target1,target,"Debug");
    assertEquals("t1",settings.get("TARGET_FLAG1"));
    assertEquals("t2",settings.get("TARGET_FLAG2"));
    assertFalse(settings.containsKey("TARGET_FLAG3"));
    assertFalse(settings.containsKey("TARGET_FLAG4"));
  }
{
    PBXTarget target=ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(project,"rule2");
    ImmutableMap<String,String> settings=ProjectGeneratorTestUtils.getBuildSettings(projectFilesystem,target1,target,"Debug");
    assertEquals("t3",settings.get("TARGET_FLAG3"));
    assertEquals("t4",settings.get("TARGET_FLAG4"));
    assertFalse(settings.containsKey("TARGET_FLAG1"));
    assertFalse(settings.containsKey("TARGET_FLAG2"));
  }
}
