{
  BuildTarget target1=BuildTarget.builder("//foo","rule1").build();
  TargetNode<?> node1=AppleLibraryBuilder.createBuilder(target1).setConfigs(Optional.of(ImmutableSortedMap.of("Debug",new XcodeRuleConfiguration(ImmutableList.of(new XcodeRuleConfigurationLayer(new PathSourcePath(Paths.get("project.xcconfig"))),new XcodeRuleConfigurationLayer(ImmutableMap.of("PROJECT_FLAG1","p1","PROJECT_FLAG2","p2")),new XcodeRuleConfigurationLayer(new PathSourcePath(Paths.get("target.xcconfig"))),new XcodeRuleConfigurationLayer(ImmutableMap.of("TARGET_FLAG1","t1","TARGET_FLAG2","t2"))))))).build();
  BuildTarget target2=BuildTarget.builder("//foo","rule2").build();
  TargetNode<?> node2=AppleLibraryBuilder.createBuilder(target2).setConfigs(Optional.of(ImmutableSortedMap.of("Debug",new XcodeRuleConfiguration(ImmutableList.of(new XcodeRuleConfigurationLayer(new PathSourcePath(Paths.get("project.xcconfig"))),new XcodeRuleConfigurationLayer(ImmutableMap.of("PROJECT_FLAG1","p1","PROJECT_FLAG2","p2")),new XcodeRuleConfigurationLayer(new PathSourcePath(Paths.get("target.xcconfig"))),new XcodeRuleConfigurationLayer(ImmutableMap.of("TARGET_FLAG3","t3","TARGET_FLAG4","t4"))))))).build();
  BuildTarget configTarget=BuildTarget.builder("//foo","project").build();
  TargetNode<?> configNode=XcodeProjectConfigBuilder.createBuilder(configTarget).setProjectName("fooproject").setRules(ImmutableSortedSet.of(target1,target2)).build();
  SeparatedProjectsGenerator generator=new SeparatedProjectsGenerator(projectFilesystem,TargetGraphFactory.newInstance(ImmutableSet.of(node1,node2,configNode)),executionContext,ImmutableSet.of(configTarget),ImmutableSet.<ProjectGenerator.Option>of());
  generator.generateProjects();
  PBXProject project=getGeneratedProjectOfConfigRule(generator,configTarget);
{
    XCBuildConfiguration projectLevelConfig=project.getBuildConfigurationList().getBuildConfigurationsByName().asMap().get("Debug");
    assertNotNull("should have project level Debug config",projectLevelConfig);
    assertEquals(2,projectLevelConfig.getBuildSettings().count());
    assertEquals(new NSString("p1"),projectLevelConfig.getBuildSettings().get("PROJECT_FLAG1"));
    assertEquals(new NSString("p2"),projectLevelConfig.getBuildSettings().get("PROJECT_FLAG2"));
  }
{
    XCBuildConfiguration targetLevelConfig=ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(project,"rule1").getBuildConfigurationList().getBuildConfigurationsByName().asMap().get("Debug");
    assertNotNull("should have target level Debug config",targetLevelConfig);
    assertEquals(new NSString("t1"),targetLevelConfig.getBuildSettings().get("TARGET_FLAG1"));
    assertEquals(new NSString("t2"),targetLevelConfig.getBuildSettings().get("TARGET_FLAG2"));
    assertFalse(targetLevelConfig.getBuildSettings().containsKey("TARGET_FLAG3"));
    assertFalse(targetLevelConfig.getBuildSettings().containsKey("TARGET_FLAG4"));
  }
{
    XCBuildConfiguration targetLevelConfig=ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(project,"rule2").getBuildConfigurationList().getBuildConfigurationsByName().asMap().get("Debug");
    assertNotNull("should have target level Debug config",targetLevelConfig);
    assertEquals(new NSString("t3"),targetLevelConfig.getBuildSettings().get("TARGET_FLAG3"));
    assertEquals(new NSString("t4"),targetLevelConfig.getBuildSettings().get("TARGET_FLAG4"));
    assertFalse(targetLevelConfig.getBuildSettings().containsKey("TARGET_FLAG1"));
    assertFalse(targetLevelConfig.getBuildSettings().containsKey("TARGET_FLAG2"));
  }
}
