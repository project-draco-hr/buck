{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRule rule1=createBuildRuleWithDefaults(BuildTarget.builder("//foo","rule1").build(),resolver,ImmutableSortedSet.<BuildRule>of(),appleLibraryDescription,new Function<AppleNativeTargetDescriptionArg,AppleNativeTargetDescriptionArg>(){
    @Override public AppleNativeTargetDescriptionArg apply(    AppleNativeTargetDescriptionArg input){
      input.configs=Optional.of(ImmutableSortedMap.of("Debug",new XcodeRuleConfiguration(ImmutableList.of(new XcodeRuleConfigurationLayer(new PathSourcePath(Paths.get("project.xcconfig"))),new XcodeRuleConfigurationLayer(ImmutableMap.of("PROJECT_FLAG1","p1","PROJECT_FLAG2","p2")),new XcodeRuleConfigurationLayer(new PathSourcePath(Paths.get("target.xcconfig"))),new XcodeRuleConfigurationLayer(ImmutableMap.of("TARGET_FLAG1","t1","TARGET_FLAG2","t2"))))));
      return input;
    }
  }
);
  resolver.addToIndex(rule1);
  BuildRule rule2=createBuildRuleWithDefaults(BuildTarget.builder("//foo","rule2").build(),resolver,ImmutableSortedSet.<BuildRule>of(),appleLibraryDescription,new Function<AppleNativeTargetDescriptionArg,AppleNativeTargetDescriptionArg>(){
    @Override public AppleNativeTargetDescriptionArg apply(    AppleNativeTargetDescriptionArg input){
      input.configs=Optional.of(ImmutableSortedMap.of("Debug",new XcodeRuleConfiguration(ImmutableList.of(new XcodeRuleConfigurationLayer(new PathSourcePath(Paths.get("project.xcconfig"))),new XcodeRuleConfigurationLayer(ImmutableMap.of("PROJECT_FLAG1","p1","PROJECT_FLAG2","p2")),new XcodeRuleConfigurationLayer(new PathSourcePath(Paths.get("target.xcconfig"))),new XcodeRuleConfigurationLayer(ImmutableMap.of("TARGET_FLAG3","t3","TARGET_FLAG4","t4"))))));
      return input;
    }
  }
);
  resolver.addToIndex(rule2);
  BuildRule configRule=createXcodeProjectConfigRule("//foo","fooproject",resolver,ImmutableSortedSet.of(rule1.getBuildTarget(),rule2.getBuildTarget()));
  resolver.addToIndex(configRule);
  SeparatedProjectsGenerator generator=new SeparatedProjectsGenerator(new SourcePathResolver(resolver),projectFilesystem,RuleMap.createGraphFromBuildRules(resolver),executionContext,ImmutableSet.of(configRule.getBuildTarget()),ImmutableSet.<ProjectGenerator.Option>of());
  generator.generateProjects();
  PBXProject project=getGeneratedProjectOfConfigRule(generator,configRule);
{
    XCBuildConfiguration projectLevelConfig=project.getBuildConfigurationList().getBuildConfigurationsByName().asMap().get("Debug");
    assertNotNull("should have project level Debug config",projectLevelConfig);
    assertEquals(2,projectLevelConfig.getBuildSettings().count());
    assertEquals(new NSString("p1"),projectLevelConfig.getBuildSettings().get("PROJECT_FLAG1"));
    assertEquals(new NSString("p2"),projectLevelConfig.getBuildSettings().get("PROJECT_FLAG2"));
  }
{
    XCBuildConfiguration targetLevelConfig=ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(project,"rule1").getBuildConfigurationList().getBuildConfigurationsByName().asMap().get("Debug");
    assertNotNull("should have target level Debug config",targetLevelConfig);
    assertEquals(new NSString("t1"),targetLevelConfig.getBuildSettings().get("TARGET_FLAG1"));
    assertEquals(new NSString("t2"),targetLevelConfig.getBuildSettings().get("TARGET_FLAG2"));
    assertFalse(targetLevelConfig.getBuildSettings().containsKey("TARGET_FLAG3"));
    assertFalse(targetLevelConfig.getBuildSettings().containsKey("TARGET_FLAG4"));
  }
{
    XCBuildConfiguration targetLevelConfig=ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(project,"rule2").getBuildConfigurationList().getBuildConfigurationsByName().asMap().get("Debug");
    assertNotNull("should have target level Debug config",targetLevelConfig);
    assertEquals(new NSString("t3"),targetLevelConfig.getBuildSettings().get("TARGET_FLAG3"));
    assertEquals(new NSString("t4"),targetLevelConfig.getBuildSettings().get("TARGET_FLAG4"));
    assertFalse(targetLevelConfig.getBuildSettings().containsKey("TARGET_FLAG1"));
    assertFalse(targetLevelConfig.getBuildSettings().containsKey("TARGET_FLAG2"));
  }
}
