{
  BuildTarget target=BuildTarget.builder("//foo","rule").build();
  TargetNode<?> node=AppleLibraryBuilder.createBuilder(target).setConfigs(Optional.of(ImmutableSortedMap.of("Debug",new XcodeRuleConfiguration(ImmutableList.of(new XcodeRuleConfigurationLayer(new PathSourcePath(Paths.get("project.xcconfig"))),new XcodeRuleConfigurationLayer(new PathSourcePath(Paths.get("target.xcconfig")))))))).build();
  BuildTarget configTarget=BuildTarget.builder("//foo","project").build();
  TargetNode<?> configNode=XcodeProjectConfigBuilder.createBuilder(configTarget).setProjectName("fooproject").setRules(ImmutableSortedSet.of(target)).build();
  SeparatedProjectsGenerator generator=new SeparatedProjectsGenerator(projectFilesystem,buckEventBus,TargetGraphFactory.newInstance(ImmutableSet.of(node,configNode)),executionContext,ImmutableSet.of(configTarget),ImmutableSet.<ProjectGenerator.Option>of());
  generator.generateProjects();
  PBXProject project=getGeneratedProjectOfConfigRule(generator,configTarget);
  XCBuildConfiguration projectLevelConfig=project.getBuildConfigurationList().getBuildConfigurationsByName().asMap().get("Debug");
  assertNotNull("should have project level Debug config",projectLevelConfig);
  assertNotNull("project level Debug config should reference xcconfig file",projectLevelConfig.getBaseConfigurationReference());
  assertEquals("Project level config file should be set correctly","../project.xcconfig",projectLevelConfig.getBaseConfigurationReference().getPath());
  XCBuildConfiguration targetLevelConfig=ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(project,"rule").getBuildConfigurationList().getBuildConfigurationsByName().asMap().get("Debug");
  assertNotNull("should have target level Debug config",targetLevelConfig);
  assertNotNull("project level Debug config should reference xcconfig file",targetLevelConfig.getBaseConfigurationReference());
  assertEquals("Target level config file should be set correctly","../target.xcconfig",targetLevelConfig.getBaseConfigurationReference().getPath());
}
