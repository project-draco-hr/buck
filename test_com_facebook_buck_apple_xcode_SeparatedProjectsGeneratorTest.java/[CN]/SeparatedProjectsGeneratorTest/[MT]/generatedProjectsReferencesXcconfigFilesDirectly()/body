{
  BuildRule rule=createBuildRuleWithDefaults(new BuildTarget("//foo","rule"),ImmutableSortedSet.<BuildRule>of(),iosLibraryDescription,new Function<IosLibraryDescription.Arg,IosLibraryDescription.Arg>(){
    @Override public IosLibraryDescription.Arg apply(    IosLibraryDescription.Arg input){
      input.configs=ImmutableMap.of("Debug",ImmutableList.of(Either.<Path,ImmutableMap<String,String>>ofLeft(Paths.get("project.xcconfig")),Either.<Path,ImmutableMap<String,String>>ofLeft(Paths.get("target.xcconfig"))));
      return input;
    }
  }
);
  BuildRule configRule=createXcodeProjectConfigRule("//foo","fooproject",ImmutableSet.of(rule));
  SeparatedProjectsGenerator generator=new SeparatedProjectsGenerator(projectFilesystem,createPartialGraphFromBuildRules(ImmutableSet.of(configRule,rule)),executionContext,ImmutableSet.of(configRule.getBuildTarget()));
  generator.generateProjects();
  PBXProject project=getGeneratedProjectOfConfigRule(generator,configRule);
  XCBuildConfiguration projectLevelConfig=project.getBuildConfigurationList().getBuildConfigurationsByName().asMap().get("Debug");
  assertNotNull("should have project level Debug config",projectLevelConfig);
  assertNotNull("project level Debug config should reference xcconfig file",projectLevelConfig.getBaseConfigurationReference());
  assertEquals("Project level config file should be set correctly","../project.xcconfig",projectLevelConfig.getBaseConfigurationReference().getPath());
  XCBuildConfiguration targetLevelConfig=ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(project,"//foo:rule").getBuildConfigurationList().getBuildConfigurationsByName().asMap().get("Debug");
  assertNotNull("should have target level Debug config",targetLevelConfig);
  assertNotNull("project level Debug config should reference xcconfig file",targetLevelConfig.getBaseConfigurationReference());
  assertEquals("Target level config file should be set correctly","../target.xcconfig",targetLevelConfig.getBaseConfigurationReference().getPath());
}
