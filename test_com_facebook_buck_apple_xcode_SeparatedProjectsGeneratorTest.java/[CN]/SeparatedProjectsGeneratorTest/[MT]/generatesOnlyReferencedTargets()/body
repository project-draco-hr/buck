{
  BuildRule depRule=createBuildRuleWithDefaults(BuildTarget.builder("//elsewhere","somedep").build(),ImmutableSortedSet.<BuildRule>of(),iosLibraryDescription);
  BuildRule rule=createBuildRuleWithDefaults(BuildTarget.builder("//foo/bar","somelib").build(),ImmutableSortedSet.of(depRule),iosLibraryDescription);
  BuildRule configRule=createXcodeProjectConfigRule("//foo/bar","fooproject",ImmutableSet.of(rule));
  PartialGraph partialGraph=createPartialGraphFromBuildRules(ImmutableSet.of(rule,configRule));
  SeparatedProjectsGenerator generator=new SeparatedProjectsGenerator(projectFilesystem,partialGraph,executionContext,ImmutableSet.of(configRule.getBuildTarget()),ImmutableSet.<ProjectGenerator.Option>of());
  generator.generateProjects();
  PBXProject project=getGeneratedProjectOfConfigRule(generator,configRule);
  assertThat("Has only two targets",project.getTargets(),hasSize(2));
  assertThat("One of the targets is the named target",project.getTargets(),hasItem(isTargetWithName("somelib")));
  assertThat("Only other target is signed-source target",project.getTargets(),hasItem(isA(PBXAggregateTarget.class)));
}
