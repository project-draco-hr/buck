{
  Optional<BuildRule> invalidDep=FluentIterable.from(params.getDeclaredDeps().get()).filter(Predicates.not(Predicates.or(Predicates.instanceOf(AndroidResource.class),Predicates.instanceOf(AndroidLibrary.class)))).first();
  if (invalidDep.isPresent()) {
    throw new HumanReadableException(params.getBuildTarget() + " (android_resource): dependency " + invalidDep.get().getBuildTarget()+ " ("+ invalidDep.get().getType()+ ") is not of type android_resource or android_library.");
  }
  final SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  Pair<ImmutableSortedSet<Path>,Optional<SourcePath>> resInputsAndKey=collectInputFilesAndKey(args.res);
  Pair<ImmutableSortedSet<Path>,Optional<SourcePath>> assetsInputsAndKey=collectInputFilesAndKey(args.assets);
  return new AndroidResource(params.copyWithDeps(Suppliers.ofInstance(AndroidResourceHelper.androidResOnly(params.getDeclaredDeps().get())),params.getExtraDeps()),pathResolver,resolver.getAllRules(args.deps.get()),args.res.orNull(),resInputsAndKey.getFirst(),resInputsAndKey.getSecond(),args.rDotJavaPackage.orNull(),args.assets.orNull(),assetsInputsAndKey.getFirst(),assetsInputsAndKey.getSecond(),args.manifest.orNull(),args.hasWhitelistedStrings.or(false));
}
