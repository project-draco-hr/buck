{
  if (!inputDir.isPresent()) {
    return ImmutableSortedSet.of();
  }
  final ImmutableSortedSet.Builder<SourcePath> paths=ImmutableSortedSet.naturalOrder();
  FileVisitor<Path> fileVisitor=new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attr) throws IOException {
      if (dir.getFileName().toString().charAt(0) == '_' || !isResource(dir)) {
        return FileVisitResult.SKIP_SUBTREE;
      }
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attr) throws IOException {
      if (isResource(file)) {
        paths.add(new PathSourcePath(filesystem,file));
      }
      return FileVisitResult.CONTINUE;
    }
    private boolean isResource(    Path fileOrDir) throws IOException {
      for (      String nonAssetFilename : NON_ASSET_FILENAMES) {
        if (filesystem.isSameRelativePathIfFileExists(fileOrDir,fileOrDir.resolveSibling(nonAssetFilename))) {
          return false;
        }
      }
      String fileOrDirName=fileOrDir.getFileName().toString();
      if (fileOrDirName.charAt(fileOrDirName.length() - 1) == '~') {
        return false;
      }
      String fileOrDirNameWithoutExtension=Files.getNameWithoutExtension(fileOrDirName);
      for (      String ignoredMiniAaptExtension : MiniAapt.IGNORED_FILE_EXTENSIONS) {
        if (filesystem.isSameRelativePathIfFileExists(fileOrDir,fileOrDir.resolveSibling(fileOrDirNameWithoutExtension + "." + ignoredMiniAaptExtension))) {
          return false;
        }
      }
      return true;
    }
  }
;
  try {
    filesystem.walkRelativeFileTree(inputDir.get(),fileVisitor);
  }
 catch (  IOException e) {
    throw new HumanReadableException(e,"Error traversing directory: %s.",inputDir.get());
  }
  return paths.build();
}
