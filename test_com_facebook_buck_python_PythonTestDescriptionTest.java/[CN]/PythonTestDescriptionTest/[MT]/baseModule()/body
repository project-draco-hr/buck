{
  BuildRuleResolver resolver;
  BuildTarget target=BuildTargetFactory.newInstance("//foo:lib");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  String sourceName="main.py";
  SourcePath source=new TestSourcePath("foo/" + sourceName);
  PythonTestDescription desc=new PythonTestDescription(new PythonBinaryDescription(PYTHON_BUCK_CONFIG,PythonTestUtils.PYTHON_PLATFORMS,CXX_PLATFORM,CXX_PLATFORMS),PYTHON_BUCK_CONFIG,PythonTestUtils.PYTHON_PLATFORMS,CXX_PLATFORM,CXX_PLATFORMS);
  PythonTestDescription.Arg arg=desc.createUnpopulatedConstructorArg();
  arg.deps=Optional.absent();
  arg.resources=Optional.absent();
  arg.contacts=Optional.absent();
  arg.labels=Optional.absent();
  arg.sourceUnderTest=Optional.absent();
  arg.srcs=Optional.of(SourceList.ofUnnamedSources(ImmutableSortedSet.of(source)));
  arg.zipSafe=Optional.absent();
  arg.buildArgs=Optional.absent();
  arg.baseModule=Optional.absent();
  resolver=new BuildRuleResolver();
  desc.createBuildRule(TargetGraph.EMPTY,params,resolver,arg);
  PythonBinary normalRule=(PythonBinary)resolver.getRule(desc.getBinaryBuildTarget(target));
  assertNotNull(normalRule);
  assertTrue(normalRule.getComponents().getModules().containsKey(target.getBasePath().resolve(sourceName)));
  arg.baseModule=Optional.of("blah");
  resolver=new BuildRuleResolver();
  desc.createBuildRule(TargetGraph.EMPTY,params,resolver,arg);
  PythonBinary baseModuleRule=(PythonBinary)resolver.getRule(desc.getBinaryBuildTarget(target));
  assertNotNull(baseModuleRule);
  assertTrue(baseModuleRule.getComponents().getModules().containsKey(Paths.get(arg.baseModule.get()).resolve(sourceName)));
}
