{
  NativeLinkable a=new Node("//:a");
  SharedNativeLinkTarget root=new Root("//:root",ImmutableList.of(a));
  NativeLinkable excludedRoot=new Node("//:excluded_root",ImmutableList.of(a));
  Omnibus.OmnibusSpec spec=Omnibus.buildSpec(CxxPlatformUtils.DEFAULT_PLATFORM,ImmutableList.of(root),ImmutableList.of(excludedRoot));
  assertThat(spec.getGraph().getNodes(),Matchers.<BuildTarget>empty());
  assertThat(spec.getBody().keySet(),Matchers.<BuildTarget>empty());
  assertThat(spec.getRoots().keySet(),Matchers.containsInAnyOrder(root.getBuildTarget()));
  assertThat(spec.getDeps().keySet(),Matchers.<BuildTarget>empty());
  assertThat(spec.getExcluded().keySet(),Matchers.containsInAnyOrder(excludedRoot.getBuildTarget(),a.getBuildTarget()));
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ImmutableMap<String,SourcePath> libs=Omnibus.getSharedLibraries(new FakeBuildRuleParamsBuilder(BuildTargetFactory.newInstance("//:rule")).build(),resolver,pathResolver,CxxPlatformUtils.DEFAULT_PLATFORM,ImmutableList.<Arg>of(),ImmutableList.of(root),ImmutableList.of(excludedRoot)).toSonameMap();
  assertThat(libs.keySet(),Matchers.containsInAnyOrder(root.getBuildTarget().toString(),excludedRoot.getBuildTarget().toString(),a.getBuildTarget().toString()));
  assertCxxLinkContainsNativeLinkableInput(getCxxLinkRule(pathResolver,libs.get(root.getBuildTarget().toString())),root.getSharedNativeLinkTargetInput(CxxPlatformUtils.DEFAULT_PLATFORM));
  assertThat(libs.get(excludedRoot.getBuildTarget().toString()),Matchers.not(Matchers.instanceOf(BuildTargetSourcePath.class)));
  assertThat(libs.get(a.getBuildTarget().toString()),Matchers.not(Matchers.instanceOf(BuildTargetSourcePath.class)));
}
