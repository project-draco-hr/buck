{
  ProjectWorkspace external=TestDataHelper.createProjectWorkspaceForScenario(this,"crossrepo_external",externalFolder);
  external.setUp();
  ProjectWorkspace main=TestDataHelper.createProjectWorkspaceForScenario(this,"crossrepo_main",mainFolder);
  main.setUp();
  String repositoriesSection="[repositories]\n" + "external = " + MorePaths.pathWithUnixSeparators(externalFolder.getRoot().toString()) + "\n";
  Files.append(repositoriesSection,main.getFile(".buckconfig"),Charset.defaultCharset());
  RepositoryFactory repositoryFactory=new FakeRepositoryFactory(mainFolder.getRoot().toPath());
  BuckConfig config=repositoryFactory.getRootRepository().getBuckConfig();
  ParserConfig parserConfig=new ParserConfig(config);
  Parser parser=Parser.createParser(repositoryFactory,parserConfig.getPythonInterpreter(),parserConfig.getAllowEmptyGlobs(),parserConfig.getEnforceBuckPackageBoundary(),parserConfig.getTempFilePatterns(),parserConfig.getBuildFileName(),parserConfig.getDefaultIncludes(),new FakeRuleKeyBuilderFactory());
  BuildTarget mainTarget=BuildTarget.builder("//","main").build();
  BuildTarget externalTarget=BuildTarget.of(UnflavoredBuildTarget.builder("//","external").setRepository("external").build());
  BuckEventBus eventBus=BuckEventBusFactory.newInstance();
  TargetGraph targetGraph=parser.buildTargetGraphForBuildTargets(ImmutableList.of(mainTarget),new ParserConfig(config),eventBus,new TestConsole(),ImmutableMap.<String,String>of(),false);
  ActionGraph graph=new TargetGraphToActionGraph(eventBus,new BuildTargetNodeToBuildRuleTransformer()).apply(targetGraph);
  BuildRule mainRule=graph.findBuildRuleByTarget(mainTarget);
  assertEquals(mainTarget,mainRule.getBuildTarget());
  BuildRule externalRule=graph.findBuildRuleByTarget(externalTarget);
  assertEquals(externalTarget,externalRule.getBuildTarget());
  assertEquals(externalRule,mainRule.getDeps().first());
}
