{
  ProjectWorkspace external=TestDataHelper.createProjectWorkspaceForScenario(this,"crossrepo_external",externalFolder);
  external.setUp();
  ProjectWorkspace main=TestDataHelper.createProjectWorkspaceForScenario(this,"crossrepo_main",mainFolder);
  main.setUp();
  String repositoriesSection="[repositories]\n" + "external = " + externalFolder.getRoot() + "\n";
  Files.append(repositoriesSection,main.getFile(".buckconfig"),Charset.defaultCharset());
  RepositoryFactory repositoryFactory=new FakeRepositoryFactory(mainFolder.getRoot().toPath());
  Parser parser=Parser.createParser(repositoryFactory,repositoryFactory.getRootRepository().getBuckConfig().getPythonInterpreter(),ImmutableSet.<Pattern>of(),new FakeRuleKeyBuilderFactory());
  BuildTarget mainTarget=BuildTarget.builder("//","main").build();
  BuildTarget externalTarget=BuildTarget.builder("//","external").setRepository("external").build();
  BuckEventBus eventBus=BuckEventBusFactory.newInstance();
  ActionGraph graph=parser.buildTargetGraph(ImmutableList.of(mainTarget),ImmutableList.<String>of(),eventBus,new TestConsole(),ImmutableMap.<String,String>of()).buildActionGraph(new BuildRuleResolver(),eventBus);
  BuildRule mainRule=graph.findBuildRuleByTarget(mainTarget);
  assertEquals(mainTarget,mainRule.getBuildTarget());
  BuildRule externalRule=graph.findBuildRuleByTarget(externalTarget);
  assertEquals(externalTarget,externalRule.getBuildTarget());
  assertEquals(externalRule,mainRule.getDeps().first());
}
