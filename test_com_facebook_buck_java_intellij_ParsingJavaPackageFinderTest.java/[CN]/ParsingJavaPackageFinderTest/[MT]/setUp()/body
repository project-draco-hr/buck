{
  matchPath=Paths.get("case1/org/test/package1/Match.java");
  mismatchPath=Paths.get("case2/org/test/package2/Mismatch.java");
  placeholderPath=Paths.get("case3/com/test/placeholder");
  fakeProjectFilesystem=new FakeProjectFilesystem(new FakeClock(0),Paths.get(".").toFile(),ImmutableSet.of(matchPath,mismatchPath,placeholderPath));
  fakeProjectFilesystem.writeContentsToPath("package org.test.package1; \n class Match {} \n",matchPath);
  fakeProjectFilesystem.writeContentsToPath("package org.test.\nhaha; \n class Mismatch {} \n",mismatchPath);
  dummyPackageFinder=new JavaPackageFinder(){
    @Override public Path findJavaPackageFolder(    Path pathRelativeToProjectRoot){
      return Paths.get("dummy");
    }
    @Override public String findJavaPackage(    Path pathRelativeToProjectRoot){
      return "dummy";
    }
    @Override public String findJavaPackage(    BuildTarget buildTarget){
      return "dummy";
    }
  }
;
  javaFileParser=JavaFileParser.createJavaFileParser(JavaCompilationConstants.DEFAULT_JAVAC_OPTIONS);
}
