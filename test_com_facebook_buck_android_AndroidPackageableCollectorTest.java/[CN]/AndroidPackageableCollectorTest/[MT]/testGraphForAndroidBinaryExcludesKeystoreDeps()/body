{
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  BuildTarget androidLibraryKeystoreTarget=BuildTargetFactory.newInstance("//java/com/keystore/base:base");
  BuildRule androidLibraryKeystore=AndroidLibraryBuilder.createBuilder(androidLibraryKeystoreTarget).addSrc(Paths.get("java/com/facebook/keystore/Base.java")).build(ruleResolver);
  BuildTarget keystoreTarget=BuildTargetFactory.newInstance("//keystore:debug");
  KeystoreBuilder.createBuilder(keystoreTarget).setStore(new FakeSourcePath("keystore/debug.keystore")).setProperties(new FakeSourcePath("keystore/debug.keystore.properties")).addDep(androidLibraryKeystore.getBuildTarget()).build(ruleResolver);
  BuildTarget androidLibraryTarget=BuildTargetFactory.newInstance("//java/com/facebook/base:base");
  BuildRule androidLibrary=AndroidLibraryBuilder.createBuilder(androidLibraryTarget).addSrc(Paths.get("java/com/facebook/base/Base.java")).build(ruleResolver);
  ImmutableSortedSet<BuildTarget> originalDepsTargets=ImmutableSortedSet.of(androidLibrary.getBuildTarget());
  AndroidBinary androidBinary=(AndroidBinary)AndroidBinaryBuilder.createBuilder(BuildTargetFactory.newInstance("//apps/sample:app")).setManifest(new FakeSourcePath("apps/sample/AndroidManifest.xml")).setOriginalDeps(originalDepsTargets).setKeystore(keystoreTarget).build(ruleResolver);
  AndroidPackageableCollection packageableCollection=androidBinary.getAndroidPackageableCollection();
  assertEquals("Classpath entries should include facebook/base but not keystore/base.",ImmutableSet.of(BuckConstant.GEN_PATH.resolve("java/com/facebook/base/lib__base__output/base.jar")),FluentIterable.from(packageableCollection.getClasspathEntriesToDex()).transform(pathResolver.getRelativePathFunction()).toSet());
}
