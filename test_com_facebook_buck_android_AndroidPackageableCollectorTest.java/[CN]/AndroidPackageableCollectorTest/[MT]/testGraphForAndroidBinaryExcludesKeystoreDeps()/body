{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildTarget androidLibraryKeystoreTarget=BuildTarget.builder("//java/com/keystore/base","base").build();
  BuildRule androidLibraryKeystore=AndroidLibraryBuilder.createBuilder(androidLibraryKeystoreTarget).addSrc(Paths.get("java/com/facebook/keystore/Base.java")).build(ruleResolver);
  BuildTarget keystoreTarget=BuildTarget.builder("//keystore","debug").build();
  KeystoreBuilder.createBuilder(keystoreTarget).setStore(Paths.get("keystore/debug.keystore")).setProperties(Paths.get("keystore/debug.keystore.properties")).addDep(androidLibraryKeystore.getBuildTarget()).build(ruleResolver);
  BuildTarget androidLibraryTarget=BuildTarget.builder("//java/com/facebook/base","base").build();
  BuildRule androidLibrary=AndroidLibraryBuilder.createBuilder(androidLibraryTarget).addSrc(Paths.get("java/com/facebook/base/Base.java")).build(ruleResolver);
  ImmutableSortedSet<BuildTarget> originalDepsTargets=ImmutableSortedSet.of(androidLibrary.getBuildTarget());
  AndroidBinary androidBinary=(AndroidBinary)AndroidBinaryBuilder.createBuilder(BuildTarget.builder("//apps/sample","app").build()).setManifest(new TestSourcePath("apps/sample/AndroidManifest.xml")).setTarget("Google Inc.:Google APIs:16").setOriginalDeps(originalDepsTargets).setKeystore(keystoreTarget).build(ruleResolver);
  AndroidPackageableCollection packageableCollection=androidBinary.getAndroidPackageableCollection();
  assertEquals("Classpath entries should include facebook/base but not keystore/base.",ImmutableSet.of(BuckConstant.GEN_PATH.resolve("java/com/facebook/base/lib__base__output/base.jar")),packageableCollection.classpathEntriesToDex);
}
