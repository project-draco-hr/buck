{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  ProjectFilesystem projectFilesystem=new FakeProjectFilesystem();
  Path prebuiltNativeLibraryPath=Paths.get("java/com/facebook/prebuilt_native_library/libs");
  projectFilesystem.mkdirs(prebuiltNativeLibraryPath);
  BuildTarget guavaTarget=BuildTargetFactory.newInstance("//third_party/guava:guava");
  PrebuiltJarBuilder.createBuilder(guavaTarget).setBinaryJar(Paths.get("third_party/guava/guava-10.0.1.jar")).build(ruleResolver);
  BuildTarget jsr305Target=BuildTargetFactory.newInstance("//third_party/jsr-305:jsr-305");
  PrebuiltJarBuilder.createBuilder(jsr305Target).setBinaryJar(Paths.get("third_party/jsr-305/jsr305.jar")).build(ruleResolver);
  BuildRule ndkLibrary=NdkLibraryBuilder.createNdkLibrary(BuildTargetFactory.newInstance("//java/com/facebook/native_library:library")).addSrc(Paths.get("Android.mk")).setIsAsset(false).build();
  ruleResolver.addToIndex(ndkLibrary);
  BuildTarget prebuiltNativeLibraryTarget=BuildTargetFactory.newInstance("//java/com/facebook/prebuilt_native_library:library");
  BuildRule prebuiltNativeLibraryBuild=PrebuiltNativeLibraryBuilder.newBuilder(prebuiltNativeLibraryTarget).setNativeLibs(prebuiltNativeLibraryPath).setIsAsset(true).build(ruleResolver,projectFilesystem);
  BuildTarget libraryRuleTarget=BuildTargetFactory.newInstance("//java/src/com/facebook:example");
  JavaLibraryBuilder.createBuilder(libraryRuleTarget).setProguardConfig(Paths.get("debug.pro")).addSrc(Paths.get("Example.java")).addDep(guavaTarget).addDep(jsr305Target).addDep(prebuiltNativeLibraryBuild.getBuildTarget()).addDep(ndkLibrary.getBuildTarget()).build(ruleResolver);
  BuildTarget manifestTarget=BuildTargetFactory.newInstance("//java/src/com/facebook:res");
  AndroidResource manifestRule=AndroidResourceRuleBuilder.newBuilder().setBuildTarget(manifestTarget).setManifest(new PathSourcePath(Paths.get("java/src/com/facebook/module/AndroidManifest.xml"))).setAssets(Paths.get("assets")).build();
  ruleResolver.addToIndex(manifestRule);
  BuildTarget keystoreTarget=BuildTargetFactory.newInstance("//keystore:debug");
  KeystoreBuilder.createBuilder(keystoreTarget).setStore(Paths.get("keystore/debug.keystore")).setProperties(Paths.get("keystore/debug.keystore.properties")).build(ruleResolver);
  ImmutableSortedSet<BuildTarget> originalDepsTargets=ImmutableSortedSet.of(libraryRuleTarget,manifestTarget);
  ruleResolver.getAllRules(originalDepsTargets);
  AndroidBinary binaryRule=(AndroidBinary)AndroidBinaryBuilder.createBuilder(BuildTargetFactory.newInstance("//java/src/com/facebook:app")).setOriginalDeps(originalDepsTargets).setBuildTargetsToExcludeFromDex(ImmutableSet.of(BuildTargetFactory.newInstance("//third_party/guava:guava"))).setManifest(new TestSourcePath("java/src/com/facebook/AndroidManifest.xml")).setTarget("Google Inc.:Google APIs:16").setKeystore(keystoreTarget).build(ruleResolver);
  AndroidPackageableCollection packageableCollection=binaryRule.getAndroidPackageableCollection();
  assertEquals("Because guava was passed to no_dx, it should not be in the classpathEntriesToDex list",ImmutableSet.of(Paths.get("third_party/jsr-305/jsr305.jar"),BuckConstant.GEN_PATH.resolve("java/src/com/facebook/lib__example__output/example.jar")),packageableCollection.classpathEntriesToDex);
  assertEquals("Because guava was passed to no_dx, it should not be treated as a third-party JAR whose " + "resources need to be extracted and repacked in the APK. If this is done, then code " + "in the guava-10.0.1.dex.1.jar in the APK's assets/ tmp may try to load the resource "+ "from the APK as a ZipFileEntry rather than as a resource within "+ "guava-10.0.1.dex.1.jar. Loading a resource in this way could take substantially "+ "longer. Specifically, this was observed to take over one second longer to load "+ "the resource in fb4a. Because the resource was loaded on startup, this introduced a "+ "substantial regression in the startup time for the fb4a app.",ImmutableSet.of(Paths.get("third_party/jsr-305/jsr305.jar")),packageableCollection.pathsToThirdPartyJars);
  assertEquals("Because assets directory was passed an AndroidResourceRule it should be added to the " + "transitive dependencies",ImmutableSet.of(Paths.get("assets")),packageableCollection.assetsDirectories);
  assertEquals("Because manifest file was passed an AndroidResourceRule it should be added to the " + "transitive dependencies",ImmutableSet.of(Paths.get("java/src/com/facebook/module/AndroidManifest.xml")),packageableCollection.manifestFiles);
  assertEquals("Because a native library was declared as a dependency, it should be added to the " + "transitive dependencies.",ImmutableSet.of(((NativeLibraryBuildRule)ndkLibrary).getLibraryPath()),packageableCollection.nativeLibsDirectories);
  assertEquals("Because a prebuilt native library  was declared as a dependency (and asset), it should " + "be added to the transitive dependecies.",ImmutableSet.of(((NativeLibraryBuildRule)prebuiltNativeLibraryBuild).getLibraryPath()),packageableCollection.nativeLibAssetsDirectories);
  assertEquals(ImmutableSet.of(Paths.get("debug.pro")),packageableCollection.proguardConfigs);
}
