{
  BuildRuleParams testDepParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","testDep").build()).setType(AppleLibraryDescription.TYPE).build();
  AppleNativeTargetDescriptionArg testDepArg=appleLibraryDescription.createUnpopulatedConstructorArg();
  testDepArg.configs=ImmutableMap.of();
  testDepArg.srcs=ImmutableList.of();
  testDepArg.frameworks=ImmutableSortedSet.of();
  testDepArg.deps=Optional.absent();
  testDepArg.gid=Optional.absent();
  testDepArg.headerPathPrefix=Optional.absent();
  testDepArg.useBuckHeaderMaps=Optional.absent();
  BuildRule testDepRule=appleLibraryDescription.createBuildRule(testDepParams,new BuildRuleResolver(),testDepArg);
  BuildRuleParams libraryParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","lib").build()).setType(AppleLibraryDescription.TYPE).build();
  AppleNativeTargetDescriptionArg libraryArg=appleLibraryDescription.createUnpopulatedConstructorArg();
  libraryArg.configs=ImmutableMap.of();
  libraryArg.srcs=ImmutableList.of();
  libraryArg.frameworks=ImmutableSortedSet.of();
  libraryArg.deps=Optional.of(ImmutableSortedSet.of(testDepRule));
  libraryArg.gid=Optional.absent();
  libraryArg.headerPathPrefix=Optional.absent();
  libraryArg.useBuckHeaderMaps=Optional.absent();
  BuildRule libraryRule=appleLibraryDescription.createBuildRule(libraryParams,new BuildRuleResolver(),libraryArg);
  BuildRuleParams xctestParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","xctest").build()).setDeps(ImmutableSortedSet.of(libraryRule)).setType(AppleBundleDescription.TYPE).build();
  AppleBundleDescription.Arg xctestArg=appleBundleDescription.createUnpopulatedConstructorArg();
  xctestArg.infoPlist=Optional.<SourcePath>of(new TestSourcePath("Info.plist"));
  xctestArg.binary=libraryRule;
  xctestArg.extension=Either.ofLeft(AppleBundleExtension.XCTEST);
  xctestArg.deps=Optional.absent();
  BuildRule xctestRule=appleBundleDescription.createBuildRule(xctestParams,new BuildRuleResolver(),xctestArg);
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","test").build()).setDeps(ImmutableSortedSet.of(xctestRule)).setType(AppleTestDescription.TYPE).build();
  AppleTestDescription.Arg arg=appleTestDescription.createUnpopulatedConstructorArg();
  arg.testBundle=xctestRule;
  arg.contacts=Optional.of(ImmutableSortedSet.<String>of());
  arg.labels=Optional.of(ImmutableSortedSet.<Label>of());
  arg.deps=Optional.of(ImmutableSortedSet.of(xctestRule));
  arg.sourceUnderTest=Optional.of(ImmutableSortedSet.<BuildRule>of());
  BuildRule testRule=appleTestDescription.createBuildRule(params,new BuildRuleResolver(),arg);
  BuildRule rootRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","root").build(),ImmutableSortedSet.<BuildRule>of(),appleLibraryDescription);
  ImmutableMap.Builder<BuildRule,PBXTarget> buildRuleToTargetMapBuilder=ImmutableMap.builder();
  ImmutableMap.Builder<PBXTarget,Path> targetToProjectPathMapBuilder=ImmutableMap.builder();
  PBXTarget testDepTarget=new PBXNativeTarget("testDep");
  testDepTarget.setGlobalID("testDepGID");
  testDepTarget.setProductReference(new PBXFileReference("libDep.a","libDep.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildRuleToTargetMapBuilder.put(testDepRule,testDepTarget);
  PBXTarget testLibraryTarget=new PBXNativeTarget("testLibrary");
  testLibraryTarget.setGlobalID("testLibraryGID");
  testLibraryTarget.setProductReference(new PBXFileReference("lib.a","lib.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildRuleToTargetMapBuilder.put(libraryRule,testLibraryTarget);
  PBXTarget testTarget=new PBXNativeTarget("test");
  testTarget.setGlobalID("testGID");
  testTarget.setProductReference(new PBXFileReference("test.xctest","test.xctest",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildRuleToTargetMapBuilder.put(testRule,testTarget);
  PBXTarget rootTarget=new PBXNativeTarget("root");
  rootTarget.setGlobalID("rootGID");
  rootTarget.setProductReference(new PBXFileReference("root.a","root.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildRuleToTargetMapBuilder.put(rootRule,rootTarget);
  Path projectPath=Paths.get("foo/test.xcodeproj/project.pbxproj");
  targetToProjectPathMapBuilder.put(testTarget,projectPath);
  targetToProjectPathMapBuilder.put(testDepTarget,projectPath);
  targetToProjectPathMapBuilder.put(testLibraryTarget,projectPath);
  targetToProjectPathMapBuilder.put(rootTarget,projectPath);
  SchemeGenerator schemeGenerator=new SchemeGenerator(projectFilesystem,rootRule,ImmutableSet.of(rootRule),ImmutableSet.of(testDepRule,testRule),ImmutableSet.of(testRule),"TestScheme",Paths.get("_gen/Foo.xcworkspace/scshareddata/xcshemes"),SchemeActionType.DEFAULT_CONFIG_NAMES,buildRuleToTargetMapBuilder.build(),targetToProjectPathMapBuilder.build());
  Path schemePath=schemeGenerator.writeScheme();
  String schemeXml=projectFilesystem.readFileIfItExists(schemePath).get();
  System.out.println(schemeXml);
  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
  DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
  Document scheme=dBuilder.parse(projectFilesystem.newFileInputStream(schemePath));
  XPathFactory xpathFactory=XPathFactory.newInstance();
  XPath buildXpath=xpathFactory.newXPath();
  XPathExpression buildExpr=buildXpath.compile("//BuildAction//BuildableReference/@BlueprintIdentifier");
  NodeList buildNodes=(NodeList)buildExpr.evaluate(scheme,XPathConstants.NODESET);
  List<String> expectedBuildOrdering=ImmutableList.of("rootGID","testDepGID","testGID");
  List<String> actualBuildOrdering=Lists.newArrayList();
  for (int i=0; i < buildNodes.getLength(); i++) {
    actualBuildOrdering.add(buildNodes.item(i).getNodeValue());
  }
  assertThat(actualBuildOrdering,equalTo(expectedBuildOrdering));
  XPath textXpath=xpathFactory.newXPath();
  XPathExpression testExpr=textXpath.compile("//TestAction//TestableReference/BuildableReference/@BlueprintIdentifier");
  NodeList testNodes=(NodeList)testExpr.evaluate(scheme,XPathConstants.NODESET);
  List<String> expectedTestOrdering=ImmutableList.of("testGID");
  List<String> actualTestOrdering=Lists.newArrayList();
  for (int i=0; i < testNodes.getLength(); i++) {
    actualTestOrdering.add(testNodes.item(i).getNodeValue());
  }
  assertThat(actualTestOrdering,equalTo(expectedTestOrdering));
}
