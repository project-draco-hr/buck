{
  ImmutableMap.Builder<BuildTarget,PBXTarget> buildTargetToPbxTargetMapBuilder=ImmutableMap.builder();
  ImmutableMap.Builder<PBXTarget,Path> targetToProjectPathMapBuilder=ImmutableMap.builder();
  BuildTarget testDepBuildTarget=BuildTarget.builder("//foo","testDep").build();
  PBXTarget testDepTarget=new PBXNativeTarget("testDep",PBXTarget.ProductType.STATIC_LIBRARY);
  testDepTarget.setGlobalID("testDepGID");
  testDepTarget.setProductReference(new PBXFileReference("libDep.a","libDep.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildTargetToPbxTargetMapBuilder.put(testDepBuildTarget,testDepTarget);
  BuildTarget libraryBuildTarget=BuildTarget.builder("//foo","lib").build();
  PBXTarget testLibraryTarget=new PBXNativeTarget("testLibrary",PBXTarget.ProductType.STATIC_LIBRARY);
  testLibraryTarget.setGlobalID("testLibraryGID");
  testLibraryTarget.setProductReference(new PBXFileReference("lib.a","lib.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildTargetToPbxTargetMapBuilder.put(libraryBuildTarget,testLibraryTarget);
  BuildTarget testBuildTarget=BuildTarget.builder("//foo","test").build();
  PBXTarget testTarget=new PBXNativeTarget("test",PBXTarget.ProductType.UNIT_TEST);
  testTarget.setGlobalID("testGID");
  testTarget.setProductReference(new PBXFileReference("test.xctest","test.xctest",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildTargetToPbxTargetMapBuilder.put(testBuildTarget,testTarget);
  BuildTarget rootBuildTarget=BuildTarget.builder("//foo","root").build();
  PBXTarget rootTarget=new PBXNativeTarget("root",PBXTarget.ProductType.STATIC_LIBRARY);
  rootTarget.setGlobalID("rootGID");
  rootTarget.setProductReference(new PBXFileReference("root.a","root.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildTargetToPbxTargetMapBuilder.put(rootBuildTarget,rootTarget);
  Path projectPath=Paths.get("foo/test.xcodeproj/project.pbxproj");
  targetToProjectPathMapBuilder.put(testTarget,projectPath);
  targetToProjectPathMapBuilder.put(testDepTarget,projectPath);
  targetToProjectPathMapBuilder.put(testLibraryTarget,projectPath);
  targetToProjectPathMapBuilder.put(rootTarget,projectPath);
  SchemeGenerator schemeGenerator=new SchemeGenerator(projectFilesystem,Optional.of(rootBuildTarget),ImmutableSet.of(rootBuildTarget),ImmutableSet.of(testDepBuildTarget,testBuildTarget),ImmutableSet.of(testBuildTarget),"TestScheme",Paths.get("_gen/Foo.xcworkspace/scshareddata/xcshemes"),SchemeActionType.DEFAULT_CONFIG_NAMES,buildTargetToPbxTargetMapBuilder.build(),targetToProjectPathMapBuilder.build());
  Path schemePath=schemeGenerator.writeScheme();
  String schemeXml=projectFilesystem.readFileIfItExists(schemePath).get();
  System.out.println(schemeXml);
  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
  DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
  Document scheme=dBuilder.parse(projectFilesystem.newFileInputStream(schemePath));
  XPathFactory xpathFactory=XPathFactory.newInstance();
  XPath buildXpath=xpathFactory.newXPath();
  XPathExpression buildExpr=buildXpath.compile("//BuildAction//BuildableReference/@BlueprintIdentifier");
  NodeList buildNodes=(NodeList)buildExpr.evaluate(scheme,XPathConstants.NODESET);
  List<String> expectedBuildOrdering=ImmutableList.of("rootGID","testDepGID","testGID");
  List<String> actualBuildOrdering=Lists.newArrayList();
  for (int i=0; i < buildNodes.getLength(); i++) {
    actualBuildOrdering.add(buildNodes.item(i).getNodeValue());
  }
  assertThat(actualBuildOrdering,equalTo(expectedBuildOrdering));
  XPath textXpath=xpathFactory.newXPath();
  XPathExpression testExpr=textXpath.compile("//TestAction//TestableReference/BuildableReference/@BlueprintIdentifier");
  NodeList testNodes=(NodeList)testExpr.evaluate(scheme,XPathConstants.NODESET);
  List<String> expectedTestOrdering=ImmutableList.of("testGID");
  List<String> actualTestOrdering=Lists.newArrayList();
  for (int i=0; i < testNodes.getLength(); i++) {
    actualTestOrdering.add(testNodes.item(i).getNodeValue());
  }
  assertThat(actualTestOrdering,equalTo(expectedTestOrdering));
}
