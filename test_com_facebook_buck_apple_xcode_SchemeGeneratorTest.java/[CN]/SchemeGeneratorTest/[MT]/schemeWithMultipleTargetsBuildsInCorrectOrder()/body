{
  BuildRule rootRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","root").build(),ImmutableSortedSet.<BuildRule>of(),iosLibraryDescription);
  BuildRule leftRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","left").build(),ImmutableSortedSet.of(rootRule),iosLibraryDescription);
  BuildRule rightRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","right").build(),ImmutableSortedSet.of(rootRule),iosLibraryDescription);
  BuildRule childRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","child").build(),ImmutableSortedSet.of(leftRule,rightRule),iosLibraryDescription);
  PartialGraph partialGraph=createPartialGraphFromBuildRules(ImmutableSet.<BuildRule>of(rootRule,leftRule,rightRule,childRule));
  SchemeGenerator schemeGenerator=new SchemeGenerator(projectFilesystem,partialGraph,rootRule,ImmutableSet.of(rootRule,leftRule,rightRule,childRule),"TestScheme",Paths.get("_gen/Foo.xcworkspace/scshareddata/xcshemes"),SchemeActionType.DEFAULT_CONFIG_NAMES);
  PBXTarget rootTarget=new PBXNativeTarget("rootRule");
  rootTarget.setGlobalID("rootGID");
  schemeGenerator.addRuleToTargetMap(rootRule,rootTarget);
  PBXTarget leftTarget=new PBXNativeTarget("leftRule");
  leftTarget.setGlobalID("leftGID");
  schemeGenerator.addRuleToTargetMap(leftRule,leftTarget);
  PBXTarget rightTarget=new PBXNativeTarget("rightRule");
  rightTarget.setGlobalID("rightGID");
  schemeGenerator.addRuleToTargetMap(rightRule,rightTarget);
  PBXTarget childTarget=new PBXNativeTarget("childRule");
  childTarget.setGlobalID("childGID");
  schemeGenerator.addRuleToTargetMap(childRule,childTarget);
  Path pbxprojectPath=Paths.get("foo/Foo.xcodeproj/project.pbxproj");
  schemeGenerator.addTargetToProjectPathMap(rootTarget,pbxprojectPath);
  schemeGenerator.addTargetToProjectPathMap(leftTarget,pbxprojectPath);
  schemeGenerator.addTargetToProjectPathMap(rightTarget,pbxprojectPath);
  schemeGenerator.addTargetToProjectPathMap(childTarget,pbxprojectPath);
  Path schemePath=schemeGenerator.writeScheme();
  String schemeXml=projectFilesystem.readFileIfItExists(schemePath).get();
  System.out.println(schemeXml);
  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
  DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
  Document scheme=dBuilder.parse(projectFilesystem.newFileInputStream(schemePath));
  XPathFactory xpathFactory=XPathFactory.newInstance();
  XPath xpath=xpathFactory.newXPath();
  XPathExpression expr=xpath.compile("//BuildAction//BuildableReference/@BlueprintIdentifier");
  NodeList nodes=(NodeList)expr.evaluate(scheme,XPathConstants.NODESET);
  List<String> expectedOrdering1=ImmutableList.of("rootGID","leftGID","rightGID","childGID");
  List<String> expectedOrdering2=ImmutableList.of("rootGID","rightGID","leftGID","childGID");
  List<String> actualOrdering=Lists.newArrayList();
  for (int i=0; i < nodes.getLength(); i++) {
    actualOrdering.add(nodes.item(i).getNodeValue());
  }
  assertThat(actualOrdering,either(equalTo(expectedOrdering1)).or(equalTo(expectedOrdering2)));
}
