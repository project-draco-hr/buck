{
  BuildRule rootRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","root").build(),ImmutableSortedSet.<BuildRule>of(),appleLibraryDescription);
  BuildRule leftRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","left").build(),ImmutableSortedSet.of(rootRule),appleLibraryDescription);
  BuildRule rightRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","right").build(),ImmutableSortedSet.of(rootRule),appleLibraryDescription);
  BuildRule childRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","child").build(),ImmutableSortedSet.of(leftRule,rightRule),appleLibraryDescription);
  ImmutableMap.Builder<BuildRule,PBXTarget> buildRuleToTargetMapBuilder=ImmutableMap.builder();
  ImmutableMap.Builder<PBXTarget,Path> targetToProjectPathMapBuilder=ImmutableMap.builder();
  PBXTarget rootTarget=new PBXNativeTarget("rootRule",PBXTarget.ProductType.STATIC_LIBRARY);
  rootTarget.setGlobalID("rootGID");
  rootTarget.setProductReference(new PBXFileReference("root.a","root.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildRuleToTargetMapBuilder.put(rootRule,rootTarget);
  PBXTarget leftTarget=new PBXNativeTarget("leftRule",PBXTarget.ProductType.STATIC_LIBRARY);
  leftTarget.setGlobalID("leftGID");
  leftTarget.setProductReference(new PBXFileReference("left.a","left.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildRuleToTargetMapBuilder.put(leftRule,leftTarget);
  PBXTarget rightTarget=new PBXNativeTarget("rightRule",PBXTarget.ProductType.STATIC_LIBRARY);
  rightTarget.setGlobalID("rightGID");
  rightTarget.setProductReference(new PBXFileReference("right.a","right.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildRuleToTargetMapBuilder.put(rightRule,rightTarget);
  PBXTarget childTarget=new PBXNativeTarget("childRule",PBXTarget.ProductType.STATIC_LIBRARY);
  childTarget.setGlobalID("childGID");
  childTarget.setProductReference(new PBXFileReference("child.a","child.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildRuleToTargetMapBuilder.put(childRule,childTarget);
  Path pbxprojectPath=Paths.get("foo/Foo.xcodeproj/project.pbxproj");
  targetToProjectPathMapBuilder.put(rootTarget,pbxprojectPath);
  targetToProjectPathMapBuilder.put(leftTarget,pbxprojectPath);
  targetToProjectPathMapBuilder.put(rightTarget,pbxprojectPath);
  targetToProjectPathMapBuilder.put(childTarget,pbxprojectPath);
  SchemeGenerator schemeGenerator=new SchemeGenerator(projectFilesystem,childRule,ImmutableSet.of(rootRule,leftRule,rightRule,childRule),ImmutableSet.<BuildRule>of(),ImmutableSet.<BuildRule>of(),"TestScheme",Paths.get("_gen/Foo.xcworkspace/scshareddata/xcshemes"),SchemeActionType.DEFAULT_CONFIG_NAMES,buildRuleToTargetMapBuilder.build(),targetToProjectPathMapBuilder.build());
  Path schemePath=schemeGenerator.writeScheme();
  String schemeXml=projectFilesystem.readFileIfItExists(schemePath).get();
  System.out.println(schemeXml);
  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
  DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
  Document scheme=dBuilder.parse(projectFilesystem.newFileInputStream(schemePath));
  XPathFactory xpathFactory=XPathFactory.newInstance();
  XPath xpath=xpathFactory.newXPath();
  XPathExpression expr=xpath.compile("//BuildAction//BuildableReference/@BlueprintIdentifier");
  NodeList nodes=(NodeList)expr.evaluate(scheme,XPathConstants.NODESET);
  List<String> expectedOrdering=ImmutableList.of("rootGID","leftGID","rightGID","childGID");
  List<String> actualOrdering=Lists.newArrayList();
  for (int i=0; i < nodes.getLength(); i++) {
    actualOrdering.add(nodes.item(i).getNodeValue());
  }
  assertThat(actualOrdering,equalTo(expectedOrdering));
}
