{
  BuildRule xcodeNativeRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","xcode-native").build(),ImmutableSortedSet.<BuildRule>of(),xcodeNativeDescription);
  BuildRule rootRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","root").build(),ImmutableSortedSet.of(xcodeNativeRule),appleLibraryDescription);
  PartialGraph partialGraph=createPartialGraphFromBuildRules(ImmutableSet.of(rootRule));
  ImmutableMap.Builder<BuildRule,PBXTarget> buildRuleToTargetMapBuilder=ImmutableMap.builder();
  ImmutableMap.Builder<PBXTarget,Path> targetToProjectPathMapBuilder=ImmutableMap.builder();
  PBXTarget rootTarget=new PBXNativeTarget("root");
  rootTarget.setGlobalID("rootGID");
  rootTarget.setProductReference(new PBXFileReference("root.a","root.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildRuleToTargetMapBuilder.put(rootRule,rootTarget);
  PBXTarget xcodeNativeTarget=new PBXNativeTarget("xcode-native");
  xcodeNativeTarget.setGlobalID("xcode-nativeGID");
  xcodeNativeTarget.setProductReference(new PBXFileReference("xcode-native.a","xcode-native.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildRuleToTargetMapBuilder.put(xcodeNativeRule,xcodeNativeTarget);
  Path projectPath=Paths.get("foo/Foo.xcodeproj/project.pbxproj");
  targetToProjectPathMapBuilder.put(rootTarget,projectPath);
  Path nativeProjectPath=Paths.get("foo/XcodeNative.xcodeproj/project.pbxproj");
  targetToProjectPathMapBuilder.put(xcodeNativeTarget,nativeProjectPath);
  SchemeGenerator schemeGenerator=new SchemeGenerator(projectFilesystem,partialGraph,rootRule,ImmutableSet.of(rootRule,xcodeNativeRule),ImmutableSet.<BuildRule>of(),"TestScheme",Paths.get("_gen/Foo.xcworkspace/scshareddata/xcshemes"),SchemeActionType.DEFAULT_CONFIG_NAMES,buildRuleToTargetMapBuilder.build(),targetToProjectPathMapBuilder.build());
  Path schemePath=schemeGenerator.writeScheme();
  String schemeXml=projectFilesystem.readFileIfItExists(schemePath).get();
  System.out.println(schemeXml);
  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
  DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
  Document scheme=dBuilder.parse(projectFilesystem.newFileInputStream(schemePath));
  XPathFactory xpathFactory=XPathFactory.newInstance();
  XPath xpath=xpathFactory.newXPath();
  XPathExpression expr=xpath.compile("//BuildAction//BuildableReference/@BlueprintIdentifier");
  NodeList nodes=(NodeList)expr.evaluate(scheme,XPathConstants.NODESET);
  List<String> expectedOrdering=ImmutableList.of("xcode-nativeGID","rootGID");
  List<String> actualOrdering=Lists.newArrayList();
  for (int i=0; i < nodes.getLength(); i++) {
    actualOrdering.add(nodes.item(i).getNodeValue());
  }
  assertThat(actualOrdering,equalTo(expectedOrdering));
}
