{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRuleParams libraryParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","lib").build()).setType(AppleLibraryDescription.TYPE).build();
  AppleNativeTargetDescriptionArg libraryArg=appleLibraryDescription.createUnpopulatedConstructorArg();
  libraryArg.configs=Optional.of(ImmutableMap.<String,ImmutableList<Either<SourcePath,ImmutableMap<String,String>>>>of());
  libraryArg.srcs=Optional.of(ImmutableList.<AppleSource>of());
  libraryArg.frameworks=Optional.of(ImmutableSortedSet.<String>of());
  libraryArg.weakFrameworks=Optional.of(ImmutableSortedSet.<String>of());
  libraryArg.deps=Optional.absent();
  libraryArg.gid=Optional.absent();
  libraryArg.headerPathPrefix=Optional.absent();
  libraryArg.useBuckHeaderMaps=Optional.absent();
  BuildRule libraryRule=appleLibraryDescription.createBuildRule(libraryParams,resolver,libraryArg);
  resolver.addToIndex(libraryRule);
  BuildRuleParams xctestParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","xctest").build()).setDeps(ImmutableSortedSet.of(libraryRule)).setType(AppleBundleDescription.TYPE).build();
  AppleBundleDescription.Arg xctestArg=appleBundleDescription.createUnpopulatedConstructorArg();
  xctestArg.infoPlist=Optional.<SourcePath>of(new TestSourcePath("Info.plist"));
  xctestArg.binary=libraryRule;
  xctestArg.extension=Either.ofLeft(AppleBundleExtension.XCTEST);
  xctestArg.deps=Optional.absent();
  BuildRule xctestRule=appleBundleDescription.createBuildRule(xctestParams,resolver,xctestArg);
  resolver.addToIndex(xctestRule);
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","test").build()).setDeps(ImmutableSortedSet.of(xctestRule)).setType(AppleTestDescription.TYPE).build();
  AppleTestDescription.Arg arg=appleTestDescription.createUnpopulatedConstructorArg();
  arg.testBundle=xctestRule;
  arg.contacts=Optional.of(ImmutableSortedSet.<String>of());
  arg.labels=Optional.of(ImmutableSortedSet.<Label>of());
  arg.deps=Optional.of(ImmutableSortedSet.of(xctestRule));
  arg.sourceUnderTest=Optional.of(ImmutableSortedSet.of(libraryRule));
  BuildRule testRule=appleTestDescription.createBuildRule(params,resolver,arg);
  resolver.addToIndex(testRule);
  ImmutableMap.Builder<BuildRule,PBXTarget> buildRuleToTargetMapBuilder=ImmutableMap.builder();
  ImmutableMap.Builder<PBXTarget,Path> targetToProjectPathMapBuilder=ImmutableMap.builder();
  PBXTarget testLibraryTarget=new PBXNativeTarget("testLibrary",PBXTarget.ProductType.STATIC_LIBRARY);
  testLibraryTarget.setGlobalID("testLibraryGID");
  testLibraryTarget.setProductReference(new PBXFileReference("lib.a","lib.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildRuleToTargetMapBuilder.put(libraryRule,testLibraryTarget);
  PBXTarget testTarget=new PBXNativeTarget("testRule",PBXTarget.ProductType.STATIC_LIBRARY);
  testTarget.setGlobalID("testGID");
  testTarget.setProductReference(new PBXFileReference("test.a","test.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildRuleToTargetMapBuilder.put(testRule,testTarget);
  PBXTarget testBundleTarget=new PBXNativeTarget("testBundleRule",PBXTarget.ProductType.UNIT_TEST);
  testBundleTarget.setGlobalID("testBundleGID");
  testBundleTarget.setProductReference(new PBXFileReference("test.xctest","test.xctest",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildRuleToTargetMapBuilder.put(xctestRule,testBundleTarget);
  Path pbxprojectPath=Paths.get("foo/Foo.xcodeproj/project.pbxproj");
  targetToProjectPathMapBuilder.put(testLibraryTarget,pbxprojectPath);
  targetToProjectPathMapBuilder.put(testTarget,pbxprojectPath);
  targetToProjectPathMapBuilder.put(testBundleTarget,pbxprojectPath);
  SchemeGenerator schemeGenerator=new SchemeGenerator(projectFilesystem,Optional.<BuildRule>absent(),ImmutableSet.<BuildRule>of(),ImmutableSet.of(xctestRule),ImmutableSet.of(xctestRule),"TestScheme",Paths.get("_gen/Foo.xcworkspace/scshareddata/xcshemes"),SchemeActionType.DEFAULT_CONFIG_NAMES,buildRuleToTargetMapBuilder.build(),targetToProjectPathMapBuilder.build());
  Path schemePath=schemeGenerator.writeScheme();
  String schemeXml=projectFilesystem.readFileIfItExists(schemePath).get();
  System.out.println(schemeXml);
  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
  DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
  Document scheme=dBuilder.parse(projectFilesystem.newFileInputStream(schemePath));
  XPathFactory xpathFactory=XPathFactory.newInstance();
  XPath buildActionXpath=xpathFactory.newXPath();
  XPathExpression buildActionExpr=buildActionXpath.compile("//BuildAction//BuildableReference/@BlueprintIdentifier");
  NodeList buildActionNodes=(NodeList)buildActionExpr.evaluate(scheme,XPathConstants.NODESET);
  List<String> expectedOrdering=ImmutableList.of("testBundleGID");
  List<String> actualOrdering=Lists.newArrayList();
  for (int i=0; i < buildActionNodes.getLength(); i++) {
    actualOrdering.add(buildActionNodes.item(i).getNodeValue());
  }
  assertThat(actualOrdering,equalTo(expectedOrdering));
  XPath testActionXpath=xpathFactory.newXPath();
  XPathExpression testActionExpr=testActionXpath.compile("//TestAction//BuildableReference/@BlueprintIdentifier");
  String testActionBlueprintIdentifier=(String)testActionExpr.evaluate(scheme,XPathConstants.STRING);
  assertThat(testActionBlueprintIdentifier,equalTo("testBundleGID"));
  XPath launchActionXpath=xpathFactory.newXPath();
  XPathExpression launchActionExpr=launchActionXpath.compile("//LaunchAction//BuildableReference/@BlueprintIdentifier");
  String launchActionBlueprintIdentifier=(String)launchActionExpr.evaluate(scheme,XPathConstants.STRING);
  assertThat(launchActionBlueprintIdentifier,equalTo(""));
  XPath launchActionBuildConfigurationXpath=xpathFactory.newXPath();
  XPathExpression launchActionBuildConfigurationExpr=launchActionBuildConfigurationXpath.compile("//LaunchAction//@buildConfiguration");
  String launchActionBuildConfigurationBlueprintIdentifier=(String)launchActionBuildConfigurationExpr.evaluate(scheme,XPathConstants.STRING);
  assertThat(launchActionBuildConfigurationBlueprintIdentifier,equalTo("Debug"));
  XPath profileActionXpath=xpathFactory.newXPath();
  XPathExpression profileActionExpr=profileActionXpath.compile("//ProfileAction//BuildableReference/@BlueprintIdentifier");
  String profileActionBlueprintIdentifier=(String)profileActionExpr.evaluate(scheme,XPathConstants.STRING);
  assertThat(profileActionBlueprintIdentifier,equalTo(""));
  XPath profileActionBuildConfigurationXpath=xpathFactory.newXPath();
  XPathExpression profileActionBuildConfigurationExpr=profileActionBuildConfigurationXpath.compile("//ProfileAction//@buildConfiguration");
  String profileActionBuildConfigurationBlueprintIdentifier=(String)profileActionBuildConfigurationExpr.evaluate(scheme,XPathConstants.STRING);
  assertThat(profileActionBuildConfigurationBlueprintIdentifier,equalTo("Release"));
  XPath analyzeActionBuildConfigurationXpath=xpathFactory.newXPath();
  XPathExpression analyzeActionBuildConfigurationExpr=analyzeActionBuildConfigurationXpath.compile("//AnalyzeAction//@buildConfiguration");
  String analyzeActionBuildConfigurationBlueprintIdentifier=(String)analyzeActionBuildConfigurationExpr.evaluate(scheme,XPathConstants.STRING);
  assertThat(analyzeActionBuildConfigurationBlueprintIdentifier,equalTo("Debug"));
  XPath archiveActionBuildConfigurationXpath=xpathFactory.newXPath();
  XPathExpression archiveActionBuildConfigurationExpr=archiveActionBuildConfigurationXpath.compile("//ArchiveAction//@buildConfiguration");
  String archiveActionBuildConfigurationBlueprintIdentifier=(String)archiveActionBuildConfigurationExpr.evaluate(scheme,XPathConstants.STRING);
  assertThat(archiveActionBuildConfigurationBlueprintIdentifier,equalTo("Release"));
}
