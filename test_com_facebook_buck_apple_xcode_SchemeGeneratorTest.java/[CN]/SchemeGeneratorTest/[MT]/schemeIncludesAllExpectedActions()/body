{
  BuildRule rootRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","root").build(),ImmutableSortedSet.<BuildRule>of(),iosLibraryDescription);
  BuildRule testRule=createBuildRuleWithDefaults(BuildTarget.builder("//foo","test").build(),ImmutableSortedSet.of(rootRule),iosTestDescription);
  PartialGraph partialGraph=createPartialGraphFromBuildRules(ImmutableSet.<BuildRule>of(rootRule,testRule));
  ImmutableMap.Builder<BuildRule,PBXTarget> buildRuleToTargetMapBuilder=ImmutableMap.builder();
  ImmutableMap.Builder<PBXTarget,Path> targetToProjectPathMapBuilder=ImmutableMap.builder();
  PBXTarget rootTarget=new PBXNativeTarget("rootRule");
  rootTarget.setGlobalID("rootGID");
  rootTarget.setProductReference(new PBXFileReference("root.a","root.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildRuleToTargetMapBuilder.put(rootRule,rootTarget);
  PBXTarget testTarget=new PBXNativeTarget("testRule");
  testTarget.setGlobalID("testGID");
  testTarget.setProductReference(new PBXFileReference("test.a","test.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  buildRuleToTargetMapBuilder.put(testRule,testTarget);
  Path pbxprojectPath=Paths.get("foo/Foo.xcodeproj/project.pbxproj");
  targetToProjectPathMapBuilder.put(rootTarget,pbxprojectPath);
  targetToProjectPathMapBuilder.put(testTarget,pbxprojectPath);
  SchemeGenerator schemeGenerator=new SchemeGenerator(projectFilesystem,partialGraph,rootRule,ImmutableSet.of(rootRule),ImmutableSet.of(testRule),"TestScheme",Paths.get("_gen/Foo.xcworkspace/scshareddata/xcshemes"),SchemeActionType.DEFAULT_CONFIG_NAMES,buildRuleToTargetMapBuilder.build(),targetToProjectPathMapBuilder.build());
  Path schemePath=schemeGenerator.writeScheme();
  String schemeXml=projectFilesystem.readFileIfItExists(schemePath).get();
  System.out.println(schemeXml);
  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
  DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
  Document scheme=dBuilder.parse(projectFilesystem.newFileInputStream(schemePath));
  XPathFactory xpathFactory=XPathFactory.newInstance();
  XPath buildActionXpath=xpathFactory.newXPath();
  XPathExpression buildActionExpr=buildActionXpath.compile("//BuildAction//BuildableReference/@BlueprintIdentifier");
  NodeList buildActionNodes=(NodeList)buildActionExpr.evaluate(scheme,XPathConstants.NODESET);
  List<String> expectedOrdering=ImmutableList.of("rootGID","testGID");
  List<String> actualOrdering=Lists.newArrayList();
  for (int i=0; i < buildActionNodes.getLength(); i++) {
    actualOrdering.add(buildActionNodes.item(i).getNodeValue());
  }
  assertThat(actualOrdering,equalTo(expectedOrdering));
  XPath testActionXpath=xpathFactory.newXPath();
  XPathExpression testActionExpr=testActionXpath.compile("//TestAction//BuildableReference/@BlueprintIdentifier");
  String testActionBlueprintIdentifier=(String)testActionExpr.evaluate(scheme,XPathConstants.STRING);
  assertThat(testActionBlueprintIdentifier,equalTo("testGID"));
  XPath launchActionXpath=xpathFactory.newXPath();
  XPathExpression launchActionExpr=launchActionXpath.compile("//LaunchAction//BuildableReference/@BlueprintIdentifier");
  String launchActionBlueprintIdentifier=(String)launchActionExpr.evaluate(scheme,XPathConstants.STRING);
  assertThat(launchActionBlueprintIdentifier,equalTo("rootGID"));
  XPath profileActionXpath=xpathFactory.newXPath();
  XPathExpression profileActionExpr=profileActionXpath.compile("//ProfileAction//BuildableReference/@BlueprintIdentifier");
  String profileActionBlueprintIdentifier=(String)profileActionExpr.evaluate(scheme,XPathConstants.STRING);
  assertThat(profileActionBlueprintIdentifier,equalTo("rootGID"));
}
