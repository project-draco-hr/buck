{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  CxxPlatform cxxPlatform=cxxPlatforms.getValue(params.getBuildTarget()).or(defaultCxxPlatform);
  Linker.LinkableDepType depType=getLinkStyle(params.getBuildTarget(),args);
  BuildTarget binaryTarget=params.getBuildTarget().withFlavors(cxxPlatform.getFlavor(),ImmutableFlavor.of("binary"));
  ImmutableList.Builder<String> linkFlagsBuilder=ImmutableList.builder();
  ImmutableList.Builder<com.facebook.buck.rules.args.Arg> linkArgsBuilder=ImmutableList.builder();
  CommandTool.Builder executableBuilder=new CommandTool.Builder();
  executableBuilder.addArg(new SourcePathArg(pathResolver,new BuildTargetSourcePath(binaryTarget)));
  if (depType == Linker.LinkableDepType.SHARED) {
    SymlinkTree sharedLibraries=resolver.addToIndex(CxxDescriptionEnhancer.createSharedLibrarySymlinkTree(params,pathResolver,cxxPlatform,Predicates.instanceOf(NativeLinkable.class)));
    Path absBinaryDir=params.getBuildTarget().getCellPath().resolve(HaskellLinkRule.getOutputDir(binaryTarget));
    linkFlagsBuilder.addAll(MoreIterables.zipAndConcat(Iterables.cycle("-optl"),Linkers.iXlinker("-rpath",String.format("%s/%s",cxxPlatform.getLd().resolve(resolver).origin(),absBinaryDir.relativize(sharedLibraries.getRoot()).toString()))));
    executableBuilder.addDep(sharedLibraries);
    executableBuilder.addInputs(sharedLibraries.getLinks().values());
  }
  HaskellCompileRule compileRule=resolver.addToIndex(HaskellDescriptionUtils.requireCompileRule(params,resolver,pathResolver,cxxPlatform,haskellBuckConfig,depType == Linker.LinkableDepType.STATIC ? CxxSourceRuleFactory.PicType.PDC : CxxSourceRuleFactory.PicType.PIC,args.main,args.srcs.or(ImmutableList.<SourcePath>of())));
  linkArgsBuilder.add(GlobArg.of(pathResolver,compileRule.getObjectDirPath(),"**/*.o"));
  ImmutableList<String> linkFlags=linkFlagsBuilder.build();
  ImmutableList<com.facebook.buck.rules.args.Arg> linkArgs=linkArgsBuilder.build();
  final CommandTool executable=executableBuilder.build();
  final HaskellLinkRule linkRule=resolver.addToIndex(HaskellDescriptionUtils.createLinkRule(binaryTarget,params,resolver,pathResolver,cxxPlatform,haskellBuckConfig,Linker.LinkType.EXECUTABLE,linkFlags,linkArgs,FluentIterable.from(params.getDeps()).filter(NativeLinkable.class),depType));
  return new BinaryWrapperRule(params,pathResolver){
    @Override public Tool getExecutableCommand(){
      return executable;
    }
    @Override public Path getPathToOutput(){
      return linkRule.getPathToOutput();
    }
  }
;
}
