{
  Document doc;
  try {
    doc=XmlDomParser.parse(results);
  }
 catch (  SAXException e) {
    return ImmutableList.of(getProgramFailureSummary("test program aborted before finishing",getProjectFilesystem().readFileIfItExists(output).or("")));
  }
  ImmutableList.Builder<TestResultSummary> summariesBuilder=ImmutableList.builder();
  Optional<String> currentTest=Optional.absent();
  Map<String,ChunkAccumulator> stdout=Maps.newHashMap();
  CharsetDecoder decoder=Charsets.UTF_8.newDecoder();
  decoder.onMalformedInput(CodingErrorAction.IGNORE);
  try (InputStream input=getProjectFilesystem().newFileInputStream(output);BufferedReader reader=new BufferedReader(new InputStreamReader(input,decoder))){
    String line;
    while ((line=reader.readLine()) != null) {
      Matcher matcher;
      if ((matcher=START.matcher(line.trim())).matches()) {
        String test=matcher.group(1);
        currentTest=Optional.of(test);
        stdout.put(test,new ChunkAccumulator(Charsets.UTF_8,maxTestOutputSize));
      }
 else       if (END.matcher(line.trim()).matches()) {
        currentTest=Optional.absent();
      }
 else       if (currentTest.isPresent()) {
        stdout.get(currentTest.get()).append(line);
      }
    }
  }
   NodeList testcases=doc.getElementsByTagName("testcase");
  for (int index=0; index < testcases.getLength(); index++) {
    Node testcase=testcases.item(index);
    NamedNodeMap attributes=testcase.getAttributes();
    String testCase=attributes.getNamedItem("classname").getNodeValue();
    String testName=attributes.getNamedItem("name").getNodeValue();
    String testFull=String.format("%s.%s",testCase,testName);
    Double time=Double.parseDouble(attributes.getNamedItem("time").getNodeValue()) * 1000;
    ResultType type=ResultType.SUCCESS;
    String message="";
    if (testcase.getChildNodes().getLength() > 0) {
      Node failure=testcase.getChildNodes().item(1);
      type=ResultType.FAILURE;
      message=failure.getAttributes().getNamedItem("message").getNodeValue();
    }
 else     if (attributes.getNamedItem("status").getNodeValue().equals(NOTRUN)) {
      type=ResultType.ASSUMPTION_VIOLATION;
      message="DISABLED";
    }
    String testStdout="";
    if (stdout.containsKey(testFull)) {
      testStdout=Joiner.on(System.lineSeparator()).join(stdout.get(testFull).getChunks());
    }
    summariesBuilder.add(new TestResultSummary(testCase,testName,type,time.longValue(),message,"",testStdout,""));
  }
  return summariesBuilder.build();
}
