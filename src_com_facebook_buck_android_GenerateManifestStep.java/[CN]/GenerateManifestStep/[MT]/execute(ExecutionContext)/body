{
  if (skeletonManifestPath.getNameCount() == 0) {
    throw new HumanReadableException("Skeleton manifest filepath is missing");
  }
  if (outManifestPath.getNameCount() == 0) {
    throw new HumanReadableException("Output Manifest filepath is missing");
  }
  outManifestPath=filesystem.resolve(outManifestPath);
  try {
    Files.createParentDirs(outManifestPath.toFile());
  }
 catch (  IOException e) {
    e.printStackTrace(context.getStdErr());
    return 1;
  }
  List<File> libraryManifestFiles=Lists.newArrayList();
  for (  Path path : libraryManifestPaths) {
    Path manifestPath=filesystem.getPathForRelativeExistingPath(path).toAbsolutePath();
    libraryManifestFiles.add(manifestPath.toFile());
  }
  File skeletonManifestFile=filesystem.getPathForRelativeExistingPath(skeletonManifestPath).toAbsolutePath().toFile();
  ICallback callback=new ICallback(){
    @Override public int queryCodenameApiLevel(    @NonNull String codename){
      return BASE_SDK_LEVEL;
    }
  }
;
  IMergerLog log=MergerLog.wrapSdkLog(new BuckEventAndroidLogger(context.getBuckEventBus()));
  ManifestMerger merger=new ManifestMerger(log,callback);
  File outManifestFile=outManifestPath.toFile();
  if (!merger.process(outManifestFile,skeletonManifestFile,Iterables.toArray(libraryManifestFiles,File.class))) {
    throw new HumanReadableException("Error generating manifest file");
  }
  if (context.getPlatform() == Platform.WINDOWS) {
    try {
      String xmlText=Files.toString(outManifestFile,Charsets.UTF_8);
      xmlText=xmlText.replace("\r\n","\n");
      Files.write(xmlText.getBytes(Charsets.UTF_8),outManifestFile);
    }
 catch (    IOException e) {
      throw new HumanReadableException("Error converting line endings of manifest file");
    }
  }
  return 0;
}
