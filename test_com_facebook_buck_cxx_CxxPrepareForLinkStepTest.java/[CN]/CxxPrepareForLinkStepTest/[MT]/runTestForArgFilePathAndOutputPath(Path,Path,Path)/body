{
  ExecutionContext context=TestExecutionContext.newInstance();
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer()));
  ImmutableList<Arg> args=ImmutableList.of(new StringArg("-rpath"),new StringArg("hello"),new StringArg("a.o"),FileListableLinkerInputArg.withSourcePathArg(new SourcePathArg(pathResolver,new FakeSourcePath("libb.a"))),new StringArg("-lsysroot"),new StringArg("/Library/Application Support/blabla"),new StringArg("-F/System/Frameworks"),new StringArg("-L/System/libraries"),new StringArg("-lz"));
  CxxPrepareForLinkStep step=new CxxPrepareForLinkStep(argFilePath,fileListPath,ImmutableList.<Arg>of(new StringArg("-filelist"),new StringArg(fileListPath.toString())),output,args);
  step.execute(context);
  assertThat(Files.exists(argFilePath),Matchers.equalTo(true));
  ImmutableList<String> expectedArgFileContents=ImmutableList.<String>builder().add("-o",output.toString()).add("-rpath").add("hello").add("a.o").add("-lsysroot").add("\"/Library/Application Support/blabla\"").add("-F/System/Frameworks").add("-L/System/libraries").add("-lz").add("-filelist").add(fileListPath.toString()).build();
  ImmutableList<String> expectedFileListContents=ImmutableList.of(Paths.get("libb.a").toAbsolutePath().toString());
  checkContentsOfFile(argFilePath,expectedArgFileContents);
  checkContentsOfFile(fileListPath,expectedFileListContents);
  Files.deleteIfExists(argFilePath);
  Files.deleteIfExists(fileListPath);
}
