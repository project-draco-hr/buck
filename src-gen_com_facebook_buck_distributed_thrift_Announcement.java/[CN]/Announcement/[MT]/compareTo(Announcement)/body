{
  if (!getClass().equals(other.getClass())) {
    return getClass().getName().compareTo(other.getClass().getName());
  }
  int lastComparison=0;
  lastComparison=Boolean.valueOf(isSetErrorMessage()).compareTo(other.isSetErrorMessage());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetErrorMessage()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.errorMessage,other.errorMessage);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetSolutionMessage()).compareTo(other.isSetSolutionMessage());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetSolutionMessage()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.solutionMessage,other.solutionMessage);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetBuckVersions()).compareTo(other.isSetBuckVersions());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetBuckVersions()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.buckVersions,other.buckVersions);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  lastComparison=Boolean.valueOf(isSetRepositories()).compareTo(other.isSetRepositories());
  if (lastComparison != 0) {
    return lastComparison;
  }
  if (isSetRepositories()) {
    lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.repositories,other.repositories);
    if (lastComparison != 0) {
      return lastComparison;
    }
  }
  return 0;
}
