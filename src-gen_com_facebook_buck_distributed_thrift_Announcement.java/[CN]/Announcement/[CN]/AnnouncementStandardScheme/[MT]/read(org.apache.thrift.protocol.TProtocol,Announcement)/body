{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
        struct.errorMessage=iprot.readString();
        struct.setErrorMessageIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
    struct.solutionMessage=iprot.readString();
    struct.setSolutionMessageIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
  org.apache.thrift.protocol.TList _list16=iprot.readListBegin();
  struct.buckVersions=new ArrayList<String>(_list16.size);
  String _elem17;
  for (int _i18=0; _i18 < _list16.size; ++_i18) {
    _elem17=iprot.readString();
    struct.buckVersions.add(_elem17);
  }
  iprot.readListEnd();
}
struct.setBuckVersionsIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
org.apache.thrift.protocol.TList _list19=iprot.readListBegin();
struct.repositories=new ArrayList<String>(_list19.size);
String _elem20;
for (int _i21=0; _i21 < _list19.size; ++_i21) {
_elem20=iprot.readString();
struct.repositories.add(_elem20);
}
iprot.readListEnd();
}
struct.setRepositoriesIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
