{
  BuildRule ruleA=createRule("A");
  BuildRule ruleB=createRule("B");
  BuildRule ruleC=createRule("C");
  BuildRule ruleD=createRule("D");
  BuildRule ruleE=createRule("E");
  BuildRule ruleF=createRule("F",ruleE,ruleD);
  BuildRule ruleG=createRule("G");
  BuildRule ruleH=createRule("H",ruleC,ruleB);
  BuildRule ruleI=createRule("I",ruleA);
  BuildRule initialRule=createRule("J",ruleF,ruleG,ruleH,ruleI);
  final List<BuildRule> buildRuleTraversalOrder=Lists.newArrayList();
  new AbstractDependencyVisitor(initialRule){
    @Override public boolean visit(    BuildRule rule){
      buildRuleTraversalOrder.add(rule);
      return true;
    }
  }
.start();
  assertEquals("Dependencies should be explored depth-first, using lexicographic ordering to break ties",ImmutableList.of(initialRule,ruleF,ruleG,ruleH,ruleI,ruleD,ruleE,ruleB,ruleC,ruleA),buildRuleTraversalOrder);
}
