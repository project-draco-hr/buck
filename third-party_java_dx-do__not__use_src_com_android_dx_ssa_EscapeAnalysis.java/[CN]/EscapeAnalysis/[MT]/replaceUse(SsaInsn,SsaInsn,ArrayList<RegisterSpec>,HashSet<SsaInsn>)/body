{
  int index;
  int length=newRegs.size();
  SsaInsn next;
  RegisterSpecList sources;
  RegisterSpec source, result;
  CstLiteralBits indexReg;
switch (use.getOpcode().getOpcode()) {
case RegOps.AGET:
    next=getMoveForInsn(use);
  sources=use.getSources();
indexReg=((CstLiteralBits)sources.get(1).getTypeBearer());
index=indexReg.getIntBits();
if (index < length) {
source=newRegs.get(index);
result=source.withReg(next.getResult().getReg());
insertPlainInsnBefore(next,RegisterSpecList.make(source),result,RegOps.MOVE,null);
}
 else {
insertExceptionThrow(next,sources.get(1),deletedInsns);
deletedInsns.add(next.getBlock().getInsns().get(2));
}
deletedInsns.add(next);
break;
case RegOps.APUT:
sources=use.getSources();
indexReg=((CstLiteralBits)sources.get(2).getTypeBearer());
index=indexReg.getIntBits();
if (index < length) {
source=sources.get(0);
result=source.withReg(newRegs.get(index).getReg());
insertPlainInsnBefore(use,RegisterSpecList.make(source),result,RegOps.MOVE,null);
newRegs.set(index,result.withSimpleType());
}
 else {
insertExceptionThrow(use,sources.get(2),deletedInsns);
}
break;
case RegOps.ARRAY_LENGTH:
TypeBearer lengthReg=prev.getSources().get(0).getTypeBearer();
next=getMoveForInsn(use);
insertPlainInsnBefore(next,RegisterSpecList.EMPTY,next.getResult(),RegOps.CONST,(Constant)lengthReg);
deletedInsns.add(next);
break;
case RegOps.MARK_LOCAL:
break;
case RegOps.FILL_ARRAY_DATA:
Insn ropUse=use.getOriginalRopInsn();
FillArrayDataInsn fill=(FillArrayDataInsn)ropUse;
ArrayList<Constant> constList=fill.getInitValues();
for (int i=0; i < length; i++) {
RegisterSpec newFill=RegisterSpec.make(newRegs.get(i).getReg(),(TypeBearer)constList.get(i));
insertPlainInsnBefore(use,RegisterSpecList.EMPTY,newFill,RegOps.CONST,constList.get(i));
newRegs.set(i,newFill);
}
break;
default :
}
}
