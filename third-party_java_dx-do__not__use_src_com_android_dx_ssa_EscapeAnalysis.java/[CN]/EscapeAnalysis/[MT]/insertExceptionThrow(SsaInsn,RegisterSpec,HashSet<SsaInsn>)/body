{
  CstType exception=new CstType(Exceptions.TYPE_ArrayIndexOutOfBoundsException);
  insertThrowingInsnBefore(insn,RegisterSpecList.EMPTY,null,RegOps.NEW_INSTANCE,exception);
  SsaBasicBlock currBlock=insn.getBlock();
  SsaBasicBlock newBlock=currBlock.insertNewSuccessor(currBlock.getPrimarySuccessor());
  SsaInsn newInsn=newBlock.getInsns().get(0);
  RegisterSpec newReg=RegisterSpec.make(ssaMeth.makeNewSsaReg(),exception);
  insertPlainInsnBefore(newInsn,RegisterSpecList.EMPTY,newReg,RegOps.MOVE_RESULT_PSEUDO,null);
  SsaBasicBlock newBlock2=newBlock.insertNewSuccessor(newBlock.getPrimarySuccessor());
  SsaInsn newInsn2=newBlock2.getInsns().get(0);
  CstNat newNat=new CstNat(new CstString("<init>"),new CstString("(I)V"));
  CstMethodRef newRef=new CstMethodRef(exception,newNat);
  insertThrowingInsnBefore(newInsn2,RegisterSpecList.make(newReg,index),null,RegOps.INVOKE_DIRECT,newRef);
  deletedInsns.add(newInsn2);
  SsaBasicBlock newBlock3=newBlock2.insertNewSuccessor(newBlock2.getPrimarySuccessor());
  SsaInsn newInsn3=newBlock3.getInsns().get(0);
  insertThrowingInsnBefore(newInsn3,RegisterSpecList.make(newReg),null,RegOps.THROW,null);
  newBlock3.replaceSuccessor(newBlock3.getPrimarySuccessorIndex(),ssaMeth.getExitBlock().getIndex());
  deletedInsns.add(newInsn3);
}
