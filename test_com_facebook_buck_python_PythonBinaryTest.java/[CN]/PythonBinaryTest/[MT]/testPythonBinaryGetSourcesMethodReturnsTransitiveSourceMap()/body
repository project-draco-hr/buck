{
  BuildTarget orphanPyLibraryTarget=BuildTarget.builder("//","orphan_python_library").build();
  PythonLibrary orphanPyLibrary=new PythonLibrary(new FakeBuildRuleParamsBuilder(orphanPyLibraryTarget).build(),ImmutableSortedSet.<SourcePath>of(new TestSourcePath("java/src/com/javalib/orphan/sadpanda.py")),ImmutableSortedSet.<SourcePath>of());
  BuildTarget pyLibraryTarget=BuildTargetFactory.newInstance("//:py_library");
  PythonLibrary pyLibrary=new PythonLibrary(new FakeBuildRuleParamsBuilder(pyLibraryTarget).build(),ImmutableSortedSet.<SourcePath>of(new TestSourcePath("python/tastypy.py")),ImmutableSortedSet.<SourcePath>of());
  Map<BuildTarget,BuildRule> rules=Maps.newHashMap();
  rules.put(orphanPyLibraryTarget,orphanPyLibrary);
  rules.put(pyLibraryTarget,pyLibrary);
  BuildRuleResolver ruleResolver=new BuildRuleResolver(rules);
  BuildTarget javaLibraryTarget=BuildTargetFactory.newInstance("//:javalib");
  BuildRule javaLibrary=JavaLibraryBuilder.createBuilder(javaLibraryTarget).addSrc(Paths.get("java/src/com/javalib/Bar.java")).addDep(orphanPyLibrary).build(ruleResolver);
  Path foo=Paths.get("foo");
  PythonBinary buildable=new PythonBinary(new FakeBuildRuleParamsBuilder(BuildTarget.builder("//","python_binary").build()).setDeps(ImmutableSortedSet.of(javaLibrary,pyLibrary)).build(),foo);
  assertEquals(new PythonPackageComponents.Builder("test").addModule(foo,foo,"").addComponent(pyLibrary.getPythonPackageComponents(),"").build(),buildable.getAllComponents());
}
