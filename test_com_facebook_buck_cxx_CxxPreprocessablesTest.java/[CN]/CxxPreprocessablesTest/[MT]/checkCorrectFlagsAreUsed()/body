{
  BuildRuleResolver buildRuleResolver=new BuildRuleResolver();
  SourcePathResolver sourcePathResolver=new SourcePathResolver(buildRuleResolver);
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  ProjectFilesystem filesystem=new AllExistingProjectFilesystem();
  Joiner space=Joiner.on(" ");
  ImmutableList<String> explicitCppflags=ImmutableList.of("-explicit-cppflag");
  ImmutableList<String> explicitCxxppflags=ImmutableList.of("-explicit-cxxppflag");
  CxxPreprocessorInput cxxPreprocessorInput=CxxPreprocessorInput.builder().putAllPreprocessorFlags(CxxSource.Type.C,explicitCppflags).putAllPreprocessorFlags(CxxSource.Type.CXX,explicitCxxppflags).build();
  ImmutableList<String> asppflags=ImmutableList.of("-asppflag","-asppflag");
  SourcePath cpp=new TestSourcePath("cpp");
  ImmutableList<String> cppflags=ImmutableList.of("-cppflag","-cppflag");
  SourcePath cxxpp=new TestSourcePath("cxxpp");
  ImmutableList<String> cxxppflags=ImmutableList.of("-cxxppflag","-cxxppflag");
  FakeBuckConfig buckConfig=new FakeBuckConfig(ImmutableMap.<String,Map<String,String>>of("cxx",ImmutableMap.<String,String>builder().put("asppflags",space.join(asppflags)).put("cpp",sourcePathResolver.getPath(cpp).toString()).put("cppflags",space.join(cppflags)).put("cxxpp",sourcePathResolver.getPath(cxxpp).toString()).put("cxxppflags",space.join(cxxppflags)).build()),filesystem);
  CxxPlatform platform=DefaultCxxPlatforms.build(PROJECT_FILESYSTEM,buckConfig);
  String cSourceName="test.c";
  CxxSource cSource=ImmutableCxxSource.of(CxxSource.Type.C,new TestSourcePath(cSourceName));
  Map.Entry<String,CxxSource> cPreprocessEntry=CxxPreprocessables.createPreprocessBuildRule(params,buildRuleResolver,platform,cxxPreprocessorInput,false,cSourceName,cSource);
  CxxPreprocess cPreprocess=(CxxPreprocess)sourcePathResolver.getRule(cPreprocessEntry.getValue().getPath()).get();
  assertContains(cPreprocess.getFlags(),explicitCppflags);
  assertContains(cPreprocess.getFlags(),cppflags);
  String cxxSourceName="test.cpp";
  CxxSource cxxSource=ImmutableCxxSource.of(CxxSource.Type.CXX,new TestSourcePath(cxxSourceName));
  Map.Entry<String,CxxSource> cxxPreprocessEntry=CxxPreprocessables.createPreprocessBuildRule(params,buildRuleResolver,platform,cxxPreprocessorInput,false,cxxSourceName,cxxSource);
  CxxPreprocess cxxPreprocess=(CxxPreprocess)sourcePathResolver.getRule(cxxPreprocessEntry.getValue().getPath()).get();
  assertContains(cxxPreprocess.getFlags(),explicitCxxppflags);
  assertContains(cxxPreprocess.getFlags(),cxxppflags);
  String assemblerWithCppSourceName="test.S";
  CxxSource assemblerWithCppSource=ImmutableCxxSource.of(CxxSource.Type.ASSEMBLER_WITH_CPP,new TestSourcePath(assemblerWithCppSourceName));
  Map.Entry<String,CxxSource> assemblerWithCppCompileEntry=CxxPreprocessables.createPreprocessBuildRule(params,buildRuleResolver,platform,cxxPreprocessorInput,false,assemblerWithCppSourceName,assemblerWithCppSource);
  CxxPreprocess assemblerWithCppPreprocess=(CxxPreprocess)sourcePathResolver.getRule(assemblerWithCppCompileEntry.getValue().getPath()).get();
  assertContains(assemblerWithCppPreprocess.getFlags(),asppflags);
}
