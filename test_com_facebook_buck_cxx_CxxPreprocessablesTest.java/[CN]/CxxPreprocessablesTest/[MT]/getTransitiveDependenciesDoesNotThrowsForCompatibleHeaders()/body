{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(new FakeBuckConfig()));
  CxxPreprocessorInput bottomInput=CxxPreprocessorInput.builder().setIncludes(ImmutableCxxHeaders.builder().putNameToPathMap(Paths.get("prefix/file.h"),new TestSourcePath("common/file.h")).putFullNameToPathMap(Paths.get("buck-out/something/prefix/file.h"),new TestSourcePath("common/file.h")).build()).build();
  BuildRule bottom=createFakeCxxPreprocessorDep("//:bottom",pathResolver,bottomInput);
  CxxPreprocessorInput topInput=CxxPreprocessorInput.builder().setIncludes(ImmutableCxxHeaders.builder().putNameToPathMap(Paths.get("prefix/file.h"),new TestSourcePath("common/file.h")).putFullNameToPathMap(Paths.get("buck-out/something-else/prefix/file.h"),new TestSourcePath("common/file.h")).build()).build();
  BuildRule top=createFakeCxxPreprocessorDep("//:top",pathResolver,topInput,bottom);
  CxxPreprocessorInput expected=CxxPreprocessorInput.builder().setIncludes(ImmutableCxxHeaders.builder().putNameToPathMap(Paths.get("prefix/file.h"),new TestSourcePath("common/file.h")).putFullNameToPathMap(Paths.get("buck-out/something/prefix/file.h"),new TestSourcePath("common/file.h")).putFullNameToPathMap(Paths.get("buck-out/something-else/prefix/file.h"),new TestSourcePath("common/file.h")).build()).build();
  assertEquals(expected,CxxPreprocessables.getTransitiveCxxPreprocessorInput(cxxPlatform,ImmutableList.of(top)));
}
