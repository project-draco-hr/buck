{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(new FakeBuckConfig()));
  BuildTarget cppDepTarget1=BuildTargetFactory.newInstance("//:cpp1");
  CxxPreprocessorInput input1=CxxPreprocessorInput.builder().addRules(cppDepTarget1).putPreprocessorFlags(CxxSource.Type.C,"-Dtest=yes").putPreprocessorFlags(CxxSource.Type.CXX,"-Dtest=yes").addIncludeRoots(Paths.get("foo/bar"),Paths.get("hello")).addSystemIncludeRoots(Paths.get("/usr/include")).build();
  BuildTarget depTarget1=BuildTargetFactory.newInstance("//:dep1");
  FakeCxxPreprocessorDep dep1=createFakeCxxPreprocessorDep(depTarget1,pathResolver,input1);
  BuildTarget cppDepTarget2=BuildTargetFactory.newInstance("//:cpp2");
  CxxPreprocessorInput input2=CxxPreprocessorInput.builder().addRules(cppDepTarget2).putPreprocessorFlags(CxxSource.Type.C,"-DBLAH").putPreprocessorFlags(CxxSource.Type.CXX,"-DBLAH").addIncludeRoots(Paths.get("goodbye")).addSystemIncludeRoots(Paths.get("test")).build();
  BuildTarget depTarget2=BuildTargetFactory.newInstance("//:dep2");
  FakeCxxPreprocessorDep dep2=createFakeCxxPreprocessorDep(depTarget2,pathResolver,input2);
  BuildTarget depTarget3=BuildTargetFactory.newInstance("//:dep3");
  CxxPreprocessorInput nothing=CxxPreprocessorInput.EMPTY;
  FakeCxxPreprocessorDep dep3=createFakeCxxPreprocessorDep(depTarget3,pathResolver,nothing,dep1,dep2);
  CxxPreprocessorInput expected=CxxPreprocessorInput.concat(ImmutableList.of(input1,input2));
  CxxPreprocessorInput actual=CxxPreprocessables.getTransitiveCxxPreprocessorInput(cxxPlatform,ImmutableList.<BuildRule>of(dep3));
  assertEquals(expected,actual);
}
