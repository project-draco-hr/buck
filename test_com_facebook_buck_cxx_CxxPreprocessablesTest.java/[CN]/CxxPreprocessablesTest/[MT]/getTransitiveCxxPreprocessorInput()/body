{
  BuildTarget cppDepTarget1=BuildTargetFactory.newInstance("//:cpp1");
  CxxPreprocessorInput input1=new CxxPreprocessorInput(ImmutableSet.of(cppDepTarget1),ImmutableList.of("-Dtest=yes"),ImmutableList.of("-Dtest=yes"),ImmutableList.of(Paths.get("foo/bar"),Paths.get("hello")),ImmutableList.of(Paths.get("/usr/include")));
  BuildTarget depTarget1=BuildTargetFactory.newInstance("//:dep1");
  FakeCxxPreprocessorDep dep1=createFakeCxxPreprocessorDep(depTarget1,input1);
  BuildTarget cppDepTarget2=BuildTargetFactory.newInstance("//:cpp2");
  CxxPreprocessorInput input2=new CxxPreprocessorInput(ImmutableSet.of(cppDepTarget2),ImmutableList.of("-DBLAH"),ImmutableList.of("-DBLAH"),ImmutableList.of(Paths.get("goodbye")),ImmutableList.of(Paths.get("test")));
  BuildTarget depTarget2=BuildTargetFactory.newInstance("//:dep2");
  FakeCxxPreprocessorDep dep2=createFakeCxxPreprocessorDep(depTarget2,input2);
  BuildTarget depTarget3=BuildTargetFactory.newInstance("//:dep3");
  FakeBuildRule dep3=createFakeBuildRule(depTarget3,dep1,dep2);
  CxxPreprocessorInput expected=CxxPreprocessorInput.concat(ImmutableList.of(input1,input2));
  CxxPreprocessorInput actual=CxxPreprocessables.getTransitiveCxxPreprocessorInput(ImmutableList.<BuildRule>of(dep3));
  assertEquals(expected,actual);
}
