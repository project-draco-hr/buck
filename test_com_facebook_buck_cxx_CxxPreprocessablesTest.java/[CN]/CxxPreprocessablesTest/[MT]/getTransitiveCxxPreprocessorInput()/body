{
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(FakeBuckConfig.builder().setFilesystem(filesystem).build()));
  BuildTarget cppDepTarget1=BuildTargetFactory.newInstance(filesystem,"//:cpp1");
  CxxPreprocessorInput input1=CxxPreprocessorInput.builder().addRules(cppDepTarget1).putPreprocessorFlags(CxxSource.Type.C,"-Dtest=yes").putPreprocessorFlags(CxxSource.Type.CXX,"-Dtest=yes").addIncludeRoots(filesystem.resolve("foo/bar"),filesystem.resolve("hello")).addSystemIncludeRoots(Paths.get("/usr/include")).build();
  BuildTarget depTarget1=BuildTargetFactory.newInstance(filesystem,"//:dep1");
  FakeCxxPreprocessorDep dep1=createFakeCxxPreprocessorDep(depTarget1,pathResolver,input1);
  BuildTarget cppDepTarget2=BuildTargetFactory.newInstance(filesystem,"//:cpp2");
  CxxPreprocessorInput input2=CxxPreprocessorInput.builder().addRules(cppDepTarget2).putPreprocessorFlags(CxxSource.Type.C,"-DBLAH").putPreprocessorFlags(CxxSource.Type.CXX,"-DBLAH").addIncludeRoots(filesystem.resolve("goodbye")).addSystemIncludeRoots(filesystem.resolve("test")).build();
  BuildTarget depTarget2=BuildTargetFactory.newInstance("//:dep2");
  FakeCxxPreprocessorDep dep2=createFakeCxxPreprocessorDep(depTarget2,pathResolver,input2);
  BuildTarget depTarget3=BuildTargetFactory.newInstance(filesystem,"//:dep3");
  CxxPreprocessorInput nothing=CxxPreprocessorInput.EMPTY;
  FakeCxxPreprocessorDep dep3=createFakeCxxPreprocessorDep(depTarget3,pathResolver,nothing,dep1,dep2);
  ImmutableList<CxxPreprocessorInput> expected=ImmutableList.of(nothing,input1,input2);
  ImmutableList<CxxPreprocessorInput> actual=ImmutableList.copyOf(CxxPreprocessables.getTransitiveCxxPreprocessorInput(cxxPlatform,ImmutableList.<BuildRule>of(dep3)));
  assertEquals(expected,actual);
}
