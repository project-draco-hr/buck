{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  CxxPlatform cxxPlatform=new DefaultCxxPlatform(new FakeBuckConfig());
  BuildTarget cppDepTarget1=BuildTargetFactory.newInstance("//:cpp1");
  CxxPreprocessorInput input1=CxxPreprocessorInput.builder().setRules(ImmutableSet.of(cppDepTarget1)).setPreprocessorFlags(ImmutableMultimap.of(CxxSource.Type.C,"-Dtest=yes",CxxSource.Type.CXX,"-Dtest=yes")).setIncludeRoots(ImmutableList.of(Paths.get("foo/bar"),Paths.get("hello"))).setSystemIncludeRoots(ImmutableList.of(Paths.get("/usr/include"))).build();
  BuildTarget depTarget1=BuildTargetFactory.newInstance("//:dep1");
  FakeCxxPreprocessorDep dep1=createFakeCxxPreprocessorDep(depTarget1,pathResolver,input1);
  BuildTarget cppDepTarget2=BuildTargetFactory.newInstance("//:cpp2");
  CxxPreprocessorInput input2=CxxPreprocessorInput.builder().setRules(ImmutableSet.of(cppDepTarget2)).setPreprocessorFlags(ImmutableMultimap.of(CxxSource.Type.C,"-DBLAH",CxxSource.Type.CXX,"-DBLAH")).setIncludeRoots(ImmutableList.of(Paths.get("goodbye"))).setSystemIncludeRoots(ImmutableList.of(Paths.get("test"))).build();
  BuildTarget depTarget2=BuildTargetFactory.newInstance("//:dep2");
  FakeCxxPreprocessorDep dep2=createFakeCxxPreprocessorDep(depTarget2,pathResolver,input2);
  BuildTarget depTarget3=BuildTargetFactory.newInstance("//:dep3");
  CxxPreprocessorInput nothing=CxxPreprocessorInput.EMPTY;
  FakeCxxPreprocessorDep dep3=createFakeCxxPreprocessorDep(depTarget3,pathResolver,nothing,dep1,dep2);
  CxxPreprocessorInput expected=CxxPreprocessorInput.concat(ImmutableList.of(input1,input2));
  CxxPreprocessorInput actual=CxxPreprocessables.getTransitiveCxxPreprocessorInput(cxxPlatform,ImmutableList.<BuildRule>of(dep3));
  assertEquals(expected,actual);
}
