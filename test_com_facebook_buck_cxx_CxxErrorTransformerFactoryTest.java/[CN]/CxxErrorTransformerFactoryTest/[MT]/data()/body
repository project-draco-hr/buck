{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  Path original=Paths.get("buck-out/foo#bar/world.h");
  Path replacement=Paths.get("hello/world.h");
  HeaderPathNormalizer.Builder normalizerBuilder=new HeaderPathNormalizer.Builder(pathResolver,Functions.<Path>identity());
  normalizerBuilder.addHeader(new FakeSourcePath(replacement.toString()),original);
  HeaderPathNormalizer normalizer=normalizerBuilder.build();
  Path compilationDirectory=Paths.get("compDir");
  Path sanitizedDir=Paths.get("hello");
  Path unsanitizedDir=Paths.get("buck-out/foo#bar");
  DebugPathSanitizer sanitizer=new DebugPathSanitizer(unsanitizedDir.toString().length(),File.separatorChar,compilationDirectory,ImmutableBiMap.of(unsanitizedDir,sanitizedDir));
  return ImmutableList.copyOf(new Object[][]{{"relative paths",new CxxErrorTransformerFactory(Optional.of(filesystem.getRootPath()),Optional.<Function<Path,Path>>absent(),normalizer,sanitizer),replacement,original},{"absolute paths",new CxxErrorTransformerFactory(Optional.of(filesystem.getRootPath()),Optional.of(filesystem.getAbsolutifier()),normalizer,sanitizer),replacement.toAbsolutePath(),original}});
}
