{
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  Preprocessor preprocessorSupportingPch=new DefaultPreprocessor(CxxPlatformUtils.DEFAULT_PLATFORM.getCpp().resolve(resolver)){
    @Override public boolean supportsPrecompiledHeaders(){
      return true;
    }
  }
;
  SourcePathResolver sourcePathResolver=new SourcePathResolver(resolver);
  CxxPrecompiledHeader precompiledHeader=new CxxPrecompiledHeader(params,sourcePathResolver,Paths.get("foo.pch"),new PreprocessorDelegate(sourcePathResolver,CxxPlatformUtils.DEFAULT_DEBUG_PATH_SANITIZER,CxxPlatformUtils.DEFAULT_CONFIG.getHeaderVerification(),Paths.get("./"),preprocessorSupportingPch,PreprocessorFlags.builder().build(),CxxDescriptionEnhancer.frameworkPathToSearchPath(CxxPlatformUtils.DEFAULT_PLATFORM,sourcePathResolver),ImmutableList.<CxxHeaders>of()),CxxToolFlags.of(),new FakeSourcePath("foo.h"),CxxSource.Type.C,CxxPlatformUtils.DEFAULT_DEBUG_PATH_SANITIZER);
  ImmutableList<Step> postBuildSteps=precompiledHeader.getBuildSteps(FakeBuildContext.NOOP_CONTEXT,new FakeBuildableContext());
  CxxPreprocessAndCompileStep step=Iterables.getOnlyElement(Iterables.filter(postBuildSteps,CxxPreprocessAndCompileStep.class));
  assertThat("step that generates pch should have correct flags",step.getCommand(),hasItem(CxxSource.Type.C.getPrecompiledHeaderLanguage().get()));
}
