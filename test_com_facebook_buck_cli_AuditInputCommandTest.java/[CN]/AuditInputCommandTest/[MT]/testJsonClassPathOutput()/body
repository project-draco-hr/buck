{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  ImmutableList<String> targets=ImmutableList.of("//:test-android-library","//:test-java-library");
  ruleResolver.buildAndAddToIndex(DefaultJavaLibraryRule.newJavaLibraryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//:test-java-library")).addSrc("src/com/facebook/TestJavaLibrary.java"));
  ruleResolver.buildAndAddToIndex(DefaultJavaLibraryRule.newJavaLibraryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//:test-android-library")).addSrc("src/com/facebook/TestAndroidLibrary.java").addSrc("src/com/facebook/AndroidLibraryTwo.java").addDep(BuildTargetFactory.newInstance("//:test-java-library")));
  List<BuildTarget> buildTargets=Lists.transform(targets,new Function<String,BuildTarget>(){
    @Override public BuildTarget apply(    String target){
      return BuildTargetFactory.newInstance(target);
    }
  }
);
  DependencyGraph dependencyGraph=RuleMap.createGraphFromBuildRules(ruleResolver);
  PartialGraph partialGraph=PartialGraphFactory.newInstance(dependencyGraph,buildTargets);
  auditInputCommand.printJsonInputs(partialGraph);
  assertEquals(EXPECTED_JSON,console.getTextWrittenToStdOut());
  assertEquals("",console.getTextWrittenToStdErr());
}
