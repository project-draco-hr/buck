{
  this.instance=instance;
  Preconditions.checkNotNull(console);
  this.filesystem=filesystem;
  this.buildFiles=buildFiles;
  this.buildTargetParser=buildTargetParser;
  this.buildTargetPatternParser=new BuildTargetPatternParser(filesystem);
  this.target=Preconditions.checkNotNull(target);
  this.visibilityParseContext=ParseContext.forVisibilityArgument();
  this.buildFileParseContext=ParseContext.forBaseName(target.getBaseName());
  this.ignoreFileExistenceChecks=ignoreFileExistenceChecks;
  this.resolveFilePathRelativeToBuildFileDirectoryTransform=new Function<String,String>(){
    @Override public String apply(    String input){
      return resolveFilePathRelativeToBuildFileDirectory(input);
    }
  }
;
  final Function<String,String> pathRelativizer=filesystem.getPathRelativizer();
  this.abstractBuildRuleFactoryParams=new AbstractBuildRuleBuilderParams(){
    @Override public Function<String,String> getPathRelativizer(){
      return pathRelativizer;
    }
  }
;
}
