{
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  Path buildFile=Paths.get("a","BUCK");
  BuildFileSpec recursiveSpec=BuildFileSpec.fromRecursivePath(buildFile.getParent(),filesystem.getRootPath());
  ImmutableSet<Path> expectedBuildFiles=ImmutableSet.of(filesystem.resolve(buildFile));
  FakeWatchmanClient fakeWatchmanClient=new FakeWatchmanClient(0,ImmutableMap.of(ImmutableList.of("query","/path/to/src",ImmutableMap.of("relative_root","project-name","sync_timeout",0,"path",ImmutableList.of("a"),"fields",ImmutableList.of("name"),"expression",ImmutableList.of("allof","exists",ImmutableList.of("name","BUCK"),ImmutableList.of("type","f")))),ImmutableMap.of("files",ImmutableList.of("a/BUCK"))));
  Cell cell=new TestCellBuilder().setFilesystem(filesystem).setWatchman(new Watchman(Optional.of("project-name"),Optional.of("/path/to/src"),ImmutableSet.of(Watchman.Capability.SUPPORTS_PROJECT_WATCH,Watchman.Capability.DIRNAME,Watchman.Capability.WILDMATCH_GLOB),Optional.<String>absent(),Optional.of(Paths.get(".watchman-sock")),Optional.<WatchmanClient>of(fakeWatchmanClient),TimeUnit.SECONDS.toMillis(45))).build();
  ImmutableSet<Path> actualBuildFiles=recursiveSpec.findBuildFiles(cell,ParserConfig.BuildFileSearchMethod.WATCHMAN);
  assertEquals(expectedBuildFiles,actualBuildFiles);
}
