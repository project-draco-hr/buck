{
  if (label < 0) {
    throw new IllegalArgumentException("label < 0");
  }
  try {
    insns.throwIfMutable();
  }
 catch (  NullPointerException ex) {
    throw new NullPointerException("insns == null");
  }
  int sz=insns.size();
  if (sz == 0) {
    throw new IllegalArgumentException("insns.size() == 0");
  }
  for (int i=sz - 2; i >= 0; i--) {
    Rop one=insns.get(i).getOpcode();
    if (one.getBranchingness() != Rop.BRANCH_NONE) {
      throw new IllegalArgumentException("insns[" + i + "] is a "+ "branch or can throw");
    }
  }
  Insn lastInsn=insns.get(sz - 1);
  if (lastInsn.getOpcode().getBranchingness() == Rop.BRANCH_NONE) {
    throw new IllegalArgumentException("insns does not end with " + "a branch or throwing " + "instruction");
  }
  try {
    successors.throwIfMutable();
  }
 catch (  NullPointerException ex) {
    throw new NullPointerException("successors == null");
  }
  if (primarySuccessor < -1) {
    throw new IllegalArgumentException("primarySuccessor < -1");
  }
  if (primarySuccessor >= 0 && !successors.contains(primarySuccessor)) {
    throw new IllegalArgumentException("primarySuccessor " + primarySuccessor + " not in successors "+ successors);
  }
  this.label=label;
  this.insns=insns;
  this.successors=successors;
  this.primarySuccessor=primarySuccessor;
}
