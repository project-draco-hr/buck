{
  Map<BuildRule,Optional<BuildResult>> ruleToResult=buildExecutionResult.getResults();
  LinkedHashMap<String,Object> results=Maps.newLinkedHashMap();
  LinkedHashMap<String,Object> failures=Maps.newLinkedHashMap();
  boolean isOverallSuccess=true;
  for (  Map.Entry<BuildRule,Optional<BuildResult>> entry : ruleToResult.entrySet()) {
    BuildRule rule=entry.getKey();
    Optional<BuildRuleSuccessType> success=Optional.absent();
    Optional<BuildResult> result=entry.getValue();
    if (result.isPresent()) {
      success=Optional.fromNullable(result.get().getSuccess());
    }
    Map<String,Object> value=Maps.newLinkedHashMap();
    boolean isSuccess=success.isPresent();
    value.put("success",isSuccess);
    if (!isSuccess) {
      isOverallSuccess=false;
    }
    if (isSuccess) {
      value.put("type",success.get().name());
      Path outputFile=rule.getPathToOutput();
      value.put("output",outputFile != null ? outputFile.toString() : null);
    }
    results.put(rule.getFullyQualifiedName(),value);
  }
  for (  BuildResult failureResult : buildExecutionResult.getFailures()) {
    Throwable failure=Preconditions.checkNotNull(failureResult.getFailure());
    failures.put(failureResult.getRule().getFullyQualifiedName(),failure.getMessage());
  }
  Map<String,Object> report=Maps.newLinkedHashMap();
  report.put("success",isOverallSuccess);
  report.put("results",results);
  report.put("failures",failures);
  ObjectMapper objectMapper=ObjectMappers.newDefaultInstance();
  objectMapper.enable(SerializationFeature.INDENT_OUTPUT);
  return objectMapper.writeValueAsString(report);
}
