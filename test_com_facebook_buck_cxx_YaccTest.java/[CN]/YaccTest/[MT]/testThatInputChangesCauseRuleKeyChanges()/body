{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new FakeRuleKeyBuilderFactory(FakeFileHashCache.createFromStrings(ImmutableMap.of("yacc",Strings.repeat("a",40),"input",Strings.repeat("b",40),"different",Strings.repeat("c",40))));
  RuleKey.Builder.RuleKeyPair defaultRuleKey=generateRuleKey(ruleKeyBuilderFactory,pathResolver,new Yacc(params,pathResolver,DEFAULT_YACC,DEFAULT_FLAGS,DEFAULT_OUTPUT_PREFIX,DEFAULT_INPUT));
  RuleKey.Builder.RuleKeyPair yaccChange=generateRuleKey(ruleKeyBuilderFactory,pathResolver,new Yacc(params,pathResolver,new HashedFileTool(Paths.get("different")),DEFAULT_FLAGS,DEFAULT_OUTPUT_PREFIX,DEFAULT_INPUT));
  assertNotEquals(defaultRuleKey.getTotalRuleKey(),yaccChange.getTotalRuleKey());
  RuleKey.Builder.RuleKeyPair flagsChange=generateRuleKey(ruleKeyBuilderFactory,pathResolver,new Yacc(params,pathResolver,DEFAULT_YACC,ImmutableList.of("-different"),DEFAULT_OUTPUT_PREFIX,DEFAULT_INPUT));
  assertNotEquals(defaultRuleKey.getTotalRuleKey(),flagsChange.getTotalRuleKey());
  RuleKey.Builder.RuleKeyPair outputPrefixChange=generateRuleKey(ruleKeyBuilderFactory,pathResolver,new Yacc(params,pathResolver,DEFAULT_YACC,DEFAULT_FLAGS,Paths.get("different"),DEFAULT_INPUT));
  assertNotEquals(defaultRuleKey.getTotalRuleKey(),outputPrefixChange.getTotalRuleKey());
  RuleKey.Builder.RuleKeyPair inputChange=generateRuleKey(ruleKeyBuilderFactory,pathResolver,new Yacc(params,pathResolver,DEFAULT_YACC,DEFAULT_FLAGS,DEFAULT_OUTPUT_PREFIX,new TestSourcePath("different")));
  assertNotEquals(defaultRuleKey.getTotalRuleKey(),inputChange.getTotalRuleKey());
}
