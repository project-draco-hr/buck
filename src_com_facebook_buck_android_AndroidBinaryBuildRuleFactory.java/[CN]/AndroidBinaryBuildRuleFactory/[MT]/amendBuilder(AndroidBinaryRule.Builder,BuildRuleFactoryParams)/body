{
  String manifestAttribute=params.getRequiredStringAttribute("manifest");
  String manifestPath=params.resolveFilePathRelativeToBuildFileDirectory(manifestAttribute);
  builder.setManifest(manifestPath);
  String target=params.getRequiredStringAttribute("target");
  builder.setTarget(target);
  BuildTarget keystore=params.getRequiredBuildTarget("keystore");
  builder.setKeystore(keystore);
  String packageType=params.getRequiredStringAttribute("package_type");
  builder.setPackageType(packageType);
  for (  String noDx : params.getOptionalListAttribute("no_dx")) {
    BuildTarget buildTarget=params.resolveBuildTarget(noDx);
    builder.addBuildRuleToExcludeFromDex(buildTarget);
  }
  boolean useSplitDex=params.getBooleanAttribute("use_split_dex");
  ZipSplitter.DexSplitStrategy dexSplitStrategy=params.getBooleanAttribute("minimize_primary_dex_size") ? ZipSplitter.DexSplitStrategy.MINIMIZE_PRIMARY_DEX_SIZE : ZipSplitter.DexSplitStrategy.MAXIMIZE_PRIMARY_DEX_SIZE;
  DexStore dexStore="xz".equals(params.getRequiredStringAttribute("dex_compression")) ? DexStore.XZ : DexStore.JAR;
  boolean useLinearAllocSplitDex=params.getBooleanAttribute("use_linear_alloc_split_dex");
  builder.setDexSplitMode(new DexSplitMode(useSplitDex,dexSplitStrategy,dexStore,useLinearAllocSplitDex));
  boolean useAndroidProguardConfigWithOptimizations=params.getBooleanAttribute("use_android_proguard_config_with_optimizations");
  builder.setUseAndroidProguardConfigWithOptimizations(useAndroidProguardConfigWithOptimizations);
  Optional<SourcePath> proguardConfig=params.getOptionalSourcePath("proguard_config",builder);
  builder.setProguardConfig(proguardConfig);
  boolean compressResources=params.getBooleanAttribute("compress_resources");
  builder.setCompressResources(compressResources);
  List<String> primaryDexSubstrings=params.getOptionalListAttribute("primary_dex_substrings");
  builder.addPrimaryDexSubstrings(primaryDexSubstrings);
  List<String> resourceFilter=params.getOptionalListAttribute("resource_filter");
  builder.setResourceFilter(new FilterResourcesStep.ResourceFilter(resourceFilter));
  List<String> cpuFilters=params.getOptionalListAttribute("cpu_filters");
  for (  String filter : cpuFilters) {
    builder.addCpuFilter(filter);
  }
}
