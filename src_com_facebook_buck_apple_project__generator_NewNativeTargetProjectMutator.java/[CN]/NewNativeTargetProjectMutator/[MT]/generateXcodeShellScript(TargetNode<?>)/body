{
  Preconditions.checkArgument(targetNode.getConstructorArg() instanceof ReactNativeLibraryArgs);
  ST template;
  try {
    template=new ST(Resources.toString(Resources.getResource(NewNativeTargetProjectMutator.class,REACT_NATIVE_PACKAGE_TEMPLATE),Charsets.UTF_8));
  }
 catch (  IOException e) {
    throw new RuntimeException("There was an error loading 'rn_package.st' template",e);
  }
  ReactNativeLibraryArgs args=(ReactNativeLibraryArgs)targetNode.getConstructorArg();
  template.add("bundle_name",args.bundleName);
  ProjectFilesystem filesystem=targetNode.getRuleFactoryParams().getProjectFilesystem();
  BuildTarget buildTarget=targetNode.getBuildTarget();
  Path jsOutput=ReactNativeBundle.getPathToJSBundleDir(buildTarget,filesystem).resolve(args.bundleName);
  template.add("built_bundle_path",filesystem.resolve(jsOutput));
  Path resourceOutput=ReactNativeBundle.getPathToResources(buildTarget,filesystem);
  template.add("built_resources_path",filesystem.resolve(resourceOutput));
  Path sourceMap=ReactNativeBundle.getPathToSourceMap(buildTarget,filesystem);
  template.add("built_source_map_path",filesystem.resolve(sourceMap));
  return template.render();
}
