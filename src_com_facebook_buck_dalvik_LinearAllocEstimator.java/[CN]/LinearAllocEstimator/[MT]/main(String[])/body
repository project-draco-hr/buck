{
  ImmutableMap<Pattern,Integer> penalties=ImmutableMap.of(Pattern.compile("Layout$"),1500,Pattern.compile("View$"),1500,Pattern.compile("ViewGroup$"),1800,Pattern.compile("Activity$"),1100);
  for (  String fname : args) {
    ZipFile inJar=new ZipFile(fname);
    for (    ZipEntry entry : Collections.list(inJar.entries())) {
      if (!entry.getName().endsWith(".class")) {
        continue;
      }
      byte[] rawClass=ByteStreams.toByteArray(inJar.getInputStream(entry));
      int footprint=estimateLinearAllocFootprint(rawClass,penalties);
      System.out.println(footprint + "\t" + entry.getName().replace(".class",""));
    }
  }
}
