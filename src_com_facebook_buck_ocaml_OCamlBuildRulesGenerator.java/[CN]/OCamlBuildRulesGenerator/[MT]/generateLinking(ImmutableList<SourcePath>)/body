{
  BuildRuleParams linkParams=params.copyWithChanges(NativeLinkable.NATIVE_LINKABLE_TYPE,params.getBuildTarget(),ImmutableSortedSet.copyOf(pathResolver.filterBuildRuleInputs(allInputs)),ImmutableSortedSet.<BuildRule>of());
  ImmutableList<String> linkerInputs=FluentIterable.from(allInputs).transform(pathResolver.getPathFunction()).transform(Functions.toStringFunction()).toList();
  ImmutableList.Builder<String> flags=ImmutableList.builder();
  flags.addAll(ocamlContext.getFlags());
  flags.addAll(ocamlContext.getCommonCLinkerFlags());
  OCamlLink link=new OCamlLink(linkParams,pathResolver,new OCamlLinkStep.Args(cxxCompiler.getCommandPrefix(pathResolver),ocamlContext.getOcamlCompiler(),ocamlContext.getOutput(),ocamlContext.getLinkableInput().getArgs(),linkerInputs,flags.build(),ocamlContext.isLibrary(),false));
  resolver.addToIndex(link);
  return link;
}
