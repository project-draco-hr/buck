{
  BuildRuleParams linkParams=params.copyWithChanges(params.getBuildTarget(),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(pathResolver.filterBuildRuleInputs(allInputs)).addAll(FluentIterable.from(ocamlContext.getLinkableInput().getArgs()).transformAndConcat(Arg.getDepsFunction(pathResolver))).addAll(FluentIterable.from(ocamlContext.getNativeLinkableInput().getArgs()).transformAndConcat(Arg.getDepsFunction(pathResolver))).build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  ImmutableList<String> linkerInputs=FluentIterable.from(allInputs).transform(pathResolver.deprecatedPathFunction()).transform(Functions.toStringFunction()).toList();
  ImmutableList.Builder<String> flags=ImmutableList.builder();
  flags.addAll(ocamlContext.getFlags());
  flags.addAll(ocamlContext.getCommonCLinkerFlags());
  OCamlLink link=new OCamlLink(linkParams,pathResolver,allInputs,new OCamlLinkStep.Args(cxxCompiler.getEnvironment(pathResolver),cxxCompiler.getCommandPrefix(pathResolver),ocamlContext.getOcamlCompiler().get(),ocamlContext.getOutput(),ocamlContext.getLinkableInput().getArgs(),ocamlContext.getNativeLinkableInput().getArgs(),linkerInputs,flags.build(),ocamlContext.isLibrary(),false));
  resolver.addToIndex(link);
  return link;
}
