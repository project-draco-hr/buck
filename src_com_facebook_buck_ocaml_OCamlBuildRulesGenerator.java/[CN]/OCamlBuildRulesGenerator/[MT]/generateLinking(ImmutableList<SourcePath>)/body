{
  BuildRuleParams linkParams=params.copyWithChanges(params.getBuildTarget(),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(pathResolver.filterBuildRuleInputs(allInputs)).addAll(pathResolver.filterBuildRuleInputs(ocamlContext.getLinkableInput().getInputs())).build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  ImmutableList<String> linkerInputs=FluentIterable.from(allInputs).transform(pathResolver.getPathFunction()).transform(Functions.toStringFunction()).toList();
  ImmutableList.Builder<String> flags=ImmutableList.builder();
  flags.addAll(ocamlContext.getFlags());
  flags.addAll(ocamlContext.getCommonCLinkerFlags());
  OCamlLink link=new OCamlLink(linkParams,pathResolver,allInputs,new OCamlLinkStep.Args(cxxCompiler.getCommandPrefix(pathResolver),ocamlContext.getOcamlCompiler().get(),ocamlContext.getOutput(),ImmutableList.copyOf(ocamlContext.getLinkableInput().getArgs()),linkerInputs,flags.build(),ocamlContext.isLibrary(),false));
  resolver.addToIndex(link);
  return link;
}
