{
  ImmutableList<SourcePath> newCycleDetector=ImmutableList.<SourcePath>builder().addAll(cycleDetector).add(mlSource).build();
  if (cycleDetector.contains(mlSource)) {
    throw new HumanReadableException("Dependency cycle detected: %s",Joiner.on(" -> ").join(newCycleDetector));
  }
  if (sourceToRule.containsKey(mlSource)) {
    return;
  }
  ImmutableList.Builder<BuildRule> deps=ImmutableList.builder();
  if (sources.containsKey(mlSource)) {
    for (    SourcePath dep : sources.get(mlSource)) {
      generateSingleMLBytecodeCompilation(sourceToRule,cmoFiles,dep,sources,newCycleDetector);
      deps.add(sourceToRule.get(dep));
    }
  }
  String name=pathResolver.getPath(mlSource).toFile().getName();
  BuildTarget buildTarget=createMLBytecodeCompileBuildTarget(params.getBuildTarget(),name);
  BuildRuleParams compileParams=params.copyWithChanges(OCAML_ML_BYTECODE_COMPILE_TYPE,buildTarget,ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getDeclaredDeps()).addAll(deps.build()).build(),params.getExtraDeps());
  String outputFileName=getMLBytecodeOutputName(name);
  Path outputPath=ocamlContext.getCompileBytecodeOutputDir().resolve(outputFileName);
  final ImmutableList<String> compileFlags=getCompileFlags(true,false);
  BuildRule compileBytecode=new OCamlMLCompile(compileParams,pathResolver,new OCamlMLCompileStep.Args(cCompiler,ocamlContext.getOcamlBytecodeCompiler(),outputPath,pathResolver.getPath(mlSource),compileFlags));
  resolver.addToIndex(compileBytecode);
  sourceToRule.put(mlSource,compileBytecode);
  if (!outputFileName.endsWith(OCamlCompilables.OCAML_CMI)) {
    cmoFiles.add(new BuildTargetSourcePath(compileBytecode.getBuildTarget()));
  }
}
