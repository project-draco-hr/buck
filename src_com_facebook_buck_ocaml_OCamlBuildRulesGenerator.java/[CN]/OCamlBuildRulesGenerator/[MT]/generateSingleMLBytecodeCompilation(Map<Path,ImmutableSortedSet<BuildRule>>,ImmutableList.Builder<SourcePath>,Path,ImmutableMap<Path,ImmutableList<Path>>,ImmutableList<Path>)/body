{
  ImmutableList<Path> newCycleDetector=ImmutableList.<Path>builder().addAll(cycleDetector).add(mlSource).build();
  if (cycleDetector.contains(mlSource)) {
    throw new HumanReadableException("Dependency cycle detected: %s",Joiner.on(" -> ").join(newCycleDetector));
  }
  if (sourceToRule.containsKey(mlSource)) {
    return;
  }
  ImmutableSortedSet.Builder<BuildRule> depsBuilder=ImmutableSortedSet.naturalOrder();
  if (sources.containsKey(mlSource)) {
    for (    Path dep : checkNotNull(sources.get(mlSource))) {
      generateSingleMLBytecodeCompilation(sourceToRule,cmoFiles,dep,sources,newCycleDetector);
      depsBuilder.addAll(checkNotNull(sourceToRule.get(dep)));
    }
  }
  ImmutableSortedSet<BuildRule> deps=depsBuilder.build();
  String name=mlSource.toFile().getName();
  BuildTarget buildTarget=createMLBytecodeCompileBuildTarget(params.getBuildTarget(),name);
  BuildRuleParams compileParams=params.copyWithChanges(buildTarget,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getDeclaredDeps().get()).addAll(deps).addAll(ocamlContext.getBytecodeCompileDeps()).addAll(cCompiler.getDeps(pathResolver)).build()),params.getExtraDeps());
  String outputFileName=getMLBytecodeOutputName(name);
  Path outputPath=ocamlContext.getCompileBytecodeOutputDir().resolve(outputFileName);
  final ImmutableList<String> compileFlags=getCompileFlags(true,false);
  BuildRule compileBytecode=new OCamlMLCompile(compileParams,pathResolver,new OCamlMLCompileStep.Args(params.getProjectFilesystem().getAbsolutifier(),cCompiler.getEnvironment(pathResolver),cCompiler.getCommandPrefix(pathResolver),ocamlContext.getOcamlBytecodeCompiler().get(),ocamlContext.getOCamlInteropIncludesDir(),outputPath,mlSource,compileFlags));
  resolver.addToIndex(compileBytecode);
  sourceToRule.put(mlSource,ImmutableSortedSet.<BuildRule>naturalOrder().add(compileBytecode).addAll(deps).build());
  if (!outputFileName.endsWith(OCamlCompilables.OCAML_CMI)) {
    cmoFiles.add(new BuildTargetSourcePath(compileBytecode.getBuildTarget()));
  }
}
