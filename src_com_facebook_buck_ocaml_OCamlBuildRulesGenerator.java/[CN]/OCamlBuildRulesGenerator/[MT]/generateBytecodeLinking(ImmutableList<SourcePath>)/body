{
  BuildRuleParams linkParams=params.copyWithChanges(addBytecodeFlavor(params.getBuildTarget()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(pathResolver.filterBuildRuleInputs(allInputs)).addAll(ocamlContext.getBytecodeLinkDeps()).addAll(FluentIterable.from(pathResolver.filterBuildRuleInputs(ocamlContext.getLinkableInput().getInputs())).append(pathResolver.filterBuildRuleInputs(ocamlContext.getNativeLinkableInput().getInputs())).filter(Predicates.not(Predicates.instanceOf(OCamlBuild.class)))).build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  ImmutableList<String> linkerInputs=FluentIterable.from(allInputs).transform(pathResolver.getPathFunction()).transform(Functions.toStringFunction()).toList();
  ImmutableList.Builder<String> flags=ImmutableList.builder();
  flags.addAll(ocamlContext.getFlags());
  flags.addAll(ocamlContext.getCommonCLinkerFlags());
  OCamlLink link=new OCamlLink(linkParams,pathResolver,allInputs,new OCamlLinkStep.Args(cxxCompiler.getCommandPrefix(pathResolver),ocamlContext.getOcamlBytecodeCompiler().get(),ocamlContext.getBytecodeOutput(),ocamlContext.getLinkableInput().getArgs(),ocamlContext.getNativeLinkableInput().getArgs(),linkerInputs,flags.build(),ocamlContext.isLibrary(),true));
  resolver.addToIndex(link);
  return link;
}
