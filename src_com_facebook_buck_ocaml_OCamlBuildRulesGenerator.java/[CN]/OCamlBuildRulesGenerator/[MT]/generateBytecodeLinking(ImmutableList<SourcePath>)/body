{
  BuildRuleParams linkParams=params.copyWithChanges(addBytecodeFlavor(params.getBuildTarget()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(pathResolver.filterBuildRuleInputs(allInputs)).addAll(ocamlContext.getBytecodeLinkDeps()).addAll(FluentIterable.from(ocamlContext.getBytecodeLinkableInput().getArgs()).append(ocamlContext.getCLinkableInput().getArgs()).transformAndConcat(Arg.getDepsFunction(pathResolver)).filter(Predicates.not(Predicates.instanceOf(OCamlBuild.class)))).addAll(cxxCompiler.getDeps(pathResolver)).build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  ImmutableList.Builder<String> flags=ImmutableList.builder();
  flags.addAll(ocamlContext.getFlags());
  flags.addAll(ocamlContext.getCommonCLinkerFlags());
  OCamlLink link=new OCamlLink(linkParams,pathResolver,allInputs,cxxCompiler.getEnvironment(pathResolver),cxxCompiler.getCommandPrefix(pathResolver),ocamlContext.getOcamlBytecodeCompiler().get(),flags.build(),ocamlContext.getOCamlInteropIncludesDir(),ocamlContext.getBytecodeOutput(),ocamlContext.getBytecodeLinkableInput().getArgs(),ocamlContext.getCLinkableInput().getArgs(),ocamlContext.isLibrary(),true);
  resolver.addToIndex(link);
  return link;
}
