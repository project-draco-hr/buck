{
  ProjectFilesystem stubFilesystem=FakeProjectFilesystem.createJavaOnlyFilesystem();
  Files.createDirectories(stubFilesystem.getRootPath().resolve("java/com/example/base"));
  FakeSourcePath pathToAidl=new FakeSourcePath(stubFilesystem,"java/com/example/base/IWhateverService.aidl");
  String importPath=Paths.get("java/com/example/base").toString();
  BuildTarget target=BuildTargetFactory.newInstance("//java/com/example/base:IWhateverService");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).setProjectFilesystem(stubFilesystem).build();
  GenAidl genAidlRule=new GenAidl(params,new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer())),pathToAidl,importPath);
  GenAidlDescription description=new GenAidlDescription();
  assertEquals(GenAidlDescription.TYPE,description.getBuildRuleType());
  assertTrue(genAidlRule.getProperties().is(ANDROID));
  List<Step> steps=genAidlRule.getBuildSteps(null,new FakeBuildableContext());
  final String pathToAidlExecutable=Paths.get("/usr/local/bin/aidl").toString();
  final String pathToFrameworkAidl=Paths.get("/home/root/android/platforms/android-16/framework.aidl").toString();
  AndroidPlatformTarget androidPlatformTarget=createMock(AndroidPlatformTarget.class);
  expect(androidPlatformTarget.getAidlExecutable()).andReturn(Paths.get(pathToAidlExecutable));
  expect(androidPlatformTarget.getAndroidFrameworkIdlFile()).andReturn(Paths.get(pathToFrameworkAidl));
  ExecutionContext executionContext=createMock(ExecutionContext.class);
  expect(executionContext.getAndroidPlatformTarget()).andReturn(androidPlatformTarget);
  replay(androidPlatformTarget,executionContext);
  Path outputDirectory=BuildTargets.getScratchPath(target,"__%s.aidl");
  MakeCleanDirectoryStep mkdirStep=(MakeCleanDirectoryStep)steps.get(1);
  assertEquals("gen_aidl() should make a directory at " + outputDirectory,outputDirectory,mkdirStep.getPath());
  ShellStep aidlStep=(ShellStep)steps.get(2);
  assertEquals("gen_aidl() should use the aidl binary to write .java files.",String.format("(cd %s && %s -p%s -I%s -o%s %s)",stubFilesystem.getRootPath(),pathToAidlExecutable,pathToFrameworkAidl,stubFilesystem.resolve(importPath),stubFilesystem.resolve(outputDirectory),pathToAidl),aidlStep.getDescription(executionContext));
  assertEquals(5,steps.size());
  verify(androidPlatformTarget,executionContext);
}
