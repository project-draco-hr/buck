{
  BuildContext context=null;
  String pathToAidl="java/com/example/base/IWhateverService.aidl";
  String importPath="java/com/example/base/";
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  GenAidl.Builder builder=GenAidl.newGenAidlRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//java/com/example/base:IWhateverService")).setAidl(pathToAidl).setImportPath(importPath);
  Buildable genAidlRule=ruleResolver.buildAndAddToIndex(builder).getBuildable();
  assertEquals(BuildRuleType.GEN_AIDL,builder.getType());
  assertTrue(genAidlRule.getProperties().is(ANDROID));
  assertEquals(ImmutableList.of(pathToAidl),genAidlRule.getInputsToCompareToOutput());
  List<Step> steps=genAidlRule.getBuildSteps(context,new FakeBuildableContext());
  final String pathToAidlExecutable="/usr/local/bin/aidl";
  final String pathToFrameworkAidl="/home/root/android/platforms/android-16/framework.aidl";
  AndroidPlatformTarget androidPlatformTarget=createMock(AndroidPlatformTarget.class);
  File aidlExecutable=createMock(File.class);
  expect(aidlExecutable.getAbsolutePath()).andReturn(pathToAidlExecutable);
  expect(androidPlatformTarget.getAidlExecutable()).andReturn(aidlExecutable);
  File frameworkIdlFile=createMock(File.class);
  expect(frameworkIdlFile.getAbsolutePath()).andReturn(pathToFrameworkAidl);
  expect(androidPlatformTarget.getAndroidFrameworkIdlFile()).andReturn(frameworkIdlFile);
  ExecutionContext executionContext=createMock(ExecutionContext.class);
  expect(executionContext.getAndroidPlatformTarget()).andReturn(androidPlatformTarget);
  expect(executionContext.getProjectFilesystem()).andReturn(new ProjectFilesystem(new File("."))).times(2);
  replay(androidPlatformTarget,aidlExecutable,frameworkIdlFile,executionContext);
  Path outputDirectory=Paths.get(".",BuckConstant.BIN_DIR,"/java/com/example/base/.IWhateverService.aidl");
  MkdirStep mkdirStep=(MkdirStep)steps.get(0);
  assertEquals("gen_aidl() should make a directory at " + outputDirectory,outputDirectory,mkdirStep.getPath(executionContext));
  ShellStep aidlStep=(ShellStep)steps.get(1);
  assertEquals("gen_aidl() should use the aidl binary to write .java files.",String.format("%s -b -p%s -I%s -o%s %s",pathToAidlExecutable,pathToFrameworkAidl,importPath,outputDirectory,pathToAidl),aidlStep.getDescription(executionContext));
  assertEquals(4,steps.size());
  verify(androidPlatformTarget,aidlExecutable,frameworkIdlFile,executionContext);
}
