{
  if (existingFileMode == ExistingFileMode.OVERWRITE_AND_CLEAN_DIRECTORIES) {
    try (ZipFile zip=new ZipFile(zipFile.toFile())){
      Enumeration<ZipArchiveEntry> entries=zip.getEntries();
      while (entries.hasMoreElements()) {
        ZipArchiveEntry entry=entries.nextElement();
        filesystem.deleteRecursivelyIfExists(relativePath.resolve(entry.getName()));
      }
    }
   }
  ImmutableList.Builder<Path> filesWritten=ImmutableList.builder();
  try (ZipFile zip=new ZipFile(zipFile.toFile())){
    Enumeration<ZipArchiveEntry> entries=zip.getEntries();
    while (entries.hasMoreElements()) {
      ZipArchiveEntry entry=entries.nextElement();
      String fileName=entry.getName();
      Path target=relativePath.resolve(fileName);
      if (entry.isDirectory()) {
        filesystem.mkdirs(target);
      }
 else {
        filesystem.createParentDirs(target);
        filesWritten.add(target);
        try (InputStream is=zip.getInputStream(entry)){
          if (entry.isUnixSymlink()) {
            filesystem.createSymLink(target,filesystem.getRootPath().getFileSystem().getPath(new String(ByteStreams.toByteArray(is),Charsets.UTF_8)),true);
          }
 else {
            try (OutputStream out=filesystem.newFileOutputStream(target)){
              ByteStreams.copy(is,out);
            }
           }
        }
         filesystem.resolve(target).toFile().setLastModified(entry.getTime());
        Set<PosixFilePermission> permissions=MorePosixFilePermissions.fromMode(entry.getExternalAttributes() >> 16);
        if (permissions.contains(PosixFilePermission.OWNER_EXECUTE)) {
          MoreFiles.makeExecutable(filesystem.resolve(target));
        }
      }
    }
  }
   return filesWritten.build();
}
