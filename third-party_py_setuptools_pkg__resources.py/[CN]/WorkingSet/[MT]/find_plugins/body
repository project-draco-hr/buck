def find_plugins(self, plugin_env, full_env=None, installer=None, fallback=True):
    'Find all activatable distributions in `plugin_env`\n\n        Example usage::\n\n            distributions, errors = working_set.find_plugins(\n                Environment(plugin_dirlist)\n            )\n            map(working_set.add, distributions)  # add plugins+libs to sys.path\n            print \'Could not load\', errors        # display errors\n\n        The `plugin_env` should be an ``Environment`` instance that contains\n        only distributions that are in the project\'s "plugin directory" or\n        directories. The `full_env`, if supplied, should be an ``Environment``\n        contains all currently-available distributions.  If `full_env` is not\n        supplied, one is created automatically from the ``WorkingSet`` this\n        method is called on, which will typically mean that every directory on\n        ``sys.path`` will be scanned for distributions.\n\n        `installer` is a standard installer callback as used by the\n        ``resolve()`` method. The `fallback` flag indicates whether we should\n        attempt to resolve older versions of a plugin if the newest version\n        cannot be resolved.\n\n        This method returns a 2-tuple: (`distributions`, `error_info`), where\n        `distributions` is a list of the distributions found in `plugin_env`\n        that were loadable, along with any other distributions that are needed\n        to resolve their dependencies.  `error_info` is a dictionary mapping\n        unloadable plugin distributions to an exception instance describing the\n        error that occurred. Usually this will be a ``DistributionNotFound`` or\n        ``VersionConflict`` instance.\n        '
    plugin_projects = list(plugin_env)
    plugin_projects.sort()
    error_info = {}
    distributions = {}
    if (full_env is None):
        env = Environment(self.entries)
        env += plugin_env
    else:
        env = (full_env + plugin_env)
    shadow_set = self.__class__([])
    list(map(shadow_set.add, self))
    for project_name in plugin_projects:
        for dist in plugin_env[project_name]:
            req = [dist.as_requirement()]
            try:
                resolvees = shadow_set.resolve(req, env, installer)
            except ResolutionError:
                v = sys.exc_info()[1]
                error_info[dist] = v
                if fallback:
                    continue
                else:
                    break
            else:
                list(map(shadow_set.add, resolvees))
                distributions.update(dict.fromkeys(resolvees))
                break
    distributions = list(distributions)
    distributions.sort()
    return (distributions, error_info)
