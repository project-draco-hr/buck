def parse_version(s):
    'Convert a version string to a chronologically-sortable key\n\n    This is a rough cross between distutils\' StrictVersion and LooseVersion;\n    if you give it versions that would work with StrictVersion, then it behaves\n    the same; otherwise it acts like a slightly-smarter LooseVersion. It is\n    *possible* to create pathological version coding schemes that will fool\n    this parser, but they should be very rare in practice.\n\n    The returned value will be a tuple of strings.  Numeric portions of the\n    version are padded to 8 digits so they will compare numerically, but\n    without relying on how numbers compare relative to strings.  Dots are\n    dropped, but dashes are retained.  Trailing zeros between alpha segments\n    or dashes are suppressed, so that e.g. "2.4.0" is considered the same as\n    "2.4". Alphanumeric parts are lower-cased.\n\n    The algorithm assumes that strings like "-" and any alpha string that\n    alphabetically follows "final"  represents a "patch level".  So, "2.4-1"\n    is assumed to be a branch or patch of "2.4", and therefore "2.4.1" is\n    considered newer than "2.4-1", which in turn is newer than "2.4".\n\n    Strings like "a", "b", "c", "alpha", "beta", "candidate" and so on (that\n    come before "final" alphabetically) are assumed to be pre-release versions,\n    so that the version "2.4" is considered newer than "2.4a1".\n\n    Finally, to handle miscellaneous cases, the strings "pre", "preview", and\n    "rc" are treated as if they were "c", i.e. as though they were release\n    candidates, and therefore are not as new as a version string that does not\n    contain them, and "dev" is replaced with an \'@\' so that it sorts lower than\n    than any other pre-release tag.\n    '
    parts = []
    for part in _parse_version_parts(s.lower()):
        if part.startswith('*'):
            if (part < '*final'):
                while (parts and (parts[(-1)] == '*final-')):
                    parts.pop()
            while (parts and (parts[(-1)] == '00000000')):
                parts.pop()
        parts.append(part)
    return tuple(parts)
