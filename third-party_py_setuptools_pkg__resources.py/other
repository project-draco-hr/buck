'\nPackage resource API\n--------------------\n\nA resource is a logical file contained within a package, or a logical\nsubdirectory thereof.  The package resource API expects resource names\nto have their path parts separated with ``/``, *not* whatever the local\npath separator is.  Do not use os.path operations to manipulate resource\nnames being passed into the API.\n\nThe package resource API is designed to work with normal filesystem packages,\n.egg files, and unpacked .egg files.  It can also work in a limited way with\n.zip files and with custom PEP 302 loaders that support the ``get_data()``\nmethod.\n'
import sys
import os
import time
import re
import imp
import zipfile
import zipimport
import warnings
import stat
import functools
import pkgutil
import token
import symbol
import operator
import platform
from pkgutil import get_importer
try:
    from urlparse import urlparse, urlunparse
except ImportError:
    from urllib.parse import urlparse, urlunparse
try:
    frozenset
except NameError:
    from sets import ImmutableSet as frozenset
try:
    basestring
    next = (lambda o: o.next())
    from cStringIO import StringIO as BytesIO
except NameError:
    basestring = str
    from io import BytesIO

    def execfile(fn, globs=None, locs=None):
        if (globs is None):
            globs = globals()
        if (locs is None):
            locs = globs
        exec compile(open(fn).read(), fn, 'exec') in globs, locs
from os import utime
try:
    from os import mkdir, rename, unlink
    WRITE_SUPPORT = True
except ImportError:
    WRITE_SUPPORT = False
from os import open as os_open
from os.path import isdir, split
if ((sys.version_info >= (3, 3)) and (sys.implementation.name == 'cpython')):
    import importlib._bootstrap as importlib_bootstrap
else:
    importlib_bootstrap = None
try:
    import parser
except ImportError:
    pass
_state_vars = {}
_sget_none = _sset_none = (lambda *args: None)
__all__ = ['require', 'run_script', 'get_provider', 'get_distribution', 'load_entry_point', 'get_entry_map', 'get_entry_info', 'iter_entry_points', 'resource_string', 'resource_stream', 'resource_filename', 'resource_listdir', 'resource_exists', 'resource_isdir', 'declare_namespace', 'working_set', 'add_activation_listener', 'find_distributions', 'set_extraction_path', 'cleanup_resources', 'get_default_cache', 'Environment', 'WorkingSet', 'ResourceManager', 'Distribution', 'Requirement', 'EntryPoint', 'ResolutionError', 'VersionConflict', 'DistributionNotFound', 'UnknownExtra', 'ExtractionError', 'parse_requirements', 'parse_version', 'safe_name', 'safe_version', 'get_platform', 'compatible_platforms', 'yield_lines', 'split_sections', 'safe_extra', 'to_filename', 'invalid_marker', 'evaluate_marker', 'ensure_directory', 'normalize_path', 'EGG_DIST', 'BINARY_DIST', 'SOURCE_DIST', 'CHECKOUT_DIST', 'DEVELOP_DIST', 'IMetadataProvider', 'IResourceProvider', 'FileMetadata', 'PathMetadata', 'EggMetadata', 'EmptyProvider', 'empty_provider', 'NullProvider', 'EggProvider', 'DefaultProvider', 'ZipProvider', 'register_finder', 'register_namespace_handler', 'register_loader_type', 'fixup_namespace_packages', 'get_importer', 'run_main', 'AvailableDistributions']
_provider_factories = {}
PY_MAJOR = sys.version[:3]
EGG_DIST = 3
BINARY_DIST = 2
SOURCE_DIST = 1
CHECKOUT_DIST = 0
DEVELOP_DIST = (-1)
macosVersionString = re.compile('macosx-(\\d+)\\.(\\d+)-(.*)')
darwinVersionString = re.compile('darwin-(\\d+)\\.(\\d+)\\.(\\d+)-(.*)')
get_platform = get_build_platform
run_main = run_script
AvailableDistributions = Environment
invalid_marker = MarkerEvaluation.is_invalid_marker
evaluate_marker = MarkerEvaluation.evaluate_marker
register_loader_type(object, NullProvider)
register_loader_type(type(None), DefaultProvider)
if (importlib_bootstrap is not None):
    register_loader_type(importlib_bootstrap.SourceFileLoader, DefaultProvider)
empty_provider = EmptyProvider()
register_loader_type(zipimport.zipimporter, ZipProvider)
_declare_state('dict', _distribution_finders={})
register_finder(zipimport.zipimporter, find_eggs_in_zip)
register_finder(object, find_nothing)
register_finder(pkgutil.ImpImporter, find_on_path)
if (importlib_bootstrap is not None):
    register_finder(importlib_bootstrap.FileFinder, find_on_path)
_declare_state('dict', _namespace_handlers={})
_declare_state('dict', _namespace_packages={})
register_namespace_handler(pkgutil.ImpImporter, file_ns_handler)
register_namespace_handler(zipimport.zipimporter, file_ns_handler)
if (importlib_bootstrap is not None):
    register_namespace_handler(importlib_bootstrap.FileFinder, file_ns_handler)
register_namespace_handler(object, null_ns_handler)
LINE_END = re.compile('\\s*(#.*)?$').match
CONTINUE = re.compile('\\s*\\\\\\s*(#.*)?$').match
DISTRO = re.compile('\\s*((\\w|[-.])+)').match
VERSION = re.compile('\\s*(<=?|>=?|==|!=)\\s*((\\w|[-.])+)').match
COMMA = re.compile('\\s*,').match
OBRACKET = re.compile('\\s*\\[').match
CBRACKET = re.compile('\\s*\\]').match
MODULE = re.compile('\\w+(\\.\\w+)*$').match
EGG_NAME = re.compile('(?P<name>[^-]+)( -(?P<ver>[^-]+) (-py(?P<pyver>[^-]+) (-(?P<plat>.+))? )? )?', (re.VERBOSE | re.IGNORECASE)).match
component_re = re.compile('(\\d+ | [a-z]+ | \\.| -)', re.VERBOSE)
replace = {'pre': 'c', 'preview': 'c', '-': 'final-', 'rc': 'c', 'dev': '@', }.get
_distributionImpl = {'.egg': Distribution, '.egg-info': Distribution, '.dist-info': DistInfoDistribution, }
state_machine = {'<': '--T', '<=': 'T-T', '>': 'F+F', '>=': 'T+F', '==': 'T..', '!=': 'F++', }
_manager = ResourceManager()
_initialize(globals())
working_set = WorkingSet._build_master()
_declare_state('object', working_set=working_set)
require = working_set.require
iter_entry_points = working_set.iter_entry_points
add_activation_listener = working_set.subscribe
run_script = working_set.run_script
run_main = run_script
add_activation_listener((lambda dist: dist.activate()))
working_set.entries = []
list(map(working_set.add_entry, sys.path))
