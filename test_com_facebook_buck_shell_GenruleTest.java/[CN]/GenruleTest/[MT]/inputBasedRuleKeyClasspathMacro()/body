{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  GenruleBuilder ruleBuilder=GenruleBuilder.newGenruleBuilder(BuildTargetFactory.newInstance("//:rule")).setCmd("run $(classpath //:dep)").setOut("output");
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  JavaLibrary dep=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:dep")).addSrc(Paths.get("source.java")).build(resolver,filesystem);
  filesystem.writeContentsToPath("something",Paths.get("source.java"));
  filesystem.writeContentsToPath("something",dep.getPathToOutput());
  BuildRule rule=ruleBuilder.build(resolver);
  DefaultRuleKeyBuilderFactory defaultRuleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(0,new DefaultFileHashCache(filesystem),new SourcePathResolver(resolver));
  InputBasedRuleKeyBuilderFactory inputBasedRuleKeyBuilderFactory=new InputBasedRuleKeyBuilderFactory(0,new DefaultFileHashCache(filesystem),new SourcePathResolver(resolver));
  RuleKey originalRuleKey=defaultRuleKeyBuilderFactory.build(rule);
  RuleKey originalInputRuleKey=inputBasedRuleKeyBuilderFactory.build(rule).get();
  resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:dep")).addSrc(Paths.get("source.java")).setResourcesRoot(Paths.get("resource_root")).build(resolver,filesystem);
  rule=ruleBuilder.build(resolver);
  defaultRuleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(0,new DefaultFileHashCache(filesystem),new SourcePathResolver(resolver));
  inputBasedRuleKeyBuilderFactory=new InputBasedRuleKeyBuilderFactory(0,new DefaultFileHashCache(filesystem),new SourcePathResolver(resolver));
  RuleKey unchangedRuleKey=defaultRuleKeyBuilderFactory.build(rule);
  RuleKey unchangedInputBasedRuleKey=inputBasedRuleKeyBuilderFactory.build(rule).get();
  assertThat(unchangedRuleKey,Matchers.not(Matchers.equalTo(originalRuleKey)));
  assertThat(unchangedInputBasedRuleKey,Matchers.equalTo(originalInputRuleKey));
  resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  dep=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:dep")).addSrc(Paths.get("source.java")).build(resolver,filesystem);
  filesystem.writeContentsToPath("something else",dep.getPathToOutput());
  rule=ruleBuilder.build(resolver);
  inputBasedRuleKeyBuilderFactory=new InputBasedRuleKeyBuilderFactory(0,new DefaultFileHashCache(filesystem),new SourcePathResolver(resolver));
  RuleKey changedInputBasedRuleKey=inputBasedRuleKeyBuilderFactory.build(rule).get();
  assertThat(changedInputBasedRuleKey,Matchers.not(Matchers.equalTo(originalInputRuleKey)));
}
