{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  createSampleJavaBinaryRule(ruleResolver);
  Map<String,?> instance=ImmutableMap.of("name","katana_manifest","srcs",ImmutableList.<String>of("convert_to_katana.py","AndroidManifest.xml"),"cmd","python convert_to_katana.py AndroidManifest.xml > $OUT","out","AndroidManifest.xml","deps",ImmutableList.<String>of("//java/com/facebook/util:util"));
  BuildTargetParser parser=EasyMock.createNiceMock(BuildTargetParser.class);
  EasyMock.expect(parser.parse(EasyMock.eq("//java/com/facebook/util:util"),EasyMock.anyObject(ParseContext.class))).andStubReturn(BuildTargetFactory.newInstance("//java/com/facebook/util:util"));
  EasyMock.replay(parser);
  BuildTarget buildTarget=BuildTargetFactory.newInstance("//src/com/facebook/katana","katana_manifest");
  BuildRuleFactoryParams params=NonCheckingBuildRuleFactoryParams.createNonCheckingBuildRuleFactoryParams(instance,parser,buildTarget);
  GenruleBuildRuleFactory factory=new GenruleBuildRuleFactory();
  Builder builder=factory.newInstance(params);
  builder.setRelativeToAbsolutePathFunction(relativeToAbsolutePathFunction);
  Genrule genrule=ruleResolver.buildAndAddToIndex(builder);
  assertEquals(BuildRuleType.GENRULE,genrule.getType());
  assertEquals(GEN_DIR + "/src/com/facebook/katana/AndroidManifest.xml",genrule.getPathToOutputFile());
  assertEquals("/opt/local/fbandroid/" + GEN_DIR + "/src/com/facebook/katana/AndroidManifest.xml",genrule.getAbsoluteOutputFilePath());
  BuildContext buildContext=null;
  ImmutableSortedSet<String> inputsToCompareToOutputs=ImmutableSortedSet.of("src/com/facebook/katana/convert_to_katana.py","src/com/facebook/katana/AndroidManifest.xml");
  assertEquals(inputsToCompareToOutputs,genrule.getInputsToCompareToOutput());
  List<Step> steps=genrule.buildInternal(buildContext);
  assertEquals(7,steps.size());
  Step firstStep=steps.get(0);
  assertTrue(firstStep instanceof ShellStep);
  ShellStep rmCommand=(ShellStep)firstStep;
  ExecutionContext executionContext=newEmptyExecutionContext();
  assertEquals("First command should delete the output file to be written by the genrule.",ImmutableList.of("rm","-f",GEN_DIR + "/src/com/facebook/katana/AndroidManifest.xml"),rmCommand.getShellCommand(executionContext));
  Step secondStep=steps.get(1);
  assertTrue(secondStep instanceof MkdirStep);
  MkdirStep mkdirCommand=(MkdirStep)secondStep;
  assertEquals("Second command should make sure the output directory exists.",ImmutableList.of("mkdir","-p",GEN_DIR + "/src/com/facebook/katana/"),mkdirCommand.getShellCommand(executionContext));
  Step mkTmpDir=steps.get(2);
  assertTrue(mkTmpDir instanceof MakeCleanDirectoryStep);
  MakeCleanDirectoryStep secondMkdirCommand=(MakeCleanDirectoryStep)mkTmpDir;
  String pathToTmpDir=GEN_DIR + "/src/com/facebook/katana/katana_manifest__tmp";
  assertEquals("Third command should create the temp directory to be written by the genrule.",pathToTmpDir,secondMkdirCommand.getPath());
  Step mkSrcDir=steps.get(3);
  assertTrue(mkSrcDir instanceof MakeCleanDirectoryStep);
  MakeCleanDirectoryStep thirdMkdirCommand=(MakeCleanDirectoryStep)mkTmpDir;
  String pathToSrcDir=GEN_DIR + "/src/com/facebook/katana/katana_manifest__srcs";
  assertEquals("Fourth command should create the temp source directory to be written by the genrule.",pathToTmpDir,thirdMkdirCommand.getPath());
  MkdirAndSymlinkFileStep linkSource1=(MkdirAndSymlinkFileStep)steps.get(4);
  assertEquals("src/com/facebook/katana/convert_to_katana.py",linkSource1.getSource());
  assertEquals(pathToSrcDir + "/convert_to_katana.py",linkSource1.getTarget());
  MkdirAndSymlinkFileStep linkSource2=(MkdirAndSymlinkFileStep)steps.get(5);
  assertEquals("src/com/facebook/katana/AndroidManifest.xml",linkSource2.getSource());
  assertEquals(pathToSrcDir + "/AndroidManifest.xml",linkSource2.getTarget());
  Step sixthStep=steps.get(6);
  assertTrue(sixthStep instanceof ShellStep);
  ShellStep genruleCommand=(ShellStep)sixthStep;
  assertEquals("genrule: python convert_to_katana.py AndroidManifest.xml > $OUT",genruleCommand.getShortName(executionContext));
  assertEquals(ImmutableMap.<String,String>builder().put("SRCS","/opt/local/fbandroid/src/com/facebook/katana/convert_to_katana.py " + "/opt/local/fbandroid/src/com/facebook/katana/AndroidManifest.xml").put("OUT","/opt/local/fbandroid/" + GEN_DIR + "/src/com/facebook/katana/AndroidManifest.xml").put("DEPS","/opt/local/fbandroid/" + GEN_DIR + "/java/com/facebook/util/lib__util__output/util.jar").put("TMP","/opt/local/fbandroid/" + pathToTmpDir).put("SRCDIR","/opt/local/fbandroid/" + pathToSrcDir).build(),genruleCommand.getEnvironmentVariables(executionContext));
  assertEquals(ImmutableList.of("/bin/bash","-c","python convert_to_katana.py AndroidManifest.xml > $OUT"),genruleCommand.getShellCommand(executionContext));
}
