{
  ProjectFilesystem filesystem=EasyMock.createNiceMock(ProjectFilesystem.class);
  EasyMock.expect(filesystem.getPathRelativizer()).andStubReturn(relativeToAbsolutePathFunction);
  EasyMock.replay(filesystem);
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  JavaBinaryRule javaBinary=createSampleJavaBinaryRule(ruleResolver);
  String originalCmd=String.format("$(location :%s) $(location %s) $OUT",javaBinary.getBuildTarget().getShortName(),javaBinary.getBuildTarget().getFullyQualifiedName());
  String contextBasePath=javaBinary.getBuildTarget().getBasePath();
  Set<? extends BuildRule> deps=ImmutableSet.of(javaBinary);
  Genrule rule=createGenrule(ruleResolver,originalCmd,contextBasePath,deps);
  AbstractGenruleStep genruleStep=rule.createGenruleStep();
  String transformedString=genruleStep.replaceMatches(filesystem,originalCmd);
  String pathToOutput=getAbsolutePathInBase(GEN_DIR + "/java/com/facebook/util/ManifestGenerator.jar");
  String expectedCmd=String.format("%s %s $OUT",pathToOutput,pathToOutput);
  assertEquals(expectedCmd,transformedString);
  EasyMock.verify(filesystem);
}
