{
  String bash="rm -rf /usr";
  String cmdExe="rmdir /s /q C:\\Windows";
  String cmd="echo \"Hello\"";
  String genruleName="//example:genrule";
  ExecutionContext linuxExecutionContext=newEmptyExecutionContext(Platform.LINUX);
  ExecutionContext windowsExecutionContext=newEmptyExecutionContext(Platform.WINDOWS);
  BuildTarget target=BuildTargetFactory.newInstance(genruleName);
  Genrule genrule=GenruleBuilder.createGenrule(target).setBash(bash).setCmdExe(cmdExe).setOut("out.txt").build();
  ImmutableList<String> command=genrule.createGenruleStep().getShellCommand(linuxExecutionContext);
  assertEquals(ImmutableList.of("/bin/bash","-e","-c",bash),command);
  command=genrule.createGenruleStep().getShellCommand(windowsExecutionContext);
  assertEquals(ImmutableList.of("cmd.exe","/c",cmdExe),command);
  BuildTarget fallbackTarget=target;
  genrule=GenruleBuilder.createGenrule(fallbackTarget).setCmd(cmd).setOut("out.txt").build();
  command=genrule.createGenruleStep().getShellCommand(linuxExecutionContext);
  assertEquals(ImmutableList.of("/bin/bash","-e","-c",cmd),command);
  command=genrule.createGenruleStep().getShellCommand(windowsExecutionContext);
  assertEquals(ImmutableList.of("cmd.exe","/c",cmd),command);
  genrule=GenruleBuilder.createGenrule(target).setOut("out.txt").build();
  try {
    genrule.createGenruleStep().getShellCommand(linuxExecutionContext);
  }
 catch (  HumanReadableException e) {
    assertEquals(String.format("You must specify either bash or cmd for genrule %s.",genruleName),e.getHumanReadableErrorMessage());
  }
  try {
    genrule.createGenruleStep().getShellCommand(windowsExecutionContext);
  }
 catch (  HumanReadableException e) {
    assertEquals(String.format("You must specify either cmd_exe or cmd for genrule %s.",genruleName),e.getHumanReadableErrorMessage());
  }
}
