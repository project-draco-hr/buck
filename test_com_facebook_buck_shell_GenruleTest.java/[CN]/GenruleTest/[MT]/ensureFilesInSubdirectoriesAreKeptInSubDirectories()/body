{
  ProjectFilesystem projectFilesystem=new FakeProjectFilesystem();
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  BuildTarget target=BuildTargetFactory.newInstance("//:example");
  BuildRule rule=GenruleBuilder.newGenruleBuilder(target).setBash("ignored").setSrcs(ImmutableList.<SourcePath>of(new PathSourcePath(projectFilesystem,Paths.get("in-dir.txt")),new PathSourcePath(projectFilesystem,Paths.get("foo/bar.html")),new PathSourcePath(projectFilesystem,Paths.get("other/place.txt")))).setOut("example-file").build(resolver);
  ImmutableList.Builder<Step> builder=ImmutableList.builder();
  ((Genrule)rule).addSymlinkCommands(builder);
  ImmutableList<Step> commands=builder.build();
  String baseTmpPath=projectFilesystem.getBuckPaths().getGenDir().toString() + "/example__srcs/";
  assertEquals(3,commands.size());
  MkdirAndSymlinkFileStep linkCmd=(MkdirAndSymlinkFileStep)commands.get(0);
  assertEquals(Paths.get("in-dir.txt"),linkCmd.getSource());
  assertEquals(Paths.get(baseTmpPath + "in-dir.txt"),linkCmd.getTarget());
  linkCmd=(MkdirAndSymlinkFileStep)commands.get(1);
  assertEquals(Paths.get("foo/bar.html"),linkCmd.getSource());
  assertEquals(Paths.get(baseTmpPath + "foo/bar.html"),linkCmd.getTarget());
  linkCmd=(MkdirAndSymlinkFileStep)commands.get(2);
  assertEquals(Paths.get("other/place.txt"),linkCmd.getSource());
  assertEquals(Paths.get(baseTmpPath + "other/place.txt"),linkCmd.getTarget());
}
