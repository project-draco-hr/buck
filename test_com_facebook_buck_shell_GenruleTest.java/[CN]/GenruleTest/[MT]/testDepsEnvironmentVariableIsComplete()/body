{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildTarget depTarget=BuildTarget.builder("//foo","bar").build();
  BuildRule dep=new FakeBuildRule(JavaLibraryDescription.TYPE,depTarget){
    @Override public Path getPathToOutputFile(){
      return Paths.get("buck-out/gen/foo/bar.jar");
    }
  }
;
  resolver.addToIndex(dep);
  BuildRule genrule=GenruleBuilder.newGenruleBuilder(BuildTarget.builder("//foo","baz").build()).setBash("cat $DEPS > $OUT").setOut("deps.txt").setDeps(ImmutableSortedSet.of(dep)).build(resolver,fakeFilesystem);
  AbstractGenruleStep genruleStep=((Genrule)genrule).createGenruleStep();
  ExecutionContext context=newEmptyExecutionContext(Platform.LINUX);
  ImmutableMap<String,String> environmentVariables=genruleStep.getEnvironmentVariables(context);
  assertEquals("Make sure that the use of $DEPS pulls in $GEN_DIR, as well.",ImmutableMap.of("DEPS","$GEN_DIR/foo/bar.jar","GEN_DIR",getAbsolutePathInBase("buck-out/gen").toString(),"OUT",getAbsolutePathInBase("buck-out/gen/foo/deps.txt").toString()),environmentVariables);
  List<String> keysInOrder=ImmutableList.copyOf(environmentVariables.keySet());
  assertEquals("GEN_DIR",keysInOrder.get(1));
  assertEquals("DEPS",keysInOrder.get(2));
}
