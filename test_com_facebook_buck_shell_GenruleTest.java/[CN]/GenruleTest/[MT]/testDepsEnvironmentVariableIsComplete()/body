{
  BuildTarget depTarget=new BuildTarget("//foo","bar");
  BuildRule dep=new FakeBuildRule(JavaLibraryDescription.TYPE,depTarget){
    @Override public Path getPathToOutputFile(){
      return Paths.get("buck-out/gen/foo/bar.jar");
    }
  }
;
  BuildRule genrule=GenruleBuilder.createGenrule(new BuildTarget("//foo","baz")).setBash("cat $DEPS > $OUT").setOut("deps.txt").addDep(dep).build();
  AbstractGenruleStep genruleStep=((Genrule)genrule.getBuildable()).createGenruleStep();
  ExecutionContext context=newEmptyExecutionContext(Platform.LINUX);
  Map<String,String> environmentVariables=genruleStep.getEnvironmentVariables(context);
  assertEquals("Make sure that the use of $DEPS pulls in $GEN_DIR, as well.",ImmutableMap.of("DEPS","$GEN_DIR/foo/bar.jar","GEN_DIR","buck-out/gen","OUT","buck-out/gen/foo/deps.txt"),environmentVariables);
  List<String> keysInOrder=ImmutableList.copyOf(environmentVariables.keySet());
  assertEquals("GEN_DIR",keysInOrder.get(1));
  assertEquals("DEPS",keysInOrder.get(2));
}
