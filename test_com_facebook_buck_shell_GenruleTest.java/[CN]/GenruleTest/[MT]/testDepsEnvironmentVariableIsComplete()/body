{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  BuildTarget depTarget=BuildTargetFactory.newInstance(filesystem.getRootPath(),"//foo:bar");
  BuildRule dep=new FakeBuildRule(depTarget,new SourcePathResolver(resolver)){
    @Override public Path getPathToOutput(){
      return filesystem.getBuckPaths().getGenDir().resolve("foo/bar.jar");
    }
  }
;
  resolver.addToIndex(dep);
  BuildRule genrule=GenruleBuilder.newGenruleBuilder(BuildTargetFactory.newInstance(filesystem.getRootPath(),"//foo:baz")).setBash("cat $DEPS > $OUT").setCmdExe("echo %DEPS% > %OUT%").setOut("deps.txt").setSrcs(ImmutableList.<SourcePath>of(new BuildTargetSourcePath(dep.getBuildTarget()))).build(resolver,filesystem);
  AbstractGenruleStep genruleStep=((Genrule)genrule).createGenruleStep();
  Platform platform=Platform.detect() == Platform.WINDOWS ? Platform.WINDOWS : Platform.LINUX;
  ExecutionContext context=newEmptyExecutionContext(platform);
  ImmutableMap<String,String> environmentVariables=genruleStep.getEnvironmentVariables(context);
  assertEquals("Make sure that the use of $DEPS pulls in $GEN_DIR, as well.",ImmutableMap.of("DEPS",MorePaths.pathWithPlatformSeparators("$GEN_DIR/foo/bar.jar"),"GEN_DIR",filesystem.resolve("buck-out/gen").toString(),"OUT",filesystem.resolve("buck-out/gen/foo/baz/deps.txt").toString()),environmentVariables);
  List<String> keysInOrder=ImmutableList.copyOf(environmentVariables.keySet());
  assertEquals("GEN_DIR",keysInOrder.get(1));
  assertEquals("DEPS",keysInOrder.get(2));
}
