{
  this.knownRoots=knownRoots;
  this.filesystem=filesystem;
  this.watchman=watchman;
  this.config=config;
  this.directoryResolver=directoryResolver;
  this.cells=cells;
  ParserConfig parserConfig=new ParserConfig(config);
  this.buildFileName=parserConfig.getBuildFileName();
  this.enforceBuckPackageBoundaries=parserConfig.getEnforceBuckPackageBoundary();
  this.tempFilePatterns=parserConfig.getTempFilePatterns();
  PythonBuckConfig pythonConfig=new PythonBuckConfig(config,new ExecutableFinder());
  this.pythonInterpreter=pythonConfig.getPythonInterpreter();
  this.knownBuildRuleTypesFactory=knownBuildRuleTypesFactory;
  this.knownBuildRuleTypes=knownBuildRuleTypesFactory.create(config);
  cellLoader=new CacheLoader<Path,Cell>(){
    @Override public Cell load(    Path cellPath) throws Exception {
      cellPath=cellPath.toRealPath().normalize();
      if (!knownRoots.contains(cellPath)) {
        throw new HumanReadableException("Unable to find repository rooted at %s. Known roots are:\n  %s",getFilesystem().getRootPath(),Joiner.on(",\n  ").join(knownRoots));
      }
      CellConstructionDelegateData constructionData=delegate.get(cellPath);
      Config config=constructionData.getConfig();
      ProjectFilesystem cellFilesystem=new ProjectFilesystem(cellPath,config);
      Cell parent=Cell.this;
      BuckConfig parentConfig=parent.getBuckConfig();
      BuckConfig buckConfig=new BuckConfig(config,cellFilesystem,parentConfig.getArchitecture(),parentConfig.getPlatform(),parentConfig.getEnvironment(),constructionData.getCellPathResolver());
      Watchman.build(cellPath,parentConfig.getEnvironment(),console,clock).close();
      return new Cell(constructionData.getKnownRoots(),cellFilesystem,console,watchman,buckConfig,delegate,knownBuildRuleTypesFactory,directoryResolver,clock,cells);
    }
  }
;
  cells.put(getFilesystem().getRootPath(),this);
}
