{
  final ImmutableSet<Path> allPossibleRoots=ImmutableSet.copyOf(transitiveCellPathMapping.values());
  final AtomicReference<LoadingCache<Path,Cell>> loaderReference=new AtomicReference<>();
  CacheLoader<Path,Cell> loader=new CacheLoader<Path,Cell>(){
    @Override public Cell load(    Path cellPath) throws Exception {
      cellPath=cellPath.toRealPath().normalize();
      Preconditions.checkState(allPossibleRoots.contains(cellPath),"Cell %s outside of transitive closure of root cell (%s).",cellPath,allPossibleRoots);
      RawConfig configOverrides=Optional.fromNullable(pathToConfigOverrides.get(cellPath)).or(RawConfig.of(ImmutableMap.<String,ImmutableMap<String,String>>of()));
      Config config=Configs.createDefaultConfig(cellPath,configOverrides);
      DefaultCellPathResolver cellPathResolver=new DefaultCellPathResolver(cellPath,config);
      ProjectFilesystem cellFilesystem=new ProjectFilesystem(cellPath,config);
      BuckConfig buckConfig=new BuckConfig(config,cellFilesystem,rootConfig.getArchitecture(),rootConfig.getPlatform(),rootConfig.getEnvironment(),cellPathResolver);
      ParserConfig parserConfig=new ParserConfig(buckConfig);
      Watchman.build(cellPath,rootConfig.getEnvironment(),console,clock,parserConfig.getWatchmanQueryTimeoutMs()).close();
      return new Cell(cellPathResolver.getKnownRoots(),cellFilesystem,watchman,buckConfig,knownBuildRuleTypesFactory,loaderReference.get(),watchmanDiagnosticCache);
    }
  }
;
  loaderReference.set(CacheBuilder.newBuilder().build(loader));
  return loaderReference.get();
}
