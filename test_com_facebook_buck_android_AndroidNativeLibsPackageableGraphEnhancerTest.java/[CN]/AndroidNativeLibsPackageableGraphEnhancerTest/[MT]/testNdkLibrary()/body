{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  SourcePathResolver sourcePathResolver=new SourcePathResolver(ruleResolver);
  NdkLibrary ndkLibrary=(NdkLibrary)new NdkLibraryBuilder(BuildTargetFactory.newInstance("//:ndklib")).build(ruleResolver);
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  BuildRuleParams originalParams=new FakeBuildRuleParamsBuilder(target).setDeclaredDeps(ImmutableSortedSet.<BuildRule>of(ndkLibrary)).build();
  AndroidNativeLibsPackageableGraphEnhancer enhancer=new AndroidNativeLibsPackageableGraphEnhancer(ruleResolver,originalParams,ImmutableMap.<NdkCxxPlatforms.TargetCpuType,NdkCxxPlatform>of(),ImmutableSet.<NdkCxxPlatforms.TargetCpuType>of());
  AndroidPackageableCollector collector=new AndroidPackageableCollector(target,ImmutableSet.<BuildTarget>of(),ImmutableSet.<BuildTarget>of());
  collector.addPackageables(AndroidPackageableCollector.getPackageableRules(ImmutableSet.<BuildRule>of(ndkLibrary)));
  Optional<CopyNativeLibraries> copyNativeLibrariesOptional=enhancer.getCopyNativeLibraries(TargetGraph.EMPTY,collector.build());
  CopyNativeLibraries copyNativeLibraries=copyNativeLibrariesOptional.get();
  assertThat(copyNativeLibraries.getFilteredNativeLibraries(),Matchers.anEmptyMap());
  assertThat(FluentIterable.from(copyNativeLibraries.getNativeLibDirectories()).transform(sourcePathResolver.getPathFunction()).toList(),Matchers.contains(ndkLibrary.getLibraryPath()));
}
