{
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver sourcePathResolver=new SourcePathResolver(ruleResolver);
  NdkLibrary ndkLibrary=(NdkLibrary)new NdkLibraryBuilder(BuildTargetFactory.newInstance("//:ndklib")).build(ruleResolver);
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  BuildRuleParams originalParams=new FakeBuildRuleParamsBuilder(target).setDeclaredDeps(ImmutableSortedSet.<BuildRule>of(ndkLibrary)).build();
  AndroidNativeLibsPackageableGraphEnhancer enhancer=new AndroidNativeLibsPackageableGraphEnhancer(ruleResolver,originalParams,ImmutableMap.<NdkCxxPlatforms.TargetCpuType,NdkCxxPlatform>of(),ImmutableSet.<NdkCxxPlatforms.TargetCpuType>of(),CxxPlatformUtils.DEFAULT_CONFIG,Optional.<Map<String,List<Pattern>>>absent(),Optional.<BuildTarget>absent(),AndroidBinary.RelinkerMode.DISABLED);
  AndroidPackageableCollector collector=new AndroidPackageableCollector(target,ImmutableSet.<BuildTarget>of(),ImmutableSet.<BuildTarget>of(),new APKModuleGraph(TargetGraph.EMPTY,target,Optional.<Set<BuildTarget>>absent()));
  collector.addPackageables(AndroidPackageableCollector.getPackageableRules(ImmutableSet.<BuildRule>of(ndkLibrary)));
  Optional<CopyNativeLibraries> copyNativeLibrariesOptional=enhancer.enhance(collector.build()).getCopyNativeLibraries();
  CopyNativeLibraries copyNativeLibraries=copyNativeLibrariesOptional.get();
  assertThat(copyNativeLibraries.getStrippedObjectDescriptions(),Matchers.empty());
  assertThat(FluentIterable.from(copyNativeLibraries.getNativeLibDirectories()).transform(sourcePathResolver.deprecatedPathFunction()).toList(),Matchers.contains(ndkLibrary.getLibraryPath()));
}
