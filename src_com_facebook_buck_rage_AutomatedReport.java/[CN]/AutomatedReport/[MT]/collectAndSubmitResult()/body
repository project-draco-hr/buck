{
  Optional<SourceControlInfo> sourceControlInfo=Optional.absent();
  if (vcsInfoHelper.isPresent()) {
    try {
      sourceControlInfo=Optional.of(vcsInfoHelper.get().gatherScmInformation());
    }
 catch (    VersionControlCommandFailedException e) {
      output.printf("Failed to get source control information: %s, proceeding regardless.\n",e);
    }
  }
  ImmutableList<BuildLogEntry> buildLogs=buildLogHelper.getBuildLogs();
  DefectReport defectReport=DefectReport.builder().setBuildEnvironmentDescription(buildEnvironmentDescription).setSourceControlInfo(sourceControlInfo).setIncludedPaths(FluentIterable.from(buildLogs).transform(new Function<BuildLogEntry,Path>(){
    @Override public Path apply(    BuildLogEntry input){
      return input.getRelativePath();
    }
  }
).toSet()).build();
  output.println("Writing report, please wait..");
  return defectReporter.submitReport(defectReport);
}
