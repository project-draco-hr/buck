{
  LOG.debug("Parsing xctool event: %s",element);
  if (!element.isJsonObject()) {
    LOG.warn("Couldn't parse JSON object from xctool event: %s",element);
    return;
  }
  JsonObject object=element.getAsJsonObject();
  if (!object.has("event")) {
    LOG.warn("Couldn't parse JSON event from xctool event: %s",element);
    return;
  }
  JsonElement event=object.get("event");
  if (event == null || !event.isJsonPrimitive()) {
    LOG.warn("Couldn't parse event field from xctool event: %s",element);
    return;
  }
switch (event.getAsString()) {
case "begin-ocunit":
    eventCallback.handleBeginOcunitEvent(gson.fromJson(element,BeginOcunitEvent.class));
  break;
case "end-ocunit":
eventCallback.handleEndOcunitEvent(gson.fromJson(element,EndOcunitEvent.class));
break;
case "begin-status":
eventCallback.handleBeginStatusEvent(gson.fromJson(element,StatusEvent.class));
break;
case "end-status":
eventCallback.handleEndStatusEvent(gson.fromJson(element,StatusEvent.class));
break;
case "begin-test-suite":
eventCallback.handleBeginTestSuiteEvent(gson.fromJson(element,BeginTestSuiteEvent.class));
break;
case "end-test-suite":
eventCallback.handleEndTestSuiteEvent(gson.fromJson(element,EndTestSuiteEvent.class));
break;
case "begin-test":
eventCallback.handleBeginTestEvent(gson.fromJson(element,BeginTestEvent.class));
break;
case "end-test":
eventCallback.handleEndTestEvent(gson.fromJson(element,EndTestEvent.class));
break;
}
}
