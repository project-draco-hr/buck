{
  LOG.debug("Parsing xctool event: %s",element);
  if (!element.isJsonObject()) {
    LOG.warn("Couldn't parse JSON object from xctool event: %s",element);
    return;
  }
  JsonObject object=element.getAsJsonObject();
  if (!object.has("event")) {
    LOG.warn("Couldn't parse JSON event from xctool event: %s",element);
    return;
  }
  JsonElement event=object.get("event");
  if (event == null || !event.isJsonPrimitive()) {
    LOG.warn("Couldn't parse event field from xctool event: %s",element);
    return;
  }
switch (event.getAsString()) {
case "end-test":
    EndTestEvent endTestEvent=gson.fromJson(element,EndTestEvent.class);
  handleEndTestEvent(endTestEvent,testResultSummariesBuilder);
break;
case "end-ocunit":
EndOcunitEvent endOcunitEvent=gson.fromJson(element,EndOcunitEvent.class);
handleEndOcunitEvent(endOcunitEvent,testResultSummariesBuilder);
break;
}
}
