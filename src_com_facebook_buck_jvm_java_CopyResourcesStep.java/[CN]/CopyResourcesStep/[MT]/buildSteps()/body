{
  ImmutableList.Builder<Step> allSteps=ImmutableList.builder();
  if (resources.isEmpty()) {
    return allSteps.build();
  }
  String targetPackageDir=javaPackageFinder.findJavaPackage(target);
  for (  SourcePath rawResource : resources) {
    Optional<BuildRule> underlyingRule=resolver.getRule(rawResource);
    Path relativePathToResource=resolver.getRelativePath(rawResource);
    String resource=null;
    if (underlyingRule.orNull() instanceof HasOutputName) {
      resource=MorePaths.pathWithUnixSeparators(underlyingRule.get().getBuildTarget().getBasePath().resolve(((HasOutputName)underlyingRule.get()).getOutputName()));
    }
    if (resource == null) {
      resource=MorePaths.pathWithUnixSeparators(relativePathToResource);
    }
    Matcher matcher;
    if ((matcher=GENERATED_FILE_PATTERN.matcher(resource)).matches()) {
      resource=matcher.group(1);
    }
    Path javaPackageAsPath=javaPackageFinder.findJavaPackageFolder(Paths.get(resource));
    Path relativeSymlinkPath;
    if ("".equals(javaPackageAsPath.toString())) {
      relativeSymlinkPath=relativePathToResource.getFileName();
    }
 else {
      int lastIndex=resource.lastIndexOf(MorePaths.pathWithUnixSeparatorsAndTrailingSlash(javaPackageAsPath));
      if (lastIndex < 0) {
        Preconditions.checkState(rawResource instanceof BuildTargetSourcePath,"If resource path %s does not contain %s, then it must be a BuildTargetSourcePath.",relativePathToResource,javaPackageAsPath);
        relativeSymlinkPath=Paths.get(String.format("%s%s%s",targetPackageDir,targetPackageDir.isEmpty() ? "" : "/",resolver.getRelativePath(rawResource).getFileName()));
      }
 else {
        relativeSymlinkPath=Paths.get(resource.substring(lastIndex));
      }
    }
    Path target=outputDirectory.resolve(relativeSymlinkPath);
    MkdirAndSymlinkFileStep link=new MkdirAndSymlinkFileStep(filesystem,resolver.getAbsolutePath(rawResource),target);
    allSteps.add(link);
  }
  return allSteps.build();
}
