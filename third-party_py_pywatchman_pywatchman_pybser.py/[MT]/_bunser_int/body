def _bunser_int(buf, pos):
    try:
        int_type = buf[pos]
    except IndexError:
        raise ValueError('Invalid bser int encoding, pos out of range')
    if (int_type == BSER_INT8):
        needed = 2
        fmt = '=b'
    elif (int_type == BSER_INT16):
        needed = 3
        fmt = '=h'
    elif (int_type == BSER_INT32):
        needed = 5
        fmt = '=i'
    elif (int_type == BSER_INT64):
        needed = 9
        fmt = '=q'
    else:
        raise ValueError(('Invalid bser int encoding 0x%02x' % int(int_type)))
    int_val = struct.unpack_from(fmt, buf, (pos + 1))[0]
    return (int_val, (pos + needed))
