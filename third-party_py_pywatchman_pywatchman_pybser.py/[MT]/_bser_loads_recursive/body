def _bser_loads_recursive(buf, pos, mutable=True):
    val_type = buf[pos]
    if ((val_type == BSER_INT8) or (val_type == BSER_INT16) or (val_type == BSER_INT32) or (val_type == BSER_INT64)):
        return _bunser_int(buf, pos)
    elif (val_type == BSER_REAL):
        val = struct.unpack_from('=d', buf, (pos + 1))[0]
        return (val, (pos + 9))
    elif (val_type == BSER_TRUE):
        return (True, (pos + 1))
    elif (val_type == BSER_FALSE):
        return (False, (pos + 1))
    elif (val_type == BSER_NULL):
        return (None, (pos + 1))
    elif (val_type == BSER_STRING):
        return _bunser_string(buf, pos)
    elif (val_type == BSER_ARRAY):
        return _bunser_array(buf, pos, mutable)
    elif (val_type == BSER_OBJECT):
        return _bunser_object(buf, pos, mutable)
    elif (val_type == BSER_TEMPLATE):
        return _bunser_template(buf, pos, mutable)
    else:
        raise RuntimeError(('unhandled bser opcode 0x%02x' % (val_type,)))
