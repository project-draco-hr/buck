{
  ImmutableSortedSet.Builder<BuildRule> declaredRules=expandRules(ruleResolver,declaredDeps);
  ImmutableSortedSet.Builder<BuildRule> extraRules=expandRules(ruleResolver,extraDeps);
  T arg=description.createUnpopulatedConstructorArg();
  ConstructorArgMarshaller inspector=new ConstructorArgMarshaller(Paths.get(target.getBasePath()));
  inspector.populate(ruleResolver,ruleFactoryParams.getProjectFilesystem(),ruleFactoryParams,arg);
  BuildRuleParams buildRuleParams=new BuildRuleParams(target,declaredRules.build(),getVisibilityPatterns(),ruleFactoryParams.getProjectFilesystem(),ruleFactoryParams.getRuleKeyBuilderFactory());
  Buildable buildable=description.createBuildable(buildRuleParams,arg);
  ImmutableSortedSet<BuildRule> finalDependencySet;
  if (buildable instanceof DependencyEnhancer) {
    finalDependencySet=((DependencyEnhancer)buildable).getEnhancedDeps(ruleResolver,declaredRules.build(),extraRules.build());
  }
 else {
    finalDependencySet=extraRules.addAll(declaredRules.build()).build();
  }
  buildRuleParams=new BuildRuleParams(target,finalDependencySet,getVisibilityPatterns(),ruleFactoryParams.getProjectFilesystem(),ruleFactoryParams.getRuleKeyBuilderFactory());
  DescribedRule describedRule=new DescribedRule(description.getBuildRuleType(),buildable,buildRuleParams);
  if (description instanceof FlavorableDescription) {
    FlavorableDescription<T> flavorable=(FlavorableDescription<T>)description;
    flavorable.registerFlavors(arg,describedRule,ruleFactoryParams.getProjectFilesystem(),ruleFactoryParams.getRuleKeyBuilderFactory(),ruleResolver);
  }
  return describedRule;
}
