{
  ImmutableSortedSet.Builder<BuildRule> declaredRules=ImmutableSortedSet.naturalOrder();
  for (  BuildTarget dep : declaredDeps) {
    BuildRule rule=ruleResolver.get(dep);
    Preconditions.checkNotNull(rule,dep.toString());
    declaredRules.add(rule);
  }
  ImmutableSortedSet.Builder<BuildRule> paramRules=ImmutableSortedSet.naturalOrder();
  for (  BuildTarget dep : extraDeps) {
    paramRules.add(ruleResolver.get(dep));
  }
  ConstructorArgMarshaller inspector=new ConstructorArgMarshaller(Paths.get(target.getBasePath()));
  T arg=description.createUnpopulatedConstructorArg();
  inspector.populate(ruleResolver,ruleFactoryParams.getProjectFilesystem(),ruleFactoryParams,arg);
  BuildRuleParams params=new BuildRuleParams(target,declaredRules.build(),getVisibilityPatterns(),ruleFactoryParams.getProjectFilesystem(),ruleFactoryParams.getRuleKeyBuilderFactory());
  Buildable buildable=description.createBuildable(params,arg);
  ImmutableSortedSet<BuildRule> enhancedDeps=buildable.getEnhancedDeps(ruleResolver);
  if (enhancedDeps != null) {
    paramRules.addAll(enhancedDeps);
  }
 else {
    paramRules.addAll(declaredRules.build());
  }
  ImmutableSortedSet<BuildRule> totalDeps=paramRules.build();
  if (buildable instanceof HasDepsOverride) {
    HasDepsOverride hasDepsOverride=(HasDepsOverride)buildable;
    ImmutableSortedSet<BuildRule> redefinedDeps=hasDepsOverride.iKnowWhatIAmDoingAndIWillSpecifyAllTheDepsMyself(ruleResolver);
    if (redefinedDeps != null) {
      totalDeps=redefinedDeps;
    }
  }
  params=new BuildRuleParams(params.getBuildTarget(),totalDeps,params.getVisibilityPatterns(),params.getProjectFilesystem(),params.getRuleKeyBuilderFactory());
  return new DescribedRule(description.getBuildRuleType(),buildable,params);
}
