{
  BuildTarget target=BuildTargetFactory.newInstance("//cheese:peas");
  BuildTarget depTarget=BuildTargetFactory.newInstance("//cheese:more-peas");
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildRule rule=new EmptyRule(target);
  FileHashCache fileHashCache=new NullFileHashCache();
  DefaultRuleKeyBuilderFactory factory=new DefaultRuleKeyBuilderFactory(fileHashCache,pathResolver);
class AppendableRule extends EmptyRule implements RuleKeyAppendable {
    public AppendableRule(    BuildTarget target){
      super(target);
    }
    @Override public RuleKeyBuilder appendToRuleKey(    RuleKeyBuilder builder){
      return builder.setReflectively("cheese","brie");
    }
  }
  AppendableRule appendableRule=new AppendableRule(depTarget);
  RuleKey subKey=new RuleKeyBuilder(pathResolver,fileHashCache,factory).setReflectively("cheese","brie").build();
  RuleKeyBuilder builder=factory.newInstance(rule);
  builder.setReflectively("field.appendableSubKey",subKey);
  builder.setReflectively("field",factory.build(appendableRule));
  RuleKey expected=builder.build();
class RuleContainingAppendableRule extends EmptyRule {
    @AddToRuleKey private final AppendableRule field;
    public RuleContainingAppendableRule(    BuildTarget target,    AppendableRule appendableRule){
      super(target);
      this.field=appendableRule;
    }
  }
  RuleKey seen=factory.build(new RuleContainingAppendableRule(target,appendableRule));
  assertEquals(expected,seen);
}
