{
  BuildTarget topLevelTarget=BuildTargetFactory.newInstance("//cheese:peas");
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  BuildRule rule=new EmptyRule(topLevelTarget);
  DefaultRuleKeyBuilderFactory factory=new DefaultRuleKeyBuilderFactory(new NullFileHashCache(),pathResolver);
  RuleKeyBuilder builder=factory.newInstance(rule);
  builder.setReflectively("exoticCheese","bavarian smoked");
  builder.setReflectively("target",topLevelTarget.getFullyQualifiedName());
  RuleKey expected=builder.build();
class Parent extends EmptyRule {
    @AddToRuleKey private BuildTarget target;
    public Parent(    BuildTarget target){
      super(target);
      this.target=target;
    }
  }
class Child extends Parent {
    @AddToRuleKey private String exoticCheese="bavarian smoked";
    public Child(    BuildTarget target){
      super(target);
    }
  }
  RuleKey seen=factory.build(new Child(topLevelTarget));
  assertEquals(expected,seen);
}
