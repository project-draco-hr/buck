{
  final Map<BuildTarget,NativeLinkable> nativeLinkables=new LinkedHashMap<>();
  final Set<BuildTarget> excluded=new LinkedHashSet<>();
  final Map<BuildTarget,SharedNativeLinkTarget> roots=new LinkedHashMap<>();
  Map<BuildTarget,NativeLinkable> rootDeps=new LinkedHashMap<>();
  for (  SharedNativeLinkTarget root : includedRoots) {
    roots.put(root.getBuildTarget(),root);
    for (    NativeLinkable dep : NativeLinkables.getNativeLinkables(cxxPlatform,root.getSharedNativeLinkTargetDeps(cxxPlatform),Linker.LinkableDepType.SHARED).values()) {
      Linker.LinkableDepType linkStyle=NativeLinkables.getLinkStyle(dep.getPreferredLinkage(cxxPlatform),Linker.LinkableDepType.SHARED);
      Preconditions.checkState(linkStyle != Linker.LinkableDepType.STATIC);
      if (linkStyle == Linker.LinkableDepType.SHARED) {
        rootDeps.put(dep.getBuildTarget(),dep);
        nativeLinkables.put(dep.getBuildTarget(),dep);
      }
    }
  }
  for (  NativeLinkable root : excludedRoots) {
    nativeLinkables.put(root.getBuildTarget(),root);
    excluded.add(root.getBuildTarget());
  }
  new AbstractBreadthFirstTraversal<BuildTarget>(rootDeps.keySet()){
    @Override public ImmutableSet<BuildTarget> visit(    BuildTarget target){
      NativeLinkable nativeLinkable=Preconditions.checkNotNull(nativeLinkables.get(target));
      ImmutableMap<BuildTarget,NativeLinkable> deps=Maps.uniqueIndex(getDeps(nativeLinkable,cxxPlatform),HasBuildTarget.TO_TARGET);
      nativeLinkables.putAll(deps);
      if (nativeLinkable.getPreferredLinkage(cxxPlatform) == NativeLinkable.Linkage.SHARED) {
        excluded.add(target);
      }
      return deps.keySet();
    }
  }
.start();
  new AbstractBreadthFirstTraversal<BuildTarget>(excluded){
    @Override public Iterable<BuildTarget> visit(    BuildTarget target){
      NativeLinkable nativeLinkable=Preconditions.checkNotNull(nativeLinkables.get(target));
      ImmutableMap<BuildTarget,NativeLinkable> deps=Maps.uniqueIndex(getDeps(nativeLinkable,cxxPlatform),HasBuildTarget.TO_TARGET);
      nativeLinkables.putAll(deps);
      excluded.add(target);
      return deps.keySet();
    }
  }
.start();
  final MutableDirectedGraph<BuildTarget> graphBuilder=new MutableDirectedGraph<>();
  final Set<BuildTarget> deps=new LinkedHashSet<>();
  new AbstractBreadthFirstTraversal<BuildTarget>(Sets.difference(rootDeps.keySet(),excluded)){
    @Override public Iterable<BuildTarget> visit(    BuildTarget target){
      graphBuilder.addNode(target);
      Set<BuildTarget> keep=new LinkedHashSet<>();
      for (      BuildTarget dep : FluentIterable.from(getDeps(target,roots,nativeLinkables,cxxPlatform)).transform(HasBuildTarget.TO_TARGET)) {
        if (excluded.contains(dep)) {
          deps.add(dep);
        }
 else {
          keep.add(dep);
          graphBuilder.addEdge(target,dep);
        }
      }
      return keep;
    }
  }
.start();
  DefaultDirectedAcyclicGraph<BuildTarget> graph=new DefaultDirectedAcyclicGraph<>(graphBuilder);
  return ImmutableOmnibusSpec.builder().graph(graph).roots(roots).body(FluentIterable.from(graph.getNodes()).filter(Predicates.not(Predicates.in(roots.keySet()))).toMap(Functions.forMap(nativeLinkables))).deps(Maps.asMap(deps,Functions.forMap(nativeLinkables))).excluded(Maps.asMap(excluded,Functions.forMap(nativeLinkables))).build();
}
