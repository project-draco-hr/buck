{
  ImmutableList.Builder<Arg> argsBuilder=ImmutableList.builder();
  argsBuilder.addAll(extraLdflags);
  argsBuilder.addAll(StringArg.from(cxxPlatform.getLd().resolve(ruleResolver).getNoAsNeededSharedLibsFlags()));
  argsBuilder.addAll(StringArg.from(cxxPlatform.getLd().resolve(ruleResolver).getIgnoreUndefinedSymbolsFlags()));
  NativeLinkableInput input=root.getSharedNativeLinkTargetInput(cxxPlatform);
  argsBuilder.addAll(input.getArgs());
  ImmutableMap<BuildTarget,NativeLinkable> deps=NativeLinkables.getNativeLinkables(cxxPlatform,root.getSharedNativeLinkTargetDeps(cxxPlatform),Linker.LinkableDepType.SHARED);
  boolean alreadyAddedOmnibusToArgs=false;
  for (  Map.Entry<BuildTarget,NativeLinkable> entry : deps.entrySet()) {
    BuildTarget target=entry.getKey();
    NativeLinkable nativeLinkable=entry.getValue();
    Linker.LinkableDepType linkStyle=NativeLinkables.getLinkStyle(nativeLinkable.getPreferredLinkage(cxxPlatform),Linker.LinkableDepType.SHARED);
    if (linkStyle != Linker.LinkableDepType.SHARED) {
      Preconditions.checkState(linkStyle == Linker.LinkableDepType.STATIC_PIC);
      argsBuilder.addAll(nativeLinkable.getNativeLinkableInput(cxxPlatform,linkStyle).getArgs());
      continue;
    }
    if (spec.getRoots().containsKey(target)) {
      argsBuilder.add(new SourcePathArg(pathResolver,new BuildTargetSourcePath(getRootTarget(params.getBuildTarget(),target))));
      continue;
    }
    if (spec.getBody().containsKey(target)) {
      if (!alreadyAddedOmnibusToArgs) {
        argsBuilder.add(new SourcePathArg(pathResolver,omnibus));
        alreadyAddedOmnibusToArgs=true;
      }
      continue;
    }
    Preconditions.checkState(spec.getExcluded().containsKey(target));
    argsBuilder.addAll(nativeLinkable.getNativeLinkableInput(cxxPlatform,linkStyle).getArgs());
  }
  BuildTarget rootTarget=getRootTarget(params.getBuildTarget(),root.getBuildTarget());
  Optional<String> rootSoname=root.getSharedNativeLinkTargetLibraryName(cxxPlatform);
  ruleResolver.addToIndex(CxxLinkableEnhancer.createCxxLinkableSharedBuildRule(cxxBuckConfig,cxxPlatform,params,ruleResolver,pathResolver,rootTarget,BuildTargets.getGenPath(params.getProjectFilesystem(),rootTarget,"%s").resolve(rootSoname.or(String.format("%s.%s",rootTarget.getShortName(),cxxPlatform.getSharedLibraryExtension()))),rootSoname,argsBuilder.build()));
  return OmnibusRoot.of(new BuildTargetSourcePath(rootTarget));
}
