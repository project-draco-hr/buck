{
  if (!rawMap.isPresent()) {
    return Functions.identity();
  }
  ImmutableMap.Builder<String,String> builder=ImmutableMap.builder();
  for (  Map.Entry<String,String> entry : rawMap.get().entrySet()) {
    String original=entry.getKey().replace('.','/');
    String obfuscated=entry.getValue().replace('.','/');
    builder.put(isForObfuscation ? original : obfuscated,isForObfuscation ? obfuscated : original);
  }
  final Map<String,String> map=builder.build();
  return new Function<String,String>(){
    @Nullable @Override public String apply(    @Nullable String input){
      Preconditions.checkNotNull(input);
      String mapped=map.get(input);
      Preconditions.checkNotNull(mapped);
      return mapped;
    }
  }
;
}
