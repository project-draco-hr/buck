{
  return ImmutableList.<Step>of(new Step(){
    @Override public StepExecutionResult execute(    ExecutionContext context) throws IOException, InterruptedException {
      ImmutableList<String> lldbCommandPrefix=lldb.getCommandPrefix(getResolver());
      ProcessExecutorParams params=ProcessExecutorParams.builder().addCommand(lldbCommandPrefix.toArray(new String[lldbCommandPrefix.size()])).build();
      return StepExecutionResult.of(context.getProcessExecutor().launchAndExecute(params,ImmutableSet.<ProcessExecutor.Option>of(),Optional.of(String.format("target create %s\ntarget symbols add %s",getResolver().getAbsolutePath(unstrippedBinarySourcePath),dsymOutputPath)),Optional.<Long>absent(),Optional.<Function<Process,Void>>absent()).getExitCode());
    }
    @Override public String getShortName(){
      return "register debug symbols";
    }
    @Override public String getDescription(    ExecutionContext context){
      return String.format("register debug symbols for binary '%s': '%s'",getResolver().getRelativePath(unstrippedBinarySourcePath),dsymOutputPath);
    }
  }
);
}
