{
switch (packageStyle) {
case INPLACE:
    return createInPlaceBinaryRule(params,resolver,pathResolver,pythonPlatform,cxxPlatform,mainModule,components,preloadLibraries);
case STANDALONE:
  ImmutableSortedSet<BuildRule> componentDeps=PythonUtil.getDepsFromComponents(pathResolver,components);
Tool pexTool=pythonBuckConfig.getPexTool(resolver);
return new PythonPackagedBinary(params.copyWithDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(componentDeps).addAll(pexTool.getDeps(pathResolver)).build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,pythonPlatform,pexTool,buildArgs,pythonBuckConfig.getPathToPexExecuter(resolver).or(pythonPlatform.getEnvironment()),pythonBuckConfig.getPexExtension(),pythonPlatform.getEnvironment(),mainModule,components,preloadLibraries,ImmutableSortedSet.copyOf(Sets.difference(params.getDeclaredDeps().get(),componentDeps)));
default :
throw new IllegalStateException();
}
}
