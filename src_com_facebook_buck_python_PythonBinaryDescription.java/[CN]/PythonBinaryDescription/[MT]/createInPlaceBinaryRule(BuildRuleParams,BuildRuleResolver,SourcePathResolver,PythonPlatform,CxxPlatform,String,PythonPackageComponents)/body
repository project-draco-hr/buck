{
  if (cxxPlatform.getLd() instanceof WindowsLinker) {
    throw new HumanReadableException("%s: cannot build in-place python binaries for Windows (%s)",params.getBuildTarget(),cxxPlatform.getFlavor());
  }
  BuildTarget emptyInitTarget=BuildTarget.builder(params.getBuildTarget()).addFlavors(ImmutableFlavor.of("__init__")).build();
  Path emptyInitPath=BuildTargets.getGenPath(params.getBuildTarget(),"%s/__init__.py");
  resolver.addToIndex(new WriteFile(params.copyWithChanges(emptyInitTarget,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,"",emptyInitPath,false));
  components=addMissingInitModules(components,new BuildTargetSourcePath(emptyInitTarget));
  BuildTarget linkTreeTarget=BuildTarget.builder(params.getBuildTarget()).addFlavors(ImmutableFlavor.of("link-tree")).build();
  Path linkTreeRoot=BuildTargets.getGenPath(linkTreeTarget,"%s");
  SymlinkTree linkTree;
  try {
    linkTree=resolver.addToIndex(new SymlinkTree(params.copyWithChanges(linkTreeTarget,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,linkTreeRoot,ImmutableMap.<Path,SourcePath>builder().putAll(components.getModules()).putAll(components.getResources()).putAll(components.getNativeLibraries()).build()));
  }
 catch (  SymlinkTree.InvalidSymlinkTreeException e) {
    throw e.getHumanReadableExceptionForBuildTarget(params.getBuildTarget());
  }
  BuildTarget scriptTarget=BuildTarget.builder(params.getBuildTarget()).addFlavors(ImmutableFlavor.of("script")).build();
  Path scriptPath=BuildTargets.getGenPath(params.getBuildTarget(),"%s" + pythonBuckConfig.getPexExtension());
  String relativeLinkTreeRootStr=Escaper.escapeAsPythonString(scriptPath.getParent().relativize(linkTreeRoot).toString());
  WriteFile script=resolver.addToIndex(new WriteFile(params.copyWithChanges(scriptTarget,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,new ST(getRunInplaceResource()).add("PYTHON",pythonPlatform.getEnvironment().getPythonPath()).add("MAIN_MODULE",Escaper.escapeAsPythonString(mainModule)).add("MODULES_DIR",relativeLinkTreeRootStr).add("NATIVE_LIBS_ENV_VAR",Escaper.escapeAsPythonString(cxxPlatform.getLd().searchPathEnvVar())).add("NATIVE_LIBS_DIR",components.getNativeLibraries().isEmpty() ? "None" : relativeLinkTreeRootStr).render(),scriptPath,true));
  return new PythonInPlaceBinary(params,pathResolver,pythonPlatform,script,linkTree,mainModule,components,pythonPlatform.getEnvironment().getPythonPath());
}
