{
  if (!(args.main.isPresent() ^ args.mainModule.isPresent())) {
    throw new HumanReadableException("%s: must set exactly one of `main_module` and `main`",params.getBuildTarget());
  }
  Path baseModule=PythonUtil.getBasePath(params.getBuildTarget(),args.baseModule);
  String mainModule;
  ImmutableMap.Builder<Path,SourcePath> modules=ImmutableMap.builder();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  if (args.main.isPresent()) {
    LOG.warn("%s: parameter `main` is deprecated, please use `main_module` instead.",params.getBuildTarget());
    String mainName=pathResolver.getSourcePathName(params.getBuildTarget(),args.main.get());
    Path main=baseModule.resolve(mainName);
    modules.put(baseModule.resolve(mainName),args.main.get());
    mainModule=PythonUtil.toModuleName(params.getBuildTarget(),main.toString());
  }
 else {
    mainModule=args.mainModule.get();
  }
  PythonPackageComponents binaryPackageComponents=PythonPackageComponents.of(modules.build(),ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableSet.<SourcePath>of(),args.zipSafe);
  PythonPlatform pythonPlatform=pythonPlatforms.getValue(params.getBuildTarget()).or(pythonPlatforms.getValue(args.platform.transform(Flavor.TO_FLAVOR).or(pythonPlatforms.getFlavors().iterator().next())));
  CxxPlatform cxxPlatform=cxxPlatforms.getValue(params.getBuildTarget()).or(defaultCxxPlatform);
  PythonPackageComponents allPackageComponents=PythonUtil.getAllComponents(params,resolver,pathResolver,binaryPackageComponents,pythonPlatform,cxxBuckConfig,cxxPlatform,FluentIterable.from(args.linkerFlags.get()).transform(MacroArg.toMacroArgFunction(PythonUtil.MACRO_HANDLER,params.getBuildTarget(),params.getCellRoots(),resolver)).toList(),pythonBuckConfig.getNativeLinkStrategy());
  return createPackageRule(params,resolver,pathResolver,pythonPlatform,cxxPlatform,mainModule,allPackageComponents,args.buildArgs.or(ImmutableList.<String>of()),args.packageStyle.or(pythonBuckConfig.getPackageStyle()),PythonUtil.getPreloadNames(resolver,cxxPlatform,args.preloadDeps.or(ImmutableSortedSet.<BuildTarget>of())));
}
