{
  if (cxxPlatform.getLd().resolve(resolver) instanceof WindowsLinker) {
    throw new HumanReadableException("%s: cannot build in-place python binaries for Windows (%s)",params.getBuildTarget(),cxxPlatform.getFlavor());
  }
  BuildTarget emptyInitTarget=params.getBuildTarget().withAppendedFlavors(ImmutableFlavor.of("__init__"));
  Path emptyInitPath=BuildTargets.getGenPath(params.getProjectFilesystem(),params.getBuildTarget(),"%s/__init__.py");
  resolver.addToIndex(new WriteFile(params.copyWithChanges(emptyInitTarget,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,"",emptyInitPath,false));
  components=addMissingInitModules(components,new BuildTargetSourcePath(emptyInitTarget));
  BuildTarget linkTreeTarget=params.getBuildTarget().withAppendedFlavors(ImmutableFlavor.of("link-tree"));
  Path linkTreeRoot=params.getProjectFilesystem().resolve(BuildTargets.getGenPath(params.getProjectFilesystem(),linkTreeTarget,"%s"));
  SymlinkTree linkTree=resolver.addToIndex(new SymlinkTree(params.copyWithChanges(linkTreeTarget,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,linkTreeRoot,ImmutableMap.<Path,SourcePath>builder().putAll(components.getModules()).putAll(components.getResources()).putAll(components.getNativeLibraries()).build()));
  return new PythonInPlaceBinary(params,pathResolver,resolver,pythonPlatform,cxxPlatform,linkTree,mainModule,components,pythonPlatform.getEnvironment(),pythonBuckConfig.getPexExtension(),preloadLibraries);
}
