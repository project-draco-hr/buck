{
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver());
  Path main=tmpDir.newFile().toPath();
  Files.write(main,"main".getBytes(Charsets.UTF_8));
  Path source1=tmpDir.newFile().toPath();
  Files.write(source1,"hello world".getBytes(Charsets.UTF_8));
  Path source2=tmpDir.newFile().toPath();
  Files.write(source2,"goodbye world".getBytes(Charsets.UTF_8));
  Path mainRelative=MorePaths.relativize(tmpDir.getRoot().toPath(),main);
  Path source1Relative=MorePaths.relativize(tmpDir.getRoot().toPath(),source1);
  Path source2Relative=MorePaths.relativize(tmpDir.getRoot().toPath(),source2);
  FakeFileHashCache hashCache=FakeFileHashCache.createFromStrings(ImmutableMap.of(mainRelative.toString(),Strings.repeat("a",40),source1Relative.toString(),Strings.repeat("b",40),source2Relative.toString(),Strings.repeat("c",40)));
  RuleKey pair1=getRuleKeyForModuleLayout(new DefaultRuleKeyBuilderFactory(hashCache,resolver),resolver,"main.py",mainRelative,"module/one.py",source1Relative,"module/two.py",source2Relative);
  RuleKey pair2=getRuleKeyForModuleLayout(new DefaultRuleKeyBuilderFactory(hashCache,resolver),resolver,"main.py",mainRelative,"module/two.py",source2Relative,"module/one.py",source1Relative);
  RuleKey pair3=getRuleKeyForModuleLayout(new DefaultRuleKeyBuilderFactory(hashCache,resolver),resolver,"main.py",mainRelative,"module/one.py",source2Relative,"module/two.py",source1Relative);
  RuleKey pair4=getRuleKeyForModuleLayout(new DefaultRuleKeyBuilderFactory(hashCache,resolver),resolver,"main.py",mainRelative,"module/two.py",source1Relative,"module/one.py",source2Relative);
  assertEquals(pair1,pair2);
  assertEquals(pair3,pair4);
  assertNotEquals(pair1,pair3);
}
