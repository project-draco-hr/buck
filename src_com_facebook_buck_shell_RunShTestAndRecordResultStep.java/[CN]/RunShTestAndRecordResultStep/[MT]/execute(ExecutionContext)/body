{
  TestResultSummary summary;
  if (context.getPlatform() == Platform.WINDOWS) {
    summary=new TestResultSummary(getShortName(),"sh_test",ResultType.SUCCESS,0,"sh_test ignored on Windows",null,null,null);
  }
 else {
    ShellStep test=new ShellStep(filesystem.getRootPath()){
      @Override public String getShortName(){
        return pathToShellScript.toString();
      }
      @Override protected ImmutableList<String> getShellCommandInternal(      ExecutionContext context){
        return ImmutableList.<String>builder().add(pathToShellScript.toString()).addAll(args).build();
      }
      @Override public ImmutableMap<String,String> getEnvironmentVariables(      ExecutionContext context){
        return ImmutableMap.of("NO_BUCKD","1");
      }
      @Override protected boolean shouldPrintStderr(      Verbosity verbosity){
        return false;
      }
      @Override protected boolean shouldPrintStdout(      Verbosity verbosity){
        return false;
      }
    }
;
    int exitCode=test.execute(context);
    boolean isSuccess=exitCode == 0;
    summary=new TestResultSummary(getShortName(),"sh_test",isSuccess ? ResultType.SUCCESS : ResultType.FAILURE,test.getDuration(),null,null,test.getStdout(),test.getStderr());
  }
  ObjectMapper mapper=new ObjectMapper();
  try (OutputStream outputStream=filesystem.newFileOutputStream(pathToTestResultFile)){
    mapper.writeValue(outputStream,summary);
  }
 catch (  IOException e) {
    throw Throwables.propagate(e);
  }
  return 0;
}
