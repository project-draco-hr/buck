{
  SimpleFileVisitor<Path> copyDirVisitor=new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      String fileName=file.getFileName().toString();
      if (fileName.endsWith(EXPECTED_SUFFIX)) {
        Path generatedFileWithSuffix=destPath.resolve(templatePath.relativize(file));
        Path directory=generatedFileWithSuffix.getParent();
        Path observedFile=directory.resolve(MorePaths.getNameWithoutExtension(file));
        if (!Files.isRegularFile(observedFile)) {
          fail("Expected file " + observedFile + " could not be found.");
        }
        String extension=MorePaths.getFileExtension(observedFile);
        String cleanPathToObservedFile=MoreStrings.withoutSuffix(templatePath.relativize(file).toString(),EXPECTED_SUFFIX);
switch (extension) {
case "plist":
case "stringsdict":
          NSObject expectedObject;
        try {
          expectedObject=BinaryPropertyListParser.parse(file.toFile());
        }
 catch (        Exception e) {
          expectedObject=null;
        }
      NSObject observedObject;
    try {
      observedObject=BinaryPropertyListParser.parse(observedFile.toFile());
    }
 catch (    Exception e) {
      observedObject=null;
    }
  assertTrue(String.format("In %s, expected plist to be of %s type.",cleanPathToObservedFile,(expectedObject != null) ? "binary" : "XML"),!((expectedObject != null) ^ (observedObject != null)));
if (expectedObject != null && observedObject != null) {
  String[] ignoredKeys={"DTSDKName","DTPlatformName","DTPlatformVersion","MinimumOSVersion","DTSDKBuild","DTPlatformBuild"};
  if (observedObject instanceof NSDictionary && expectedObject instanceof NSDictionary) {
    for (    String key : ignoredKeys) {
      ((NSDictionary)observedObject).remove(key);
      ((NSDictionary)expectedObject).remove(key);
    }
  }
  assertEquals(String.format("In %s, expected binary plist contents to match.",cleanPathToObservedFile),expectedObject,observedObject);
  break;
}
 else {
  assertFileContentsEqual(file,observedFile);
}
break;
default :
assertFileContentsEqual(file,observedFile);
}
}
return FileVisitResult.CONTINUE;
}
}
;
Path root=subDirectory.isPresent() ? templatePath.resolve(subDirectory.get()) : templatePath;
Files.walkFileTree(root,copyDirVisitor);
}
