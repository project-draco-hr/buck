{
  MoreFiles.copyRecursively(templatePath,destPath,BUILD_FILE_RENAME);
  Path localProperties=FileSystems.getDefault().getPath("local.properties");
  Path destLocalProperties=destPath.resolve(localProperties.getFileName());
  if (localProperties.toFile().exists() && !destLocalProperties.toFile().exists()) {
    Files.copy(localProperties,destLocalProperties);
  }
  if (Platform.detect() == Platform.WINDOWS) {
    SimpleFileVisitor<Path> copyDirVisitor=new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path path,      BasicFileAttributes attrs) throws IOException {
        if (attrs.size() > 0 && attrs.size() <= 4096) {
          String linkTo=new String(Files.readAllBytes(path),UTF_8);
          Path linkToFile=templatePath.resolve(linkTo);
          if (Files.isRegularFile(linkToFile)) {
            Files.copy(linkToFile,path,StandardCopyOption.REPLACE_EXISTING);
          }
 else           if (Files.isDirectory(linkToFile)) {
            Files.delete(path);
            MoreFiles.copyRecursively(linkToFile,path);
          }
        }
        return FileVisitResult.CONTINUE;
      }
    }
;
    Files.walkFileTree(destPath,copyDirVisitor);
  }
  isSetUp=true;
  return this;
}
