{
  MoreFiles.copyRecursively(templatePath,destPath,BUILD_FILE_RENAME);
  try (OutputStream outputStream=new BufferedOutputStream(Channels.newOutputStream(Files.newByteChannel(destPath.resolve(BuckConstant.getCurrentVersionFile()),ImmutableSet.<OpenOption>of(StandardOpenOption.CREATE_NEW,StandardOpenOption.WRITE))))){
    outputStream.write(BuckVersion.getVersion().getBytes(Charsets.UTF_8));
  }
 catch (  FileAlreadyExistsException|NoSuchFileException e) {
  }
  if (Platform.detect() == Platform.WINDOWS) {
    SimpleFileVisitor<Path> copyDirVisitor=new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path path,      BasicFileAttributes attrs) throws IOException {
        if (attrs.size() > 0 && attrs.size() <= 4096) {
          String linkTo=new String(Files.readAllBytes(path),UTF_8);
          Path linkToFile;
          try {
            linkToFile=templatePath.resolve(linkTo);
          }
 catch (          InvalidPathException e) {
            return FileVisitResult.CONTINUE;
          }
          if (Files.isRegularFile(linkToFile)) {
            Files.copy(linkToFile,path,StandardCopyOption.REPLACE_EXISTING);
          }
 else           if (Files.isDirectory(linkToFile)) {
            Files.delete(path);
            MoreFiles.copyRecursively(linkToFile,path);
          }
        }
        return FileVisitResult.CONTINUE;
      }
    }
;
    Files.walkFileTree(destPath,copyDirVisitor);
  }
  if (!Files.exists(getPath(".buckconfig.local"))) {
    writeContentsToPath("[cache]\n  mode =",".buckconfig.local");
  }
  isSetUp=true;
  return this;
}
