{
  try {
    Predicate<String> requiredInPrimaryZip=createRequiredInPrimaryZipPredicate(context);
    ZipSplitterFactory zipSplitterFactory;
    if (useLinearAllocSplitDex) {
      zipSplitterFactory=new DalvikAwareZipSplitterFactory(linearAllocHardLimit);
    }
 else {
      zipSplitterFactory=new DefaultZipSplitterFactory(ZIP_SIZE_SOFT_LIMIT,ZIP_SIZE_HARD_LIMIT);
    }
    ProjectFilesystem projectFilesystem=context.getProjectFilesystem();
    File primaryJarFile=primaryJarPath.toFile();
    Collection<File> secondaryZips=zipSplitterFactory.newInstance(FluentIterable.from(inputPathsToSplit).transform(context.getProjectFilesystem().getAbsolutifier()).toSet(),primaryJarFile,secondaryJarDir.toFile(),secondaryJarPattern,requiredInPrimaryZip,dexSplitStrategy,ZipSplitter.CanaryStrategy.INCLUDE_CANARIES,projectFilesystem.getFileForRelativePath(pathToReportDir)).execute();
    BufferedWriter secondaryMetaInfoWriter=Files.newWriter(secondaryJarMetaPath.toFile(),Charsets.UTF_8);
    try {
      writeMetaList(secondaryMetaInfoWriter,secondaryZips,dexStore);
    }
  finally {
      secondaryMetaInfoWriter.close();
    }
    return 0;
  }
 catch (  IOException e) {
    e.printStackTrace(context.getStdErr());
    return 1;
  }
}
