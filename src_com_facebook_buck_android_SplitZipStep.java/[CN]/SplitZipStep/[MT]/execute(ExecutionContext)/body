{
  try {
    Set<Path> inputJarPaths=FluentIterable.from(inputPathsToSplit).transform(filesystem.getAbsolutifier()).toSet();
    Supplier<ImmutableList<ClassNode>> classes=ClassNodeListSupplier.createMemoized(inputJarPaths);
    ProguardTranslatorFactory translatorFactory=ProguardTranslatorFactory.create(filesystem,proguardFullConfigFile,proguardMappingFile);
    Predicate<String> requiredInPrimaryZip=createRequiredInPrimaryZipPredicate(translatorFactory,classes);
    final ImmutableSet<String> wantedInPrimaryZip=getWantedPrimaryDexEntries(translatorFactory,classes);
    final ImmutableSet<String> secondaryHeadSet=getSecondaryHeadSet(translatorFactory);
    final ImmutableSet<String> secondaryTailSet=getSecondaryTailSet(translatorFactory);
    ZipSplitterFactory zipSplitterFactory;
    if (dexSplitMode.useLinearAllocSplitDex()) {
      zipSplitterFactory=new DalvikAwareZipSplitterFactory(dexSplitMode.getLinearAllocHardLimit(),wantedInPrimaryZip);
    }
 else {
      zipSplitterFactory=new DefaultZipSplitterFactory(ZIP_SIZE_SOFT_LIMIT,ZIP_SIZE_HARD_LIMIT);
    }
    outputFiles=zipSplitterFactory.newInstance(filesystem,inputJarPaths,primaryJarPath,secondaryJarDir,secondaryJarPattern,requiredInPrimaryZip,secondaryHeadSet,secondaryTailSet,dexSplitMode.getDexSplitStrategy(),ZipSplitter.CanaryStrategy.INCLUDE_CANARIES,filesystem.getPathForRelativePath(pathToReportDir)).execute();
    try (BufferedWriter secondaryMetaInfoWriter=Files.newWriter(secondaryJarMetaPath.toFile(),Charsets.UTF_8)){
      writeMetaList(secondaryMetaInfoWriter,outputFiles,dexSplitMode.getDexStore());
    }
     return 0;
  }
 catch (  IOException e) {
    context.logError(e,"There was an error running SplitZipStep.");
    return 1;
  }
}
