{
  if (!(proguardFullConfigFile.isPresent())) {
    return Functions.identity();
  }
  ProjectFilesystem projectFilesystem=context.getProjectFilesystem();
  Path pathToProguardConfig=proguardFullConfigFile.get();
  boolean obfuscationSkipped=Iterables.any(projectFilesystem.readLines(pathToProguardConfig),Predicates.equalTo("-dontobfuscate"));
  if (obfuscationSkipped) {
    return Functions.identity();
  }
  Path pathToProguardMappingFile=proguardMappingFile.get();
  List<String> lines=projectFilesystem.readLines(pathToProguardMappingFile);
  Map<String,String> rawProguardMap=ProguardMapping.readClassMapping(lines);
  ImmutableMap.Builder<String,String> internalNameBuilder=ImmutableMap.builder();
  for (  Map.Entry<String,String> entry : rawProguardMap.entrySet()) {
    internalNameBuilder.put(entry.getValue().replace('.','/'),entry.getKey().replace('.','/'));
  }
  final Map<String,String> deobfuscator=internalNameBuilder.build();
  return new Function<String,String>(){
    @Nullable @Override public String apply(    @Nullable String input){
      return deobfuscator.get(input);
    }
  }
;
}
