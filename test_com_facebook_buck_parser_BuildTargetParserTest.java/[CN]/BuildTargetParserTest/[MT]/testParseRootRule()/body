{
  File mockBuildFile=createMock(File.class);
  expect(mockBuildFile.isFile()).andReturn(true);
  File mockBuildFileDirectory=createMock(File.class);
  expect(mockBuildFile.getParentFile()).andReturn(mockBuildFileDirectory).anyTimes();
  expect(mockBuildFileDirectory.getAbsolutePath()).andReturn("/home/mbolin/fbandroid");
  ProjectFilesystem mockProjectFilesystem=createMock(ProjectFilesystem.class);
  expect(mockProjectFilesystem.exists("")).andReturn(true);
  expect(mockProjectFilesystem.exists(BuckConstant.BUILD_RULES_FILE_NAME)).andReturn(true);
  expect(mockProjectFilesystem.getFileForRelativePath(BuckConstant.BUILD_RULES_FILE_NAME)).andReturn(mockBuildFile);
  replay(mockBuildFile,mockBuildFileDirectory,mockProjectFilesystem);
  BuildTargetParser parser=new BuildTargetParser(mockProjectFilesystem);
  BuildTarget buildTarget=parser.parse("//:fb4a",ParseContext.fullyQualified());
  assertEquals(mockBuildFile,buildTarget.getBuildFile());
  assertEquals(mockBuildFileDirectory,buildTarget.getBuildFileDirectory());
  assertEquals("fb4a",buildTarget.getShortName());
  assertEquals("//",buildTarget.getBaseName());
  assertEquals("",buildTarget.getBasePath());
  assertEquals("",buildTarget.getBasePathWithSlash());
  assertEquals("//:fb4a",buildTarget.getFullyQualifiedName());
  verify(mockBuildFile,mockBuildFileDirectory,mockProjectFilesystem);
}
