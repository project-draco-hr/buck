{
  File mockBuildFileDirectory=createMock(File.class);
  expect(mockBuildFileDirectory.getAbsolutePath()).andReturn("/home/mbolin/java/com/example");
  File mockBuildFile=createMock(File.class);
  expect(mockBuildFile.isFile()).andReturn(true);
  expect(mockBuildFile.getParentFile()).andReturn(mockBuildFileDirectory).anyTimes();
  ProjectFilesystem mockProjectFilesystem=createMock(ProjectFilesystem.class);
  expect(mockProjectFilesystem.exists("java/com/example")).andReturn(true);
  expect(mockProjectFilesystem.exists("java/com/example/" + BuckConstant.BUILD_RULES_FILE_NAME)).andReturn(true);
  expect(mockProjectFilesystem.getFileForRelativePath("java/com/example/" + BuckConstant.BUILD_RULES_FILE_NAME)).andReturn(mockBuildFile);
  replay(mockProjectFilesystem,mockBuildFile,mockBuildFileDirectory);
  BuildTargetParser parser=new BuildTargetParser(mockProjectFilesystem);
  ParseContext parseContext=ParseContext.forVisibilityArgument();
  BuildTarget target=parser.parse("//java/com/example:",parseContext);
  assertEquals("A build target that ends with a colon should be treated as a wildcard build target " + "when parsed in the context of a visibility argument.","//java/com/example:",target.getFullyQualifiedName());
  verify(mockProjectFilesystem,mockBuildFile,mockBuildFileDirectory);
}
