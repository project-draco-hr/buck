{
  File mockBuildFile=createMock(File.class);
  File mockBuildDirectory=createMock(File.class);
  expect(mockBuildFile.isFile()).andReturn(true);
  expect(mockBuildFile.getParentFile()).andReturn(mockBuildDirectory);
  expect(mockBuildDirectory.getAbsolutePath()).andReturn("/path/to/root/facebook/orca");
  ProjectFilesystem mockProjectFilesystem=createMock(ProjectFilesystem.class);
  expect(mockProjectFilesystem.exists("facebook/orca")).andReturn(true);
  expect(mockProjectFilesystem.exists("facebook/orca/" + BuckConstant.BUILD_RULES_FILE_NAME)).andReturn(true);
  expect(mockProjectFilesystem.getFileForRelativePath("facebook/orca/" + BuckConstant.BUILD_RULES_FILE_NAME)).andReturn(mockBuildFile);
  replay(mockBuildFile,mockBuildDirectory,mockProjectFilesystem);
  BuildTargetParser parser=new BuildTargetParser(mockProjectFilesystem);
  BuildTarget buildTarget=parser.parse("//facebook/orca:assets",ParseContext.fullyQualified());
  assertEquals(mockBuildFile,buildTarget.getBuildFile());
  assertEquals("//facebook/orca",buildTarget.getBaseName());
  assertEquals("assets",buildTarget.getShortName());
  verify(mockBuildFile,mockBuildDirectory,mockProjectFilesystem);
}
