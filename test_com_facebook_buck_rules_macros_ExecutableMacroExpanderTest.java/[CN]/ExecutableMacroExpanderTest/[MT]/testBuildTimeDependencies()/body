{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  final BuildRule dep1=GenruleBuilder.newGenruleBuilder(BuildTargetFactory.newInstance("//:dep1")).setOut("arg1").build(ruleResolver,filesystem);
  final BuildRule dep2=GenruleBuilder.newGenruleBuilder(BuildTargetFactory.newInstance("//:dep2")).setOut("arg2").build(ruleResolver,filesystem);
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  ruleResolver.addToIndex(new NoopBinaryBuildRule(params,pathResolver){
    @Override public Tool getExecutableCommand(){
      return new CommandTool.Builder().addArg(new BuildTargetSourcePath(dep1.getBuildTarget())).addArg(new BuildTargetSourcePath(dep2.getBuildTarget())).build();
    }
  }
);
  ExecutableMacroExpander expander=new ExecutableMacroExpander();
  assertThat(expander.extractAdditionalBuildTimeDeps(target,createCellRoots(filesystem),ruleResolver,"//:rule"),Matchers.containsInAnyOrder(dep1,dep2));
  assertThat(expander.expand(target,createCellRoots(filesystem),ruleResolver,filesystem,"//:rule"),Matchers.equalTo(String.format("%s %s",Preconditions.checkNotNull(dep1.getPathToOutput()).toAbsolutePath(),Preconditions.checkNotNull(dep2.getPathToOutput()).toAbsolutePath())));
}
