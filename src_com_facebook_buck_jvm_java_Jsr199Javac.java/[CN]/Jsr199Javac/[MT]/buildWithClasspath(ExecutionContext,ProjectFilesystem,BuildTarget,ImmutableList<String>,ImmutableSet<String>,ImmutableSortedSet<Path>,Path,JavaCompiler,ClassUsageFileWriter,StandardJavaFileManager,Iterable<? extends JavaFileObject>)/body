{
  try {
    filesystem.writeLinesToPath(FluentIterable.from(javaSourceFilePaths).transform(Functions.toStringFunction()).transform(ARGFILES_ESCAPER),pathToSrcsList);
  }
 catch (  IOException e) {
    context.logError(e,"Cannot write list of .java files to compile to %s file! Terminating compilation.",pathToSrcsList);
    return 1;
  }
  DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<>();
  List<String> classNamesForAnnotationProcessing=ImmutableList.of();
  Writer compilerOutputWriter=new PrintWriter(context.getStdErr());
  JavaCompiler.CompilationTask compilationTask=compiler.getTask(compilerOutputWriter,usedClassesFileWriter.wrapFileManager(fileManager),diagnostics,options,classNamesForAnnotationProcessing,compilationUnits);
  boolean isSuccess=false;
  BuckTracing.setCurrentThreadTracingInterfaceFromJsr199Javac(new BuckTracingEventBusBridge(context.getBuckEventBus(),invokingRule));
  try {
    try (TranslatingJavacPhaseTracer tracer=TranslatingJavacPhaseTracer.setupTracing(invokingRule,context.getClassLoaderCache(),context.getBuckEventBus(),compilationTask);ProcessorBundle bundle=prepareProcessors(context.getBuckEventBus(),compiler.getClass().getClassLoader(),context.getClassLoaderCache(),safeAnnotationProcessors,invokingRule,options)){
      compilationTask.setProcessors(bundle.processors);
      isSuccess=compilationTask.call();
    }
 catch (    IOException e) {
      LOG.warn(e,"Unable to close annotation processor class loader. We may be leaking memory.");
    }
  }
  finally {
    BuckTracing.clearCurrentThreadTracingInterfaceFromJsr199Javac();
  }
  for (  Diagnostic<? extends JavaFileObject> diagnostic : diagnostics.getDiagnostics()) {
    LOG.debug("javac: %s",DiagnosticPrettyPrinter.format(diagnostic));
  }
  if (isSuccess) {
    try {
      usedClassesFileWriter.writeFile(filesystem,context.getObjectMapper());
    }
 catch (    IOException e) {
      throw new HumanReadableException(e,"Failed to write the used classes file.");
    }
    return 0;
  }
 else {
    if (context.getVerbosity().shouldPrintStandardInformation()) {
      int numErrors=0;
      int numWarnings=0;
      for (      Diagnostic<? extends JavaFileObject> diagnostic : diagnostics.getDiagnostics()) {
        Diagnostic.Kind kind=diagnostic.getKind();
        if (kind == Diagnostic.Kind.ERROR) {
          ++numErrors;
          handleMissingSymbolError(invokingRule,diagnostic,context,filesystem);
        }
 else         if (kind == Diagnostic.Kind.WARNING || kind == Diagnostic.Kind.MANDATORY_WARNING) {
          ++numWarnings;
        }
        context.getStdErr().println(DiagnosticPrettyPrinter.format(diagnostic));
      }
      if (numErrors > 0 || numWarnings > 0) {
        context.getStdErr().printf("Errors: %d. Warnings: %d.\n",numErrors,numWarnings);
      }
    }
    return 1;
  }
}
