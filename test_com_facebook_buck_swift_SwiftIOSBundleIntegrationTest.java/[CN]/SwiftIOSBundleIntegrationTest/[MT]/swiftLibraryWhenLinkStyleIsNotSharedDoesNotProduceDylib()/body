{
  assumeTrue(Platform.detect() == Platform.MACOS);
  assumeTrue(AppleNativeIntegrationTestUtils.isApplePlatformAvailable(ApplePlatform.MACOSX));
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"swift_on_swift",tmp);
  workspace.setUp();
  ProjectFilesystem filesystem=new ProjectFilesystem(workspace.getDestPath());
  ProjectWorkspace.ProcessResult result=workspace.runBuckCommand("build",":ios-parent#iphonesimulator-x86_64","--config","cxx.cflags=-g");
  result.assertSuccess();
  Path binaryOutput=tmp.getRoot().resolve(filesystem.getBuckPaths().getGenDir()).resolve("ios-parent#iphonesimulator-x86_64");
  assertThat(Files.exists(binaryOutput),CoreMatchers.is(true));
  assertThat(workspace.runCommand("file",binaryOutput.toString()).getStdout().get(),containsString("executable"));
  assertThat(workspace.runCommand("otool","-hv",binaryOutput.toString()).getStdout().get(),containsString("X86_64"));
  assertThat(workspace.runCommand("otool","-L",binaryOutput.toString()).getStdout().get(),not(containsString("libdep1.dylib")));
  Path dep1Output=tmp.getRoot().resolve(filesystem.getBuckPaths().getGenDir()).resolve("iosdep1#iphonesimulator-x86_64,swift-compile").resolve("libiosdep1.dylib");
  assertThat(Files.notExists(dep1Output),CoreMatchers.is(true));
}
