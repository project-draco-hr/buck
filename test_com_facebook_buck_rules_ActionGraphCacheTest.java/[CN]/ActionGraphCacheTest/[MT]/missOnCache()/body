{
  ActionGraphCache cache=new ActionGraphCache(broadcastEventListener);
  ActionGraphAndResolver resultRun1=cache.getActionGraph(eventBus,CHECK_GRAPHS,targetGraph,0);
  assertEquals(countEventsOf(ActionGraphEvent.Cache.Hit.class),0);
  assertEquals(countEventsOf(ActionGraphEvent.Cache.Miss.class),1);
  ActionGraphAndResolver resultRun2=cache.getActionGraph(eventBus,CHECK_GRAPHS,targetGraph.getSubgraph(ImmutableSet.of(nodeB)),0);
  assertEquals(countEventsOf(ActionGraphEvent.Cache.Hit.class),0);
  assertEquals(countEventsOf(ActionGraphEvent.Cache.Miss.class),2);
  ActionGraphAndResolver resultRun3=cache.getActionGraph(eventBus,CHECK_GRAPHS,targetGraph,0);
  assertEquals(countEventsOf(ActionGraphEvent.Cache.Hit.class),0);
  assertEquals(countEventsOf(ActionGraphEvent.Cache.Miss.class),3);
  Map<BuildRule,RuleKey> resultRun1RuleKeys=getRuleKeysFromBuildRules(resultRun1.getActionGraph().getNodes(),resultRun1.getResolver());
  Map<BuildRule,RuleKey> resultRun2RuleKeys=getRuleKeysFromBuildRules(resultRun2.getActionGraph().getNodes(),resultRun2.getResolver());
  Map<BuildRule,RuleKey> resultRun3RuleKeys=getRuleKeysFromBuildRules(resultRun3.getActionGraph().getNodes(),resultRun3.getResolver());
  assertThat(resultRun1RuleKeys,Matchers.not(Matchers.equalTo(resultRun2RuleKeys)));
  assertThat(resultRun1RuleKeys,Matchers.equalTo(resultRun3RuleKeys));
}
