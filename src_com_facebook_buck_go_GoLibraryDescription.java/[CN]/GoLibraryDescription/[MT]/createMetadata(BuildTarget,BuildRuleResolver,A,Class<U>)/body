{
  Optional<GoPlatform> platform=goBuckConfig.getPlatformFlavorDomain().getValue(buildTarget);
  if (metadataClass.isAssignableFrom(GoLinkable.class)) {
    Preconditions.checkState(platform.isPresent());
    SourcePath output=new BuildTargetSourcePath(resolver.requireRule(buildTarget).getBuildTarget());
    return Optional.of(metadataClass.cast(GoLinkable.builder().setGoLinkInput(ImmutableMap.of(args.packageName.transform(MorePaths.TO_PATH).or(goBuckConfig.getDefaultPackageName(buildTarget)),output)).setExportedDeps(args.exportedDeps.or(ImmutableSortedSet.<BuildTarget>of())).build()));
  }
 else   if (buildTarget.getFlavors().contains(GoDescriptors.TRANSITIVE_LINKABLES_FLAVOR)) {
    Preconditions.checkState(platform.isPresent());
    return Optional.of(metadataClass.cast(GoDescriptors.requireTransitiveGoLinkables(buildTarget,resolver,platform.get(),Iterables.concat(args.deps.or(ImmutableSortedSet.<BuildTarget>of()),args.exportedDeps.or(ImmutableSortedSet.<BuildTarget>of())),true)));
  }
 else {
    return Optional.absent();
  }
}
