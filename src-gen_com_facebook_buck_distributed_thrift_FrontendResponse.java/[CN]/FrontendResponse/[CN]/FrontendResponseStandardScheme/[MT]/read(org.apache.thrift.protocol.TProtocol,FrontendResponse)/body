{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
        struct.wasSuccessful=iprot.readBool();
        struct.setWasSuccessfulIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
    struct.errorMessage=iprot.readString();
    struct.setErrorMessageIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 10:
if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
struct.type=com.facebook.buck.distributed.thrift.FrontendRequestType.findByValue(iprot.readI32());
struct.setTypeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 11:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.startBuild=new StartBuildResponse();
struct.startBuild.read(iprot);
struct.setStartBuildIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 12:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.buildStatus=new BuildStatusResponse();
struct.buildStatus.read(iprot);
struct.setBuildStatusIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 15:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.casContainsResponse=new CASContainsResponse();
struct.casContainsResponse.read(iprot);
struct.setCasContainsResponseIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 16:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.createBuildResponse=new CreateBuildResponse();
struct.createBuildResponse.read(iprot);
struct.setCreateBuildResponseIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 17:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.fetchSourceFilesResponse=new FetchSourceFilesResponse();
struct.fetchSourceFilesResponse.read(iprot);
struct.setFetchSourceFilesResponseIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 18:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.fetchBuildGraphResponse=new FetchBuildGraphResponse();
struct.fetchBuildGraphResponse.read(iprot);
struct.setFetchBuildGraphResponseIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
