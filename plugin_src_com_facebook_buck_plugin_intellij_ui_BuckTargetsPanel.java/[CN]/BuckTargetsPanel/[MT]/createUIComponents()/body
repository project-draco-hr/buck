{
  targetsPanel=new JPanel();
  targetsPanel.addAncestorListener(new AncestorListener(){
    @Override public void ancestorAdded(    AncestorEvent event){
      if (component.getTargets() == null) {
        component.refreshTargetsList();
      }
    }
    @Override public void ancestorRemoved(    AncestorEvent event){
    }
    @Override public void ancestorMoved(    AncestorEvent event){
    }
  }
);
  treeRoot=new TargetNode(TargetNode.Type.DIRECTORY,TREE_ROOT,null);
  targetsRoot=new TargetNode(TargetNode.Type.DIRECTORY,TARGETS_ROOT,null);
  testsRoot=new TargetNode(TargetNode.Type.DIRECTORY,TESTS_ROOT,null);
  tree=new Tree(new DefaultTreeModel(treeRoot));
  scrollPane=TargetsTreeRenderer.install(tree);
  final MouseInputAdapter mouseListener=new MouseInputAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (SwingUtilities.isLeftMouseButton(e) && e.getClickCount() == 2) {
        TreePath selected=tree.getSelectionPath();
        TargetNode targetNode=(TargetNode)selected.getLastPathComponent();
        BuckTarget target=targetNode.getTarget();
        if (target != null) {
          component.buildTarget(target);
        }
      }
    }
  }
;
  tree.addMouseListener(mouseListener);
  refreshTargetsButton=createToolbarIcon();
  refreshTargetsButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      component.refreshTargetsList();
    }
  }
);
  cleanButton=createToolbarIcon();
  cleanButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      component.clean();
    }
  }
);
}
