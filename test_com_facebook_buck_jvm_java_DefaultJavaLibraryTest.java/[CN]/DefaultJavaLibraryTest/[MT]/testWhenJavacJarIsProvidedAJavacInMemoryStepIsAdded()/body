{
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  BuildTarget libraryOneTarget=BuildTargetFactory.newInstance("//:libone");
  BuildTarget javacTarget=BuildTargetFactory.newInstance("//langtools:javac");
  BuildRule javac=PrebuiltJarBuilder.createBuilder(javacTarget).setBinaryJar(Paths.get("java/src/com/libone/JavacJar.jar")).build(ruleResolver);
  BuildRule rule=JavaLibraryBuilder.createBuilder(libraryOneTarget).addSrc(Paths.get("java/src/com/libone/Bar.java")).setCompiler(javac).build(ruleResolver);
  DefaultJavaLibrary buildable=(DefaultJavaLibrary)rule;
  ImmutableList<Step> steps=buildable.getBuildSteps(FakeBuildContext.NOOP_CONTEXT,new FakeBuildableContext());
  assertEquals(11,steps.size());
  Javac javacStep=((JavacStep)steps.get(6)).getJavac();
  assertTrue(javacStep instanceof Jsr199Javac);
  JarBackedJavac jsrJavac=((JarBackedJavac)javacStep);
  assertEquals(jsrJavac.getCompilerClassPath(),ImmutableSet.of(new BuildTargetSourcePath(javac.getBuildTarget())));
}
