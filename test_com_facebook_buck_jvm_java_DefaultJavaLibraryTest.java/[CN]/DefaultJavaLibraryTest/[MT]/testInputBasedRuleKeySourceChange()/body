{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  BuildRule genSrc=GenruleBuilder.newGenruleBuilder(BuildTargetFactory.newInstance("//:gen_srcs")).setOut("Test.java").setCmd("something").build(resolver,filesystem);
  filesystem.writeContentsToPath("class Test {}",genSrc.getPathToOutput());
  JavaLibrary library=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:lib")).addSrc(new BuildTargetSourcePath(genSrc.getBuildTarget())).build(resolver,filesystem);
  DefaultFileHashCache originalHashCache=new DefaultFileHashCache(filesystem);
  RuleKeyBuilderFactory originalRuleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(originalHashCache,pathResolver);
  InputBasedRuleKeyBuilderFactory factory=new InputBasedRuleKeyBuilderFactory(originalHashCache,pathResolver,originalRuleKeyBuilderFactory);
  RuleKey originalRuleKey=factory.build(library);
  resolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  genSrc=GenruleBuilder.newGenruleBuilder(BuildTargetFactory.newInstance("//:gen_srcs")).setOut("Test.java").setCmd("something else").build(resolver,filesystem);
  library=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:lib")).addSrc(new BuildTargetSourcePath(genSrc.getBuildTarget())).build(resolver,filesystem);
  DefaultFileHashCache unaffectedHashCache=new DefaultFileHashCache(filesystem);
  RuleKeyBuilderFactory unaffectedRuleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(unaffectedHashCache,pathResolver);
  factory=new InputBasedRuleKeyBuilderFactory(unaffectedHashCache,pathResolver,unaffectedRuleKeyBuilderFactory);
  RuleKey unaffectedRuleKey=factory.build(library);
  assertThat(originalRuleKey,Matchers.equalTo(unaffectedRuleKey));
  resolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  genSrc=GenruleBuilder.newGenruleBuilder(BuildTargetFactory.newInstance("//:gen_srcs")).setOut("Test.java").setCmd("something else").build(resolver,filesystem);
  filesystem.writeContentsToPath("class Test2 {}",genSrc.getPathToOutput());
  library=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:lib")).addSrc(new BuildTargetSourcePath(genSrc.getBuildTarget())).build(resolver,filesystem);
  DefaultFileHashCache affectedHashCache=new DefaultFileHashCache(filesystem);
  RuleKeyBuilderFactory affectedRuleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(affectedHashCache,pathResolver);
  factory=new InputBasedRuleKeyBuilderFactory(affectedHashCache,pathResolver,affectedRuleKeyBuilderFactory);
  RuleKey affectedRuleKey=factory.build(library);
  assertThat(originalRuleKey,Matchers.not(Matchers.equalTo(affectedRuleKey)));
}
