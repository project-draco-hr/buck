{
  BuildTarget libraryOneTarget=BuildTargetFactory.newInstance("//:libone");
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  FakeJavaLibrary libraryOne=new FakeJavaLibrary(libraryOneTarget,resolver){
    @Override public Optional<SourcePath> getAbiJar(){
      return Optional.absent();
    }
    @Override public ImmutableSetMultimap<JavaLibrary,Path> getDeclaredClasspathEntries(){
      return ImmutableSetMultimap.of((JavaLibrary)this,Paths.get("java/src/com/libone/bar.jar"));
    }
    @Override public ImmutableSetMultimap<JavaLibrary,Path> getOutputClasspathEntries(){
      return ImmutableSetMultimap.of((JavaLibrary)this,Paths.get("java/src/com/libone/bar.jar"));
    }
    @Override public ImmutableSetMultimap<JavaLibrary,Path> getTransitiveClasspathEntries(){
      return ImmutableSetMultimap.of();
    }
    @Override public ImmutableSet<JavaLibrary> getTransitiveClasspathDeps(){
      return ImmutableSet.of();
    }
  }
;
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  ruleResolver.addToIndex(libraryOne);
  BuildTarget libraryTwoTarget=BuildTargetFactory.newInstance("//:libtwo");
  BuildRule libraryTwo=JavaLibraryBuilder.createBuilder(libraryTwoTarget).addSrc(Paths.get("java/src/com/libtwo/Foo.java")).addDep(libraryOne.getBuildTarget()).build(ruleResolver);
  List<Step> steps=libraryTwo.getBuildSteps(FakeBuildContext.NOOP_CONTEXT,new FakeBuildableContext());
  ImmutableList<JavacStep> javacSteps=FluentIterable.from(steps).filter(JavacStep.class).toList();
  assertEquals("There should be only one javac step.",1,javacSteps.size());
  JavacStep javacStep=javacSteps.get(0);
  assertEquals("The classpath to use when compiling //:libtwo according to getDeclaredClasspathEntries()" + " should contain only bar.jar.",ImmutableSet.of(libraryOne.getProjectFilesystem().resolve("java/src/com/libone/bar.jar")),ImmutableSet.copyOf(((JavaLibrary)libraryTwo).getDeclaredClasspathEntries().values()));
  assertEquals("The classpath for the javac step to compile //:libtwo should contain only bar.jar.",ImmutableSet.of(libraryOne.getProjectFilesystem().resolve("java/src/com/libone/bar.jar")),javacStep.getClasspathEntries());
}
