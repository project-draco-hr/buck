{
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  BuildTarget nonIncludedTarget=BuildTargetFactory.newInstance("//:not_included");
  BuildRule notIncluded=JavaLibraryBuilder.createBuilder(nonIncludedTarget).addSrc(Paths.get("java/src/com/not_included/Raz.java")).build(ruleResolver);
  BuildTarget includedTarget=BuildTargetFactory.newInstance("//:included");
  BuildRule included=JavaLibraryBuilder.createBuilder(includedTarget).addSrc(Paths.get("java/src/com/included/Rofl.java")).build(ruleResolver);
  BuildTarget libraryOneTarget=BuildTargetFactory.newInstance("//:libone");
  BuildRule libraryOne=JavaLibraryBuilder.createBuilder(libraryOneTarget).addDep(notIncluded.getBuildTarget()).addDep(included.getBuildTarget()).addExportedDep(included.getBuildTarget()).addSrc(Paths.get("java/src/com/libone/Bar.java")).build(ruleResolver);
  BuildTarget libraryTwoTarget=BuildTargetFactory.newInstance("//:libtwo");
  BuildRule libraryTwo=JavaLibraryBuilder.createBuilder(libraryTwoTarget).addSrc(Paths.get("java/src/com/libtwo/Foo.java")).addDep(libraryOne.getBuildTarget()).addExportedDep(libraryOne.getBuildTarget()).build(ruleResolver);
  BuildTarget parentTarget=BuildTargetFactory.newInstance("//:parent");
  BuildRule parent=JavaLibraryBuilder.createBuilder(parentTarget).addSrc(Paths.get("java/src/com/parent/Meh.java")).addDep(libraryTwo.getBuildTarget()).build(ruleResolver);
  Path root=parent.getProjectFilesystem().getRootPath();
  assertEquals("A java_library that depends on //:libone should include only libone.jar in its " + "classpath when compiling itself.",ImmutableSet.of(root.resolve(DefaultJavaLibrary.getOutputJarPath(nonIncludedTarget,filesystem))),getJavaLibrary(notIncluded).getOutputClasspathEntries());
  assertEquals(ImmutableSet.of(root.resolve(DefaultJavaLibrary.getOutputJarPath(includedTarget,filesystem))),getJavaLibrary(included).getOutputClasspathEntries());
  assertEquals(ImmutableSet.of(root.resolve(DefaultJavaLibrary.getOutputJarPath(includedTarget,filesystem)),root.resolve(DefaultJavaLibrary.getOutputJarPath(libraryOneTarget,filesystem)),root.resolve(DefaultJavaLibrary.getOutputJarPath(includedTarget,filesystem))),getJavaLibrary(libraryOne).getOutputClasspathEntries());
  assertEquals("//:libtwo exports its deps, so a java_library that depends on //:libtwo should include " + "both libone.jar and libtwo.jar in its classpath when compiling itself.",ImmutableSet.of(root.resolve(DefaultJavaLibrary.getOutputJarPath(libraryOneTarget,filesystem)),root.resolve(DefaultJavaLibrary.getOutputJarPath(includedTarget,filesystem)),root.resolve(DefaultJavaLibrary.getOutputJarPath(libraryOneTarget,filesystem)),root.resolve(DefaultJavaLibrary.getOutputJarPath(libraryTwoTarget,filesystem)),root.resolve(DefaultJavaLibrary.getOutputJarPath(includedTarget,filesystem))),getJavaLibrary(libraryTwo).getOutputClasspathEntries());
  assertEquals("A java_binary that depends on //:parent should include libone.jar, libtwo.jar and " + "parent.jar.",ImmutableSetMultimap.<JavaLibrary,Path>builder().put(getJavaLibrary(included),root.resolve(DefaultJavaLibrary.getOutputJarPath(includedTarget,filesystem))).put(getJavaLibrary(notIncluded),root.resolve(DefaultJavaLibrary.getOutputJarPath(nonIncludedTarget,filesystem))).putAll(getJavaLibrary(libraryOne),root.resolve(DefaultJavaLibrary.getOutputJarPath(includedTarget,filesystem)),root.resolve(DefaultJavaLibrary.getOutputJarPath(libraryOneTarget,filesystem))).putAll(getJavaLibrary(libraryTwo),root.resolve(DefaultJavaLibrary.getOutputJarPath(includedTarget,filesystem)),root.resolve(DefaultJavaLibrary.getOutputJarPath(nonIncludedTarget,filesystem)),root.resolve(DefaultJavaLibrary.getOutputJarPath(libraryOneTarget,filesystem)),root.resolve(DefaultJavaLibrary.getOutputJarPath(libraryTwoTarget,filesystem))).put(getJavaLibrary(parent),root.resolve(DefaultJavaLibrary.getOutputJarPath(parentTarget,filesystem))).build(),getJavaLibrary(parent).getTransitiveClasspathEntries());
  assertThat(getJavaLibrary(parent).getTransitiveClasspathDeps(),equalTo(ImmutableSet.<JavaLibrary>builder().add(getJavaLibrary(included)).add(getJavaLibrary(notIncluded)).add(getJavaLibrary(libraryOne)).add(getJavaLibrary(libraryTwo)).add(getJavaLibrary(parent)).build()));
  assertEquals("A java_library that depends on //:parent should include only parent.jar in its " + "-classpath when compiling itself.",ImmutableSet.of(root.resolve(DefaultJavaLibrary.getOutputJarPath(parentTarget,filesystem))),getJavaLibrary(parent).getOutputClasspathEntries());
}
