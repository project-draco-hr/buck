{
  AndroidPlatformTarget platformTarget=EasyMock.createMock(AndroidPlatformTarget.class);
  ImmutableList<Path> bootclasspathEntries=(bootclasspath == null) ? ImmutableList.of(Paths.get("I am not used")) : ImmutableList.of(Paths.get(bootclasspath));
  expect(platformTarget.getBootclasspathEntries()).andReturn(bootclasspathEntries).anyTimes();
  replay(platformTarget);
  if (projectFilesystem == null) {
    projectFilesystem=EasyMock.createMock(ProjectFilesystem.class);
  }
  return ImmutableBuildContext.builder().setActionGraph(RuleMap.createGraphFromSingleRule(javaLibrary)).setStepRunner(EasyMock.createMock(StepRunner.class)).setClock(new DefaultClock()).setBuildId(new BuildId()).setArtifactCache(new NoopArtifactCache()).setJavaPackageFinder(EasyMock.createMock(JavaPackageFinder.class)).setAndroidBootclasspathSupplier(BuildContext.createBootclasspathSupplier(Suppliers.ofInstance(platformTarget))).setEventBus(BuckEventBusFactory.newInstance()).build();
}
