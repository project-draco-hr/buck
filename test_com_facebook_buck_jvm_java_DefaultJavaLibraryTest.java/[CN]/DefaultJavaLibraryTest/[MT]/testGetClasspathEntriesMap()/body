{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildTarget libraryOneTarget=BuildTargetFactory.newInstance("//:libone");
  BuildRule libraryOne=JavaLibraryBuilder.createBuilder(libraryOneTarget).addSrc(Paths.get("java/src/com/libone/Bar.java")).build(ruleResolver);
  BuildTarget libraryTwoTarget=BuildTargetFactory.newInstance("//:libtwo");
  BuildRule libraryTwo=JavaLibraryBuilder.createBuilder(libraryTwoTarget).addSrc(Paths.get("java/src/com/libtwo/Foo.java")).addDep(libraryOne.getBuildTarget()).build(ruleResolver);
  BuildTarget parentTarget=BuildTargetFactory.newInstance("//:parent");
  BuildRule parent=JavaLibraryBuilder.createBuilder(parentTarget).addSrc(Paths.get("java/src/com/parent/Meh.java")).addDep(libraryTwo.getBuildTarget()).build(ruleResolver);
  assertEquals(ImmutableSetMultimap.of(getJavaLibrary(libraryOne),Paths.get("buck-out/gen/lib__libone__output/libone.jar"),getJavaLibrary(libraryTwo),Paths.get("buck-out/gen/lib__libtwo__output/libtwo.jar"),getJavaLibrary(parent),Paths.get("buck-out/gen/lib__parent__output/parent.jar")),((HasClasspathEntries)parent).getTransitiveClasspathEntries());
}
