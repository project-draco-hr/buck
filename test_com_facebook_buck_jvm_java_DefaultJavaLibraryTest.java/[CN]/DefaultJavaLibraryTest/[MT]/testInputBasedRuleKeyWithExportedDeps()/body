{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  JavaLibrary exportedDep=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:edep")).addSrc(Paths.get("Source1.java")).build(resolver,filesystem);
  filesystem.writeContentsToPath("JAR contents",exportedDep.getPathToOutput());
  writeAbiJar(filesystem,pathResolver.deprecatedGetPath(exportedDep.getAbiJar().get()),"Source1.class","ABI JAR contents");
  JavaLibrary dep=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:dep")).addExportedDep(exportedDep.getBuildTarget()).build(resolver,filesystem);
  JavaLibrary library=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:lib")).addDep(dep.getBuildTarget()).build(resolver,filesystem);
  FileHashCache originalHashCache=DefaultFileHashCache.createDefaultFileHashCache(filesystem);
  InputBasedRuleKeyBuilderFactory factory=new InputBasedRuleKeyBuilderFactory(0,originalHashCache,pathResolver);
  RuleKey originalRuleKey=factory.build(library).get();
  resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  exportedDep=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:edep")).addSrc(Paths.get("Source1.java")).setResourcesRoot(Paths.get("some root that changes the rule key")).build(resolver,filesystem);
  filesystem.writeContentsToPath("different JAR contents",exportedDep.getPathToOutput());
  dep=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:dep")).addExportedDep(exportedDep.getBuildTarget()).build(resolver,filesystem);
  library=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:lib")).addDep(dep.getBuildTarget()).build(resolver,filesystem);
  FileHashCache unaffectedHashCache=DefaultFileHashCache.createDefaultFileHashCache(filesystem);
  factory=new InputBasedRuleKeyBuilderFactory(0,unaffectedHashCache,pathResolver);
  RuleKey unaffectedRuleKey=factory.build(library).get();
  assertThat(originalRuleKey,equalTo(unaffectedRuleKey));
  resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  exportedDep=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:edep")).addSrc(Paths.get("Source1.java")).build(resolver,filesystem);
  writeAbiJar(filesystem,pathResolver.deprecatedGetPath(exportedDep.getAbiJar().get()),"Source1.class","changed ABI JAR contents");
  dep=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:dep")).addExportedDep(exportedDep.getBuildTarget()).build(resolver,filesystem);
  library=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:lib")).addDep(dep.getBuildTarget()).build(resolver,filesystem);
  FileHashCache affectedHashCache=DefaultFileHashCache.createDefaultFileHashCache(filesystem);
  factory=new InputBasedRuleKeyBuilderFactory(0,affectedHashCache,pathResolver);
  RuleKey affectedRuleKey=factory.build(library).get();
  assertThat(originalRuleKey,Matchers.not(equalTo(affectedRuleKey)));
}
