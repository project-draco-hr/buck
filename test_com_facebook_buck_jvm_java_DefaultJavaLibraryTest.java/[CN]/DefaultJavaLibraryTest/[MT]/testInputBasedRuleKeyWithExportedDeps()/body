{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  BuildRuleResolver resolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  JavaLibrary exportedDep=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:edep")).addSrc(Paths.get("Source1.java")).build(resolver,filesystem);
  filesystem.writeContentsToPath("JAR contents",exportedDep.getPathToOutput());
  filesystem.writeContentsToPath("ABI JAR contents",pathResolver.getPath(exportedDep.getAbiJar().get()));
  JavaLibrary dep=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:dep")).addExportedDep(exportedDep.getBuildTarget()).build(resolver,filesystem);
  JavaLibrary library=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:lib")).addDep(dep.getBuildTarget()).build(resolver,filesystem);
  InputBasedRuleKeyBuilderFactory factory=new InputBasedRuleKeyBuilderFactory(new DefaultFileHashCache(filesystem),new SourcePathResolver(resolver));
  RuleKey originalRuleKey=factory.newInstance(library).build();
  resolver=new BuildRuleResolver();
  exportedDep=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:edep")).addSrc(Paths.get("Source1.java")).setResourcesRoot(Paths.get("some root that changes the rule key")).build(resolver,filesystem);
  filesystem.writeContentsToPath("different JAR contents",exportedDep.getPathToOutput());
  dep=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:dep")).addExportedDep(exportedDep.getBuildTarget()).build(resolver,filesystem);
  library=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:lib")).addDep(dep.getBuildTarget()).build(resolver,filesystem);
  factory=new InputBasedRuleKeyBuilderFactory(new DefaultFileHashCache(filesystem),new SourcePathResolver(resolver));
  RuleKey unaffectedRuleKey=factory.newInstance(library).build();
  assertThat(originalRuleKey,Matchers.equalTo(unaffectedRuleKey));
  resolver=new BuildRuleResolver();
  pathResolver=new SourcePathResolver(resolver);
  exportedDep=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:edep")).addSrc(Paths.get("Source1.java")).build(resolver,filesystem);
  filesystem.writeContentsToPath("changed ABI JAR contents",pathResolver.getPath(exportedDep.getAbiJar().get()));
  dep=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:dep")).addExportedDep(exportedDep.getBuildTarget()).build(resolver,filesystem);
  library=(JavaLibrary)JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//:lib")).addDep(dep.getBuildTarget()).build(resolver,filesystem);
  factory=new InputBasedRuleKeyBuilderFactory(new DefaultFileHashCache(filesystem),new SourcePathResolver(resolver));
  RuleKey affectedRuleKey=factory.newInstance(library).build();
  assertThat(originalRuleKey,Matchers.not(Matchers.equalTo(affectedRuleKey)));
}
