{
  BuildTarget target=BuildTargetFactory.newInstance("//test:test");
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRuleParams flavoredParams=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  ThriftConstructorArg arg=new ThriftConstructorArg();
  arg.pyOptions=Optional.absent();
  ImmutableMap<String,ThriftSource> sources=ImmutableMap.of("test.thrift",new ThriftSource(createFakeThriftCompiler("//:thrift_source"),ImmutableList.<String>of(),Paths.get("output")));
  arg.pyBaseModule=Optional.absent();
  PythonLibrary normal=ENHANCER.createBuildRule(flavoredParams,resolver,arg,sources,ImmutableSortedSet.<BuildRule>of());
  for (  ImmutableMap.Entry<Path,SourcePath> ent : normal.getSrcs().entrySet()) {
    assertTrue(ent.getKey().toString(),ent.getKey().startsWith(target.getBasePath()));
  }
  arg.pyBaseModule=Optional.of("blah");
  PythonLibrary baseModule=ENHANCER.createBuildRule(flavoredParams,resolver,arg,sources,ImmutableSortedSet.<BuildRule>of());
  for (  ImmutableMap.Entry<Path,SourcePath> ent : baseModule.getSrcs().entrySet()) {
    assertTrue(ent.getKey().startsWith(Paths.get(arg.pyBaseModule.get())));
  }
}
