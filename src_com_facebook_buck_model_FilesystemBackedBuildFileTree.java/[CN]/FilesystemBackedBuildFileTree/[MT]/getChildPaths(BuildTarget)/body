{
  final ImmutableSet.Builder<Path> childPaths=ImmutableSet.builder();
  final Path basePath=target.getBasePath();
  final Set<Path> ignoredPaths=projectFilesystem.getIgnorePaths();
  try {
    projectFilesystem.walkRelativeFileTree(basePath,new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult preVisitDirectory(      Path dir,      BasicFileAttributes attrs){
        if (ignoredPaths.contains(dir)) {
          return FileVisitResult.SKIP_SUBTREE;
        }
        if (dir.equals(basePath)) {
          return FileVisitResult.CONTINUE;
        }
        Path buildFile=dir.resolve(BuckConstant.BUILD_RULES_FILE_NAME);
        if (projectFilesystem.isFile(buildFile)) {
          childPaths.add(basePath.relativize(dir));
          return FileVisitResult.SKIP_SUBTREE;
        }
        return FileVisitResult.CONTINUE;
      }
    }
);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return childPaths.build();
}
