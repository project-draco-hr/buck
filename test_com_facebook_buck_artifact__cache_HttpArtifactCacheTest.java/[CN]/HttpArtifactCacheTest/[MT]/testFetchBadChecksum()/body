{
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  final RuleKey ruleKey=new RuleKey("00000000000000000000000000000000");
  final List<Response> responseList=Lists.newArrayList();
  HttpArtifactCache cache=new HttpArtifactCache(argsBuilder.build()){
    @Override protected HttpResponse fetchCall(    String path,    Request.Builder requestBuilder) throws IOException {
      Request request=requestBuilder.url(SERVER + path).build();
      Response response=new Response.Builder().request(request).protocol(Protocol.HTTP_1_1).code(HttpURLConnection.HTTP_OK).body(createResponseBody(ImmutableSet.of(ruleKey),ImmutableMap.<String,String>of(),ByteSource.wrap(new byte[0]),"data")).build();
      responseList.add(response);
      return new OkHttpResponseWrapper(response);
    }
  }
;
  Path output=Paths.get("output/file");
  CacheResult result=cache.fetch(ruleKey,LazyPath.ofInstance(output));
  assertEquals(CacheResultType.ERROR,result.getType());
  assertEquals(Optional.<String>absent(),filesystem.readFileIfItExists(output));
  assertTrue("response wasn't fully read!",responseList.get(0).body().source().exhausted());
  cache.close();
}
