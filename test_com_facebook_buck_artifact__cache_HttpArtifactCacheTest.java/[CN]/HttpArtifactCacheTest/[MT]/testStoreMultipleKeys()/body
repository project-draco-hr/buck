{
  final RuleKey ruleKey1=new RuleKey("00000000000000000000000000000000");
  final RuleKey ruleKey2=new RuleKey("11111111111111111111111111111111");
  final String data="data";
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  Path output=Paths.get("output/file");
  filesystem.writeContentsToPath(data,output);
  final Set<RuleKey> stored=Sets.newHashSet();
  HttpArtifactCache cache=new HttpArtifactCache("http",null,null,new URI("http://localhost:8080"),true,filesystem,BUCK_EVENT_BUS,DIRECT_EXECUTOR_SERVICE){
    @Override protected Response storeCall(    Request request) throws IOException {
      Buffer buf=new Buffer();
      request.body().writeTo(buf);
      try (DataInputStream in=new DataInputStream(new ByteArrayInputStream(buf.readByteArray()))){
        int keys=in.readInt();
        for (int i=0; i < keys; i++) {
          stored.add(new RuleKey(in.readUTF()));
        }
      }
       return new Response.Builder().code(HttpURLConnection.HTTP_ACCEPTED).protocol(Protocol.HTTP_1_1).request(request).build();
    }
  }
;
  cache.storeImpl(ImmutableSet.of(ruleKey1,ruleKey2),ImmutableMap.<String,String>of(),output,createFinishedEventBuilder());
  assertThat(stored,Matchers.containsInAnyOrder(ruleKey1,ruleKey2));
  cache.close();
}
