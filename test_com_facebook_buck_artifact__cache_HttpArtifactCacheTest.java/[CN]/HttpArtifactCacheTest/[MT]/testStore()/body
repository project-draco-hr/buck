{
  final RuleKey ruleKey=new RuleKey("00000000000000000000000000000000");
  final String data="data";
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  Path output=Paths.get("output/file");
  filesystem.writeContentsToPath(data,output);
  final AtomicBoolean hasCalled=new AtomicBoolean(false);
  HttpArtifactCache cache=new HttpArtifactCache("http",null,null,new URL("http://localhost:8080"),true,filesystem,BUCK_EVENT_BUS,HASH_FUNCTION){
    @Override protected Response storeCall(    Request request) throws IOException {
      hasCalled.set(true);
      Buffer buf=new Buffer();
      request.body().writeTo(buf);
      byte[] actualData=buf.readByteArray();
      byte[] expectedData;
      try (ByteArrayOutputStream out=new ByteArrayOutputStream();DataOutputStream dataOut=new DataOutputStream(out)){
        dataOut.write(HttpArtifactCacheBinaryProtocol.createKeysHeader(ImmutableSet.of(ruleKey)));
        byte[] metadata=HttpArtifactCacheBinaryProtocol.createMetadataHeader(ImmutableSet.of(ruleKey),ImmutableMap.<String,String>of(),ByteSource.wrap(data.getBytes(Charsets.UTF_8)),HASH_FUNCTION);
        dataOut.writeInt(metadata.length);
        dataOut.write(metadata);
        dataOut.write(data.getBytes(Charsets.UTF_8));
        expectedData=out.toByteArray();
      }
       assertArrayEquals(expectedData,actualData);
      return new Response.Builder().code(HttpURLConnection.HTTP_ACCEPTED).protocol(Protocol.HTTP_1_1).request(request).build();
    }
  }
;
  cache.storeImpl(ImmutableSet.of(ruleKey),ImmutableMap.<String,String>of(),output,createFinishedEventBuilder());
  assertTrue(hasCalled.get());
  cache.close();
}
