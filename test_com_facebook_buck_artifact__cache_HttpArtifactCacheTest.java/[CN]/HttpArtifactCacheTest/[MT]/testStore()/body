{
  final RuleKey ruleKey=new RuleKey("00000000000000000000000000000000");
  final String data="data";
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  Path output=Paths.get("output/file");
  filesystem.writeContentsToPath(data,output);
  final AtomicBoolean hasCalled=new AtomicBoolean(false);
  HttpArtifactCache cache=new HttpArtifactCache("http",fetchService,storeService,true,filesystem,BUCK_EVENT_BUS,DIRECT_EXECUTOR_SERVICE,ERROR_TEXT_TEMPLATE,Optional.<Long>absent()){
    @Override protected HttpResponse storeCall(    Request.Builder requestBuilder) throws IOException {
      Request request=requestBuilder.url(SERVER).build();
      hasCalled.set(true);
      Buffer buf=new Buffer();
      request.body().writeTo(buf);
      byte[] actualData=buf.readByteArray();
      byte[] expectedData;
      try (ByteArrayOutputStream out=new ByteArrayOutputStream();DataOutputStream dataOut=new DataOutputStream(out)){
        dataOut.write(HttpArtifactCacheBinaryProtocol.createKeysHeader(ImmutableSet.of(ruleKey)));
        byte[] metadata=HttpArtifactCacheBinaryProtocol.createMetadataHeader(ImmutableSet.of(ruleKey),ImmutableMap.<String,String>of(),ByteSource.wrap(data.getBytes(Charsets.UTF_8)));
        dataOut.writeInt(metadata.length);
        dataOut.write(metadata);
        dataOut.write(data.getBytes(Charsets.UTF_8));
        expectedData=out.toByteArray();
      }
       assertArrayEquals(expectedData,actualData);
      Response response=new Response.Builder().body(createDummyBody()).code(HttpURLConnection.HTTP_ACCEPTED).protocol(Protocol.HTTP_1_1).request(request).build();
      return new OkHttpResponseWrapper(response);
    }
  }
;
  cache.storeImpl(ArtifactInfo.builder().addRuleKeys(ruleKey).build(),output,createFinishedEventBuilder());
  assertTrue(hasCalled.get());
  cache.close();
}
