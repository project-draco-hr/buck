{
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  final String name="http cache";
  final RuleKey ruleKey=new RuleKey("00000000000000000000000000000000");
  final RuleKey otherRuleKey=new RuleKey("11111111111111111111111111111111");
  final String data="data";
  final AtomicBoolean consoleEventReceived=new AtomicBoolean(false);
  HttpArtifactCache cache=new HttpArtifactCache(name,fetchService,storeService,true,filesystem,new BuckEventBus(new IncrementingFakeClock(),new BuildId()){
    @Override public void post(    BuckEvent event){
      if (event instanceof ConsoleEvent) {
        consoleEventReceived.set(true);
        ConsoleEvent consoleEvent=(ConsoleEvent)event;
        assertThat(consoleEvent.getMessage(),Matchers.containsString(name));
        assertThat(consoleEvent.getMessage(),Matchers.containsString("incorrect key name"));
      }
    }
  }
,DIRECT_EXECUTOR_SERVICE,ERROR_TEXT_TEMPLATE,Optional.<Long>absent()){
    @Override protected HttpResponse fetchCall(    String path,    Request.Builder requestBuilder) throws IOException {
      Request request=requestBuilder.url(SERVER + path).build();
      Response response=new Response.Builder().request(request).protocol(Protocol.HTTP_1_1).code(HttpURLConnection.HTTP_OK).body(createResponseBody(ImmutableSet.of(otherRuleKey),ImmutableMap.<String,String>of(),ByteSource.wrap(data.getBytes(Charsets.UTF_8)),data)).build();
      return new OkHttpResponseWrapper(response);
    }
  }
;
  Path output=Paths.get("output/file");
  CacheResult result=cache.fetch(ruleKey,LazyPath.ofInstance(output));
  assertEquals(CacheResultType.ERROR,result.getType());
  assertEquals(Optional.<String>absent(),filesystem.readFileIfItExists(output));
  assertTrue(consoleEventReceived.get());
  cache.close();
}
