{
  Path output=Paths.get("output/file");
  final String data="test";
  final RuleKey ruleKey=new RuleKey("00000000000000000000000000000000");
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  final List<Response> responseList=Lists.newArrayList();
  HttpArtifactCache cache=new HttpArtifactCache("http",null,null,new URL("http://localhost:8080"),true,filesystem,BUCK_EVENT_BUS){
    @Override protected Response fetchCall(    Request request) throws IOException {
      Response response=new Response.Builder().request(request).protocol(Protocol.HTTP_1_1).code(HttpURLConnection.HTTP_OK).body(createResponseBody(ImmutableSet.of(ruleKey),ImmutableMap.<String,String>of(),ByteSource.wrap(data.getBytes(Charsets.UTF_8)),data)).build();
      responseList.add(response);
      return response;
    }
  }
;
  CacheResult result=cache.fetch(ruleKey,output);
  assertEquals(result.cacheError().or(""),CacheResultType.HIT,result.getType());
  assertEquals(Optional.of(data),filesystem.readFileIfItExists(output));
  assertTrue("response wasn't fully read!",responseList.get(0).body().source().exhausted());
  cache.close();
}
