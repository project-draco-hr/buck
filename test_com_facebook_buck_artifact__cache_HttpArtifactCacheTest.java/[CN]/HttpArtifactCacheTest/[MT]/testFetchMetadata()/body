{
  Path output=Paths.get("output/file");
  final String data="test";
  final RuleKey ruleKey=new RuleKey("00000000000000000000000000000000");
  final ImmutableMap<String,String> metadata=ImmutableMap.of("some","metadata");
  HttpArtifactCache cache=new HttpArtifactCache(argsBuilder.build()){
    @Override protected HttpResponse fetchCall(    String path,    Request.Builder requestBuilder) throws IOException {
      Request request=requestBuilder.url(SERVER + path).build();
      Response response=new Response.Builder().request(request).protocol(Protocol.HTTP_1_1).code(HttpURLConnection.HTTP_OK).body(createResponseBody(ImmutableSet.of(ruleKey),metadata,ByteSource.wrap(data.getBytes(Charsets.UTF_8)),data)).build();
      return new OkHttpResponseWrapper(response);
    }
  }
;
  CacheResult result=cache.fetch(ruleKey,LazyPath.ofInstance(output));
  assertEquals(CacheResultType.HIT,result.getType());
  assertEquals(metadata,result.getMetadata());
  cache.close();
}
