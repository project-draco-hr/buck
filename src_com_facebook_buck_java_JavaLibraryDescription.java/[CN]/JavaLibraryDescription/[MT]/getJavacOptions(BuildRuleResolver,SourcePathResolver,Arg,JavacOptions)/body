{
  ImmutableJavacOptions.Builder builder=JavacOptions.builder(defaultOptions);
  if (args.source.isPresent()) {
    builder.setSourceLevel(args.source.get());
  }
  if (args.target.isPresent()) {
    builder.setTargetLevel(args.target.get());
  }
  if (args.extraArguments.isPresent()) {
    builder.addAllExtraArguments(args.extraArguments.get());
  }
  if (args.compiler.isPresent()) {
    Either<BuiltInJavac,Either<BuildTarget,Path>> left=args.compiler.get();
    if (left.isRight()) {
      Either<BuildTarget,Path> right=left.getRight();
      if (right.isLeft()) {
        BuildRule rule=ruleResolver.getRule(right.getLeft());
        if (rule instanceof PrebuiltJar) {
          builder.setJavacJarPath(rule.getPathToOutputFile());
        }
 else {
          throw new HumanReadableException("Only prebuilt_jar targets can be used as a javac");
        }
      }
 else {
        builder.setJavacPath(right.getRight());
      }
    }
  }
 else {
    if (args.javac.isPresent() || args.javacJar.isPresent()) {
      if (args.javac.isPresent() && args.javacJar.isPresent()) {
        throw new HumanReadableException("Cannot set both javac and javacjar");
      }
      builder.setJavacPath(args.javac.transform(resolver.getPathFunction()));
      builder.setJavacJarPath(args.javacJar.transform(resolver.getPathFunction()));
    }
  }
  return builder;
}
