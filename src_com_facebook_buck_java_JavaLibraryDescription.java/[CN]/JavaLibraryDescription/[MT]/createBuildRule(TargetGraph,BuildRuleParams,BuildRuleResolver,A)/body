{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  BuildTarget target=params.getBuildTarget();
  if (target.getFlavors().contains(JavaLibrary.SRC_JAR)) {
    return new JavaSourceJar(params,pathResolver,args.srcs.get(),args.mavenCoords.transform(new Function<String,String>(){
      @Override public String apply(      String input){
        return AetherUtil.addClassifier(input,AetherUtil.CLASSIFIER_SOURCES);
      }
    }
));
  }
  JavacOptions.Builder javacOptionsBuilder=JavaLibraryDescription.getJavacOptions(pathResolver,args,defaultOptions);
  AnnotationProcessingParams annotationParams=args.buildAnnotationProcessingParams(target,params.getProjectFilesystem(),resolver);
  javacOptionsBuilder.setAnnotationProcessingParams(annotationParams);
  JavacOptions javacOptions=javacOptionsBuilder.build();
  ImmutableSortedSet<BuildRule> exportedDeps=resolver.getAllRules(args.exportedDeps.get());
  return new DefaultJavaLibrary(params.appendExtraDeps(Iterables.concat(BuildRules.getExportedRules(Iterables.concat(params.getDeclaredDeps(),exportedDeps,resolver.getAllRules(args.providedDeps.get()))),pathResolver.filterBuildRuleInputs(javacOptions.getInputs(pathResolver)))),pathResolver,args.srcs.get(),validateResources(pathResolver,args,params.getProjectFilesystem()),args.proguardConfig.transform(SourcePaths.toSourcePath(params.getProjectFilesystem())),args.postprocessClassesCommands.get(),exportedDeps,resolver.getAllRules(args.providedDeps.get()),ImmutableSet.<Path>of(),javacOptions,args.resourcesRoot,args.mavenCoords);
}
