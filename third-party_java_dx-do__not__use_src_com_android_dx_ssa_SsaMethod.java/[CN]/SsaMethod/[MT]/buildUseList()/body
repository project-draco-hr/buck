{
  if (backMode) {
    throw new RuntimeException("No use list in back mode");
  }
  useList=new ArrayList[registerCount];
  for (int i=0; i < registerCount; i++) {
    useList[i]=new ArrayList();
  }
  forEachInsn(new SsaInsn.Visitor(){
    /** 
 * {@inheritDoc} 
 */
    public void visitMoveInsn(    NormalSsaInsn insn){
      addToUses(insn);
    }
    /** 
 * {@inheritDoc} 
 */
    public void visitPhiInsn(    PhiInsn phi){
      addToUses(phi);
    }
    /** 
 * {@inheritDoc} 
 */
    public void visitNonMoveInsn(    NormalSsaInsn insn){
      addToUses(insn);
    }
    /** 
 * Adds specified insn to the uses list for all of its sources.
 * @param insn {@code non-null;} insn to process
 */
    private void addToUses(    SsaInsn insn){
      RegisterSpecList rl=insn.getSources();
      int sz=rl.size();
      for (int i=0; i < sz; i++) {
        useList[rl.get(i).getReg()].add(insn);
      }
    }
  }
);
  unmodifiableUseList=new List[registerCount];
  for (int i=0; i < registerCount; i++) {
    unmodifiableUseList[i]=Collections.unmodifiableList(useList[i]);
  }
}
