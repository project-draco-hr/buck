@staticmethod
def _parseRuleKeyLine(match):
    rule_key = match.groups()[1]
    if rule_key.endswith(u'='):
        return (rule_key[:(-1)], {})
    (top_key, structure) = rule_key.split(u'=', 1)
    structure_entries = structure.split(u'):')
    structure_entries = [(e + u')') for e in structure_entries if (len(e) > 0)]
    structure_map = collections.OrderedDict()
    last_key = None

    def appendValue(map, key, val):
        if (key in map):
            map[key].append(val)
        else:
            map[key] = [val]
    for e in reversed(structure_entries):
        if (len(e) == 0):
            continue
        elif e.startswith(u'key('):
            last_key = e[4:(-1)]
        else:
            appendValue(structure_map, last_key, e)
            last_key = None
    return (top_key, structure_map)
