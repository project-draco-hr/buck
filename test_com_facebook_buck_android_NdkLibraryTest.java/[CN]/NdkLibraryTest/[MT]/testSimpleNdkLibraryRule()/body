{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  BuildContext context=null;
  String basePath="java/src/com/facebook/base";
  NdkLibrary ndkLibrary=NdkLibraryBuilder.createNdkLibrary(BuildTargetFactory.newInstance(String.format("//%s:base",basePath)),pathResolver,ruleResolver,projectFilesystem).setNdkVersion("r8b").addSrc(Paths.get(basePath + "/Application.mk")).addSrc(Paths.get(basePath + "/main.cpp")).addSrc(Paths.get(basePath + "/Android.mk")).addFlag("flag1").addFlag("flag2").setIsAsset(true).build();
  ruleResolver.addToIndex(ndkLibrary);
  assertEquals(NdkLibraryDescription.TYPE,ndkLibrary.getType());
  assertTrue(ndkLibrary.getProperties().is(ANDROID));
  assertTrue(ndkLibrary.isAsset());
  assertEquals(Paths.get(BuckConstant.GEN_DIR,basePath,"__libbase"),ndkLibrary.getLibraryPath());
  List<Step> steps=ndkLibrary.getBuildSteps(context,new FakeBuildableContext());
  String libbase=Paths.get(BuckConstant.SCRATCH_DIR,basePath,"__libbase").toString();
  MoreAsserts.assertShellCommands("ndk_library() should invoke ndk-build on the given path with some -j value",ImmutableList.of(String.format("%s -j %d -C %s flag1 flag2 " + "APP_PROJECT_PATH=%s " + "APP_BUILD_SCRIPT=%s "+ "NDK_OUT=%s "+ "NDK_LIBS_OUT=%s "+ "BUCK_PROJECT_DIR=. "+ "host-echo-build-step=@# "+ "--silent",ndkBuildCommand,Runtime.getRuntime().availableProcessors(),Paths.get(basePath).toString(),libbase + File.separator,Paths.get(basePath,"Android.mk"),libbase + File.separator,Paths.get(libbase,"libs"),Paths.get(libbase,"libs").toString())),steps.subList(0,1),executionContext);
}
