{
  BuildContext context=null;
  String basePath="java/src/com/facebook/base";
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildRule rule=ruleResolver.buildAndAddToIndex(NdkLibrary.newNdkLibraryRuleBuilder(new FakeAbstractBuildRuleBuilderParams(),Optional.of("r8b")).setBuildTarget(BuildTargetFactory.newInstance(String.format("//%s:base",basePath))).addSrc(Paths.get(basePath + "/Application.mk")).addSrc(Paths.get(basePath + "/main.cpp")).addSrc(Paths.get(basePath + "/Android.mk")).addFlag("flag1").addFlag("flag2").setIsAsset(true).addVisibilityPattern(BuildTargetPattern.MATCH_ALL));
  assertEquals(BuildRuleType.NDK_LIBRARY,rule.getType());
  NdkLibrary ndkLibrary=(NdkLibrary)rule.getBuildable();
  assertTrue(ndkLibrary.getProperties().is(ANDROID));
  assertTrue(ndkLibrary.isAsset());
  assertEquals(Paths.get(BuckConstant.GEN_DIR,basePath,"__libbase"),ndkLibrary.getLibraryPath());
  MoreAsserts.assertListEquals(ImmutableList.of(Paths.get(basePath + "/Android.mk"),Paths.get(basePath + "/Application.mk"),Paths.get(basePath + "/main.cpp")),ImmutableList.copyOf(ndkLibrary.getInputsToCompareToOutput()));
  List<Step> steps=ndkLibrary.getBuildSteps(context,new FakeBuildableContext());
  ExecutionContext executionContext=createMock(ExecutionContext.class);
  ProjectFilesystem projectFilesystem=createMock(ProjectFilesystem.class);
  Function<Path,Path> pathTransform=new Function<Path,Path>(){
    @Override public Path apply(    Path pathRelativeTo){
      return Paths.get("/foo/",pathRelativeTo.toString());
    }
  }
;
  expect(executionContext.getProjectFilesystem()).andReturn(projectFilesystem);
  expect(projectFilesystem.getAbsolutifier()).andReturn(pathTransform);
  Path binDir=Paths.get(BuckConstant.BIN_DIR,"java/src/com/facebook/base/__libbase/libs");
  expect(projectFilesystem.resolve(binDir)).andReturn(Paths.get("/foo/" + binDir));
  Path ndkDir=createMock(Path.class);
  AndroidPlatformTarget mockPlatformTarget=createMock(AndroidPlatformTarget.class);
  expect(mockPlatformTarget.getNdkDirectory()).andReturn(Optional.of(ndkDir));
  expect(executionContext.getAndroidPlatformTarget()).andReturn(mockPlatformTarget);
  Path ndkBuildDir=createMock(Path.class);
  expect(ndkDir.resolve("ndk-build")).andReturn(ndkBuildDir);
  expect(ndkBuildDir.toAbsolutePath()).andReturn(Paths.get("/ndk-r8b/ndk-build"));
  replay(executionContext,projectFilesystem,mockPlatformTarget,ndkDir,ndkBuildDir);
  MoreAsserts.assertShellCommands("ndk_library() should invoke ndk-build on the given path with some -j value",ImmutableList.of(String.format("/ndk-r8b/ndk-build -j %d -C %s/ flag1 flag2 " + "APP_PROJECT_PATH=/foo/%s/%s/%s/ APP_BUILD_SCRIPT=/foo/%s/Android.mk " + "NDK_OUT=/foo/%s/%s/%s/ "+ "NDK_LIBS_OUT=/foo/%s/%s/%s/libs",Runtime.getRuntime().availableProcessors(),basePath,BuckConstant.BIN_DIR,basePath,"__libbase",basePath,BuckConstant.BIN_DIR,basePath,"__libbase",BuckConstant.BIN_DIR,basePath,"__libbase")),steps.subList(0,1),executionContext);
  verify(executionContext,projectFilesystem);
}
