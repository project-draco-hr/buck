{
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  BuildContext context=FakeBuildContext.NOOP_CONTEXT;
  String basePath="java/src/com/facebook/base";
  BuildTarget target=BuildTargetFactory.newInstance(String.format("//%s:base",basePath));
  NdkLibrary ndkLibrary=(NdkLibrary)new NdkLibraryBuilder(target).setFlags(ImmutableList.of("flag1","flag2")).setIsAsset(true).build(ruleResolver,projectFilesystem);
  assertEquals("ndk_library",ndkLibrary.getType());
  assertTrue(ndkLibrary.getProperties().is(ANDROID));
  assertTrue(ndkLibrary.isAsset());
  assertEquals(Paths.get(BuckConstant.GEN_DIR,basePath,"__libbase"),ndkLibrary.getLibraryPath());
  List<Step> steps=ndkLibrary.getBuildSteps(context,new FakeBuildableContext());
  String libbase=Paths.get(BuckConstant.SCRATCH_DIR,basePath,"__libbase").toString();
  MoreAsserts.assertShellCommands("ndk_library() should invoke ndk-build on the given path with some -j value",ImmutableList.of(String.format("%s -j %d -C %s flag1 flag2 " + "APP_PROJECT_PATH=%s " + "APP_BUILD_SCRIPT=%s "+ "NDK_OUT=%s "+ "NDK_LIBS_OUT=%s "+ "BUCK_PROJECT_DIR=../../../../.. "+ "host-echo-build-step=%s "+ "--silent",ndkBuildCommand,Runtime.getRuntime().availableProcessors(),Paths.get(basePath).toString(),projectFilesystem.resolve(libbase) + File.separator,projectFilesystem.resolve(NdkLibraryDescription.getGeneratedMakefilePath(target)),projectFilesystem.resolve(libbase) + File.separator,projectFilesystem.resolve(Paths.get(libbase,"libs")),Platform.detect() == Platform.WINDOWS ? "@REM" : "@#")),steps.subList(3,4),executionContext);
}
