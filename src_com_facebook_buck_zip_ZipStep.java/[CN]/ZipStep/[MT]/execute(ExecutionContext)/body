{
  final ProjectFilesystem filesystem=context.getProjectFilesystem();
  if (filesystem.exists(pathToZipFile)) {
    context.postEvent(ConsoleEvent.severe("Attempting to overwrite an existing zip: %s",pathToZipFile));
    return 1;
  }
  try (BufferedOutputStream baseOut=new BufferedOutputStream(filesystem.newFileOutputStream(pathToZipFile));final CustomZipOutputStream out=ZipOutputStreams.newOutputStream(baseOut,OVERWRITE_EXISTING)){
    final FileVisitor<Path> pathFileVisitor=new SimpleFileVisitor<Path>(){
      private boolean isSkipFile(      Path file){
        if (!paths.isEmpty() && !paths.contains(file)) {
          return true;
        }
        return false;
      }
      private String getEntryName(      Path path){
        Path relativePath=junkPaths ? path.getFileName() : baseDir.relativize(path);
        return MorePaths.pathWithUnixSeparators(relativePath);
      }
      private CustomZipEntry getZipEntry(      String entryName,      Path path,      BasicFileAttributes attr) throws IOException {
        boolean isDirectory=path.toFile().isDirectory();
        if (isDirectory) {
          entryName+="/";
        }
        CustomZipEntry entry=new CustomZipEntry(entryName);
        entry.setTime(attr.lastModifiedTime().toMillis());
        entry.setCompressionLevel(compressionLevel);
        if (entry.getMethod() == ZipEntry.STORED && !isDirectory) {
          entry.setSize(attr.size());
          entry.setCompressedSize(attr.size());
          entry.setCrc(com.google.common.io.Files.hash(path.toFile(),Hashing.crc32()).padToLong());
        }
        return entry;
      }
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        if (!isSkipFile(file)) {
          Path path=filesystem.resolve(file);
          out.putNextEntry(getZipEntry(getEntryName(file),path,attrs));
          Files.copy(path,out);
          out.closeEntry();
        }
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult preVisitDirectory(      Path dir,      BasicFileAttributes attrs) throws IOException {
        if (!dir.equals(baseDir) && !isSkipFile(dir)) {
          out.putNextEntry(getZipEntry(getEntryName(dir),filesystem.resolve(dir),attrs));
          out.closeEntry();
        }
        return FileVisitResult.CONTINUE;
      }
    }
;
    filesystem.walkRelativeFileTree(baseDir,pathFileVisitor);
  }
 catch (  IOException e) {
    context.logError(e,"Error creating zip file %s",pathToZipFile);
    return 1;
  }
  return 0;
}
