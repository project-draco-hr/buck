{
  if (filesystem.exists(pathToZipFile)) {
    context.postEvent(ConsoleEvent.severe("Attempting to overwrite an existing zip: %s",pathToZipFile));
    return StepExecutionResult.ERROR;
  }
  final Map<String,Pair<CustomZipEntry,Optional<Path>>> entries=Maps.newTreeMap();
  FileVisitor<Path> pathFileVisitor=new SimpleFileVisitor<Path>(){
    private boolean isSkipFile(    Path file){
      return !paths.isEmpty() && !paths.contains(file);
    }
    private String getEntryName(    Path path){
      Path relativePath=junkPaths ? path.getFileName() : baseDir.relativize(path);
      return MorePaths.pathWithUnixSeparators(relativePath);
    }
    private CustomZipEntry getZipEntry(    String entryName,    final Path path,    BasicFileAttributes attr) throws IOException {
      boolean isDirectory=filesystem.isDirectory(path);
      if (isDirectory) {
        entryName+="/";
      }
      CustomZipEntry entry=new CustomZipEntry(entryName);
      entry.setFakeTime();
      entry.setCompressionLevel(isDirectory ? ZipCompressionLevel.MIN_COMPRESSION_LEVEL.getValue() : compressionLevel.getValue());
      if (entry.getMethod() == ZipEntry.STORED && !isDirectory) {
        entry.setSize(attr.size());
        entry.setCompressedSize(attr.size());
        entry.setCrc(new ByteSource(){
          @Override public InputStream openStream() throws IOException {
            return filesystem.newFileInputStream(path);
          }
        }
.hash(Hashing.crc32()).padToLong());
      }
      long externalAttributes=filesystem.getFileAttributesForZipEntry(path);
      LOG.verbose("Setting mode for entry %s path %s to 0x%08X",entryName,path,externalAttributes);
      entry.setExternalAttributes(externalAttributes);
      return entry;
    }
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      if (!isSkipFile(file)) {
        CustomZipEntry entry=getZipEntry(getEntryName(file),file,attrs);
        entries.put(entry.getName(),new Pair<>(entry,Optional.of(file)));
      }
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attrs) throws IOException {
      if (!dir.equals(baseDir) && !isSkipFile(dir)) {
        CustomZipEntry entry=getZipEntry(getEntryName(dir),dir,attrs);
        entries.put(entry.getName(),new Pair<>(entry,Optional.<Path>absent()));
      }
      return FileVisitResult.CONTINUE;
    }
  }
;
  try (BufferedOutputStream baseOut=new BufferedOutputStream(filesystem.newFileOutputStream(pathToZipFile));CustomZipOutputStream out=ZipOutputStreams.newOutputStream(baseOut,THROW_EXCEPTION)){
    filesystem.walkRelativeFileTree(baseDir,pathFileVisitor);
    for (    Pair<CustomZipEntry,Optional<Path>> entry : entries.values()) {
      out.putNextEntry(entry.getFirst());
      if (entry.getSecond().isPresent()) {
        try (InputStream input=filesystem.newFileInputStream(entry.getSecond().get())){
          ByteStreams.copy(input,out);
        }
       }
      out.closeEntry();
    }
  }
 catch (  IOException e) {
    context.logError(e,"Error creating zip file %s",pathToZipFile);
    return StepExecutionResult.ERROR;
  }
  return StepExecutionResult.SUCCESS;
}
