{
  ImmutableList.Builder<Step> stepsBuilder=ImmutableList.builder();
  stepsBuilder.add(new MakeCleanDirectoryStep(getProjectFilesystem(),bundleRoot));
  Path resourcesDestinationPath=bundleRoot.resolve(this.destinations.getResourcesPath());
  if (assetCatalog.isPresent()) {
    stepsBuilder.add(new MkdirStep(getProjectFilesystem(),resourcesDestinationPath));
    Path bundleDir=assetCatalog.get().getOutputDir();
    stepsBuilder.add(CopyStep.forDirectory(getProjectFilesystem(),bundleDir,resourcesDestinationPath,CopyStep.DirectoryMode.CONTENTS_ONLY));
  }
  Path metadataPath=getMetadataPath();
  Path infoPlistInputPath=getResolver().getAbsolutePath(infoPlist);
  Path infoPlistSubstitutionTempPath=BuildTargets.getScratchPath(getProjectFilesystem(),getBuildTarget(),"%s.plist");
  Path infoPlistOutputPath=metadataPath.resolve("Info.plist");
  stepsBuilder.add(new MkdirStep(getProjectFilesystem(),metadataPath),new WriteFileStep(getProjectFilesystem(),"APPLWRUN",metadataPath.resolve("PkgInfo"),false),new MkdirStep(getProjectFilesystem(),infoPlistSubstitutionTempPath.getParent()),new FindAndReplaceStep(getProjectFilesystem(),infoPlistInputPath,infoPlistSubstitutionTempPath,InfoPlistSubstitution.createVariableExpansionFunction(withDefaults(infoPlistSubstitutions,ImmutableMap.of("EXECUTABLE_NAME",binaryName,"PRODUCT_NAME",binaryName)))),new PlistProcessStep(getProjectFilesystem(),infoPlistSubstitutionTempPath,assetCatalog.isPresent() ? Optional.of(assetCatalog.get().getOutputPlist()) : Optional.<Path>absent(),infoPlistOutputPath,getInfoPlistAdditionalKeys(),getInfoPlistOverrideKeys(),PlistProcessStep.OutputFormat.BINARY));
  if (hasBinary) {
    appendCopyBinarySteps(stepsBuilder);
    appendCopyDsymStep(stepsBuilder,buildableContext);
  }
  if (!Iterables.isEmpty(Iterables.concat(resources.getResourceDirs(),resources.getDirsContainingResourceDirs(),resources.getResourceFiles()))) {
    stepsBuilder.add(new MkdirStep(getProjectFilesystem(),resourcesDestinationPath));
    for (    SourcePath dir : resources.getResourceDirs()) {
      stepsBuilder.add(CopyStep.forDirectory(getProjectFilesystem(),getResolver().getAbsolutePath(dir),resourcesDestinationPath,CopyStep.DirectoryMode.DIRECTORY_AND_CONTENTS));
    }
    for (    SourcePath dir : resources.getDirsContainingResourceDirs()) {
      stepsBuilder.add(CopyStep.forDirectory(getProjectFilesystem(),getResolver().getAbsolutePath(dir),resourcesDestinationPath,CopyStep.DirectoryMode.CONTENTS_ONLY));
    }
    for (    SourcePath file : resources.getResourceFiles()) {
      Path resolvedFilePath=getResolver().getRelativePath(file);
      Path destinationPath=resourcesDestinationPath.resolve(resolvedFilePath.getFileName());
      addResourceProcessingSteps(resolvedFilePath,destinationPath,stepsBuilder);
    }
  }
  addStepsToCopyExtensionBundlesDependencies(stepsBuilder);
  for (  SourcePath variantSourcePath : resources.getResourceVariantFiles()) {
    Path variantFilePath=getResolver().getRelativePath(variantSourcePath);
    Path variantDirectory=variantFilePath.getParent();
    if (variantDirectory == null || !variantDirectory.toString().endsWith(".lproj")) {
      throw new HumanReadableException("Variant files have to be in a directory with name ending in '.lproj', " + "but '%s' is not.",variantFilePath);
    }
    Path bundleVariantDestinationPath=resourcesDestinationPath.resolve(variantDirectory.getFileName());
    stepsBuilder.add(new MkdirStep(getProjectFilesystem(),bundleVariantDestinationPath));
    Path destinationPath=bundleVariantDestinationPath.resolve(variantFilePath.getFileName());
    addResourceProcessingSteps(variantFilePath,destinationPath,stepsBuilder);
  }
  if (!frameworks.isEmpty()) {
    Path frameworksDestinationPath=bundleRoot.resolve(this.destinations.getFrameworksPath());
    stepsBuilder.add(new MkdirStep(getProjectFilesystem(),frameworksDestinationPath));
    for (    SourcePath framework : frameworks) {
      stepsBuilder.add(CopyStep.forDirectory(getProjectFilesystem(),getResolver().getAbsolutePath(framework),frameworksDestinationPath,CopyStep.DirectoryMode.DIRECTORY_AND_CONTENTS));
    }
  }
  if (needCodeSign()) {
    Optional<Path> signingEntitlementsTempPath;
    Supplier<CodeSignIdentity> codeSignIdentitySupplier;
    if (adHocCodeSignIsSufficient()) {
      signingEntitlementsTempPath=Optional.absent();
      codeSignIdentitySupplier=new Supplier<CodeSignIdentity>(){
        @Override public CodeSignIdentity get(){
          return CodeSignIdentity.AD_HOC;
        }
      }
;
    }
 else {
      Optional<Path> entitlementsPlist=Optional.absent();
      final Path srcRoot=getProjectFilesystem().getRootPath().resolve(getBuildTarget().getBasePath());
      Optional<String> entitlementsPlistString=InfoPlistSubstitution.getVariableExpansionForPlatform(CODE_SIGN_ENTITLEMENTS,platformName,withDefaults(infoPlistSubstitutions,ImmutableMap.of("SOURCE_ROOT",srcRoot.toString(),"SRCROOT",srcRoot.toString())));
      if (entitlementsPlistString.isPresent()) {
        entitlementsPlist=Optional.of(srcRoot.resolve(Paths.get(entitlementsPlistString.get())));
      }
      signingEntitlementsTempPath=Optional.of(BuildTargets.getScratchPath(getProjectFilesystem(),getBuildTarget(),"%s.xcent"));
      final ProvisioningProfileCopyStep provisioningProfileCopyStep=new ProvisioningProfileCopyStep(getProjectFilesystem(),infoPlistOutputPath,Optional.<String>absent(),entitlementsPlist,provisioningProfileStore,resourcesDestinationPath.resolve("embedded.mobileprovision"),signingEntitlementsTempPath.get(),codeSignIdentityStore);
      stepsBuilder.add(provisioningProfileCopyStep);
      codeSignIdentitySupplier=new Supplier<CodeSignIdentity>(){
        @Override public CodeSignIdentity get(){
          ProvisioningProfileMetadata selectedProfile=Futures.getUnchecked(provisioningProfileCopyStep.getSelectedProvisioningProfileFuture());
          ImmutableSet<HashCode> fingerprints=selectedProfile.getDeveloperCertificateFingerprints();
          if (fingerprints.isEmpty()) {
            return Iterables.getFirst(codeSignIdentityStore.getIdentities(),CodeSignIdentity.AD_HOC);
          }
          for (          CodeSignIdentity identity : codeSignIdentityStore.getIdentities()) {
            if (identity.getFingerprint().isPresent() && fingerprints.contains(identity.getFingerprint().get())) {
              return identity;
            }
          }
          throw new HumanReadableException("No code sign identity available for provisioning profile: %s\n" + "Profile requires an identity with one of the following SHA1 fingerprints " + "available in your keychain: \n  %s",selectedProfile.getProfilePath(),Joiner.on("\n  ").join(fingerprints));
        }
      }
;
    }
    addSwiftStdlibStepIfNeeded(Optional.of(codeSignIdentitySupplier),stepsBuilder);
    stepsBuilder.add(new CodeSignStep(getProjectFilesystem().getRootPath(),getResolver(),bundleRoot,signingEntitlementsTempPath,codeSignIdentitySupplier,codesignAllocatePath));
  }
 else {
    addSwiftStdlibStepIfNeeded(Optional.<Supplier<CodeSignIdentity>>absent(),stepsBuilder);
  }
  buildableContext.recordArtifact(getPathToOutput());
  return stepsBuilder.build();
}
