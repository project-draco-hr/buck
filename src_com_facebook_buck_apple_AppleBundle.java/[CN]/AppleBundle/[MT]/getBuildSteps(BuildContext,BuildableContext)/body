{
  ImmutableMap<String,String> plistVariables=ImmutableMap.of("EXECUTABLE_NAME",binaryName,"PRODUCT_NAME",binaryName);
  ImmutableList.Builder<Step> stepsBuilder=ImmutableList.builder();
  Path productsPath=bundleRoot.resolve(bundleSubfolders.get(AppleBundleDestination.SubfolderSpec.PRODUCTS));
  stepsBuilder.add(new MakeCleanDirectoryStep(bundleRoot),new WriteFileStep("APPLWRUN",bundleRoot.resolve("PkgInfo")),new MkdirStep(productsPath),new FindAndReplaceStep(getResolver().getPath(infoPlist.get()),productsPath.resolve("Info.plist"),InfoPlistSubstitution.createVariableExpansionFunction(plistVariables)));
  if (binary.isPresent()) {
    stepsBuilder.add(new MkdirStep(bundleRoot.resolve(executablesPath)));
    stepsBuilder.add(CopyStep.forFile(binary.get().getPathToOutputFile(),bundleRoot.resolve(binaryPath)));
  }
  for (  Map.Entry<Path,AppleBundleDestination> dirEntry : dirs.entrySet()) {
    Path bundleDestinationPath=getBundleDestinationPath(bundleRoot,bundleSubfolders,dirEntry.getValue());
    stepsBuilder.add(new MkdirStep(bundleDestinationPath));
    stepsBuilder.add(CopyStep.forDirectory(dirEntry.getKey(),bundleDestinationPath,CopyStep.DirectoryMode.DIRECTORY_AND_CONTENTS));
  }
  for (  Map.Entry<SourcePath,AppleBundleDestination> fileEntry : files.entrySet()) {
    Path bundleDestinationPath=getBundleDestinationPath(bundleRoot,bundleSubfolders,fileEntry.getValue());
    stepsBuilder.add(new MkdirStep(bundleDestinationPath));
    Path resolvedFilePath=getResolver().getPath(fileEntry.getKey());
    stepsBuilder.add(CopyStep.forFile(resolvedFilePath,bundleDestinationPath.resolve(resolvedFilePath.getFileName())));
  }
  for (  AppleAssetCatalog bundledAssetCatalog : bundledAssetCatalogs) {
    Path bundleDir=bundledAssetCatalog.getOutputDir();
    stepsBuilder.add(CopyStep.forDirectory(bundleDir,bundleRoot,CopyStep.DirectoryMode.DIRECTORY_AND_CONTENTS));
  }
  if (mergedAssetCatalog.isPresent()) {
    Path bundleDir=mergedAssetCatalog.get().getOutputDir();
    stepsBuilder.add(CopyStep.forDirectory(bundleDir,bundleRoot,CopyStep.DirectoryMode.CONTENTS_ONLY));
  }
  buildableContext.recordArtifactsInDirectory(bundleRoot);
  stepsBuilder.add(new RmStep(outputZipPath,true));
  stepsBuilder.add(new ZipStep(outputZipPath,ImmutableSet.<Path>of(),false,ZipStep.MIN_COMPRESSION_LEVEL,bundleRoot));
  return stepsBuilder.build();
}
