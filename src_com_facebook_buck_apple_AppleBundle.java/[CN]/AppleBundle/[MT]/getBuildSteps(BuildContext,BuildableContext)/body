{
  ImmutableList.Builder<Step> stepsBuilder=ImmutableList.builder();
  Path metadataPath=getMetadataPath();
  Path infoPlistInputPath=getResolver().getPath(infoPlist.get());
  Path infoPlistSubstitutionTempPath=BuildTargets.getScratchPath(getBuildTarget(),"%s.plist");
  Path infoPlistOutputPath=metadataPath.resolve("Info.plist");
  stepsBuilder.add(new MakeCleanDirectoryStep(bundleRoot),new MkdirStep(metadataPath),new WriteFileStep("APPLWRUN",metadataPath.resolve("PkgInfo")),new FindAndReplaceStep(infoPlistInputPath,infoPlistSubstitutionTempPath,InfoPlistSubstitution.createVariableExpansionFunction(withDefaults(infoPlistSubstitutions,ImmutableMap.of("EXECUTABLE_NAME",binaryName,"PRODUCT_NAME",binaryName)))),new PlistProcessStep(infoPlistSubstitutionTempPath,infoPlistOutputPath,getInfoPlistAdditionalKeys(platformName,sdkName),getInfoPlistOverrideKeys(platformName),PlistProcessStep.OutputFormat.BINARY));
  if (binary.isPresent() && binary.get().getPathToOutput() != null) {
    stepsBuilder.add(new MkdirStep(bundleRoot.resolve(this.destinations.getExecutablesPath())));
    Path bundleBinaryPath=bundleRoot.resolve(binaryPath);
    stepsBuilder.add(CopyStep.forFile(binary.get().getPathToOutput(),bundleBinaryPath));
    stepsBuilder.add(new DsymStep(dsymutil.getCommandPrefix(getResolver()),bundleBinaryPath,bundleBinaryPath.resolveSibling(bundleBinaryPath.getFileName().toString() + ".dSYM")));
    stepsBuilder.add(new DefaultShellStep(ImmutableList.<String>builder().addAll(strip.getCommandPrefix(getResolver())).add("-S").add(getProjectFilesystem().resolve(bundleBinaryPath).toString()).build()));
  }
  Path bundleDestinationPath=bundleRoot.resolve(this.destinations.getResourcesPath());
  for (  SourcePath dir : resourceDirs) {
    stepsBuilder.add(new MkdirStep(bundleDestinationPath));
    stepsBuilder.add(CopyStep.forDirectory(getResolver().getPath(dir),bundleDestinationPath,CopyStep.DirectoryMode.DIRECTORY_AND_CONTENTS));
  }
  for (  SourcePath dir : dirsContainingResourceDirs) {
    stepsBuilder.add(new MkdirStep(bundleDestinationPath));
    stepsBuilder.add(CopyStep.forDirectory(getResolver().getPath(dir),bundleDestinationPath,CopyStep.DirectoryMode.CONTENTS_ONLY));
  }
  for (  SourcePath file : resourceFiles) {
    stepsBuilder.add(new MkdirStep(bundleDestinationPath));
    Path resolvedFilePath=getResolver().getPath(file);
    Path destinationPath=bundleDestinationPath.resolve(resolvedFilePath.getFileName());
    addResourceProcessingSteps(resolvedFilePath,destinationPath,stepsBuilder);
  }
  if (resourceVariantFiles.isPresent()) {
    for (    SourcePath variantSourcePath : resourceVariantFiles.get()) {
      Path variantFilePath=getResolver().getPath(variantSourcePath);
      Path variantDirectory=variantFilePath.getParent();
      if (variantDirectory == null || !variantDirectory.toString().endsWith(".lproj")) {
        throw new HumanReadableException("Variant files have to be in a directory with name ending in '.lproj', " + "but '%s' is not.",variantFilePath);
      }
      Path bundleVariantDestinationPath=bundleDestinationPath.resolve(variantDirectory.getFileName());
      stepsBuilder.add(new MkdirStep(bundleVariantDestinationPath));
      Path destinationPath=bundleVariantDestinationPath.resolve(variantFilePath.getFileName());
      addResourceProcessingSteps(variantFilePath,destinationPath,stepsBuilder);
    }
  }
  for (  AppleAssetCatalog bundledAssetCatalog : bundledAssetCatalogs) {
    Path bundleDir=bundledAssetCatalog.getOutputDir();
    stepsBuilder.add(CopyStep.forDirectory(bundleDir,bundleRoot,CopyStep.DirectoryMode.DIRECTORY_AND_CONTENTS));
  }
  if (mergedAssetCatalog.isPresent()) {
    Path bundleDir=mergedAssetCatalog.get().getOutputDir();
    stepsBuilder.add(CopyStep.forDirectory(bundleDir,bundleRoot,CopyStep.DirectoryMode.CONTENTS_ONLY));
  }
  if (provisioningProfiles.isPresent()) {
    Optional<Path> entitlementsPlist=Optional.absent();
    final String srcRoot=context.getProjectRoot().resolve(getBuildTarget().getBasePath()).toString();
    Optional<String> entitlementsPlistString=InfoPlistSubstitution.getVariableExpansionForPlatform(CODE_SIGN_ENTITLEMENTS,platformName,withDefaults(infoPlistSubstitutions,ImmutableMap.of("SOURCE_ROOT",srcRoot,"SRCROOT",srcRoot)));
    if (entitlementsPlistString.isPresent()) {
      entitlementsPlist=Optional.of(Paths.get(entitlementsPlistString.get()));
    }
    final Path signingEntitlementsTempPath=BuildTargets.getScratchPath(getBuildTarget(),"%s.xcent");
    stepsBuilder.add(new ProvisioningProfileCopyStep(infoPlistOutputPath,Optional.<String>absent(),entitlementsPlist,provisioningProfiles.get(),bundleDestinationPath.resolve("embedded.mobileprovision"),signingEntitlementsTempPath));
    stepsBuilder.add(new CodeSignStep(bundleDestinationPath,signingEntitlementsTempPath,codeSignIdentity.get().getHash()));
  }
  buildableContext.recordArtifact(bundleRoot);
  return stepsBuilder.build();
}
