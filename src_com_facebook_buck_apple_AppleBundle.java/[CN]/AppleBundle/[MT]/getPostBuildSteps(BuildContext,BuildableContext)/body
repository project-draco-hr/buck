{
  if (!hasBinary || debugInfoFormat == DebugInfoFormat.NONE) {
    return ImmutableList.of();
  }
  return ImmutableList.<Step>of(new Step(){
    @Override public int execute(    ExecutionContext context) throws IOException, InterruptedException {
      ProcessExecutorParams params=ProcessExecutorParams.builder().addCommand("lldb").build();
      return context.getProcessExecutor().launchAndExecute(params,ImmutableSet.<ProcessExecutor.Option>of(),Optional.of(String.format("target create %s\ntarget symbols add %s",bundleRoot,dsymPath)),Optional.<Long>absent(),Optional.<Function<Process,Void>>absent()).getExitCode();
    }
    @Override public String getShortName(){
      return "register debug symbols";
    }
    @Override public String getDescription(    ExecutionContext context){
      return String.format("register debug symbols for binary '%s': '%s'",bundleRoot,dsymPath);
    }
  }
);
}
