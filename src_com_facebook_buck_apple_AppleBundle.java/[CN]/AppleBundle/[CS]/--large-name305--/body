{
  super(params,resolver);
  this.extension=extension.isLeft() ? extension.getLeft().toFileExtension() : extension.getRight();
  this.productName=productName;
  this.infoPlist=infoPlist;
  this.infoPlistSubstitutions=ImmutableMap.copyOf(infoPlistSubstitutions);
  this.binary=binary;
  this.destinations=destinations;
  this.resourceDirs=resourceDirs;
  this.resourceFiles=resourceFiles;
  this.dirsContainingResourceDirs=dirsContainingResourceDirs;
  this.extensionBundlePaths=extensionBundlePaths;
  this.resourceVariantFiles=resourceVariantFiles;
  this.ibtool=ibtool;
  this.dsymutil=dsymutil;
  this.strip=strip;
  this.assetCatalog=assetCatalog;
  this.binaryName=getBinaryName(getBuildTarget(),this.productName);
  this.bundleRoot=getBundleRoot(getBuildTarget(),this.binaryName,this.extension);
  this.binaryPath=this.destinations.getExecutablesPath().resolve(this.binaryName);
  this.tests=ImmutableSortedSet.copyOf(tests);
  this.platformName=sdk.getApplePlatform().getName();
  this.sdkName=sdk.getName();
  this.debugInfoFormat=debugInfoFormat;
  if (binary.isPresent() && ApplePlatform.needsCodeSign(this.platformName)) {
    this.provisioningProfileStore=provisioningProfileStore;
    Optional<CodeSignIdentity> foundIdentity=Optional.absent();
    Optional<String> customIdentity=InfoPlistSubstitution.getVariableExpansionForPlatform(CODE_SIGN_IDENTITY,this.platformName,this.infoPlistSubstitutions);
    if (customIdentity.isPresent()) {
      LOG.debug("Bundle specifies custom code signing identity: " + customIdentity.get());
      Optional<HashCode> fingerprint=CodeSignIdentity.toFingerprint(customIdentity.get());
      if (fingerprint.isPresent()) {
        foundIdentity=codeSignIdentityStore.findIdentityMatchingFingerprint(fingerprint.get());
      }
 else {
        foundIdentity=codeSignIdentityStore.findIdentityByCommonNamePrefix(customIdentity.get());
      }
    }
 else     if (!codeSignIdentityStore.getIdentities().isEmpty()) {
      LOG.debug("Using arbitrary code signing identity");
      foundIdentity=Optional.of(Iterables.getLast(codeSignIdentityStore.getIdentities()));
    }
    if (!foundIdentity.isPresent()) {
      throw new HumanReadableException("The platform " + platformName + " for this target "+ "requires code signing but couldn't find a compatible code signing identity to use.");
    }
    LOG.debug("Code signing identity is " + foundIdentity.toString());
    this.codeSignIdentity=foundIdentity;
  }
 else {
    this.provisioningProfileStore=ProvisioningProfileStore.fromProvisioningProfiles(ImmutableList.<ProvisioningProfileMetadata>of());
    this.codeSignIdentity=Optional.absent();
  }
  bundleBinaryPath=bundleRoot.resolve(binaryPath);
  dsymPath=bundleBinaryPath.getParent().getParent().resolve(bundleBinaryPath.getFileName().toString() + ".dSYM");
  hasBinary=binary.isPresent() && binary.get().getPathToOutput() != null;
}
