{
  super(params,resolver);
  this.extension=extension.isLeft() ? extension.getLeft().toFileExtension() : extension.getRight();
  this.infoPlist=infoPlist;
  this.infoPlistSubstitutions=ImmutableMap.copyOf(infoPlistSubstitutions);
  this.binary=binary;
  this.destinations=destinations;
  this.resourceDirs=resourceDirs;
  this.resourceFiles=resourceFiles;
  this.dirsContainingResourceDirs=dirsContainingResourceDirs;
  this.resourceVariantFiles=resourceVariantFiles;
  this.ibtool=ibtool;
  this.dsymutil=dsymutil;
  this.strip=strip;
  this.bundledAssetCatalogs=ImmutableSet.copyOf(bundledAssetCatalogs);
  this.mergedAssetCatalog=mergedAssetCatalog;
  this.binaryName=getBinaryName(getBuildTarget());
  this.bundleRoot=getBundleRoot(getBuildTarget(),this.extension);
  this.binaryPath=this.destinations.getExecutablesPath().resolve(this.binaryName);
  this.tests=ImmutableSortedSet.copyOf(tests);
  this.platformName=sdk.getApplePlatform().getName();
  this.sdkName=sdk.getName();
  if (binary.isPresent() && ApplePlatform.needsCodeSign(this.platformName)) {
    final Path searchPath;
    if (provisioningProfileSearchPath.isPresent()) {
      searchPath=resolver.getResolvedPath(provisioningProfileSearchPath.get());
    }
 else {
      searchPath=Paths.get(System.getProperty("user.home") + "/Library/MobileDevice/Provisioning Profiles");
    }
    this.provisioningProfiles=Optional.of(ProvisioningProfileCopyStep.findProfilesInPath(searchPath));
    Optional<CodeSignIdentity> foundIdentity=Optional.absent();
    Optional<String> customIdentity=InfoPlistSubstitution.getVariableExpansionForPlatform(CODE_SIGN_IDENTITY,this.platformName,this.infoPlistSubstitutions);
    if (customIdentity.isPresent()) {
      LOG.debug("Bundle specifies custom code signing identity: " + customIdentity.get());
      if (CodeSignIdentity.isHash(customIdentity.get())) {
        for (        CodeSignIdentity identity : allValidCodeSignIdentities) {
          if (identity.getHash().equals(customIdentity.get())) {
            foundIdentity=Optional.of(identity);
            break;
          }
        }
      }
 else {
        for (        CodeSignIdentity identity : allValidCodeSignIdentities) {
          if (identity.getFullName().startsWith(customIdentity.get())) {
            foundIdentity=Optional.of(identity);
            break;
          }
        }
      }
    }
 else     if (!allValidCodeSignIdentities.isEmpty()) {
      LOG.debug("Using default code signing identity");
      Iterator<CodeSignIdentity> it=allValidCodeSignIdentities.iterator();
      foundIdentity=Optional.of(it.next());
    }
    if (!foundIdentity.isPresent()) {
      throw new HumanReadableException("The platform " + platformName + " for this target "+ "requires code signing but couldn't find a compatible code signing identity to use.");
    }
    LOG.debug("Code signing identity is " + foundIdentity.toString());
    this.codeSignIdentity=foundIdentity;
  }
 else {
    this.provisioningProfiles=Optional.absent();
    this.codeSignIdentity=Optional.absent();
  }
}
