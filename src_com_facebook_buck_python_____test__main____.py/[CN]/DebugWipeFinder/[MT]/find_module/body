def find_module(self, fullname, path=None):
    (_, _, basename) = fullname.rpartition('.')
    try:
        (fd, pypath, (_, _, kind)) = imp.find_module(basename, path)
    except Exception:
        try:
            (fd, pypath, (_, _, kind)) = imp.find_module(basename, None)
        except Exception:
            return None
    if hasattr(fd, 'close'):
        fd.close()
    if (kind != imp.PY_SOURCE):
        return None
    if self.matcher.include(pypath):
        return None
    "\n        This is defined to match CPython's PyVarObject struct\n        "


    class PyVarObject(ctypes.Structure):
        _fields_ = [('ob_refcnt', ctypes.c_long), ('ob_type', ctypes.c_void_p), ('ob_size', ctypes.c_ulong)]


    class DebugWipeLoader(SourceFileLoader):
        '\n            PEP302 loader that zeros out debug information before execution\n            '

        def get_code(self, fullname):
            code = super(DebugWipeLoader, self).get_code(fullname)
            if code:
                code_impl = PyVarObject.from_address(id(code.co_lnotab))
                code_impl.ob_size = 0
            return code
    return DebugWipeLoader(fullname, pypath)
