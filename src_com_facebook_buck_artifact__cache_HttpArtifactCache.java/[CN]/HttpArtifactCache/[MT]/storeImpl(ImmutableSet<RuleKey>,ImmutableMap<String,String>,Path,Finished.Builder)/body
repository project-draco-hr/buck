{
  Request.Builder builder=new Request.Builder();
  builder.url(new URL(url,"artifacts/key"));
  final HttpArtifactCacheBinaryProtocol.StoreRequest storeRequest=new HttpArtifactCacheBinaryProtocol.StoreRequest(ruleKeys,metadata,hashFunction,new ByteSource(){
    @Override public InputStream openStream() throws IOException {
      return projectFilesystem.newFileInputStream(file);
    }
  }
);
  eventBuilder.setRequestSizeBytes(storeRequest.getContentLength());
  builder.put(new RequestBody(){
    @Override public MediaType contentType(){
      return OCTET_STREAM;
    }
    @Override public long contentLength() throws IOException {
      return storeRequest.getContentLength();
    }
    @Override public void writeTo(    BufferedSink bufferedSink) throws IOException {
      StoreWriteResult writeResult=storeRequest.write(bufferedSink.outputStream());
      eventBuilder.setArtifactSizeBytes(writeResult.getArtifactSizeBytes());
      eventBuilder.setArtifactContentHash(writeResult.getArtifactContentHashCode().toString());
    }
  }
);
  Request request=builder.build();
  Response response=storeCall(request);
  final boolean requestFailed=response.code() != HttpURLConnection.HTTP_ACCEPTED;
  if (requestFailed) {
    reportFailure("store(%s, %s): unexpected response: %d",url,ruleKeys,response.code());
  }
  eventBuilder.setWasUploadSuccessful(!requestFailed);
}
