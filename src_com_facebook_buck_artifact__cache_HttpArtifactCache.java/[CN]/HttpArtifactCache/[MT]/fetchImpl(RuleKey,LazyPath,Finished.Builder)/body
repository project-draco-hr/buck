{
  Request.Builder requestBuilder=new Request.Builder().get();
  try (HttpResponse response=fetchCall("/artifacts/key/" + ruleKey.toString(),requestBuilder)){
    eventBuilder.setResponseSizeBytes(response.contentLength());
    try (DataInputStream input=new DataInputStream(new FullyReadOnCloseInputStream(response.getBody()))){
      if (response.code() == HttpURLConnection.HTTP_NOT_FOUND) {
        LOGGER.info("fetch(%s, %s): cache miss",response.requestUrl(),ruleKey);
        return CacheResult.miss();
      }
      if (response.code() != HttpURLConnection.HTTP_OK) {
        String msg=String.format("unexpected response: %d",response.code());
        reportFailure("fetch(%s, %s): %s",response.requestUrl(),ruleKey,msg);
        eventBuilder.setErrorMessage(msg);
        return CacheResult.error(name,msg);
      }
      Path file=output.get();
      projectFilesystem.createParentDirs(file);
      Path temp=projectFilesystem.createTempFile(file.getParent(),file.getFileName().toString(),".tmp");
      FetchResponseReadResult fetchedData;
      try (OutputStream tempFileOutputStream=projectFilesystem.newFileOutputStream(temp)){
        fetchedData=HttpArtifactCacheBinaryProtocol.readFetchResponse(input,tempFileOutputStream);
      }
       eventBuilder.setResponseSizeBytes(fetchedData.getResponseSizeBytes());
      eventBuilder.setArtifactContentHash(fetchedData.getArtifactOnlyHashCode().toString());
      if (!fetchedData.getRuleKeys().contains(ruleKey)) {
        String msg="incorrect key name";
        reportFailure("fetch(%s, %s): %s",response.requestUrl(),ruleKey,msg);
        eventBuilder.setErrorMessage(msg);
        return CacheResult.error(name,msg);
      }
      if (!fetchedData.getExpectedHashCode().equals(fetchedData.getActualHashCode())) {
        String msg="artifact had invalid checksum";
        reportFailure("fetch(%s, %s): %s",response.requestUrl(),ruleKey,msg);
        projectFilesystem.deleteFileAtPath(temp);
        eventBuilder.setErrorMessage(msg);
        return CacheResult.error(name,msg);
      }
      projectFilesystem.move(temp,file,StandardCopyOption.REPLACE_EXISTING);
      LOGGER.info("fetch(%s, %s): cache hit",response.requestUrl(),ruleKey);
      return CacheResult.hit(name,fetchedData.getMetadata());
    }
   }
 }
