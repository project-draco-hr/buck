{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRule someRule=GenruleBuilder.newGenruleBuilder(BuildTargetFactory.newInstance("//:some_rule")).setOut("someRule").build(resolver);
  BuildRule gtest=GenruleBuilder.newGenruleBuilder(BuildTargetFactory.newInstance("//:gtest")).setOut("out").build(resolver);
  BuildRule gtestMain=GenruleBuilder.newGenruleBuilder(BuildTargetFactory.newInstance("//:gtestMain")).setOut("out").build(resolver);
  CxxTestBuilder builder=new CxxTestBuilder(BuildTargetFactory.newInstance("//:test"),new CxxBuckConfig(new FakeBuckConfig(ImmutableMap.of("cxx",ImmutableMap.of("gtest_dep",gtest.getBuildTarget().toString(),"gtest_default_test_main_dep",gtestMain.getBuildTarget().toString())))),CxxTestBuilder.createDefaultPlatform(),CxxTestBuilder.createDefaultPlatforms());
  CxxTest test=(CxxTest)builder.setEnv(ImmutableMap.of("TEST","value $(location //:some_rule)")).build(resolver);
  TestRunningOptions options=TestRunningOptions.builder().setDryRun(false).setTestSelectorList(TestSelectorList.empty()).build();
  ImmutableList<Step> steps=test.runTests(FakeBuildContext.NOOP_CONTEXT,TestExecutionContext.newInstance(),options,TestRule.NOOP_REPORTING_CALLBACK);
  CxxTestStep testStep=(CxxTestStep)Iterables.getLast(steps);
  assertThat(testStep.getEnv(),Matchers.equalTo(ImmutableMap.of("TEST","value " + Preconditions.checkNotNull(someRule.getPathToOutput()).toAbsolutePath())));
}
