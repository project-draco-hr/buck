{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"classpath_corruption_regression",tmp);
  workspace.setUp();
  ProjectFilesystem filesystem=new ProjectFilesystem(tmp.getRoot());
  BuildTarget target=BuildTargetFactory.newInstance("//:example");
  ProcessResult processResult1=workspace.runBuckCommand("build",target.getFullyQualifiedName());
  processResult1.assertSuccess();
  assertTrue("example.jar should be written. This should not be on the classpath on the next build.",Files.isRegularFile(workspace.getPath(BuildTargets.getGenPath(filesystem,target,"lib__%s__output/example.jar"))));
  Path buildFile=workspace.getPath("BUCK");
  String newBuildFileContents=Joiner.on('\n').join("java_library(","  name = 'example',","  srcs = [ 'Foo.java' ], ",")");
  Files.write(buildFile,newBuildFileContents.getBytes(StandardCharsets.UTF_8));
  ProcessResult processResult2=workspace.runBuckCommand("build",target.getFullyQualifiedName());
  processResult2.assertFailure("Build should fail because Foo.java depends on Bar.java.");
}
