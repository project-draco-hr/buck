{
  ImmutableMap<String,String> env=getEnv(context);
  ProcessExecutorParams.Builder processExecutorParamsBuilder=ProcessExecutorParams.builder().addAllCommand(command).setDirectory(filesystem.getRootPath().toAbsolutePath().toFile()).setRedirectOutput(ProcessBuilder.Redirect.PIPE).setEnvironment(env);
  if (!testSelectorList.isEmpty()) {
    try {
      List<String> xctoolFilterParams=listAndFilterTestsThenFormatXctoolParams(context.getProcessExecutor(),testSelectorList,ProcessExecutorParams.builder().from(processExecutorParamsBuilder.build()).addCommand("-listTestsOnly").build());
      if (xctoolFilterParams.isEmpty()) {
        context.getConsole().printBuildFailure(String.format("No tests found matching specified filter (%s)",testSelectorList.getExplanation()));
        return 1;
      }
      processExecutorParamsBuilder.addAllCommand(xctoolFilterParams);
    }
 catch (    IOException e) {
      context.getConsole().printErrorText("Failed to get list of tests from test bundle");
      context.getConsole().printBuildFailureWithStacktrace(e);
      return 1;
    }
  }
  ProcessExecutorParams processExecutorParams=processExecutorParamsBuilder.build();
  final AtomicBoolean stutterLockIsNotified=new AtomicBoolean(false);
  try {
    LOG.debug("Running command: %s",processExecutorParams);
    try {
      acquireStutterLock(stutterLockIsNotified);
      ProcessExecutor.LaunchedProcess launchedProcess=context.getProcessExecutor().launchProcess(processExecutorParams);
      int exitCode;
      try (OutputStream outputStream=filesystem.newFileOutputStream(outputPath);TeeInputStream stdoutWrapperStream=new TeeInputStream(launchedProcess.getInputStream(),outputStream)){
        if (stdoutReadingCallback.isPresent()) {
          stdoutReadingCallback.get().readStdout(stdoutWrapperStream);
        }
 else {
          stdoutWrapperStream.close();
          ByteStreams.copy(launchedProcess.getInputStream(),outputStream);
        }
        exitCode=waitForProcessAndGetExitCode(context.getProcessExecutor(),launchedProcess);
        LOG.debug("Finished running command, exit code %d",exitCode);
      }
  finally {
        context.getProcessExecutor().destroyLaunchedProcess(launchedProcess);
        context.getProcessExecutor().waitForLaunchedProcess(launchedProcess);
      }
      if (exitCode != 0) {
        LOG.warn("%s exited with error %d",command,exitCode);
      }
      return exitCode;
    }
 catch (    Exception e) {
      LOG.error(e,"Exception while running %s",processExecutorParams.getCommand());
      MoreThrowables.propagateIfInterrupt(e);
      context.getConsole().printBuildFailureWithStacktrace(e);
      return 1;
    }
  }
  finally {
    releaseStutterLock(stutterLockIsNotified);
  }
}
