{
  ImmutableMap<String,String> env=getEnv(context);
  ProcessExecutorParams.Builder processExecutorParamsBuilder=ProcessExecutorParams.builder().addAllCommand(command).setDirectory(filesystem.getRootPath().toAbsolutePath().toFile()).setRedirectOutput(ProcessBuilder.Redirect.PIPE).setEnvironment(env);
  if (!testSelectorList.isEmpty()) {
    try {
      ImmutableList.Builder<String> xctoolFilterParamsBuilder=ImmutableList.builder();
      int returnCode=listAndFilterTestsThenFormatXctoolParams(context.getProcessExecutor(),context.getConsole(),testSelectorList,ProcessExecutorParams.builder().from(processExecutorParamsBuilder.build()).addCommand("-listTestsOnly").build(),xctoolFilterParamsBuilder);
      if (returnCode != 0) {
        context.getConsole().printErrorText("Failed to query tests with xctool");
        return StepExecutionResult.of(returnCode);
      }
      ImmutableList<String> xctoolFilterParams=xctoolFilterParamsBuilder.build();
      if (xctoolFilterParams.isEmpty()) {
        context.getConsole().printBuildFailure(String.format(Locale.US,"No tests found matching specified filter (%s)",testSelectorList.getExplanation()));
        return StepExecutionResult.SUCCESS;
      }
      processExecutorParamsBuilder.addAllCommand(xctoolFilterParams);
    }
 catch (    IOException e) {
      context.getConsole().printErrorText("Failed to get list of tests from test bundle");
      context.getConsole().printBuildFailureWithStacktrace(e);
      return StepExecutionResult.ERROR;
    }
  }
  ProcessExecutorParams processExecutorParams=processExecutorParamsBuilder.build();
  final AtomicBoolean stutterLockIsNotified=new AtomicBoolean(false);
  try {
    LOG.debug("Running command: %s",processExecutorParams);
    try {
      acquireStutterLock(stutterLockIsNotified);
      ProcessExecutor.LaunchedProcess launchedProcess=context.getProcessExecutor().launchProcess(processExecutorParams);
      int exitCode=-1;
      String stderr="Unexpected termination";
      try {
        ProcessOutputReader outputReader=new ProcessOutputReader(launchedProcess);
        Thread readerThread=new Thread(outputReader);
        readerThread.start();
        exitCode=waitForProcessAndGetExitCode(context.getProcessExecutor(),launchedProcess,timeoutInMs);
        readerThread.join(timeoutInMs.or(1000L));
        stderr=outputReader.getStdErr();
        LOG.debug("Finished running command, exit code %d, stderr %s",exitCode,stderr);
      }
  finally {
        context.getProcessExecutor().destroyLaunchedProcess(launchedProcess);
        context.getProcessExecutor().waitForLaunchedProcess(launchedProcess);
      }
      if (exitCode != 0) {
        if (!stderr.isEmpty()) {
          context.getConsole().printErrorText(String.format(Locale.US,"xctool failed with exit code %d: %s",exitCode,stderr));
        }
 else {
          context.getConsole().printErrorText(String.format(Locale.US,"xctool failed with exit code %d",exitCode));
        }
      }
      return StepExecutionResult.of(exitCode);
    }
 catch (    Exception e) {
      LOG.error(e,"Exception while running %s",processExecutorParams.getCommand());
      MoreThrowables.propagateIfInterrupt(e);
      context.getConsole().printBuildFailureWithStacktrace(e);
      return StepExecutionResult.ERROR;
    }
  }
  finally {
    releaseStutterLock(stutterLockIsNotified);
  }
}
