def _get_parser(self, subparser_help=False, prefix_chars=None, aliases=False):
    if prefix_chars:
        parser = ErrorRaisingArgumentParser(prog='PROG', description='main description', prefix_chars=prefix_chars)
        parser.add_argument(((prefix_chars[0] * 2) + 'foo'), action='store_true', help='foo help')
    else:
        parser = ErrorRaisingArgumentParser(prog='PROG', description='main description')
        parser.add_argument('--foo', action='store_true', help='foo help')
    parser.add_argument('bar', type=float, help='bar help')
    subparsers_kwargs = {}
    if aliases:
        subparsers_kwargs['metavar'] = 'COMMAND'
        subparsers_kwargs['title'] = 'commands'
    else:
        subparsers_kwargs['help'] = 'command help'
    subparsers = parser.add_subparsers(**subparsers_kwargs)
    self.assertArgumentParserError(parser.add_subparsers)
    parser1_kwargs = dict(description='1 description')
    if subparser_help:
        parser1_kwargs['help'] = '1 help'
    if aliases:
        parser1_kwargs['aliases'] = ['1alias1', '1alias2']
    parser1 = subparsers.add_parser('1', **parser1_kwargs)
    parser1.add_argument('-w', type=int, help='w help')
    parser1.add_argument('x', choices='abc', help='x help')
    parser2_kwargs = dict(description='2 description')
    if subparser_help:
        parser2_kwargs['help'] = '2 help'
    parser2 = subparsers.add_parser('2', **parser2_kwargs)
    parser2.add_argument('-y', choices='123', help='y help')
    parser2.add_argument('z', type=complex, nargs='*', help='z help')
    return parser
