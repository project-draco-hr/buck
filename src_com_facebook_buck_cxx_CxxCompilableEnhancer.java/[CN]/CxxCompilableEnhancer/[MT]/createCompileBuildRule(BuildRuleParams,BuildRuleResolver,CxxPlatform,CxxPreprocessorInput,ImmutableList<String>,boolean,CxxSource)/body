{
  BuildTarget target=createCompileBuildTarget(params.getBuildTarget(),source.getName(),pic);
  boolean cxx=!Files.getFileExtension(source.getName()).equals("c");
  BuildRuleParams compileParams=params.copyWithChanges(COMPILE_TYPE,target,ImmutableSortedSet.<BuildRule>naturalOrder().addAll(SourcePaths.filterBuildRuleInputs(ImmutableList.<SourcePath>builder().add(source.getSource()).addAll(preprocessorInput.getIncludes().values()).build())).addAll(BuildRules.toBuildRulesFor(params.getBuildTarget(),resolver,preprocessorInput.getRules(),false)).build(),ImmutableSortedSet.<BuildRule>of());
  return new CxxCompile(compileParams,new SourcePathResolver(resolver),cxx ? platform.getCxx() : platform.getCc(),ImmutableList.<String>builder().add("-x",cxx ? "c++" : "c").addAll((pic ? Optional.of("-fPIC") : Optional.<String>absent()).asSet()).addAll(cxx ? preprocessorInput.getCxxppflags() : preprocessorInput.getCppflags()).addAll(cxx ? platform.getCxxflags() : platform.getCflags()).addAll(compilerFlags).build(),getCompileOutputPath(target,source.getName()),source.getSource(),preprocessorInput.getIncludeRoots(),preprocessorInput.getSystemIncludeRoots(),preprocessorInput.getIncludes());
}
