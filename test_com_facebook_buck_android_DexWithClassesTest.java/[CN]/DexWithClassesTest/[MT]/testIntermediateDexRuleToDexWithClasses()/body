{
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer()));
  BuildTarget javaLibraryTarget=BuildTargetFactory.newInstance("//java/com/example:lib");
  JavaLibrary javaLibrary=new FakeJavaLibrary(javaLibraryTarget,resolver);
  BuildTarget buildTarget=BuildTargetFactory.newInstance("//java/com/example:lib#dex");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(buildTarget).build();
  DexProducedFromJavaLibrary dexFromJavaLibrary=new DexProducedFromJavaLibrary(params,resolver,javaLibrary);
  dexFromJavaLibrary.getBuildOutputInitializer().setBuildOutput(new DexProducedFromJavaLibrary.BuildOutput(1600,ImmutableSortedMap.of("com/example/Main",HashCode.fromString(Strings.repeat("cafebabe",5))),Optional.<ImmutableList<String>>absent()));
  DexWithClasses dexWithClasses=DexWithClasses.TO_DEX_WITH_CLASSES.apply(dexFromJavaLibrary);
  assertEquals(BuildTargets.getGenPath(javaLibrary.getProjectFilesystem(),buildTarget,"%s.dex.jar"),dexWithClasses.getPathToDexFile());
  assertEquals(ImmutableSet.of("com/example/Main"),dexWithClasses.getClassNames());
  assertEquals(1600,dexWithClasses.getSizeEstimate());
}
