{
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget javaLibraryTarget=BuildTarget.builder("//java/com/example","lib").build();
  JavaLibrary javaLibrary=new FakeJavaLibrary(javaLibraryTarget,resolver);
  BuildTarget buildTarget=BuildTarget.builder("//java/com/example","lib").addFlavors(ImmutableFlavor.of("dex")).build();
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(buildTarget).build();
  DexProducedFromJavaLibrary dexFromJavaLibrary=new DexProducedFromJavaLibrary(params,resolver,javaLibrary);
  dexFromJavaLibrary.getBuildOutputInitializer().setBuildOutput(new DexProducedFromJavaLibrary.BuildOutput(1600,ImmutableSortedMap.of("com/example/Main",HashCode.fromString("cafebabe"))));
  DexWithClasses dexWithClasses=DexWithClasses.TO_DEX_WITH_CLASSES.apply(dexFromJavaLibrary);
  assertEquals(Paths.get("buck-out/gen/java/com/example/lib#dex.dex.jar"),dexWithClasses.getPathToDexFile());
  assertEquals(ImmutableSet.of("com/example/Main"),dexWithClasses.getClassNames());
  assertEquals(1600,dexWithClasses.getSizeEstimate());
}
