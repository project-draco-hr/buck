{
  BuildTarget javaLibraryTarget=new BuildTarget("//java/com/example","lib");
  JavaLibrary javaLibrary=new FakeJavaLibraryRule(javaLibraryTarget){
    @Override public ImmutableSortedMap<String,HashCode> getClassNamesToHashes(){
      return ImmutableSortedMap.of("com/example/Main",HashCode.fromString("cafebabe"));
    }
  }
;
  BuildTarget buildTarget=new BuildTarget("//java/com/example","lib","dex");
  DexProducedFromJavaLibraryThatContainsClassFiles dexFromJavaLibrary=new DexProducedFromJavaLibraryThatContainsClassFiles(buildTarget,javaLibrary){
    @Override public int getLinearAllocEstimate(){
      return 1600;
    }
  }
;
  IntermediateDexRule intermediateDexRule=new IntermediateDexRule(dexFromJavaLibrary,new FakeBuildRuleParams(buildTarget));
  DexWithClasses dexWithClasses=DexWithClasses.TO_DEX_WITH_CLASSES.apply(intermediateDexRule);
  assertEquals(Paths.get("buck-out/gen/java/com/example/lib#dex.dex.jar"),dexWithClasses.getPathToDexFile());
  assertEquals(ImmutableSet.of("com/example/Main"),dexWithClasses.getClassNames());
  assertEquals(1600,dexWithClasses.getSizeEstimate());
}
