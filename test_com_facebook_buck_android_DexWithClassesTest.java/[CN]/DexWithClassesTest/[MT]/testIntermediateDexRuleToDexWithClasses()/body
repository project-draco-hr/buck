{
  BuildTarget javaLibraryTarget=BuildTarget.builder("//java/com/example","lib").build();
  JavaLibrary javaLibrary=new FakeJavaLibrary(javaLibraryTarget){
    @Override public ImmutableSortedMap<String,HashCode> getClassNamesToHashes(){
      return ImmutableSortedMap.of("com/example/Main",HashCode.fromString("cafebabe"));
    }
  }
;
  BuildTarget buildTarget=BuildTarget.builder("//java/com/example","lib").setFlavor("dex").build();
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(buildTarget).build();
  DexProducedFromJavaLibrary dexFromJavaLibrary=new DexProducedFromJavaLibrary(params,javaLibrary){
    @Override public int getLinearAllocEstimate(){
      return 1600;
    }
  }
;
  DexWithClasses dexWithClasses=DexWithClasses.TO_DEX_WITH_CLASSES.apply(dexFromJavaLibrary);
  assertEquals(Paths.get("buck-out/gen/java/com/example/lib#dex.dex.jar"),dexWithClasses.getPathToDexFile());
  assertEquals(ImmutableSet.of("com/example/Main"),dexWithClasses.getClassNames());
  assertEquals(1600,dexWithClasses.getSizeEstimate());
}
