{
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  BuildTarget javaLibraryTarget=BuildTargetFactory.newInstance("//java/com/example:lib");
  JavaLibrary javaLibrary=new FakeJavaLibrary(javaLibraryTarget,resolver);
  BuildTarget buildTarget=BuildTargetFactory.newInstance("//java/com/example:lib#dex");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(buildTarget).build();
  DexProducedFromJavaLibrary dexFromJavaLibrary=new DexProducedFromJavaLibrary(params,resolver,javaLibrary);
  dexFromJavaLibrary.getBuildOutputInitializer().setBuildOutput(new DexProducedFromJavaLibrary.BuildOutput(1600,ImmutableSortedMap.<String,HashCode>of()));
  DexWithClasses dexWithClasses=DexWithClasses.TO_DEX_WITH_CLASSES.apply(dexFromJavaLibrary);
  assertNull("If the JavaLibraryRule does not produce any .class files, " + "then DexWithClasses.TO_DEX_WITH_CLASSES should return null.",dexWithClasses);
}
