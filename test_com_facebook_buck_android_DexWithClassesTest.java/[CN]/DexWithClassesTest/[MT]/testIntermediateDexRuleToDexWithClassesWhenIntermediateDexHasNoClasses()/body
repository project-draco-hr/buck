{
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget javaLibraryTarget=BuildTarget.builder("//java/com/example","lib").build();
  JavaLibrary javaLibrary=new FakeJavaLibrary(javaLibraryTarget,resolver){
    @Override public ImmutableSortedMap<String,HashCode> getClassNamesToHashes(){
      return ImmutableSortedMap.of();
    }
  }
;
  BuildTarget buildTarget=BuildTarget.builder("//java/com/example","lib").setFlavor("dex").build();
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(buildTarget).build();
  DexProducedFromJavaLibrary dexFromJavaLibrary=new DexProducedFromJavaLibrary(params,resolver,javaLibrary){
    @Override public int getLinearAllocEstimate(){
      return 1600;
    }
  }
;
  DexWithClasses dexWithClasses=DexWithClasses.TO_DEX_WITH_CLASSES.apply(dexFromJavaLibrary);
  assertNull("If the JavaLibraryRule does not produce any .class files, " + "then DexWithClasses.TO_DEX_WITH_CLASSES should return null.",dexWithClasses);
}
