{
  RegisterSpecList sources=getSources();
  int szSources=sources.size();
  if (szSources == 0) {
    return this;
  }
  TypeBearer lastType=sources.get(szSources - 1).getTypeBearer();
  if (!lastType.isConstant()) {
    TypeBearer firstType=sources.get(0).getTypeBearer();
    if (szSources == 2 && firstType.isConstant()) {
      Constant cst=(Constant)firstType;
      RegisterSpecList newSources=sources.withoutFirst();
      Rop newRop=Rops.ropFor(getOpcode().getOpcode(),getResult(),newSources,cst);
      return new PlainCstInsn(newRop,getPosition(),getResult(),newSources,cst);
    }
    return this;
  }
 else {
    Constant cst=(Constant)lastType;
    RegisterSpecList newSources=sources.withoutLast();
    Rop newRop;
    try {
      int opcode=getOpcode().getOpcode();
      if (opcode == RegOps.SUB && cst instanceof CstInteger) {
        opcode=RegOps.ADD;
        cst=CstInteger.make(-((CstInteger)cst).getValue());
      }
      newRop=Rops.ropFor(opcode,getResult(),newSources,cst);
    }
 catch (    IllegalArgumentException ex) {
      return this;
    }
    return new PlainCstInsn(newRop,getPosition(),getResult(),newSources,cst);
  }
}
