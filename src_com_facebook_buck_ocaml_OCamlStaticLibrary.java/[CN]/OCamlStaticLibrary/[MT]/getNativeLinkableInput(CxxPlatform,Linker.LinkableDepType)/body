{
  Preconditions.checkArgument(type == Linker.LinkableDepType.STATIC,"Only supporting static linking in OCaml");
  final Path staticLibraryPath=OCamlBuildContext.getOutputPath(staticLibraryTarget,true);
  ImmutableList.Builder<String> linkerArgsBuilder=ImmutableList.builder();
  linkerArgsBuilder.addAll(linkerFlags);
  FluentIterable<String> cObjs=srcPaths.filter(OCamlUtil.ext(OCamlCompilables.OCAML_C)).transform(ocamlContext.toCOutput()).transform(Functions.toStringFunction());
  linkerArgsBuilder.add(staticLibraryPath.toString());
  linkerArgsBuilder.addAll(cObjs);
  final ImmutableList<String> linkerArgs=linkerArgsBuilder.build();
  return ImmutableNativeLinkableInput.of(ImmutableList.<SourcePath>of(new BuildTargetSourcePath(ocamlLibraryBuild.getProjectFilesystem(),ocamlLibraryBuild.getBuildTarget())),linkerArgs);
}
