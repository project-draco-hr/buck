{
  final Supplier<ImmutableMap<String,ImmutableSet<Path>>> buckets=new Supplier<ImmutableMap<String,ImmutableSet<Path>>>(){
    @Override public ImmutableMap<String,ImmutableSet<Path>> get(){
      return filterFoldersIntoResourceTypes(resourceFolders);
    }
  }
;
  return new Predicate<Path>(){
    @Override public boolean apply(    Path resourceFile){
      Path resourceFolder=getResourceFolder(resourceFolders,resourceFile);
      String resourceType=getResourceType(resourceFolder);
      if (resourceType.equals("drawable")) {
        return true;
      }
      Density density=Qualifiers.from(resourceFolder).density;
      if (targetDensities.contains(density)) {
        return true;
      }
      return density.equals(Density.NO_QUALIFIER) && FluentIterable.from(buckets.get().get(resourceType)).filter(new Predicate<Path>(){
        @Override public boolean apply(        Path availableResourceFolder){
          return targetDensities.contains(Qualifiers.from(availableResourceFolder).density);
        }
      }
).size() < targetDensities.size();
    }
  }
;
}
