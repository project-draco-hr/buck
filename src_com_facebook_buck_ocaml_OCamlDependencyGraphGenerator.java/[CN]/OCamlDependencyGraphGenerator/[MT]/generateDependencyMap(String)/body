{
  ImmutableMap.Builder<Path,ImmutableList<Path>> mapBuilder=ImmutableMap.builder();
  Iterable<String> lines=Splitter.on(LINE_SEPARATOR).split(depString);
  for (  String line : lines) {
    List<String> sourceAndDeps=Splitter.on(OCAML_SOURCE_AND_DEPS_SEPARATOR).trimResults().splitToList(line);
    if (sourceAndDeps.size() >= 1) {
      String sourceML=replaceObjExtWithSourceExt(sourceAndDeps.get(0),false);
      String sourceRE=replaceObjExtWithSourceExt(sourceAndDeps.get(0),true);
      if (sourceML.endsWith(OCamlCompilables.OCAML_ML) || sourceML.endsWith(OCamlCompilables.OCAML_MLI)) {
        FluentIterable<Path> dependenciesML=FluentIterable.from(Splitter.on(OCAML_DEPS_SEPARATOR).trimResults().splitToList(sourceAndDeps.get(1))).filter(new Predicate<String>(){
          @Override public boolean apply(          String input){
            return !input.isEmpty();
          }
        }
).transform(new Function<String,Path>(){
          @Override public Path apply(          String input){
            return Paths.get(replaceObjExtWithSourceExt(input,false));
          }
        }
);
        FluentIterable<Path> dependenciesRE=FluentIterable.from(Splitter.on(OCAML_DEPS_SEPARATOR).trimResults().splitToList(sourceAndDeps.get(1))).filter(new Predicate<String>(){
          @Override public boolean apply(          String input){
            return !input.isEmpty();
          }
        }
).transform(new Function<String,Path>(){
          @Override public Path apply(          String input){
            return Paths.get(replaceObjExtWithSourceExt(input,true));
          }
        }
);
        ImmutableList<Path> dependencies=new ImmutableList.Builder<Path>().addAll(dependenciesML).addAll(dependenciesRE).build();
        mapBuilder.put(Paths.get(sourceML),dependencies).put(Paths.get(sourceRE),dependencies);
      }
    }
  }
  return mapBuilder.build();
}
