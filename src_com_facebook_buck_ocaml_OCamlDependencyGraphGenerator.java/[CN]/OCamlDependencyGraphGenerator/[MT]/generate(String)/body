{
  parseDependencies(depToolOutput);
  Preconditions.checkNotNull(graph);
  final ImmutableList<String> sortedDeps=TopologicalSort.sort(graph,Predicates.<String>alwaysTrue());
  FluentIterable<String> dependenciesML=FluentIterable.from(sortedDeps).transform(new Function<String,String>(){
    @Override public String apply(    String input){
      return replaceObjExtWithSourceExt(input,false);
    }
  }
);
  FluentIterable<String> dependenciesRE=FluentIterable.from(sortedDeps).transform(new Function<String,String>(){
    @Override public String apply(    String input){
      return replaceObjExtWithSourceExt(input,true);
    }
  }
);
  return new ImmutableList.Builder<String>().addAll(dependenciesML).addAll(dependenciesRE).build();
}
