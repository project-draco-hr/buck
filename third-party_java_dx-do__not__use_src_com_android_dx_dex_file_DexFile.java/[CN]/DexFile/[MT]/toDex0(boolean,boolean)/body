{
  classDefs.prepare();
  classData.prepare();
  wordData.prepare();
  byteData.prepare();
  methodIds.prepare();
  fieldIds.prepare();
  protoIds.prepare();
  typeLists.prepare();
  typeIds.prepare();
  stringIds.prepare();
  stringData.prepare();
  header.prepare();
  int count=sections.length;
  int offset=0;
  for (int i=0; i < count; i++) {
    Section one=sections[i];
    int placedAt=one.setFileOffset(offset);
    if (placedAt < offset) {
      throw new RuntimeException("bogus placement for section " + i);
    }
    try {
      if (one == map) {
        MapItem.addMap(sections,map);
        map.prepare();
      }
      if (one instanceof MixedItemSection) {
        ((MixedItemSection)one).placeItems();
      }
      offset=placedAt + one.writeSize();
    }
 catch (    RuntimeException ex) {
      throw ExceptionWithContext.withContext(ex,"...while writing section " + i);
    }
  }
  fileSize=offset;
  byte[] barr=new byte[fileSize];
  ByteArrayAnnotatedOutput out=new ByteArrayAnnotatedOutput(barr);
  if (annotate) {
    out.enableAnnotations(dumpWidth,verbose);
  }
  for (int i=0; i < count; i++) {
    try {
      Section one=sections[i];
      int zeroCount=one.getFileOffset() - out.getCursor();
      if (zeroCount < 0) {
        throw new ExceptionWithContext("excess write of " + (-zeroCount));
      }
      out.writeZeroes(one.getFileOffset() - out.getCursor());
      one.writeTo(out);
    }
 catch (    RuntimeException ex) {
      ExceptionWithContext ec;
      if (ex instanceof ExceptionWithContext) {
        ec=(ExceptionWithContext)ex;
      }
 else {
        ec=new ExceptionWithContext(ex);
      }
      ec.addContext("...while writing section " + i);
      throw ec;
    }
  }
  if (out.getCursor() != fileSize) {
    throw new RuntimeException("foreshortened write");
  }
  calcSignature(barr);
  calcChecksum(barr);
  if (annotate) {
    wordData.writeIndexAnnotation(out,ItemType.TYPE_CODE_ITEM,"\nmethod code index:\n\n");
    getStatistics().writeAnnotation(out);
    out.finishAnnotating();
  }
  return out;
}
