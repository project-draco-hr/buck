{
  ImmutableList.Builder<Path> toolSearchPathsBuilder=ImmutableList.builder();
  toolSearchPathsBuilder.add(sdkPaths.getSdkPath().resolve(USR_BIN)).add(sdkPaths.getPlatformPath().resolve("Developer").resolve(USR_BIN));
  for (  Path toolchainPath : sdkPaths.getToolchainPaths()) {
    toolSearchPathsBuilder.add(toolchainPath.resolve(USR_BIN));
  }
  ImmutableList<Path> toolSearchPaths=toolSearchPathsBuilder.build();
  ImmutableList.Builder<String> cflagsBuilder=ImmutableList.builder();
  cflagsBuilder.add("-isysroot",sdkPaths.getSdkPath().toString());
  cflagsBuilder.add("-arch",targetArchitecture);
switch (targetPlatform) {
case MACOSX:
    cflagsBuilder.add("-mmacosx-version-min=" + targetVersion);
  break;
case IPHONESIMULATOR:
cflagsBuilder.add("-mios-simulator-version-min=" + targetVersion);
break;
case IPHONEOS:
cflagsBuilder.add("-mios-version-min=" + targetVersion);
break;
}
ImmutableList<String> cflags=cflagsBuilder.build();
String xcodeAndSdkVersion=Joiner.on(':').join(xcodeVersion,targetSdkName);
Tool clangPath=new VersionedTool(getToolPath("clang",toolSearchPaths,pathIsExecutableChecker),cflags,"apple-clang",xcodeAndSdkVersion);
Tool clangXxPath=new VersionedTool(getToolPath("clang++",toolSearchPaths,pathIsExecutableChecker),cflags,"apple-clang++",xcodeAndSdkVersion);
Tool libtool=new VersionedTool(getToolPath("libtool",toolSearchPaths,pathIsExecutableChecker),ImmutableList.<String>of(),"apple-libtool",xcodeAndSdkVersion);
Tool ar=new VersionedTool(getToolPath("ar",toolSearchPaths,pathIsExecutableChecker),ImmutableList.<String>of(),"apple-ar",xcodeAndSdkVersion);
ImmutableCxxPlatform.Builder platformBuilder=ImmutableCxxPlatform.builder().setFlavor(ImmutableFlavor.of(targetSdkName + "-" + targetArchitecture)).setAs(clangPath).setAspp(clangPath).setCc(clangPath).setCpp(clangPath).setCxx(clangXxPath).setCxxpp(clangXxPath).setCxxld(clangXxPath).setLex(getOptionalTool("lex",toolSearchPaths,pathIsExecutableChecker)).setYacc(getOptionalTool("yacc",toolSearchPaths,pathIsExecutableChecker)).setLd(new DarwinLinker(libtool)).setAr(ar).setDebugPathSanitizer(Optional.of(new DebugPathSanitizer(250,File.separatorChar,Paths.get("."),ImmutableBiMap.<Path,Path>of()))).setSharedLibraryExtension("dylib");
DefaultCxxPlatforms.addToolFlagsFromConfig(buckConfig,platformBuilder);
return platformBuilder.build();
}
