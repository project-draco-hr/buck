{
  Preconditions.checkArgument(hostPlatform.equals(Platform.MACOS),String.format("%s can only currently run on Mac OS X.",AppleCxxPlatforms.class));
  ImmutableList.Builder<Path> toolSearchPathsBuilder=ImmutableList.<Path>builder().add(sdkPaths.getSdkPath().resolve(USR_BIN)).add(sdkPaths.getPlatformDeveloperPath().resolve(USR_BIN));
  for (  Path toolchainPath : sdkPaths.getToolchainPaths()) {
    toolSearchPathsBuilder.add(toolchainPath.resolve(USR_BIN));
  }
  ImmutableList<Path> toolSearchPaths=toolSearchPathsBuilder.build();
  Tool clangPath=new SourcePathTool(getTool("clang",toolSearchPaths));
  Tool clangXxPath=new SourcePathTool(getTool("clang++",toolSearchPaths));
  ImmutableList.Builder<String> cflagsBuilder=ImmutableList.builder();
  cflagsBuilder.add("-isysroot",sdkPaths.getSdkPath().toString());
  cflagsBuilder.add("-arch",targetArchitecture);
switch (targetPlatform) {
case MACOSX:
    cflagsBuilder.add("-mmacosx-version-min=" + targetVersion);
  break;
case IPHONESIMULATOR:
case IPHONEOS:
cflagsBuilder.add("-mios-version-min=" + targetVersion);
break;
}
ImmutableList<String> cflags=cflagsBuilder.build();
return ImmutableCxxPlatform.builder().setFlavor(ImmutableFlavor.of(targetSdkName + "-" + targetArchitecture)).setAs(clangPath).setAspp(clangPath).setCc(clangPath).addAllCflags(cflags).setCpp(clangPath).addAllCppflags(cflags).setCxx(clangXxPath).addAllCxxflags(cflags).setCxxpp(clangXxPath).addAllCxxppflags(cflags).setCxxld(clangXxPath).addAllCxxldflags(cflags).setLex(getOptionalTool("lex",toolSearchPaths)).setYacc(getOptionalTool("yacc",toolSearchPaths)).setLd(new DarwinLinker(new SourcePathTool(getTool("libtool",toolSearchPaths)))).setAr(new SourcePathTool(getTool("ar",toolSearchPaths))).setDebugPathSanitizer(Optional.of(new DebugPathSanitizer(250,File.separatorChar,Paths.get("."),ImmutableBiMap.<Path,Path>of()))).setSharedLibraryExtension("dylib").build();
}
