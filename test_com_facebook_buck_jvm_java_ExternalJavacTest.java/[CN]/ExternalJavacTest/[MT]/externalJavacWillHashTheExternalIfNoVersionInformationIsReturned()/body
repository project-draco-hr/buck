{
  Path javac=Files.createTempFile("fake","javac");
  javac.toFile().deleteOnExit();
  Map<Path,HashCode> hashCodes=ImmutableMap.of(javac,Hashing.sha1().hashInt(42));
  FakeFileHashCache fileHashCache=new FakeFileHashCache(hashCodes);
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer()));
  BuildRuleParams params=new FakeBuildRuleParamsBuilder("//example:target").build();
  BuildRule buildRule=new NoopBuildRule(params,pathResolver);
  DefaultRuleKeyBuilderFactory fakeRuleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(0,fileHashCache,pathResolver);
  RuleKey javacKey=new UncachedRuleKeyBuilder(pathResolver,fileHashCache,fakeRuleKeyBuilderFactory).setReflectively("javac",javac.toString()).build();
  RuleKeyBuilder<RuleKey> builder=fakeRuleKeyBuilderFactory.newInstance(buildRule);
  builder.setReflectively("key.appendableSubKey",javacKey);
  RuleKey expected=builder.build();
  ProcessExecutorParams javacExe=ProcessExecutorParams.builder().addCommand(javac.toAbsolutePath().toString(),"-version").build();
  FakeProcess javacProc=new FakeProcess(0,"","");
  final FakeProcessExecutor executor=new FakeProcessExecutor(ImmutableMap.of(javacExe,javacProc));
  builder=fakeRuleKeyBuilderFactory.newInstance(buildRule);
  ExternalJavac compiler=new ExternalJavac(javac){
    @Override ProcessExecutor createProcessExecutor(){
      return executor;
    }
  }
;
  builder.setReflectively("key",compiler);
  RuleKey seen=builder.build();
  assertEquals(expected,seen);
}
