{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildRule resourceRule1=ruleResolver.addToIndex(AndroidResourceRuleBuilder.newBuilder().setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res1")).setRDotJavaPackage("com.facebook").setRes(Paths.get("android_res/com/example/res1")).build());
  setAndroidResourceBuildOutput(resourceRule1,"a");
  BuildRule resourceRule2=ruleResolver.addToIndex(AndroidResourceRuleBuilder.newBuilder().setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res2")).setRDotJavaPackage("com.facebook").build());
  setAndroidResourceBuildOutput(resourceRule2,"b");
  BuildTarget target=BuildTargetFactory.newInstance("//android_res/com/example:res3");
  ImmutableSortedSet<BuildRule> deps=ImmutableSortedSet.of(resourceRule1,resourceRule2);
  BuildRule resourceRule3=ruleResolver.addToIndex(AndroidResourceRuleBuilder.newBuilder().setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res3")).setDeps(deps).setBuildRuleParams(new FakeBuildRuleParamsBuilder(target).setDeps(deps).build()).build());
  FakeBuildableContext buildableContext=new FakeBuildableContext();
  assertTrue(resourceRule3.getBuildSteps(EasyMock.createMock(BuildContext.class),buildableContext).isEmpty());
  Sha1HashCode expectedSha1=HasAndroidResourceDeps.ABI_HASHER.apply(ImmutableList.of((HasAndroidResourceDeps)resourceRule1));
  buildableContext.assertContainsMetadataMapping(AndroidResource.METADATA_KEY_FOR_ABI,expectedSha1.getHash());
}
