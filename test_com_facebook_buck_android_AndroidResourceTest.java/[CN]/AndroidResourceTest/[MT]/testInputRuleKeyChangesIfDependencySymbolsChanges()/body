{
  BuildRuleResolver resolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  DefaultFileHashCache fileHashCache=new DefaultFileHashCache(filesystem);
  InputBasedRuleKeyBuilderFactory factory=new InputBasedRuleKeyBuilderFactory(fileHashCache,pathResolver);
  AndroidResource dep=(AndroidResource)AndroidResourceBuilder.createBuilder(BuildTargetFactory.newInstance("//:dep")).setManifest(new TestSourcePath("manifest")).setRes(Paths.get("res")).build(resolver,filesystem);
  AndroidResource resource=(AndroidResource)AndroidResourceBuilder.createBuilder(BuildTargetFactory.newInstance("//:rule")).setDeps(ImmutableSortedSet.of(dep.getBuildTarget())).build(resolver,filesystem);
  filesystem.writeContentsToPath("something",pathResolver.getRelativePath(dep.getPathToTextSymbolsFile()));
  RuleKey original=factory.build(resource);
  fileHashCache.invalidateAll();
  filesystem.writeContentsToPath("something else",pathResolver.getRelativePath(dep.getPathToTextSymbolsFile()));
  RuleKey changed=factory.build(resource);
  assertThat(original,Matchers.not(Matchers.equalTo(changed)));
}
