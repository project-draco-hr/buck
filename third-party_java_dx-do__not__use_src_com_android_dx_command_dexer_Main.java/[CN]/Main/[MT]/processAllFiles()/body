{
  createDexFile();
  if (args.jarOutput) {
    outputResources=new TreeMap<String,byte[]>();
  }
  anyFilesProcessed=false;
  String[] fileNames=args.fileNames;
  if (args.numThreads > 1) {
    threadPool=Executors.newFixedThreadPool(args.numThreads);
    parallelProcessorFutures=new ArrayList<Future<Void>>();
  }
  try {
    if (args.mainDexListFile != null) {
      FileNameFilter mainPassFilter=args.strictNameCheck ? new MainDexListFilter() : new BestEffortMainDexListFilter();
      for (int i=0; i < fileNames.length; i++) {
        processOne(fileNames[i],mainPassFilter);
      }
      if (dexOutputArrays.size() > 0) {
        throw new DexException("Too many classes in " + Arguments.MAIN_DEX_LIST_OPTION + ", main dex capacity exceeded");
      }
      if (args.minimalMainDex) {
        createDexFile();
      }
      for (int i=0; i < fileNames.length; i++) {
        processOne(fileNames[i],new NotFilter(mainPassFilter));
      }
    }
 else {
      for (int i=0; i < fileNames.length; i++) {
        processOne(fileNames[i],ClassPathOpener.acceptAll);
      }
    }
  }
 catch (  StopProcessing ex) {
  }
  if (args.numThreads > 1) {
    try {
      threadPool.shutdown();
      if (!threadPool.awaitTermination(600L,TimeUnit.SECONDS)) {
        throw new RuntimeException("Timed out waiting for threads.");
      }
    }
 catch (    InterruptedException ex) {
      threadPool.shutdownNow();
      throw new RuntimeException("A thread has been interrupted.");
    }
    try {
      for (      Future<?> future : parallelProcessorFutures) {
        future.get();
      }
    }
 catch (    ExecutionException e) {
      Throwable cause=e.getCause();
      if (cause instanceof Error) {
        throw (Error)e.getCause();
      }
 else {
        throw new AssertionError(e.getCause());
      }
    }
catch (    InterruptedException e) {
      throw new AssertionError(e);
    }
  }
  int errorNum=errors.get();
  if (errorNum != 0) {
    dxConsole.err.println(errorNum + " error" + ((errorNum == 1) ? "" : "s")+ "; aborting");
    return false;
  }
  if (args.incremental && !anyFilesProcessed) {
    return true;
  }
  if (!(anyFilesProcessed || args.emptyOk)) {
    dxConsole.err.println("no classfiles specified");
    return false;
  }
  if (args.optimize && args.statistics) {
    CodeStatistics.dumpStatistics(dxConsole.out);
  }
  return true;
}
