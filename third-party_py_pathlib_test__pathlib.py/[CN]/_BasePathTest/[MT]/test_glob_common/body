def test_glob_common(self):

    def _check(glob, expected):
        self.assertEqual(set(glob), set((P(BASE, q) for q in expected)))
    P = self.cls
    p = P(BASE)
    it = p.glob('fileA')
    self.assertIsInstance(it, collections.Iterator)
    _check(it, ['fileA'])
    _check(p.glob('fileB'), [])
    _check(p.glob('dir*/file*'), ['dirB/fileB', 'dirC/fileC'])
    if symlink_skip_reason:
        _check(p.glob('*A'), ['dirA', 'fileA'])
    else:
        _check(p.glob('*A'), ['dirA', 'fileA', 'linkA'])
    if symlink_skip_reason:
        _check(p.glob('*B/*'), ['dirB/fileB'])
    else:
        _check(p.glob('*B/*'), ['dirB/fileB', 'dirB/linkD', 'linkB/fileB', 'linkB/linkD'])
    if symlink_skip_reason:
        _check(p.glob('*/fileB'), ['dirB/fileB'])
    else:
        _check(p.glob('*/fileB'), ['dirB/fileB', 'linkB/fileB'])
    _check(p.glob('dirC/**'), ['dirC/fileC', 'dirC/dirD', 'dirC/dirD/fileD'])
