def test_with_suffix(self):
    P = self.cls
    self.assertEqual(P('c:a/b').with_suffix('.gz'), P('c:a/b.gz'))
    self.assertEqual(P('c:/a/b').with_suffix('.gz'), P('c:/a/b.gz'))
    self.assertEqual(P('c:a/b.py').with_suffix('.gz'), P('c:a/b.gz'))
    self.assertEqual(P('c:/a/b.py').with_suffix('.gz'), P('c:/a/b.gz'))
    self.assertRaises(ValueError, P('').with_suffix, '.gz')
    self.assertRaises(ValueError, P('.').with_suffix, '.gz')
    self.assertRaises(ValueError, P('/').with_suffix, '.gz')
    self.assertRaises(ValueError, P('//My/Share').with_suffix, '.gz')
    self.assertRaises(ValueError, P('c:a/b').with_suffix, 'gz')
    self.assertRaises(ValueError, P('c:a/b').with_suffix, '/')
    self.assertRaises(ValueError, P('c:a/b').with_suffix, '\\')
    self.assertRaises(ValueError, P('c:a/b').with_suffix, 'c:')
    self.assertRaises(ValueError, P('c:a/b').with_suffix, '/.gz')
    self.assertRaises(ValueError, P('c:a/b').with_suffix, '\\.gz')
    self.assertRaises(ValueError, P('c:a/b').with_suffix, 'c:.gz')
    self.assertRaises(ValueError, P('c:a/b').with_suffix, 'c/d')
    self.assertRaises(ValueError, P('c:a/b').with_suffix, 'c\\d')
    self.assertRaises(ValueError, P('c:a/b').with_suffix, '.c/d')
    self.assertRaises(ValueError, P('c:a/b').with_suffix, '.c\\d')
