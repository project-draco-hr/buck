{
  ProjectFilesystem projectFilesystem=createMock(ProjectFilesystem.class);
  Properties properties=new Properties();
  properties.put("key.alias","androiddebugkey");
  properties.put("key.store.password","android");
  properties.put("key.alias.password","diordna");
  expect(projectFilesystem.readPropertiesFile("src/com/facebook/orca/debug.keystore.properties")).andReturn(properties);
  ExecutionContext context=createMock(ExecutionContext.class);
  expect(context.getProjectFilesystem()).andReturn(projectFilesystem);
  replay(projectFilesystem,context);
  String outputPath=BIN_DIR + "/src/com/facebook/orca/orca_signed.apk";
  String unsignedApkPath=BIN_DIR + "/src/com/facebook/orca/orca_unsigned.apk";
  SignApkStep signApkCommand=new SignApkStep("src/com/facebook/orca/debug.keystore","src/com/facebook/orca/debug.keystore.properties",unsignedApkPath,outputPath);
  assertEquals("jarsigner",signApkCommand.getShortName(context));
  assertEquals(ImmutableList.of("jarsigner","-sigalg","MD5withRSA","-digestalg","SHA1","-keystore","src/com/facebook/orca/debug.keystore","-storepass","android","-keypass","diordna","-signedjar",outputPath,unsignedApkPath,"androiddebugkey"),signApkCommand.getShellCommand(context));
  verify(projectFilesystem,context);
}
