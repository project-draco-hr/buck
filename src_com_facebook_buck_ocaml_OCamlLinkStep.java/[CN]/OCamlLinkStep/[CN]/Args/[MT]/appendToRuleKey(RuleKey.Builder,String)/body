{
  return builder.setReflectively(key + ".cxxCompiler",cxxCompiler.toString()).setReflectively(key + ".ocamlCompiler",ocamlCompiler.toString()).setReflectively(key + ".output",output.toString()).setReflectively(key + ".depInput",depInput).setReflectively(key + ".input",FluentIterable.from(input).transform(TO_PATH).toSortedSet(Ordering.natural())).setReflectively(key + ".flags",flags).setReflectively(key + ".isLibrary",isLibrary).setReflectively(key + ".isBytecode",isBytecode);
}
