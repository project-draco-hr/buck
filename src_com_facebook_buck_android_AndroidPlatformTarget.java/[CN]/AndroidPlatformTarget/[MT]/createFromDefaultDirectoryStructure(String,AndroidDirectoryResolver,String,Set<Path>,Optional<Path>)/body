{
  Path androidSdkDir=androidDirectoryResolver.findAndroidSdkDir();
  if (!androidSdkDir.isAbsolute()) {
    throw new HumanReadableException("Path to Android SDK must be absolute but was: %s.",androidSdkDir);
  }
  Path platformDirectory=androidSdkDir.resolve(platformDirectoryPath);
  Path androidJar=platformDirectory.resolve("android.jar");
  File optionalDirectory=platformDirectory.resolve("optional").toFile();
  if (optionalDirectory.exists() && optionalDirectory.isDirectory()) {
    String[] optionalDirList=optionalDirectory.list(new AddonFilter());
    if (optionalDirList != null) {
      Arrays.sort(optionalDirList);
      ImmutableSet.Builder<Path> additionalJars=ImmutableSet.builder();
      for (      String file : optionalDirList) {
        additionalJars.add(optionalDirectory.toPath().resolve(file));
      }
      additionalJars.addAll(additionalJarPaths);
      additionalJarPaths=additionalJars.build();
    }
  }
  LinkedList<Path> bootclasspathEntries=Lists.newLinkedList(additionalJarPaths);
  bootclasspathEntries.addFirst(androidJar);
  Path buildToolsDir=androidSdkDir.resolve("build-tools");
  String buildToolsPath;
  String buildToolsBinPath;
  if (buildToolsDir.toFile().isDirectory()) {
    File[] directories=buildToolsDir.toFile().listFiles(new FileFilter(){
      @Override public boolean accept(      File pathname){
        return pathname.isDirectory();
      }
    }
);
    if (directories.length == 0) {
      throw new HumanReadableException(Joiner.on(System.getProperty("line.separator")).join("%s was empty, but should have contained a subdirectory with build tools.","Install them using the Android SDK Manager (%s)."),buildToolsDir,androidSdkDir.resolve("tools").resolve("android"));
    }
 else {
      File newestBuildToolsDir=pickNewestBuildToolsDir(ImmutableSet.copyOf(directories));
      buildToolsPath="build-tools/" + newestBuildToolsDir.getName();
      if (androidSdkDir.resolve(buildToolsPath).resolve("bin").toFile().exists()) {
        buildToolsBinPath=buildToolsPath + "/bin";
      }
 else {
        buildToolsBinPath=buildToolsPath;
      }
    }
  }
 else {
    buildToolsPath="platform-tools";
    buildToolsBinPath=buildToolsPath;
  }
  Path zipAlignExecutable=androidSdkDir.resolve("tools/zipalign").toAbsolutePath();
  if (!zipAlignExecutable.toFile().exists()) {
    zipAlignExecutable=androidSdkDir.resolve(buildToolsBinPath).resolve("zipalign").toAbsolutePath();
  }
  Path androidFrameworkIdlFile=platformDirectory.resolve("framework.aidl");
  Path proguardJar=androidSdkDir.resolve("tools/proguard/lib/proguard.jar");
  Path proguardConfig=androidSdkDir.resolve("tools/proguard/proguard-android.txt");
  Path optimizedProguardConfig=androidSdkDir.resolve("tools/proguard/proguard-android-optimize.txt");
  return new AndroidPlatformTarget(name,androidJar.toAbsolutePath(),bootclasspathEntries,aaptOverride.or(androidSdkDir.resolve(buildToolsBinPath).resolve("aapt").toAbsolutePath()),androidSdkDir.resolve("platform-tools/adb").toAbsolutePath(),androidSdkDir.resolve(buildToolsBinPath).resolve("aidl").toAbsolutePath(),zipAlignExecutable,androidSdkDir.resolve(buildToolsPath).resolve(Platform.detect() == Platform.WINDOWS ? "dx.bat" : "dx").toAbsolutePath(),androidFrameworkIdlFile,proguardJar,proguardConfig,optimizedProguardConfig,androidDirectoryResolver);
}
