{
  Collection<Path> paths=FluentIterable.from(files).transform(new Function<File,Path>(){
    @Override public Path apply(    File file){
      return file.toPath();
    }
  }
).toList();
  final ImmutableMap.Builder<FileLike,String> completeList=ImmutableMap.builder();
  ClasspathTraverser traverser=new DefaultClasspathTraverser();
  ProjectFilesystem filesystem=new ProjectFilesystem(Paths.get(".").toAbsolutePath());
  traverser.traverse(new ClasspathTraversal(paths,filesystem){
    @Override public void visit(    FileLike fileLike){
      String contents;
      try {
        contents=new FileLikeCharSource(fileLike).read();
      }
 catch (      IOException e) {
        throw Throwables.propagate(e);
      }
      completeList.put(fileLike,contents);
    }
  }
);
  return completeList.build();
}
