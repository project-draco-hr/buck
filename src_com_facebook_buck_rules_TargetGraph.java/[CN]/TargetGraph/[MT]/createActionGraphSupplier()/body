{
  final TargetGraph targetGraph=this;
  return Suppliers.memoize(new Supplier<ActionGraph>(){
    @Override public ActionGraph get(){
      if (buckEventBus.isPresent()) {
        buckEventBus.get().post(ActionGraphEvent.started());
      }
      final BuildRuleResolver ruleResolver=new BuildRuleResolver();
      final MutableDirectedGraph<BuildRule> actionGraph=new MutableDirectedGraph<>();
      final TargetNodeToBuildRuleTransformer transformer=new TargetNodeToBuildRuleTransformer();
      AbstractBottomUpTraversal<TargetNode<?>,ActionGraph> bottomUpTraversal=new AbstractBottomUpTraversal<TargetNode<?>,ActionGraph>(targetGraph){
        @Override public void visit(        TargetNode<?> node){
          BuildRule rule;
          try {
            rule=transformer.transform(TargetGraph.this,ruleResolver,node);
          }
 catch (          NoSuchBuildTargetException e) {
            throw new HumanReadableException(e);
          }
          Optional<BuildRule> existingRule=ruleResolver.getRuleOptional(node.getBuildTarget());
          Preconditions.checkState(!existingRule.isPresent() || existingRule.get().equals(rule));
          if (!existingRule.isPresent()) {
            ruleResolver.addToIndex(rule);
          }
          actionGraph.addNode(rule);
          for (          BuildRule buildRule : rule.getDeps()) {
            if (buildRule.getBuildTarget().isFlavored()) {
              addGraphEnhancedDeps(rule);
            }
          }
          for (          BuildRule dep : rule.getDeps()) {
            actionGraph.addEdge(rule,dep);
          }
        }
        @Override public ActionGraph getResult(){
          return new ActionGraph(actionGraph);
        }
        private void addGraphEnhancedDeps(        BuildRule rule){
          new AbstractBreadthFirstTraversal<BuildRule>(rule){
            @Override public ImmutableSet<BuildRule> visit(            BuildRule rule){
              ImmutableSet.Builder<BuildRule> depsToVisit=null;
              boolean isRuleFlavored=rule.getBuildTarget().isFlavored();
              for (              BuildRule dep : rule.getDeps()) {
                boolean isDepFlavored=dep.getBuildTarget().isFlavored();
                if (isRuleFlavored || isDepFlavored) {
                  actionGraph.addEdge(rule,dep);
                }
                if (isDepFlavored) {
                  if (depsToVisit == null) {
                    depsToVisit=ImmutableSet.builder();
                  }
                  depsToVisit.add(dep);
                }
              }
              return depsToVisit == null ? ImmutableSet.<BuildRule>of() : depsToVisit.build();
            }
          }
.start();
        }
      }
;
      bottomUpTraversal.traverse();
      ActionGraph result=bottomUpTraversal.getResult();
      if (buckEventBus.isPresent()) {
        buckEventBus.get().post(ActionGraphEvent.finished());
      }
      return result;
    }
  }
);
}
