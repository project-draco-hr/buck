{
  ImmutableList<CxxSource> srcs=CxxDescriptionEnhancer.parseCxxSources(params.getBuildTarget(),args.srcs.or(ImmutableList.<SourcePath>of()));
  ImmutableMap<Path,SourcePath> headers=CxxDescriptionEnhancer.parseHeaders(params.getBuildTarget(),args.headers.or((ImmutableList.<SourcePath>of())));
  ImmutableMap<String,SourcePath> lexSrcs=SourcePaths.getSourcePathNames(params.getBuildTarget(),"lexSrcs",args.lexSrcs.or(ImmutableList.<SourcePath>of()));
  ImmutableMap<String,SourcePath> yaccSrcs=SourcePaths.getSourcePathNames(params.getBuildTarget(),"yaccSrcs",args.yaccSrcs.or(ImmutableList.<SourcePath>of()));
  CxxHeaderSourceSpec lexYaccSources=CxxDescriptionEnhancer.createLexYaccBuildRules(params,resolver,cxxBuckConfig,ImmutableList.<String>of(),lexSrcs,ImmutableList.<String>of(),yaccSrcs);
  CxxPreprocessorInput cxxPreprocessorInput=CxxDescriptionEnhancer.createHeaderBuildRules(params,resolver,cxxBuckConfig,args.preprocessorFlags.or(ImmutableList.<String>of()),ImmutableMap.<Path,SourcePath>builder().putAll(headers).putAll(lexYaccSources.getCxxHeaders()).build());
  ImmutableList<SourcePath> objects=CxxDescriptionEnhancer.createPreprocessAndCompileBuildRules(params,resolver,cxxBuckConfig,cxxPreprocessorInput,args.compilerFlags.or(ImmutableList.<String>of()),false,ImmutableList.<CxxSource>builder().addAll(srcs).addAll(lexYaccSources.getCxxSources()).build());
  Path output=getOutputPath(params.getBuildTarget());
  CxxLink cxxLink=CxxLinkableEnhancer.createCxxLinkableBuildRule(params,cxxBuckConfig.getLd().or(CxxLinkables.DEFAULT_LINKER_PATH),cxxBuckConfig.getCxxLdFlags(),cxxBuckConfig.getLdFlags(),createCxxLinkTarget(params.getBuildTarget()),CxxLinkableEnhancer.LinkType.EXECUTABLE,Optional.<String>absent(),output,objects,NativeLinkable.Type.STATIC,params.getDeps());
  resolver.addToIndex(cxxLink);
  return new CxxBinary(params.copyWithDeps(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getDeclaredDeps()).add(cxxLink).build(),params.getExtraDeps()),output,cxxLink);
}
