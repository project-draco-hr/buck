{
  ImmutableSet<Flavor> flavors=ImmutableSet.copyOf(params.getBuildTarget().getFlavors());
  CxxPlatform cxxPlatform=cxxPlatforms.getValue(flavors).or(defaultCxxPlatform);
  if (flavors.contains(CxxDescriptionEnhancer.HEADER_SYMLINK_TREE_FLAVOR)) {
    flavors=ImmutableSet.copyOf(Sets.difference(flavors,ImmutableSet.of(CxxDescriptionEnhancer.HEADER_SYMLINK_TREE_FLAVOR)));
    BuildTarget target=BuildTarget.builder(params.getBuildTarget().getUnflavoredBuildTarget()).addAllFlavors(flavors).build();
    BuildRuleParams typeParams=params.copyWithChanges(target,params.getDeclaredDeps(),params.getExtraDeps());
    return createHeaderSymlinkTreeBuildRule(typeParams,resolver,cxxPlatform,args);
  }
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  if (flavors.contains(CxxCompilationDatabase.COMPILATION_DATABASE)) {
    CxxLinkAndCompileRules cxxLinkAndCompileRules=CxxDescriptionEnhancer.createBuildRulesForCxxBinaryDescriptionArg(params.withoutFlavor(CxxCompilationDatabase.COMPILATION_DATABASE),resolver,cxxPlatform,args,preprocessMode);
    return CxxCompilationDatabase.createCompilationDatabase(params,pathResolver,preprocessMode,cxxLinkAndCompileRules.compileRules);
  }
  if (flavors.contains(CxxCompilationDatabase.UBER_COMPILATION_DATABASE)) {
    return CxxDescriptionEnhancer.createUberCompilationDatabase(cxxPlatforms.getValue(flavors).isPresent() ? params : params.withFlavor(defaultCxxPlatform.getFlavor()),resolver);
  }
  if (flavors.contains(CxxInferEnhancer.INFER)) {
    return CxxInferEnhancer.requireInferAnalyzeAndReportBuildRuleForCxxDescriptionArg(params,resolver,pathResolver,cxxPlatform,args,new CxxInferTools(inferBuckConfig),new CxxInferSourceFilter(inferBuckConfig));
  }
  if (flavors.contains(CxxInferEnhancer.INFER_ANALYZE)) {
    return CxxInferEnhancer.requireInferAnalyzeBuildRuleForCxxDescriptionArg(params,resolver,pathResolver,cxxPlatform,args,new CxxInferTools(inferBuckConfig),new CxxInferSourceFilter(inferBuckConfig));
  }
  CxxLinkAndCompileRules cxxLinkAndCompileRules=CxxDescriptionEnhancer.createBuildRulesForCxxBinaryDescriptionArg(params,resolver,cxxPlatform,args,preprocessMode);
  return new CxxBinary(params.appendExtraDeps(cxxLinkAndCompileRules.executable.getDeps(pathResolver)),resolver,pathResolver,cxxLinkAndCompileRules.cxxLink.getOutput(),cxxLinkAndCompileRules.cxxLink,cxxLinkAndCompileRules.executable,args.frameworks.get(),args.tests.get());
}
