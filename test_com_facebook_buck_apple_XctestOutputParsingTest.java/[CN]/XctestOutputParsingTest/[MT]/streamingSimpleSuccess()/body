{
  Path outputPath=TestDataHelper.getTestDataDirectory(this).resolve("xctest-output/simple-success.txt");
  final List<Object> streamedObjects=new ArrayList<>();
  try (Reader outputReader=Files.newBufferedReader(outputPath,StandardCharsets.UTF_8)){
    XctestOutputParsing.streamOutput(outputReader,eventCallbackAddingEventsToList(streamedObjects));
  }
   assertThat(streamedObjects,hasSize(8));
  Iterator<Object> iter=streamedObjects.iterator();
  Object nextStreamedObject;
  nextStreamedObject=iter.next();
  assertThat(nextStreamedObject,instanceOf(XctestOutputParsing.BeginXctestEvent.class));
  @SuppressWarnings("unused") XctestOutputParsing.BeginXctestEvent beginXctestEvent=(XctestOutputParsing.BeginXctestEvent)nextStreamedObject;
  nextStreamedObject=iter.next();
  assertThat(nextStreamedObject,instanceOf(XctestOutputParsing.BeginTestSuiteEvent.class));
  XctestOutputParsing.BeginTestSuiteEvent beginTestSuiteEvent1=(XctestOutputParsing.BeginTestSuiteEvent)nextStreamedObject;
  assertThat(beginTestSuiteEvent1.suite,equalTo("Example/ExampleTests.xctest(Tests)"));
  nextStreamedObject=iter.next();
  assertThat(nextStreamedObject,instanceOf(XctestOutputParsing.BeginTestSuiteEvent.class));
  XctestOutputParsing.BeginTestSuiteEvent beginTestSuiteEvent2=(XctestOutputParsing.BeginTestSuiteEvent)nextStreamedObject;
  assertThat(beginTestSuiteEvent2.suite,equalTo("SuccessTests"));
  nextStreamedObject=iter.next();
  assertThat(nextStreamedObject,instanceOf(XctestOutputParsing.BeginTestCaseEvent.class));
  XctestOutputParsing.BeginTestCaseEvent beginTestEvent=(XctestOutputParsing.BeginTestCaseEvent)nextStreamedObject;
  assertThat(beginTestEvent.test,equalTo("-[SuccessTests testSuccess]"));
  assertThat(beginTestEvent.className,equalTo("SuccessTests"));
  assertThat(beginTestEvent.methodName,equalTo("testSuccess"));
  nextStreamedObject=iter.next();
  assertThat(nextStreamedObject,instanceOf(XctestOutputParsing.EndTestCaseEvent.class));
  XctestOutputParsing.EndTestCaseEvent endTestEvent=(XctestOutputParsing.EndTestCaseEvent)nextStreamedObject;
  assertThat(endTestEvent.test,equalTo("-[SuccessTests testSuccess]"));
  assertThat(endTestEvent.className,equalTo("SuccessTests"));
  assertThat(endTestEvent.methodName,equalTo("testSuccess"));
  assertThat(endTestEvent.output,equalTo("-- test output --\n"));
  assertThat(endTestEvent.succeeded,is(true));
  assertThat(endTestEvent.exceptions,empty());
  assertThat(endTestEvent.totalDuration,closeTo(0.003,EPSILON));
  nextStreamedObject=iter.next();
  assertThat(nextStreamedObject,instanceOf(XctestOutputParsing.EndTestSuiteEvent.class));
  XctestOutputParsing.EndTestSuiteEvent endTestSuiteEvent2=(XctestOutputParsing.EndTestSuiteEvent)nextStreamedObject;
  assertThat(endTestSuiteEvent2.suite,equalTo("SuccessTests"));
  assertThat(endTestSuiteEvent2.testCaseCount,equalTo(1));
  assertThat(endTestSuiteEvent2.totalFailureCount,equalTo(0));
  assertThat(endTestSuiteEvent2.unexpectedExceptionCount,equalTo(0));
  assertThat(endTestSuiteEvent2.testDuration,closeTo(0.012,EPSILON));
  assertThat(endTestSuiteEvent2.totalDuration,closeTo(0.013,EPSILON));
  nextStreamedObject=iter.next();
  assertThat(nextStreamedObject,instanceOf(XctestOutputParsing.EndTestSuiteEvent.class));
  XctestOutputParsing.EndTestSuiteEvent endTestSuiteEvent1=(XctestOutputParsing.EndTestSuiteEvent)nextStreamedObject;
  assertThat(endTestSuiteEvent1.suite,equalTo("Example/ExampleTests.xctest(Tests)"));
  assertThat(endTestSuiteEvent1.testCaseCount,equalTo(1));
  assertThat(endTestSuiteEvent1.totalFailureCount,equalTo(0));
  assertThat(endTestSuiteEvent1.unexpectedExceptionCount,equalTo(0));
  assertThat(endTestSuiteEvent1.testDuration,closeTo(0.012,EPSILON));
  assertThat(endTestSuiteEvent1.totalDuration,closeTo(0.051,EPSILON));
  nextStreamedObject=iter.next();
  assertThat(nextStreamedObject,instanceOf(XctestOutputParsing.EndXctestEvent.class));
  @SuppressWarnings("unused") XctestOutputParsing.EndXctestEvent endXctestEvent=(XctestOutputParsing.EndXctestEvent)nextStreamedObject;
}
