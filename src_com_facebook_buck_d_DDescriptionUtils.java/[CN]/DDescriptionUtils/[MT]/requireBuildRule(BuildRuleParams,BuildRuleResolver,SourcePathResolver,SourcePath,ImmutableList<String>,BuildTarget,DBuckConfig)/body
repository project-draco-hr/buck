{
  Optional<BuildRule> existingRule=buildRuleResolver.getRuleOptional(compileTarget);
  if (existingRule.isPresent()) {
    return (DCompileBuildRule)existingRule.get();
  }
 else {
    ImmutableSet.Builder<String> includeFlagsBuilder=ImmutableSet.<String>builder();
    includeFlagsBuilder.add("-I" + params.getBuildTarget().getBasePath());
    for (    BuildRule dep : params.getDeps()) {
      if (dep instanceof DLibrary) {
        includeFlagsBuilder.add("-I" + dep.getBuildTarget().getBasePath());
      }
    }
    ImmutableList<String> flags=ImmutableList.<String>builder().addAll(dBuckConfig.getBaseCompilerFlags()).addAll(compilerFlags).addAll(includeFlagsBuilder.build()).add("-c").build();
    DCompileBuildRule rule=new DCompileBuildRule(params.copyWithBuildTarget(compileTarget),sourcePathResolver,ImmutableSortedSet.of(src),flags,dBuckConfig.getDCompiler());
    buildRuleResolver.addToIndex(rule);
    return rule;
  }
}
