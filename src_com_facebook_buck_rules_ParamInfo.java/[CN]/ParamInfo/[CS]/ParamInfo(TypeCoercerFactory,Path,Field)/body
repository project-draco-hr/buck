{
  this.pathRelativeToProjectRoot=Preconditions.checkNotNull(pathRelativeToProjectRoot);
  this.field=Preconditions.checkNotNull(field);
  this.name=field.getName();
  Hint hint=field.getAnnotation(Hint.class);
  this.pythonName=determinePythonName(this.name,hint);
  isOptional=Optional.class.isAssignableFrom(field.getType());
  if (isOptional) {
    Type type=field.getGenericType();
    if (type instanceof ParameterizedType) {
      Type innerType=((ParameterizedType)type).getActualTypeArguments()[0];
      this.typeCoercer=typeCoercerFactory.typeCoercerForType(innerType);
    }
 else {
      throw new RuntimeException("Unexpected type parameter for Optional: " + type);
    }
  }
 else {
    this.typeCoercer=typeCoercerFactory.typeCoercerForType(field.getGenericType());
  }
}
