def requirements_from_lines(lines, builder=None, relpath=None):
    relpath = (relpath or os.getcwd())
    builder = (builder.clone() if builder else ResolverOptionsBuilder())
    to_resolve = []
    for line in lines:
        line = line.strip()
        if ((not line) or line.startswith('#')):
            continue
        elif line.startswith('-e '):
            raise UnsupportedLine(('Editable distributions not supported: %s' % line))
        elif _startswith_any(line, ('-i ', '--index-url')):
            builder.set_index(_get_parameter(line))
        elif line.startswith('--extra-index-url'):
            builder.add_index(_get_parameter(line))
        elif _startswith_any(line, ('-f ', '--find-links')):
            builder.add_repository(_get_parameter(line))
        elif line.startswith('--allow-external'):
            builder.allow_external(_get_parameter(line))
        elif line.startswith('--allow-all-external'):
            builder.allow_all_external()
        elif line.startswith('--allow-unverified'):
            builder.allow_unverified(_get_parameter(line))
        elif line.startswith('--no-index'):
            builder.clear_indices()
        elif line.startswith('--no-use-wheel'):
            builder.no_use_wheel()
        elif _startswith_any(line, ('-r ', '--requirement')):
            path = os.path.join(relpath, _get_parameter(line))
            to_resolve.append(RequirementsTxtSentinel(path))
        else:
            to_resolve.append(line)
    resolvables = []
    for resolvable in to_resolve:
        if isinstance(resolvable, RequirementsTxtSentinel):
            resolvables.extend(requirements_from_file(resolvable.filename, builder=builder))
        else:
            try:
                resolvables.append(Resolvable.get(resolvable, builder))
            except Resolvable.Error as e:
                raise UnsupportedLine(('Could not resolve line: %s (%s)' % (resolvable, e)))
    return resolvables
