{
  buildableContext.recordArtifact(getOutput());
  return ImmutableList.of(new MakeCleanDirectoryStep(getProjectFilesystem(),getOutputDir(getBuildTarget())),new ShellStep(getProjectFilesystem().getRootPath()){
    @Override public ImmutableMap<String,String> getEnvironmentVariables(    ExecutionContext context){
      return ImmutableMap.<String,String>builder().putAll(super.getEnvironmentVariables(context)).putAll(linker.getEnvironment(getResolver())).build();
    }
    @Override protected ImmutableList<String> getShellCommandInternal(    ExecutionContext context){
      return ImmutableList.<String>builder().addAll(linker.getCommandPrefix(getResolver())).add("-o",getProjectFilesystem().resolve(getOutput()).toString()).addAll(Arg.stringify(args)).addAll(MoreIterables.zipAndConcat(Iterables.cycle("-optl"),Arg.stringify(linkerArgs))).build();
    }
    @Override public String getShortName(){
      return "haskell-link";
    }
  }
);
}
