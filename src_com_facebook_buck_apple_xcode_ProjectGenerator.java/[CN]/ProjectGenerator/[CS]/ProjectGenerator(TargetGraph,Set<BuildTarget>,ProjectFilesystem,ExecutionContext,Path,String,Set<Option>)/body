{
  ActionGraph actionGraph=targetGraph.getActionGraph(executionContext.getBuckEventBus());
  this.resolver=new SourcePathResolver(new BuildRuleResolver(ImmutableSet.copyOf(actionGraph.getNodes())));
  this.rulesToBuild=ImmutableSet.copyOf(actionGraph.getNodes());
  this.initialTargets=ImmutableSet.copyOf(initialTargets);
  this.projectFilesystem=projectFilesystem;
  this.executionContext=executionContext;
  this.outputDirectory=outputDirectory;
  this.projectName=projectName;
  this.options=ImmutableSet.copyOf(options);
  this.projectPath=outputDirectory.resolve(projectName + ".xcodeproj");
  this.pathRelativizer=new PathRelativizer(projectFilesystem.getRootPath(),outputDirectory,resolver);
  LOG.debug("Output directory %s, profile fs root path %s, repo root relative to output dir %s",this.outputDirectory,projectFilesystem.getRootPath(),this.pathRelativizer.outputDirToRootRelative(Paths.get(".")));
  this.placedAssetCatalogBuildPhaseScript=BuckConstant.BIN_PATH.resolve("xcode-scripts/compile_asset_catalogs_build_phase.sh");
  this.project=new PBXProject(projectName);
  this.headerMaps=new ArrayList<>();
  this.buildRuleToGeneratedTargetBuilder=ImmutableMap.builder();
  this.buildRuleToXcodeTarget=CacheBuilder.newBuilder().build(new CacheLoader<BuildRule,Optional<PBXTarget>>(){
    @Override public Optional<PBXTarget> load(    BuildRule key) throws Exception {
      return generateTargetForBuildRule(key);
    }
  }
);
  xcodeConfigurationLayersMultimapBuilder=ImmutableMultimap.builder();
  gidsToTargetNames=new HashMap<>();
}
