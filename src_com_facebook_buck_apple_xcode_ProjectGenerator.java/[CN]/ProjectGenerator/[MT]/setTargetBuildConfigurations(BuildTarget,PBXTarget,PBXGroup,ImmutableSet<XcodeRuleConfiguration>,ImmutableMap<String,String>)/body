{
  ImmutableMap.Builder<String,String> extraConfigsBuilder=ImmutableMap.builder();
  extraConfigsBuilder.putAll(extraBuildSettings).put("TARGET_NAME",getProductName(buildTarget)).put("SRCROOT",relativizeBuckRelativePathToGeneratedProject(buildTarget,"").toString());
  if (!options.contains(Option.REFERENCE_EXISTING_XCCONFIGS)) {
    extraConfigsBuilder.put("GCC_PREFIX_HEADER","$(SRCROOT)/$(inherited)");
  }
  ImmutableMap<String,String> extraConfigs=extraConfigsBuilder.build();
  PBXGroup configurationsGroup=targetGroup.getOrCreateChildGroupByName("Configurations");
  for (  XcodeRuleConfiguration configuration : configurations) {
    if (options.contains(Option.REFERENCE_EXISTING_XCCONFIGS)) {
      ConfigInXcodeLayout layers=extractXcodeConfigurationLayers(buildTarget,configuration);
      xcodeConfigurationLayersMultimapBuilder.put(configuration.getName(),layers);
      XCBuildConfiguration outputConfiguration=target.getBuildConfigurationList().getBuildConfigurationsByName().getUnchecked(configuration.getName());
      if (layers.targetLevelConfigFile.isPresent()) {
        PBXFileReference fileReference=configurationsGroup.getOrCreateFileReferenceBySourceTreePath(new SourceTreePath(PBXReference.SourceTree.SOURCE_ROOT,repoRootRelativeToOutputDirectory.resolve(layers.targetLevelConfigFile.get()).normalize()));
        outputConfiguration.setBaseConfigurationReference(fileReference);
        NSDictionary inlineSettings=new NSDictionary();
        Iterable<Map.Entry<String,String>> entries=Iterables.concat(layers.targetLevelInlineSettings.entrySet(),extraConfigs.entrySet());
        for (        Map.Entry<String,String> entry : entries) {
          inlineSettings.put(entry.getKey(),entry.getValue());
        }
        outputConfiguration.setBuildSettings(inlineSettings);
      }
    }
 else {
      Path outputConfigurationDirectory=outputDirectory.resolve("Configurations");
      projectFilesystem.mkdirs(outputConfigurationDirectory);
      Path originalProjectPath=projectFilesystem.getPathForRelativePath(Paths.get(buildTarget.getBasePathWithSlash()));
      ImmutableList<Path> searchPaths=ImmutableList.of(originalProjectPath);
      project.getBuildConfigurationList().getBuildConfigurationsByName().getUnchecked(configuration.getName());
      Path configurationFilePath=outputConfigurationDirectory.resolve(mangledBuildTargetName(buildTarget) + "-" + configuration.getName()+ ".xcconfig");
      String serializedConfiguration=serializeBuildConfiguration(configuration,searchPaths,extraConfigs);
      projectFilesystem.writeContentsToPath(serializedConfiguration,configurationFilePath);
      PBXFileReference fileReference=configurationsGroup.getOrCreateFileReferenceBySourceTreePath(new SourceTreePath(PBXReference.SourceTree.SOURCE_ROOT,repoRootRelativeToOutputDirectory.resolve(configurationFilePath)));
      XCBuildConfiguration outputConfiguration=target.getBuildConfigurationList().getBuildConfigurationsByName().getUnchecked(configuration.getName());
      outputConfiguration.setBaseConfigurationReference(fileReference);
    }
  }
}
