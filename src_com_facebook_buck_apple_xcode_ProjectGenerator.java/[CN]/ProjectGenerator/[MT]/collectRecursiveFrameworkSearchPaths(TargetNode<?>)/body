{
  return FluentIterable.from(AppleBuildRules.<AppleBundleDescription.Arg>getRecursiveTargetNodeDependenciesOfType(targetGraph,AppleBuildRules.RecursiveDependenciesMode.LINKING,targetNode,AppleBundleDescription.TYPE)).filter(new Predicate<TargetNode<AppleBundleDescription.Arg>>(){
    @Override public boolean apply(    TargetNode<AppleBundleDescription.Arg> input){
      return getLibraryNode(targetGraph,input).isPresent();
    }
  }
).transform(new Function<TargetNode<AppleBundleDescription.Arg>,String>(){
    @Override public String apply(    TargetNode<AppleBundleDescription.Arg> input){
      return getTargetOutputPath(input);
    }
  }
).toSet();
}
