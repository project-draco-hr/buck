{
  final ImmutableSet<BuildRuleType> requestedTypes=ImmutableSet.copyOf(types);
  final ImmutableList.Builder<BuildRule> filteredRules=ImmutableList.builder();
  AbstractAcyclicDepthFirstPostOrderTraversal<BuildRule> traversal=new AbstractAcyclicDepthFirstPostOrderTraversal<BuildRule>(){
    @Override protected Iterator<BuildRule> findChildren(    BuildRule node) throws IOException {
      return node.getDeps().iterator();
    }
    @Override protected void onNodeExplored(    BuildRule node){
      if (node != rule && requestedTypes.contains(node.getType())) {
        filteredRules.add(node);
      }
    }
    @Override protected void onTraversalComplete(    Iterable<BuildRule> nodesInExplorationOrder){
    }
  }
;
  try {
    traversal.traverse(ImmutableList.of(rule));
  }
 catch (  AbstractAcyclicDepthFirstPostOrderTraversal.CycleException|IOException e) {
    throw new RuntimeException(e);
  }
  return filteredRules.build();
}
