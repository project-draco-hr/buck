{
  BuildTarget buildTarget=bundle.isPresent() ? bundle.get().getBuildTarget() : appleBuildRule.getBuildTarget();
  String productName=getProductName(buildTarget);
  NewNativeTargetProjectMutator mutator=new NewNativeTargetProjectMutator(pathRelativizer,resolver,buildTarget);
  mutator.setTargetName(getXcodeTargetName(buildTarget)).setProduct(productType,productName,Paths.get(String.format(productOutputFormat,productName))).setGid(appleBuildRule.getGid()).setShouldGenerateCopyHeadersPhase(!appleBuildRule.getUseBuckHeaderMaps()).setSources(appleBuildRule.getSrcs(),appleBuildRule.getPerFileFlags()).setResources(resources);
  Path assetCatalogBuildPhaseScript;
  if (!assetCatalogs.isEmpty()) {
    if (PATH_OVERRIDE_FOR_ASSET_CATALOG_BUILD_PHASE_SCRIPT != null) {
      assetCatalogBuildPhaseScript=Paths.get(PATH_OVERRIDE_FOR_ASSET_CATALOG_BUILD_PHASE_SCRIPT);
    }
 else {
      shouldPlaceAssetCatalogCompiler=true;
      assetCatalogBuildPhaseScript=placedAssetCatalogBuildPhaseScript;
    }
    mutator.setAssetCatalogs(assetCatalogBuildPhaseScript,assetCatalogs);
  }
  if (includeFrameworks) {
    ImmutableSet.Builder<String> frameworksBuilder=ImmutableSet.builder();
    frameworksBuilder.addAll(appleBuildRule.getFrameworks());
    collectRecursiveFrameworkDependencies(appleBuildRule,frameworksBuilder);
    mutator.setFrameworks(frameworksBuilder.build());
    mutator.setArchives(collectRecursiveLibraryDependencies(appleBuildRule));
  }
  NewNativeTargetProjectMutator.Result targetBuilderResult=mutator.buildTargetAndAddToProject(project);
  PBXNativeTarget target=targetBuilderResult.target;
  PBXGroup targetGroup=targetBuilderResult.targetGroup;
  ImmutableMap.Builder<String,String> extraSettingsBuilder=ImmutableMap.builder();
  extraSettingsBuilder.put("TARGET_NAME",getProductName(buildTarget)).put("SRCROOT",pathRelativizer.outputPathToBuildTargetPath(buildTarget).toString());
  if (infoPlistOptional.isPresent()) {
    Path infoPlistPath=pathRelativizer.outputDirToRootRelative(infoPlistOptional.get());
    extraSettingsBuilder.put("INFOPLIST_FILE",infoPlistPath.toString());
  }
  Optional<SourcePath> prefixHeaderOptional=appleBuildRule.getPrefixHeader();
  if (prefixHeaderOptional.isPresent()) {
    Path prefixHeaderRelative=resolver.getPath(prefixHeaderOptional.get());
    Path prefixHeaderPath=pathRelativizer.outputDirToRootRelative(prefixHeaderRelative);
    extraSettingsBuilder.put("GCC_PREFIX_HEADER",prefixHeaderPath.toString());
  }
  if (appleBuildRule.getUseBuckHeaderMaps()) {
    extraSettingsBuilder.put("USE_HEADERMAP","NO");
  }
  ImmutableMap.Builder<String,String> defaultSettingsBuilder=ImmutableMap.builder();
  defaultSettingsBuilder.put("PRODUCT_NAME",getProductName(buildTarget));
  if (bundle.isPresent()) {
    defaultSettingsBuilder.put("WRAPPER_EXTENSION",bundle.get().getExtensionString());
  }
  defaultSettingsBuilder.put("PUBLIC_HEADERS_FOLDER_PATH",getHeaderOutputPathForRule(appleBuildRule.getHeaderPathPrefix()));
  if (!bundle.isPresent() && appleBuildRule.getType().equals(AppleLibraryDescription.TYPE)) {
    defaultSettingsBuilder.put("CONFIGURATION_BUILD_DIR",getObjectOutputPathForRule(appleBuildRule));
  }
  ImmutableMap.Builder<String,String> appendConfigsBuilder=ImmutableMap.builder();
  appendConfigsBuilder.put("HEADER_SEARCH_PATHS",Joiner.on(' ').join(Iterators.concat(collectRecursiveHeaderSearchPaths(appleBuildRule).iterator(),collectRecursiveHeaderMaps(appleBuildRule).iterator()))).put("USER_HEADER_SEARCH_PATHS",Joiner.on(' ').join(collectUserHeaderMaps(appleBuildRule))).put("LIBRARY_SEARCH_PATHS",Joiner.on(' ').join(collectRecursiveLibrarySearchPaths(appleBuildRule))).put("FRAMEWORK_SEARCH_PATHS",Joiner.on(' ').join(collectRecursiveFrameworkSearchPaths(appleBuildRule)));
  setTargetBuildConfigurations(buildTarget,target,targetGroup,appleBuildRule.getConfigurations(),extraSettingsBuilder.build(),defaultSettingsBuilder.build(),appendConfigsBuilder.build());
  if (bundle.isPresent()) {
    addRunScriptBuildPhasesForDependencies(bundle.get(),target);
  }
  addRunScriptBuildPhasesForDependencies(appleBuildRule,target);
  if (appleBuildRule.getUseBuckHeaderMaps()) {
    addHeaderMapsForHeaders(appleBuildRule,appleBuildRule.getHeaderPathPrefix(),appleBuildRule.getSrcs(),appleBuildRule.getPerFileFlags());
  }
  addCoreDataModelBuildPhase(targetGroup,Iterables.filter(appleBuildRule.getDeps(),CoreDataModel.class));
  return target;
}
