{
  PBXNativeTarget target=new PBXNativeTarget(getXcodeTargetName(rule));
  target.setProductType(PBXTarget.ProductType.IOS_LIBRARY);
  setNativeTargetGid(target,buildable);
  PBXGroup targetGroup=project.getMainGroup().getOrCreateChildGroupByName(target.getName());
  BuildTarget buildTarget=rule.getBuildTarget();
  ImmutableMap.Builder<String,String> extraSettingsBuilder=ImmutableMap.builder();
  if (buildable.getUseBuckHeaderMaps()) {
    extraSettingsBuilder.put("USE_HEADERMAP","NO");
  }
  setTargetBuildConfigurations(rule,target,targetGroup,buildable.getConfigurations(),extraSettingsBuilder.build(),ImmutableMap.of("PUBLIC_HEADERS_FOLDER_PATH",getHeaderOutputPathForRule(buildable.getHeaderPathPrefix()),"CONFIGURATION_BUILD_DIR",getObjectOutputPathForRule(rule)),ImmutableMap.<String,String>of());
  addRunScriptBuildPhasesForDependencies(rule,target);
  addBuildPhasesGroupsAndHeaderMapsForSourcesAndHeaders(buildTarget,target,targetGroup,buildable.getHeaderPathPrefix(),buildable.getUseBuckHeaderMaps(),buildable.getSrcs(),buildable.getPerFileFlags());
  addCoreDataModelBuildPhase(targetGroup,collectCoreDataModels(rule.getDeps()));
  String productName=getProductName(buildTarget);
  String libraryName="lib" + productName + ".a";
  PBXGroup productsGroup=project.getMainGroup().getOrCreateChildGroupByName("Products");
  PBXFileReference productReference=new PBXFileReference(libraryName,libraryName,PBXReference.SourceTree.BUILT_PRODUCTS_DIR);
  productsGroup.getChildren().add(productReference);
  target.setProductReference(productReference);
  project.getTargets().add(target);
  LOG.debug("Generated iOS library target %s",target);
  return target;
}
