{
  return FluentIterable.from(targetNodes).transformAndConcat(newRecursiveRuleDependencyTransformer(AppleBuildRules.RecursiveDependenciesMode.LINKING,AppleBuildRules.XCODE_TARGET_BUILD_RULE_TYPES)).transformAndConcat(new Function<TargetNode<?>,Iterable<String>>(){
    @Override public Iterable<String> apply(    TargetNode<?> input){
      Optional<TargetNode<AppleNativeTargetDescriptionArg>> library=getLibraryNode(targetGraph,input);
      if (library.isPresent() && !AppleLibraryDescription.isSharedLibraryTarget(library.get().getBuildTarget())) {
        return library.get().getConstructorArg().frameworks.get();
      }
 else {
        return ImmutableList.of();
      }
    }
  }
);
}
