{
  Preconditions.checkState(isBuiltByCurrentProject(rule),"should not generate rule if it shouldn't be built by current project");
  Preconditions.checkNotNull(targetNameToGIDMap);
  Optional<PBXTarget> result;
  if (rule.getType().equals(IosLibraryDescription.TYPE)) {
    result=Optional.of((PBXTarget)generateIosLibraryTarget(project,rule,(IosLibrary)rule));
  }
 else   if (rule.getType().equals(IosTestDescription.TYPE)) {
    result=Optional.of((PBXTarget)generateIosTestTarget(project,rule,(IosTest)rule));
  }
 else   if (rule.getType().equals(IosBinaryDescription.TYPE)) {
    result=Optional.of((PBXTarget)generateIOSBinaryTarget(project,rule,(IosBinary)rule));
  }
 else   if (rule.getType().equals(MacosxFrameworkDescription.TYPE)) {
    result=Optional.of((PBXTarget)generateMacosxFrameworkTarget(project,rule,(MacosxFramework)rule));
  }
 else   if (rule.getType().equals(MacosxBinaryDescription.TYPE)) {
    result=Optional.of((PBXTarget)generateMacosxBinaryTarget(project,rule,(MacosxBinary)rule));
  }
 else {
    result=Optional.absent();
  }
  if (result.isPresent()) {
    setTargetGIDIfNameInMap(result.get(),targetNameToGIDMap);
  }
  return result;
}
