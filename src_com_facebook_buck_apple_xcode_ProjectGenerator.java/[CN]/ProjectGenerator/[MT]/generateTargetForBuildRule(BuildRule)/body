{
  Preconditions.checkState(isBuiltByCurrentProject(rule),"should not generate rule if it shouldn't be built by current project");
  Optional<PBXTarget> result;
  Optional<AbstractAppleNativeTargetBuildRule> nativeTargetRule;
  if (rule.getType().equals(AppleLibraryDescription.TYPE)) {
    AppleLibrary library=(AppleLibrary)rule;
    result=Optional.of((PBXTarget)generateAppleLibraryTarget(project,rule,library));
    nativeTargetRule=Optional.<AbstractAppleNativeTargetBuildRule>of(library);
  }
 else   if (rule.getType().equals(AppleBinaryDescription.TYPE)) {
    AppleBinary binary=(AppleBinary)rule;
    result=Optional.of((PBXTarget)generateAppleBinaryTarget(project,rule,binary));
    nativeTargetRule=Optional.<AbstractAppleNativeTargetBuildRule>of(binary);
  }
 else   if (rule.getType().equals(AppleBundleDescription.TYPE)) {
    AppleBundle bundle=(AppleBundle)rule;
    result=Optional.of((PBXTarget)generateAppleBundleTarget(project,rule,bundle));
    nativeTargetRule=Optional.of((AbstractAppleNativeTargetBuildRule)bundle.getBinary());
  }
 else   if (rule.getType().equals(IosTestDescription.TYPE)) {
    IosTest test=(IosTest)rule;
    result=Optional.of((PBXTarget)generateIosTestTarget(project,rule,test));
    nativeTargetRule=Optional.<AbstractAppleNativeTargetBuildRule>of(test);
  }
 else   if (rule.getType().equals(IosBinaryDescription.TYPE)) {
    IosBinary binary=(IosBinary)rule;
    result=Optional.of((PBXTarget)generateIOSBinaryTarget(project,rule,binary));
    nativeTargetRule=Optional.<AbstractAppleNativeTargetBuildRule>of(binary);
  }
 else   if (rule.getType().equals(MacosxFrameworkDescription.TYPE)) {
    MacosxFramework framework=(MacosxFramework)rule;
    result=Optional.of((PBXTarget)generateMacosxFrameworkTarget(project,rule,framework));
    nativeTargetRule=Optional.<AbstractAppleNativeTargetBuildRule>of(framework);
  }
 else   if (rule.getType().equals(MacosxBinaryDescription.TYPE)) {
    MacosxBinary binary=(MacosxBinary)rule;
    result=Optional.of((PBXTarget)generateMacosxBinaryTarget(project,rule,binary));
    nativeTargetRule=Optional.<AbstractAppleNativeTargetBuildRule>of(binary);
  }
 else   if (rule.getType().equals(AppleExtensionDescription.TYPE)) {
    AppleExtension binary=(AppleExtension)rule;
    result=Optional.of((PBXTarget)generateExtensionTarget(project,rule,binary));
    nativeTargetRule=Optional.<AbstractAppleNativeTargetBuildRule>of(binary);
  }
 else {
    result=Optional.absent();
    nativeTargetRule=Optional.absent();
  }
  if (result.isPresent() && nativeTargetRule.isPresent()) {
    Optional<String> gid=nativeTargetRule.get().getGid();
    if (gid.isPresent()) {
      nativeTargetGIDs.add(gid.get());
    }
  }
  return result;
}
