{
  Preconditions.checkState(isBuiltByCurrentProject(rule),"should not generate rule if it shouldn't be built by current project");
  Optional<PBXTarget> result;
  Optional<AbstractAppleNativeTargetBuildRule> nativeTargetRule;
  if (rule.getType().equals(AppleLibraryDescription.TYPE)) {
    AppleLibrary library=(AppleLibrary)rule;
    result=Optional.<PBXTarget>of(generateAppleLibraryTarget(project,rule,library));
    nativeTargetRule=Optional.<AbstractAppleNativeTargetBuildRule>of(library);
  }
 else   if (rule.getType().equals(AppleBinaryDescription.TYPE)) {
    AppleBinary binary=(AppleBinary)rule;
    result=Optional.<PBXTarget>of(generateAppleBinaryTarget(project,rule,binary));
    nativeTargetRule=Optional.<AbstractAppleNativeTargetBuildRule>of(binary);
  }
 else   if (rule.getType().equals(AppleBundleDescription.TYPE)) {
    AppleBundle bundle=(AppleBundle)rule;
    result=Optional.<PBXTarget>of(generateAppleBundleTarget(project,bundle));
    nativeTargetRule=Optional.of((AbstractAppleNativeTargetBuildRule)bundle.getBinary());
  }
 else   if (rule.getType().equals(AppleTestDescription.TYPE)) {
    AppleTest test=(AppleTest)rule;
    if (test.getTestBundle().getType().equals(AppleBundleDescription.TYPE)) {
      AppleBundle bundle=(AppleBundle)test.getTestBundle();
      if (bundle.getExtensionValue().isPresent() && AppleBuildRules.isXcodeTargetTestBundleExtension(bundle.getExtensionValue().get())) {
        result=Optional.<PBXTarget>of(generateAppleBundleTarget(project,bundle));
        nativeTargetRule=Optional.of((AbstractAppleNativeTargetBuildRule)bundle.getBinary());
      }
 else {
        throw new HumanReadableException("Incorrect extension: " + bundle.getExtensionString());
      }
    }
 else {
      throw new HumanReadableException("Test bundle should be a bundle: " + test.getTestBundle());
    }
  }
 else {
    result=Optional.absent();
    nativeTargetRule=Optional.absent();
  }
  if (result.isPresent() && nativeTargetRule.isPresent()) {
    Optional<String> gid=nativeTargetRule.get().getGid();
    if (gid.isPresent()) {
      nativeTargetGIDs.add(gid.get());
    }
  }
  return result;
}
