{
  Preconditions.checkState(isBuiltByCurrentProject(rule),"should not generate rule if it shouldn't be built by current project");
  Preconditions.checkNotNull(targetNameToGIDMap);
  Optional<PBXTarget> result;
  Optional<AbstractAppleNativeTargetBuildRule> nativeTargetRule;
  if (rule.getType().equals(IosLibraryDescription.TYPE)) {
    IosLibrary library=(IosLibrary)rule;
    result=Optional.of((PBXTarget)generateIosLibraryTarget(project,rule,library));
    nativeTargetRule=Optional.<AbstractAppleNativeTargetBuildRule>of(library);
  }
 else   if (rule.getType().equals(IosTestDescription.TYPE)) {
    IosTest test=(IosTest)rule;
    result=Optional.of((PBXTarget)generateIosTestTarget(project,rule,test));
    nativeTargetRule=Optional.<AbstractAppleNativeTargetBuildRule>of(test);
  }
 else   if (rule.getType().equals(IosBinaryDescription.TYPE)) {
    IosBinary binary=(IosBinary)rule;
    result=Optional.of((PBXTarget)generateIOSBinaryTarget(project,rule,binary));
    nativeTargetRule=Optional.<AbstractAppleNativeTargetBuildRule>of(binary);
  }
 else   if (rule.getType().equals(MacosxFrameworkDescription.TYPE)) {
    MacosxFramework framework=(MacosxFramework)rule;
    result=Optional.of((PBXTarget)generateMacosxFrameworkTarget(project,rule,framework));
    nativeTargetRule=Optional.<AbstractAppleNativeTargetBuildRule>of(framework);
  }
 else   if (rule.getType().equals(MacosxBinaryDescription.TYPE)) {
    MacosxBinary binary=(MacosxBinary)rule;
    result=Optional.of((PBXTarget)generateMacosxBinaryTarget(project,rule,binary));
    nativeTargetRule=Optional.<AbstractAppleNativeTargetBuildRule>of(binary);
  }
 else {
    result=Optional.absent();
    nativeTargetRule=Optional.absent();
  }
  if (result.isPresent() && nativeTargetRule.isPresent() && !nativeTargetRule.get().getGid().isPresent()) {
    setTargetGIDIfNameInMap(result.get(),targetNameToGIDMap);
  }
  return result;
}
