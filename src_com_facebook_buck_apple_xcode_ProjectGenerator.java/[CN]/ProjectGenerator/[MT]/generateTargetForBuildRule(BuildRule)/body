{
  Preconditions.checkState(isBuiltByCurrentProject(rule.getBuildTarget()),"should not generate rule if it shouldn't be built by current project");
  Optional<PBXTarget> result;
  if (rule.getType().equals(AppleLibraryDescription.TYPE)) {
    AppleLibrary appleLibrary=(AppleLibrary)rule;
    result=Optional.<PBXTarget>of(generateAppleLibraryTarget(project,appleLibrary));
  }
 else   if (rule.getType().equals(AppleBinaryDescription.TYPE)) {
    AppleBinary appleBinary=(AppleBinary)rule;
    result=Optional.<PBXTarget>of(generateAppleBinaryTarget(project,appleBinary));
  }
 else   if (rule.getType().equals(AppleBundleDescription.TYPE)) {
    AppleBundle bundle=(AppleBundle)rule;
    result=Optional.<PBXTarget>of(generateAppleBundleTarget(project,bundle));
  }
 else   if (rule.getType().equals(AppleTestDescription.TYPE)) {
    AppleTest test=(AppleTest)rule;
    if (test.getTestBundle().getType().equals(AppleBundleDescription.TYPE)) {
      AppleBundle bundle=(AppleBundle)test.getTestBundle();
      if (bundle.getExtensionValue().isPresent() && AppleBuildRules.isXcodeTargetTestBundleExtension(bundle.getExtensionValue().get())) {
        result=Optional.<PBXTarget>of(generateAppleBundleTarget(project,bundle));
      }
 else {
        throw new HumanReadableException("Incorrect extension: " + bundle.getExtensionString());
      }
    }
 else {
      throw new HumanReadableException("Test bundle should be a bundle: " + test.getTestBundle());
    }
  }
 else {
    result=Optional.absent();
  }
  return result;
}
