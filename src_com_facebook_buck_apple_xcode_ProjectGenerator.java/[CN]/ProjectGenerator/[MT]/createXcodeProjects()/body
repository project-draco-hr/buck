{
  LOG.debug("Creating projects for targets %s",initialTargets);
  try {
    for (    TargetNode<?> targetNode : targetGraph.getNodes()) {
      if (isBuiltByCurrentProject(targetNode.getBuildTarget())) {
        LOG.debug("Including rule %s in project",targetNode);
        Optional<PBXTarget> target=targetNodeToProjectTarget.getUnchecked(targetNode);
        if (target.isPresent()) {
          if (targetNode.getType().equals(AppleTestDescription.TYPE)) {
            AppleTestDescription.Arg arg=(AppleTestDescription.Arg)targetNode.getConstructorArg();
            targetNode=targetGraph.get(arg.testBundle);
          }
          targetNodeToGeneratedProjectTargetBuilder.put(targetNode,target.get());
        }
      }
 else {
        LOG.verbose("Excluding rule %s (not built by current project)",targetNode);
      }
    }
    for (    String configName : targetConfigNamesBuilder.build()) {
      XCBuildConfiguration outputConfig=project.getBuildConfigurationList().getBuildConfigurationsByName().getUnchecked(configName);
      outputConfig.setBuildSettings(new NSDictionary());
    }
    writeProjectFile(project);
    if (shouldPlaceAssetCatalogCompiler) {
      Path placedAssetCatalogCompilerPath=projectFilesystem.getPathForRelativePath(BuckConstant.BIN_PATH.resolve("xcode-scripts/compile_asset_catalogs.py"));
      LOG.debug("Ensuring asset catalog is copied to path [%s]",placedAssetCatalogCompilerPath);
      projectFilesystem.createParentDirs(placedAssetCatalogCompilerPath);
      projectFilesystem.createParentDirs(placedAssetCatalogBuildPhaseScript);
      projectFilesystem.copyFile(Paths.get(PATH_TO_ASSET_CATALOG_COMPILER),placedAssetCatalogCompilerPath);
      projectFilesystem.copyFile(Paths.get(PATH_TO_ASSET_CATALOG_BUILD_PHASE_SCRIPT),placedAssetCatalogBuildPhaseScript);
    }
    projectGenerated=true;
  }
 catch (  UncheckedExecutionException e) {
    UncheckedExecutionException originalException=e;
    while (e.getCause() instanceof UncheckedExecutionException) {
      e=(UncheckedExecutionException)e.getCause();
    }
    if (e.getCause() instanceof HumanReadableException) {
      throw (HumanReadableException)e.getCause();
    }
 else {
      throw originalException;
    }
  }
}
