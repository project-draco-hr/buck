{
  try {
    Iterable<BuildRule> allRules=RuleDependencyFinder.getAllRules(partialGraph,initialTargets);
    ImmutableMap.Builder<BuildRule,PBXTarget> ruleToTargetMapBuilder=ImmutableMap.builder();
    for (    BuildRule rule : allRules) {
      if (isBuiltByCurrentProject(rule)) {
        Optional<PBXTarget> target=buildRuleToXcodeTarget.getUnchecked(rule);
        if (target.isPresent()) {
          ruleToTargetMapBuilder.put(rule,target.get());
        }
      }
    }
    if (options.contains(Option.REFERENCE_EXISTING_XCCONFIGS)) {
      setProjectLevelConfigs(project,repoRootRelativeToOutputDirectory,collectProjectLevelConfigsIfIdenticalOrFail(xcodeConfigurationLayersMultimapBuilder.build()));
    }
    addGeneratedSignedSourceTarget(project);
    writeProjectFile(project);
    if (options.contains(Option.GENERATE_WORKSPACE)) {
      writeWorkspace(projectPath);
    }
    if (options.contains(Option.GENERATE_SCHEME)) {
      scheme=SchemeGenerator.createScheme(partialGraph,projectPath,ruleToTargetMapBuilder.build());
      SchemeGenerator.writeScheme(projectFilesystem,scheme,projectPath);
    }
  }
 catch (  UncheckedExecutionException e) {
    if (e.getCause() instanceof HumanReadableException) {
      throw (HumanReadableException)e.getCause();
    }
 else {
      throw e;
    }
  }
}
