{
  PBXNativeTarget target=new PBXNativeTarget(getXcodeTargetName(rule));
  target.setProductType(productType);
  setNativeTargetGid(target,buildable);
  PBXGroup targetGroup=project.getMainGroup().getOrCreateChildGroupByName(target.getName());
  ImmutableMap.Builder<String,String> extraSettingsBuilder=ImmutableMap.builder();
  Optional<Path> infoPlistOptional=buildable.getInfoPlist();
  if (infoPlistOptional.isPresent()) {
    Path infoPlistPath=repoRootRelativeToOutputDirectory.resolve(infoPlistOptional.get());
    extraSettingsBuilder.put("INFOPLIST_FILE",infoPlistPath.toString());
  }
  if (buildable.getUseBuckHeaderMaps()) {
    extraSettingsBuilder.put("USE_HEADERMAP","NO");
  }
  setTargetBuildConfigurations(rule,target,targetGroup,buildable.getConfigurations(),extraSettingsBuilder.build(),ImmutableMap.<String,String>of("PUBLIC_HEADERS_FOLDER_PATH",getHeaderOutputPathForRule(buildable.getHeaderPathPrefix())),ImmutableMap.<String,String>of());
  addRunScriptBuildPhasesForDependencies(rule,target);
  addBuildPhasesGroupsAndHeaderMapsForSourcesAndHeaders(rule.getBuildTarget(),target,targetGroup,buildable.getHeaderPathPrefix(),buildable.getUseBuckHeaderMaps(),buildable.getSrcs(),buildable.getPerFileFlags());
  ImmutableSet.Builder<String> frameworksBuilder=ImmutableSet.builder();
  frameworksBuilder.addAll(buildable.getFrameworks());
  collectRecursiveFrameworkDependencies(rule,frameworksBuilder);
  addFrameworksBuildPhase(rule.getBuildTarget(),target,project.getMainGroup().getOrCreateChildGroupByName("Frameworks"),frameworksBuilder.build(),collectRecursiveLibraryDependencies(rule));
  addResourcesBuildPhase(target,targetGroup,collectRecursiveResources(rule,resourceRuleType));
  addAssetCatalogBuildPhase(target,targetGroup,collectRecursiveAssetCatalogs(rule));
  addCoreDataModelBuildPhase(targetGroup,collectCoreDataModels(rule.getDeps()));
  ImmutableSet.Builder<SourceTreePath> extensionsSourceTreePathsBuilder=ImmutableSet.builder();
  Iterable<BuildRule> extensions=getRecursiveRuleDependenciesOfType(rule,AppleExtensionDescription.TYPE);
  for (  BuildRule extension : extensions) {
    extensionsSourceTreePathsBuilder.add(new SourceTreePath(PBXReference.SourceTree.BUILT_PRODUCTS_DIR,extension.getPathToOutputFile().getFileName()));
  }
  addCopyFilesBuildPhase(target,project.getMainGroup().getOrCreateChildGroupByName("Products"),PBXCopyFilesBuildPhase.Destination.PLUGINS,"",extensionsSourceTreePathsBuilder.build());
  String productName=getProductName(rule.getBuildTarget());
  PBXGroup productsGroup=project.getMainGroup().getOrCreateChildGroupByName("Products");
  String productOutputName=String.format(productOutputFormat,productName);
  PBXFileReference productReference=new PBXFileReference(productOutputName,productOutputName,PBXReference.SourceTree.BUILT_PRODUCTS_DIR);
  productsGroup.getChildren().add(productReference);
  target.setProductName(productName);
  target.setProductReference(productReference);
  return target;
}
