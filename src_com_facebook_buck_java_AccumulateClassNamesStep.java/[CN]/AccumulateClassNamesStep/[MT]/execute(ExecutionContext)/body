{
  final ImmutableSortedSet.Builder<String> classNamesBuilder=ImmutableSortedSet.naturalOrder();
  Path path=context.getProjectFilesystem().resolve(pathToJarOrClassesDirectory);
  ClasspathTraversal traversal=new ClasspathTraversal(Collections.singleton(path)){
    @Override public void visit(    FileLike fileLike) throws IOException {
      String name=fileLike.getRelativePath();
      if (name.endsWith(CLASS_NAME_SUFFIX)) {
        classNamesBuilder.add(name.substring(0,name.length() - CLASS_NAME_SUFFIX.length()));
      }
    }
  }
;
  try {
    new DefaultClasspathTraverser().traverse(traversal);
  }
 catch (  IOException e) {
    e.printStackTrace(context.getStdErr());
    return 1;
  }
  ImmutableSortedSet<String> classNames=classNamesBuilder.build();
  try {
    context.getProjectFilesystem().writeLinesToPath(classNames,whereClassNamesShouldBeWritten);
  }
 catch (  IOException e) {
    context.getBuckEventBus().post(ThrowableLogEvent.create(e,"There was an error writing the list of .class files to %s.",whereClassNamesShouldBeWritten));
    return 1;
  }
  return 0;
}
