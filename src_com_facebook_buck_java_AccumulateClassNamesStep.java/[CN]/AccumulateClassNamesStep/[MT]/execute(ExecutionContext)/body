{
  ImmutableSortedMap<String,HashCode> classNames;
  if (pathToJarOrClassesDirectory.isPresent()) {
    Optional<ImmutableSortedMap<String,HashCode>> classNamesOptional=calculateClassHashes(context,context.getProjectFilesystem().resolve(pathToJarOrClassesDirectory.get()));
    if (classNamesOptional.isPresent()) {
      classNames=classNamesOptional.get();
    }
 else {
      return 1;
    }
  }
 else {
    classNames=ImmutableSortedMap.of();
  }
  try {
    context.getProjectFilesystem().writeLinesToPath(Iterables.transform(classNames.entrySet(),new Function<Map.Entry<String,HashCode>,String>(){
      @Override public String apply(      Entry<String,HashCode> entry){
        return entry.getKey() + CLASS_NAME_HASH_CODE_SEPARATOR + entry.getValue();
      }
    }
),whereClassNamesShouldBeWritten);
  }
 catch (  IOException e) {
    context.getBuckEventBus().post(ThrowableLogEvent.create(e,"There was an error writing the list of .class files to %s.",whereClassNamesShouldBeWritten));
    return 1;
  }
  return 0;
}
