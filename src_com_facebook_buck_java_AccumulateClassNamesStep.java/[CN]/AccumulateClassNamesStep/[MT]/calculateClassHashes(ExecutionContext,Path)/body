{
  final ImmutableSortedMap.Builder<String,HashCode> classNamesBuilder=ImmutableSortedMap.naturalOrder();
  ClasspathTraversal traversal=new ClasspathTraversal(Collections.singleton(path)){
    @Override public void visit(    final FileLike fileLike) throws IOException {
      if (!FileLikes.isClassFile(fileLike)) {
        return;
      }
      String key=FileLikes.getFileNameWithoutClassSuffix(fileLike);
      InputSupplier<InputStream> input=new InputSupplier<InputStream>(){
        @Override public InputStream getInput() throws IOException {
          return fileLike.getInput();
        }
      }
;
      HashCode value=ByteStreams.hash(input,Hashing.sha1());
      classNamesBuilder.put(key,value);
    }
  }
;
  try {
    new DefaultClasspathTraverser().traverse(traversal);
  }
 catch (  IOException e) {
    context.logError(e,"Error accumulating class names for %s.",pathToJarOrClassesDirectory);
    return Optional.absent();
  }
  return Optional.of(classNamesBuilder.build());
}
