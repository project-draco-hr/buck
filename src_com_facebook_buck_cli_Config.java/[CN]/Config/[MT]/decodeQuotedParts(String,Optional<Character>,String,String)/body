{
  ImmutableList.Builder<String> listBuilder=ImmutableList.<String>builder();
  StringBuilder stringBuilder=new StringBuilder();
  boolean inQuotes=false;
  int quoteIndex=0;
  for (int i=0; i < input.length(); i++) {
    char c=input.charAt(i);
    if (inQuotes) {
      if (c == '"') {
        inQuotes=false;
        continue;
      }
 else       if (c == '\\') {
        ++i;
        if (i >= input.length()) {
          throw new HumanReadableException(".buckconfig: %s:%s: Input ends inside escape sequence: %s",section,field,input.substring(i - 1));
        }
        c=input.charAt(i);
switch (c) {
case 'n':
          stringBuilder.append('\n');
        continue;
case 'r':
      stringBuilder.append('\r');
    continue;
case 't':
  stringBuilder.append('\t');
continue;
case 'U':
int codePoint=hexDecode(input,i + 1,8,"\\U",section,field);
stringBuilder.append(Character.toChars(codePoint));
i+=8;
continue;
case 'u':
stringBuilder.append((char)hexDecode(input,i + 1,4,"\\u",section,field));
i+=4;
continue;
case 'x':
stringBuilder.append((char)hexDecode(input,i + 1,2,"\\x",section,field));
i+=2;
continue;
case '\\':
case '"':
break;
default :
throw new HumanReadableException(".buckconfig: %s:%s: Invalid escape sequence: %s",section,field,input.substring(i - 1,i + 1));
}
}
}
 else if (c == '"') {
quoteIndex=i;
inQuotes=true;
continue;
}
 else if (splitChar.isPresent() && c == splitChar.get()) {
listBuilder.add(stringBuilder.toString());
stringBuilder=new StringBuilder();
continue;
}
 else if (stringBuilder.length() == 0 && c == ' ' || c == '\t') {
continue;
}
stringBuilder.append(c);
}
if (inQuotes) {
int lastIndex=quoteIndex + 10;
if (lastIndex >= input.length()) {
lastIndex=input.length();
}
throw new HumanReadableException(".buckconfig: %s:%s: " + "Input ends inside quoted string: %s...",section,field,input.substring(quoteIndex,lastIndex));
}
listBuilder.add(stringBuilder.toString());
return listBuilder.build();
}
