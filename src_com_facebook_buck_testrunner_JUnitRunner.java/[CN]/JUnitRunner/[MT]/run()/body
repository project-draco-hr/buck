{
  Level stdOutLogLevel=Level.INFO;
  Level stdErrLogLevel=Level.WARNING;
  String unparsedStdOutLogLevel=System.getProperty(STD_OUT_LOG_LEVEL_PROPERTY);
  String unparsedStdErrLogLevel=System.getProperty(STD_ERR_LOG_LEVEL_PROPERTY);
  if (unparsedStdOutLogLevel != null) {
    stdOutLogLevel=Level.parse(unparsedStdOutLogLevel);
  }
  if (unparsedStdErrLogLevel != null) {
    stdErrLogLevel=Level.parse(unparsedStdErrLogLevel);
  }
  Filter filter=new Filter(){
    @Override public boolean shouldRun(    Description description){
      String methodName=description.getMethodName();
      if (methodName == null) {
        return true;
      }
 else {
        String className=description.getClassName();
        TestDescription testDescription=new TestDescription(className,methodName);
        if (testSelectorList.isIncluded(testDescription)) {
          boolean isIgnored=description.getAnnotation(Ignore.class) != null;
          if (!isIgnored) {
            seenDescriptions.add(testDescription);
          }
          return !isDryRun;
        }
 else {
          return false;
        }
      }
    }
    @Override public String describe(){
      return FILTER_DESCRIPTION;
    }
  }
;
  for (  String className : testClassNames) {
    Class<?> testClass=Class.forName(className);
    Ignore ignore=testClass.getAnnotation(Ignore.class);
    boolean isTestClassIgnored=(ignore != null || !isTestClass(testClass));
    List<TestResult> results;
    if (isTestClassIgnored) {
      results=Collections.emptyList();
    }
 else {
      results=new ArrayList<>();
      for (      Class<?> suiteClass : getTestClasses(testClass)) {
        List<TestResult> suiteResults=new ArrayList<>();
        JUnitCore jUnitCore=new JUnitCore();
        Runner suite=new Computer().getSuite(createRunnerBuilder(),new Class<?>[]{suiteClass});
        Request request=Request.runner(suite);
        request=request.filterWith(filter);
        jUnitCore.addListener(new TestListener(suiteResults,stdOutLogLevel,stdErrLogLevel));
        jUnitCore.run(request);
        if (isDryRun) {
          suiteResults=getDryRunResults(className,suiteClass);
        }
        for (        TestResult result : suiteResults) {
          results.add(result);
        }
      }
    }
    results=interpretResults(results);
    if (results != null) {
      writeResult(className,results);
    }
  }
}
