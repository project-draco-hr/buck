{
  final BlockedPathNode blockedPathTree=createAggregationHaltPoints(buckConfig,targetGraph);
  ImmutableListMultimap<Path,TargetNode<?>> baseTargetPathMultimap=FluentIterable.from(targetGraph.getNodes()).filter(IjModuleFactory.SUPPORTED_MODULE_TYPES_PREDICATE).index(new Function<TargetNode<?>,Path>(){
    @Override public Path apply(    TargetNode<?> input){
      Path basePath=input.getBuildTarget().getBasePath();
      if (input.getConstructorArg() instanceof AndroidResourceDescription.Arg) {
        return basePath;
      }
      return simplifyPath(basePath,minimumPathDepth,blockedPathTree);
    }
  }
);
  ImmutableMap.Builder<BuildTarget,IjModule> moduleMapBuilder=new ImmutableMap.Builder<>();
  for (  Path baseTargetPath : baseTargetPathMultimap.keySet()) {
    ImmutableSet<TargetNode<?>> targets=FluentIterable.from(baseTargetPathMultimap.get(baseTargetPath)).toSet();
    IjModule module=moduleFactory.createModule(buckConfig,baseTargetPath,targets);
    for (    TargetNode<?> target : targets) {
      moduleMapBuilder.put(target.getBuildTarget(),module);
    }
  }
  return moduleMapBuilder.build();
}
