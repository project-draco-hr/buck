{
  final HashSet<TypedConstant> usedByLocal=new HashSet<TypedConstant>();
  final ArrayList<SsaInsn>[] useList=ssaMeth.getUseListCopy();
  for (int i=0; i < origRegCount; i++) {
    SsaInsn insn=ssaMeth.getDefinitionForRegister(i);
    if (insn == null) {
      continue;
    }
    final RegisterSpec origReg=insn.getResult();
    TypeBearer typeBearer=insn.getResult().getTypeBearer();
    if (!typeBearer.isConstant())     continue;
    TypedConstant cst=(TypedConstant)typeBearer;
    final RegisterSpec newReg=newRegs.get(cst);
    if (newReg == null) {
      continue;
    }
    if (ssaMeth.isRegALocal(origReg)) {
      if (!COLLECT_ONE_LOCAL) {
        continue;
      }
 else {
        if (usedByLocal.contains(cst)) {
          continue;
        }
 else {
          usedByLocal.add(cst);
          fixLocalAssignment(origReg,newRegs.get(cst));
        }
      }
    }
    RegisterMapper mapper=new RegisterMapper(){
      @Override public int getNewRegisterCount(){
        return ssaMeth.getRegCount();
      }
      @Override public RegisterSpec map(      RegisterSpec registerSpec){
        if (registerSpec.getReg() == origReg.getReg()) {
          return newReg.withLocalItem(registerSpec.getLocalItem());
        }
        return registerSpec;
      }
    }
;
    for (    SsaInsn use : useList[origReg.getReg()]) {
      if (use.canThrow() && use.getBlock().getSuccessors().cardinality() > 1) {
        continue;
      }
      use.mapSourceRegisters(mapper);
    }
  }
}
