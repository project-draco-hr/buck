{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  FakeJavaLibrary transitiveLibrary=resolver.addToIndex(new FakeJavaLibrary(BuildTargetFactory.newInstance("//:transitive_lib"),pathResolver));
  FakeJavaLibrary firstOrderLibrary=resolver.addToIndex(new FakeJavaLibrary(BuildTargetFactory.newInstance("//:first_order_lib"),pathResolver,ImmutableSortedSet.<BuildRule>of(transitiveLibrary)));
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  BuildRule javaBinary=new JavaBinaryRuleBuilder(target).setDeps(ImmutableSortedSet.of(firstOrderLibrary.getBuildTarget())).build(resolver);
  assertThat(javaBinary.getDeps(),Matchers.<BuildRule>containsInAnyOrder(firstOrderLibrary,transitiveLibrary));
}
