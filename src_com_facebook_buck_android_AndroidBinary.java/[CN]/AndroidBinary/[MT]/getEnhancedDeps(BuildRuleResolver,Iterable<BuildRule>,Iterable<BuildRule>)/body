{
  final ImmutableSortedSet<BuildRule> enhancedDeps=ImmutableSortedSet.<BuildRule>naturalOrder().addAll(declaredDeps).addAll(inferredDeps).addAll(preprocessJavaClassesDeps).add(ruleResolver.get(keystore.getBuildTarget())).build();
  boolean allowNonExistentRule=false;
  ImmutableSortedSet<BuildRule> buildRulesToExcludeFromDex=BuildRules.toBuildRulesFor(getBuildTarget(),ruleResolver,buildTargetsToExcludeFromDex,allowNonExistentRule);
  rulesToExcludeFromDex=FluentIterable.from(buildRulesToExcludeFromDex).filter(new Predicate<BuildRule>(){
    @Override public boolean apply(    BuildRule input){
      return input.getBuildable() instanceof JavaLibrary;
    }
  }
).transform(new Function<BuildRule,JavaLibrary>(){
    @Override public JavaLibrary apply(    BuildRule input){
      return (JavaLibrary)input.getBuildable();
    }
  }
).toSortedSet(HasBuildTarget.BUILD_TARGET_COMPARATOR);
  boolean shouldPreDex=!disablePreDex && PackageType.DEBUG.equals(packageType) && !preprocessJavaClassesBash.isPresent();
  AndroidBinaryGraphEnhancer graphEnhancer=new AndroidBinaryGraphEnhancer(originalBuildRuleParams.copyWithChangedDeps(enhancedDeps),ruleResolver,resourceCompressionMode,resourceFilter,manifest,packageType,cpuFilters,buildStringSourceMap,shouldPreDex,primaryDexPath,dexSplitMode,buildTargetsToExcludeFromDex,ImmutableSet.<BuildTarget>of(),javacOptions,exopackage,keystore);
  AndroidBinaryGraphEnhancer.EnhancementResult result=graphEnhancer.createAdditionalBuildables();
  setGraphEnhancementResult(result);
  return result.getFinalDeps();
}
