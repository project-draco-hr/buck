{
  builder.setReflectively("target",target).setReflectively("keystore",keystore.getBuildTarget()).setReflectively("classpathDeps",FluentIterable.from(classpathDeps).transform(new Function<BuildRule,String>(){
    @Override public String apply(    BuildRule buildRule){
      return buildRule.getFullyQualifiedName();
    }
  }
).toList()).setReflectively("packageType",packageType).setReflectively("sdkProguardConfig",sdkProguardConfig).setReflectively("optimizationPasses",optimizationPasses).setReflectively("resourceCompressionMode",resourceCompressionMode).setReflectively("cpuFilters",ImmutableSortedSet.copyOf(cpuFilters)).setReflectively("exopackage",exopackage).setReflectively("preprocessJavaClassesBash",preprocessJavaClassesBash).setReflectively("preprocessJavaClassesDeps",preprocessJavaClassesDeps).setReflectively("proguardJarOverride",proguardJarOverride);
  for (  JavaLibrary buildable : rulesToExcludeFromDex) {
    buildable.appendDetailsToRuleKey(builder);
  }
  return dexSplitMode.appendToRuleKey("dexSplitMode",builder);
}
