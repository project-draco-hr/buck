{
  final ImmutableSetMultimap<JavaLibrary,Path> classpathEntriesMap=getTransitiveClasspathEntries();
  ImmutableSet.Builder<Path> additionalLibraryJarsForProguardBuilder=ImmutableSet.builder();
  for (  JavaLibrary buildRule : rulesToExcludeFromDex) {
    additionalLibraryJarsForProguardBuilder.addAll(classpathEntriesMap.get(buildRule));
  }
  Path proguardDirectory=getPathForProGuardDirectory();
  steps.add(new MakeCleanDirectoryStep(proguardDirectory));
  Path generatedProGuardConfig=proguardDirectory.resolve("proguard.txt");
  GenProGuardConfigStep genProGuardConfig=new GenProGuardConfigStep(aaptPackageResources.getAndroidManifestXml(),resDirectories,generatedProGuardConfig);
  steps.add(genProGuardConfig);
  ImmutableSet.Builder<Path> proguardConfigsBuilder=ImmutableSet.builder();
  proguardConfigsBuilder.addAll(depsProguardConfigs);
  if (proguardConfig.isPresent()) {
    proguardConfigsBuilder.add(proguardConfig.get().resolve());
  }
  final ImmutableMap<Path,Path> inputOutputEntries=FluentIterable.from(classpathEntriesToDex).toMap(new Function<Path,Path>(){
    @Override public Path apply(    Path classpathEntry){
      return getProguardOutputFromInputClasspath(classpathEntry);
    }
  }
);
  ProGuardObfuscateStep.create(proguardJarOverride,generatedProGuardConfig,proguardConfigsBuilder.build(),useAndroidProguardConfigWithOptimizations,optimizationPasses,inputOutputEntries,additionalLibraryJarsForProguardBuilder.build(),proguardDirectory,buildableContext,steps);
  return ImmutableSet.copyOf(inputOutputEntries.values());
}
