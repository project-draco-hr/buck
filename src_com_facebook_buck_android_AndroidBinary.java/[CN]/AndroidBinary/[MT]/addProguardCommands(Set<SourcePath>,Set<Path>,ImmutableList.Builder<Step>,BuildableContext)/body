{
  final ImmutableSetMultimap<JavaLibrary,Path> classpathEntriesMap=getTransitiveClasspathEntries();
  ImmutableSet.Builder<Path> additionalLibraryJarsForProguardBuilder=ImmutableSet.builder();
  for (  JavaLibrary buildRule : rulesToExcludeFromDex) {
    additionalLibraryJarsForProguardBuilder.addAll(classpathEntriesMap.get(buildRule));
  }
  ImmutableSet.Builder<Path> proguardConfigsBuilder=ImmutableSet.builder();
  proguardConfigsBuilder.addAll(depsProguardConfigs);
  if (proguardConfig.isPresent()) {
    proguardConfigsBuilder.add(getResolver().getAbsolutePath(proguardConfig.get()));
  }
  ImmutableMap.Builder<Path,Path> inputOutputEntriesBuilder=ImmutableMap.builder();
  for (  Map.Entry<SourcePath,Path> entry : SymlinkTree.resolveDuplicateRelativePaths(ImmutableSortedSet.copyOf(classpathEntriesToDex),getResolver()).entrySet()) {
    SourcePath sourcePath=entry.getKey();
    Path relativePath=entry.getValue();
    inputOutputEntriesBuilder.put(getResolver().getAbsolutePath(sourcePath),getProguardOutputFromInputClasspath(relativePath));
  }
  ImmutableMap<Path,Path> inputAndOutputEntries=inputOutputEntriesBuilder.build();
  Path proguardConfigDir=enhancementResult.getAaptPackageResources().getPathToGeneratedProguardConfigDir();
  ProGuardObfuscateStep.create(getProjectFilesystem(),proguardJarOverride.isPresent() ? Optional.of(getResolver().getAbsolutePath(proguardJarOverride.get())) : Optional.<Path>absent(),proguardMaxHeapSize,proguardConfigDir.resolve("proguard.txt"),proguardConfigsBuilder.build(),sdkProguardConfig,optimizationPasses,inputAndOutputEntries,additionalLibraryJarsForProguardBuilder.build(),proguardConfigDir,buildableContext,steps);
  return FluentIterable.from(inputAndOutputEntries.values()).transform(SourcePaths.getToBuildTargetSourcePath(getBuildTarget())).toSet();
}
