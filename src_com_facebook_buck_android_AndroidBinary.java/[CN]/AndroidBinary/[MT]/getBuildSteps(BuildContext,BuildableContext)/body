{
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  steps.add(new MkdirStep(getManifestPath().getParent()));
  steps.add(CopyStep.forFile(enhancementResult.getAaptPackageResources().getAndroidManifestXml(),getManifestPath()));
  buildableContext.recordArtifact(getManifestPath());
  Path signedApkPath=getSignedApkPath();
  DexFilesInfo dexFilesInfo=addFinalDxSteps(context,buildableContext,steps);
  AndroidPackageableCollection packageableCollection=enhancementResult.getPackageableCollection();
  ImmutableSet<Path> nativeLibraryDirectories=ImmutableSet.of();
  if (!ExopackageMode.enabledForNativeLibraries(exopackageModes) && enhancementResult.getCopyNativeLibraries().isPresent()) {
    nativeLibraryDirectories=ImmutableSet.of(enhancementResult.getCopyNativeLibraries().get().getPathToNativeLibsDir());
  }
  ImmutableSet<Path> nativeLibraryAsAssetDirectories;
  if ((!packageableCollection.getNativeLibAssetsDirectories().isEmpty()) || (!packageableCollection.getNativeLinkablesAssets().isEmpty() && packageAssetLibraries.or(Boolean.FALSE))) {
    Path pathForNativeLibsAsAssets=getPathForNativeLibsAsAssets();
    final Path libSubdirectory=pathForNativeLibsAsAssets.resolve("assets").resolve("lib");
    steps.add(new MakeCleanDirectoryStep(libSubdirectory));
    for (    SourcePath nativeLibDir : packageableCollection.getNativeLibAssetsDirectories()) {
      CopyNativeLibraries.copyNativeLibrary(getProjectFilesystem(),getResolver().getPath(nativeLibDir),libSubdirectory,cpuFilters,steps);
    }
    if (packageAssetLibraries.or(Boolean.FALSE)) {
      Path cxxNativeLibsSrc=enhancementResult.getCopyNativeLibraries().get().getPathToNativeLibsAssetsDir();
      steps.add(CopyStep.forDirectory(cxxNativeLibsSrc,libSubdirectory,CopyStep.DirectoryMode.CONTENTS_ONLY));
    }
    final List<Path> inputAssetLibraries=Lists.newArrayList();
    final ImmutableList.Builder<Path> outputAssetLibrariesBuilder=ImmutableList.builder();
    if (compressAssetLibraries.or(Boolean.FALSE)) {
      steps.add(new AbstractExecutionStep("write_metadata_for_asset_libraries"){
        @Override public int execute(        ExecutionContext context){
          ProjectFilesystem filesystem=getProjectFilesystem();
          try {
            filesystem.walkRelativeFileTree(libSubdirectory,new SimpleFileVisitor<Path>(){
              @Override public FileVisitResult visitFile(              Path file,              BasicFileAttributes attrs) throws IOException {
                if (!file.toString().endsWith(".so")) {
                  throw new IOException("unexpected file in lib directory");
                }
                inputAssetLibraries.add(file);
                return FileVisitResult.CONTINUE;
              }
            }
);
            for (            Path libPath : inputAssetLibraries) {
              Path tempPath=libPath.resolveSibling(libPath.getFileName() + "~");
              filesystem.move(libPath,tempPath);
              outputAssetLibrariesBuilder.add(tempPath);
            }
            ImmutableList<Path> outputAssetLibraries=outputAssetLibrariesBuilder.build();
            ImmutableList.Builder<String> metadataLines=ImmutableList.builder();
            Path metadataOutput=libSubdirectory.resolve("metadata.txt");
            for (            Path libPath : outputAssetLibraries) {
              Path relativeLibPath=libSubdirectory.relativize(libPath);
              long filesize=filesystem.getFileSize(libPath);
              metadataLines.add(relativeLibPath.toString() + ' ' + filesize);
            }
            ImmutableList<String> metadata=metadataLines.build();
            if (!metadata.isEmpty()) {
              filesystem.writeLinesToPath(metadata,metadataOutput);
            }
          }
 catch (          IOException e) {
            context.logError(e,"Writing metadata for asset libraries failed.");
            return 1;
          }
          return 0;
        }
      }
);
      Path libOutputBlob=libSubdirectory.resolve("libraries.blob");
      steps.add(new ConcatStep(outputAssetLibrariesBuilder,libOutputBlob));
      steps.add(new XzStep(libOutputBlob,libSubdirectory.resolve(SOLID_COMPRESSED_ASSET_LIBRARY_FILENAME)));
    }
    nativeLibraryAsAssetDirectories=ImmutableSet.of(pathForNativeLibsAsAssets);
  }
 else {
    nativeLibraryAsAssetDirectories=ImmutableSet.of();
  }
  ImmutableSet.Builder<Path> zipFiles=ImmutableSet.builder();
  Optional<PackageStringAssets> packageStringAssets=enhancementResult.getPackageStringAssets();
  if (packageStringAssets.isPresent()) {
    final Path pathToStringAssetsZip=packageStringAssets.get().getPathToStringAssetsZip();
    zipFiles.add(pathToStringAssetsZip);
  }
  if (ExopackageMode.enabledForNativeLibraries(exopackageModes)) {
    String fakeNativeLibraryBundle=System.getProperty("buck.native_exopackage_fake_path");
    if (fakeNativeLibraryBundle == null) {
      throw new RuntimeException("fake native bundle not specified in properties");
    }
    zipFiles.add(Paths.get(fakeNativeLibraryBundle));
  }
  ImmutableSet<Path> allAssetDirectories=ImmutableSet.<Path>builder().addAll(nativeLibraryAsAssetDirectories).addAll(dexFilesInfo.secondaryDexDirs).build();
  ApkBuilderStep apkBuilderCommand=new ApkBuilderStep(enhancementResult.getAaptPackageResources().getResourceApkPath(),getSignedApkPath(),dexFilesInfo.primaryDexPath,allAssetDirectories,nativeLibraryDirectories,zipFiles.build(),FluentIterable.from(packageableCollection.getPathsToThirdPartyJars()).transform(getResolver().getPathFunction()).toSet(),keystore.getPathToStore(),keystore.getPathToPropertiesFile(),false);
  steps.add(apkBuilderCommand);
  steps.add(new ZipScrubberStep(signedApkPath));
  Path apkToAlign;
  if (this.isCompressResources()) {
    Path compressedApkPath=getCompressedResourcesApkPath();
    apkToAlign=compressedApkPath;
    RepackZipEntriesStep arscComp=new RepackZipEntriesStep(signedApkPath,compressedApkPath,ImmutableSet.of("resources.arsc"));
    steps.add(arscComp);
  }
 else {
    apkToAlign=signedApkPath;
  }
  Path apkPath=getApkPath();
  ZipalignStep zipalign=new ZipalignStep(apkToAlign,apkPath);
  steps.add(zipalign);
  EchoStep success=new EchoStep(String.format("built APK for %s at %s",getBuildTarget().getFullyQualifiedName(),apkPath));
  steps.add(success);
  buildableContext.recordArtifact(getApkPath());
  return steps.build();
}
