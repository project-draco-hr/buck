{
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  final AndroidTransitiveDependencies transitiveDependencies=findTransitiveDependencies();
  AndroidDexTransitiveDependencies dexTransitiveDependencies=findDexTransitiveDependencies();
  Path signedApkPath=getSignedApkPath();
  DexFilesInfo dexFilesInfo=addFinalDxSteps(context,transitiveDependencies,dexTransitiveDependencies,filteredResourcesProvider.getResDirectories(),buildableContext,steps);
  ImmutableSet<Path> nativeLibraryDirectories;
  if (!transitiveDependencies.nativeLibsDirectories.isEmpty()) {
    Path pathForNativeLibs=getPathForNativeLibs();
    Path libSubdirectory=pathForNativeLibs.resolve("lib");
    steps.add(new MakeCleanDirectoryStep(libSubdirectory));
    for (    Path nativeLibDir : transitiveDependencies.nativeLibsDirectories) {
      copyNativeLibrary(nativeLibDir,libSubdirectory,cpuFilters,steps);
    }
    nativeLibraryDirectories=ImmutableSet.of(libSubdirectory);
  }
 else {
    nativeLibraryDirectories=ImmutableSet.of();
  }
  ImmutableSet.Builder<Path> zipFiles=ImmutableSet.builder();
  zipFiles.addAll(dexFilesInfo.secondaryDexZips);
  if (packageStringAssets.isPresent()) {
    final Path pathToStringAssetsZip=packageStringAssets.get().getPathToStringAssetsZip();
    zipFiles.add(pathToStringAssetsZip);
    steps.add(new AbstractExecutionStep("check_string_assets_zip_exists"){
      @Override public int execute(      ExecutionContext context){
        if (!context.getProjectFilesystem().exists(pathToStringAssetsZip)) {
          context.postEvent(LogEvent.severe("Zip file containing non-english strings was not created: %s",pathToStringAssetsZip));
          return 1;
        }
        return 0;
      }
    }
);
  }
  ApkBuilderStep apkBuilderCommand=new ApkBuilderStep(aaptPackageResources.getResourceApkPath(),getSignedApkPath(),dexFilesInfo.primaryDexPath,ImmutableSet.<String>of(),nativeLibraryDirectories,zipFiles.build(),dexTransitiveDependencies.pathsToThirdPartyJars,keystore.getPathToStore(),keystore.getPathToPropertiesFile(),false);
  steps.add(apkBuilderCommand);
  Path apkToAlign;
  if (this.isCompressResources()) {
    Path compressedApkPath=getCompressedResourcesApkPath();
    apkToAlign=compressedApkPath;
    RepackZipEntriesStep arscComp=new RepackZipEntriesStep(signedApkPath,compressedApkPath,ImmutableSet.of("resources.arsc"));
    steps.add(arscComp);
  }
 else {
    apkToAlign=signedApkPath;
  }
  Path apkPath=getApkPath();
  ZipalignStep zipalign=new ZipalignStep(apkToAlign,apkPath);
  steps.add(zipalign);
  EchoStep success=new EchoStep(String.format("built APK for %s at %s",getBuildTarget().getFullyQualifiedName(),apkPath));
  steps.add(success);
  buildableContext.recordArtifact(getApkPath());
  return steps.build();
}
