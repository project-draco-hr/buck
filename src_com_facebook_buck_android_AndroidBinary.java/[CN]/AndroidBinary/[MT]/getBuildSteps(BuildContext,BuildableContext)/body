{
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  Path signedApkPath=getSignedApkPath();
  DexFilesInfo dexFilesInfo=addFinalDxSteps(context,enhancementResult.filteredResourcesProvider().getResDirectories(),buildableContext,steps);
  ImmutableAndroidPackageableCollection packageableCollection=enhancementResult.packageableCollection();
  ImmutableSet<Path> nativeLibraryDirectories=ImmutableSet.of();
  if (!ExopackageMode.enabledForNativeLibraries(exopackageModes) && enhancementResult.copyNativeLibraries().isPresent()) {
    nativeLibraryDirectories=ImmutableSet.of(enhancementResult.copyNativeLibraries().get().getPathToNativeLibsDir());
  }
  ImmutableSet<Path> nativeLibraryAsAssetDirectories;
  if (!packageableCollection.nativeLibAssetsDirectories().isEmpty()) {
    Path pathForNativeLibsAsAssets=getPathForNativeLibsAsAssets();
    Path libSubdirectory=pathForNativeLibsAsAssets.resolve("assets").resolve("lib");
    steps.add(new MakeCleanDirectoryStep(libSubdirectory));
    for (    Path nativeLibDir : packageableCollection.nativeLibAssetsDirectories()) {
      CopyNativeLibraries.copyNativeLibrary(nativeLibDir,libSubdirectory,cpuFilters,steps);
    }
    nativeLibraryAsAssetDirectories=ImmutableSet.of(pathForNativeLibsAsAssets);
  }
 else {
    nativeLibraryAsAssetDirectories=ImmutableSet.of();
  }
  ImmutableSet.Builder<Path> zipFiles=ImmutableSet.builder();
  Optional<PackageStringAssets> packageStringAssets=enhancementResult.packageStringAssets();
  if (packageStringAssets.isPresent()) {
    final Path pathToStringAssetsZip=packageStringAssets.get().getPathToStringAssetsZip();
    zipFiles.add(pathToStringAssetsZip);
  }
  ImmutableSet<Path> allAssetDirectories=ImmutableSet.<Path>builder().addAll(nativeLibraryAsAssetDirectories).addAll(dexFilesInfo.secondaryDexDirs).build();
  ApkBuilderStep apkBuilderCommand=new ApkBuilderStep(enhancementResult.aaptPackageResources().getResourceApkPath(),getSignedApkPath(),dexFilesInfo.primaryDexPath,allAssetDirectories,nativeLibraryDirectories,zipFiles.build(),packageableCollection.pathsToThirdPartyJars(),keystore.getPathToStore(),keystore.getPathToPropertiesFile(),false);
  steps.add(apkBuilderCommand);
  Path apkToAlign;
  if (this.isCompressResources()) {
    Path compressedApkPath=getCompressedResourcesApkPath();
    apkToAlign=compressedApkPath;
    RepackZipEntriesStep arscComp=new RepackZipEntriesStep(signedApkPath,compressedApkPath,ImmutableSet.of("resources.arsc"));
    steps.add(arscComp);
  }
 else {
    apkToAlign=signedApkPath;
  }
  Path apkPath=getApkPath();
  ZipalignStep zipalign=new ZipalignStep(apkToAlign,apkPath);
  steps.add(zipalign);
  EchoStep success=new EchoStep(String.format("built APK for %s at %s",getBuildTarget().getFullyQualifiedName(),apkPath));
  steps.add(success);
  buildableContext.recordArtifact(getApkPath());
  return steps.build();
}
