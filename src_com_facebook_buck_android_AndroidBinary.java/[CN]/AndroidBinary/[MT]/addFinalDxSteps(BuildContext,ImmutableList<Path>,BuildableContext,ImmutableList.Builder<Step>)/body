{
  AndroidPackageableCollection packageableCollection=enhancementResult.getPackageableCollection();
  ImmutableSet<Path> classpathEntriesToDex;
  if (preprocessJavaClassesBash.isPresent()) {
    final Path preprocessJavaClassesInDir=getBinPath("java_classes_preprocess_in_%s");
    final Path preprocessJavaClassesOutDir=getBinPath("java_classes_preprocess_out_%s");
    steps.add(new MakeCleanDirectoryStep(preprocessJavaClassesInDir));
    steps.add(new MakeCleanDirectoryStep(preprocessJavaClassesOutDir));
    steps.add(new SymlinkFilesIntoDirectoryStep(context.getProjectRoot(),enhancementResult.getClasspathEntriesToDex(),preprocessJavaClassesInDir));
    classpathEntriesToDex=FluentIterable.from(enhancementResult.getClasspathEntriesToDex()).transform(new Function<Path,Path>(){
      @Override public Path apply(      Path classpathEntry){
        return preprocessJavaClassesOutDir.resolve(classpathEntry);
      }
    }
).toSet();
    AbstractGenruleStep.CommandString commandString=new AbstractGenruleStep.CommandString(Optional.<String>absent(),preprocessJavaClassesBash,Optional.<String>absent());
    steps.add(new AbstractGenruleStep(this.getBuildTarget(),commandString,context.getProjectRoot().resolve(preprocessJavaClassesInDir).toFile()){
      @Override protected void addEnvironmentVariables(      ExecutionContext context,      ImmutableMap.Builder<String,String> environmentVariablesBuilder){
        Function<Path,Path> aboslutifier=context.getProjectFilesystem().getAbsolutifier();
        environmentVariablesBuilder.put("IN_JARS_DIR",aboslutifier.apply(preprocessJavaClassesInDir).toString());
        environmentVariablesBuilder.put("OUT_JARS_DIR",aboslutifier.apply(preprocessJavaClassesOutDir).toString());
        Optional<AndroidPlatformTarget> platformTarget=context.getAndroidPlatformTargetOptional();
        if (!platformTarget.isPresent()) {
          return;
        }
        String bootclasspath=Joiner.on(':').join(Iterables.transform(platformTarget.get().getBootclasspathEntries(),aboslutifier));
        environmentVariablesBuilder.put("ANDROID_BOOTCLASSPATH",bootclasspath);
      }
    }
);
  }
 else {
    classpathEntriesToDex=enhancementResult.getClasspathEntriesToDex();
  }
  if (packageType.isBuildWithObfuscation()) {
    classpathEntriesToDex=addProguardCommands(classpathEntriesToDex,packageableCollection.proguardConfigs,steps,resDirectories,buildableContext);
  }
  ImmutableSet.Builder<Path> secondaryDexDirectoriesBuilder=ImmutableSet.builder();
  Optional<PreDexMerge> preDexMerge=enhancementResult.getPreDexMerge();
  if (!preDexMerge.isPresent()) {
    steps.add(new MkdirStep(primaryDexPath.getParent()));
    addDexingSteps(classpathEntriesToDex,packageableCollection.classNamesToHashesSupplier,secondaryDexDirectoriesBuilder,steps,primaryDexPath);
  }
 else   if (!exopackage) {
    secondaryDexDirectoriesBuilder.addAll(preDexMerge.get().getSecondaryDexDirectories());
  }
  return new DexFilesInfo(primaryDexPath,secondaryDexDirectoriesBuilder.build());
}
