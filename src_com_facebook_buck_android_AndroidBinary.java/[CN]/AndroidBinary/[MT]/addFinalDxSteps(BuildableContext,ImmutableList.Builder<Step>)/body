{
  AndroidPackageableCollection packageableCollection=enhancementResult.getPackageableCollection();
  ImmutableSet<Path> classpathEntriesToDex=FluentIterable.from(enhancementResult.getClasspathEntriesToDex()).transform(getResolver().deprecatedPathFunction()).append(Collections.singleton(enhancementResult.getCompiledUberRDotJava().getPathToOutput())).toSet();
  if (preprocessJavaClassesBash.isPresent()) {
    final Path preprocessJavaClassesInDir=getBinPath("java_classes_preprocess_in_%s");
    final Path preprocessJavaClassesOutDir=getBinPath("java_classes_preprocess_out_%s");
    steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),preprocessJavaClassesInDir));
    steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),preprocessJavaClassesOutDir));
    steps.add(new SymlinkFilesIntoDirectoryStep(getProjectFilesystem(),getProjectFilesystem().getRootPath(),classpathEntriesToDex,preprocessJavaClassesInDir));
    classpathEntriesToDex=FluentIterable.from(classpathEntriesToDex).transform(new Function<Path,Path>(){
      @Override public Path apply(      Path classpathEntry){
        return preprocessJavaClassesOutDir.resolve(classpathEntry);
      }
    }
).toSet();
    AbstractGenruleStep.CommandString commandString=new AbstractGenruleStep.CommandString(Optional.<String>absent(),preprocessJavaClassesBash.transform(macroExpander),Optional.<String>absent());
    steps.add(new AbstractGenruleStep(this.getBuildTarget(),commandString,getProjectFilesystem().getRootPath().resolve(preprocessJavaClassesInDir)){
      @Override protected void addEnvironmentVariables(      ExecutionContext context,      ImmutableMap.Builder<String,String> environmentVariablesBuilder){
        Function<Path,Path> absolutifier=getProjectFilesystem().getAbsolutifier();
        environmentVariablesBuilder.put("IN_JARS_DIR",absolutifier.apply(preprocessJavaClassesInDir).toString());
        environmentVariablesBuilder.put("OUT_JARS_DIR",absolutifier.apply(preprocessJavaClassesOutDir).toString());
        AndroidPlatformTarget platformTarget=context.getAndroidPlatformTarget();
        String bootclasspath=Joiner.on(':').join(Iterables.transform(platformTarget.getBootclasspathEntries(),absolutifier));
        environmentVariablesBuilder.put("ANDROID_BOOTCLASSPATH",bootclasspath);
      }
    }
);
  }
  if (packageType.isBuildWithObfuscation()) {
    classpathEntriesToDex=addProguardCommands(classpathEntriesToDex,ImmutableSet.copyOf(getResolver().deprecatedAllPaths(packageableCollection.getProguardConfigs())),steps,buildableContext);
  }
  Supplier<Map<String,HashCode>> classNamesToHashesSupplier;
  boolean classFilesHaveChanged=preprocessJavaClassesBash.isPresent() || packageType.isBuildWithObfuscation();
  if (classFilesHaveChanged) {
    classNamesToHashesSupplier=addAccumulateClassNamesStep(classpathEntriesToDex,steps);
  }
 else {
    classNamesToHashesSupplier=packageableCollection.getClassNamesToHashesSupplier();
  }
  ImmutableSet.Builder<Path> secondaryDexDirectoriesBuilder=ImmutableSet.builder();
  Optional<PreDexMerge> preDexMerge=enhancementResult.getPreDexMerge();
  if (!preDexMerge.isPresent()) {
    steps.add(new MkdirStep(getProjectFilesystem(),primaryDexPath.getParent()));
    addDexingSteps(classpathEntriesToDex,classNamesToHashesSupplier,secondaryDexDirectoriesBuilder,steps,primaryDexPath,dexReorderToolFile,dexReorderDataDumpFile);
  }
 else   if (!ExopackageMode.enabledForSecondaryDexes(exopackageModes)) {
    secondaryDexDirectoriesBuilder.addAll(preDexMerge.get().getSecondaryDexDirectories());
  }
  return new DexFilesInfo(primaryDexPath,secondaryDexDirectoriesBuilder.build());
}
