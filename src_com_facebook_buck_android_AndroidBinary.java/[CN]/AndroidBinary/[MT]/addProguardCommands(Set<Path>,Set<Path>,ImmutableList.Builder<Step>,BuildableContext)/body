{
  ImmutableSet.Builder<Path> additionalLibraryJarsForProguardBuilder=ImmutableSet.builder();
  for (  JavaLibrary buildRule : rulesToExcludeFromDex) {
    additionalLibraryJarsForProguardBuilder.addAll(buildRule.getImmediateClasspaths());
  }
  ImmutableSet.Builder<Path> proguardConfigsBuilder=ImmutableSet.builder();
  proguardConfigsBuilder.addAll(depsProguardConfigs);
  if (proguardConfig.isPresent()) {
    proguardConfigsBuilder.add(getResolver().getAbsolutePath(proguardConfig.get()));
  }
  final ImmutableMap<Path,Path> inputOutputEntries=FluentIterable.from(classpathEntriesToDex).toMap(new Function<Path,Path>(){
    @Override public Path apply(    Path classpathEntry){
      return getProguardOutputFromInputClasspath(classpathEntry);
    }
  }
);
  Path proguardConfigDir=enhancementResult.getAaptPackageResources().getPathToGeneratedProguardConfigDir();
  ProGuardObfuscateStep.create(javaRuntimeLauncher,getProjectFilesystem(),proguardJarOverride.isPresent() ? Optional.of(getResolver().getAbsolutePath(proguardJarOverride.get())) : Optional.<Path>absent(),proguardMaxHeapSize,proguardAgentPath,proguardConfigDir.resolve("proguard.txt"),proguardConfigsBuilder.build(),sdkProguardConfig,optimizationPasses,inputOutputEntries,additionalLibraryJarsForProguardBuilder.build(),proguardConfigDir,buildableContext,steps);
  return ImmutableSet.copyOf(inputOutputEntries.values());
}
