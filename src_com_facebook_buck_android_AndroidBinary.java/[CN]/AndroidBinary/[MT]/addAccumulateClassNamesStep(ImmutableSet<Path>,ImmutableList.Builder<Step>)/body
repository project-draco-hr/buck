{
  final ImmutableMap.Builder<String,HashCode> builder=ImmutableMap.builder();
  steps.add(new AbstractExecutionStep("collect_all_class_names"){
    @Override public StepExecutionResult execute(    ExecutionContext context){
      for (      Path path : classPathEntriesToDex) {
        Optional<ImmutableSortedMap<String,HashCode>> hashes=AccumulateClassNamesStep.calculateClassHashes(context,getProjectFilesystem(),path);
        if (!hashes.isPresent()) {
          return StepExecutionResult.ERROR;
        }
        builder.putAll(hashes.get());
      }
      return StepExecutionResult.SUCCESS;
    }
  }
);
  return Suppliers.memoize(new Supplier<Map<String,HashCode>>(){
    @Override public Map<String,HashCode> get(){
      return builder.build();
    }
  }
);
}
