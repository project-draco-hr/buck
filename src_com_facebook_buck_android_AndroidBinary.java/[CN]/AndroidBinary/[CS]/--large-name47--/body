{
  super(params,resolver);
  this.proguardJarOverride=Preconditions.checkNotNull(proguardJarOverride);
  this.manifest=Preconditions.checkNotNull(manifest);
  this.target=Preconditions.checkNotNull(target);
  this.keystore=Preconditions.checkNotNull(keystore);
  this.packageType=Preconditions.checkNotNull(packageType);
  this.dexSplitMode=Preconditions.checkNotNull(dexSplitMode);
  this.buildTargetsToExcludeFromDex=ImmutableSet.copyOf(Preconditions.checkNotNull(buildTargetsToExcludeFromDex));
  this.sdkProguardConfig=sdkProguardConfig;
  this.optimizationPasses=Preconditions.checkNotNull(proguardOptimizationPasses);
  this.proguardConfig=Preconditions.checkNotNull(proguardConfig);
  this.resourceCompressionMode=Preconditions.checkNotNull(resourceCompressionMode);
  this.cpuFilters=ImmutableSet.copyOf(cpuFilters);
  this.resourceFilter=Preconditions.checkNotNull(resourceFilter);
  this.exopackage=exopackage;
  this.preprocessJavaClassesDeps=ImmutableSortedSet.copyOf(preprocessJavaClassesDeps);
  this.preprocessJavaClassesBash=Preconditions.checkNotNull(preprocessJavaClassesBash);
  this.rulesToExcludeFromDex=Preconditions.checkNotNull(rulesToExcludeFromDex);
  this.enhancementResult=Preconditions.checkNotNull(enhancementResult);
  this.primaryDexPath=getPrimaryDexPath(params.getBuildTarget());
  if (exopackage) {
    Preconditions.checkArgument(enhancementResult.getPreDexMerge().isPresent(),"%s specified exopackage without pre-dexing, which is invalid.",getBuildTarget());
    Preconditions.checkArgument(dexSplitMode.getDexStore() == DexStore.JAR,"%s specified exopackage with secondary dex mode %s, " + "which is invalid.  (Only JAR is allowed.)",getBuildTarget(),dexSplitMode.getDexStore());
    Preconditions.checkArgument(enhancementResult.getComputeExopackageDepsAbi().isPresent(),"computeExopackageDepsAbi must be set if exopackage is true.");
  }
}
