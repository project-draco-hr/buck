{
  super(params,resolver);
  this.proguardJarOverride=proguardJarOverride;
  this.proguardMaxHeapSize=proguardMaxHeapSize;
  this.manifest=manifest;
  this.keystore=keystore;
  this.packageType=packageType;
  this.dexSplitMode=dexSplitMode;
  this.buildTargetsToExcludeFromDex=ImmutableSet.copyOf(buildTargetsToExcludeFromDex);
  this.sdkProguardConfig=sdkProguardConfig;
  this.optimizationPasses=proguardOptimizationPasses;
  this.proguardConfig=proguardConfig;
  this.resourceCompressionMode=resourceCompressionMode;
  this.cpuFilters=ImmutableSet.copyOf(cpuFilters);
  this.resourceFilter=resourceFilter;
  this.exopackageModes=exopackageModes;
  this.preprocessJavaClassesDeps=ImmutableSortedSet.copyOf(preprocessJavaClassesDeps);
  this.macroExpander=macroExpander;
  this.preprocessJavaClassesBash=preprocessJavaClassesBash;
  this.rulesToExcludeFromDex=rulesToExcludeFromDex;
  this.enhancementResult=enhancementResult;
  this.primaryDexPath=getPrimaryDexPath(params.getBuildTarget());
  if (ExopackageMode.enabledForSecondaryDexes(exopackageModes)) {
    Preconditions.checkArgument(enhancementResult.getPreDexMerge().isPresent(),"%s specified exopackage without pre-dexing, which is invalid.",getBuildTarget());
    Preconditions.checkArgument(dexSplitMode.getDexStore() == DexStore.JAR,"%s specified exopackage with secondary dex mode %s, " + "which is invalid.  (Only JAR is allowed.)",getBuildTarget(),dexSplitMode.getDexStore());
    Preconditions.checkArgument(enhancementResult.getComputeExopackageDepsAbi().isPresent(),"computeExopackageDepsAbi must be set if exopackage is true.");
  }
}
