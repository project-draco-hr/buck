{
  BuildRuleParams buildRuleParams=new BuildRuleParams(buildTarget,ImmutableSortedSet.<BuildRule>of(),ImmutableSet.<BuildTargetPattern>of(),Functions.<String>identity());
  TestAbstractCachingBuildRule buildRule=new TestAbstractCachingBuildRule(buildRuleParams);
  EventBus eventBus=createMock(EventBus.class);
  eventBus.post(BuildRuleEvent.started(buildRule));
  eventBus.post(BuildRuleEvent.finished(buildRule,BuildRuleStatus.SUCCESS,CacheResult.HIT));
  BuildContext buildContext=createMock(BuildContext.class);
  expect(buildContext.getExecutor()).andReturn(MoreExecutors.sameThreadExecutor());
  expect(buildContext.getEventBus()).andReturn(eventBus).anyTimes();
  replayAll();
  ListenableFuture<BuildRuleSuccess> result=buildRule.build(buildContext);
  assertTrue("We expect build() to be synchronous in this case, " + "so the future should already be resolved.",MoreFutures.isSuccess(result));
  BuildRuleSuccess success=result.get();
  assertEquals(BuildRuleSuccess.Type.MATCHING_DEPS_ABI_AND_RULE_KEY_NO_DEPS,success.getType());
  verifyAll();
}
