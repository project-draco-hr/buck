{
  Comparator<BuildRule> comparator=RetainOrderComparator.createComparator(deps);
  ImmutableSortedSet<BuildRule> sortedDeps=ImmutableSortedSet.copyOf(comparator,deps);
  BuildRuleParams buildRuleParams=new BuildRuleParams(buildTarget,sortedDeps,visibilityPatterns);
  return new AbstractCachingBuildRule(buildRuleParams){
    @Override public BuildRuleType getType(){
      throw new IllegalStateException("This method should not be called");
    }
    @Override protected Iterable<String> getInputsToCompareToOutput(    BuildContext context){
      List<String> inputs=Lists.newArrayList();
      for (      BuildTarget inputTarget : inputTargets) {
        inputs.add(inputTarget.getBasePath());
      }
      return inputs;
    }
    @Override protected List<Command> buildInternal(    BuildContext context) throws IOException {
      throw new IllegalStateException("This method should not be called");
    }
  }
;
}
