{
  Comparator<BuildRule> comparator=RetainOrderComparator.createComparator(deps);
  ImmutableSortedSet<BuildRule> sortedDeps=ImmutableSortedSet.copyOf(comparator,deps);
  CachingBuildRuleParams cachingBuildRuleParams=new CachingBuildRuleParams(buildTarget,sortedDeps,visibilityPatterns,artifactCache);
  return new AbstractCachingBuildRule(cachingBuildRuleParams){
    private Iterable<InputRule> inputs=inputRules;
    @Override public BuildRuleType getType(){
      return BuildRuleType.JAVA_LIBRARY;
    }
    @Override public Iterable<InputRule> getInputs(){
      return inputs;
    }
    @Override public File getOutput(){
      return output;
    }
    @Override Optional<RuleKey> getRuleKeyOnDisk(    ProjectFilesystem projectFilesystem){
      return ruleKeyOnDisk;
    }
    @Override protected List<Step> buildInternal(    BuildContext context) throws IOException {
      return buildSteps;
    }
    @Override protected Iterable<String> getInputsToCompareToOutput(    BuildContext context){
      throw new UnsupportedOperationException();
    }
  }
;
}
