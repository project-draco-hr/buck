{
  ProjectFilesystem projectFilesystem=createMock(ProjectFilesystem.class);
  expect(projectFilesystem.exists(BIN_DIR + "/src/com/facebook/orca/.success/orca")).andReturn(true);
  expect(projectFilesystem.isMatchingFileContents(isA(Iterable.class),eq(BIN_DIR + "/src/com/facebook/orca/.success/orca"))).andAnswer(new IAnswer<Boolean>(){
    @Override public Boolean answer() throws Throwable {
      ImmutableList<String> arg0=ImmutableList.<String>builder().addAll((Iterable<String>)getCurrentArguments()[0]).build();
      assertTrue(inputTargets.size() == arg0.size());
      for (int i=0; i < inputTargets.size(); i++) {
        String[] tuple=arg0.get(i).split(" ",3);
        assertTrue(tuple[2].equals(inputTargets.get(i).getFullyQualifiedName()));
      }
      return isCached;
    }
  }
);
  return projectFilesystem;
}
