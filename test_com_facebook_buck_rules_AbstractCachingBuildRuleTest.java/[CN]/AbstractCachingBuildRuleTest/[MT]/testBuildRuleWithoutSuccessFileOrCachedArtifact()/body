{
  BuildRule dep=createMock(BuildRule.class);
  expect(dep.isVisibleTo(buildTarget)).andReturn(true);
  ArtifactCache artifactCache=createMock(ArtifactCache.class);
  replayAll();
  String pathToOutputFile="some_file";
  File outputFile=new File(pathToOutputFile);
  List<Step> buildSteps=Lists.newArrayList();
  AbstractCachingBuildRule cachingRule=createRule(ImmutableSet.of(dep),ImmutableList.<InputRule>of(FakeInputRule.createWithRuleKey("/dev/null",new RuleKey("ae8c0f860a0ecad94ecede79b69460434eddbfbc"))),buildSteps,Optional.<RuleKey>absent(),pathToOutputFile);
  verifyAll();
  resetAll();
  String expectedRuleKeyHash=Hashing.sha1().newHasher().putBytes(RuleKey.Builder.buckVersionUID.getBytes()).putByte(RuleKey.Builder.SEPARATOR).putByte(RuleKey.Builder.SEPARATOR).putBytes("name".getBytes()).putByte(RuleKey.Builder.SEPARATOR).putBytes(cachingRule.getFullyQualifiedName().getBytes()).putByte(RuleKey.Builder.SEPARATOR).putByte(RuleKey.Builder.SEPARATOR).putBytes("buck.type".getBytes()).putByte(RuleKey.Builder.SEPARATOR).putBytes("java_library".getBytes()).putByte(RuleKey.Builder.SEPARATOR).putByte(RuleKey.Builder.SEPARATOR).putBytes("deps".getBytes()).putByte(RuleKey.Builder.SEPARATOR).putBytes("19d2558a6bd3a34fb3f95412de9da27ed32fe208".getBytes()).putByte(RuleKey.Builder.SEPARATOR).putByte(RuleKey.Builder.SEPARATOR).putByte(RuleKey.Builder.SEPARATOR).putBytes("buck.inputs".getBytes()).putByte(RuleKey.Builder.SEPARATOR).putBytes("ae8c0f860a0ecad94ecede79b69460434eddbfbc".getBytes()).putByte(RuleKey.Builder.SEPARATOR).putByte(RuleKey.Builder.SEPARATOR).hash().toString();
  EventBus eventBus=createMock(EventBus.class);
  eventBus.post(BuildRuleEvent.started(cachingRule));
  eventBus.post(BuildRuleEvent.finished(cachingRule,BuildRuleStatus.SUCCESS,CacheResult.MISS));
  BuckEventBus buckEventBus=new BuckEventBus(eventBus);
  BuildContext context=createMock(BuildContext.class);
  expect(context.getExecutor()).andReturn(MoreExecutors.sameThreadExecutor());
  expect(context.getEventBus()).andReturn(buckEventBus).times(1);
  context.logBuildInfo("[BUILDING %s]","//src/com/facebook/orca:orca");
  StepRunner stepRunner=createMock(StepRunner.class);
  expect(context.getStepRunner()).andReturn(stepRunner);
  ProjectFilesystem projectFilesystem=createMock(ProjectFilesystem.class);
  expect(context.getProjectFilesystem()).andReturn(projectFilesystem).times(2);
  String pathToSuccessFile=cachingRule.getPathToSuccessFile();
  projectFilesystem.createParentDirs(pathToSuccessFile);
  Capture<Iterable<String>> linesCapture=new Capture<Iterable<String>>();
  projectFilesystem.writeLinesToPath(capture(linesCapture),eq(pathToSuccessFile));
  expect(projectFilesystem.getFileForRelativePath(pathToOutputFile)).andReturn(outputFile).times(2);
  RuleKey expectedRuleKey=new RuleKey(expectedRuleKeyHash);
  expect(artifactCache.fetch(expectedRuleKey,outputFile)).andReturn(false);
  artifactCache.store(expectedRuleKey,outputFile);
  expect(context.getArtifactCache()).andReturn(artifactCache).times(2);
  expect(dep.build(context)).andReturn(Futures.immediateFuture(new BuildRuleSuccess(dep,BuildRuleSuccess.Type.BUILT_LOCALLY)));
  expect(dep.getRuleKey()).andReturn(new RuleKey("19d2558a6bd3a34fb3f95412de9da27ed32fe208"));
  Step buildStep=createMock(Step.class);
  buildSteps.add(buildStep);
  stepRunner.runStepForBuildTarget(buildStep,buildTarget);
  replayAll();
  BuildRuleSuccess result=cachingRule.build(context).get();
  assertEquals(BuildRuleSuccess.Type.BUILT_LOCALLY,result.getType());
  verifyAll();
  String firstLineInSuccessFile=Iterables.getFirst(linesCapture.getValue(),null);
  assertEquals(expectedRuleKeyHash,firstLineInSuccessFile);
}
