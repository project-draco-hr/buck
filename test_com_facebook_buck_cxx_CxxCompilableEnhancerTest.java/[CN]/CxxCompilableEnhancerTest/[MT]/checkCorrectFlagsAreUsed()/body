{
  BuildRuleResolver buildRuleResolver=new BuildRuleResolver();
  SourcePathResolver sourcePathResolver=new SourcePathResolver(buildRuleResolver);
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  ProjectFilesystem filesystem=new AllExistingProjectFilesystem();
  Joiner space=Joiner.on(" ");
  ImmutableList<String> explicitCompilerFlags=ImmutableList.of("-explicit-compilerflag");
  ImmutableList<String> explicitCppflags=ImmutableList.of("-explicit-cppflag");
  ImmutableList<String> explicitCxxppflags=ImmutableList.of("-explicit-cxxppflag");
  CxxPreprocessorInput cxxPreprocessorInput=CxxPreprocessorInput.builder().setCppflags(explicitCppflags).setCxxppflags(explicitCxxppflags).build();
  SourcePath as=new TestSourcePath("as");
  ImmutableList<String> asflags=ImmutableList.of("-asflag","-asflag");
  ImmutableList<String> asppflags=ImmutableList.of("-asppflag","-asppflag");
  SourcePath cc=new TestSourcePath("cc");
  ImmutableList<String> cflags=ImmutableList.of("-cflag","-cflag");
  SourcePath cxx=new TestSourcePath("cxx");
  ImmutableList<String> cxxflags=ImmutableList.of("-cxxflag","-cxxflag");
  SourcePath cpp=new TestSourcePath("cpp");
  ImmutableList<String> cppflags=ImmutableList.of("-cppflag","-cppflag");
  SourcePath cxxpp=new TestSourcePath("cxxpp");
  ImmutableList<String> cxxppflags=ImmutableList.of("-cxxppflag","-cxxppflag");
  FakeBuckConfig buckConfig=new FakeBuckConfig(ImmutableMap.<String,Map<String,String>>of("cxx",ImmutableMap.<String,String>builder().put("as",sourcePathResolver.getPath(as).toString()).put("asflags",space.join(asflags)).put("asppflags",space.join(asppflags)).put("cc",sourcePathResolver.getPath(cc).toString()).put("cflags",space.join(cflags)).put("cxx",sourcePathResolver.getPath(cxx).toString()).put("cxxflags",space.join(cxxflags)).put("cpp",sourcePathResolver.getPath(cpp).toString()).put("cppflags",space.join(cppflags)).put("cxxpp",sourcePathResolver.getPath(cxxpp).toString()).put("cxxppflags",space.join(cxxppflags)).build()),filesystem);
  DefaultCxxPlatform platform=new DefaultCxxPlatform(buckConfig);
  String cSourceName="test.c";
  CxxSource cSource=new CxxSource(CxxSource.Type.C,new TestSourcePath(cSourceName));
  CxxCompile cCompile=CxxCompilableEnhancer.createCompileBuildRule(params,buildRuleResolver,platform,cxxPreprocessorInput,explicitCompilerFlags,false,cSourceName,cSource);
  assertContains(cCompile.getFlags(),explicitCppflags);
  assertContains(cCompile.getFlags(),cppflags);
  assertContains(cCompile.getFlags(),explicitCompilerFlags);
  assertContains(cCompile.getFlags(),cflags);
  assertContains(cCompile.getFlags(),asflags);
  String cxxSourceName="test.cpp";
  CxxSource cxxSource=new CxxSource(CxxSource.Type.CXX,new TestSourcePath(cxxSourceName));
  CxxCompile cxxCompile=CxxCompilableEnhancer.createCompileBuildRule(params,buildRuleResolver,platform,cxxPreprocessorInput,explicitCompilerFlags,false,cxxSourceName,cxxSource);
  assertContains(cxxCompile.getFlags(),explicitCxxppflags);
  assertContains(cxxCompile.getFlags(),cxxppflags);
  assertContains(cxxCompile.getFlags(),explicitCompilerFlags);
  assertContains(cxxCompile.getFlags(),cxxflags);
  assertContains(cxxCompile.getFlags(),asflags);
  String cCppOutputSourceName="test.i";
  CxxSource cCppOutputSource=new CxxSource(CxxSource.Type.C_CPP_OUTPUT,new TestSourcePath(cCppOutputSourceName));
  CxxCompile cCppOutputCompile=CxxCompilableEnhancer.createCompileBuildRule(params,buildRuleResolver,platform,cxxPreprocessorInput,explicitCompilerFlags,false,cCppOutputSourceName,cCppOutputSource);
  assertNotContains(cCppOutputCompile.getFlags(),explicitCppflags);
  assertNotContains(cCppOutputCompile.getFlags(),cppflags);
  assertContains(cCppOutputCompile.getFlags(),explicitCompilerFlags);
  assertContains(cCppOutputCompile.getFlags(),cflags);
  assertContains(cCppOutputCompile.getFlags(),asflags);
  String cxxCppOutputSourceName="test.ii";
  CxxSource cxxCppOutputSource=new CxxSource(CxxSource.Type.CXX_CPP_OUTPUT,new TestSourcePath(cxxCppOutputSourceName));
  CxxCompile cxxCppOutputCompile=CxxCompilableEnhancer.createCompileBuildRule(params,buildRuleResolver,platform,cxxPreprocessorInput,explicitCompilerFlags,false,cxxCppOutputSourceName,cxxCppOutputSource);
  assertNotContains(cxxCppOutputCompile.getFlags(),explicitCxxppflags);
  assertNotContains(cxxCppOutputCompile.getFlags(),cxxppflags);
  assertContains(cxxCppOutputCompile.getFlags(),explicitCompilerFlags);
  assertContains(cxxCppOutputCompile.getFlags(),cxxflags);
  assertContains(cxxCppOutputCompile.getFlags(),asflags);
  String assemblerSourceName="test.s";
  CxxSource assemblerSource=new CxxSource(CxxSource.Type.ASSEMBLER,new TestSourcePath(assemblerSourceName));
  CxxCompile assemblerCompile=CxxCompilableEnhancer.createCompileBuildRule(params,buildRuleResolver,platform,cxxPreprocessorInput,explicitCompilerFlags,false,assemblerSourceName,assemblerSource);
  assertNotContains(assemblerCompile.getFlags(),asppflags);
  assertContains(assemblerCompile.getFlags(),asflags);
  String assemblerWithCppSourceName="test.S";
  CxxSource assemblerWithCppSource=new CxxSource(CxxSource.Type.ASSEMBLER_WITH_CPP,new TestSourcePath(assemblerWithCppSourceName));
  CxxCompile assemblerWithCppCompile=CxxCompilableEnhancer.createCompileBuildRule(params,buildRuleResolver,platform,cxxPreprocessorInput,explicitCompilerFlags,false,assemblerWithCppSourceName,assemblerWithCppSource);
  assertContains(assemblerWithCppCompile.getFlags(),asppflags);
  assertContains(assemblerWithCppCompile.getFlags(),asflags);
}
