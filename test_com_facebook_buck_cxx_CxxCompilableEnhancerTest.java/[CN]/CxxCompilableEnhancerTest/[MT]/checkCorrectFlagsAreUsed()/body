{
  BuildRuleResolver buildRuleResolver=new BuildRuleResolver();
  SourcePathResolver sourcePathResolver=new SourcePathResolver(buildRuleResolver);
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  ProjectFilesystem filesystem=new AllExistingProjectFilesystem();
  Joiner space=Joiner.on(" ");
  ImmutableList<String> explicitCompilerFlags=ImmutableList.of("-explicit-compilerflag");
  SourcePath as=new TestSourcePath("as");
  ImmutableList<String> asflags=ImmutableList.of("-asflag","-asflag");
  SourcePath cc=new TestSourcePath("cc");
  ImmutableList<String> cflags=ImmutableList.of("-cflag","-cflag");
  SourcePath cxx=new TestSourcePath("cxx");
  ImmutableList<String> cxxflags=ImmutableList.of("-cxxflag","-cxxflag");
  FakeBuckConfig buckConfig=new FakeBuckConfig(ImmutableMap.<String,Map<String,String>>of("cxx",ImmutableMap.<String,String>builder().put("as",sourcePathResolver.getPath(as).toString()).put("asflags",space.join(asflags)).put("cc",sourcePathResolver.getPath(cc).toString()).put("cflags",space.join(cflags)).put("cxx",sourcePathResolver.getPath(cxx).toString()).put("cxxflags",space.join(cxxflags)).build()),filesystem);
  DefaultCxxPlatform platform=new DefaultCxxPlatform(buckConfig);
  String cSourceName="test.i";
  CxxSource cSource=ImmutableCxxSource.of(CxxSource.Type.C_CPP_OUTPUT,new TestSourcePath(cSourceName));
  CxxCompile cCompile=CxxCompilableEnhancer.createCompileBuildRule(params,buildRuleResolver,platform,explicitCompilerFlags,false,cSourceName,cSource);
  assertContains(cCompile.getFlags(),explicitCompilerFlags);
  assertContains(cCompile.getFlags(),cflags);
  assertContains(cCompile.getFlags(),asflags);
  String cxxSourceName="test.ii";
  CxxSource cxxSource=ImmutableCxxSource.of(CxxSource.Type.CXX_CPP_OUTPUT,new TestSourcePath(cxxSourceName));
  CxxCompile cxxCompile=CxxCompilableEnhancer.createCompileBuildRule(params,buildRuleResolver,platform,explicitCompilerFlags,false,cxxSourceName,cxxSource);
  assertContains(cxxCompile.getFlags(),explicitCompilerFlags);
  assertContains(cxxCompile.getFlags(),cxxflags);
  assertContains(cxxCompile.getFlags(),asflags);
  String cCppOutputSourceName="test.i";
  CxxSource cCppOutputSource=ImmutableCxxSource.of(CxxSource.Type.C_CPP_OUTPUT,new TestSourcePath(cCppOutputSourceName));
  CxxCompile cCppOutputCompile=CxxCompilableEnhancer.createCompileBuildRule(params,buildRuleResolver,platform,explicitCompilerFlags,false,cCppOutputSourceName,cCppOutputSource);
  assertContains(cCppOutputCompile.getFlags(),explicitCompilerFlags);
  assertContains(cCppOutputCompile.getFlags(),cflags);
  assertContains(cCppOutputCompile.getFlags(),asflags);
  String assemblerSourceName="test.s";
  CxxSource assemblerSource=ImmutableCxxSource.of(CxxSource.Type.ASSEMBLER,new TestSourcePath(assemblerSourceName));
  CxxCompile assemblerCompile=CxxCompilableEnhancer.createCompileBuildRule(params,buildRuleResolver,platform,explicitCompilerFlags,false,assemblerSourceName,assemblerSource);
  assertContains(assemblerCompile.getFlags(),asflags);
}
