{
  BuildRuleResolver buildRuleResolver=new BuildRuleResolver();
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  String name="foo/bar.ii";
  SourcePath input=new PathSourcePath(target.getBasePath().resolve(name));
  CxxSource cxxSource=new CxxSource(CxxSource.Type.CXX_CPP_OUTPUT,input);
  CxxCompile cxxCompile=CxxCompilableEnhancer.createCompileBuildRule(params,buildRuleResolver,CXX_PLATFORM,ImmutableList.<String>of(),false,name,cxxSource);
  assertThat(cxxCompile.getFlags(),Matchers.contains("-x","c++-cpp-output"));
  name="foo/bar.mi";
  input=new PathSourcePath(target.getBasePath().resolve(name));
  cxxSource=new CxxSource(CxxSource.Type.OBJC_CPP_OUTPUT,input);
  cxxCompile=CxxCompilableEnhancer.createCompileBuildRule(params,buildRuleResolver,CXX_PLATFORM,ImmutableList.<String>of(),false,name,cxxSource);
  assertThat(cxxCompile.getFlags(),Matchers.contains("-x","objective-c-cpp-output"));
  name="foo/bar.mii";
  input=new PathSourcePath(target.getBasePath().resolve(name));
  cxxSource=new CxxSource(CxxSource.Type.OBJCXX_CPP_OUTPUT,input);
  cxxCompile=CxxCompilableEnhancer.createCompileBuildRule(params,buildRuleResolver,CXX_PLATFORM,ImmutableList.<String>of(),false,name,cxxSource);
  assertThat(cxxCompile.getFlags(),Matchers.contains("-x","objective-c++-cpp-output"));
  name="foo/bar.i";
  input=new PathSourcePath(target.getBasePath().resolve(name));
  cxxSource=new CxxSource(CxxSource.Type.C_CPP_OUTPUT,input);
  cxxCompile=CxxCompilableEnhancer.createCompileBuildRule(params,buildRuleResolver,CXX_PLATFORM,ImmutableList.<String>of(),false,name,cxxSource);
  assertThat(cxxCompile.getFlags(),Matchers.contains("-x","c-cpp-output"));
}
