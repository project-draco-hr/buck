{
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),unpackDirectory));
  steps.add(new UnzipStep(getProjectFilesystem(),getResolver().getAbsolutePath(aarFile),unpackDirectory));
  steps.add(new TouchStep(getProjectFilesystem(),getProguardConfig()));
  steps.add(new MkdirStep(getProjectFilesystem(),getResolver().getAbsolutePath(getAssetsDirectory())));
  steps.add(new MkdirStep(getProjectFilesystem(),getNativeLibsDirectory()));
  steps.add(new TouchStep(getProjectFilesystem(),getTextSymbolsFile()));
  steps.add(new MkdirStep(getProjectFilesystem(),uberClassesJar.getParent()));
  steps.add(new AbstractExecutionStep("create_uber_classes_jar"){
    @Override public StepExecutionResult execute(    ExecutionContext context){
      Path libsDirectory=unpackDirectory.resolve("libs");
      boolean dirDoesNotExistOrIsEmpty;
      if (!getProjectFilesystem().exists(libsDirectory)) {
        dirDoesNotExistOrIsEmpty=true;
      }
 else {
        try {
          dirDoesNotExistOrIsEmpty=getProjectFilesystem().getDirectoryContents(libsDirectory).isEmpty();
        }
 catch (        IOException e) {
          context.logError(e,"Failed to get directory contents of %s",libsDirectory);
          return StepExecutionResult.ERROR;
        }
      }
      Path classesJar=unpackDirectory.resolve("classes.jar");
      if (!getProjectFilesystem().exists(classesJar)) {
        try {
          JarDirectoryStepHelper.createEmptyJarFile(getProjectFilesystem(),classesJar,context);
        }
 catch (        IOException e) {
          context.logError(e,"Failed to create empty jar %s",classesJar);
          return StepExecutionResult.ERROR;
        }
      }
      if (dirDoesNotExistOrIsEmpty) {
        try {
          getProjectFilesystem().copy(classesJar,uberClassesJar,ProjectFilesystem.CopySourceMode.FILE);
        }
 catch (        IOException e) {
          context.logError(e,"Failed to copy from %s to %s",classesJar,uberClassesJar);
          return StepExecutionResult.ERROR;
        }
      }
 else {
        ImmutableSortedSet.Builder<Path> entriesToJarBuilder=ImmutableSortedSet.naturalOrder();
        entriesToJarBuilder.add(classesJar);
        try {
          entriesToJarBuilder.addAll(getProjectFilesystem().getDirectoryContents(libsDirectory));
        }
 catch (        IOException e) {
          context.logError(e,"Failed to get directory contents of %s",libsDirectory);
          return StepExecutionResult.ERROR;
        }
        ImmutableSortedSet<Path> entriesToJar=entriesToJarBuilder.build();
        try {
          JarDirectoryStepHelper.createJarFile(getProjectFilesystem(),uberClassesJar,entriesToJar,Optional.<String>absent(),Optional.<Path>absent(),true,ImmutableList.<Pattern>of(),context);
        }
 catch (        IOException e) {
          context.logError(e,"Failed to jar %s into %s",entriesToJar,uberClassesJar);
          return StepExecutionResult.ERROR;
        }
      }
      return StepExecutionResult.SUCCESS;
    }
  }
);
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),pathToTextSymbolsDir));
  steps.add(new ExtractFromAndroidManifestStep(getAndroidManifest(),getProjectFilesystem(),buildableContext,METADATA_KEY_FOR_R_DOT_JAVA_PACKAGE,pathToRDotJavaPackageFile));
  steps.add(new RecordFileSha1Step(getProjectFilesystem(),getTextSymbolsFile(),METADATA_KEY_FOR_R_DOT_TXT_SHA1,buildableContext));
  steps.add(CopyStep.forFile(getProjectFilesystem(),getTextSymbolsFile(),pathToTextSymbolsFile));
  buildableContext.recordArtifact(unpackDirectory);
  buildableContext.recordArtifact(uberClassesJar);
  buildableContext.recordArtifact(pathToTextSymbolsFile);
  buildableContext.recordArtifact(pathToRDotJavaPackageFile);
  return steps.build();
}
