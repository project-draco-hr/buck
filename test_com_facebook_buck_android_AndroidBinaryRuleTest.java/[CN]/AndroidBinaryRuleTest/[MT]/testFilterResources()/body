{
  BuildRuleResolver resolver=new BuildRuleResolver();
  AndroidBinaryRule.Builder builder=AndroidBinaryRule.newAndroidBinaryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//:target")).setManifest("AndroidManifest.xml").setKeystore(addKeystoreRule(resolver)).setTarget("Google Inc:Google APIs:16").setResourceFilter(new ResourceFilter(ImmutableList.<String>of("mdpi"))).setResourceCompressionMode("enabled_with_strings_as_assets");
  AndroidBinaryRule buildRule=resolver.buildAndAddToIndex(builder);
  ImmutableList.Builder<Step> commandsBuilder=ImmutableList.builder();
  Set<String> resourceDirectories=ImmutableSet.of("one","two");
  Set<String> filteredResDirs=buildRule.getFilteredResourceDirectories(commandsBuilder,resourceDirectories);
  assertEquals(ImmutableSet.of("buck-out/bin/__filtered__target__/0","buck-out/bin/__filtered__target__/1"),filteredResDirs);
  ImmutableList<Step> commands=commandsBuilder.build();
  assertEquals(3,commands.size());
  FilterResourcesStep resourcesStep=(FilterResourcesStep)commands.get(0);
  MakeCleanDirectoryStep cleanDirectoryStep=(MakeCleanDirectoryStep)commands.get(1);
  assertTrue(resourcesStep.isFilterStrings());
  assertEquals("mdpi",resourcesStep.getResourceFilter());
  assertEquals(ImmutableBiMap.of("one","buck-out/bin/__filtered__target__/0","two","buck-out/bin/__filtered__target__/1"),resourcesStep.getInResDirToOutResDirMap());
  assertEquals("buck-out/bin/__strings_target__",cleanDirectoryStep.getPath());
}
