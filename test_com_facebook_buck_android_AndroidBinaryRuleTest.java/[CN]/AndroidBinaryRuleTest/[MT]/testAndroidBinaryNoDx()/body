{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  JavaLibraryRule libraryOne=createAndroidLibraryRule("//java/src/com/facebook/base:libraryOne",ruleResolver,null,null,null);
  JavaLibraryRule libraryTwo=createAndroidLibraryRule("//java/src/com/facebook/base:libraryTwo",ruleResolver,null,null,null);
  BuildTarget binaryBuildTarget=BuildTargetFactory.newInstance("//java/src/com/facebook/base:apk");
  AndroidBinaryRule androidBinary=ruleResolver.buildAndAddToIndex(AndroidBinaryRule.newAndroidBinaryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(binaryBuildTarget).addClasspathDep(libraryOne.getBuildTarget()).addClasspathDep(libraryTwo.getBuildTarget()).addBuildRuleToExcludeFromDex(BuildTargetFactory.newInstance("//java/src/com/facebook/base:libraryTwo")).setManifest(new FileSourcePath("java/src/com/facebook/base/AndroidManifest.xml")).setTarget("Google Inc.:Google APIs:16").setKeystore(addKeystoreRule(ruleResolver)).setPackageType("debug"));
  AndroidTransitiveDependencies transitiveDependencies=androidBinary.findTransitiveDependencies();
  AndroidDexTransitiveDependencies dexTransitiveDependencies=androidBinary.findDexTransitiveDependencies();
  ImmutableList.Builder<Step> commands=ImmutableList.builder();
  BuildContext context=createMock(BuildContext.class);
  replay(context);
  ImmutableSet<Path> classpathEntriesToDex=FluentIterable.from(dexTransitiveDependencies.classpathEntriesToDex).transform(MorePaths.TO_PATH).toSet();
  FakeBuildableContext buildableContext=new FakeBuildableContext();
  androidBinary.addProguardCommands(context,classpathEntriesToDex,transitiveDependencies.proguardConfigs,commands,ImmutableSet.<Path>of(),buildableContext);
  verify(context);
  ImmutableSet<Path> expectedRecordedArtifacts=ImmutableSet.of(Paths.get("buck-out/gen/java/src/com/facebook/base/.proguard/apk/configuration.txt"),Paths.get("buck-out/gen/java/src/com/facebook/base/.proguard/apk/mapping.txt"));
  assertEquals(expectedRecordedArtifacts,buildableContext.getRecordedArtifacts());
  buildableContext=new FakeBuildableContext();
  MakeCleanDirectoryStep expectedClean=new MakeCleanDirectoryStep(Paths.get("buck-out/gen/java/src/com/facebook/base/.proguard/apk"));
  GenProGuardConfigStep expectedGenProguard=new GenProGuardConfigStep(Paths.get("buck-out/bin/java/src/com/facebook/base/" + "__manifest_apk#aapt_package__/AndroidManifest.xml"),ImmutableSet.<Path>of(),Paths.get("buck-out/gen/java/src/com/facebook/base/.proguard/apk/proguard.txt"));
  Step expectedObfuscation=ProGuardObfuscateStep.create(Paths.get("buck-out/gen/java/src/com/facebook/base/.proguard/apk/proguard.txt"),ImmutableSet.<Path>of(),false,Optional.<Integer>absent(),ImmutableMap.of(Paths.get("buck-out/gen/java/src/com/facebook/base/lib__libraryOne__output/libraryOne.jar"),Paths.get("buck-out/gen/java/src/com/facebook/base/.proguard/apk/buck-out/gen/" + "java/src/com/facebook/base/lib__libraryOne__output/libraryOne-obfuscated.jar")),ImmutableSet.of("buck-out/gen/java/src/com/facebook/base/lib__libraryTwo__output/libraryTwo.jar"),Paths.get("buck-out/gen/java/src/com/facebook/base/.proguard/apk"),buildableContext);
  assertEquals(ImmutableList.of(expectedClean,expectedGenProguard,expectedObfuscation),commands.build());
  assertEquals(expectedRecordedArtifacts,buildableContext.getRecordedArtifacts());
}
