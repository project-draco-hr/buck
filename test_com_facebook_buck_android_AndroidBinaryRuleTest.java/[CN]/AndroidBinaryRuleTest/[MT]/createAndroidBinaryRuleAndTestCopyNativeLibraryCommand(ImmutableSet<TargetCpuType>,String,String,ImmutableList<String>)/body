{
class FakeProjectFilesystem extends ProjectFilesystem {
    public FakeProjectFilesystem(){
      super(new File("."));
    }
    @Override public Function<String,Path> getPathRelativizer(){
      return new Function<String,Path>(){
        @Override public Path apply(        String input){
          return Paths.get(input);
        }
      }
;
    }
    @Override public Path resolve(    Path path){
      return path;
    }
  }
  ImmutableList.Builder<Step> stepsBuilder=ImmutableList.builder();
  AndroidBinaryRule.copyNativeLibrary(Paths.get(sourceDir),Paths.get(destinationDir),cpuFilters,stepsBuilder);
  ImmutableList<Step> steps=stepsBuilder.build();
  assertEquals(steps.size(),expectedCommandDescriptions.size());
  ExecutionContext context=createMock(ExecutionContext.class);
  expect(context.getProjectFilesystem()).andReturn(new FakeProjectFilesystem()).anyTimes();
  replay(context);
  for (int i=0; i < steps.size(); ++i) {
    String description=steps.get(i).getDescription(context);
    assertEquals(expectedCommandDescriptions.get(i),description);
  }
  verify(context);
}
