{
class FakeProjectFilesystem extends ProjectFilesystem {
    public FakeProjectFilesystem(){
      super(new File("."));
    }
    @Override public Function<String,Path> getPathRelativizer(){
      return new Function<String,Path>(){
        @Override public Path apply(        String input){
          return Paths.get(input);
        }
      }
;
    }
    @Override public Path resolve(    Path path){
      return path;
    }
  }
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  AndroidBinaryRule.Builder builder=AndroidBinaryRule.newAndroidBinaryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//:fbandroid_with_dash_debug_fbsign")).setManifest(new FileSourcePath("AndroidManifest.xml")).setKeystore(addKeystoreRule(ruleResolver)).setTarget("Google Inc:Google APIs:16");
  for (  String filter : cpuFilters) {
    builder.addCpuFilter(filter);
  }
  ImmutableList.Builder<Step> commands=ImmutableList.builder();
  AndroidBinaryRule buildRule=ruleResolver.buildAndAddToIndex(builder);
  buildRule.copyNativeLibrary(sourceDir,destinationDir,commands);
  ImmutableList<Step> steps=commands.build();
  assertEquals(steps.size(),expectedCommandDescriptions.size());
  ExecutionContext context=createMock(ExecutionContext.class);
  expect(context.getProjectFilesystem()).andReturn(new FakeProjectFilesystem()).anyTimes();
  replay(context);
  for (int i=0; i < steps.size(); ++i) {
    String description=steps.get(i).getDescription(context);
    assertEquals(expectedCommandDescriptions.get(i),description);
  }
  verify(context);
}
