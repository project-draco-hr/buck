{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  AndroidBinaryRule.Builder builder=AndroidBinaryRule.newAndroidBinaryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//:fbandroid_with_dash_debug_fbsign")).setManifest("AndroidManifest.xml").setKeystore(addKeystoreRule(ruleResolver)).setTarget("Google Inc:Google APIs:16");
  for (  String filter : cpuFilters) {
    builder.addCpuFilter(filter);
  }
  ImmutableList.Builder<Step> commands=ImmutableList.builder();
  AndroidBinaryRule buildRule=ruleResolver.buildAndAddToIndex(builder);
  buildRule.copyNativeLibrary(sourceDir,destinationDir,commands);
  ImmutableList<Step> steps=commands.build();
  assertEquals(steps.size(),expectedShellCommands.size());
  ExecutionContext context=createMock(ExecutionContext.class);
  replay(context);
  for (int i=0; i < steps.size(); ++i) {
    Iterable<String> observedArgs=((BashStep)steps.get(i)).getShellCommand(context);
    String observedCommand=Joiner.on(' ').join(observedArgs);
    assertEquals(expectedShellCommands.get(i),observedCommand);
  }
  verify(context);
}
