{
class Dto implements ConstructorArg {
    static final int DEFAULT_OPTIMIZE=9;
    public Optional<Integer> optimize;
  }
  Description<Dto> description=new Description<Dto>(){
    @Override public BuildRuleType getBuildRuleType(){
      return new BuildRuleType("example");
    }
    @Override public Dto createUnpopulatedConstructorArg(){
      return new Dto();
    }
    @Override public Buildable createBuildable(    BuildRuleParams params,    Dto args){
      int optimizationLevel=args.optimize.or(Integer.valueOf(Dto.DEFAULT_OPTIMIZE));
      return new ExampleBuildable(String.valueOf(optimizationLevel));
    }
  }
;
  ProjectFilesystem filesystem=createForgivingProjectFilesystem();
  BuildRuleFactoryParams factoryParams=new BuildRuleFactoryParams(ImmutableMap.of("optimize",0),filesystem,new BuildTargetParser(filesystem),BuildTargetFactory.newInstance("//one/two:example"),new FakeRuleKeyBuilderFactory());
  DescribedRuleFactory<Dto> factory=new DescribedRuleFactory<>(description);
  DescribedRuleBuilder<Dto> builder=factory.newInstance(factoryParams);
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  DescribedRule rule=builder.build(ruleResolver);
  ExampleBuildable buildable=(ExampleBuildable)rule.getBuildable();
  assertEquals("If the user explicitly specifies a value of 0 for the optimize argument, " + "then args.optimize should be Optional.of(0).","0",buildable.message);
}
