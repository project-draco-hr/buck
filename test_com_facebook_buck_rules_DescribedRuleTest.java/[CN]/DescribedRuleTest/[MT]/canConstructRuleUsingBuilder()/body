{
class Dto implements ConstructorArg {
    public String name;
  }
  Description<Dto> description=new Description<Dto>(){
    @Override public BuildRuleType getBuildRuleType(){
      return new BuildRuleType("example");
    }
    @Override public Dto createUnpopulatedConstructorArg(){
      return new Dto();
    }
    @Override public Buildable createBuildable(    BuildRuleParams params,    Dto args){
      return new ExampleBuildable(params.getBuildTarget(),args.name);
    }
  }
;
  ProjectFilesystem filesystem=createForgivingProjectFilesystem();
  BuildRuleFactoryParams factoryParams=new BuildRuleFactoryParams(ImmutableMap.of("name","cheese"),filesystem,new BuildTargetParser(filesystem),BuildTargetFactory.newInstance("//one/two:example"),new FakeRuleKeyBuilderFactory());
  BuildContext fakeBuildContext=FakeBuildContext.NOOP_CONTEXT;
  DescribedRuleFactory<Dto> factory=new DescribedRuleFactory<>(description);
  DescribedRuleBuilder<Dto> builder=factory.newInstance(factoryParams);
  DescribedRule rule=builder.build(new BuildRuleResolver());
  List<Step> steps=rule.getBuildable().getBuildSteps(fakeBuildContext,new FakeBuildableContext());
  assertEquals(1,steps.size());
  EchoStep step=(EchoStep)Iterables.getOnlyElement(steps);
  ExecutionContext.Builder executionContextBuilder=TestExecutionContext.newBuilder();
  BuckEventBus bus=BuckEventBusFactory.newInstance();
  final AtomicBoolean ok=new AtomicBoolean(false);
  bus.register(new Object(){
    @Subscribe public void echo(    LogEvent event){
      ok.set("cheese".equals(event.getMessage()));
    }
  }
);
  executionContextBuilder.setEventBus(bus);
  step.execute(executionContextBuilder.build());
  assertTrue(ok.get());
}
