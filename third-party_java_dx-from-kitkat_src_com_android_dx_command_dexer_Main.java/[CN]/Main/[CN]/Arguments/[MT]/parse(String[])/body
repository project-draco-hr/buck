{
  ArgumentsParser parser=new ArgumentsParser(args);
  boolean outputIsDirectory=false;
  boolean outputIsDirectDex=false;
  while (parser.getNext()) {
    if (parser.isArg("--debug")) {
      debug=true;
    }
 else     if (parser.isArg("--verbose")) {
      verbose=true;
    }
 else     if (parser.isArg("--verbose-dump")) {
      verboseDump=true;
    }
 else     if (parser.isArg("--no-files")) {
      emptyOk=true;
    }
 else     if (parser.isArg("--no-optimize")) {
      optimize=false;
    }
 else     if (parser.isArg("--no-strict")) {
      strictNameCheck=false;
    }
 else     if (parser.isArg("--core-library")) {
      coreLibrary=true;
    }
 else     if (parser.isArg("--statistics")) {
      statistics=true;
    }
 else     if (parser.isArg("--optimize-list=")) {
      if (dontOptimizeListFile != null) {
        System.err.println("--optimize-list and " + "--no-optimize-list are incompatible.");
        throw new UsageException();
      }
      optimize=true;
      optimizeListFile=parser.getLastValue();
    }
 else     if (parser.isArg("--no-optimize-list=")) {
      if (dontOptimizeListFile != null) {
        System.err.println("--optimize-list and " + "--no-optimize-list are incompatible.");
        throw new UsageException();
      }
      optimize=true;
      dontOptimizeListFile=parser.getLastValue();
    }
 else     if (parser.isArg("--keep-classes")) {
      keepClassesInJar=true;
    }
 else     if (parser.isArg("--output=")) {
      outName=parser.getLastValue();
      if (new File(outName).isDirectory()) {
        jarOutput=false;
        outputIsDirectory=true;
      }
 else       if (FileUtils.hasArchiveSuffix(outName)) {
        jarOutput=true;
      }
 else       if (outName.endsWith(".dex") || outName.equals("-")) {
        jarOutput=false;
        outputIsDirectDex=true;
      }
 else {
        System.err.println("unknown output extension: " + outName);
        throw new UsageException();
      }
    }
 else     if (parser.isArg("--dump-to=")) {
      humanOutName=parser.getLastValue();
    }
 else     if (parser.isArg("--dump-width=")) {
      dumpWidth=Integer.parseInt(parser.getLastValue());
    }
 else     if (parser.isArg("--dump-method=")) {
      methodToDump=parser.getLastValue();
      jarOutput=false;
    }
 else     if (parser.isArg("--positions=")) {
      String pstr=parser.getLastValue().intern();
      if (pstr == "none") {
        positionInfo=PositionList.NONE;
      }
 else       if (pstr == "important") {
        positionInfo=PositionList.IMPORTANT;
      }
 else       if (pstr == "lines") {
        positionInfo=PositionList.LINES;
      }
 else {
        System.err.println("unknown positions option: " + pstr);
        throw new UsageException();
      }
    }
 else     if (parser.isArg("--no-locals")) {
      localInfo=false;
    }
 else     if (parser.isArg(NUM_THREADS_OPTION + "=")) {
      numThreads=Integer.parseInt(parser.getLastValue());
    }
 else     if (parser.isArg(INCREMENTAL_OPTION)) {
      incremental=true;
    }
 else     if (parser.isArg("--force-jumbo")) {
      forceJumbo=true;
    }
 else     if (parser.isArg(MULTI_DEX_OPTION)) {
      multiDex=true;
    }
 else     if (parser.isArg(MAIN_DEX_LIST_OPTION + "=")) {
      mainDexListFile=parser.getLastValue();
    }
 else     if (parser.isArg(MINIMAL_MAIN_DEX_OPTION)) {
      minimalMainDex=true;
    }
 else     if (parser.isArg("--set-max-idx-number=")) {
      maxNumberOfIdxPerDex=Integer.parseInt(parser.getLastValue());
    }
 else {
      System.err.println("unknown option: " + parser.getCurrent());
      throw new UsageException();
    }
  }
  fileNames=parser.getRemaining();
  if (fileNames.length == 0) {
    if (!emptyOk) {
      System.err.println("no input files specified");
      throw new UsageException();
    }
  }
 else   if (emptyOk) {
    System.out.println("ignoring input files");
  }
  if ((humanOutName == null) && (methodToDump != null)) {
    humanOutName="-";
  }
  if (mainDexListFile != null && !multiDex) {
    System.err.println(MAIN_DEX_LIST_OPTION + " is only supported in combination with " + MULTI_DEX_OPTION);
    throw new UsageException();
  }
  if (minimalMainDex && (mainDexListFile == null || !multiDex)) {
    System.err.println(MINIMAL_MAIN_DEX_OPTION + " is only supported in combination with " + MULTI_DEX_OPTION+ " and "+ MAIN_DEX_LIST_OPTION);
    throw new UsageException();
  }
  if (multiDex && numThreads != 1) {
    System.out.println(NUM_THREADS_OPTION + " is ignored when used with " + MULTI_DEX_OPTION);
    numThreads=1;
  }
  if (multiDex && incremental) {
    System.err.println(INCREMENTAL_OPTION + " is not supported with " + MULTI_DEX_OPTION);
    throw new UsageException();
  }
  if (multiDex && outputIsDirectDex) {
    System.err.println("Unsupported output \"" + outName + "\". "+ MULTI_DEX_OPTION+ " supports only archive or directory output");
    throw new UsageException();
  }
  if (outputIsDirectory && !multiDex) {
    outName=new File(outName,DexFormat.DEX_IN_JAR_NAME).getPath();
  }
}
