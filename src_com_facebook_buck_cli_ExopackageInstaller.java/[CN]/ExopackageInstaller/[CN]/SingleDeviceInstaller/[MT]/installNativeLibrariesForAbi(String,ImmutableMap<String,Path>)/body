{
  if (libraries.isEmpty()) {
    return;
  }
  ImmutableSet<String> requiredHashes=libraries.keySet();
  ImmutableSet<String> presentHashes=prepareNativeLibsDir(abi,requiredHashes);
  Map<String,Path> filesToInstallByHash=Maps.filterKeys(libraries,Predicates.not(Predicates.in(presentHashes)));
  String metadataContents=Joiner.on('\n').join(FluentIterable.from(libraries.entrySet()).transform(new Function<Map.Entry<String,Path>,String>(){
    @Override public String apply(    Map.Entry<String,Path> input){
      String hash=input.getKey();
      String filename=input.getValue().getFileName().toString();
      int index=filename.indexOf('.');
      String libname=index == -1 ? filename : filename.substring(0,index);
      return String.format("%s native-%s.so",libname,hash);
    }
  }
));
  installFiles("native_library",ImmutableMap.copyOf(filesToInstallByHash),metadataContents,"native-%s.so",NATIVE_LIBS_DIR.resolve(abi));
}
