{
  ImmutableList.Builder<String> commandBuilder=ImmutableList.builder();
  commandBuilder.add(simctlPath.toString(),"launch");
  if (launchBehavior == LaunchBehavior.WAIT_FOR_DEBUGGER) {
    commandBuilder.add("-w");
  }
  commandBuilder.add(simulatorUdid,bundleID);
  commandBuilder.addAll(args);
  ImmutableList<String> command=commandBuilder.build();
  ProcessExecutorParams processExecutorParams=ProcessExecutorParams.builder().setCommand(command).build();
  Set<ProcessExecutor.Option> options=EnumSet.of(ProcessExecutor.Option.EXPECTING_STD_OUT);
  LOG.debug("Launching bundle ID %s in simulator %s via command %s",bundleID,simulatorUdid,command);
  ProcessExecutor.Result result=processExecutor.launchAndExecute(processExecutorParams,options,Optional.<String>absent(),Optional.<Long>absent(),Optional.<Function<Process,Void>>absent());
  if (result.getExitCode() != 0) {
    LOG.error("Error %d launching bundle %s in simulator %s (command %s)",result.getExitCode(),bundleID,simulatorUdid,command);
    return Optional.<Long>absent();
  }
  Preconditions.checkState(result.getStdout().isPresent());
  String trimmedStdout=result.getStdout().get().trim();
  Matcher stdoutMatcher=SIMCTL_LAUNCH_OUTPUT_PATTERN.matcher(trimmedStdout);
  if (!stdoutMatcher.find()) {
    LOG.error("Could not parse output from %s: %s",command,trimmedStdout);
    return Optional.<Long>absent();
  }
  return Optional.of(Long.parseLong(stdoutMatcher.group(1),10));
}
