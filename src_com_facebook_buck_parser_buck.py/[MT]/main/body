def main():
    parser = optparse.OptionParser()
    parser.add_option('--project_root', action='store', type='string', dest='project_root')
    parser.add_option('--include', action='append', dest='include')
    parser.add_option('--ignore_path', action='append', dest='ignore_paths')
    parser.add_option('--server', action='store_true', dest='server', help='Invoke as a server to parse individual BUCK files on demand.')
    (options, args) = parser.parse_args()
    project_root = os.path.abspath(options.project_root)
    build_files = []
    if args:
        build_files = args
    elif (not options.server):
        ignore_paths = [os.path.abspath(os.path.join(project_root, d)) for d in (options.ignore_paths or [])]
        build_files = []
        for (dirpath, dirnames, filenames) in symlink_aware_walk(project_root):
            dirnames[:] = [d for d in dirnames if (not (os.path.join(dirpath, d) in ignore_paths))]
            if (BUILD_RULES_FILE_NAME in filenames):
                build_file = os.path.join(dirpath, BUILD_RULES_FILE_NAME)
                build_files.append(build_file)
    buildFileProcessor = BuildFileProcessor(project_root, implicit_includes=(options.include or []))
    for build_file in build_files:
        values = buildFileProcessor.process(build_file)
        if options.server:
            print json.dumps(values)
        else:
            for value in values:
                print json.dumps(value)
    if options.server:
        for build_file in iter(sys.stdin.readline, ''):
            values = buildFileProcessor.process(build_file.rstrip())
            print json.dumps(values)
    try:
        sys.stdout.close()
    except IOError:
        pass
