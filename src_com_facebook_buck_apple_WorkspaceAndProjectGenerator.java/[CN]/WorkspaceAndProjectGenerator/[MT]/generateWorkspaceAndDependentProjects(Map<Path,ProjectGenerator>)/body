{
  LOG.debug("Generating workspace for target %s",workspaceBuildTarget);
  String workspaceName=XcodeWorkspaceConfigDescription.getWorkspaceNameFromArg(workspaceArguments);
  Path outputDirectory;
  if (combinedProject) {
    workspaceName+="-Combined";
    outputDirectory=BuildTargets.getGenPath(workspaceBuildTarget,"%s").getParent();
  }
 else {
    outputDirectory=workspaceBuildTarget.getBasePath();
  }
  WorkspaceGenerator workspaceGenerator=new WorkspaceGenerator(projectFilesystem,workspaceName,outputDirectory);
  ImmutableMap.Builder<String,XcodeWorkspaceConfigDescription.Arg> schemeConfigsBuilder=ImmutableMap.builder();
  ImmutableSetMultimap.Builder<String,TargetNode<?>> orderedTargetNodesBuilder=ImmutableSetMultimap.builder();
  ImmutableSetMultimap.Builder<String,TargetNode<?>> buildForTestNodesBuilder=ImmutableSetMultimap.builder();
  ImmutableMultimap.Builder<AppleTestBundleParamsKey,TargetNode<AppleTestDescription.Arg>> groupedTestsBuilder=ImmutableMultimap.builder();
  ImmutableSetMultimap.Builder<String,TargetNode<AppleTestDescription.Arg>> ungroupedTestsBuilder=ImmutableSetMultimap.builder();
  buildWorkspaceSchemes(projectGraph,projectGeneratorOptions.contains(ProjectGenerator.Option.INCLUDE_TESTS),groupableTests,workspaceName,workspaceArguments,schemeConfigsBuilder,orderedTargetNodesBuilder,buildForTestNodesBuilder,groupedTestsBuilder,ungroupedTestsBuilder);
  ImmutableMap<String,XcodeWorkspaceConfigDescription.Arg> schemeConfigs=schemeConfigsBuilder.build();
  ImmutableSetMultimap<String,TargetNode<?>> orderedTargetNodes=orderedTargetNodesBuilder.build();
  ImmutableSetMultimap<String,TargetNode<?>> buildForTestNodes=buildForTestNodesBuilder.build();
  ImmutableMultimap<AppleTestBundleParamsKey,TargetNode<AppleTestDescription.Arg>> groupedTests=groupedTestsBuilder.build();
  ImmutableSetMultimap<String,TargetNode<AppleTestDescription.Arg>> ungroupedTests=ungroupedTestsBuilder.build();
  Iterable<PBXTarget> synthesizedCombinedTestTargets=ImmutableList.of();
  ImmutableSet<BuildTarget> targetsInRequiredProjects=FluentIterable.from(orderedTargetNodes.values()).append(buildForTestNodes.values()).transform(HasBuildTarget.TO_TARGET).toSet();
  ImmutableMap.Builder<BuildTarget,PBXTarget> buildTargetToPbxTargetMapBuilder=ImmutableMap.builder();
  ImmutableMap.Builder<PBXTarget,Path> targetToProjectPathMapBuilder=ImmutableMap.builder();
  if (combinedProject) {
    LOG.debug("Generating a combined project");
    ProjectGenerator generator=new ProjectGenerator(projectGraph,targetsInRequiredProjects,projectFilesystem,outputDirectory,workspaceName,buildFileName,projectGeneratorOptions,outputPathOfNode).setAdditionalCombinedTestTargets(groupedTests).setTestsToGenerateAsStaticLibraries(groupableTests);
    combinedProjectGenerator=Optional.of(generator);
    generator.createXcodeProjects();
    workspaceGenerator.addFilePath(generator.getProjectPath(),Optional.<Path>absent());
    requiredBuildTargetsBuilder.addAll(generator.getRequiredBuildTargets());
    buildTargetToPbxTargetMapBuilder.putAll(generator.getBuildTargetToGeneratedTargetMap());
    for (    PBXTarget target : generator.getBuildTargetToGeneratedTargetMap().values()) {
      targetToProjectPathMapBuilder.put(target,generator.getProjectPath());
    }
    synthesizedCombinedTestTargets=generator.getBuildableCombinedTestTargets();
    for (    PBXTarget target : synthesizedCombinedTestTargets) {
      targetToProjectPathMapBuilder.put(target,generator.getProjectPath());
    }
  }
 else {
    ImmutableMultimap.Builder<Path,BuildTarget> projectDirectoryToBuildTargetsBuilder=ImmutableMultimap.builder();
    for (    TargetNode<?> targetNode : projectGraph.getNodes()) {
      BuildTarget buildTarget=targetNode.getBuildTarget();
      projectDirectoryToBuildTargetsBuilder.put(buildTarget.getBasePath(),buildTarget);
    }
    ImmutableMultimap<Path,BuildTarget> projectDirectoryToBuildTargets=projectDirectoryToBuildTargetsBuilder.build();
    for (    Path projectDirectory : projectDirectoryToBuildTargets.keySet()) {
      ImmutableSet<BuildTarget> rules=filterRulesForProjectDirectory(projectGraph,ImmutableSet.copyOf(projectDirectoryToBuildTargets.get(projectDirectory)));
      if (Sets.intersection(targetsInRequiredProjects,rules).isEmpty()) {
        continue;
      }
      ProjectGenerator generator=projectGenerators.get(projectDirectory);
      if (generator == null) {
        LOG.debug("Generating project for directory %s with targets %s",projectDirectory,rules);
        String projectName;
        if (projectDirectory.getNameCount() == 0) {
          projectName="Project";
        }
 else {
          projectName=projectDirectory.getFileName().toString();
        }
        generator=new ProjectGenerator(projectGraph,rules,projectFilesystem,projectDirectory,projectName,buildFileName,projectGeneratorOptions,outputPathOfNode).setTestsToGenerateAsStaticLibraries(groupableTests);
        generator.createXcodeProjects();
        requiredBuildTargetsBuilder.addAll(generator.getRequiredBuildTargets());
        projectGenerators.put(projectDirectory,generator);
      }
 else {
        LOG.debug("Already generated project for target %s, skipping",projectDirectory);
      }
      workspaceGenerator.addFilePath(generator.getProjectPath());
      buildTargetToPbxTargetMapBuilder.putAll(generator.getBuildTargetToGeneratedTargetMap());
      for (      PBXTarget target : generator.getBuildTargetToGeneratedTargetMap().values()) {
        targetToProjectPathMapBuilder.put(target,generator.getProjectPath());
      }
    }
    if (!groupedTests.isEmpty()) {
      ProjectGenerator combinedTestsProjectGenerator=new ProjectGenerator(projectGraph,ImmutableSortedSet.<BuildTarget>of(),projectFilesystem,BuildTargets.getGenPath(workspaceBuildTarget,"%s-CombinedTestBundles"),"_CombinedTestBundles",buildFileName,projectGeneratorOptions,outputPathOfNode);
      combinedTestsProjectGenerator.setAdditionalCombinedTestTargets(groupedTests).createXcodeProjects();
      workspaceGenerator.addFilePath(combinedTestsProjectGenerator.getProjectPath());
      requiredBuildTargetsBuilder.addAll(combinedTestsProjectGenerator.getRequiredBuildTargets());
      for (      PBXTarget target : combinedTestsProjectGenerator.getBuildTargetToGeneratedTargetMap().values()) {
        targetToProjectPathMapBuilder.put(target,combinedTestsProjectGenerator.getProjectPath());
      }
      synthesizedCombinedTestTargets=combinedTestsProjectGenerator.getBuildableCombinedTestTargets();
      for (      PBXTarget target : synthesizedCombinedTestTargets) {
        targetToProjectPathMapBuilder.put(target,combinedTestsProjectGenerator.getProjectPath());
      }
      this.combinedTestsProjectGenerator=Optional.of(combinedTestsProjectGenerator);
    }
  }
  Path workspacePath=workspaceGenerator.writeWorkspace();
  final Map<BuildTarget,PBXTarget> buildTargetToTarget=buildTargetToPbxTargetMapBuilder.build();
  Function<TargetNode<?>,PBXTarget> targetNodeToPBXTargetTransformer=new Function<TargetNode<?>,PBXTarget>(){
    @Override public PBXTarget apply(    TargetNode<?> input){
      return Preconditions.checkNotNull(buildTargetToTarget.get(input.getBuildTarget()));
    }
  }
;
  writeWorkspaceSchemes(workspaceName,outputDirectory,schemeConfigs,orderedTargetNodes,buildForTestNodes,ungroupedTests,targetToProjectPathMapBuilder.build(),synthesizedCombinedTestTargets,targetNodeToPBXTargetTransformer,Functions.forMap(buildTargetToTarget));
  return workspacePath;
}
