{
  LOG.debug("Generating workspace for target %s",workspaceBuildTarget);
  String workspaceName=XcodeWorkspaceConfigDescription.getWorkspaceNameFromArg(workspaceArguments);
  Path outputDirectory;
  if (combinedProject) {
    workspaceName+="-Combined";
    outputDirectory=BuildTargets.getGenPath(workspaceBuildTarget,"%s").getParent().resolve(workspaceName + ".xcodeproj");
  }
 else {
    outputDirectory=workspaceBuildTarget.getBasePath();
  }
  WorkspaceGenerator workspaceGenerator=new WorkspaceGenerator(projectFilesystem,combinedProject ? "project" : workspaceName,outputDirectory);
  ImmutableMap.Builder<String,XcodeWorkspaceConfigDescription.Arg> schemeConfigsBuilder=ImmutableMap.builder();
  ImmutableSetMultimap.Builder<String,Optional<TargetNode<?>>> schemeNameToSrcTargetNodeBuilder=ImmutableSetMultimap.builder();
  ImmutableSetMultimap.Builder<String,TargetNode<?>> buildForTestNodesBuilder=ImmutableSetMultimap.builder();
  ImmutableMultimap.Builder<AppleTestBundleParamsKey,TargetNode<AppleTestDescription.Arg>> groupedTestsBuilder=ImmutableMultimap.builder();
  ImmutableSetMultimap.Builder<String,TargetNode<AppleTestDescription.Arg>> ungroupedTestsBuilder=ImmutableSetMultimap.builder();
  buildWorkspaceSchemes(getTargetToBuildWithBuck(),projectGraph,projectGeneratorOptions.contains(ProjectGenerator.Option.INCLUDE_TESTS),projectGeneratorOptions.contains(ProjectGenerator.Option.INCLUDE_DEPENDENCIES_TESTS),groupableTests,workspaceName,workspaceArguments,schemeConfigsBuilder,schemeNameToSrcTargetNodeBuilder,buildForTestNodesBuilder,groupedTestsBuilder,ungroupedTestsBuilder);
  ImmutableMap<String,XcodeWorkspaceConfigDescription.Arg> schemeConfigs=schemeConfigsBuilder.build();
  ImmutableSetMultimap<String,Optional<TargetNode<?>>> schemeNameToSrcTargetNode=schemeNameToSrcTargetNodeBuilder.build();
  ImmutableSetMultimap<String,TargetNode<?>> buildForTestNodes=buildForTestNodesBuilder.build();
  ImmutableMultimap<AppleTestBundleParamsKey,TargetNode<AppleTestDescription.Arg>> groupedTests=groupedTestsBuilder.build();
  ImmutableSetMultimap<String,TargetNode<AppleTestDescription.Arg>> ungroupedTests=ungroupedTestsBuilder.build();
  Iterable<PBXTarget> synthesizedCombinedTestTargets=ImmutableList.of();
  ImmutableSet<BuildTarget> targetsInRequiredProjects=FluentIterable.from(Optional.presentInstances(schemeNameToSrcTargetNode.values())).append(buildForTestNodes.values()).transform(HasBuildTarget.TO_TARGET).toSet();
  ImmutableMultimap.Builder<BuildTarget,PBXTarget> buildTargetToPbxTargetMapBuilder=ImmutableMultimap.builder();
  ImmutableMap.Builder<PBXTarget,Path> targetToProjectPathMapBuilder=ImmutableMap.builder();
  Optional<BuildTarget> targetToBuildWithBuck=getTargetToBuildWithBuck();
  if (combinedProject) {
    LOG.debug("Generating a combined project");
    ProjectGenerator generator=new ProjectGenerator(projectGraph,targetsInRequiredProjects,projectFilesystem,outputDirectory.getParent(),workspaceName,buildFileName,projectGeneratorOptions,targetToBuildWithBuck,buildWithBuckFlags,executableFinder,environment,cxxPlatforms,defaultCxxPlatform,sourcePathResolverForNode,buckEventBus,attemptToDetermineBestCxxPlatform).setAdditionalCombinedTestTargets(groupedTests).setTestsToGenerateAsStaticLibraries(groupableTests);
    combinedProjectGenerator=Optional.of(generator);
    generator.createXcodeProjects();
    workspaceGenerator.addFilePath(generator.getProjectPath(),Optional.<Path>absent());
    requiredBuildTargetsBuilder.addAll(generator.getRequiredBuildTargets());
    buildTargetToPbxTargetMapBuilder.putAll(generator.getBuildTargetToGeneratedTargetMap());
    for (    PBXTarget target : generator.getBuildTargetToGeneratedTargetMap().values()) {
      targetToProjectPathMapBuilder.put(target,generator.getProjectPath());
    }
    synthesizedCombinedTestTargets=generator.getBuildableCombinedTestTargets();
    for (    PBXTarget target : synthesizedCombinedTestTargets) {
      targetToProjectPathMapBuilder.put(target,generator.getProjectPath());
    }
  }
 else {
    ImmutableMultimap.Builder<Path,BuildTarget> projectDirectoryToBuildTargetsBuilder=ImmutableMultimap.builder();
    for (    TargetNode<?> targetNode : projectGraph.getNodes()) {
      BuildTarget buildTarget=targetNode.getBuildTarget();
      projectDirectoryToBuildTargetsBuilder.put(buildTarget.getBasePath(),buildTarget);
    }
    ImmutableMultimap<Path,BuildTarget> projectDirectoryToBuildTargets=projectDirectoryToBuildTargetsBuilder.build();
    for (    Path projectDirectory : projectDirectoryToBuildTargets.keySet()) {
      final ImmutableSet<BuildTarget> rules=filterRulesForProjectDirectory(projectGraph,ImmutableSet.copyOf(projectDirectoryToBuildTargets.get(projectDirectory)));
      if (Sets.intersection(targetsInRequiredProjects,rules).isEmpty()) {
        continue;
      }
      ProjectGenerator generator=projectGenerators.get(projectDirectory);
      if (generator == null) {
        LOG.debug("Generating project for directory %s with targets %s",projectDirectory,rules);
        String projectName;
        if (projectDirectory.getNameCount() == 0) {
          projectName="Project";
        }
 else {
          projectName=projectDirectory.getFileName().toString();
        }
        generator=new ProjectGenerator(projectGraph,rules,projectFilesystem,projectDirectory,projectName,buildFileName,projectGeneratorOptions,Optionals.bind(targetToBuildWithBuck,new Function<BuildTarget,Optional<BuildTarget>>(){
          @Override public Optional<BuildTarget> apply(          BuildTarget input){
            return rules.contains(input) ? Optional.of(input) : Optional.<BuildTarget>absent();
          }
        }
),buildWithBuckFlags,executableFinder,environment,cxxPlatforms,defaultCxxPlatform,sourcePathResolverForNode,buckEventBus,attemptToDetermineBestCxxPlatform).setTestsToGenerateAsStaticLibraries(groupableTests);
        generator.createXcodeProjects();
        requiredBuildTargetsBuilder.addAll(generator.getRequiredBuildTargets());
        projectGenerators.put(projectDirectory,generator);
      }
 else {
        LOG.debug("Already generated project for target %s, skipping",projectDirectory);
      }
      workspaceGenerator.addFilePath(generator.getProjectPath());
      buildTargetToPbxTargetMapBuilder.putAll(generator.getBuildTargetToGeneratedTargetMap());
      for (      PBXTarget target : generator.getBuildTargetToGeneratedTargetMap().values()) {
        targetToProjectPathMapBuilder.put(target,generator.getProjectPath());
      }
    }
    if (!groupedTests.isEmpty()) {
      ProjectGenerator combinedTestsProjectGenerator=new ProjectGenerator(projectGraph,ImmutableSortedSet.<BuildTarget>of(),projectFilesystem,BuildTargets.getGenPath(workspaceBuildTarget,"%s-CombinedTestBundles"),"_CombinedTestBundles",buildFileName,projectGeneratorOptions,Optional.<BuildTarget>absent(),buildWithBuckFlags,executableFinder,environment,cxxPlatforms,defaultCxxPlatform,sourcePathResolverForNode,buckEventBus,attemptToDetermineBestCxxPlatform);
      combinedTestsProjectGenerator.setAdditionalCombinedTestTargets(groupedTests).createXcodeProjects();
      workspaceGenerator.addFilePath(combinedTestsProjectGenerator.getProjectPath());
      requiredBuildTargetsBuilder.addAll(combinedTestsProjectGenerator.getRequiredBuildTargets());
      for (      PBXTarget target : combinedTestsProjectGenerator.getBuildTargetToGeneratedTargetMap().values()) {
        targetToProjectPathMapBuilder.put(target,combinedTestsProjectGenerator.getProjectPath());
      }
      synthesizedCombinedTestTargets=combinedTestsProjectGenerator.getBuildableCombinedTestTargets();
      for (      PBXTarget target : synthesizedCombinedTestTargets) {
        targetToProjectPathMapBuilder.put(target,combinedTestsProjectGenerator.getProjectPath());
      }
      this.combinedTestsProjectGenerator=Optional.of(combinedTestsProjectGenerator);
    }
  }
  Path workspacePath=workspaceGenerator.writeWorkspace();
  final Multimap<BuildTarget,PBXTarget> buildTargetToTarget=buildTargetToPbxTargetMapBuilder.build();
  final Function<BuildTarget,PBXTarget> targetNodeToPBXTargetTransformer=new Function<BuildTarget,PBXTarget>(){
    @Override public PBXTarget apply(    BuildTarget input){
      ImmutableList<PBXTarget> targets=ImmutableList.copyOf(buildTargetToTarget.get(input));
      if (targets.size() == 1) {
        return targets.get(0);
      }
      Preconditions.checkState(targets.size() == 2);
      PBXTarget first=targets.get(0);
      PBXTarget second=targets.get(1);
      Preconditions.checkState(first.getName().endsWith(ProjectGenerator.BUILD_WITH_BUCK_POSTFIX) ^ second.getName().endsWith(ProjectGenerator.BUILD_WITH_BUCK_POSTFIX));
      PBXTarget buildWithBuckTarget;
      PBXTarget buildWithXcodeTarget;
      if (first.getName().endsWith(ProjectGenerator.BUILD_WITH_BUCK_POSTFIX)) {
        buildWithBuckTarget=first;
        buildWithXcodeTarget=second;
      }
 else {
        buildWithXcodeTarget=first;
        buildWithBuckTarget=second;
      }
      return buildWithBuck ? buildWithBuckTarget : buildWithXcodeTarget;
    }
  }
;
  writeWorkspaceSchemes(workspaceName,outputDirectory,schemeConfigs,schemeNameToSrcTargetNode,buildForTestNodes,ungroupedTests,targetToProjectPathMapBuilder.build(),synthesizedCombinedTestTargets,new Function<TargetNode<?>,Collection<PBXTarget>>(){
    @Override public Collection<PBXTarget> apply(    TargetNode<?> input){
      return buildTargetToTarget.get(input.getBuildTarget());
    }
  }
,targetNodeToPBXTargetTransformer);
  return workspacePath;
}
