{
  UnflavoredBuildTarget originalBuildTarget=originalBuildRuleParams.getBuildTarget().checkUnflavored();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ImmutableList.Builder<BuildRule> aarExtraDepsBuilder=ImmutableList.<BuildRule>builder().addAll(originalBuildRuleParams.getExtraDeps().get());
  AndroidManifestDescription.Arg androidManifestArgs=androidManifestDescription.createUnpopulatedConstructorArg();
  androidManifestArgs.skeleton=args.manifestSkeleton;
  androidManifestArgs.deps=args.deps;
  BuildRuleParams androidManifestParams=originalBuildRuleParams.copyWithChanges(BuildTargets.createFlavoredBuildTarget(originalBuildTarget,AAR_ANDROID_MANIFEST_FLAVOR),originalBuildRuleParams.getDeclaredDeps(),originalBuildRuleParams.getExtraDeps());
  AndroidManifest manifest=androidManifestDescription.createBuildRule(targetGraph,androidManifestParams,resolver,androidManifestArgs);
  aarExtraDepsBuilder.add(resolver.addToIndex(manifest));
  AndroidPackageableCollector collector=new AndroidPackageableCollector(originalBuildRuleParams.getBuildTarget(),ImmutableSet.<BuildTarget>of(),ImmutableSet.<BuildTarget>of());
  collector.addPackageables(AndroidPackageableCollector.getPackageableRules(originalBuildRuleParams.getDeps()));
  AndroidPackageableCollection packageableCollection=collector.build();
  ImmutableSortedSet<BuildRule> androidResourceDeclaredDeps=AndroidResourceHelper.androidResOnly(originalBuildRuleParams.getDeclaredDeps().get());
  ImmutableSortedSet<BuildRule> androidResourceExtraDeps=AndroidResourceHelper.androidResOnly(originalBuildRuleParams.getExtraDeps().get());
  BuildRuleParams assembleAssetsParams=originalBuildRuleParams.copyWithChanges(BuildTargets.createFlavoredBuildTarget(originalBuildTarget,AAR_ASSEMBLE_ASSETS_FLAVOR),Suppliers.ofInstance(androidResourceDeclaredDeps),Suppliers.ofInstance(androidResourceExtraDeps));
  ImmutableCollection<SourcePath> assetsDirectories=packageableCollection.getAssetsDirectories();
  AssembleDirectories assembleAssetsDirectories=new AssembleDirectories(assembleAssetsParams,pathResolver,assetsDirectories);
  aarExtraDepsBuilder.add(resolver.addToIndex(assembleAssetsDirectories));
  BuildRuleParams assembleResourceParams=originalBuildRuleParams.copyWithChanges(BuildTargets.createFlavoredBuildTarget(originalBuildTarget,AAR_ASSEMBLE_RESOURCE_FLAVOR),Suppliers.ofInstance(androidResourceDeclaredDeps),Suppliers.ofInstance(androidResourceExtraDeps));
  ImmutableCollection<SourcePath> resDirectories=packageableCollection.getResourceDetails().getResourceDirectories();
  MergeAndroidResourceSources assembleResourceDirectories=new MergeAndroidResourceSources(assembleResourceParams,pathResolver,resDirectories);
  aarExtraDepsBuilder.add(resolver.addToIndex(assembleResourceDirectories));
  BuildRuleParams androidResourceParams=originalBuildRuleParams.copyWithChanges(BuildTargets.createFlavoredBuildTarget(originalBuildTarget,AAR_ANDROID_RESOURCE_FLAVOR),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(manifest,assembleAssetsDirectories,assembleResourceDirectories)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  AndroidResource androidResource=new AndroidResource(androidResourceParams,pathResolver,ImmutableSortedSet.<BuildRule>naturalOrder().add(assembleAssetsDirectories).add(assembleResourceDirectories).addAll(originalBuildRuleParams.getDeclaredDeps().get()).build(),new BuildTargetSourcePath(assembleResourceDirectories.getBuildTarget()),ImmutableSortedSet.<Path>of(),null,new BuildTargetSourcePath(assembleAssetsDirectories.getBuildTarget()),ImmutableSortedSet.<Path>of(),new BuildTargetSourcePath(manifest.getBuildTarget()),false);
  aarExtraDepsBuilder.add(resolver.addToIndex(androidResource));
  AndroidNativeLibsPackageableGraphEnhancer packageableGraphEnhancer=new AndroidNativeLibsPackageableGraphEnhancer(resolver,originalBuildRuleParams,nativePlatforms,ImmutableSet.<NdkCxxPlatforms.TargetCpuType>of());
  Optional<CopyNativeLibraries> nativeLibrariesOptional=packageableGraphEnhancer.getCopyNativeLibraries(targetGraph,packageableCollection);
  if (nativeLibrariesOptional.isPresent()) {
    aarExtraDepsBuilder.add(resolver.addToIndex(nativeLibrariesOptional.get()));
  }
  Optional<Path> assembledNativeLibsDir=nativeLibrariesOptional.transform(new Function<CopyNativeLibraries,Path>(){
    @Override public Path apply(    CopyNativeLibraries input){
      return input.getPathToNativeLibsDir();
    }
  }
);
  BuildRuleParams androidAarParams=originalBuildRuleParams.copyWithExtraDeps(Suppliers.ofInstance(ImmutableSortedSet.copyOf(aarExtraDepsBuilder.build())));
  return new AndroidAar(androidAarParams,pathResolver,manifest,androidResource,assembleResourceDirectories.getPathToOutput(),assembleAssetsDirectories.getPathToOutput(),assembledNativeLibsDir,packageableCollection.getNativeLibAssetsDirectories());
}
