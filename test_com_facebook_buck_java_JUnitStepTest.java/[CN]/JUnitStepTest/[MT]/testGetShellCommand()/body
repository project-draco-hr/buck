{
  Set<Path> classpathEntries=ImmutableSet.of(Paths.get("foo"),Paths.get("bar/baz"));
  String testClass1="com.facebook.buck.shell.JUnitCommandTest";
  String testClass2="com.facebook.buck.shell.InstrumentCommandTest";
  Set<String> testClassNames=ImmutableSet.of(testClass1,testClass2);
  String vmArg1="-Dname1=value1";
  String vmArg2="-Dname1=value2";
  List<String> vmArgs=ImmutableList.of(vmArg1,vmArg2);
  BuildId pretendBuildId=new BuildId("pretend-build-id");
  String buildIdArg=String.format("-D%s=%s",JUnitStep.BUILD_ID_PROPERTY,pretendBuildId);
  Path modulePath=Paths.get("module/submodule");
  String modulePathArg=String.format("-D%s=%s",JUnitStep.MODULE_BASE_PATH_PROPERTY,modulePath);
  Path directoryForTestResults=Paths.get("buck-out/gen/theresults/");
  Path directoryForTemp=Paths.get("buck-out/gen/thetmp/");
  boolean isCodeCoverageEnabled=false;
  boolean isDebugEnabled=false;
  Path testRunnerClasspath=Paths.get("build/classes/junit");
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  JUnitStep junit=new JUnitStep(filesystem.getRootPath(),classpathEntries,testClassNames,vmArgs,ImmutableMap.<String,String>of(),directoryForTestResults,modulePath,directoryForTemp,isCodeCoverageEnabled,isDebugEnabled,pretendBuildId,TestSelectorList.empty(),false,TestType.JUNIT,testRunnerClasspath,Optional.<Long>absent(),Optional.<Level>absent(),Optional.<Level>absent());
  ExecutionContext executionContext=EasyMock.createMock(ExecutionContext.class);
  EasyMock.expect(executionContext.getProjectFilesystem()).andReturn(filesystem).anyTimes();
  EasyMock.expect(executionContext.getVerbosity()).andReturn(Verbosity.ALL);
  EasyMock.expect(executionContext.getDefaultTestTimeoutMillis()).andReturn(5000L);
  EasyMock.replay(executionContext);
  List<String> observedArgs=junit.getShellCommand(executionContext);
  MoreAsserts.assertListEquals(ImmutableList.of("java","-Djava.io.tmpdir=" + filesystem.resolve(directoryForTemp),"-Dbuck.testrunner_classes=" + testRunnerClasspath,buildIdArg,modulePathArg,vmArg1,vmArg2,"-verbose","-classpath",Joiner.on(File.pathSeparator).join("@" + filesystem.resolve(junit.getClassPathFile()),Paths.get("build/classes/junit")),FileClassPathRunner.class.getName(),JUnitStep.JUNIT_TEST_RUNNER_CLASS_NAME,directoryForTestResults.toString(),"5000","","",testClass1,testClass2),observedArgs);
  EasyMock.verify(executionContext);
}
