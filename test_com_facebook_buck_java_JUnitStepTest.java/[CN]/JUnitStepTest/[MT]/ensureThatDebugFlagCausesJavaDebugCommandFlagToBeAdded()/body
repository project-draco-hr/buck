{
  Set<Path> classpathEntries=ImmutableSet.of(Paths.get("foo"),Paths.get("bar/baz"));
  String testClass1="com.facebook.buck.shell.JUnitCommandTest";
  String testClass2="com.facebook.buck.shell.InstrumentCommandTest";
  Set<String> testClassNames=ImmutableSet.of(testClass1,testClass2);
  String vmArg1="-Dname1=value1";
  String vmArg2="-Dname1=value2";
  List<String> vmArgs=ImmutableList.of(vmArg1,vmArg2);
  BuildId pretendBuildId=new BuildId("pretend-build-id");
  String buildIdArg=String.format("-D%s=%s",JUnitStep.BUILD_ID_PROPERTY,pretendBuildId);
  Path directoryForTestResults=Paths.get("buck-out/gen/theresults/");
  Path directoryForTemp=Paths.get("buck-out/gen/thetmp/");
  boolean isCodeCoverageEnabled=false;
  boolean isDebugEnabled=true;
  Path testRunnerClasspath=Paths.get("build/classes/junit");
  JUnitStep junit=new JUnitStep(classpathEntries,testClassNames,vmArgs,directoryForTestResults,directoryForTemp,isCodeCoverageEnabled,isDebugEnabled,pretendBuildId,TestSelectorList.empty(),false,TestType.JUNIT,testRunnerClasspath,Optional.<Long>absent());
  TestConsole console=new TestConsole();
  console.setVerbosity(Verbosity.ALL);
  ExecutionContext executionContext=TestExecutionContext.newBuilder().setConsole(console).setDebugEnabled(true).build();
  List<String> observedArgs=junit.getShellCommand(executionContext);
  MoreAsserts.assertListEquals(ImmutableList.of("java","-Djava.io.tmpdir=" + directoryForTemp,"-Dbuck.testrunner_classes=" + testRunnerClasspath,buildIdArg,"-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005",vmArg1,vmArg2,"-verbose","-classpath",Joiner.on(File.pathSeparator).join("foo","bar/baz","build/classes/junit"),JUnitStep.JUNIT_TEST_RUNNER_CLASS_NAME,directoryForTestResults.toString(),"0","","",testClass1,testClass2),observedArgs);
  assertEquals("Debugging. Suspending JVM. Connect a JDWP debugger to port 5005 to proceed.",console.getTextWrittenToStdErr().trim());
}
