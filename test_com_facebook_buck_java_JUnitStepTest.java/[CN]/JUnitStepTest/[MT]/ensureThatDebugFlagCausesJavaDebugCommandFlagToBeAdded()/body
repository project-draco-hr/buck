{
  Set<String> classpathEntries=ImmutableSet.of("foo","bar/baz");
  String testClass1="com.facebook.buck.shell.JUnitCommandTest";
  String testClass2="com.facebook.buck.shell.InstrumentCommandTest";
  Set<String> testClassNames=ImmutableSet.of(testClass1,testClass2);
  String vmArg1="-Dname1=value1";
  String vmArg2="-Dname1=value2";
  List<String> vmArgs=ImmutableList.of(vmArg1,vmArg2);
  String directoryForTestResults="buck-gen/theresults/";
  boolean isCodeCoverageEnabled=false;
  boolean isDebugEnabled=true;
  String testRunnerClassesDirectory="build/classes/junit";
  JUnitStep junit=new JUnitStep(classpathEntries,testClassNames,vmArgs,directoryForTestResults,isCodeCoverageEnabled,isDebugEnabled,testRunnerClassesDirectory);
  CapturingPrintStream stderr=new CapturingPrintStream();
  PrintStream stdout=EasyMock.createNiceMock(PrintStream.class);
  ExecutionContext executionContext=ExecutionContext.builder().setVerbosity(Verbosity.ALL).setProjectFilesystem(EasyMock.createMock(ProjectFilesystem.class)).setConsole(new Console(stdout,stderr,Ansi.withoutTty())).setDebugEnabled(true).build();
  EasyMock.replay(stdout);
  List<String> observedArgs=junit.getShellCommand(executionContext);
  MoreAsserts.assertListEquals(ImmutableList.of("java","-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005",vmArg1,vmArg2,"-verbose","-classpath","foo:bar/baz:build/classes/junit",JUnitStep.JUNIT_TEST_RUNNER_CLASS_NAME,directoryForTestResults,"0",testClass1,testClass2),observedArgs);
  assertEquals("Debugging. Suspending JVM. Connect a JDWP debugger to port 5005 to proceed.",stderr.getContentsAsString(UTF_8).trim());
}
