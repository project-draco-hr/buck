{
  Map<String,String> environment=new HashMap<>(System.getenv());
  if (env.isPresent()) {
    environment.putAll(env.get());
  }
  ProcessExecutorParams params=ProcessExecutorParams.builder().setCommand(command).setDirectory(workingDirectory).setEnvironment(environment).setRedirectOutput(ProcessBuilder.Redirect.to(filesystem.resolve(output).toFile())).setRedirectErrorStream(true).build();
  ProcessExecutor.Result result;
  try {
    ProcessExecutor executor=context.getProcessExecutor();
    ImmutableSet<ProcessExecutor.Option> options=ImmutableSet.of(ProcessExecutor.Option.EXPECTING_STD_OUT);
    result=executor.launchAndExecute(params,options,Optional.<String>absent(),testRuleTimeoutMs,Optional.<Function<Process,Void>>absent());
  }
 catch (  IOException e) {
    context.logError(e,"Error starting command %s",command);
    return StepExecutionResult.ERROR;
  }
  if (result.isTimedOut()) {
    throw new HumanReadableException("Timed out after %d ms running test command %s",testRuleTimeoutMs.or(-1L),command);
  }
  try (FileOutputStream fileOut=new FileOutputStream(filesystem.resolve(exitCode).toFile());ObjectOutputStream objectOut=new ObjectOutputStream(fileOut)){
    objectOut.writeInt(result.getExitCode());
  }
 catch (  IOException e) {
    context.logError(e,"Error saving exit code to %s",exitCode);
    return StepExecutionResult.ERROR;
  }
  return StepExecutionResult.SUCCESS;
}
