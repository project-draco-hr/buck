{
  return executorService.submit(new Callable<Void>(){
    @Override public Void call() throws IOException {
      Map<String,ByteBuffer> sha1ToFileContents=new HashMap<>();
      for (      BuildJobStateFileHashes filesystem : fileHashes) {
        if (!filesystem.isSetEntries()) {
          continue;
        }
        for (        BuildJobStateFileHashEntry file : filesystem.entries) {
          sha1ToFileContents.put(file.hashCode,file.contents);
        }
      }
      List<String> contentHashes=ImmutableList.copyOf(sha1ToFileContents.keySet());
      CASContainsRequest containsReq=new CASContainsRequest();
      containsReq.setContentSha1s(contentHashes);
      FrontendRequest request=new FrontendRequest();
      request.setType(FrontendRequestType.CAS_CONTAINS);
      request.setCasContainsRequest(containsReq);
      FrontendResponse response=makeRequestChecked(request);
      Preconditions.checkState(response.getCasContainsResponse().exists.size() == contentHashes.size());
      List<Boolean> isPresent=response.getCasContainsResponse().exists;
      List<FileInfo> filesToBeUploaded=new LinkedList<>();
      for (int i=0; i < isPresent.size(); ++i) {
        if (!isPresent.get(i)) {
          FileInfo file=new FileInfo();
          file.setContentHash(contentHashes.get(i));
          file.setContent(sha1ToFileContents.get(contentHashes.get(i)));
          filesToBeUploaded.add(file);
        }
      }
      request=new FrontendRequest();
      StoreLocalChangesRequest storeReq=new StoreLocalChangesRequest();
      storeReq.setFiles(filesToBeUploaded);
      request.setType(FrontendRequestType.STORE_LOCAL_CHANGES);
      request.setStoreLocalChangesRequest(storeReq);
      makeRequestChecked(request);
      return null;
    }
  }
);
}
