{
  ImmutableMultimap.Builder<APKModule,DexWithClasses> dexFilesToMergeBuilder=ImmutableMultimap.builder();
  dexFilesToMergeBuilder.putAll(FluentIterable.from(preDexDeps.entries()).transform(new Function<Map.Entry<APKModule,DexProducedFromJavaLibrary>,Map.Entry<APKModule,DexWithClasses>>(){
    @Override public Map.Entry<APKModule,DexWithClasses> apply(    Map.Entry<APKModule,DexProducedFromJavaLibrary> input){
      return new AbstractMap.SimpleEntry<>(input.getKey(),DexWithClasses.TO_DEX_WITH_CLASSES.apply(input.getValue()));
    }
  }
).filter(new Predicate<Map.Entry<APKModule,DexWithClasses>>(){
    @Override public boolean apply(    Map.Entry<APKModule,DexWithClasses> input){
      return input.getValue() != null;
    }
  }
).toSet());
  final SplitDexPaths paths=new SplitDexPaths();
  final ImmutableSet.Builder<Path> secondaryDexDirectories=ImmutableSet.builder();
  if (dexSplitMode.getDexStore() == DexStore.RAW) {
    secondaryDexDirectories.add(paths.jarfilesSubdir);
  }
 else {
    secondaryDexDirectories.add(paths.metadataDir);
    secondaryDexDirectories.add(paths.jarfilesDir);
  }
  secondaryDexDirectories.add(paths.additionalJarfilesDir);
  steps.add(new MkdirStep(getProjectFilesystem(),paths.jarfilesSubdir));
  steps.add(new MkdirStep(getProjectFilesystem(),paths.additionalJarfilesSubdir));
  steps.add(new MkdirStep(getProjectFilesystem(),paths.successDir));
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),paths.metadataSubdir));
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),paths.scratchDir));
  buildableContext.addMetadata(SECONDARY_DEX_DIRECTORIES_KEY,FluentIterable.from(secondaryDexDirectories.build()).transform(Functions.toStringFunction()).toList());
  buildableContext.recordArtifact(primaryDexPath);
  buildableContext.recordArtifact(paths.jarfilesSubdir);
  buildableContext.recordArtifact(paths.metadataSubdir);
  buildableContext.recordArtifact(paths.successDir);
  buildableContext.recordArtifact(paths.additionalJarfilesSubdir);
  PreDexedFilesSorter preDexedFilesSorter=new PreDexedFilesSorter(Optional.fromNullable(DexWithClasses.TO_DEX_WITH_CLASSES.apply(dexForUberRDotJava)),dexFilesToMergeBuilder.build(),dexSplitMode.getPrimaryDexPatterns(),apkModuleGraph,paths.scratchDir,dexSplitMode.getLinearAllocHardLimit(),dexSplitMode.getDexStore(),paths.jarfilesSubdir,paths.additionalJarfilesSubdir);
  final ImmutableMap<String,PreDexedFilesSorter.Result> sortResults=preDexedFilesSorter.sortIntoPrimaryAndSecondaryDexes(context,getProjectFilesystem(),steps);
  PreDexedFilesSorter.Result rootApkModuleResult=sortResults.get(APKModuleGraph.ROOT_APKMODULE_NAME);
  if (rootApkModuleResult == null) {
    throw new HumanReadableException("No classes found in primary or secondary dexes");
  }
  Multimap<Path,Path> aggregatedOutputToInputs=HashMultimap.create();
  ImmutableMap.Builder<Path,Sha1HashCode> dexInputHashesBuilder=ImmutableMap.builder();
  for (  PreDexedFilesSorter.Result result : sortResults.values()) {
    if (!result.apkModule.equals(apkModuleGraph.getRootAPKModule())) {
      Path dexOutputPath=paths.additionalJarfilesSubdir.resolve(result.apkModule.getName());
      steps.add(new MkdirStep(getProjectFilesystem(),dexOutputPath));
    }
    aggregatedOutputToInputs.putAll(result.secondaryOutputToInputs);
    dexInputHashesBuilder.putAll(result.dexInputHashes);
  }
  final ImmutableMap<Path,Sha1HashCode> dexInputHashes=dexInputHashesBuilder.build();
  steps.add(new SmartDexingStep(getProjectFilesystem(),primaryDexPath,Suppliers.ofInstance(rootApkModuleResult.primaryDexInputs),Optional.of(paths.jarfilesSubdir),Optional.of(Suppliers.ofInstance(aggregatedOutputToInputs)),new SmartDexingStep.DexInputHashesProvider(){
    @Override public ImmutableMap<Path,Sha1HashCode> getDexInputHashes(){
      return dexInputHashes;
    }
  }
,paths.successDir,DX_MERGE_OPTIONS,dxExecutorService,xzCompressionLevel));
  steps.add(new RecordFileSha1Step(getProjectFilesystem(),primaryDexPath,PRIMARY_DEX_HASH_KEY,buildableContext));
  for (  PreDexedFilesSorter.Result result : sortResults.values()) {
    if (!result.apkModule.equals(apkModuleGraph.getRootAPKModule())) {
      Path dexMetadataOutputPath=paths.additionalJarfilesSubdir.resolve(result.apkModule.getName()).resolve("metadata.txt");
      addMetadataWriteStep(result,steps,dexMetadataOutputPath);
    }
  }
  addMetadataWriteStep(rootApkModuleResult,steps,paths.metadataFile);
}
