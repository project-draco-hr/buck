{
  ImmutableList<DexWithClasses> dexFilesToMerge=FluentIterable.from(preDexDeps).transform(DexWithClasses.TO_DEX_WITH_CLASSES).filter(Predicates.notNull()).toList();
  final SplitDexPaths paths=new SplitDexPaths();
  final ImmutableSet<Path> secondaryDexDirectories=ImmutableSet.of(paths.metadataDir,paths.jarfilesDir);
  steps.add(new MkdirStep(paths.jarfilesSubdir));
  steps.add(new MkdirStep(paths.successDir));
  steps.add(new MakeCleanDirectoryStep(paths.metadataSubdir));
  steps.add(new MakeCleanDirectoryStep(paths.scratchDir));
  buildableContext.addMetadata(SECONDARY_DEX_DIRECTORIES_KEY,Iterables.transform(secondaryDexDirectories,Functions.toStringFunction()));
  buildableContext.recordArtifact(primaryDexPath);
  buildableContext.recordArtifactsInDirectory(paths.jarfilesSubdir);
  buildableContext.recordArtifactsInDirectory(paths.metadataSubdir);
  buildableContext.recordArtifactsInDirectory(paths.successDir);
  PreDexedFilesSorter preDexedFilesSorter=new PreDexedFilesSorter(uberRDotJava.getRDotJavaDexWithClasses(),dexFilesToMerge,dexSplitMode.getPrimaryDexPatterns(),paths.scratchDir,dexSplitMode.getLinearAllocHardLimit(),dexSplitMode.getDexStore(),paths.jarfilesSubdir);
  final PreDexedFilesSorter.Result sortResult=preDexedFilesSorter.sortIntoPrimaryAndSecondaryDexes(context,steps);
  steps.add(new SmartDexingStep(primaryDexPath,Suppliers.ofInstance(sortResult.primaryDexInputs),Optional.of(paths.jarfilesSubdir),Optional.of(Suppliers.ofInstance(sortResult.secondaryOutputToInputs)),sortResult.dexInputHashesProvider,paths.successDir,Optional.<Integer>absent(),AndroidBinary.DX_MERGE_OPTIONS));
  steps.add(new RecordFileSha1Step(primaryDexPath,PRIMARY_DEX_HASH_KEY,buildableContext));
  steps.add(new AbstractExecutionStep("write_metadata_txt"){
    @Override public int execute(    ExecutionContext executionContext){
      ProjectFilesystem filesystem=executionContext.getProjectFilesystem();
      Map<Path,DexWithClasses> metadataTxtEntries=sortResult.metadataTxtDexEntries;
      List<String> lines=Lists.newArrayListWithCapacity(metadataTxtEntries.size());
      try {
        for (        Map.Entry<Path,DexWithClasses> entry : metadataTxtEntries.entrySet()) {
          Path pathToSecondaryDex=entry.getKey();
          String containedClass=Iterables.get(entry.getValue().getClassNames(),0);
          containedClass=containedClass.replace('/','.');
          String hash=filesystem.computeSha1(pathToSecondaryDex);
          lines.add(String.format("%s %s %s",pathToSecondaryDex.getFileName(),hash,containedClass));
        }
        filesystem.writeLinesToPath(lines,paths.metadataFile);
      }
 catch (      IOException e) {
        executionContext.logError(e,"Failed when writing metadata.txt multi-dex.");
        return 1;
      }
      return 0;
    }
  }
);
}
