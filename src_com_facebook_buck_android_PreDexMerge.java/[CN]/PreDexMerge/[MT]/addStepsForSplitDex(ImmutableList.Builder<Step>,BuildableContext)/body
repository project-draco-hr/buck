{
  ImmutableList<DexWithClasses> dexFilesToMerge=FluentIterable.from(preDexDeps).transform(DexWithClasses.TO_DEX_WITH_CLASSES).filter(Predicates.notNull()).toList();
  Path secondaryDexScratchDir=BuildTargets.getBinPath(buildTarget,"__%s_secondary_dex__");
  Path secondaryDexMetadataScratchDir=secondaryDexScratchDir.resolve("metadata");
  Path secondaryDexJarFilesScratchDir=secondaryDexScratchDir.resolve("jarfiles");
  final ImmutableSet<Path> secondaryDexDirectories=ImmutableSet.of(secondaryDexMetadataScratchDir,secondaryDexJarFilesScratchDir);
  final Path secondaryDexMetadataDir=secondaryDexMetadataScratchDir.resolve(AndroidBinaryRule.SECONDARY_DEX_SUBDIR);
  final Path secondaryDexJarFilesDir=secondaryDexJarFilesScratchDir.resolve(AndroidBinaryRule.SECONDARY_DEX_SUBDIR);
  steps.add(new MakeCleanDirectoryStep(secondaryDexMetadataDir));
  steps.add(new MkdirStep(secondaryDexJarFilesDir));
  Path preDexScratchDir=secondaryDexScratchDir.resolve("__bucket_pre_dex__");
  steps.add(new MakeCleanDirectoryStep(preDexScratchDir));
  Path successDir=BuildTargets.getBinPath(buildTarget,"__%s_merge_pre_dex__/.success");
  steps.add(new MkdirStep(successDir));
  buildableContext.addMetadata(SECONDARY_DEX_DIRECTORIES_KEY,Iterables.transform(secondaryDexDirectories,Functions.toStringFunction()));
  buildableContext.recordArtifact(primaryDexPath);
  buildableContext.recordArtifactsInDirectory(secondaryDexJarFilesDir);
  buildableContext.recordArtifactsInDirectory(secondaryDexMetadataDir);
  buildableContext.recordArtifactsInDirectory(successDir);
  final BucketPreDexedFilesStep bucketPreDexedFilesStep=new BucketPreDexedFilesStep(uberRDotJava.getRDotJavaDexWithClasses(),dexFilesToMerge,dexSplitMode.getPrimaryDexPatterns(),preDexScratchDir,dexSplitMode.getLinearAllocHardLimit(),dexSplitMode.getDexStore(),secondaryDexJarFilesDir);
  steps.add(bucketPreDexedFilesStep);
  steps.add(new SmartDexingStep(primaryDexPath,bucketPreDexedFilesStep.getPrimaryDexInputsSupplier(),Optional.of(secondaryDexJarFilesDir),Optional.of(bucketPreDexedFilesStep.getSecondaryOutputToInputsSupplier()),successDir,Optional.<Integer>absent(),AndroidBinaryRule.DX_MERGE_OPTIONS));
  steps.add(new AbstractExecutionStep("write_metadata_txt"){
    @Override public int execute(    ExecutionContext executionContext){
      ProjectFilesystem filesystem=executionContext.getProjectFilesystem();
      Map<Path,DexWithClasses> metadataTxtEntries=bucketPreDexedFilesStep.getMetadataTxtEntries();
      List<String> lines=Lists.newArrayListWithCapacity(metadataTxtEntries.size());
      try {
        for (        Map.Entry<Path,DexWithClasses> entry : metadataTxtEntries.entrySet()) {
          Path pathToSecondaryDex=entry.getKey();
          String containedClass=Iterables.get(entry.getValue().getClassNames(),0);
          containedClass=containedClass.replace('/','.');
          String hash=filesystem.computeSha1(pathToSecondaryDex);
          lines.add(String.format("%s %s %s",pathToSecondaryDex.getFileName(),hash,containedClass));
        }
        filesystem.writeLinesToPath(lines,secondaryDexMetadataDir.resolve("metadata.txt"));
      }
 catch (      IOException e) {
        executionContext.logError(e,"Failed when writing metadata.txt multi-dex.");
        return 1;
      }
      return 0;
    }
  }
);
}
