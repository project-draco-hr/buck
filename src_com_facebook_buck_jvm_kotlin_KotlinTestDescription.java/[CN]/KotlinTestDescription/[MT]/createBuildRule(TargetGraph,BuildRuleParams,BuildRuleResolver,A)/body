{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  BuildTarget abiJarTarget=BuildTarget.builder(params.getBuildTarget()).addFlavors(CalculateAbi.FLAVOR).build();
  KotlincToJarStepFactory stepFactory=new KotlincToJarStepFactory(kotlinBuckConfig.getKotlinCompiler().get(),args.extraKotlincArguments.get());
  JavaTest test=resolver.addToIndex(new JavaTest(params.appendExtraDeps(Iterables.concat(BuildRules.getExportedRules(Iterables.concat(params.getDeclaredDeps().get(),resolver.getAllRules(args.providedDeps.get()))),pathResolver.filterBuildRuleInputs(defaultJavacOptions.getInputs(pathResolver)))),pathResolver,args.srcs.get(),ResourceValidator.validateResources(pathResolver,params.getProjectFilesystem(),args.resources.get()),defaultJavacOptions.getGeneratedSourceFolderName(),args.labels.get(),args.contacts.get(),Optional.<SourcePath>absent(),new BuildTargetSourcePath(abiJarTarget),false,ImmutableSet.<Path>of(),args.testType.or(TestType.JUNIT),stepFactory,javaOptions.getJavaRuntimeLauncher(),args.vmArgs.get(),ImmutableMap.<String,String>of(),ImmutableSet.<BuildRule>of(),Optional.<Path>absent(),Optional.<String>absent(),args.testRuleTimeoutMs.or(defaultTestRuleTimeoutMs),args.env.get(),args.getRunTestSeparately(),args.stdOutLogLevel,args.stdErrLogLevel));
  resolver.addToIndex(CalculateAbi.of(abiJarTarget,pathResolver,params,new BuildTargetSourcePath(test.getBuildTarget())));
  return test;
}
