{
  projectBuildFileParseEventStarted=new ProjectBuildFileParseEvents.Started();
  buckEventBus.post(projectBuildFileParseEventStarted);
  try (SimplePerfEvent.Scope scope=SimplePerfEvent.scope(buckEventBus,PerfEventId.of("ParserInit"))){
    ProcessExecutorParams params=ProcessExecutorParams.builder().setCommand(buildArgs()).setEnvironment(environment).build();
    LOG.debug("Starting buck.py command: %s environment: %s",params.getCommand(),params.getEnvironment());
    buckPyProcess=processExecutor.launchProcess(params);
    LOG.debug("Started process %s successfully",buckPyProcess);
    OutputStream stdin=buckPyProcess.getOutputStream();
    InputStream stderr=buckPyProcess.getErrorStream();
    InputStreamConsumer stderrConsumer=new InputStreamConsumer(stderr,new InputStreamConsumer.Handler(){
      @Override public void handleLine(      String line){
        buckEventBus.post(ConsoleEvent.warning("Warning raised by BUCK file parser: %s",line));
      }
    }
);
    stderrConsumerTerminationFuture=new FutureTask<>(stderrConsumer);
    stderrConsumerThread=Threads.namedThread(ProjectBuildFileParser.class.getSimpleName(),stderrConsumerTerminationFuture);
    stderrConsumerThread.start();
    buckPyStdinWriter=new BufferedWriter(new OutputStreamWriter(stdin));
  }
 }
