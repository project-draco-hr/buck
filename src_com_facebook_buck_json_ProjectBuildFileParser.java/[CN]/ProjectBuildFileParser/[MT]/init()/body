{
  projectBuildFileParseEventStarted=new ProjectBuildFileParseEvents.Started();
  buckEventBus.post(projectBuildFileParseEventStarted);
  ProcessExecutorParams params=ProcessExecutorParams.builder().setCommand(buildArgs()).setEnvironment(environment).build();
  LOG.debug("Starting buck.py command: %s environment: %s",params.getCommand(),params.getEnvironment());
  buckPyProcess=processExecutor.launchProcess(params);
  LOG.debug("Started process %s successfully",buckPyProcess);
  OutputStream stdin=buckPyProcess.getOutputStream();
  InputStream stderr=buckPyProcess.getErrorStream();
  stderrConsumer=Threads.namedThread(ProjectBuildFileParser.class.getSimpleName(),new InputStreamConsumer(stderr,console.getStdErr(),console.getAnsi(),true,Optional.<InputStreamConsumer.Handler>of(new InputStreamConsumer.Handler(){
    @Override public void handleLine(    String line){
      LOG.warn("buck.py warning: %s",line);
    }
  }
)));
  stderrConsumer.start();
  buckPyStdinWriter=new BufferedWriter(new OutputStreamWriter(stdin));
  Reader reader=new InputStreamReader(buckPyProcess.getInputStream(),Charsets.UTF_8);
  BufferedReader bufferedReader=new BufferedReader(reader);
  String format=bufferedReader.readLine();
  if (format == null) {
    throw new RuntimeException("Cannot determine buck.py output format");
  }
  buckPyOutputFormat=BuckPyOutputFormat.valueOf(format);
  if (buckPyOutputFormat == BuckPyOutputFormat.JSON) {
    buckPyStdoutParser=new BuildFileToJsonParser(reader);
  }
}
