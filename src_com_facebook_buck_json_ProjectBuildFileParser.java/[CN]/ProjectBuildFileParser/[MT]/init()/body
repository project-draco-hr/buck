{
  buckEventBus.post(new ProjectBuildFileParseEvents.Started());
  ProcessBuilder processBuilder=new ProcessBuilder(buildArgs());
  processBuilder.environment().clear();
  processBuilder.environment().putAll(environment);
  String pythonPath=environment.get("PYTHONPATH");
  String pathlibPyDir=PATH_TO_PATHLIB_PY.getParent().toString();
  if (pythonPath == null) {
    pythonPath=pathlibPyDir;
  }
 else {
    pythonPath=pythonPath + ":" + pathlibPyDir;
  }
  processBuilder.environment().put("PYTHONPATH",pythonPath);
  LOG.debug("Starting buck.py command: %s environment: %s",processBuilder.command(),processBuilder.environment());
  buckPyProcess=processBuilder.start();
  LOG.debug("Started process %s successfully",buckPyProcess);
  OutputStream stdin=buckPyProcess.getOutputStream();
  InputStream stderr=buckPyProcess.getErrorStream();
  stderrConsumer=Threads.namedThread(ProjectBuildFileParser.class.getSimpleName(),new InputStreamConsumer(stderr,console.getStdErr(),console.getAnsi(),true,Optional.<InputStreamConsumer.Handler>of(new InputStreamConsumer.Handler(){
    @Override public void handleLine(    String line){
      LOG.warn("buck.py warning: %s",line);
    }
  }
)));
  stderrConsumer.start();
  buckPyStdinWriter=new BufferedWriter(new OutputStreamWriter(stdin));
  Reader reader=new InputStreamReader(buckPyProcess.getInputStream(),Charsets.UTF_8);
  buckPyStdoutParser=new BuildFileToJsonParser(reader,isServerMode);
}
