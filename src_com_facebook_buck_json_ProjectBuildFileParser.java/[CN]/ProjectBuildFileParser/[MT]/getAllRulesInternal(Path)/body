{
  ensureNotClosed();
  initIfNeeded();
  Preconditions.checkNotNull(buckPyStdinWriter);
  Preconditions.checkNotNull(buckPyProcess);
  ParseBuckFileEvent.Started parseBuckFileStarted=ParseBuckFileEvent.started(buildFile);
  buckEventBus.post(parseBuckFileStarted);
  List<Map<String,Object>> values=null;
  String profile="";
  try (AssertScopeExclusiveAccess.Scope scope=assertSingleThreadedParsing.scope()){
    String buildFileString=buildFile.toString();
    LOG.verbose("Writing to buck.py stdin: %s",buildFileString);
    buckPyStdinWriter.write(buildFileString);
    buckPyStdinWriter.newLine();
    buckPyStdinWriter.flush();
    LOG.debug("Parsing output of process %s...",buckPyProcess);
    Object deserializedValue;
    try {
      deserializedValue=bserDeserializer.deserializeBserValue(buckPyProcess.getInputStream());
    }
 catch (    BserDeserializer.BserEofException e) {
      LOG.warn(e,"Parser exited while decoding BSER data");
      throw new IOException("Parser exited unexpectedly",e);
    }
    BuildFilePythonResult resultObject=handleDeserializedValue(deserializedValue);
    handleDiagnostics(buildFile,resultObject.getDiagnostics(),buckEventBus);
    values=resultObject.getValues();
    LOG.verbose("Got rules: %s",values);
    LOG.debug("Parsed %d rules from process",values.size());
    profile=resultObject.getProfile();
    return values;
  }
  finally {
    buckEventBus.post(ParseBuckFileEvent.finished(parseBuckFileStarted,values,profile));
  }
}
