def configure_clp():
    usage = '%prog [options]\n\n%prog builds a PEX (Python Executable) file based on the given specifications: sources, requirements, their dependencies and other options'
    parser = OptionParser(usage=usage, version='%prog 0.2')
    parser.add_option('--pypi', '--no-pypi', dest='pypi', default=True, action='callback', callback=parse_bool, help='Whether to use pypi to resolve dependencies; Default: use pypi')
    parser.add_option('--wheel', '--no-wheel', dest='use_wheel', default=True, action='callback', callback=parse_bool, help='Whether to allow wheel distributions; Default: allow wheels')
    parser.add_option('--build', '--no-build', dest='allow_builds', default=True, action='callback', callback=parse_bool, help='Whether to allow building of distributions from source; Default: allow builds')
    parser.add_option('--python', dest='python', default=None, help='The Python interpreter to use to build the pex.  Either specify an explicit path to an interpreter, or specify a binary accessible on $PATH. Default: Use current interpreter.')
    parser.add_option('--platform', dest='platform', default=Platform.current(), help='The platform for which to build the PEX.  Default: %%default')
    parser.add_option('--zip-safe', '--not-zip-safe', dest='zip_safe', default=True, action='callback', callback=parse_bool, help='Whether or not the sources in the pex file are zip safe.  If they are not zip safe, they will be written to disk prior to execution; Default: zip safe.')
    parser.add_option('--always-write-cache', dest='always_write_cache', default=False, action='store_true', help='Always write the internally cached distributions to disk prior to invoking the pex source code.  This can use less memory in RAM constrained environments. [Default: %default]')
    parser.add_option('--ignore-errors', dest='ignore_errors', default=False, action='store_true', help='Ignore run-time requirement resolution errors when invoking the pex. [Default: %default]')
    parser.add_option('--inherit-path', dest='inherit_path', default=False, action='store_true', help='Inherit the contents of sys.path (including site-packages) running the pex. [Default: %default]')
    parser.add_option('--cache-dir', dest='cache_dir', default=os.path.expanduser('~/.pex/build'), help='The local cache directory to use for speeding up requirement lookups; [Default: %default]')
    parser.add_option('-o', '-p', '--output-file', '--pex-name', dest='pex_name', default=None, help='The name of the generated .pex file: Omiting this will run PEX immediately and not save it to a file.')
    parser.add_option('-e', '--entry-point', dest='entry_point', default=None, help='The entry point for this pex; Omiting this will enter the python REPL with sources and requirements available for import.  Can be either a module or EntryPoint (module:function) format.')
    parser.add_option('-r', '--requirement', dest='requirements', metavar='REQUIREMENT', default=[], action='append', help='requirement to be included; may be specified multiple times.')
    parser.add_option('--repo', dest='repos', metavar='PATH', default=[], action='append', help='Additional repository path (directory or URL) to look for requirements.')
    parser.add_option('-s', '--source-dir', dest='source_dirs', metavar='DIR', default=[], action='append', help='Source to be packaged; This <DIR> should be a pip-installable project with a setup.py.')
    parser.add_option('-v', '--verbosity', dest='verbosity', default=False, action='store_true', help='Turn on logging verbosity.')
    return parser
