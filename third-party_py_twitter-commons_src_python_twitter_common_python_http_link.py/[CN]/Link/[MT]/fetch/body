def fetch(self, location=None, conn_timeout=None):
    'Fetches the link returning the local file path.\n\n    :raises UnreadableLink: if the link could not be fetched.\n    '
    if (self.local and ((location is None) or (os.path.dirname(self._url.path) == location))):
        return self._url.path
    location = (location or safe_mkdtemp())
    target = os.path.join(location, self.filename)
    if os.path.exists(target):
        return target
    try:
        with contextlib.closing(self.fh(conn_timeout=conn_timeout)) as url_fp:
            safe_mkdir(os.path.dirname(target))
            with open(target, 'wb') as fp:
                fp.write(url_fp.read())
    except (FetchError, IOError) as e:
        raise self.UnreadableLink(('Failed to fetch %s to %s: %s' % (self.url, location, e)))
    return target
