{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  if (params.getBuildTarget().getFlavors().contains(JavaLibrary.SRC_JAR)) {
    return new JavaSourceJar(params,pathResolver,args.srcs.get(),args.mavenCoords);
  }
  JavacOptions.Builder javacOptionsBuilder=JavaLibraryDescription.getJavacOptions(pathResolver,args,defaultOptions);
  AnnotationProcessingParams annotationParams=args.buildAnnotationProcessingParams(params.getBuildTarget(),params.getProjectFilesystem(),resolver);
  javacOptionsBuilder.setAnnotationProcessingParams(annotationParams);
  JavacOptions javacOptions=javacOptionsBuilder.build();
  AndroidLibraryGraphEnhancer graphEnhancer=new AndroidLibraryGraphEnhancer(params.getBuildTarget(),params.copyWithExtraDeps(Suppliers.ofInstance(resolver.getAllRules(args.exportedDeps.get()))),javacOptions,ResourceDependencyMode.FIRST_ORDER);
  boolean hasDummyRDotJavaFlavor=params.getBuildTarget().getFlavors().contains(DUMMY_R_DOT_JAVA_FLAVOR);
  Optional<DummyRDotJava> dummyRDotJava=graphEnhancer.getBuildableForAndroidResources(resolver,hasDummyRDotJavaFlavor);
  if (hasDummyRDotJavaFlavor) {
    return dummyRDotJava.get();
  }
 else {
    ImmutableSet<Path> additionalClasspathEntries=ImmutableSet.of();
    if (dummyRDotJava.isPresent()) {
      additionalClasspathEntries=ImmutableSet.of(dummyRDotJava.get().getRDotJavaBinFolder());
      ImmutableSortedSet<BuildRule> newDeclaredDeps=ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getDeclaredDeps()).add(dummyRDotJava.get()).build();
      params=params.copyWithDeps(Suppliers.ofInstance(newDeclaredDeps),Suppliers.ofInstance(params.getExtraDeps()));
    }
    ImmutableSortedSet<BuildRule> exportedDeps=resolver.getAllRules(args.exportedDeps.get());
    return new AndroidLibrary(params.appendExtraDeps(Iterables.concat(BuildRules.getExportedRules(Iterables.concat(params.getDeclaredDeps(),exportedDeps,resolver.getAllRules(args.providedDeps.get()))),pathResolver.filterBuildRuleInputs(javacOptions.getInputs(pathResolver)))),pathResolver,args.srcs.get(),JavaLibraryDescription.validateResources(pathResolver,args,params.getProjectFilesystem()),args.proguardConfig.transform(SourcePaths.toSourcePath(params.getProjectFilesystem())),args.postprocessClassesCommands.get(),exportedDeps,resolver.getAllRules(args.providedDeps.get()),additionalClasspathEntries,javacOptions,args.resourcesRoot,args.mavenCoords,args.manifest,false);
  }
}
