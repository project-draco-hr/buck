{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  if (params.getBuildTarget().getFlavors().contains(JavaLibrary.SRC_JAR)) {
    return new JavaSourceJar(params,pathResolver,args.srcs.get());
  }
  JavacOptions.Builder javacOptions=JavaLibraryDescription.getJavacOptions(args,defaultOptions);
  AnnotationProcessingParams annotationParams=args.buildAnnotationProcessingParams(params.getBuildTarget(),params.getProjectFilesystem(),resolver);
  javacOptions.setAnnotationProcessingParams(annotationParams);
  AndroidLibraryGraphEnhancer graphEnhancer=new AndroidLibraryGraphEnhancer(params.getBuildTarget(),params.copyWithExtraDeps(resolver.getAllRules(args.exportedDeps.get())),javacOptions.build(),ResourceDependencyMode.FIRST_ORDER);
  Optional<DummyRDotJava> dummyRDotJava=graphEnhancer.createBuildableForAndroidResources(resolver,false);
  ImmutableSet<Path> additionalClasspathEntries=ImmutableSet.of();
  if (dummyRDotJava.isPresent()) {
    additionalClasspathEntries=ImmutableSet.of(dummyRDotJava.get().getRDotJavaBinFolder());
    ImmutableSortedSet<BuildRule> newDeclaredDeps=ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getDeclaredDeps()).add(dummyRDotJava.get()).build();
    params=params.copyWithDeps(newDeclaredDeps,params.getExtraDeps());
  }
  return new AndroidLibrary(params,pathResolver,args.srcs.get(),JavaLibraryDescription.validateResources(pathResolver,args,params.getProjectFilesystem()),args.proguardConfig,args.postprocessClassesCommands.get(),resolver.getAllRules(args.exportedDeps.get()),resolver.getAllRules(args.providedDeps.get()),additionalClasspathEntries,javacOptions.build(),args.resourcesRoot,args.manifest,false);
}
