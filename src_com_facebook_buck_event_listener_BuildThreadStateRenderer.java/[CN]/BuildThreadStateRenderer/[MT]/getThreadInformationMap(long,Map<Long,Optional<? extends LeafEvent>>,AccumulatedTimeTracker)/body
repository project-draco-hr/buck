{
  ImmutableMap.Builder<Long,ThreadRenderingInformation> threadInformationMapBuilder=ImmutableMap.builder();
  Map<Long,Optional<? extends BuildRuleEvent>> buildEventsByThread=accumulatedTimeTracker.getBuildEventsByThread();
  ImmutableList<Long> threadIds=ImmutableList.copyOf(buildEventsByThread.keySet());
  for (  long threadId : threadIds) {
    Optional<? extends BuildRuleEvent> buildRuleEvent=buildEventsByThread.get(threadId);
    if (buildRuleEvent == null) {
      continue;
    }
    Optional<BuildTarget> buildTarget=Optional.absent();
    if (buildRuleEvent.isPresent()) {
      buildTarget=Optional.of(buildRuleEvent.get().getBuildRule().getBuildTarget());
    }
    AtomicLong accumulatedTime=null;
    if (buildTarget.isPresent()) {
      accumulatedTime=accumulatedTimeTracker.getTime(buildTarget.get());
    }
    long elapsedTimeMs=0;
    if (buildRuleEvent.isPresent() && accumulatedTime != null) {
      elapsedTimeMs=currentTimeMs - buildRuleEvent.get().getTimestamp() + accumulatedTime.get();
    }
 else {
      buildRuleEvent=Optional.absent();
      buildTarget=Optional.absent();
    }
    Optional<? extends LeafEvent> runningStep=runningStepsByThread.get(threadId);
    if (runningStep == null) {
      runningStep=Optional.absent();
    }
    threadInformationMapBuilder.put(threadId,new ThreadRenderingInformation(buildTarget,buildRuleEvent,Optional.<TestSummaryEvent>absent(),Optional.<TestStatusMessageEvent>absent(),runningStep,elapsedTimeMs));
  }
  return threadInformationMapBuilder.build();
}
