{
  DocumentBuilder docBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
  Document doc=docBuilder.newDocument();
  doc.setXmlVersion("1.1");
  Element root=doc.createElement("testcase");
  root.setAttribute("name",testClassName);
  doc.appendChild(root);
  for (  TestResult result : results) {
    Element test=doc.createElement("test");
    test.setAttribute("name",result.testMethodName);
    boolean isSuccess=result.isSuccess();
    test.setAttribute("success",Boolean.toString(isSuccess));
    test.setAttribute("type",result.type.toString());
    long runTime=result.runTime;
    test.setAttribute("time",String.valueOf(runTime));
    Throwable failure=result.failure;
    if (failure != null) {
      String message=failure.getMessage();
      test.setAttribute("message",message);
      String stacktrace=stackTraceToString(failure);
      test.setAttribute("stacktrace",stacktrace);
    }
    if (result.stdOut != null) {
      Element stdOutEl=doc.createElement("stdout");
      stdOutEl.appendChild(doc.createTextNode(result.stdOut));
      test.appendChild(stdOutEl);
    }
    if (result.stdErr != null) {
      Element stdErrEl=doc.createElement("stderr");
      stdErrEl.appendChild(doc.createTextNode(result.stdErr));
      test.appendChild(stdErrEl);
    }
    root.appendChild(test);
  }
  String vendor=System.getProperty("java.vm.vendor");
  String factoryClass;
  if ("IBM Corporation".equals(vendor)) {
    factoryClass="com.ibm.xtq.xslt.jaxp.compiler.TransformerFactoryImpl";
  }
 else {
    factoryClass="com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl";
  }
  System.setProperty("javax.xml.transform.TransformerFactory",factoryClass);
  TransformerFactory transformerFactory=TransformerFactory.newInstance();
  Transformer trans=transformerFactory.newTransformer();
  trans.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,"no");
  trans.setOutputProperty(OutputKeys.INDENT,"yes");
  trans.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");
  String testSelectorSuffix="";
  if (!testSelectorList.isEmpty()) {
    testSelectorSuffix+=".test_selectors";
  }
  if (isDryRun) {
    testSelectorSuffix+=".dry_run";
  }
  OutputStream output;
  if (outputDirectory != null) {
    File outputFile=new File(outputDirectory,testClassName + testSelectorSuffix + ".xml");
    output=new BufferedOutputStream(new FileOutputStream(outputFile));
  }
 else {
    output=System.out;
  }
  StreamResult streamResult=new StreamResult(output);
  DOMSource source=new DOMSource(doc);
  trans.transform(source,streamResult);
  if (outputDirectory != null) {
    output.close();
  }
}
