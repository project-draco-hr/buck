{
  buildableContext.recordArtifact(output);
  if (linker instanceof HasLinkerMap) {
    buildableContext.recordArtifact(((HasLinkerMap)linker).linkerMapPath(output));
  }
  Path scratchDir=BuildTargets.getScratchPath(getProjectFilesystem(),getBuildTarget(),"%s-tmp");
  Path argFilePath=getProjectFilesystem().getRootPath().resolve(BuildTargets.getScratchPath(getProjectFilesystem(),getBuildTarget(),"%s__argfile.txt"));
  Path fileListPath=getProjectFilesystem().getRootPath().resolve(BuildTargets.getScratchPath(getProjectFilesystem(),getBuildTarget(),"%s__filelist.txt"));
  ImmutableSet.Builder<Path> cellRoots=ImmutableSet.builder();
  for (  BuildRule dep : getDeps()) {
    cellRoots.add(dep.getProjectFilesystem().getRootPath());
  }
  return ImmutableList.of(new MkdirStep(getProjectFilesystem(),output.getParent()),new MakeCleanDirectoryStep(getProjectFilesystem(),scratchDir),new CxxPrepareForLinkStep(argFilePath,fileListPath,linker.fileList(fileListPath),output,args),new CxxLinkStep(getProjectFilesystem().getRootPath(),linker.getEnvironment(getResolver()),linker.getCommandPrefix(getResolver()),argFilePath,getProjectFilesystem().getRootPath().resolve(scratchDir)),new FileScrubberStep(getProjectFilesystem(),output,linker.getScrubbers(cellRoots.build())));
}
