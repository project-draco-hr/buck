{
  ProjectFilesystem projectFilesystem=new ProjectFilesystem(Paths.get(projectRoot.getPath()),createBuckConfig(new ProjectFilesystem(projectRoot),platform).getIgnorePaths());
  BuckConfig config=createBuckConfig(projectFilesystem,platform);
  Verbosity verbosity=VerbosityParser.parse(args);
  Optional<String> color;
  final boolean isDaemon=context.isPresent();
  if (isDaemon && (context.get().getEnv() != null)) {
    String colorString=context.get().getEnv().getProperty(BUCKD_COLOR_DEFAULT_ENV_VAR);
    color=Optional.fromNullable(colorString);
  }
 else {
    color=Optional.absent();
  }
  final Console console=new Console(verbosity,stdOut,stdErr,config.createAnsi(color));
  if (commandParseResult.getErrorText().isPresent()) {
    console.getStdErr().println(commandParseResult.getErrorText().get());
  }
  if (!commandSemaphore.tryAcquire()) {
    return BUSY_EXIT_CODE;
  }
  int exitCode;
  ImmutableList<BuckEventListener> eventListeners;
  String buildId=MoreStrings.createRandomString();
  Clock clock=new DefaultClock();
  ExecutionEnvironment executionEnvironment=new DefaultExecutionEnvironment();
  try (AbstractConsoleEventBusListener consoleListener=createConsoleEventListener(clock,console,verbosity,executionEnvironment);BuckEventBus buildEventBus=new BuckEventBus(clock,buildId)){
    Optional<WebServer> webServer=getWebServerIfDaemon(context,projectFilesystem,config,console);
    eventListeners=addEventListeners(buildEventBus,projectFilesystem,config,webServer,consoleListener);
    ImmutableList<String> remainingArgs=ImmutableList.copyOf(Arrays.copyOfRange(args,1,args.length));
    Command executingCommand=commandParseResult.getCommand().get();
    String commandName=executingCommand.name().toLowerCase();
    CommandEvent commandEvent=CommandEvent.started(commandName,remainingArgs,isDaemon);
    buildEventBus.post(commandEvent);
    ArtifactCacheFactory artifactCacheFactory=new LoggingArtifactCacheFactory(buildEventBus);
    PropertyFinder propertyFinder=new DefaultPropertyFinder(projectFilesystem);
    AndroidDirectoryResolver androidDirectoryResolver=new DefaultAndroidDirectoryResolver(projectFilesystem,config.getNdkVersion(),propertyFinder);
    Parser parser;
    KnownBuildRuleTypes buildRuleTypes=KnownBuildRuleTypes.getConfigured(config,new ProcessExecutor(console),androidDirectoryResolver);
    if (isDaemon) {
      parser=getParserFromDaemon(context,projectFilesystem,config,console,commandEvent);
    }
 else {
      JavaUtilsLoggingBuildListener.ensureLogFileIsWritten(projectFilesystem);
      parser=new Parser(projectFilesystem,buildRuleTypes,console,config.getPythonInterpreter(),config.getTempFilePatterns(),createRuleKeyBuilderFactory(new DefaultFileHashCache(projectFilesystem,console)));
    }
    exitCode=executingCommand.execute(remainingArgs,config,new CommandRunnerParams(console,projectFilesystem,androidDirectoryResolver,buildRuleTypes,artifactCacheFactory,buildEventBus,parser,platform));
    artifactCacheFactory.closeCreatedArtifactCaches(ARTIFACT_CACHE_TIMEOUT_IN_SECONDS);
    if (webServer.isPresent()) {
      int port=webServer.get().getPort();
      buildEventBus.post(LogEvent.info("See trace at http://localhost:%s/trace/%s",port,buildId));
    }
    buildEventBus.post(CommandEvent.finished(commandName,remainingArgs,isDaemon,exitCode));
  }
  finally {
    commandSemaphore.release();
  }
  if (isDaemon) {
    context.get().in.close();
    context.get().exit(exitCode);
  }
  for (  BuckEventListener eventListener : eventListeners) {
    try {
      eventListener.outputTrace(buildId);
    }
 catch (    RuntimeException e) {
      System.err.println("Skipping over non-fatal error");
      e.printStackTrace();
    }
  }
  return exitCode;
}
