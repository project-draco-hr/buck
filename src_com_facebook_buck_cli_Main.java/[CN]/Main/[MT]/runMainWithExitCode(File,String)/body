{
  if (args.length == 0) {
    return usage();
  }
  ProjectFilesystem projectFilesystem=new ProjectFilesystem(projectRoot);
  BuckConfig config=createBuckConfig(projectFilesystem);
  Verbosity verbosity=VerbosityParser.parse(args);
  Console console=new Console(verbosity,stdOut,stdErr,config.createAnsi());
  KnownBuildRuleTypes knownBuildRuleTypes=new KnownBuildRuleTypes();
  Parser parser;
  if (isDaemon()) {
    Daemon daemon=getDaemon(projectFilesystem,config,console);
    daemon.watchFileSystem();
    parser=daemon.getParser();
  }
 else {
    parser=new Parser(projectFilesystem,knownBuildRuleTypes,console);
  }
  Optional<Command> command=Command.getCommandForName(args[0]);
  if (command.isPresent()) {
    String[] remainingArgs=new String[args.length - 1];
    System.arraycopy(args,1,remainingArgs,0,remainingArgs.length);
    return command.get().execute(remainingArgs,config,new CommandRunnerParams(console,projectFilesystem,new KnownBuildRuleTypes(),config.createArtifactCache(console),parser));
  }
 else {
    int exitCode=new GenericBuckOptions(stdOut,stdErr).execute(args);
    if (exitCode == GenericBuckOptions.SHOW_MAIN_HELP_SCREEN_EXIT_CODE) {
      return usage();
    }
 else {
      return exitCode;
    }
  }
}
