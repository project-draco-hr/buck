{
  ImmutableList.Builder<BuckEventListener> eventListenersBuilder=ImmutableList.<BuckEventListener>builder().add(new JavaUtilsLoggingBuildListener()).add(consoleEventBusListener).add(new LoggingBuildListener());
  try {
    eventListenersBuilder.add(new ChromeTraceBuildListener(projectFilesystem,buildId,clock,objectMapper,config.getMaxTraces(),config.getCompressTraces()));
  }
 catch (  IOException e) {
    LOG.error("Unable to create ChromeTrace listener!");
  }
  if (webServer.isPresent()) {
    eventListenersBuilder.add(webServer.get().createListener());
  }
  loadListenersFromBuckConfig(eventListenersBuilder,projectFilesystem,config);
  Optional<URI> remoteLogUrl=config.getRemoteLogUrl();
  boolean shouldSample=config.getRemoteLogSampleRate().transform(BuildIdSampler.CREATE_FUNCTION).transform(MoreFunctions.<BuildId,Boolean>applyFunction(buildId)).or(true);
  if (remoteLogUrl.isPresent() && shouldSample) {
    eventListenersBuilder.add(new RemoteLogUploaderEventListener(objectMapper,RemoteLoggerFactory.create(remoteLogUrl.get(),objectMapper),buildEnvironmentDescription));
  }
  JavaBuckConfig javaBuckConfig=new JavaBuckConfig(config);
  if (!javaBuckConfig.getSkipCheckingMissingDeps()) {
    JavacOptions javacOptions=javaBuckConfig.getDefaultJavacOptions();
    eventListenersBuilder.add(MissingSymbolsHandler.createListener(projectFilesystem,knownBuildRuleTypes.getAllDescriptions(),config,buckEvents,console,javacOptions,environment));
  }
  eventListenersBuilder.add(new LoadBalancerEventsListener(counterRegistry));
  eventListenersBuilder.addAll(externalEventsListeners);
  ImmutableList<BuckEventListener> eventListeners=eventListenersBuilder.build();
  for (  BuckEventListener eventListener : eventListeners) {
    buckEvents.register(eventListener);
  }
  return eventListeners;
}
