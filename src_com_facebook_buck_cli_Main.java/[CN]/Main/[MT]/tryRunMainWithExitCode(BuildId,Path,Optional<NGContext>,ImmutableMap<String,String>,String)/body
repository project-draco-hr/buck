{
  try {
    if (context.isPresent()) {
      LOG.debug("Rotating log.");
      LogConfig.flushLogs();
      LogConfig.setupLogging();
    }
    if (LOG.isDebugEnabled()) {
      Long gitCommitTimestamp=Long.getLong("buck.git_commit_timestamp");
      String buildDateStr;
      if (gitCommitTimestamp == null) {
        buildDateStr="(unknown)";
      }
 else {
        buildDateStr=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z",Locale.US).format(new Date(TimeUnit.SECONDS.toMillis(gitCommitTimestamp)));
      }
      String buildRev=System.getProperty("buck.git_commit","(unknown)");
      LOG.debug("Starting up (build date %s, rev %s), args: %s",buildDateStr,buildRev,Arrays.toString(args));
      LOG.debug("System properties: %s",System.getProperties());
    }
    return runMainWithExitCode(buildId,projectRoot,context,clientEnvironment,args);
  }
 catch (  HumanReadableException e) {
    Console console=new Console(Verbosity.STANDARD_INFORMATION,stdOut,stdErr,new Ansi(AnsiEnvironmentChecking.environmentSupportsAnsiEscapes(platform,clientEnvironment)));
    console.printBuildFailure(e.getHumanReadableErrorMessage());
    return FAIL_EXIT_CODE;
  }
catch (  InterruptionFailedException e) {
    if (context.isPresent()) {
      context.get().getNGServer().shutdown(true);
    }
    return FAIL_EXIT_CODE;
  }
 finally {
    final boolean isDaemon=context.isPresent();
    if (isDaemon) {
      System.gc();
    }
    LOG.debug("Done.");
  }
}
