{
  ImmutableMap<String,String> clientEnvironment=getClientEnvironment(context);
  Verbosity verbosity=VerbosityParser.parse(args);
  Optional<String> color;
  final boolean isDaemon=context.isPresent();
  if (isDaemon && (context.get().getEnv() != null)) {
    String colorString=context.get().getEnv().getProperty(BUCKD_COLOR_DEFAULT_ENV_VAR);
    color=Optional.fromNullable(colorString);
  }
 else {
    color=Optional.absent();
  }
  BuckConfig bootstrapConfig=BuckConfig.createDefaultBuckConfig(new ProjectFilesystem(projectRoot),platform,clientEnvironment);
  final Console console=new Console(verbosity,stdOut,stdErr,bootstrapConfig.createAnsi(color));
  Path canonicalRootPath=projectRoot.toPath().toRealPath();
  RepositoryFactory repositoryFactory=new RepositoryFactory(clientEnvironment,platform,console,canonicalRootPath);
  Repository rootRepository=repositoryFactory.getRepositoryByAbsolutePath(canonicalRootPath);
  if (commandParseResult.getErrorText().isPresent()) {
    console.getStdErr().println(commandParseResult.getErrorText().get());
  }
  int exitCode;
  ImmutableList<BuckEventListener> eventListeners;
  Clock clock;
  if (BUCKD_LAUNCH_TIME_NANOS.isPresent()) {
    long nanosEpoch=Long.parseLong(BUCKD_LAUNCH_TIME_NANOS.get(),10);
    LOG.verbose("Using nanos epoch: %d",nanosEpoch);
    clock=new NanosAdjustedClock(nanosEpoch);
  }
 else {
    clock=new DefaultClock();
  }
  ProcessExecutor processExecutor=new ProcessExecutor(console);
  ExecutionEnvironment executionEnvironment=new DefaultExecutionEnvironment(processExecutor,clientEnvironment,System.getProperties());
  boolean commandSemaphoreAcquired=false;
  if (!commandParseResult.getCommand().get().isReadOnly()) {
    commandSemaphoreAcquired=commandSemaphore.tryAcquire();
    if (!commandSemaphoreAcquired) {
      return BUSY_EXIT_CODE;
    }
  }
  @Nullable ArtifactCacheFactory artifactCacheFactory=null;
  try (ConsoleLogLevelOverrider consoleLogLevelOverrider=new ConsoleLogLevelOverrider(buildId.toString(),verbosity);ConsoleHandlerRedirector consoleHandlerRedirector=new ConsoleHandlerRedirector(buildId.toString(),console.getStdErr(),Optional.<OutputStream>of(stdErr));AbstractConsoleEventBusListener consoleListener=createConsoleEventListener(clock,console,verbosity,executionEnvironment,rootRepository.getBuckConfig());BuckEventBus buildEventBus=new BuckEventBus(clock,buildId)){
    artifactCacheFactory=new LoggingArtifactCacheFactory(executionEnvironment,buildEventBus);
    Optional<WebServer> webServer=getWebServerIfDaemon(context,rootRepository,clock);
    eventListeners=addEventListeners(buildEventBus,rootRepository.getFilesystem(),rootRepository.getBuckConfig(),webServer,clock,console,consoleListener,rootRepository.getKnownBuildRuleTypes(),clientEnvironment);
    ImmutableList<String> remainingArgs=ImmutableList.copyOf(Arrays.copyOfRange(args,1,args.length));
    Command executingCommand=commandParseResult.getCommand().get();
    String commandName=executingCommand.name().toLowerCase();
    CommandEvent commandEvent=CommandEvent.started(commandName,remainingArgs,isDaemon);
    buildEventBus.post(commandEvent);
    Parser parser=null;
    if (isDaemon) {
      try {
        parser=getParserFromDaemon(context,rootRepository,commandEvent,buildEventBus,clock);
      }
 catch (      WatchmanWatcherException|IOException e) {
        buildEventBus.post(ConsoleEvent.warning("Watchman threw an exception while parsing file changes.\n%s",e.getMessage()));
      }
    }
    if (parser == null) {
      parser=new Parser(rootRepository,rootRepository.getBuckConfig().getPythonInterpreter(),rootRepository.getBuckConfig().getTempFilePatterns(),createRuleKeyBuilderFactory(new DefaultFileHashCache(rootRepository.getFilesystem())));
    }
    JavaUtilsLoggingBuildListener.ensureLogFileIsWritten(rootRepository.getFilesystem());
    CachingBuildEngine buildEngine=new CachingBuildEngine();
    exitCode=executingCommand.execute(remainingArgs,rootRepository.getBuckConfig(),new CommandRunnerParams(console,rootRepository,rootRepository.androidDirectoryResolver,buildEngine,artifactCacheFactory,buildEventBus,parser,platform,clientEnvironment,rootRepository.getBuckConfig().createDefaultJavaPackageFinder(),objectMapper));
    if (webServer.isPresent()) {
      int port=webServer.get().getPort();
      buildEventBus.post(ConsoleEvent.info("See trace at http://localhost:%s/trace/%s",port,buildId));
    }
    buildEventBus.post(CommandEvent.finished(commandName,remainingArgs,isDaemon,exitCode));
  }
 catch (  Throwable t) {
    LOG.debug(t,"Failing build on exception.");
    closeCreatedArtifactCaches(artifactCacheFactory);
    throw t;
  }
 finally {
    if (commandSemaphoreAcquired) {
      commandSemaphore.release();
    }
  }
  if (isDaemon && !rootRepository.getBuckConfig().getFlushEventsBeforeExit()) {
    context.get().in.close();
    context.get().exit(exitCode);
  }
  closeCreatedArtifactCaches(artifactCacheFactory);
  for (  BuckEventListener eventListener : eventListeners) {
    try {
      eventListener.outputTrace(buildId);
    }
 catch (    RuntimeException e) {
      System.err.println("Skipping over non-fatal error");
      e.printStackTrace();
    }
  }
  return exitCode;
}
