{
  installUncaughtExceptionHandler(context);
  Path projectRoot=Paths.get(".");
  int exitCode=FAIL_EXIT_CODE;
  BuildId buildId=getBuildId(context);
  WatchmanWatcher.FreshInstanceAction watchmanFreshInstanceAction=daemon == null ? WatchmanWatcher.FreshInstanceAction.NONE : WatchmanWatcher.FreshInstanceAction.POST_OVERFLOW_EVENT;
  ImmutableMap<String,String> clientEnvironment=getClientEnvironment(context);
  try {
    CommandMode commandMode=CommandMode.RELEASE;
    exitCode=runMainWithExitCode(buildId,projectRoot,context,clientEnvironment,commandMode,watchmanFreshInstanceAction,args);
  }
 catch (  IOException e) {
    if (e.getMessage().startsWith("No space left on device")) {
      (new Console(Verbosity.STANDARD_INFORMATION,stdOut,stdErr,new Ansi(AnsiEnvironmentChecking.environmentSupportsAnsiEscapes(platform,clientEnvironment)))).printBuildFailure(e.getMessage());
    }
 else {
      LOG.error(e);
    }
  }
catch (  HumanReadableException e) {
    Console console=new Console(Verbosity.STANDARD_INFORMATION,stdOut,stdErr,new Ansi(AnsiEnvironmentChecking.environmentSupportsAnsiEscapes(platform,clientEnvironment)));
    console.printBuildFailure(e.getHumanReadableErrorMessage());
  }
catch (  InterruptionFailedException e) {
    if (context.isPresent()) {
      context.get().getNGServer().shutdown(true);
    }
  }
catch (  Throwable t) {
    LOG.error(t,"Uncaught exception at top level");
  }
 finally {
    if (context.isPresent()) {
      System.gc();
    }
    LOG.debug("Done.");
    LogConfig.flushLogs();
    System.exit(exitCode);
  }
}
