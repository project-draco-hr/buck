{
  BuckCommand command=new BuckCommand();
  AdditionalOptionsCmdLineParser cmdLineParser=new AdditionalOptionsCmdLineParser(command);
  try {
    cmdLineParser.parseArgument(args);
  }
 catch (  CmdLineException e) {
    stdErr.println(e.getLocalizedMessage());
    stdErr.println("For help see 'buck --help'.");
    return 1;
  }
  if (commandMode.isLoggingEnabled()) {
    LOG.debug("Rotating log.");
    LogConfig.flushLogs();
    LogConfig.setupLogging(command.getLogConfig());
    if (LOG.isDebugEnabled()) {
      Long gitCommitTimestamp=Long.getLong("buck.git_commit_timestamp");
      String buildDateStr;
      if (gitCommitTimestamp == null) {
        buildDateStr="(unknown)";
      }
 else {
        buildDateStr=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z",Locale.US).format(new Date(TimeUnit.SECONDS.toMillis(gitCommitTimestamp)));
      }
      String buildRev=System.getProperty("buck.git_commit","(unknown)");
      LOG.debug("Starting up (build date %s, rev %s), args: %s",buildDateStr,buildRev,Arrays.toString(args));
      LOG.debug("System properties: %s",System.getProperties());
    }
  }
  Path canonicalRootPath=projectRoot.toRealPath().normalize();
  Config config=Configs.createDefaultConfig(canonicalRootPath,command.getConfigOverrides().getForCell(RelativeCellName.ROOT_CELL_NAME));
  ProjectFilesystem filesystem=new ProjectFilesystem(canonicalRootPath,config);
  BuckConfig buckConfig=new BuckConfig(config,filesystem,architecture,platform,clientEnvironment,new DefaultCellPathResolver(filesystem.getRootPath(),config));
  Verbosity verbosity=VerbosityParser.parse(args);
  Optional<String> color;
  if (context.isPresent() && (context.get().getEnv() != null)) {
    String colorString=context.get().getEnv().getProperty(BUCKD_COLOR_DEFAULT_ENV_VAR);
    color=Optional.fromNullable(colorString);
  }
 else {
    color=Optional.absent();
  }
  final Console console=new Console(verbosity,stdOut,stdErr,buckConfig.createAnsi(color));
  boolean commandSemaphoreAcquired=false;
  boolean shouldCleanUpTrash=false;
  if (!command.isReadOnly()) {
    commandSemaphoreAcquired=commandSemaphore.tryAcquire();
    if (!commandSemaphoreAcquired) {
      return BUSY_EXIT_CODE;
    }
  }
  try {
    if (commandSemaphoreAcquired) {
      commandSemaphoreNgClient=context;
    }
    if (!command.isReadOnly()) {
      Optional<String> currentVersion=filesystem.readFileIfItExists(BuckConstant.getCurrentVersionFile());
      if (!currentVersion.isPresent() || !currentVersion.get().equals(BuckVersion.getVersion())) {
        moveToTrash(filesystem,console,buildId,filesystem.getBuckPaths().getAnnotationDir(),filesystem.getBuckPaths().getGenDir(),filesystem.getBuckPaths().getScratchDir(),filesystem.getBuckPaths().getResDir());
        shouldCleanUpTrash=true;
        filesystem.mkdirs(BuckConstant.getCurrentVersionFile().getParent());
        filesystem.writeContentsToPath(BuckVersion.getVersion(),BuckConstant.getCurrentVersionFile());
      }
    }
    AndroidBuckConfig androidBuckConfig=new AndroidBuckConfig(buckConfig,platform);
    AndroidDirectoryResolver androidDirectoryResolver=new DefaultAndroidDirectoryResolver(filesystem.getRootPath().getFileSystem(),clientEnvironment,androidBuckConfig.getBuildToolsVersion(),androidBuckConfig.getNdkVersion());
    ProcessExecutor processExecutor=new ProcessExecutor(console);
    Optional<Path> testTempDirOverride=getTestTempDirOverride(buckConfig,clientEnvironment,"buck-" + buildId.toString());
    if (testTempDirOverride.isPresent()) {
      LOG.debug("Using test temp dir override %s",testTempDirOverride.get());
    }
    Clock clock;
    if (BUCKD_LAUNCH_TIME_NANOS.isPresent()) {
      long nanosEpoch=Long.parseLong(BUCKD_LAUNCH_TIME_NANOS.get(),10);
      LOG.verbose("Using nanos epoch: %d",nanosEpoch);
      clock=new NanosAdjustedClock(nanosEpoch);
    }
 else {
      clock=new DefaultClock();
    }
    ParserConfig parserConfig=new ParserConfig(buckConfig);
    try (Watchman watchman=buildWatchman(context,parserConfig,projectRoot,clientEnvironment,console,clock)){
      final boolean isDaemon=context.isPresent() && (watchman != Watchman.NULL_WATCHMAN);
      if (!isDaemon && shouldCleanUpTrash) {
        TRASH_CLEANER.startCleaningDirectory();
      }
      KnownBuildRuleTypesFactory factory=new KnownBuildRuleTypesFactory(processExecutor,androidDirectoryResolver,testTempDirOverride);
      Cell rootCell=Cell.createCell(filesystem,console,watchman,buckConfig,command.getConfigOverrides(),factory,androidDirectoryResolver,clock);
      int exitCode;
      ImmutableList<BuckEventListener> eventListeners=ImmutableList.of();
      ExecutionEnvironment executionEnvironment=new DefaultExecutionEnvironment(clientEnvironment,System.getProperties());
      FileHashCache cellHashCache;
      FileHashCache buckOutHashCache;
      ProjectFilesystem rootCellProjectFilesystem=new ProjectFilesystem(rootCell.getFilesystem().getRootPath());
      if (isDaemon) {
        cellHashCache=getFileHashCacheFromDaemon(rootCell);
        buckOutHashCache=getBuckOutFileHashCacheFromDaemon(rootCell);
      }
 else {
        cellHashCache=DefaultFileHashCache.createDefaultFileHashCache(rootCell.getFilesystem());
        buckOutHashCache=DefaultFileHashCache.createBuckOutFileHashCache(rootCellProjectFilesystem,rootCell.getFilesystem().getBuckPaths().getBuckOut());
      }
      ImmutableList.Builder<FileHashCache> allCaches=ImmutableList.builder();
      allCaches.add(cellHashCache);
      allCaches.add(buckOutHashCache);
      allCaches.add(DefaultFileHashCache.createDefaultFileHashCache(rootCellProjectFilesystem));
      for (      Path root : FileSystems.getDefault().getRootDirectories()) {
        if (!root.toFile().exists()) {
          continue;
        }
        allCaches.add(DefaultFileHashCache.createDefaultFileHashCache(new ProjectFilesystem(root)));
      }
      FileHashCache fileHashCache=new StackedFileHashCache(allCaches.build());
      Optional<WebServer> webServer=getWebServerIfDaemon(context,rootCell);
      TestConfig testConfig=new TestConfig(buckConfig);
      ArtifactCacheBuckConfig cacheBuckConfig=new ArtifactCacheBuckConfig(buckConfig);
      ExecutorService diskIoExecutorService=MostExecutors.newSingleThreadExecutor("Disk I/O");
      ListeningExecutorService httpWriteExecutorService=getHttpWriteExecutorService(cacheBuckConfig);
      ScheduledExecutorService counterAggregatorExecutor=MostExecutors.newSingleThreadScheduledExecutor("CounterAggregatorThread");
      VersionControlStatsGenerator vcStatsGenerator;
      Locale locale=Locale.getDefault();
      Map<ExecutionContext.ExecutorPool,ListeningExecutorService> executors=new HashMap<>();
      executors.put(ExecutionContext.ExecutorPool.CPU,listeningDecorator(Executors.newCachedThreadPool()));
      executors.put(ExecutionContext.ExecutorPool.NETWORK,newDirectExecutorService());
      executors.put(ExecutionContext.ExecutorPool.PROJECT,listeningDecorator(MostExecutors.newMultiThreadExecutor("Project",buckConfig.getNumThreads())));
      InvocationInfo invocationInfo=InvocationInfo.of(buildId,command.getSubCommandNameForLogging(),filesystem.getBuckPaths().getLogDir());
      try (Closeable loggersSetup=GlobalStateManager.singleton().setupLoggers(invocationInfo,console.getStdErr(),stdErr,verbosity);AbstractConsoleEventBusListener consoleListener=createConsoleEventListener(clock,new SuperConsoleConfig(buckConfig),console,testConfig.getResultSummaryVerbosity(),executionEnvironment,webServer,locale,filesystem.getBuckPaths().getLogDir().resolve("test.log"));TempDirectoryCreator tempDirectoryCreator=new TempDirectoryCreator(testTempDirOverride);AsyncCloseable asyncCloseable=new AsyncCloseable(diskIoExecutorService);BuckEventBus buildEventBus=new BuckEventBus(clock,buildId);CounterRegistry counterRegistry=new CounterRegistryImpl(counterAggregatorExecutor,buildEventBus,buckConfig.getCountersFirstFlushIntervalMillis(),buckConfig.getCountersFlushIntervalMillis())){
        LOG.debug(invocationInfo.toLogLine(args));
        buildEventBus.register(HANG_MONITOR.getHangMonitor());
        ArtifactCache artifactCache=asyncCloseable.closeAsync(ArtifactCaches.newInstance(cacheBuckConfig,buildEventBus,filesystem,executionEnvironment.getWifiSsid(),httpWriteExecutorService));
        ProgressEstimator progressEstimator=new ProgressEstimator(filesystem.resolve(filesystem.getBuckPaths().getBuckOut()).resolve(ProgressEstimator.PROGRESS_ESTIMATIONS_JSON),buildEventBus,objectMapper);
        consoleListener.setProgressEstimator(progressEstimator);
        BuildEnvironmentDescription buildEnvironmentDescription=getBuildEnvironmentDescription(executionEnvironment,buckConfig);
        eventListeners=addEventListeners(buildEventBus,rootCell.getFilesystem(),invocationInfo,rootCell.getBuckConfig(),webServer,clock,buildEnvironmentDescription,console,consoleListener,rootCell.getKnownBuildRuleTypes(),clientEnvironment,counterRegistry);
        VersionControlBuckConfig vcBuckConfig=new VersionControlBuckConfig(buckConfig);
        if (!command.isReadOnly() && vcBuckConfig.shouldGenerateStatistics()) {
          vcStatsGenerator=new VersionControlStatsGenerator(diskIoExecutorService,new DefaultVersionControlCmdLineInterfaceFactory(rootCell.getFilesystem().getRootPath(),new PrintStreamProcessExecutorFactory(),vcBuckConfig,buckConfig.getEnvironment()),buildEventBus);
          vcStatsGenerator.generateStatsAsync();
        }
        ImmutableList<String> remainingArgs=args.length > 1 ? ImmutableList.copyOf(Arrays.copyOfRange(args,1,args.length)) : ImmutableList.<String>of();
        CommandEvent.Started startedEvent=CommandEvent.started(args.length > 0 ? args[0] : "",remainingArgs,isDaemon);
        buildEventBus.post(startedEvent);
        Parser parser=null;
        if (isDaemon && watchman != Watchman.NULL_WATCHMAN) {
          try {
            Daemon daemon=getDaemon(rootCell,objectMapper);
            WatchmanWatcher watchmanWatcher=new WatchmanWatcher(watchman.getWatchRoot().or(canonicalRootPath.toString()),daemon.getFileEventBus(),ImmutableSet.<PathOrGlobMatcher>builder().addAll(filesystem.getIgnorePaths()).addAll(DEFAULT_IGNORE_GLOBS).build(),watchman,daemon.getWatchmanQueryUUID());
            parser=getParserFromDaemon(context,rootCell,startedEvent,buildEventBus,watchmanWatcher,watchmanFreshInstanceAction);
          }
 catch (          WatchmanWatcherException|IOException e) {
            buildEventBus.post(ConsoleEvent.warning("Watchman threw an exception while parsing file changes.\n%s",e.getMessage()));
          }
        }
        if (parser == null) {
          TypeCoercerFactory typeCoercerFactory=new DefaultTypeCoercerFactory(objectMapper);
          parser=new Parser(new ParserConfig(rootCell.getBuckConfig()),typeCoercerFactory,new ConstructorArgMarshaller(typeCoercerFactory));
        }
        ActionGraphCache actionGraphCache=getActionGraphCacheFromDaemon(context,rootCell);
        counterRegistry.registerCounters(parser.getCounters());
        JavaUtilsLoggingBuildListener.ensureLogFileIsWritten(rootCell.getFilesystem());
        Optional<ProcessManager> processManager;
        if (platform == Platform.WINDOWS) {
          processManager=Optional.absent();
        }
 else {
          processManager=Optional.<ProcessManager>of(new PkillProcessManager(processExecutor));
        }
        Supplier<AndroidPlatformTarget> androidPlatformTargetSupplier=createAndroidPlatformTargetSupplier(androidDirectoryResolver,androidBuckConfig,buildEventBus);
        if (command.subcommand instanceof AbstractCommand) {
          AbstractCommand subcommand=(AbstractCommand)command.subcommand;
          Optional<Path> eventsOutputPath=subcommand.getEventsOutputPath();
          if (eventsOutputPath.isPresent()) {
            BuckEventListener listener=new FileSerializationEventBusListener(eventsOutputPath.get(),objectMapper);
            buildEventBus.register(listener);
          }
        }
        exitCode=command.run(new CommandRunnerParams(console,stdIn,rootCell,androidPlatformTargetSupplier,artifactCache,buildEventBus,parser,platform,clientEnvironment,rootCell.getBuckConfig().createDefaultJavaPackageFinder(),objectMapper,clock,processManager,webServer,buckConfig,fileHashCache,executors,buildEnvironmentDescription,actionGraphCache));
        closeHttpExecutorService(cacheBuckConfig,Optional.of(buildEventBus),httpWriteExecutorService);
        closeExecutorService("CounterAggregatorExecutor",counterAggregatorExecutor,COUNTER_AGGREGATOR_SERVICE_TIMEOUT_SECONDS);
        buildEventBus.post(CommandEvent.finished(startedEvent,exitCode));
      }
 catch (      Throwable t) {
        LOG.debug(t,"Failing build on exception.");
        closeHttpExecutorService(cacheBuckConfig,Optional.<BuckEventBus>absent(),httpWriteExecutorService);
        closeDiskIoExecutorService(diskIoExecutorService);
        flushEventListeners(console,buildId,eventListeners);
        throw t;
      }
 finally {
        if (commandSemaphoreAcquired) {
          commandSemaphoreNgClient=Optional.absent();
          BgProcessKiller.disarm();
          commandSemaphore.release();
          commandSemaphoreAcquired=false;
        }
        if (isDaemon && shouldCleanUpTrash) {
          TRASH_CLEANER.startCleaningDirectory();
        }
        for (        ExecutionContext.ExecutorPool p : executors.keySet()) {
          closeExecutorService(p.toString(),executors.get(p),EXECUTOR_SERVICES_TIMEOUT_SECONDS);
        }
      }
      if (context.isPresent() && !rootCell.getBuckConfig().getFlushEventsBeforeExit()) {
        context.get().in.close();
        context.get().exit(exitCode);
      }
      closeDiskIoExecutorService(diskIoExecutorService);
      flushEventListeners(console,buildId,eventListeners);
      return exitCode;
    }
   }
  finally {
    if (commandSemaphoreAcquired) {
      commandSemaphoreNgClient=Optional.absent();
      BgProcessKiller.disarm();
      commandSemaphore.release();
    }
  }
}
