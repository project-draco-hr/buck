{
  String osName=System.getProperty("os.name");
  Libc.OpenPtyLibrary openPtyLibrary;
  if ("Linux".equals(osName)) {
    Libc.Constants.rTIOCSCTTY=Libc.Constants.LINUX_TIOCSCTTY;
    Libc.Constants.rFDCLOEXEC=Libc.Constants.LINUX_FD_CLOEXEC;
    Libc.Constants.rFGETFD=Libc.Constants.LINUX_F_GETFD;
    Libc.Constants.rFSETFD=Libc.Constants.LINUX_F_SETFD;
    openPtyLibrary=(Libc.OpenPtyLibrary)Native.loadLibrary("libutil",Libc.OpenPtyLibrary.class);
  }
 else   if ("OS X".equals(osName)) {
    Libc.Constants.rTIOCSCTTY=Libc.Constants.DARWIN_TIOCSCTTY;
    Libc.Constants.rFDCLOEXEC=Libc.Constants.DARWIN_FD_CLOEXEC;
    Libc.Constants.rFGETFD=Libc.Constants.DARWIN_F_GETFD;
    Libc.Constants.rFSETFD=Libc.Constants.DARWIN_F_SETFD;
    openPtyLibrary=(Libc.OpenPtyLibrary)Native.loadLibrary(com.sun.jna.Platform.C_LIBRARY_NAME,Libc.OpenPtyLibrary.class);
  }
 else {
    LOG.info("not enabling process killing on nailgun exit: unknown OS %s",osName);
    return;
  }
  int ret=Libc.INSTANCE.setsid();
  if (ret < 0) {
    LOG.warn("cannot enable background process killing: %s",Native.getLastError());
    return;
  }
  LOG.info("enabling background process killing for buckd");
  IntByReference master=new IntByReference();
  IntByReference slave=new IntByReference();
  openPtyLibrary.openpty(master,slave,Pointer.NULL,Pointer.NULL,Pointer.NULL);
  markFdCloseOnExec(master.getValue());
  markFdCloseOnExec(slave.getValue());
  Libc.INSTANCE.ioctl(slave.getValue(),Pointer.createConstant(Libc.Constants.rTIOCSCTTY),0);
  LOG.info("enabled background process killing for buckd");
  isSessionLeader=true;
}
