{
  this.repository=repository;
  this.clock=clock;
  this.objectMapper=objectMapper;
  this.hashCache=new DefaultFileHashCache(repository.getFilesystem());
  this.processExecutor=processExecutor;
  ParserConfig parserConfig=new ParserConfig(repository.getBuckConfig());
  PythonBuckConfig pythonBuckConfig=new PythonBuckConfig(repository.getBuckConfig(),new ExecutableFinder());
  this.fileEventBus=new EventBus("file-change-events");
  String projectRoot=MorePaths.absolutify(repository.getFilesystem().getRootPath()).toString();
  String watchRoot=System.getProperty("buck.watchman_root",projectRoot);
  Optional<String> projectPrefix=Optional.fromNullable(System.getProperty("buck.watchman_project_prefix"));
  ImmutableSet<WatchmanWatcher.Capability> watchmanCapabilities=WatchmanWatcher.getWatchmanCapabilities(processExecutor,objectMapper);
  this.watchmanWatcher=createWatcher(watchRoot,projectPrefix,watchmanCapabilities);
  boolean useWatchmanGlob=parserConfig.getGlobHandler() == ParserConfig.GlobHandler.WATCHMAN && watchmanCapabilities.contains(WatchmanWatcher.Capability.WILDMATCH_GLOB);
  LOG.debug("Watchman capabilities: %s Watch root: %s Project prefix: %s Glob handler config: %s " + "Watchman glob enabled: %s",watchmanCapabilities,watchRoot,projectPrefix,parserConfig.getGlobHandler(),useWatchmanGlob);
  this.parser=Parser.createParser(repository,pythonBuckConfig.getPythonInterpreter(),parserConfig.getAllowEmptyGlobs(),parserConfig.getEnforceBuckPackageBoundary(),parserConfig.getTempFilePatterns(),parserConfig.getBuildFileName(),parserConfig.getDefaultIncludes(),useWatchmanGlob,Optional.of(watchRoot),projectPrefix);
  fileEventBus.register(parser);
  fileEventBus.register(hashCache);
  webServer=createWebServer(repository.getBuckConfig(),repository.getFilesystem());
  JavaUtilsLoggingBuildListener.ensureLogFileIsWritten(repository.getFilesystem());
}
