{
  this.cell=cell;
  this.hashCache=new WatchedFileHashCache(cell.getFilesystem());
  this.buckOutHashCache=new DefaultFileHashCache(new ProjectFilesystem(cell.getFilesystem().getRootPath(),Optional.of(ImmutableSet.of(cell.getFilesystem().getBuckPaths().getBuckOut())),ImmutableSet.<PathOrGlobMatcher>of()));
  this.fileEventBus=new EventBus("file-change-events");
  actionGraphCache=new ActionGraphCache();
  TypeCoercerFactory typeCoercerFactory=new DefaultTypeCoercerFactory(objectMapper);
  this.parser=new Parser(new ParserConfig(cell.getBuckConfig()),typeCoercerFactory,new ConstructorArgMarshaller(typeCoercerFactory));
  fileEventBus.register(parser);
  fileEventBus.register(actionGraphCache);
  fileEventBus.register(hashCache);
  if (webServerToReuse.isPresent()) {
    webServer=webServerToReuse;
  }
 else {
    webServer=createWebServer(cell.getBuckConfig(),cell.getFilesystem(),objectMapper);
  }
  if (!initWebServer()) {
    LOG.warn("Can't start web server");
  }
  watchmanQueryUUID=UUID.randomUUID();
  JavaUtilsLoggingBuildListener.ensureLogFileIsWritten(cell.getFilesystem());
}
