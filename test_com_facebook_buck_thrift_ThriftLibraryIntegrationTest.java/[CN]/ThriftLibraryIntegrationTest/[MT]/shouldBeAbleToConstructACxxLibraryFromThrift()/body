{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"cxx",tmp);
  workspace.setUp();
  BuckEventBus eventBus=BuckEventBusFactory.newInstance();
  ProjectFilesystem filesystem=new ProjectFilesystem(workspace.getDestPath());
  Path compiler=new ExecutableFinder().getExecutable(Paths.get("echo"),ImmutableMap.copyOf(System.getenv()));
  BuckConfig config=FakeBuckConfig.builder().setFilesystem(filesystem).setSections("[thrift]","compiler = " + compiler,"compiler2 = " + compiler,"cpp_library = //thrift:fake","cpp_reflection_library = //thrift:fake").build();
  TypeCoercerFactory typeCoercerFactory=new DefaultTypeCoercerFactory(ObjectMappers.newDefaultInstance());
  Parser parser=new Parser(new ParserConfig(config),typeCoercerFactory,new ConstructorArgMarshaller(typeCoercerFactory));
  Cell cell=Cell.createCell(filesystem,new TestConsole(),Watchman.NULL_WATCHMAN,config,CellConfig.of(),new KnownBuildRuleTypesFactory(new ProcessExecutor(new TestConsole()),new FakeAndroidDirectoryResolver(),Optional.<Path>absent()),new FakeAndroidDirectoryResolver(),new DefaultClock(),new WatchmanDiagnosticCache());
  BuildTarget target=BuildTargetFactory.newInstance(filesystem,"//thrift:exe");
  TargetGraph targetGraph=parser.buildTargetGraph(eventBus,cell,false,MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor()),ImmutableSet.of(target));
  ActionGraphAndResolver actionGraphAndResolver=ActionGraphCache.getFreshActionGraph(eventBus,targetGraph);
  BuildRuleResolver ruleResolver=actionGraphAndResolver.getResolver();
  BuildTarget binaryFlavor=target.withFlavors(ImmutableFlavor.of("binary"));
  ImmutableSortedSet<BuildRule> deps=ruleResolver.getRule(binaryFlavor).getDeps();
  assertThat(FluentIterable.from(deps).anyMatch(new Predicate<BuildRule>(){
    @Override public boolean apply(    BuildRule input){
      return input instanceof NoopBuildRule;
    }
  }
),Matchers.is(false));
}
