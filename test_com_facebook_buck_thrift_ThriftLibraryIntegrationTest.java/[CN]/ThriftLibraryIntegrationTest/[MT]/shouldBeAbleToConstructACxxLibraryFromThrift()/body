{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"cxx",tmp);
  workspace.setUp();
  TypeCoercerFactory typeCoercerFactory=new DefaultTypeCoercerFactory();
  ParserNg parser=new ParserNg(typeCoercerFactory,new ConstructorArgMarshaller(typeCoercerFactory));
  BuckEventBus eventBus=BuckEventBusFactory.newInstance();
  ProjectFilesystem filesystem=new ProjectFilesystem(workspace.getDestPath());
  Path compiler=new ExecutableFinder().getExecutable(Paths.get("echo"),ImmutableMap.copyOf(System.getenv()));
  BuckConfig config=FakeBuckConfig.builder().setFilesystem(filesystem).setSections("[thrift]","compiler = " + compiler,"compiler2 = " + compiler,"cpp_library = //:fake","cpp_reflection_library = //:fake").build();
  Cell cell=new Cell(filesystem,new TestConsole(),Watchman.NULL_WATCHMAN,config,new KnownBuildRuleTypesFactory(new ProcessExecutor(new TestConsole()),new FakeAndroidDirectoryResolver(),Optional.<Path>absent()),new FakeAndroidDirectoryResolver(),new DefaultClock());
  BuildTarget target=BuildTargetFactory.newInstance(filesystem,"//:exe");
  TargetGraph targetGraph=parser.buildTargetGraph(eventBus,cell,false,ImmutableSet.of(target));
  TargetNodeToBuildRuleTransformer transformer=new BuildTargetNodeToBuildRuleTransformer();
  new TargetGraphToActionGraph(eventBus,transformer).apply(targetGraph);
}
