{
  ProjectFilesystem projectFilesystem=context.getProjectFilesystem();
  try {
    Multimap<Path,Path> outputToInputs=outputToInputsSupplier.get();
    runDxCommands(context,outputToInputs);
    if (secondaryOutputDir.isPresent()) {
      removeExtraneousSecondaryArtifacts(secondaryOutputDir.get(),outputToInputs.keySet(),projectFilesystem);
      ImmutableList.Builder<Path> secondaryDexJarsBuilder=ImmutableList.builder();
      for (      Path p : outputToInputs.keySet()) {
        if (DexStore.XZS.matchesPath(p)) {
          secondaryDexJarsBuilder.add(p);
        }
      }
      ImmutableList<Path> secondaryDexJars=secondaryDexJarsBuilder.build();
      if (!secondaryDexJars.isEmpty()) {
        Path secondaryBlobOutput=Paths.get(secondaryOutputDir.get().toString(),"secondary.blob");
        Path secondaryCompressedBlobOutput=Paths.get(secondaryOutputDir.get().toString(),SECONDARY_SOLID_DEX_FILENAME);
        StepRunner stepRunner=new DefaultStepRunner(context);
        Step concatStep=new ConcatStep(secondaryDexJars,secondaryBlobOutput);
        Step xzStep;
        if (xzCompressionLevel.isPresent()) {
          xzStep=new XzStep(secondaryBlobOutput,secondaryCompressedBlobOutput,xzCompressionLevel.get().intValue());
        }
 else {
          xzStep=new XzStep(secondaryBlobOutput,secondaryCompressedBlobOutput);
        }
        stepRunner.runStepForBuildTarget(concatStep,Optional.<BuildTarget>absent());
        stepRunner.runStepForBuildTarget(xzStep,Optional.<BuildTarget>absent());
      }
    }
  }
 catch (  StepFailedException|IOException e) {
    context.logError(e,"There was an error in smart dexing step.");
    return 1;
  }
  return 0;
}
