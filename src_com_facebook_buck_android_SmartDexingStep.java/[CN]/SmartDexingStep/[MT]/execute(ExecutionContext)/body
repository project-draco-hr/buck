{
  try {
    Multimap<Path,Path> outputToInputs=outputToInputsSupplier.get();
    runDxCommands(context,outputToInputs);
    if (secondaryOutputDir.isPresent()) {
      removeExtraneousSecondaryArtifacts(secondaryOutputDir.get(),outputToInputs.keySet(),filesystem);
      ImmutableMultimap.Builder<Path,Path> secondaryDexJarsMultimapBuilder=ImmutableMultimap.builder();
      for (      Path p : outputToInputs.keySet()) {
        if (DexStore.XZS.matchesPath(p)) {
          String[] matches=p.getFileName().toString().split("-");
          Path output=p.getParent().resolve(matches[0].concat(SECONDARY_SOLID_DEX_EXTENSION));
          secondaryDexJarsMultimapBuilder.put(output,p);
        }
      }
      ImmutableMultimap<Path,Path> secondaryDexJarsMultimap=secondaryDexJarsMultimapBuilder.build();
      if (!secondaryDexJarsMultimap.isEmpty()) {
        for (        Map.Entry<Path,Collection<Path>> entry : secondaryDexJarsMultimap.asMap().entrySet()) {
          Path store=entry.getKey();
          Collection<Path> secondaryDexJars=entry.getValue();
          Path secondaryBlobOutput=store.getParent().resolve("uncompressed.dex.blob");
          Path secondaryCompressedBlobOutput=store;
          StepRunner stepRunner=new DefaultStepRunner(context);
          Step concatStep=new ConcatStep(filesystem,ImmutableList.copyOf(secondaryDexJars),secondaryBlobOutput);
          Step xzStep;
          if (xzCompressionLevel.isPresent()) {
            xzStep=new XzStep(filesystem,secondaryBlobOutput,secondaryCompressedBlobOutput,xzCompressionLevel.get().intValue());
          }
 else {
            xzStep=new XzStep(filesystem,secondaryBlobOutput,secondaryCompressedBlobOutput);
          }
          stepRunner.runStepForBuildTarget(concatStep,Optional.<BuildTarget>absent());
          stepRunner.runStepForBuildTarget(xzStep,Optional.<BuildTarget>absent());
        }
      }
    }
  }
 catch (  StepFailedException|IOException e) {
    context.logError(e,"There was an error in smart dexing step.");
    return StepExecutionResult.ERROR;
  }
  return StepExecutionResult.SUCCESS;
}
