{
  String output=outputPath.toString();
  if (DexStore.XZ.matchesPath(outputPath)) {
    List<Step> steps=Lists.newArrayList();
    Path tempDexJarOutput=Paths.get(output.replaceAll("\\.jar\\.xz$",".tmp.jar"));
    steps.add(new DxStep(tempDexJarOutput,filesToDex,dxOptions));
    Path repackedJar=Paths.get(output.replaceAll("\\.xz$",""));
    steps.add(new RepackZipEntriesStep(tempDexJarOutput,repackedJar,ImmutableSet.of("classes.dex"),ZipStep.MIN_COMPRESSION_LEVEL));
    steps.add(new RmStep(tempDexJarOutput,true));
    steps.add(new XzStep(repackedJar));
    return new CompositeStep(steps);
  }
 else   if (DexStore.JAR.matchesPath(outputPath) || DexStore.RAW.matchesPath(outputPath) || output.endsWith("classes.dex")) {
    return new DxStep(outputPath,filesToDex,dxOptions);
  }
 else {
    throw new IllegalArgumentException(String.format("Suffix of %s does not have a corresponding DexStore type.",outputPath));
  }
}
