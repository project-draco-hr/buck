{
  return FluentIterable.from(yaccInputs).transformAndConcat(new Function<SourcePath,Iterable<? extends SourcePath>>(){
    @Override public Iterable<? extends SourcePath> apply(    SourcePath yaccInput){
      String yaccFileName=getSourcePathResolver().getAbsolutePath(yaccInput).getFileName().toString();
      ImmutableList.Builder<SourcePath> toReturn=ImmutableList.builder();
      toReturn.add(new PathSourcePath(getProjectFilesystem(),getGeneratedSourceDir().resolve(yaccFileName.replaceFirst(OCamlCompilables.OCAML_MLY_REGEX,OCamlCompilables.OCAML_ML))));
      toReturn.add(new PathSourcePath(getProjectFilesystem(),getGeneratedSourceDir().resolve(yaccFileName.replaceFirst(OCamlCompilables.OCAML_MLY_REGEX,OCamlCompilables.OCAML_MLI))));
      return toReturn.build();
    }
  }
);
}
