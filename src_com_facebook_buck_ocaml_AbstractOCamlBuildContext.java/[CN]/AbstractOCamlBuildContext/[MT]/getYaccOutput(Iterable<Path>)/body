{
  return FluentIterable.from(yaccInputs).transformAndConcat(new Function<Path,Iterable<? extends Path>>(){
    @Override public Iterable<? extends Path> apply(    Path yaccInput){
      String yaccFileName=yaccInput.getFileName().toString();
      return ImmutableList.of(getGeneratedSourceDir().resolve(yaccFileName.replaceFirst(OCamlCompilables.OCAML_MLY_REGEX,OCamlCompilables.OCAML_ML)),getGeneratedSourceDir().resolve(yaccFileName.replaceFirst(OCamlCompilables.OCAML_MLY_REGEX,OCamlCompilables.OCAML_MLI)));
    }
  }
);
}
