{
  super(buildRuleParams);
  this.binaryJar=Preconditions.checkNotNull(classesJar);
  this.sourceJar=Preconditions.checkNotNull(sourceJar);
  this.javadocUrl=Preconditions.checkNotNull(javadocUrl);
  transitiveClasspathEntriesSupplier=Suppliers.memoize(new Supplier<ImmutableSetMultimap<JavaLibraryRule,String>>(){
    @Override public ImmutableSetMultimap<JavaLibraryRule,String> get(){
      ImmutableSetMultimap.Builder<JavaLibraryRule,String> classpathEntries=ImmutableSetMultimap.builder();
      classpathEntries.put(PrebuiltJarRule.this,getBinaryJar());
      classpathEntries.putAll(Classpaths.getClasspathEntries(getDeps()));
      return classpathEntries.build();
    }
  }
);
  declaredClasspathEntriesSupplier=Suppliers.memoize(new Supplier<ImmutableSetMultimap<JavaLibraryRule,String>>(){
    @Override public ImmutableSetMultimap<JavaLibraryRule,String> get(){
      ImmutableSetMultimap.Builder<JavaLibraryRule,String> classpathEntries=ImmutableSetMultimap.builder();
      classpathEntries.put(PrebuiltJarRule.this,getBinaryJar());
      return classpathEntries.build();
    }
  }
);
}
