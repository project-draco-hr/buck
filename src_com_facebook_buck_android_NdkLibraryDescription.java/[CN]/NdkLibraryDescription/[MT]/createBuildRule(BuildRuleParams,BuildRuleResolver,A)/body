{
  final ImmutableSortedSet.Builder<SourcePath> srcs=ImmutableSortedSet.naturalOrder();
  try {
    final Path buildRulePath=params.getBuildTarget().getBasePath();
    final Path rootDirectory=params.getPathAbsolutifier().apply(buildRulePath);
    Files.walkFileTree(rootDirectory,EnumSet.of(FileVisitOption.FOLLOW_LINKS),Integer.MAX_VALUE,new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        if (EXTENSIONS_REGEX.matcher(file.toString()).matches()) {
          srcs.add(new PathSourcePath(buildRulePath.resolve(rootDirectory.relativize(file))));
        }
        return super.visitFile(file,attrs);
      }
    }
);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  return new NdkLibrary(params,new SourcePathResolver(resolver),srcs.build(),args.flags.get(),args.isAsset.or(false),ndkVersion);
}
