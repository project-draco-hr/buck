{
  MutableDirectedGraph<String> mutableGraph=new MutableDirectedGraph<>();
  mutableGraph.addEdge("A","B");
  mutableGraph.addEdge("B","C");
  mutableGraph.addEdge("B","D");
  mutableGraph.addEdge("C","E");
  mutableGraph.addEdge("D","E");
  mutableGraph.addEdge("A","E");
  ImmutableDirectedAcyclicGraph<String> graph=new DefaultImmutableDirectedAcyclicGraph<>(mutableGraph);
  StringBuilder output=new StringBuilder();
  Dot<String> dot=new Dot<String>(graph,"the_graph",Functions.<String>identity(),output);
  dot.writeOutput();
  String dotGraph=output.toString();
  List<String> lines=ImmutableList.copyOf(Splitter.on('\n').omitEmptyStrings().split(dotGraph));
  assertEquals("digraph the_graph {",lines.get(0));
  Set<String> edges=ImmutableSet.copyOf(lines.subList(1,lines.size() - 1));
  assertEquals(edges,ImmutableSet.of("  A -> B;","  B -> C;","  B -> D;","  C -> E;","  D -> E;","  A -> E;"));
  assertEquals("}",lines.get(lines.size() - 1));
}
