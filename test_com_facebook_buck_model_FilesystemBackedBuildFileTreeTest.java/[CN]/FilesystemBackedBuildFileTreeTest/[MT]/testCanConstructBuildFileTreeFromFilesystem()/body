{
  Path tempDir=tmp.getRoot();
  ProjectFilesystem filesystem=new ProjectFilesystem(tempDir);
  Path command=tempDir.resolve("src/com/example/build/command");
  Files.createDirectories(command);
  Path notbuck=tempDir.resolve("src/com/example/build/notbuck");
  Files.createDirectories(notbuck);
  Files.createDirectories(tempDir.resolve("src/com/example/some/directory"));
  touch(tempDir.resolve("src/com/example/BUCK"));
  touch(tempDir.resolve("src/com/example/build/BUCK"));
  touch(tempDir.resolve("src/com/example/build/command/BUCK"));
  touch(tempDir.resolve("src/com/example/build/notbuck/BUCK"));
  touch(tempDir.resolve("src/com/example/some/directory/BUCK"));
  BuildFileTree buildFiles=new FilesystemBackedBuildFileTree(filesystem,"BUCK");
  Collection<Path> allChildren=buildFiles.getChildPaths(BuildTargetFactory.newInstance("//src/com/example:example"));
  assertEquals(ImmutableSet.of(Paths.get("build"),Paths.get("some/directory")),ImmutableSet.copyOf(allChildren));
  Iterable<Path> subChildren=buildFiles.getChildPaths(BuildTargetFactory.newInstance("//src/com/example/build:build"));
  assertEquals(ImmutableSet.of(Paths.get("command"),Paths.get("notbuck")),ImmutableSet.copyOf(subChildren));
  assertEquals(Paths.get("src/com/example"),buildFiles.getBasePathOfAncestorTarget(Paths.get("src/com/example/foo")).get());
  assertEquals(Paths.get("src/com/example"),buildFiles.getBasePathOfAncestorTarget(Paths.get("src/com/example/some/bar")).get());
  assertEquals(Paths.get("src/com/example/some/directory"),buildFiles.getBasePathOfAncestorTarget(Paths.get("src/com/example/some/directory/baz")).get());
}
