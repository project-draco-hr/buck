{
  BuildTarget compilerTarget=BuildTargetFactory.newInstance("//:rule").withFlavors(HalideLibraryDescription.HALIDE_COMPILER_FLAVOR);
  BuildTarget libTarget=BuildTargetFactory.newInstance("//:rule");
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  HalideLibraryBuilder compilerBuilder=new HalideLibraryBuilder(compilerTarget);
  compilerBuilder.setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("main.cpp"))));
  HalideLibraryBuilder libBuilder=new HalideLibraryBuilder(libTarget);
  TargetGraph targetGraph=TargetGraphFactory.newInstance(compilerBuilder.build(),libBuilder.build());
  BuildRuleResolver resolver=new BuildRuleResolver(targetGraph,new BuildTargetNodeToBuildRuleTransformer());
  HalideLibrary lib=(HalideLibrary)libBuilder.build(resolver,filesystem,targetGraph);
  CxxPlatform cxxPlatform=CxxLibraryBuilder.createDefaultPlatform();
  String headerName="rule.h";
  Path headerRoot=CxxDescriptionEnhancer.getHeaderSymlinkTreePath(libTarget,cxxPlatform.getFlavor(),HeaderVisibility.PUBLIC);
  BuildTarget flavoredLibTarget=libTarget.withFlavors(HalideLibraryDescription.HALIDE_COMPILE_FLAVOR,cxxPlatform.getFlavor());
  Path headerPath=HalideCompile.headerOutputPath(flavoredLibTarget);
  assertEquals(CxxPreprocessorInput.builder().addRules(CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(libTarget,cxxPlatform.getFlavor(),HeaderVisibility.PUBLIC)).setIncludes(CxxHeaders.builder().putNameToPathMap(Paths.get(headerName),new BuildTargetSourcePath(flavoredLibTarget,headerPath)).putFullNameToPathMap(headerRoot.resolve(headerName),new BuildTargetSourcePath(flavoredLibTarget,headerPath)).build()).addSystemIncludeRoots(headerRoot).build(),lib.getCxxPreprocessorInput(cxxPlatform,HeaderVisibility.PUBLIC));
  NativeLinkableInput input=lib.getNativeLinkableInput(cxxPlatform,Linker.LinkableDepType.STATIC);
  BuildRule buildRule=FluentIterable.from(input.getArgs()).transformAndConcat(Arg.getDepsFunction(new SourcePathResolver(resolver))).get(0);
  assertThat(buildRule,is(instanceOf(Archive.class)));
}
