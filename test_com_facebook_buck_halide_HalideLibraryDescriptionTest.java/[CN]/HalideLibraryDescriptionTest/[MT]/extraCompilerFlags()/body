{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  ImmutableList<String> extraCompilerFlags=ImmutableList.<String>builder().add("--test-flag").add("test-value").add("$TEST_MACRO").build();
  BuildTarget compileTarget=BuildTargetFactory.newInstance("//:rule").withFlavors(HalideLibraryDescription.HALIDE_COMPILE_FLAVOR);
  HalideLibraryBuilder compileBuilder=new HalideLibraryBuilder(compileTarget);
  compileBuilder.setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("main.cpp"))));
  TargetGraph targetGraph=TargetGraphFactory.newInstance(compileBuilder.build());
  BuildRuleResolver resolver=new BuildRuleResolver(targetGraph,new DefaultTargetNodeToBuildRuleTransformer());
  HalideCompile compile=(HalideCompile)compileBuilder.build(resolver,filesystem,targetGraph);
  ImmutableList<Step> buildSteps=compile.getBuildSteps(FakeBuildContext.NOOP_CONTEXT,new FakeBuildableContext());
  HalideCompilerStep compilerStep=(HalideCompilerStep)buildSteps.get(1);
  ImmutableList<String> shellCommand=compilerStep.getShellCommandInternal(TestExecutionContext.newInstance());
  assertThat(shellCommand,Matchers.not(Matchers.hasItems("--test-flag","test-value")));
  compileBuilder.setCompilerInvocationFlags(extraCompilerFlags);
  targetGraph=TargetGraphFactory.newInstance(compileBuilder.build());
  resolver=new BuildRuleResolver(targetGraph,new DefaultTargetNodeToBuildRuleTransformer());
  compile=(HalideCompile)compileBuilder.build(resolver,filesystem,targetGraph);
  buildSteps=compile.getBuildSteps(FakeBuildContext.NOOP_CONTEXT,new FakeBuildableContext());
  compilerStep=(HalideCompilerStep)buildSteps.get(1);
  shellCommand=compilerStep.getShellCommandInternal(TestExecutionContext.newInstance());
  assertThat(shellCommand,Matchers.hasItems("--test-flag","test-value","test_macro_expansion"));
}
