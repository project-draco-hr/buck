{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  HalideLibraryBuilder halideLibraryBuilder=new HalideLibraryBuilder(target);
  TargetGraph targetGraph1=TargetGraphFactory.newInstance(halideLibraryBuilder.build());
  BuildRuleResolver resolver1=new BuildRuleResolver(targetGraph1,new DefaultTargetNodeToBuildRuleTransformer());
  HalideLibrary halideLibrary=(HalideLibrary)halideLibraryBuilder.build(resolver1,filesystem,targetGraph1);
  assertThat(halideLibrary.getNativeLinkableInput(CxxPlatformUtils.DEFAULT_PLATFORM,Linker.LinkableDepType.STATIC).getArgs(),not(Matchers.empty()));
  halideLibraryBuilder.setSupportedPlatformsRegex(Pattern.compile("nothing"));
  TargetGraph targetGraph2=TargetGraphFactory.newInstance(halideLibraryBuilder.build());
  BuildRuleResolver resolver2=new BuildRuleResolver(targetGraph2,new DefaultTargetNodeToBuildRuleTransformer());
  halideLibrary=(HalideLibrary)halideLibraryBuilder.build(resolver2,filesystem,targetGraph2);
  assertThat(halideLibrary.getNativeLinkableInput(CxxPlatformUtils.DEFAULT_PLATFORM,Linker.LinkableDepType.STATIC).getArgs(),Matchers.empty());
}
