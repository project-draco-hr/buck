{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  JavacOptions javacOptions=JavacOptionsFactory.create(templateJavacOptions,params,resolver,pathResolver,args);
  CxxLibraryEnhancement cxxLibraryEnhancement=new CxxLibraryEnhancement(params,args.useCxxLibraries,args.cxxLibraryWhitelist,resolver,pathResolver,cxxPlatform);
  params=cxxLibraryEnhancement.updatedParams;
  BuildTarget abiJarTarget=params.getBuildTarget().withAppendedFlavors(CalculateAbi.FLAVOR);
  BuildRuleParams testsLibraryParams=params.copyWithDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getDeclaredDeps().get()).addAll(BuildRules.getExportedRules(Iterables.concat(params.getDeclaredDeps().get(),resolver.getAllRules(args.providedDeps.get())))).addAll(pathResolver.filterBuildRuleInputs(javacOptions.getInputs(pathResolver))).build()),params.getExtraDeps()).withFlavor(JavaTest.COMPILED_TESTS_LIBRARY_FLAVOR);
  JavaLibrary testsLibrary=resolver.addToIndex(new DefaultJavaLibrary(testsLibraryParams,pathResolver,args.srcs.get(),ResourceValidator.validateResources(pathResolver,params.getProjectFilesystem(),args.resources.get()),javacOptions.getGeneratedSourceFolderName(),args.proguardConfig.transform(SourcePaths.toSourcePath(params.getProjectFilesystem())),ImmutableList.<String>of(),ImmutableSortedSet.<BuildRule>of(),ImmutableSortedSet.<BuildRule>of(),new BuildTargetSourcePath(abiJarTarget),javacOptions.trackClassUsage(),ImmutableSet.<Path>of(),new JavacToJarStepFactory(javacOptions,JavacOptionsAmender.IDENTITY),args.resourcesRoot,args.manifestFile,args.mavenCoords,ImmutableSortedSet.<BuildTarget>of(),ImmutableSet.<Pattern>of()));
  JavaTest javaTest=resolver.addToIndex(new JavaTest(params.copyWithDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(testsLibrary)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,testsLibrary,ImmutableSet.<Path>of(),args.labels.get(),args.contacts.get(),args.testType.or(TestType.JUNIT),javaOptions.getJavaRuntimeLauncher(),args.vmArgs.get(),cxxLibraryEnhancement.nativeLibsEnvironment,args.testRuleTimeoutMs.or(defaultTestRuleTimeoutMs),args.env.get(),args.getRunTestSeparately(),args.getForkMode(),args.stdOutLogLevel,args.stdErrLogLevel));
  resolver.addToIndex(CalculateAbi.of(abiJarTarget,pathResolver,params,new BuildTargetSourcePath(testsLibrary.getBuildTarget())));
  return javaTest;
}
