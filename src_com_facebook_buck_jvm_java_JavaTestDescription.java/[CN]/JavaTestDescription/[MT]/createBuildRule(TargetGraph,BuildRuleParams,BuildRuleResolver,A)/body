{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  JavacOptions.Builder javacOptionsBuilder=JavaLibraryDescription.getJavacOptions(pathResolver,args,templateOptions);
  AnnotationProcessingParams annotationParams=args.buildAnnotationProcessingParams(params.getBuildTarget(),params.getProjectFilesystem(),resolver);
  javacOptionsBuilder.setAnnotationProcessingParams(annotationParams);
  JavacOptions javacOptions=javacOptionsBuilder.build();
  CxxLibraryEnhancement cxxLibraryEnhancement=new CxxLibraryEnhancement(params,args.useCxxLibraries,pathResolver,cxxPlatform);
  params=cxxLibraryEnhancement.updatedParams;
  BuildTarget abiJarTarget=BuildTarget.builder(params.getBuildTarget()).addFlavors(CalculateAbi.FLAVOR).build();
  JavaTest test=resolver.addToIndex(new JavaTest(params.appendExtraDeps(Iterables.concat(BuildRules.getExportedRules(Iterables.concat(params.getDeclaredDeps().get(),resolver.getAllRules(args.providedDeps.get()))),pathResolver.filterBuildRuleInputs(javacOptions.getInputs(pathResolver)))),pathResolver,args.srcs.get(),JavaLibraryDescription.validateResources(pathResolver,args,params.getProjectFilesystem()),javacOptions.getGeneratedSourceFolderName(),args.labels.get(),args.contacts.get(),args.proguardConfig.transform(SourcePaths.toSourcePath(params.getProjectFilesystem())),new BuildTargetSourcePath(abiJarTarget),ImmutableSet.<Path>of(),args.testType.or(TestType.JUNIT),new JavacStepFactory(javacOptions,JavacOptionsAmender.IDENTITY),args.vmArgs.get(),cxxLibraryEnhancement.nativeLibsEnvironment,validateAndGetSourcesUnderTest(args.sourceUnderTest.get(),params.getBuildTarget(),resolver),args.resourcesRoot,args.mavenCoords,args.testRuleTimeoutMs.or(defaultTestRuleTimeoutMs),args.getRunTestSeparately(),args.stdOutLogLevel,args.stdErrLogLevel,testTempDirOverride));
  resolver.addToIndex(CalculateAbi.of(abiJarTarget,pathResolver,params,new BuildTargetSourcePath(test.getBuildTarget())));
  return test;
}
