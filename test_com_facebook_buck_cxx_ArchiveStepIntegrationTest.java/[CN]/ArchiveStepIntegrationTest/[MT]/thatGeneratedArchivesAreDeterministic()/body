{
  ProjectFilesystem filesystem=new ProjectFilesystem(tmp.getRoot().toPath());
  CxxPlatform platform=DefaultCxxPlatforms.build(new CxxBuckConfig(new FakeBuckConfig()));
  ImmutableList<String> archiver=platform.getAr().getCommandPrefix(new SourcePathResolver(new BuildRuleResolver()));
  Path output=filesystem.resolve(Paths.get("output.a"));
  Path relativeInput=Paths.get("input.dat");
  Path input=filesystem.resolve(relativeInput);
  filesystem.writeContentsToPath("blah",relativeInput);
  Preconditions.checkState(input.toFile().setExecutable(true));
  ArchiveStep archiveStep=new ArchiveStep(archiver,output,ImmutableList.of(input));
  FileScrubberStep fileScrubberStep=new FileScrubberStep(output,platform.getAr().getScrubbers());
  ExecutionContext executionContext=TestExecutionContext.newBuilder().setProjectFilesystem(new ProjectFilesystem(tmp.getRoot().toPath())).build();
  TestConsole console=(TestConsole)executionContext.getConsole();
  int exitCode=archiveStep.execute(executionContext);
  assertEquals("archive step failed: " + console.getTextWrittenToStdErr(),0,exitCode);
  exitCode=fileScrubberStep.execute(executionContext);
  assertEquals("archive scrub step failed: " + console.getTextWrittenToStdErr(),0,exitCode);
  try (ArArchiveInputStream stream=new ArArchiveInputStream(new FileInputStream(output.toFile()))){
    ArArchiveEntry entry=stream.getNextArEntry();
    assertEquals(0,entry.getLastModified());
    assertEquals(0,entry.getUserId());
    assertEquals(0,entry.getGroupId());
    assertEquals(String.format("0%o",entry.getMode()),0100644,entry.getMode());
  }
 }
