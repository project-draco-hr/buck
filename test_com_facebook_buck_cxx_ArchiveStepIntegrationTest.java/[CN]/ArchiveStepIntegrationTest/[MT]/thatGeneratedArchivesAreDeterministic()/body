{
  assumeTrue(Platform.detect() == Platform.MACOS || Platform.detect() == Platform.LINUX);
  ProjectFilesystem filesystem=new ProjectFilesystem(tmp.getRoot().toPath());
  CxxPlatform platform=DefaultCxxPlatforms.build(new CxxBuckConfig(FakeBuckConfig.builder().build()));
  SourcePathResolver sourcePathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer()));
  Tool archiver=platform.getAr();
  Path output=filesystem.getRootPath().getFileSystem().getPath("output.a");
  Path input=filesystem.getRootPath().getFileSystem().getPath("input.dat");
  filesystem.writeContentsToPath("blah",input);
  Preconditions.checkState(filesystem.resolve(input).toFile().setExecutable(true));
  ArchiveStep archiveStep=new ArchiveStep(filesystem,archiver.getEnvironment(sourcePathResolver),archiver.getCommandPrefix(sourcePathResolver),Archive.Contents.NORMAL,output,ImmutableList.of(input));
  FileScrubberStep fileScrubberStep=new FileScrubberStep(filesystem,output,platform.getAr().getScrubbers());
  ExecutionContext executionContext=TestExecutionContext.newInstance();
  TestConsole console=(TestConsole)executionContext.getConsole();
  int exitCode=archiveStep.execute(executionContext).getExitCode();
  assertEquals("archive step failed: " + console.getTextWrittenToStdErr(),0,exitCode);
  exitCode=fileScrubberStep.execute(executionContext).getExitCode();
  assertEquals("archive scrub step failed: " + console.getTextWrittenToStdErr(),0,exitCode);
  try (ArArchiveInputStream stream=new ArArchiveInputStream(new FileInputStream(filesystem.resolve(output).toFile()))){
    ArArchiveEntry entry=stream.getNextArEntry();
    assertEquals(0,entry.getLastModified());
    assertEquals(0,entry.getUserId());
    assertEquals(0,entry.getGroupId());
    assertEquals(String.format("0%o",entry.getMode()),0100644,entry.getMode());
  }
 }
