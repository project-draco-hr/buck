{
  for (  final NativeLinkStrategy strategy : NativeLinkStrategy.values()) {
    ProjectFilesystem filesystem=new AllExistingProjectFilesystem();
    CxxLibraryBuilder cxxLibraryBuilder=new CxxLibraryBuilder(BuildTargetFactory.newInstance("//:dep1")).setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("test.c")))).setForceStatic(true);
    PrebuiltCxxLibraryBuilder prebuiltCxxLibraryBuilder=new PrebuiltCxxLibraryBuilder(BuildTargetFactory.newInstance("//:dep2")).setForceStatic(true);
    PythonBuckConfig config=new PythonBuckConfig(FakeBuckConfig.builder().build(),new AlwaysFoundExecutableFinder()){
      @Override public NativeLinkStrategy getNativeLinkStrategy(){
        return strategy;
      }
    }
;
    PythonBinaryBuilder binaryBuilder=new PythonBinaryBuilder(BuildTargetFactory.newInstance("//:bin"),config,PythonTestUtils.PYTHON_PLATFORMS,CxxPlatformUtils.DEFAULT_PLATFORM,CxxPlatformUtils.DEFAULT_PLATFORMS);
    binaryBuilder.setMainModule("main");
    binaryBuilder.setDeps(ImmutableSortedSet.of(cxxLibraryBuilder.getTarget(),prebuiltCxxLibraryBuilder.getTarget()));
    BuildRuleResolver resolver=new BuildRuleResolver(TargetGraphFactory.newInstance(cxxLibraryBuilder.build(),prebuiltCxxLibraryBuilder.build(),binaryBuilder.build()),new DefaultTargetNodeToBuildRuleTransformer());
    cxxLibraryBuilder.build(resolver);
    prebuiltCxxLibraryBuilder.build(resolver,filesystem);
    PythonBinary binary=(PythonBinary)binaryBuilder.build(resolver);
    assertThat("Using " + strategy,binary.getComponents().getNativeLibraries().keySet(),Matchers.hasItems(Paths.get("libdep1.so"),Paths.get("libdep2.so")));
  }
}
