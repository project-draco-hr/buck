{
  FlavorDomain<PythonPlatform> pythonPlatforms=FlavorDomain.of("Python Platform",PY2);
  PrebuiltCxxLibraryBuilder python2Builder=new PrebuiltCxxLibraryBuilder(PYTHON2_DEP_TARGET).setHeaderOnly(true).setExportedLinkerFlags(ImmutableList.of("-lpython2"));
  CxxPythonExtensionBuilder extensionBuilder=new CxxPythonExtensionBuilder(BuildTargetFactory.newInstance("//:extension"),pythonPlatforms,new CxxBuckConfig(FakeBuckConfig.builder().build()),CxxPlatformUtils.DEFAULT_PLATFORMS);
  extensionBuilder.setBaseModule("hello");
  PythonBuckConfig config=new PythonBuckConfig(FakeBuckConfig.builder().build(),new AlwaysFoundExecutableFinder()){
    @Override public NativeLinkStrategy getNativeLinkStrategy(){
      return NativeLinkStrategy.MERGED;
    }
  }
;
  PythonBinaryBuilder binaryBuilder=new PythonBinaryBuilder(BuildTargetFactory.newInstance("//:bin"),config,pythonPlatforms,CxxPlatformUtils.DEFAULT_PLATFORM,CxxPlatformUtils.DEFAULT_PLATFORMS);
  binaryBuilder.setMainModule("main");
  binaryBuilder.setDeps(ImmutableSortedSet.of(extensionBuilder.getTarget()));
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraphFactory.newInstance(python2Builder.build(),extensionBuilder.build(),binaryBuilder.build()),new BuildTargetNodeToBuildRuleTransformer());
  python2Builder.build(resolver);
  extensionBuilder.build(resolver);
  PythonBinary binary=(PythonBinary)binaryBuilder.build(resolver);
  assertThat(binary.getComponents().getNativeLibraries().entrySet(),Matchers.<Map.Entry<Path,SourcePath>>empty());
  assertThat(Iterables.transform(binary.getComponents().getModules().keySet(),Functions.toStringFunction()),Matchers.containsInAnyOrder("hello/extension.so"));
}
