{
  PythonPlatform platform1=PythonPlatform.of(ImmutableFlavor.of("pyPlat1"),new PythonEnvironment(Paths.get("python2.6"),PythonVersion.of("CPython","2.6.9")),Optional.<BuildTarget>absent());
  PythonPlatform platform2=PythonPlatform.of(ImmutableFlavor.of("pyPlat2"),new PythonEnvironment(Paths.get("python2.7"),PythonVersion.of("CPython","2.7.11")),Optional.<BuildTarget>absent());
  PythonBinaryBuilder builder=PythonBinaryBuilder.create(BuildTargetFactory.newInstance("//:bin"),FlavorDomain.of("Python Platform",platform1,platform2));
  builder.setMainModule("main");
  PythonBinary binary1=(PythonBinary)builder.setPlatform(platform1.getFlavor().toString()).build(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer()));
  assertThat(binary1.getPythonPlatform(),Matchers.equalTo(platform1));
  PythonBinary binary2=(PythonBinary)builder.setPlatform(platform2.getFlavor().toString()).build(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer()));
  assertThat(binary2.getPythonPlatform(),Matchers.equalTo(platform2));
}
