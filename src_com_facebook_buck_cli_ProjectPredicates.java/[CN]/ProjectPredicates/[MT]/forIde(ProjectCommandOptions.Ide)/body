{
  Predicate<TargetNode<?>> projectRootsPredicate;
  AssociatedTargetNodePredicate associatedProjectPredicate;
switch (targetIde) {
case INTELLIJ:
    projectRootsPredicate=new Predicate<TargetNode<?>>(){
      @Override public boolean apply(      TargetNode<?> input){
        return input.getType() == ProjectConfigDescription.TYPE;
      }
    }
;
  associatedProjectPredicate=new AssociatedTargetNodePredicate(){
    @Override public boolean apply(    TargetNode<?> targetNode,    TargetGraph targetGraph){
      ProjectConfigDescription.Arg projectArg;
      if (targetNode.getType() == ProjectConfigDescription.TYPE) {
        projectArg=(ProjectConfigDescription.Arg)targetNode.getConstructorArg();
      }
 else {
        return false;
      }
      BuildTarget projectTarget=null;
      if (projectArg.srcTarget.isPresent()) {
        projectTarget=projectArg.srcTarget.get();
      }
 else       if (projectArg.testTarget.isPresent()) {
        projectTarget=projectArg.testTarget.get();
      }
      return (projectTarget != null && targetGraph.get(projectTarget) != null);
    }
  }
;
break;
case XCODE:
projectRootsPredicate=new Predicate<TargetNode<?>>(){
@Override public boolean apply(TargetNode<?> input){
  return XcodeWorkspaceConfigDescription.TYPE == input.getType();
}
}
;
associatedProjectPredicate=new AssociatedTargetNodePredicate(){
@Override public boolean apply(TargetNode<?> targetNode,TargetGraph targetGraph){
return false;
}
}
;
break;
default :
throw new IllegalStateException("'ide' should always be of type 'INTELLIJ' or 'XCODE'");
}
return ImmutableProjectPredicates.of(projectRootsPredicate,associatedProjectPredicate);
}
