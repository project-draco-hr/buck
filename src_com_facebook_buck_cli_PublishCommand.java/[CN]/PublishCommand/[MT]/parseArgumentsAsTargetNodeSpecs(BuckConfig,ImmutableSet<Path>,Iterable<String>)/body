{
  ImmutableList<TargetNodeSpec> specs=super.parseArgumentsAsTargetNodeSpecs(config,ignorePaths,targetsAsArgs);
  if (includeSource) {
    specs=ImmutableList.<TargetNodeSpec>builder().addAll(specs).addAll(FluentIterable.from(specs).filter(new Predicate<TargetNodeSpec>(){
      @Override public boolean apply(      TargetNodeSpec input){
        if (!(input instanceof BuildTargetSpec)) {
          throw new IllegalArgumentException("Targets must be explicitly defined when using " + INCLUDE_SOURCE_LONG_ARG);
        }
        return !((BuildTargetSpec)input).getBuildTarget().getFlavors().contains(JavaLibrary.SRC_JAR);
      }
    }
).transform(new Function<TargetNodeSpec,BuildTargetSpec>(){
      @Override public BuildTargetSpec apply(      TargetNodeSpec input){
        return BuildTargetSpec.of(((BuildTargetSpec)input).getBuildTarget().withFlavors(JavaLibrary.SRC_JAR),input.getBuildFileSpec());
      }
    }
)).build();
  }
  return specs;
}
