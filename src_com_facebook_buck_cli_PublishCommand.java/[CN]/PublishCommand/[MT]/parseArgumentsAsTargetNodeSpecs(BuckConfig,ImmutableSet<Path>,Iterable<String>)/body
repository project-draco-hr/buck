{
  ImmutableList<TargetNodeSpec> specs=super.parseArgumentsAsTargetNodeSpecs(config,ignorePaths,targetsAsArgs);
  if (includeSource) {
    specs=ImmutableList.<TargetNodeSpec>builder().addAll(specs).addAll(FluentIterable.from(specs).filter(new Predicate<TargetNodeSpec>(){
      @Override public boolean apply(      TargetNodeSpec input){
        if (!(input instanceof BuildTargetSpec)) {
          throw new IllegalArgumentException("Targets must be explicitly defined when using " + INCLUDE_SOURCE_LONG_ARG);
        }
        return !((BuildTargetSpec)input).getBuildTarget().getFlavors().contains(JavaLibrary.SRC_JAR);
      }
    }
).transform(new Function<TargetNodeSpec,BuildTargetSpec>(){
      @Override public BuildTargetSpec apply(      TargetNodeSpec input){
        return BuildTargetSpec.of(((BuildTargetSpec)input).getBuildTarget().withFlavors(JavaLibrary.SRC_JAR),input.getBuildFileSpec());
      }
    }
)).build();
  }
  specs=FluentIterable.from(specs).transform(new Function<TargetNodeSpec,TargetNodeSpec>(){
    @Nullable @Override public TargetNodeSpec apply(    @Nullable TargetNodeSpec input){
      if (!(input instanceof BuildTargetSpec)) {
        throw new IllegalArgumentException("Need to specify build targets explicitly when publishing. " + "Cannot modify " + input);
      }
      BuildTargetSpec buildTargetSpec=(BuildTargetSpec)input;
      BuildTarget buildTarget=Preconditions.checkNotNull(buildTargetSpec.getBuildTarget());
      return buildTargetSpec.withBuildTarget(BuildTarget.builder(buildTarget).addFlavors(JavaLibrary.MAVEN_JAR).build());
    }
  }
).toList();
  return specs;
}
