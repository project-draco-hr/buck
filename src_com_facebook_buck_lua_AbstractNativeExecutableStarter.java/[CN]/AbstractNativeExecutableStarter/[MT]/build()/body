{
  Iterable<? extends AbstractCxxLibrary> nativeStarterDeps=getNativeStarterDeps();
  ImmutableMap<CxxPreprocessAndCompile,SourcePath> objects=CxxSourceRuleFactory.requirePreprocessAndCompileRules(getBaseParams(),getRuleResolver(),getPathResolver(),getCxxBuckConfig(),getCxxPlatform(),ImmutableList.<CxxPreprocessorInput>builder().add(CxxPreprocessorInput.builder().putAllPreprocessorFlags(CxxSource.Type.CXX,getNativeStarterLibrary().isPresent() ? ImmutableList.<String>of() : ImmutableList.of("-DBUILTIN_NATIVE_STARTER")).build()).addAll(getTransitiveCxxPreprocessorInput(getCxxPlatform(),nativeStarterDeps)).build(),ImmutableMultimap.<CxxSource.Type,String>of(),Optional.<SourcePath>absent(),getCxxBuckConfig().getPreprocessMode(),ImmutableMap.of("native-starter.cpp",getNativeStarterCxxSource()),CxxSourceRuleFactory.PicType.PDC);
  getRuleResolver().addToIndex(CxxLinkableEnhancer.createCxxLinkableBuildRule(getCxxBuckConfig(),getCxxPlatform(),getBaseParams(),getRuleResolver(),getPathResolver(),getTarget(),Linker.LinkType.EXECUTABLE,Optional.<String>absent(),getOutput(),Linker.LinkableDepType.SHARED,nativeStarterDeps,Optional.<Linker.CxxRuntimeType>absent(),Optional.<SourcePath>absent(),ImmutableSet.<BuildTarget>of(),NativeLinkableInput.builder().addAllArgs(getRelativeNativeLibsDir().isPresent() ? StringArg.from(Linkers.iXlinker("-rpath",String.format("%s/%s",getCxxPlatform().getLd().resolve(getRuleResolver()).origin(),getRelativeNativeLibsDir().get().toString()))) : ImmutableList.<com.facebook.buck.rules.args.Arg>of()).addAllArgs(SourcePathArg.from(getPathResolver(),objects.values())).build()));
  return new BuildTargetSourcePath(getTarget());
}
