{
  BuildTarget templateTarget=BuildTarget.builder(getBaseParams().getBuildTarget()).addFlavors(ImmutableFlavor.of("native-starter-cxx-source-template")).build();
  getRuleResolver().addToIndex(new WriteFile(getBaseParams().copyWithChanges(templateTarget,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),getPathResolver(),getNativeStarterCxxSourceTemplate(),BuildTargets.getGenPath(getBaseParams().getProjectFilesystem(),templateTarget,"%s/native-starter.cpp.in"),false));
  BuildTarget target=BuildTarget.builder(getBaseParams().getBuildTarget()).addFlavors(ImmutableFlavor.of("native-starter-cxx-source")).build();
  Path output=BuildTargets.getGenPath(getBaseParams().getProjectFilesystem(),target,"%s/native-starter.cpp");
  getRuleResolver().addToIndex(WriteStringTemplateRule.from(getBaseParams(),getPathResolver(),target,output,new BuildTargetSourcePath(templateTarget),ImmutableMap.of("MAIN_MODULE",Escaper.escapeAsPythonString(getMainModule()),"MODULES_DIR",getRelativeModulesDir().isPresent() ? Escaper.escapeAsPythonString(getRelativeModulesDir().get().toString()) : "NULL","PY_MODULES_DIR",getRelativePythonModulesDir().isPresent() ? Escaper.escapeAsPythonString(getRelativePythonModulesDir().get().toString()) : "NULL","EXT_SUFFIX",Escaper.escapeAsPythonString(getCxxPlatform().getSharedLibraryExtension())),false));
  return CxxSource.of(CxxSource.Type.CXX,new BuildTargetSourcePath(target),ImmutableList.<String>of());
}
