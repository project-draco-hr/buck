{
  BuildRuleResolver resolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(FakeFileHashCache.createFromStrings(ImmutableMap.<String,String>builder().put("input.o",Strings.repeat("a",40)).build()),pathResolver);
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  ImmutableMap.Builder<NdkCxxPlatforms.TargetCpuType,RuleKey> ruleKeys=ImmutableMap.builder();
  for (  Map.Entry<NdkCxxPlatforms.TargetCpuType,NdkCxxPlatform> entry : cxxPlatforms.entrySet()) {
    BuildRule rule=CxxLinkableEnhancer.createCxxLinkableBuildRule(TargetGraph.EMPTY,entry.getValue().getCxxPlatform(),new FakeBuildRuleParamsBuilder(target).build(),pathResolver,target,Linker.LinkType.EXECUTABLE,Optional.<String>absent(),Paths.get("output"),SourcePathArg.from(pathResolver,new TestSourcePath("input.o")),Linker.LinkableDepType.SHARED,ImmutableList.<BuildRule>of(),Optional.<Linker.CxxRuntimeType>absent(),Optional.<SourcePath>absent(),ImmutableSet.<BuildTarget>of(),ImmutableSet.<FrameworkPath>of());
    RuleKeyBuilder builder=ruleKeyBuilderFactory.newInstance(rule);
    ruleKeys.put(entry.getKey(),builder.build());
  }
  return ruleKeys.build();
}
