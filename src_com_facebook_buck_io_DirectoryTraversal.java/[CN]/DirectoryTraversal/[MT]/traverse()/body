{
  Preconditions.checkState(Files.isDirectory(root),"Must be a directory: %s",root);
  FileVisitor<Path> visitor=new FileVisitor<Path>(){
    @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attrs) throws IOException {
      if (ignorePaths.contains(root.relativize(dir))) {
        return FileVisitResult.SKIP_SUBTREE;
      }
 else {
        visitDirectory(dir,root.relativize(dir).toString());
        return FileVisitResult.CONTINUE;
      }
    }
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      visit(file,root.relativize(file).toString());
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFileFailed(    Path file,    IOException exc) throws IOException {
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult postVisitDirectory(    Path dir,    IOException exc) throws IOException {
      return FileVisitResult.CONTINUE;
    }
  }
;
  Files.walkFileTree(root,EnumSet.of(FileVisitOption.FOLLOW_LINKS),Integer.MAX_VALUE,visitor);
}
