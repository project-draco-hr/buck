{
  BuildRule rule=ruleResolver.requireRule(BuildTarget.builder(params.getBuildTarget()).addFlavors(flavor,CxxDescriptionEnhancer.getHeaderSymlinkTreeFlavor(headerVisibility)).build());
  Preconditions.checkState(rule instanceof HeaderSymlinkTree,"Attempt to add %s of type %s and class %s to %s",rule.getFullyQualifiedName(),rule.getType(),rule.getClass(),params.getBuildTarget());
  HeaderSymlinkTree symlinkTree=(HeaderSymlinkTree)rule;
  CxxPreprocessorInput.Builder builder=CxxPreprocessorInput.builder().addRules(symlinkTree.getBuildTarget()).putAllPreprocessorFlags(exportedPreprocessorFlags).setIncludes(CxxHeaders.builder().setNameToPathMap(ImmutableSortedMap.copyOf(symlinkTree.getLinks())).setFullNameToPathMap(ImmutableSortedMap.copyOf(symlinkTree.getFullLinks())).build()).addAllFrameworks(frameworks);
switch (includeType) {
case LOCAL:
    builder.addIncludeRoots(symlinkTree.getIncludePath());
  builder.addAllHeaderMaps(symlinkTree.getHeaderMap().asSet());
break;
case SYSTEM:
builder.addSystemIncludeRoots(symlinkTree.getSystemIncludePath());
break;
}
return builder.build();
}
