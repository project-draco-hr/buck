{
  final Map<BuildTarget,CxxPreprocessorInput> deps=Maps.newTreeMap();
  AbstractDependencyVisitor visitor=new AbstractDependencyVisitor(inputs){
    @Override public ImmutableSet<BuildRule> visit(    BuildRule rule){
      if (rule instanceof CxxPreprocessorDep) {
        CxxPreprocessorDep dep=(CxxPreprocessorDep)rule;
        Preconditions.checkState(!deps.containsKey(rule.getBuildTarget()));
        deps.put(rule.getBuildTarget(),dep.getCxxPreprocessorInput());
        return rule.getDeps();
      }
 else {
        return ImmutableSet.of();
      }
    }
  }
;
  visitor.start();
  return CxxPreprocessorInput.concat(deps.values());
}
