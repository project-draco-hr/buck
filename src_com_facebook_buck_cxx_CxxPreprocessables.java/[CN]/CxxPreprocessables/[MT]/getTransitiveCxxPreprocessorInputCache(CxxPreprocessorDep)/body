{
  return CacheBuilder.newBuilder().build(new CacheLoader<CxxPreprocessorInputCacheKey,ImmutableMap<BuildTarget,CxxPreprocessorInput>>(){
    @Override public ImmutableMap<BuildTarget,CxxPreprocessorInput> load(    @Nonnull CxxPreprocessorInputCacheKey key) throws Exception {
      Map<BuildTarget,CxxPreprocessorInput> builder=new LinkedHashMap<>();
      builder.put(preprocessorDep.getBuildTarget(),preprocessorDep.getCxxPreprocessorInput(key.getPlatform(),key.getVisibility()));
      for (      CxxPreprocessorDep dep : preprocessorDep.getCxxPreprocessorDeps(key.getPlatform())) {
        builder.putAll(dep.getTransitiveCxxPreprocessorInput(key.getPlatform(),key.getVisibility()));
      }
      return ImmutableMap.copyOf(builder);
    }
  }
);
}
