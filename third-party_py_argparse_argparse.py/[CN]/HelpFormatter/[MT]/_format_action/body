def _format_action(self, action):
    help_position = min((self._action_max_length + 2), self._max_help_position)
    help_width = (self._width - help_position)
    action_width = ((help_position - self._current_indent) - 2)
    action_header = self._format_action_invocation(action)
    if (not action.help):
        tup = (self._current_indent, '', action_header)
        action_header = ('%*s%s\n' % tup)
    elif (len(action_header) <= action_width):
        tup = (self._current_indent, '', action_width, action_header)
        action_header = ('%*s%-*s  ' % tup)
        indent_first = 0
    else:
        tup = (self._current_indent, '', action_header)
        action_header = ('%*s%s\n' % tup)
        indent_first = help_position
    parts = [action_header]
    if action.help:
        help_text = self._expand_help(action)
        help_lines = self._split_lines(help_text, help_width)
        parts.append(('%*s%s\n' % (indent_first, '', help_lines[0])))
        for line in help_lines[1:]:
            parts.append(('%*s%s\n' % (help_position, '', line)))
    elif (not action_header.endswith('\n')):
        parts.append('\n')
    for subaction in self._iter_indented_subactions(action):
        parts.append(self._format_action(subaction))
    return self._join_parts(parts)
