{
  if (!(object instanceof List)) {
    throw CoerceFailedException.simple(object,getOutputClass(),"input object should be a list of pairs");
  }
  PatternMatchedCollection.Builder<T> builder=PatternMatchedCollection.builder();
  List<?> list=(List<?>)object;
  for (  Object element : list) {
    if (!(element instanceof Collection) || ((Collection<?>)element).size() != 2) {
      throw CoerceFailedException.simple(object,getOutputClass(),"input object should be a list of pairs");
    }
    Iterator<?> pair=((Collection<?>)element).iterator();
    Pattern platformSelector=patternTypeCoercer.coerce(buildTargetParser,filesystem,pathRelativeToProjectRoot,pair.next());
    T value=valueTypeCoercer.coerce(buildTargetParser,filesystem,pathRelativeToProjectRoot,pair.next());
    builder.add(platformSelector,value);
  }
  return builder.build();
}
