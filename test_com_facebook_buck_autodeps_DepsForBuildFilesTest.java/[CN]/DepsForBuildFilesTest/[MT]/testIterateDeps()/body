{
  DepsForBuildFiles depsForBuildFiles=new DepsForBuildFiles();
  BuildTarget fooTarget=BuildTargetFactory.newInstance("//java/com/example:foo");
  BuildTarget barTarget=BuildTargetFactory.newInstance("//java/com/example:bar");
  BuildTarget bazTarget=BuildTargetFactory.newInstance("//java/com/example/baz:baz");
  BuildTarget aTarget=BuildTargetFactory.newInstance("//java/com/example:a");
  BuildTarget bTarget=BuildTargetFactory.newInstance("//java/com/example:b");
  BuildTarget cTarget=BuildTargetFactory.newInstance("//java/com/example:c");
  BuildTarget dTarget=BuildTargetFactory.newInstance("//java/com/example:d");
  BuildTarget eTarget=BuildTargetFactory.newInstance("//java/com/example:e");
  BuildTarget fTarget=BuildTargetFactory.newInstance("//java/com/example:f");
  BuildTarget gTarget=BuildTargetFactory.newInstance("//java/com/example:g");
  BuildTarget hTarget=BuildTargetFactory.newInstance("//java/com/example:h");
  BuildTarget iTarget=BuildTargetFactory.newInstance("//java/com/example:i");
  depsForBuildFiles.addDep(fooTarget,barTarget,DependencyType.DEPS);
  depsForBuildFiles.addDep(fooTarget,bazTarget,DependencyType.DEPS);
  depsForBuildFiles.addDep(barTarget,bazTarget,DependencyType.DEPS);
  depsForBuildFiles.addDep(bazTarget,gTarget,DependencyType.DEPS);
  depsForBuildFiles.addDep(bazTarget,hTarget,DependencyType.DEPS);
  depsForBuildFiles.addDep(bazTarget,aTarget,DependencyType.DEPS);
  depsForBuildFiles.addDep(bazTarget,eTarget,DependencyType.DEPS);
  depsForBuildFiles.addDep(bazTarget,bTarget,DependencyType.DEPS);
  depsForBuildFiles.addDep(bazTarget,iTarget,DependencyType.DEPS);
  depsForBuildFiles.addDep(bazTarget,dTarget,DependencyType.DEPS);
  depsForBuildFiles.addDep(bazTarget,fTarget,DependencyType.DEPS);
  depsForBuildFiles.addDep(bazTarget,cTarget,DependencyType.DEPS);
  Map<BuildTarget,List<BuildTarget>> observed=new HashMap<>();
  for (  DepsForBuildFiles.BuildFileWithDeps buildFileWithDeps : depsForBuildFiles) {
    Path directory=buildFileWithDeps.getBasePath();
    for (    DepsForBuildFiles.DepsForRule depsForRule : buildFileWithDeps) {
      String fullyQualifiedName=String.format("//%s:%s",directory,depsForRule.getShortName());
      BuildTarget buildTarget=BuildTargetFactory.newInstance(fullyQualifiedName);
      List<BuildTarget> deps=ImmutableList.copyOf(depsForRule.depsForDependencyType(DependencyType.DEPS));
      observed.put(buildTarget,deps);
    }
  }
  assertEquals(ImmutableMap.builder().put(fooTarget,ImmutableList.of(barTarget,bazTarget)).put(barTarget,ImmutableList.of(bazTarget)).put(bazTarget,ImmutableList.of(aTarget,bTarget,cTarget,dTarget,eTarget,fTarget,gTarget,hTarget,iTarget)).build(),observed);
}
