{
  Type type=TestFields.class.getField("eitherStringOrStringList").getGenericType();
  TypeCoercer<Either<String,List<String>>> coercer=(TypeCoercer<Either<String,List<String>>>)typeCoercerFactory.typeCoercerForType(type);
  TestTraversal traversal=new TestTraversal();
  Either<String,List<String>> input=Either.ofRight((List<String>)ImmutableList.of("foo"));
  coercer.traverse(input,traversal);
  assertThat(traversal.getObjects(),Matchers.contains(ImmutableList.<Matcher<? super Object>>of(sameInstance((Object)input.getRight()),sameInstance((Object)input.getRight().get(0)))));
  traversal=new TestTraversal();
  Either<String,List<String>> input2=Either.ofLeft("foo");
  coercer.traverse(input2,traversal);
  assertThat(traversal.getObjects(),hasSize(1));
  assertThat(traversal.getObjects().get(0),sameInstance((Object)"foo"));
}
