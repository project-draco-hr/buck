{
  Type type=TestFields.class.getField("listOfAppleSources").getGenericType();
  TypeCoercer<?> coercer=typeCoercerFactory.typeCoercerForType(type);
  ImmutableList<?> input=ImmutableList.of(ImmutableList.of("Group1",ImmutableList.of("foo.m",ImmutableList.of("bar.m","-Wall"))),ImmutableList.of("Group2",ImmutableList.of("baz.m",ImmutableList.of("blech.m","-fobjc-arc"))));
  Object result=coercer.coerce(buildRuleResolver,Paths.get(""),input);
  ImmutableList<AppleSource> expectedResult=ImmutableList.of(AppleSource.ofSourceGroup(new Pair<>("Group1",ImmutableList.of(AppleSource.ofSourcePath(new FileSourcePath("foo.m")),AppleSource.ofSourcePathWithFlags(new Pair<SourcePath,String>(new FileSourcePath("bar.m"),"-Wall"))))),AppleSource.ofSourceGroup(new Pair<>("Group2",ImmutableList.of(AppleSource.ofSourcePath(new FileSourcePath("baz.m")),AppleSource.ofSourcePathWithFlags(new Pair<SourcePath,String>(new FileSourcePath("blech.m"),"-fobjc-arc"))))));
  assertEquals(expectedResult,result);
}
