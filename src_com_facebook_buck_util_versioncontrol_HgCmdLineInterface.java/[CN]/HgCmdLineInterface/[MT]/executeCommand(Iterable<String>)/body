{
  command=replaceTemplateValue(command,HG_CMD_TEMPLATE,hgCmd);
  String commandString=commandAsString(command);
  LOG.debug("Executing command: " + commandString);
  ProcessExecutorParams processExecutorParams=ProcessExecutorParams.builder().setCommand(command).setDirectory(projectRoot).setEnvironment(HG_ENVIRONMENT_VARIABLES).build();
  ProcessExecutor.Result result;
  try (PrintStream stdout=new PrintStream(new ByteArrayOutputStream());PrintStream stderr=new PrintStream(new ByteArrayOutputStream())){
    ProcessExecutor processExecutor=processExecutorFactory.createProcessExecutor(stdout,stderr);
    result=processExecutor.launchAndExecute(processExecutorParams);
  }
 catch (  IOException e) {
    throw new VersionControlCommandFailedException(e);
  }
  Optional<String> resultString=result.getStdout();
  if (!resultString.isPresent()) {
    throw new VersionControlCommandFailedException("Received no output from launched process for command: " + commandString);
  }
  if (result.getExitCode() != 0) {
    Optional<String> stderr=result.getStderr();
    String stdErrString=stderr.isPresent() ? stderr.get() : "";
    throw new VersionControlCommandFailedException("Received non-zero exit for for command:" + commandString + "\nStdErr: "+ stdErrString);
  }
  return cleanResultString(resultString.get());
}
