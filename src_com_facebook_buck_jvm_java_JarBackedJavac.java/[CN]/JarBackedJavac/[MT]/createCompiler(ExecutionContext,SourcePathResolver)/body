{
  ClassLoaderCache classLoaderCache=context.getClassLoaderCache();
  ClassLoader compilerClassLoader=classLoaderCache.getClassLoaderForClassPath(ClassLoader.getSystemClassLoader(),FluentIterable.from(classpath).transformAndConcat(new Function<SourcePath,Collection<Path>>(){
    @Override public Collection<Path> apply(    SourcePath input){
      Set<Path> paths=new HashSet<>();
      Optional<BuildRule> rule=resolver.getRule(input);
      if (rule instanceof JavaLibrary) {
        paths.addAll(((JavaLibrary)rule).getTransitiveClasspathEntries().values());
      }
 else {
        paths.add(resolver.deprecatedGetPath(input));
      }
      return paths;
    }
  }
).transform(PATH_TO_URL).toSortedSet(Ordering.usingToString()).asList());
  try {
    return (JavaCompiler)compilerClassLoader.loadClass(compilerClassName).newInstance();
  }
 catch (  ClassNotFoundException|IllegalAccessException|InstantiationException ex) {
    throw new RuntimeException(ex);
  }
}
