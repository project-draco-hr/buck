{
  ImmutableList<String> depsStrings=ImmutableList.of("//example/path:one","//example/path:two");
  ImmutableSet<BuildTarget> depsTargets=FluentIterable.from(depsStrings).transform(new Function<String,BuildTarget>(){
    @Override public BuildTarget apply(    String input){
      return BuildTargetFactory.newInstance(input);
    }
  }
).toSet();
  ImmutableMap<String,Object> rawNode=ImmutableMap.<String,Object>of("deps",depsStrings,"sourcePaths",ImmutableList.of("//example/path:four","MyClass.java"),"appleSource","//example/path:five","source","AnotherClass.java");
  TargetNode<Arg> targetNode=createTargetNode(TARGET_THREE,depsTargets,rawNode);
  assertThat(targetNode.getInputs(),containsInAnyOrder(Paths.get("example/path/MyClass.java"),Paths.get("example/path/AnotherClass.java")));
  assertThat(targetNode.getExtraDeps(),containsInAnyOrder(BuildTargetFactory.newInstance("//example/path:four"),BuildTargetFactory.newInstance("//example/path:five")));
  assertThat(targetNode.getDeclaredDeps(),containsInAnyOrder(BuildTargetFactory.newInstance("//example/path:one"),BuildTargetFactory.newInstance("//example/path:two")));
}
