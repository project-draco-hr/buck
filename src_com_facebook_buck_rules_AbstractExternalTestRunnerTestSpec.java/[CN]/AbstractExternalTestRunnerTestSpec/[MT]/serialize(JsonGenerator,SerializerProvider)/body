{
  jsonGenerator.writeStartObject();
  jsonGenerator.writeStringField("target",getTarget().toString());
  jsonGenerator.writeStringField("type",getType());
  jsonGenerator.writeObjectField("command",getCommand());
  jsonGenerator.writeObjectField("env",getEnv());
  if (!getNeededCoverage().isEmpty()) {
    jsonGenerator.writeObjectField("needed_coverage",Iterables.transform(getNeededCoverage(),new Function<Pair<Float,ImmutableSet<Path>>,ImmutableList<?>>(){
      @Override public ImmutableList<?> apply(      Pair<Float,ImmutableSet<Path>> input){
        return ImmutableList.of(input.getFirst(),input.getSecond());
      }
    }
));
  }
  jsonGenerator.writeObjectField("labels",FluentIterable.from(getLabels()).transform(Functions.toStringFunction()).toList());
  jsonGenerator.writeObjectField("contacts",getContacts());
  jsonGenerator.writeEndObject();
}
