{
  FakeNode nodeA=createNode("A");
  FakeNode nodeB=createNode("B");
  FakeNode nodeC=createNode("C");
  FakeNode nodeD=createNode("D");
  FakeNode nodeE=createNode("E");
  FakeNode nodeF=createNode("F",nodeE,nodeD);
  FakeNode nodeG=createNode("G");
  FakeNode nodeH=createNode("H",nodeC,nodeB);
  FakeNode nodeI=createNode("I",nodeA);
  FakeNode initialNode=createNode("J",nodeF,nodeG,nodeH,nodeI);
  final List<FakeNode> nodeTraversalOrder=Lists.newArrayList();
  new AbstractBreadthFirstTraversal<FakeNode>(initialNode){
    @Override public ImmutableSet<FakeNode> visit(    FakeNode node){
      nodeTraversalOrder.add(node);
      return node.getDeps();
    }
  }
.start();
  assertEquals("Dependencies should be explored breadth-first, using lexicographic ordering to break ties",ImmutableList.of(initialNode,nodeF,nodeG,nodeH,nodeI,nodeD,nodeE,nodeB,nodeC,nodeA),nodeTraversalOrder);
}
