{
  FakeNode node1=createNode("1");
  FakeNode node2=createNode("2");
  FakeNode node3=createNode("3");
  FakeNode node4=createNode("4");
  FakeNode node5=createNode("5");
  FakeNode node6=createNode("6",node5,node4);
  FakeNode node7=createNode("7");
  FakeNode node8=createNode("8",node3,node2);
  FakeNode node9=createNode("9",node1);
  FakeNode initialNode=createNode("10",node6,node7,node8,node9);
  final List<FakeNode> nodeTraversalOrder=Lists.newArrayList();
  new AbstractBreadthFirstTraversal<FakeNode>(initialNode){
    @Override public ImmutableSet<FakeNode> visit(    FakeNode node){
      nodeTraversalOrder.add(node);
      return ImmutableSet.copyOf(Iterables.filter(node.getDeps(),new Predicate<FakeNode>(){
        @Override public boolean apply(        FakeNode input){
          return Integer.parseInt(input.getName()) % 2 == 0;
        }
      }
));
    }
  }
.start();
  assertEquals("Dependencies should be explored breadth-first, only containing nodes whose node name is " + "an even number",ImmutableList.of(initialNode,node6,node8,node4,node2),nodeTraversalOrder);
}
