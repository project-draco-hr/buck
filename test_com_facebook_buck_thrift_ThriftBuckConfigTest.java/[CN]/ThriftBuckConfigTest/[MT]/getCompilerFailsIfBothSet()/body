{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildTarget thriftTarget=BuildTargetFactory.newInstance("//:thrift_target");
  Path thriftPath=Paths.get("thrift_path");
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  filesystem.touch(thriftPath);
  FakeBuckConfig buckConfig=new FakeBuckConfig(ImmutableMap.<String,Map<String,String>>of("thrift",ImmutableMap.of("compiler_target",thriftTarget.toString(),"compiler_path",thriftPath.toString())),filesystem);
  ThriftBuckConfig thriftBuckConfig=new ThriftBuckConfig(buckConfig);
  FakeBuildRule thriftRule=createFakeBuildRule("//:thrift_target",new SourcePathResolver(resolver));
  resolver.addToIndex(thriftRule);
  try {
    thriftBuckConfig.getCompiler(resolver);
    fail("expected to throw");
  }
 catch (  HumanReadableException e) {
    assertTrue(e.getMessage().contains("Cannot set both thrift:compiler_target and thrift:compiler_path"));
  }
}
