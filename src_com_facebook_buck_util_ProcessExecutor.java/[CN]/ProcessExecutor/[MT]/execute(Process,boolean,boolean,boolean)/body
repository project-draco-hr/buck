{
  @SuppressWarnings("resource") PrintStream stdOutToWriteTo=shouldRecordStdOut ? new CapturingPrintStream() : stdOutStream;
  InputStreamConsumer stdOut=new InputStreamConsumer(process.getInputStream(),stdOutToWriteTo,shouldRecordStdOut,ansi);
  @SuppressWarnings("resource") PrintStream stdErrToWriteTo=shouldPrintStdErr ? stdErrStream : new CapturingPrintStream();
  InputStreamConsumer stdErr=new InputStreamConsumer(process.getErrorStream(),stdErrToWriteTo,true,ansi);
  Thread stdOutConsumer=new Thread(stdOut);
  stdOutConsumer.start();
  Thread stdErrConsumer=new Thread(stdErr);
  stdErrConsumer.start();
  try {
    process.waitFor();
    stdOutConsumer.join();
    stdErrConsumer.join();
  }
 catch (  InterruptedException e) {
    return new Result(1,"");
  }
  String stdOutText;
  if (shouldRecordStdOut) {
    CapturingPrintStream capturingPrintStream=(CapturingPrintStream)stdOutToWriteTo;
    stdOutText=capturingPrintStream.getContentsAsString(Charsets.US_ASCII);
  }
 else {
    stdOutText=null;
  }
  int exitCode=process.exitValue();
  if (exitCode != 0 && !shouldPrintStdErr && !isSilent) {
    CapturingPrintStream capturingPrintStream=(CapturingPrintStream)stdErrToWriteTo;
    stdErrStream.print(capturingPrintStream.getContentsAsString(Charsets.US_ASCII));
  }
  return new Result(exitCode,stdOutText);
}
