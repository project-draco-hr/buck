{
  boolean shouldPrintStdOut=options.contains(Option.PRINT_STD_OUT);
  boolean expectingStdOut=options.contains(Option.EXPECTING_STD_OUT);
  PrintStream stdOutToWriteTo=shouldPrintStdOut ? stdOutStream : new CapturingPrintStream();
  InputStreamConsumer stdOut=new InputStreamConsumer(process.getInputStream(),InputStreamConsumer.createAnsiHighlightingHandler(!shouldPrintStdOut && !expectingStdOut,stdOutToWriteTo,ansi));
  boolean shouldPrintStdErr=options.contains(Option.PRINT_STD_ERR);
  boolean expectingStdErr=options.contains(Option.EXPECTING_STD_ERR);
  PrintStream stdErrToWriteTo=shouldPrintStdErr ? stdErrStream : new CapturingPrintStream();
  InputStreamConsumer stdErr=new InputStreamConsumer(process.getErrorStream(),InputStreamConsumer.createAnsiHighlightingHandler(!shouldPrintStdErr && !expectingStdErr,stdErrToWriteTo,ansi));
  FutureTask<Void> stdOutTerminationFuture=new FutureTask<>(stdOut);
  Thread stdOutConsumer=Threads.namedThread("ProcessExecutor (stdOut)",stdOutTerminationFuture);
  stdOutConsumer.start();
  FutureTask<Void> stdErrTerminationFuture=new FutureTask<>(stdErr);
  Thread stdErrConsumer=Threads.namedThread("ProcessExecutor (stdErr)",stdErrTerminationFuture);
  stdErrConsumer.start();
  boolean timedOut=false;
  try {
    if (stdin.isPresent()) {
      try (OutputStreamWriter stdinWriter=new OutputStreamWriter(process.getOutputStream())){
        stdinWriter.write(stdin.get());
      }
     }
    if (timeOutMs.isPresent()) {
      waitForTimeout(process,timeOutMs.get(),timeOutHandler);
      if (!finished(process)) {
        timedOut=true;
        process.destroy();
      }
    }
 else {
      process.waitFor();
    }
    stdOutTerminationFuture.get();
    stdErrTerminationFuture.get();
  }
 catch (  ExecutionException|IOException e) {
    return new Result(1);
  }
 finally {
    process.destroy();
    process.waitFor();
  }
  Optional<String> stdoutText=getDataIfNotPrinted(stdOutToWriteTo,shouldPrintStdOut);
  Optional<String> stderrText=getDataIfNotPrinted(stdErrToWriteTo,shouldPrintStdErr);
  int exitCode=process.exitValue();
  if (exitCode != 0 && !options.contains(Option.IS_SILENT)) {
    if (!shouldPrintStdOut && !stdoutText.get().isEmpty()) {
      LOG.verbose("Writing captured stdout text to stream: [%s]",stdoutText.get());
      stdOutStream.print(stdoutText.get());
    }
    if (!shouldPrintStdErr && !stderrText.get().isEmpty()) {
      LOG.verbose("Writing captured stderr text to stream: [%s]",stderrText.get());
      stdErrStream.print(stderrText.get());
    }
  }
  return new Result(exitCode,timedOut,stdoutText,stderrText);
}
