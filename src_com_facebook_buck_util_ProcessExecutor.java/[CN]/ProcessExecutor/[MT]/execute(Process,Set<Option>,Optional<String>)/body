{
  boolean shouldPrintStdOut=options.contains(Option.PRINT_STD_OUT);
  boolean expectingStdOut=options.contains(Option.EXPECTING_STD_OUT);
  @SuppressWarnings("resource") PrintStream stdOutToWriteTo=shouldPrintStdOut ? stdOutStream : new CapturingPrintStream();
  InputStreamConsumer stdOut=new InputStreamConsumer(process.getInputStream(),stdOutToWriteTo,ansi,!shouldPrintStdOut && !expectingStdOut,Optional.<InputStreamConsumer.Handler>absent());
  boolean shouldPrintStdErr=options.contains(Option.PRINT_STD_ERR);
  boolean expectingStdErr=options.contains(Option.EXPECTING_STD_ERR);
  @SuppressWarnings("resource") PrintStream stdErrToWriteTo=shouldPrintStdErr ? stdErrStream : new CapturingPrintStream();
  InputStreamConsumer stdErr=new InputStreamConsumer(process.getErrorStream(),stdErrToWriteTo,ansi,!shouldPrintStdErr && !expectingStdErr,Optional.<InputStreamConsumer.Handler>absent());
  Thread stdOutConsumer=Threads.namedThread("ProcessExecutor (stdOut)",stdOut);
  stdOutConsumer.start();
  Thread stdErrConsumer=Threads.namedThread("ProcessExecutor (stdErr)",stdErr);
  stdErrConsumer.start();
  try {
    if (stdin.isPresent()) {
      try (OutputStreamWriter stdinWriter=new OutputStreamWriter(process.getOutputStream())){
        stdinWriter.write(stdin.get());
      }
     }
    process.waitFor();
    stdOutConsumer.join();
    stdErrConsumer.join();
  }
 catch (  IOException e) {
    return new Result(1);
  }
 finally {
    process.destroy();
    process.waitFor();
  }
  Optional<String> stdoutText=getDataIfNotPrinted(stdOutToWriteTo,shouldPrintStdOut);
  Optional<String> stderrText=getDataIfNotPrinted(stdErrToWriteTo,shouldPrintStdErr);
  int exitCode=process.exitValue();
  if (exitCode != 0 && !options.contains(Option.IS_SILENT)) {
    if (!shouldPrintStdOut) {
      stdOutStream.print(stdoutText.get());
    }
    if (!shouldPrintStdErr) {
      stdErrStream.print(stderrText.get());
    }
  }
  return new Result(exitCode,stdoutText,stderrText);
}
