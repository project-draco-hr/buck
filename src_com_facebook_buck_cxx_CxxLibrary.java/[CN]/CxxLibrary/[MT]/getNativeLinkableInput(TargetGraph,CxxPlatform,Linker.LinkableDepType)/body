{
  if (!isPlatformSupported(cxxPlatform)) {
    return NativeLinkableInput.of();
  }
  if (headerOnly.apply(cxxPlatform)) {
    return NativeLinkableInput.of(ImmutableList.<Arg>of(),Preconditions.checkNotNull(frameworks),ImmutableSet.<FrameworkPath>of());
  }
  ImmutableList.Builder<Arg> linkerArgsBuilder=ImmutableList.builder();
  linkerArgsBuilder.addAll(Preconditions.checkNotNull(exportedLinkerFlags.apply(cxxPlatform)));
  if (type != Linker.LinkableDepType.SHARED || linkage == Linkage.STATIC) {
    BuildRule rule=requireBuildRule(targetGraph,cxxPlatform.getFlavor(),type == Linker.LinkableDepType.STATIC ? CxxDescriptionEnhancer.STATIC_FLAVOR : CxxDescriptionEnhancer.STATIC_PIC_FLAVOR);
    Arg library=new SourcePathArg(getResolver(),new BuildTargetSourcePath(rule.getBuildTarget()));
    if (linkWhole) {
      Linker linker=cxxPlatform.getLd();
      linkerArgsBuilder.addAll(linker.linkWhole(library));
    }
 else {
      linkerArgsBuilder.add(library);
    }
  }
 else {
    BuildRule rule=requireBuildRule(targetGraph,cxxPlatform.getFlavor(),CxxDescriptionEnhancer.SHARED_FLAVOR);
    linkerArgsBuilder.add(new SourcePathArg(getResolver(),new BuildTargetSourcePath(rule.getBuildTarget())));
  }
  final ImmutableList<Arg> linkerArgs=linkerArgsBuilder.build();
  return NativeLinkableInput.of(linkerArgs,Preconditions.checkNotNull(frameworks),Preconditions.checkNotNull(libraries));
}
