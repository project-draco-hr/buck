{
  final BuildRule libraryRule;
  ImmutableList.Builder<String> linkerArgsBuilder=ImmutableList.builder();
  if (type == Type.SHARED) {
    Path sharedLibraryPath=CxxDescriptionEnhancer.getSharedLibraryPath(getBuildTarget());
    libraryRule=requireBuildRule(CxxDescriptionEnhancer.SHARED_FLAVOR);
    linkerArgsBuilder.add(sharedLibraryPath.toString());
  }
 else {
    libraryRule=requireBuildRule(CxxDescriptionEnhancer.STATIC_FLAVOR);
    Path staticLibraryPath=CxxDescriptionEnhancer.getStaticLibraryPath(getBuildTarget());
    if (linkWhole) {
      linkerArgsBuilder.addAll(linker.linkWhole(staticLibraryPath.toString()));
    }
 else {
      linkerArgsBuilder.add(staticLibraryPath.toString());
    }
  }
  final ImmutableList<String> linkerArgs=linkerArgsBuilder.build();
  return new NativeLinkableInput(ImmutableList.<SourcePath>of(new BuildTargetSourcePath(libraryRule.getBuildTarget())),linkerArgs);
}
