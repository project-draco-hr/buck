{
  if (!isPlatformSupported(cxxPlatform)) {
    return NativeLinkableInput.of();
  }
  if (headerOnly.apply(cxxPlatform)) {
    return NativeLinkableInput.of(ImmutableList.<SourcePath>of(),ImmutableList.<String>of(),Preconditions.checkNotNull(frameworkSearchPaths.apply(cxxPlatform)));
  }
  final BuildRule libraryRule;
  ImmutableList.Builder<String> linkerArgsBuilder=ImmutableList.builder();
  linkerArgsBuilder.addAll(exportedLinkerFlags.apply(cxxPlatform));
  if (type != Linker.LinkableDepType.SHARED || linkage == Linkage.STATIC) {
    libraryRule=CxxDescriptionEnhancer.requireBuildRule(params,ruleResolver,cxxPlatform.getFlavor(),type == Linker.LinkableDepType.STATIC ? CxxDescriptionEnhancer.STATIC_FLAVOR : CxxDescriptionEnhancer.STATIC_PIC_FLAVOR);
    Path staticLibraryPath=CxxDescriptionEnhancer.getStaticLibraryPath(getBuildTarget(),cxxPlatform.getFlavor(),type == Linker.LinkableDepType.STATIC ? CxxSourceRuleFactory.PicType.PDC : CxxSourceRuleFactory.PicType.PIC);
    if (linkWhole) {
      Linker linker=cxxPlatform.getLd();
      linkerArgsBuilder.addAll(linker.linkWhole(staticLibraryPath.toString()));
    }
 else {
      linkerArgsBuilder.add(staticLibraryPath.toString());
    }
  }
 else {
    String sharedLibrarySoname=soname.or(CxxDescriptionEnhancer.getDefaultSharedLibrarySoname(params.getBuildTarget(),cxxPlatform));
    Path sharedLibraryPath=CxxDescriptionEnhancer.getSharedLibraryPath(getBuildTarget(),sharedLibrarySoname,cxxPlatform);
    libraryRule=CxxDescriptionEnhancer.requireBuildRule(params,ruleResolver,cxxPlatform.getFlavor(),CxxDescriptionEnhancer.SHARED_FLAVOR);
    linkerArgsBuilder.add(sharedLibraryPath.toString());
  }
  final ImmutableList<String> linkerArgs=linkerArgsBuilder.build();
  return NativeLinkableInput.of(ImmutableList.<SourcePath>of(new BuildTargetSourcePath(libraryRule.getBuildTarget())),linkerArgs,Preconditions.checkNotNull(frameworkSearchPaths.apply(cxxPlatform)));
}
