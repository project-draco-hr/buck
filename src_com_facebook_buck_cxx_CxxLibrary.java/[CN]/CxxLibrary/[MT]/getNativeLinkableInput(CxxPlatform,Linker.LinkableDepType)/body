{
  final BuildRule libraryRule;
  ImmutableList.Builder<String> linkerArgsBuilder=ImmutableList.builder();
  linkerArgsBuilder.addAll(exportedLinkerFlags.apply(cxxPlatform));
  if (type == Linker.LinkableDepType.SHARED) {
    Path sharedLibraryPath=CxxDescriptionEnhancer.getSharedLibraryPath(getBuildTarget(),cxxPlatform);
    libraryRule=CxxDescriptionEnhancer.requireBuildRule(params,ruleResolver,cxxPlatform.getFlavor(),CxxDescriptionEnhancer.SHARED_FLAVOR);
    linkerArgsBuilder.add(sharedLibraryPath.toString());
  }
 else {
    libraryRule=CxxDescriptionEnhancer.requireBuildRule(params,ruleResolver,cxxPlatform.getFlavor(),CxxDescriptionEnhancer.STATIC_FLAVOR);
    Path staticLibraryPath=CxxDescriptionEnhancer.getStaticLibraryPath(getBuildTarget(),cxxPlatform.getFlavor());
    if (linkWhole) {
      Linker linker=cxxPlatform.getLd();
      linkerArgsBuilder.addAll(linker.linkWhole(staticLibraryPath.toString()));
    }
 else {
      linkerArgsBuilder.add(staticLibraryPath.toString());
    }
  }
  final ImmutableList<String> linkerArgs=linkerArgsBuilder.build();
  return ImmutableNativeLinkableInput.of(ImmutableList.<SourcePath>of(new BuildTargetSourcePath(libraryRule.getProjectFilesystem(),libraryRule.getBuildTarget())),linkerArgs);
}
