{
  if (headerOnly) {
    return ImmutableMap.of();
  }
  if (linkage == Linkage.STATIC) {
    return ImmutableMap.of();
  }
  if (supportedPlatformsRegex.isPresent() && !CxxFlags.compilePlatformRegex(supportedPlatformsRegex.get()).matcher(cxxPlatform.getFlavor().toString()).find()) {
    return ImmutableMap.of();
  }
  ImmutableMap.Builder<String,SourcePath> libs=ImmutableMap.builder();
  String sharedLibrarySoname=soname.or(CxxDescriptionEnhancer.getSharedLibrarySoname(getBuildTarget(),cxxPlatform));
  BuildRule sharedLibraryBuildRule=CxxDescriptionEnhancer.requireBuildRule(params,ruleResolver,cxxPlatform.getFlavor(),CxxDescriptionEnhancer.SHARED_FLAVOR);
  libs.put(sharedLibrarySoname,new BuildTargetSourcePath(sharedLibraryBuildRule.getProjectFilesystem(),sharedLibraryBuildRule.getBuildTarget()));
  return libs.build();
}
