{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRuleParams flavoredParams=BuildRuleParamsFactory.createTrivialBuildRuleParams(TARGET);
  ThriftConstructorArg arg=new ThriftConstructorArg();
  ImmutableMap<String,ThriftSource> sources=ImmutableMap.of("test1.thrift",new ThriftSource(createFakeThriftCompiler("//:thrift_source1"),ImmutableList.<String>of(),Paths.get("output1")),"test2.thrift",new ThriftSource(createFakeThriftCompiler("//:thrift_source2"),ImmutableList.<String>of(),Paths.get("output2")));
  ImmutableSortedSet<BuildRule> deps=ImmutableSortedSet.<BuildRule>of(createFakeBuildRule("//:dep"));
  DefaultJavaLibrary library=ENHANCER.createBuildRule(flavoredParams,resolver,arg,sources,deps);
  BuildRule srcZip1=resolver.get(ENHANCER.getSourceZipBuildTarget(TARGET,"test1.thrift"));
  assertNotNull(srcZip1);
  assertTrue(srcZip1 instanceof SrcZip);
  assertEquals(ImmutableSortedSet.<BuildRule>of(sources.get("test1.thrift").getCompileRule()),srcZip1.getDeps());
  BuildRule srcZip2=resolver.get(ENHANCER.getSourceZipBuildTarget(TARGET,"test2.thrift"));
  assertNotNull(srcZip2);
  assertTrue(srcZip2 instanceof SrcZip);
  assertEquals(ImmutableSortedSet.<BuildRule>of(sources.get("test2.thrift").getCompileRule()),srcZip2.getDeps());
  assertEquals(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(deps).add(srcZip1).add(srcZip2).build(),library.getDeps());
}
