{
  BuildRuleResolver resolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  BuildRuleParams flavoredParams=new FakeBuildRuleParamsBuilder(TARGET).build();
  ThriftConstructorArg arg=new ThriftConstructorArg();
  ImmutableMap<String,ThriftSource> sources=ImmutableMap.of("test.thrift",new ThriftSource(createFakeThriftCompiler("//:thrift_source",pathResolver),ImmutableList.<String>of(),Paths.get("output")));
  FakeBuildRule exportedRule=resolver.addToIndex(new FakeBuildRule("//:exported_rule",pathResolver));
  FakeExportDependenciesRule exportingRule=resolver.addToIndex(new FakeExportDependenciesRule("//:exporting_rule",pathResolver,exportedRule));
  DefaultJavaLibrary library=ENHANCER.createBuildRule(TargetGraph.EMPTY,flavoredParams,resolver,arg,sources,ImmutableSortedSet.<BuildRule>of(exportingRule));
  assertThat(library.getDeps(),Matchers.<BuildRule>hasItem(exportedRule));
}
