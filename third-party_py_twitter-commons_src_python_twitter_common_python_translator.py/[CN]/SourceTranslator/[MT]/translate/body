def translate(self, package):
    'From a SourcePackage, translate to a binary distribution.'
    if (not isinstance(package, SourcePackage)):
        return None
    (unpack_path, installer) = (None, None)
    version = self._interpreter.version
    try:
        unpack_path = package.fetch(conn_timeout=self._conn_timeout)
    except package.UnreadableLink as e:
        TRACER.log(('Failed to fetch %s: %s' % (package, e)))
        return None
    try:
        if (self._use_2to3 and (version >= (3,))):
            with TRACER.timed(('Translating 2->3 %s' % package.name)):
                self.run_2to3(unpack_path)
        installer = self._installer_impl(unpack_path, interpreter=self._interpreter, strict=(package.name not in ('distribute', 'setuptools')))
        with TRACER.timed(('Packaging %s' % package.name)):
            try:
                dist_path = installer.bdist()
            except self._installer_impl.InstallFailure:
                return None
            target_path = os.path.join(self._install_cache, os.path.basename(dist_path))
            shutil.move(dist_path, target_path)
            target_package = Package.from_href(target_path)
            if (not target_package):
                return None
            if (not target_package.compatible(self._interpreter.identity, platform=self._platform)):
                return None
            return DistributionHelper.distribution_from_path(target_path)
    finally:
        if installer:
            installer.cleanup()
        if unpack_path:
            safe_rmtree(unpack_path)
