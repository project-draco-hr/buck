{
  Tool linker=haskellBuckConfig.getLinker().resolve(resolver);
  String name=target.getShortName();
  ImmutableList.Builder<Arg> argsBuilder=ImmutableList.builder();
  ImmutableList.Builder<String> flagsBuilder=ImmutableList.builder();
  flagsBuilder.addAll(haskellBuckConfig.getLinkerFlags());
  if (linkType.equals(Linker.LinkType.SHARED)) {
    name=CxxDescriptionEnhancer.getSharedLibrarySoname(Optional.<String>absent(),target.withFlavors(),cxxPlatform);
    flagsBuilder.add("-shared","-dynamic");
    flagsBuilder.addAll(MoreIterables.zipAndConcat(Iterables.cycle("-optl"),cxxPlatform.getLd().resolve(resolver).soname(name)));
  }
  flagsBuilder.addAll(extraFlags);
  argsBuilder.addAll(linkerInputs);
  for (  NativeLinkable nativeLinkable : NativeLinkables.getNativeLinkables(cxxPlatform,deps,depType).values()) {
    argsBuilder.addAll(NativeLinkables.getNativeLinkableInput(cxxPlatform,depType,nativeLinkable).getArgs());
  }
  ImmutableList<Arg> args=argsBuilder.build();
  ImmutableList<String> flags=flagsBuilder.build();
  return new HaskellLinkRule(baseParams.copyWithChanges(target,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(linker.getDeps(pathResolver)).addAll(FluentIterable.from(args).transformAndConcat(Arg.getDepsFunction(pathResolver))).build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,cxxPlatform.getAr(),cxxPlatform.getRanlib(),linker,flags,name,args,haskellBuckConfig.shouldCacheLinks());
}
