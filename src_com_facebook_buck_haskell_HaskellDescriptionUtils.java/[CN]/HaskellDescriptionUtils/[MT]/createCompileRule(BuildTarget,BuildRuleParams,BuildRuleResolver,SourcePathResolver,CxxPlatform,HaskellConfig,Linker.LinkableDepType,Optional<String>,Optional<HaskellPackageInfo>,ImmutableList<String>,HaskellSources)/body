{
  final Map<BuildTarget,ImmutableList<String>> depFlags=new TreeMap<>();
  final Map<BuildTarget,ImmutableList<SourcePath>> depIncludes=new TreeMap<>();
  final ImmutableSortedMap.Builder<String,HaskellPackage> exposedPackagesBuilder=ImmutableSortedMap.naturalOrder();
  final ImmutableSortedMap.Builder<String,HaskellPackage> packagesBuilder=ImmutableSortedMap.naturalOrder();
  new AbstractBreadthFirstThrowingTraversal<BuildRule,NoSuchBuildTargetException>(baseParams.getDeps()){
    private final ImmutableSet<BuildRule> empty=ImmutableSet.of();
    @Override public Iterable<BuildRule> visit(    BuildRule rule) throws NoSuchBuildTargetException {
      ImmutableSet<BuildRule> deps=empty;
      if (rule instanceof HaskellCompileDep) {
        deps=rule.getDeps();
        HaskellCompileInput compileInput=((HaskellCompileDep)rule).getCompileInput(cxxPlatform,depType);
        depFlags.put(rule.getBuildTarget(),compileInput.getFlags());
        depIncludes.put(rule.getBuildTarget(),compileInput.getIncludes());
        boolean firstOrderDep=baseParams.getDeps().contains(rule);
        for (        HaskellPackage pkg : compileInput.getPackages()) {
          if (firstOrderDep) {
            exposedPackagesBuilder.put(pkg.getInfo().getIdentifier(),pkg);
          }
 else {
            packagesBuilder.put(pkg.getInfo().getIdentifier(),pkg);
          }
        }
      }
      return deps;
    }
  }
.start();
  Collection<CxxPreprocessorInput> cxxPreprocessorInputs=CxxPreprocessables.getTransitiveCxxPreprocessorInput(cxxPlatform,baseParams.getDeps());
  ExplicitCxxToolFlags.Builder toolFlagsBuilder=CxxToolFlags.explicitBuilder();
  PreprocessorFlags.Builder ppFlagsBuilder=PreprocessorFlags.builder();
  toolFlagsBuilder.setPlatformFlags(CxxSourceTypes.getPlatformPreprocessFlags(cxxPlatform,CxxSource.Type.C));
  for (  CxxPreprocessorInput input : cxxPreprocessorInputs) {
    ppFlagsBuilder.addAllIncludes(input.getIncludes());
    ppFlagsBuilder.addAllSystemIncludePaths(input.getSystemIncludeRoots());
    ppFlagsBuilder.addAllFrameworkPaths(input.getFrameworks());
    toolFlagsBuilder.addAllRuleFlags(input.getPreprocessorFlags().get(CxxSource.Type.C));
  }
  ppFlagsBuilder.setOtherFlags(toolFlagsBuilder.build());
  PreprocessorFlags ppFlags=ppFlagsBuilder.build();
  ImmutableList<String> compileFlags=ImmutableList.<String>builder().addAll(haskellConfig.getCompilerFlags()).addAll(flags).addAll(Iterables.concat(depFlags.values())).build();
  ImmutableList<SourcePath> includes=ImmutableList.copyOf(Iterables.concat(depIncludes.values()));
  ImmutableSortedMap<String,HaskellPackage> exposedPackages=exposedPackagesBuilder.build();
  ImmutableSortedMap<String,HaskellPackage> packages=packagesBuilder.build();
  return HaskellCompileRule.from(target,baseParams,pathResolver,haskellConfig.getCompiler().resolve(resolver),compileFlags,ppFlags,cxxPlatform,depType == Linker.LinkableDepType.STATIC ? CxxSourceRuleFactory.PicType.PDC : CxxSourceRuleFactory.PicType.PIC,main,packageInfo,includes,exposedPackages,packages,sources);
}
