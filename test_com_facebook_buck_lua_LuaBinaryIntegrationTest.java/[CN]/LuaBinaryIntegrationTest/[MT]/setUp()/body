{
  assumeThat(Platform.detect(),Matchers.not(Platform.WINDOWS));
  LuaBuckConfig fakeConfig=new LuaBuckConfig(FakeBuckConfig.builder().build(),new ExecutableFinder());
  Optional<Path> luaOptional=fakeConfig.getSystemLua();
  assumeTrue(luaOptional.isPresent());
  lua=luaOptional.get();
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(Platform.detect(),new CxxBuckConfig(FakeBuckConfig.builder().build()));
  ProcessExecutorParams params=ProcessExecutorParams.builder().setCommand(ImmutableList.<String>builder().addAll(cxxPlatform.getCc().resolve(resolver).getCommandPrefix(new SourcePathResolver(resolver))).add("-includelua.h","-E","-").build()).setRedirectInput(ProcessBuilder.Redirect.PIPE).build();
  ProcessExecutor executor=new ProcessExecutor(Console.createNullConsole());
  ProcessExecutor.LaunchedProcess launchedProcess=executor.launchProcess(params);
  launchedProcess.getOutputStream().close();
  int exitCode=executor.waitForLaunchedProcess(launchedProcess).getExitCode();
  luaDevel=exitCode == 0;
  if (starterType == LuaBinaryDescription.StarterType.NATIVE) {
    assumeTrue("Lua devel package required for native starter",luaDevel);
  }
  workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"lua_binary",tmp);
  workspace.setUp();
  workspace.writeContentsToPath(Joiner.on(System.lineSeparator()).join(ImmutableList.of("[lua]","  starter_type = " + starterType.toString().toLowerCase(),"  native_link_strategy = " + nativeLinkStrategy.toString().toLowerCase())),".buckconfig");
  LuaBuckConfig config=getLuaBuckConfig();
  assertThat(config.getStarterType(),Matchers.equalTo(Optional.of(starterType)));
  assertThat(config.getNativeLinkStrategy(),Matchers.equalTo(nativeLinkStrategy));
}
