{
  ZipInspector zipInspector=new ZipInspector(workspace.getPath(BuildTargets.getGenPath(BuildTargetFactory.newInstance(DEX_EXOPACKAGE_TARGET),"%s.apk")));
  zipInspector.assertFileDoesNotExist("assets/secondary-program-dex-jars/metadata.txt");
  zipInspector.assertFileDoesNotExist("assets/secondary-program-dex-jars/secondary-1.dex.jar");
  zipInspector.assertFileDoesNotExist("classes2.dex");
  zipInspector.assertFileExists("classes.dex");
  zipInspector.assertFileExists("lib/armeabi/libfakenative.so");
  Path secondaryDir=workspace.resolve(BuildTargets.getScratchPath(BuildTargetFactory.newInstance(DEX_EXOPACKAGE_TARGET).withFlavors(ImmutableFlavor.of("dex_merge_output")),"_%s/jarfiles/assets/secondary-program-dex-jars"));
  try (DirectoryStream<Path> stream=Files.newDirectoryStream(secondaryDir)){
    List<Path> files=Lists.newArrayList(stream);
    assertEquals(2,files.size());
    Collections.sort(files);
    Path secondaryJar=files.get(0);
    ZipInspector zi=new ZipInspector(secondaryJar);
    zi.assertFileExists("classes.dex");
    long jarSize=Files.size(secondaryJar);
    long classesDexSize=zi.getSize("classes.dex");
    Path dexMeta=files.get(1);
    assertEquals(String.format("jar:%s dex:%s",jarSize,classesDexSize),new String(Files.readAllBytes(dexMeta),"US-ASCII"));
  }
 }
