{
  final MutableDirectedGraph<BuildRule> graph=new MutableDirectedGraph<>();
  AbstractBreadthFirstTraversal<BuildRule> visitor=new AbstractBreadthFirstTraversal<BuildRule>(inputs){
    @Override public ImmutableSet<BuildRule> visit(    BuildRule rule){
      if (filter.apply(rule)) {
        graph.addNode(rule);
        for (        BuildRule dep : rule.getDeps()) {
          if (traverse.apply(dep) && filter.apply(dep)) {
            graph.addEdge(rule,dep);
          }
        }
      }
      return traverse.apply(rule) ? rule.getDeps() : ImmutableSet.<BuildRule>of();
    }
  }
;
  visitor.start();
  return new DefaultDirectedAcyclicGraph<>(graph);
}
