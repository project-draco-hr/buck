{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRuleParams libraryParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","lib").build()).setType(AppleLibraryDescription.TYPE).build();
  AppleNativeTargetDescriptionArg libraryArg=appleLibraryDescription.createUnpopulatedConstructorArg();
  libraryArg.configs=Optional.of(ImmutableMap.<String,ImmutableList<Either<SourcePath,ImmutableMap<String,String>>>>of());
  libraryArg.srcs=Optional.of(ImmutableList.<AppleSource>of());
  libraryArg.frameworks=Optional.of(ImmutableSortedSet.<String>of());
  libraryArg.deps=Optional.absent();
  libraryArg.gid=Optional.absent();
  libraryArg.headerPathPrefix=Optional.absent();
  libraryArg.useBuckHeaderMaps=Optional.absent();
  BuildRule libraryRule=appleLibraryDescription.createBuildRule(libraryParams,resolver,libraryArg);
  resolver.addToIndex(libraryRule);
  BuildRule xctestRule=createAppleBundleBuildRule(BuildTarget.builder("//foo","xctest").build(),resolver,appleBundleDescription,libraryRule,AppleBundleExtension.XCTEST);
  resolver.addToIndex(xctestRule);
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","test").build()).setDeps(ImmutableSortedSet.of(xctestRule)).setType(AppleTestDescription.TYPE).build();
  AppleTestDescription.Arg arg=appleTestDescription.createUnpopulatedConstructorArg();
  arg.testBundle=xctestRule.getBuildTarget();
  arg.contacts=Optional.of(ImmutableSortedSet.<String>of());
  arg.labels=Optional.of(ImmutableSortedSet.<Label>of());
  arg.deps=Optional.of(ImmutableSortedSet.of(xctestRule.getBuildTarget()));
  arg.sourceUnderTest=Optional.of(ImmutableSortedSet.<BuildTarget>of());
  BuildRule testRule=appleTestDescription.createBuildRule(params,resolver,arg);
  resolver.addToIndex(testRule);
  assertTrue(AppleBuildRules.isXcodeTargetTestBuildRule(testRule));
}
