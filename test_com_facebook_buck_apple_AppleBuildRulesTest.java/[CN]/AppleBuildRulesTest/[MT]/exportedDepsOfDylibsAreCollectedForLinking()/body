{
  BuildTarget fooLibTarget=BuildTargetFactory.newInstance("//foo:lib#" + CxxDescriptionEnhancer.SHARED_FLAVOR);
  TargetNode<?> fooLibNode=AppleLibraryBuilder.createBuilder(fooLibTarget).build();
  BuildTarget fooFrameworkTarget=BuildTargetFactory.newInstance("//foo:framework");
  TargetNode<?> fooFrameworkNode=AppleBundleBuilder.createBuilder(fooFrameworkTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.FRAMEWORK)).setBinary(fooLibTarget).build();
  BuildTarget barLibTarget=BuildTargetFactory.newInstance("//bar:lib#" + CxxDescriptionEnhancer.SHARED_FLAVOR);
  TargetNode<?> barLibNode=AppleLibraryBuilder.createBuilder(barLibTarget).setDeps(Optional.of(ImmutableSortedSet.of(fooFrameworkTarget))).setExportedDeps(Optional.of(ImmutableSortedSet.of(fooFrameworkTarget))).build();
  BuildTarget barFrameworkTarget=BuildTargetFactory.newInstance("//bar:framework");
  TargetNode<?> barFrameworkNode=AppleBundleBuilder.createBuilder(barFrameworkTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.FRAMEWORK)).setBinary(barLibTarget).build();
  BuildTarget rootTarget=BuildTargetFactory.newInstance("//foo:root");
  TargetNode<?> rootNode=AppleLibraryBuilder.createBuilder(rootTarget).setDeps(Optional.of(ImmutableSortedSet.of(barFrameworkTarget))).build();
  Iterable<TargetNode<?>> rules=AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(TargetGraphFactory.newInstance(ImmutableSet.of(rootNode,fooLibNode,fooFrameworkNode,barLibNode,barFrameworkNode)),AppleBuildRules.RecursiveDependenciesMode.LINKING,rootNode,Optional.<ImmutableSet<BuildRuleType>>absent());
  assertEquals(ImmutableSortedSet.of(barFrameworkNode,fooFrameworkNode),ImmutableSortedSet.copyOf(rules));
}
