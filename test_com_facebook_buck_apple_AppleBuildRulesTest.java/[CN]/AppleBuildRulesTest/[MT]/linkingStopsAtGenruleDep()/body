{
  BuildTarget fooLibTarget=BuildTargetFactory.newInstance("//foo:lib");
  TargetNode<?> fooLibNode=AppleLibraryBuilder.createBuilder(fooLibTarget).build();
  BuildTarget fooGenruleTarget=BuildTargetFactory.newInstance("//foo:genrule");
  TargetNode<?> fooGenruleNode=GenruleBuilder.newGenruleBuilder(fooGenruleTarget).setOut("foo").setCmd("echo hi > $OUT").setSrcs(ImmutableList.<SourcePath>of(new BuildTargetSourcePath(fooLibTarget))).build();
  BuildTarget barLibTarget=BuildTargetFactory.newInstance("//bar:lib#" + CxxDescriptionEnhancer.SHARED_FLAVOR);
  TargetNode<?> barLibNode=AppleLibraryBuilder.createBuilder(barLibTarget).setDeps(Optional.of(ImmutableSortedSet.of(fooGenruleTarget))).build();
  BuildTarget barFrameworkTarget=BuildTargetFactory.newInstance("//bar:framework");
  TargetNode<?> barFrameworkNode=AppleBundleBuilder.createBuilder(barFrameworkTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.FRAMEWORK)).setBinary(barLibTarget).build();
  ImmutableSet<TargetNode<?>> targetNodes=ImmutableSet.<TargetNode<?>>builder().add(fooLibNode,fooGenruleNode,barLibNode,barFrameworkNode).build();
  Iterable<TargetNode<?>> rules=AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(TargetGraphFactory.newInstance(targetNodes),AppleBuildRules.RecursiveDependenciesMode.LINKING,barFrameworkNode,Optional.<ImmutableSet<BuildRuleType>>absent());
  assertEquals(ImmutableSortedSet.of(fooGenruleNode),ImmutableSortedSet.copyOf(rules));
}
