{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRuleParams libraryParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","lib").build()).setType(AppleLibraryDescription.TYPE).build();
  AppleNativeTargetDescriptionArg libraryArg=createDescriptionArgWithDefaults(appleLibraryDescription);
  BuildRule libraryRule=appleLibraryDescription.createBuildRule(libraryParams,resolver,libraryArg);
  resolver.addToIndex(libraryRule);
  BuildRule bundleRule=createAppleBundleBuildRule(BuildTarget.builder("//foo","bundle").build(),resolver,appleBundleDescription,libraryRule,AppleBundleExtension.XCTEST);
  resolver.addToIndex(bundleRule);
  BuildRuleParams rootParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","root").build()).setDeps(ImmutableSortedSet.of(bundleRule,libraryRule)).setType(AppleLibraryDescription.TYPE).build();
  AppleNativeTargetDescriptionArg rootArg=createDescriptionArgWithDefaults(appleLibraryDescription);
  BuildRule rootRule=appleLibraryDescription.createBuildRule(rootParams,resolver,rootArg);
  resolver.addToIndex(rootRule);
  Iterable<BuildRule> rules=AppleBuildRules.getRecursiveRuleDependenciesOfTypes(AppleBuildRules.RecursiveRuleDependenciesMode.BUILDING,rootRule,Optional.<ImmutableSet<BuildRuleType>>absent());
  assertTrue(Iterables.elementsEqual(ImmutableSortedSet.of(bundleRule,libraryRule),rules));
}
