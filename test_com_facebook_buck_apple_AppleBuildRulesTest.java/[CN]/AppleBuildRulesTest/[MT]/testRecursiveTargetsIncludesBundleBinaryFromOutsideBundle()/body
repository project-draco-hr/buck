{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildRuleParams libraryParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","lib").build()).setType(AppleLibraryDescription.TYPE).build();
  AppleNativeTargetDescriptionArg libraryArg=appleLibraryDescription.createUnpopulatedConstructorArg();
  libraryArg.configs=Optional.of(ImmutableMap.<String,ImmutableList<Either<SourcePath,ImmutableMap<String,String>>>>of());
  libraryArg.srcs=Optional.of(ImmutableList.<AppleSource>of());
  libraryArg.frameworks=Optional.of(ImmutableSortedSet.<String>of());
  libraryArg.weakFrameworks=Optional.of(ImmutableSortedSet.<String>of());
  libraryArg.deps=Optional.absent();
  libraryArg.gid=Optional.absent();
  libraryArg.headerPathPrefix=Optional.absent();
  libraryArg.useBuckHeaderMaps=Optional.absent();
  BuildRule libraryRule=appleLibraryDescription.createBuildRule(libraryParams,resolver,libraryArg);
  resolver.addToIndex(libraryRule);
  BuildRuleParams bundleParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","bundle").build()).setDeps(ImmutableSortedSet.of(libraryRule)).setType(AppleBundleDescription.TYPE).build();
  AppleBundleDescription.Arg bundleArg=appleBundleDescription.createUnpopulatedConstructorArg();
  bundleArg.infoPlist=Optional.<SourcePath>of(new TestSourcePath("Info.plist"));
  bundleArg.binary=libraryRule;
  bundleArg.extension=Either.ofLeft(AppleBundleExtension.BUNDLE);
  bundleArg.deps=Optional.of(ImmutableSortedSet.of(libraryRule));
  BuildRule bundleRule=appleBundleDescription.createBuildRule(bundleParams,resolver,bundleArg);
  resolver.addToIndex(bundleRule);
  BuildRuleParams rootParams=new FakeBuildRuleParamsBuilder(BuildTarget.builder("//foo","root").build()).setDeps(ImmutableSortedSet.of(bundleRule,libraryRule)).setType(AppleLibraryDescription.TYPE).build();
  AppleNativeTargetDescriptionArg rootArg=appleLibraryDescription.createUnpopulatedConstructorArg();
  rootArg.configs=Optional.of(ImmutableMap.<String,ImmutableList<Either<SourcePath,ImmutableMap<String,String>>>>of());
  rootArg.srcs=Optional.of(ImmutableList.<AppleSource>of());
  rootArg.frameworks=Optional.of(ImmutableSortedSet.<String>of());
  rootArg.weakFrameworks=Optional.of(ImmutableSortedSet.<String>of());
  rootArg.deps=Optional.of(ImmutableSortedSet.of(bundleRule,libraryRule));
  rootArg.gid=Optional.absent();
  rootArg.headerPathPrefix=Optional.absent();
  rootArg.useBuckHeaderMaps=Optional.absent();
  BuildRule rootRule=appleLibraryDescription.createBuildRule(rootParams,new BuildRuleResolver(),rootArg);
  Iterable<BuildRule> rules=AppleBuildRules.getRecursiveRuleDependenciesOfTypes(AppleBuildRules.RecursiveRuleDependenciesMode.BUILDING,rootRule,Optional.<ImmutableSet<BuildRuleType>>absent());
  assertTrue(Iterables.elementsEqual(ImmutableSortedSet.of(bundleRule,libraryRule),rules));
}
