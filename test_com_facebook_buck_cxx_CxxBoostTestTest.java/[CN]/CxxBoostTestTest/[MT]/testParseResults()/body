{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"boost_test",tmp);
  workspace.setUp();
  ImmutableList<String> samples=ImmutableList.of("simple_success","simple_failure","simple_failure_with_output");
  BuildTarget target=BuildTargetFactory.newInstance("//:test");
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  CxxBoostTest test=new CxxBoostTest(new FakeBuildRuleParamsBuilder(target).setProjectFilesystem(new ProjectFilesystem(tmp.getRoot().toPath())).build(),pathResolver,new CxxLink(new FakeBuildRuleParamsBuilder(BuildTargetFactory.newInstance("//:link")).build(),pathResolver,CxxPlatformUtils.DEFAULT_PLATFORM.getLd().resolve(ruleResolver),Paths.get("output"),ImmutableList.<Arg>of()),new CommandTool.Builder().addArg(new StringArg("")).build(),Suppliers.ofInstance(ImmutableMap.<String,String>of()),Suppliers.ofInstance(ImmutableList.<String>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),ImmutableSet.<Label>of(),ImmutableSet.<String>of(),ImmutableSet.<BuildRule>of(),false,Optional.<Long>absent());
  ExecutionContext context=TestExecutionContext.newInstance();
  for (  String sample : samples) {
    Path exitCode=Paths.get("unused");
    Path output=workspace.resolve(Paths.get(sample)).resolve("output");
    Path results=workspace.resolve(Paths.get(sample)).resolve("results");
    Path summaries=workspace.resolve(Paths.get(sample)).resolve("summaries");
    List<TestResultSummary> expectedSummaries=mapper.readValue(summaries.toFile(),SUMMARIES_REFERENCE);
    ImmutableList<TestResultSummary> actualSummaries=test.parseResults(context,exitCode,output,results);
    assertEquals(sample,expectedSummaries,actualSummaries);
  }
}
