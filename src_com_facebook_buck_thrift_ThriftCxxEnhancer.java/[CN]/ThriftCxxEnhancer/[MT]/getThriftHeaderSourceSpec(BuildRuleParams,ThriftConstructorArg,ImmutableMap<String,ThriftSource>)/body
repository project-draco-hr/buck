{
  ImmutableSet<String> options=(cpp2 ? args.cpp2Options : args.cppOptions).or(ImmutableSet.<String>of());
  ImmutableMap.Builder<String,SourcePath> cxxSourcesBuilder=ImmutableMap.builder();
  ImmutableMap.Builder<String,SourcePath> headersBuilder=ImmutableMap.builder();
  for (  ImmutableMap.Entry<String,ThriftSource> ent : sources.entrySet()) {
    final String thriftName=ent.getKey();
    final ThriftSource source=ent.getValue();
    final Path outputDir=source.getOutputDir();
    for (    String partialName : getGeneratedThriftSources(options,thriftName,source.getServices())) {
      String name=String.format("gen-%s/%s",getLanguage(),partialName);
      String extension=Files.getFileExtension(name);
      if (CxxCompilables.SOURCE_EXTENSIONS.contains(extension)) {
        cxxSourcesBuilder.put(name,new BuildTargetSourcePath(source.getCompileRule().getProjectFilesystem(),source.getCompileRule().getBuildTarget(),outputDir.resolve(name)));
      }
 else       if (CxxCompilables.HEADER_EXTENSIONS.contains(extension)) {
        headersBuilder.put(name,new BuildTargetSourcePath(source.getCompileRule().getProjectFilesystem(),source.getCompileRule().getBuildTarget(),outputDir.resolve(name)));
      }
 else {
        throw new HumanReadableException(String.format("%s: unexpected extension for \"%s\"",params.getBuildTarget(),name));
      }
    }
  }
  return new CxxHeadersAndSources(headersBuilder.build(),cxxSourcesBuilder.build());
}
