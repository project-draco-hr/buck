{
  final MutableDirectedGraph<BuildRule> mutableGraph=new MutableDirectedGraph<>();
  UnsortedAndroidResourceDeps.Callback callback=new UnsortedAndroidResourceDeps.Callback(){
    @Override public void onRuleVisited(    BuildRule rule,    ImmutableSet<BuildRule> depsToVisit){
      mutableGraph.addNode(rule);
      for (      BuildRule dep : depsToVisit) {
        mutableGraph.addEdge(rule,dep);
      }
    }
  }
;
  final Set<HasAndroidResourceDeps> androidResourceDeps=UnsortedAndroidResourceDeps.createFrom(rules,Optional.of(callback)).getResourceDeps();
  Predicate<BuildRule> inclusionPredicate=new Predicate<BuildRule>(){
    @Override public boolean apply(    BuildRule rule){
      return androidResourceDeps.contains(rule.getBuildable());
    }
  }
;
  ImmutableList<BuildRule> sortedAndroidResourceRules=TopologicalSort.sort(mutableGraph,inclusionPredicate);
  return ImmutableList.copyOf(Iterables.transform(sortedAndroidResourceRules.reverse(),CAST_TO_ANDROID_RESOURCE_RULE));
}
