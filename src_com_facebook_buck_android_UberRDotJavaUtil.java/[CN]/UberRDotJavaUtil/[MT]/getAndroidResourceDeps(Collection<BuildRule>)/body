{
  final MutableDirectedGraph<BuildRule> mutableGraph=new MutableDirectedGraph<>();
  final ImmutableSet.Builder<HasAndroidResourceDeps> androidResources=ImmutableSet.builder();
  AbstractDependencyVisitor visitor=new AbstractDependencyVisitor(rules){
    @Override public ImmutableSet<BuildRule> visit(    BuildRule rule){
      if (rule instanceof HasAndroidResourceDeps) {
        HasAndroidResourceDeps androidResourceRule=(HasAndroidResourceDeps)rule;
        if (androidResourceRule.getRes() != null) {
          androidResources.add(androidResourceRule);
        }
      }
      BuildRuleType type=rule.getType();
      ImmutableSet<BuildRule> depsToVisit=maybeVisitAllDeps(rule,TRAVERSABLE_TYPES.contains(type));
      mutableGraph.addNode(rule);
      for (      BuildRule dep : depsToVisit) {
        mutableGraph.addEdge(rule,dep);
      }
      return depsToVisit;
    }
  }
;
  visitor.start();
  final Set<HasAndroidResourceDeps> allAndroidResourceRules=androidResources.build();
  Predicate<BuildRule> inclusionPredicate=new Predicate<BuildRule>(){
    @Override public boolean apply(    BuildRule rule){
      return allAndroidResourceRules.contains(rule);
    }
  }
;
  ImmutableList<BuildRule> sortedAndroidResourceRules=TopologicalSort.sort(mutableGraph,inclusionPredicate);
  return ImmutableList.copyOf(Iterables.transform(sortedAndroidResourceRules.reverse(),CAST_TO_ANDROID_RESOURCE_RULE));
}
