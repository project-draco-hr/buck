{
  RuleKey ruleKey=new RuleKey("aa");
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  InMemoryArtifactCache cache=new InMemoryArtifactCache();
  BuildInfoRecorder buildInfoRecorder=createBuildInfoRecorder(filesystem);
  BuckEventBus bus=new BuckEventBus(new FakeClock(0),new BuildId("BUILD"));
  Path file=Paths.get("file");
  filesystem.writeContentsToPath("",file);
  buildInfoRecorder.recordArtifact(file);
  String metadata="metadata_item";
  buildInfoRecorder.addMetadata(metadata,"something");
  buildInfoRecorder.writeMetadataToDisk(true);
  buildInfoRecorder.performUploadToArtifactCache(ImmutableSet.of(ruleKey),cache,bus);
  File fetchedArtifact=tmp.newFile("fetched_artifact.zip");
  CacheResult result=cache.fetch(ruleKey,fetchedArtifact);
  List<String> recordedPaths=new ObjectMapper().readValue(result.getMetadata().get(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS),new TypeReference<List<String>>(){
  }
);
  assertThat(recordedPaths,Matchers.containsInAnyOrder(file.toString(),BuildInfo.getPathToMetadataDirectory(BUILD_TARGET).resolve(metadata).toString()));
}
