{
  PythonPlatform pythonPlatform=pythonPlatforms.getValue(params.getBuildTarget()).or(pythonPlatforms.getValue(args.platform.transform(Flavor.TO_FLAVOR).or(pythonPlatforms.getFlavors().iterator().next())));
  CxxPlatform cxxPlatform=cxxPlatforms.getValue(params.getBuildTarget()).or(defaultCxxPlatform);
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  Path baseModule=PythonUtil.getBasePath(params.getBuildTarget(),args.baseModule);
  ImmutableMap<Path,SourcePath> srcs=ImmutableMap.<Path,SourcePath>builder().putAll(PythonUtil.toModuleMap(params.getBuildTarget(),pathResolver,"srcs",baseModule,args.srcs.asSet())).putAll(PythonUtil.toModuleMap(params.getBuildTarget(),pathResolver,"platformSrcs",baseModule,args.platformSrcs.get().getMatchingValues(pythonPlatform.getFlavor().toString()))).build();
  ImmutableMap<Path,SourcePath> resources=ImmutableMap.<Path,SourcePath>builder().putAll(PythonUtil.toModuleMap(params.getBuildTarget(),pathResolver,"resources",baseModule,args.resources.asSet())).putAll(PythonUtil.toModuleMap(params.getBuildTarget(),pathResolver,"platformResources",baseModule,args.platformResources.get().getMatchingValues(pythonPlatform.getFlavor().toString()))).build();
  ImmutableSet.Builder<String> testModulesBuilder=ImmutableSet.builder();
  for (  Path name : srcs.keySet()) {
    testModulesBuilder.add(PythonUtil.toModuleName(params.getBuildTarget(),name.toString()));
  }
  ImmutableSet<String> testModules=testModulesBuilder.build();
  BuildRule testModulesBuildRule=createTestModulesSourceBuildRule(params,resolver,getTestModulesListPath(params.getBuildTarget()),testModules);
  resolver.addToIndex(testModulesBuildRule);
  PythonPackageComponents testComponents=PythonPackageComponents.of(ImmutableMap.<Path,SourcePath>builder().put(getTestModulesListName(),new BuildTargetSourcePath(testModulesBuildRule.getBuildTarget())).put(getTestMainName(),pythonBuckConfig.getPathToTestMain(params.getProjectFilesystem())).putAll(srcs).build(),resources,ImmutableMap.<Path,SourcePath>of(),ImmutableSet.<SourcePath>of(),args.zipSafe);
  PythonPackageComponents allComponents=PythonUtil.getAllComponents(params,testComponents,pythonPlatform,cxxPlatform);
  BuildRuleParams binaryParams=params.copyWithChanges(getBinaryBuildTarget(params.getBuildTarget()),Suppliers.ofInstance(PythonUtil.getDepsFromComponents(pathResolver,allComponents)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  PythonBinary binary=binaryDescription.createPackageRule(binaryParams,resolver,pathResolver,pythonPlatform,cxxPlatform,PythonUtil.toModuleName(params.getBuildTarget(),getTestMainName().toString()),allComponents,args.buildArgs.or(ImmutableList.<String>of()));
  resolver.addToIndex(binary);
  Supplier<ImmutableMap<String,String>> testEnv=new Supplier<ImmutableMap<String,String>>(){
    @Override public ImmutableMap<String,String> get(){
      return ImmutableMap.copyOf(Maps.transformValues(args.env.or(ImmutableMap.<String,String>of()),MACRO_HANDLER.getExpander(params.getBuildTarget(),params.getCellRoots(),resolver,params.getProjectFilesystem())));
    }
  }
;
  return new PythonTest(params.copyWithDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getDeclaredDeps().get()).add(binary).build()),params.getExtraDeps()),pathResolver,testEnv,binary,ImmutableSortedSet.copyOf(Sets.difference(params.getDeps(),binaryParams.getDeps())),resolver.getAllRules(args.sourceUnderTest.or(ImmutableSortedSet.<BuildTarget>of())),args.labels.or(ImmutableSet.<Label>of()),args.testRuleTimeoutMs.or(defaultTestRuleTimeoutMs),args.contacts.or(ImmutableSet.<String>of()));
}
