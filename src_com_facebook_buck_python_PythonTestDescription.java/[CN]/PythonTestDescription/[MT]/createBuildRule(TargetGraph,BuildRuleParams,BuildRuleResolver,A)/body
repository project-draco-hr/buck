{
  CxxPlatform cxxPlatform;
  try {
    cxxPlatform=cxxPlatforms.getValue(ImmutableSet.copyOf(params.getBuildTarget().getFlavors())).or(defaultCxxPlatform);
  }
 catch (  FlavorDomainException e) {
    throw new HumanReadableException("%s: %s",params.getBuildTarget(),e.getMessage());
  }
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  Path baseModule=PythonUtil.getBasePath(params.getBuildTarget(),args.baseModule);
  ImmutableMap<Path,SourcePath> srcs=PythonUtil.toModuleMap(params.getBuildTarget(),pathResolver,"srcs",baseModule,args.srcs);
  ImmutableMap<Path,SourcePath> resources=PythonUtil.toModuleMap(params.getBuildTarget(),pathResolver,"resources",baseModule,args.resources);
  ImmutableSet.Builder<String> testModulesBuilder=ImmutableSet.builder();
  for (  Path name : srcs.keySet()) {
    testModulesBuilder.add(PythonUtil.toModuleName(params.getBuildTarget(),name.toString()));
  }
  ImmutableSet<String> testModules=testModulesBuilder.build();
  BuildRule testModulesBuildRule=createTestModulesSourceBuildRule(params,resolver,getTestModulesListPath(params.getBuildTarget()),testModules);
  resolver.addToIndex(testModulesBuildRule);
  PythonPackageComponents testComponents=PythonPackageComponents.of(ImmutableMap.<Path,SourcePath>builder().put(getTestModulesListName(),new BuildTargetSourcePath(testModulesBuildRule.getBuildTarget())).put(getTestMainName(),new PathSourcePath(params.getProjectFilesystem(),pythonBuckConfig.getPathToTestMain())).putAll(srcs).build(),resources,ImmutableMap.<Path,SourcePath>of(),ImmutableSet.<SourcePath>of(),args.zipSafe);
  PythonPackageComponents allComponents=PythonUtil.getAllComponents(targetGraph,params,testComponents,cxxPlatform);
  BuildRuleParams binaryParams=params.copyWithChanges(getBinaryBuildTarget(params.getBuildTarget()),Suppliers.ofInstance(PythonUtil.getDepsFromComponents(pathResolver,allComponents)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  PythonBinary binary=binaryDescription.createPackageRule(binaryParams,resolver,pathResolver,cxxPlatform,PythonUtil.toModuleName(params.getBuildTarget(),getTestMainName().toString()),allComponents,args.buildArgs.or(ImmutableList.<String>of()));
  resolver.addToIndex(binary);
  return new PythonTest(params.copyWithDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getDeclaredDeps().get()).add(binary).build()),params.getExtraDeps()),pathResolver,binary,ImmutableSortedSet.copyOf(Sets.difference(params.getDeps(),binaryParams.getDeps())),resolver.getAllRules(args.sourceUnderTest.or(ImmutableSortedSet.<BuildTarget>of())),args.labels.or(ImmutableSet.<Label>of()),args.contacts.or(ImmutableSet.<String>of()));
}
