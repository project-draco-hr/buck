{
  BuildRuleParams newParams=params.copyWithChanges(BuildRuleType.of("create_test_modules_list"),BuildTargets.createFlavoredBuildTarget(params.getBuildTarget().checkUnflavored(),ImmutableFlavor.of("test_module")),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  String contents=getTestModulesListContents(testModules);
class WriteFile extends AbstractBuildRule {
    @AddToRuleKey private final String fileContents;
    @AddToRuleKey(stringify=true) private final Path output;
    public WriteFile(    BuildRuleParams buildRuleParams,    SourcePathResolver resolver,    String fileContents,    Path output){
      super(buildRuleParams,resolver);
      this.fileContents=fileContents;
      this.output=output;
    }
    @Override protected ImmutableCollection<Path> getInputsToCompareToOutput(){
      return ImmutableList.of();
    }
    @Override protected RuleKey.Builder appendDetailsToRuleKey(    RuleKey.Builder builder){
      return builder;
    }
    @Override public ImmutableList<Step> getBuildSteps(    BuildContext context,    BuildableContext buildableContext){
      buildableContext.recordArtifact(output);
      return ImmutableList.of(new MkdirStep(output.getParent()),new WriteFileStep(fileContents,output));
    }
    @Override public Path getPathToOutputFile(){
      return output;
    }
  }
  return new WriteFile(newParams,new SourcePathResolver(resolver),contents,outputPath);
}
