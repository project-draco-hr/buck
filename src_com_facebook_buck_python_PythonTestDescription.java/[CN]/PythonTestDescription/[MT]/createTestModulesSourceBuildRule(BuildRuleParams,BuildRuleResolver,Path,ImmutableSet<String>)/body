{
  BuildRuleParams newParams=params.copyWithChanges(new BuildRuleType("create_test_modules_list"),BuildTargets.createFlavoredBuildTarget(params.getBuildTarget(),new Flavor("test_module")),ImmutableSortedSet.<BuildRule>of(),ImmutableSortedSet.<BuildRule>of());
  final String contents=getTestModulesListContents(testModules);
  return new AbstractBuildRule(newParams,new SourcePathResolver(resolver)){
    @Override protected ImmutableCollection<Path> getInputsToCompareToOutput(){
      return ImmutableList.of();
    }
    @Override protected RuleKey.Builder appendDetailsToRuleKey(    RuleKey.Builder builder){
      return builder.set("contents",contents).set("output",outputPath.toString());
    }
    @Override public ImmutableList<Step> getBuildSteps(    BuildContext context,    BuildableContext buildableContext){
      buildableContext.recordArtifact(outputPath);
      return ImmutableList.of(new MkdirStep(outputPath.getParent()),new WriteFileStep(contents,outputPath));
    }
    @Override public Path getPathToOutputFile(){
      return outputPath;
    }
  }
;
}
