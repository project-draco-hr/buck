{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  Path baseModule=PythonUtil.getBasePath(params.getBuildTarget(),args.baseModule);
  ImmutableMap<Path,SourcePath> srcs=PythonUtil.toModuleMap(params.getBuildTarget(),pathResolver,"srcs",baseModule,args.srcs);
  ImmutableMap<Path,SourcePath> resources=PythonUtil.toModuleMap(params.getBuildTarget(),pathResolver,"resources",baseModule,args.resources);
  ImmutableSet.Builder<String> testModulesBuilder=ImmutableSet.builder();
  for (  Path name : srcs.keySet()) {
    testModulesBuilder.add(PythonUtil.toModuleName(params.getBuildTarget(),name.toString()));
  }
  ImmutableSet<String> testModules=testModulesBuilder.build();
  BuildRule testModulesBuildRule=createTestModulesSourceBuildRule(params,resolver,getTestModulesListPath(params.getBuildTarget()),testModules);
  resolver.addToIndex(testModulesBuildRule);
  PythonPackageComponents testComponents=new PythonPackageComponents(ImmutableMap.<Path,SourcePath>builder().put(getTestModulesListName(),new BuildRuleSourcePath(testModulesBuildRule)).put(getTestMainName(),new PathSourcePath(pathToPythonTestMain)).putAll(srcs).build(),resources,ImmutableMap.<Path,SourcePath>of());
  PythonPackageComponents allComponents=PythonUtil.getAllComponents(params,testComponents);
  BuildRuleParams binaryParams=params.copyWithChanges(PythonBinaryDescription.TYPE,getBinaryBuildTarget(params.getBuildTarget()),PythonUtil.getDepsFromComponents(pathResolver,allComponents),ImmutableSortedSet.<BuildRule>of());
  PythonBinary binary=new PythonBinary(binaryParams,pathResolver,pathToPex,pythonEnvironment,getTestMainName(),allComponents);
  resolver.addToIndex(binary);
  return new PythonTest(params.copyWithDeps(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getDeclaredDeps()).add(binary).build(),params.getExtraDeps()),pathResolver,new BuildRuleSourcePath(binary),resolver.getAllRules(args.sourceUnderTest.or(ImmutableSortedSet.<BuildTarget>of())),args.labels.or(ImmutableSet.<Label>of()),args.contacts.or(ImmutableSet.<String>of()));
}
