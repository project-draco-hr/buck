u'Tests for scandir.scandir().'
from __future__ import unicode_literals
import os
import shutil
import sys
import time
import unittest
try:
    import scandir
    has_scandir = True
except ImportError:
    has_scandir = False
FILE_ATTRIBUTE_DIRECTORY = 16
TEST_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), u'testdir'))
IS_PY3 = (sys.version_info >= (3, 0))
if IS_PY3:
    int_types = int
else:
    int_types = (int, long)
    str = unicode
if hasattr(os, u'symlink'):
    try:
        link_name = os.path.join(os.path.dirname(__file__), u'_testlink')
        os.symlink(__file__, link_name)
        os.remove(link_name)
        symlinks_supported = True
    except NotImplementedError:
        symlinks_supported = False
else:
    symlinks_supported = False
if has_scandir:


    class TestScandirGeneric(TestMixin, unittest.TestCase):

        def setUp(self):
            self.scandir_func = scandir.scandir_generic
            self.has_file_attributes = False
            TestMixin.setUp(self)
    if getattr(scandir, u'scandir_python', None):


        class TestScandirPython(TestMixin, unittest.TestCase):

            def setUp(self):
                self.scandir_func = scandir.scandir_python
                self.has_file_attributes = True
                TestMixin.setUp(self)
    if getattr(scandir, u'scandir_c', None):


        class TestScandirC(TestMixin, unittest.TestCase):

            def setUp(self):
                self.scandir_func = scandir.scandir_c
                self.has_file_attributes = True
                TestMixin.setUp(self)
if hasattr(os, u'scandir'):


    class TestScandirOS(TestMixin, unittest.TestCase):

        def setUp(self):
            self.scandir_func = os.scandir
            self.has_file_attributes = True
            TestMixin.setUp(self)
