{
  Map<String,Path> intelliJLibraryNameToJarPath=Maps.newHashMap();
  for (  Path jarPath : noDxJars) {
    String libraryName=getIntellijNameForBinaryJar(jarPath);
    intelliJLibraryNameToJarPath.put(libraryName,jarPath);
  }
  for (  Module module : modules) {
    Set<Path> classpathEntriesToDex;
    if (module.srcRule instanceof AndroidBinary) {
      AndroidBinary androidBinary=(AndroidBinary)module.srcRule;
      AndroidPackageableCollection packageableCollection=androidBinary.getAndroidPackageableCollection();
      classpathEntriesToDex=new HashSet<>(Sets.intersection(noDxJars,packageableCollection.getClasspathEntriesToDex()));
    }
 else {
      classpathEntriesToDex=ImmutableSet.of();
    }
    for (    DependentModule dependentModule : Preconditions.checkNotNull(module.dependencies)) {
      if (!dependentModule.isLibrary()) {
        continue;
      }
      String libraryName=dependentModule.getLibraryName();
      Path jarPath=intelliJLibraryNameToJarPath.get(libraryName);
      if (jarPath != null) {
        if (classpathEntriesToDex.contains(jarPath)) {
          dependentModule.scope=null;
          classpathEntriesToDex.remove(jarPath);
        }
 else {
          dependentModule.scope="PROVIDED";
        }
      }
    }
    for (    Path entry : classpathEntriesToDex) {
      String libraryName=getIntellijNameForBinaryJar(entry);
      DependentModule dependency=DependentModule.newLibrary(null,libraryName);
      Preconditions.checkNotNull(module.dependencies).add(dependency);
    }
  }
}
