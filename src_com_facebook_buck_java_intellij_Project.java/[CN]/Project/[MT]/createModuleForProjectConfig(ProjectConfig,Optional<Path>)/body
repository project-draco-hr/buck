{
  BuildRule projectRule=Preconditions.checkNotNull(projectConfig.getProjectRule());
  Preconditions.checkState(projectRule instanceof AndroidBinary || projectRule instanceof AndroidLibrary || projectRule instanceof AndroidResource|| projectRule instanceof JavaBinary|| projectRule instanceof JavaLibrary|| projectRule instanceof CxxLibrary|| projectRule instanceof NdkLibrary,"project_config() does not know how to process a src_target of type %s.",projectRule.getType());
  LinkedHashSet<SerializableDependentModule> dependencies=Sets.newLinkedHashSet();
  final BuildTarget target=projectConfig.getBuildTarget();
  SerializableModule module=new SerializableModule(projectRule,target);
  module.name=getIntellijNameForRule(projectRule);
  module.isIntelliJPlugin=projectConfig.getIsIntelliJPlugin();
  Path relativePath=projectConfig.getBuildTarget().getBasePath();
  module.pathToImlFile=relativePath.resolve(String.format("%s.iml",module.name));
  boolean includeSourceFolder=true;
  boolean hasSourceFoldersForTestRule=addSourceFolders(module,projectConfig.getTestRule(),projectConfig.getTestsSourceRoots(),true);
  BuildRule testRule=projectConfig.getTestRule();
  if (testRule != null) {
    walkRuleAndAdd(testRule,true,dependencies,projectConfig.getSrcRule());
  }
  boolean hasSourceFoldersForSrcRule=addSourceFolders(module,projectConfig.getSrcRule(),projectConfig.getSourceRoots(),false);
  addRootExcludes(module,projectConfig.getSrcRule(),projectFilesystem);
  if (!hasSourceFoldersForTestRule && !hasSourceFoldersForSrcRule) {
    includeSourceFolder=false;
  }
  boolean isAndroidRule=projectRule.getProperties().is(ANDROID);
  if (isAndroidRule) {
    boolean hasSourceFolders=!module.sourceFolders.isEmpty();
    module.sourceFolders.add(SerializableModule.SourceFolder.GEN);
    if (!hasSourceFolders) {
      includeSourceFolder=true;
    }
  }
  walkRuleAndAdd(projectRule,false,dependencies,projectConfig.getSrcRule());
  Path basePath=projectConfig.getBuildTarget().getBasePath();
  module.moduleGenPath=generateRelativeGenPath(basePath);
  if (turnOffAutoSourceGeneration && rJava.isPresent()) {
    module.moduleRJavaPath=basePath.relativize(Paths.get("")).resolve(rJava.get());
  }
  SerializableDependentModule jdkDependency;
  if (isAndroidRule) {
    if (projectRule instanceof NdkLibrary) {
      NdkLibrary ndkLibrary=(NdkLibrary)projectRule;
      module.isAndroidLibraryProject=true;
      module.keystorePath=null;
      module.nativeLibs=relativePath.relativize(ndkLibrary.getLibraryPath());
    }
 else     if (projectRule instanceof AndroidLibrary) {
      module.isAndroidLibraryProject=true;
      module.keystorePath=null;
      module.resFolder=intellijConfig.getAndroidResources().orNull();
      module.assetFolder=intellijConfig.getAndroidAssets().orNull();
    }
 else     if (projectRule instanceof AndroidResource) {
      AndroidResource androidResource=(AndroidResource)projectRule;
      module.resFolder=createRelativePath(Optional.fromNullable(androidResource.getRes()).transform(resolver.getPathFunction()).orNull(),target);
      module.isAndroidLibraryProject=true;
      module.keystorePath=null;
    }
 else     if (projectRule instanceof AndroidBinary) {
      AndroidBinary androidBinary=(AndroidBinary)projectRule;
      module.resFolder=intellijConfig.getAndroidResources().orNull();
      module.assetFolder=intellijConfig.getAndroidAssets().orNull();
      module.isAndroidLibraryProject=false;
      module.binaryPath=generateRelativeAPKPath(projectRule.getBuildTarget().getShortName(),basePath);
      KeystoreProperties keystoreProperties=KeystoreProperties.createFromPropertiesFile(androidBinary.getKeystore().getPathToStore(),androidBinary.getKeystore().getPathToPropertiesFile(),projectFilesystem);
      module.keystorePath=relativePath.relativize(keystoreProperties.getKeystore());
    }
 else {
      module.isAndroidLibraryProject=true;
      module.keystorePath=null;
    }
    module.hasAndroidFacet=true;
    module.proguardConfigPath=null;
    module.androidManifest=resolveAndroidManifestRelativePath(basePath);
    jdkDependency=SerializableDependentModule.newInheritedJdk();
  }
 else {
    module.hasAndroidFacet=false;
    if (module.isIntelliJPlugin()) {
      jdkDependency=SerializableDependentModule.newIntelliJPluginJdk();
    }
 else {
      jdkDependency=SerializableDependentModule.newStandardJdk();
    }
  }
  module.setModuleDependencies(createDependenciesInOrder(includeSourceFolder,dependencies,jdkDependency));
  JavaLibrary javaLibrary=null;
  if (projectRule instanceof JavaLibrary) {
    javaLibrary=(JavaLibrary)projectRule;
  }
  if (javaLibrary != null) {
    AnnotationProcessingParams processingParams=javaLibrary.getAnnotationProcessingParams();
    Path annotationGenSrc=processingParams.getGeneratedSourceFolderName();
    if (annotationGenSrc != null) {
      module.annotationGenPath=basePath.relativize(annotationGenSrc);
      module.annotationGenIsForTest=!hasSourceFoldersForSrcRule;
    }
  }
  return module;
}
