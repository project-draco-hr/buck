{
  List<SerializableModule> modules=createModulesForProjectConfigs();
  writeJsonConfig(jsonTempFile,modules);
  List<String> modifiedFiles=Lists.newArrayList();
  ExitCodeAndOutput result=processJsonConfig(jsonTempFile,generateMinimalProject);
  if (result.exitCode != 0) {
    Logger.get(Project.class).error(result.stdErr);
    return result.exitCode;
  }
 else {
    Iterable<String> paths=Splitter.on('\n').trimResults().omitEmptyStrings().split(result.stdOut);
    Iterables.addAll(modifiedFiles,paths);
  }
  CompilerXml compilerXml=new CompilerXml(modules);
  final String pathToCompilerXml=".idea/compiler.xml";
  File compilerXmlFile=projectFilesystem.getFileForRelativePath(pathToCompilerXml);
  if (compilerXml.write(compilerXmlFile)) {
    modifiedFiles.add(pathToCompilerXml);
  }
  if (pathToPostProcessScript.isPresent()) {
    String pathToScript=pathToPostProcessScript.get();
    ProcessExecutorParams params=ProcessExecutorParams.builder().setCommand(ImmutableList.of(pathToScript)).build();
    ProcessExecutor.Result postProcessResult=processExecutor.launchAndExecute(params);
    int postProcessExitCode=postProcessResult.getExitCode();
    if (postProcessExitCode != 0) {
      return postProcessExitCode;
    }
  }
  if (executionContext.getConsole().getVerbosity().shouldPrintOutput()) {
    SortedSet<String> modifiedFilesInSortedForder=Sets.newTreeSet(modifiedFiles);
    stdOut.printf("MODIFIED FILES:\n%s\n",Joiner.on('\n').join(modifiedFilesInSortedForder));
  }
 else {
    if (!modifiedFiles.isEmpty()) {
      stdOut.printf("Modified %d IntelliJ project files.\n",modifiedFiles.size());
    }
 else {
      stdOut.println("No IntelliJ project files modified.");
    }
  }
  stdErr.print(result.stdErr);
  return 0;
}
