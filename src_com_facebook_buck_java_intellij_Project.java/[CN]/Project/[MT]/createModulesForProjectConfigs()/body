{
  List<Module> modules=Lists.newArrayList();
  ImmutableSet.Builder<Path> noDxJarsBuilder=ImmutableSet.builder();
  for (  ProjectConfig projectConfig : rules) {
    BuildRule srcRule=projectConfig.getSrcRule();
    if (srcRule instanceof AndroidBinary) {
      AndroidBinary androidBinary=(AndroidBinary)srcRule;
      AndroidPackageableCollection packageableCollection=androidBinary.getAndroidPackageableCollection();
      noDxJarsBuilder.addAll(packageableCollection.getNoDxClasspathEntries());
    }
    final Optional<Path> rJava;
    if (srcRule instanceof AndroidLibrary) {
      AndroidLibrary androidLibrary=(AndroidLibrary)srcRule;
      ImmutableBuildTarget dummyRDotJavaTarget=AndroidLibraryGraphEnhancer.getDummyRDotJavaTarget(androidLibrary.getBuildTarget());
      Path src=DummyRDotJava.getRDotJavaSrcFolder(dummyRDotJavaTarget);
      rJava=Optional.of(src);
    }
 else     if (srcRule instanceof AndroidResource) {
      AndroidResource androidResource=(AndroidResource)srcRule;
      ImmutableBuildTarget dummyRDotJavaTarget=AndroidLibraryGraphEnhancer.getDummyRDotJavaTarget(androidResource.getBuildTarget());
      Path src=DummyRDotJava.getRDotJavaSrcFolder(dummyRDotJavaTarget);
      rJava=Optional.of(src);
    }
 else {
      rJava=Optional.absent();
    }
    Module module=createModuleForProjectConfig(projectConfig,rJava);
    modules.add(module);
  }
  ImmutableSet<Path> noDxJars=noDxJarsBuilder.build();
  markNoDxJarsAsProvided(modules,noDxJars);
  return modules;
}
