{
  Preconditions.checkState(protocol != null,"Tried to submit a job to the worker process before the handshake was performed.");
  int messageID=currentMessageID.getAndAdd(1);
  Path argsPath=Paths.get(tmpPath.toString(),String.format("%d.args",messageID));
  Path stdoutPath=Paths.get(tmpPath.toString(),String.format("%d.out",messageID));
  Path stderrPath=Paths.get(tmpPath.toString(),String.format("%d.err",messageID));
  filesystem.writeContentsToPath(jobArgs,argsPath);
  LOG.debug("Sending job %d to process %d \n" + " job arguments: \'%s\'",messageID,this.hashCode(),jobArgs);
  protocol.sendCommand(messageID,argsPath,stdoutPath,stderrPath);
  LOG.debug("Receiving response for job %d from process %d",messageID,this.hashCode());
  int exitCode=protocol.receiveCommandResponse(messageID);
  Optional<String> stdout=filesystem.readFileIfItExists(stdoutPath);
  Optional<String> stderr=filesystem.readFileIfItExists(stderrPath);
  LOG.debug("Job %d for process %d finished \n" + "  exit code: %d \n" + "  stdout: %s \n"+ "  stderr: %s",messageID,this.hashCode(),exitCode,stdout.or(""),stderr.or(""));
  return WorkerJobResult.of(exitCode,stdout,stderr);
}
