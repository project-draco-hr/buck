{
  assumeTrue(Platform.detect() == Platform.MACOS);
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"apple_test_with_deps",tmp);
  workspace.setUp();
  BuildTarget buildTarget=workspace.newBuildTarget("//:foo");
  workspace.runBuckCommand("build",buildTarget.getFullyQualifiedName()).assertSuccess();
  workspace.verify(Paths.get("foo_output.expected"),BuildTargets.getGenPath(BuildTarget.builder(buildTarget).addFlavors(AppleTestDescription.BUNDLE_FLAVOR).build(),"%s"));
  Path projectRoot=Paths.get(tmp.getRootPath().toFile().getCanonicalPath());
  BuildTarget appleTestBundleFlavoredBuildTarget=BuildTarget.copyOf(buildTarget).withFlavors(ImmutableFlavor.of("apple-test-bundle"));
  Path outputPath=projectRoot.resolve(BuildTargets.getGenPath(appleTestBundleFlavoredBuildTarget,"%s"));
  Path bundlePath=outputPath.resolve("foo.xctest");
  Path testBinaryPath=bundlePath.resolve("foo");
  ProcessExecutor.Result binaryFileTypeResult=workspace.runCommand("file","-b",testBinaryPath.toString());
  assertEquals(0,binaryFileTypeResult.getExitCode());
  assertThat(binaryFileTypeResult.getStdout().or(""),containsString("Mach-O 64-bit bundle x86_64"));
  ProcessExecutor.Result otoolResult=workspace.runCommand("otool","-L",testBinaryPath.toString());
  assertEquals(0,otoolResult.getExitCode());
  assertThat(otoolResult.getStdout().or(""),containsString("foo"));
  assertThat(otoolResult.getStdout().or(""),not(containsString("bar.dylib")));
  ProcessExecutor.Result nmResult=workspace.runCommand("nm","-j",testBinaryPath.toString());
  assertEquals(0,nmResult.getExitCode());
  assertThat(nmResult.getStdout().or(""),containsString("_OBJC_CLASS_$_Foo"));
  assertThat(nmResult.getStdout().or(""),containsString("_OBJC_CLASS_$_Bar"));
}
