{
  assumeTrue(Platform.detect() == Platform.MACOS);
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"apple_test_xctest",tmp);
  workspace.setUp();
  workspace.copyRecursively(TestDataHelper.getTestDataDirectory(this).resolve("xctool"),Paths.get("xctool"));
  BuildTarget target=BuildTargetFactory.newInstance("//:foo#iphonesimulator-i386,iphonesimulator-x86_64");
  ProjectWorkspace.ProcessResult result=workspace.runBuckCommand("build","--config","cxx.cflags=-g","--config","apple.xctool_path=xctool/bin/xctool","--config","apple.default_debug_info_format_for_binaries=DWARF_AND_DSYM","--config","apple.default_debug_info_format_for_libraries=DWARF_AND_DSYM","--config","apple.default_debug_info_format_for_tests=DWARF_AND_DSYM",target.getFullyQualifiedName());
  result.assertSuccess();
  BuildTarget libraryTarget=target.withAppendedFlavors(AppleTestDescription.LIBRARY_FLAVOR,CxxDescriptionEnhancer.MACH_O_BUNDLE_FLAVOR);
  Path output=workspace.getDestPath().resolve(BuildTargets.getGenPath(filesystem,libraryTarget.withAppendedFlavors(AppleDsym.RULE_FLAVOR),"%s.dSYM")).resolve("Contents/Resources/DWARF/" + libraryTarget.getShortName());
  ProcessExecutor.Result lipoVerifyResult=workspace.runCommand("lipo",output.toString(),"-verify_arch","i386","x86_64");
  assertEquals(lipoVerifyResult.getStderr().or(""),0,lipoVerifyResult.getExitCode());
  AppleDsymTestUtil.checkDsymFileHasDebugSymbolForConcreteArchitectures("-[FooXCTest testTwoPlusTwoEqualsFour]",workspace,output,Optional.of(ImmutableList.of("i386","x86_64")));
}
