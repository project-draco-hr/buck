@pytest.mark.skipif(os.path.islink(tempfile.gettempdir()), reason='Test fails when /tmp is a symlink. See #231')
def test_two_levels_deep(self):
    '\n        Test nested namespace packages\n        Create namespace packages in the following tree :\n            site-packages-1/pkg1/pkg2\n            site-packages-2/pkg1/pkg2\n        Check both are in the _namespace_packages dict and that their __path__\n        is correct\n        '
    sys.path.append(os.path.join(self._tmpdir, 'site-pkgs2'))
    os.makedirs(os.path.join(self._tmpdir, 'site-pkgs', 'pkg1', 'pkg2'))
    os.makedirs(os.path.join(self._tmpdir, 'site-pkgs2', 'pkg1', 'pkg2'))
    ns_str = "__import__('pkg_resources').declare_namespace(__name__)\n"
    for site in ['site-pkgs', 'site-pkgs2']:
        pkg1_init = open(os.path.join(self._tmpdir, site, 'pkg1', '__init__.py'), 'w')
        pkg1_init.write(ns_str)
        pkg1_init.close()
        pkg2_init = open(os.path.join(self._tmpdir, site, 'pkg1', 'pkg2', '__init__.py'), 'w')
        pkg2_init.write(ns_str)
        pkg2_init.close()
    import pkg1
    assert ('pkg1' in pkg_resources._namespace_packages)
    import pkg1.pkg2
    assert ('pkg1.pkg2' in pkg_resources._namespace_packages)
    assert (pkg_resources._namespace_packages['pkg1'] == ['pkg1.pkg2'])
    expected = [os.path.join(self._tmpdir, 'site-pkgs', 'pkg1', 'pkg2'), os.path.join(self._tmpdir, 'site-pkgs2', 'pkg1', 'pkg2')]
    assert (pkg1.pkg2.__path__ == expected)
