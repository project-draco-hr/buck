{
  final ImmutableSet<BuildTarget> targets=FluentIterable.from(options.getArgumentsFormattedAsBuildTargets(params.getBuckConfig())).transform(new Function<String,BuildTarget>(){
    @Override public BuildTarget apply(    String input){
      return params.getParser().getBuildTargetParser().parse(input,BuildTargetPatternParser.fullyQualified(params.getParser().getBuildTargetParser()));
    }
  }
).toSet();
  if (targets.isEmpty()) {
    params.getConsole().printBuildFailure("Please specify at least one build target.");
    return 1;
  }
  TargetGraph targetGraph;
  try {
    targetGraph=params.getParser().buildTargetGraphForBuildTargets(targets,new ParserConfig(params.getBuckConfig()),params.getBuckEventBus(),params.getConsole(),params.getEnvironment(),options.getEnableProfiling());
  }
 catch (  BuildTargetException|BuildFileParseException e) {
    params.getConsole().printBuildFailureWithoutStacktrace(e);
    return 1;
  }
  TargetGraphTransformer<ActionGraph> targetGraphTransformer=new TargetGraphToActionGraph(params.getBuckEventBus(),new BuildTargetNodeToBuildRuleTransformer());
  if (options.shouldGenerateDotOutput()) {
    return printDotOutput(params,targetGraph);
  }
 else   if (options.shouldGenerateJsonOutput()) {
    return printJsonClasspath(params,targetGraph,targetGraphTransformer,targets);
  }
 else {
    return printClasspath(params,targetGraph,targetGraphTransformer,targets);
  }
}
