{
  final ImmutableSet<BuildTarget> targets=FluentIterable.from(getArgumentsFormattedAsBuildTargets(params.getBuckConfig())).transform(new Function<String,BuildTarget>(){
    @Override public BuildTarget apply(    String input){
      return BuildTargetParser.INSTANCE.parse(input,BuildTargetPatternParser.fullyQualified(),params.getCell().getCellRoots());
    }
  }
).toSet();
  if (targets.isEmpty()) {
    params.getBuckEventBus().post(ConsoleEvent.severe("Please specify at least one build target."));
    return 1;
  }
  TargetGraph targetGraph;
  try (CommandThreadManager pool=new CommandThreadManager("Audit",params.getBuckConfig().getWorkQueueExecutionOrder(),getConcurrencyLimit(params.getBuckConfig()))){
    targetGraph=params.getParser().buildTargetGraph(params.getBuckEventBus(),params.getCell(),getEnableProfiling(),pool.getExecutor(),targets);
  }
 catch (  BuildFileParseException e) {
    params.getBuckEventBus().post(ConsoleEvent.severe(MoreExceptions.getHumanReadableOrLocalizedMessage(e)));
    return 1;
  }
  TargetGraphTransformer targetGraphTransformer=new TargetGraphToActionGraph(params.getBuckEventBus(),new BuildTargetNodeToBuildRuleTransformer());
  try {
    if (shouldGenerateDotOutput()) {
      return printDotOutput(params,targetGraph);
    }
 else     if (shouldGenerateJsonOutput()) {
      return printJsonClasspath(params,targetGraph,targetGraphTransformer,targets);
    }
 else {
      return printClasspath(params,targetGraph,targetGraphTransformer,targets);
    }
  }
 catch (  NoSuchBuildTargetException e) {
    throw new HumanReadableException(e.getHumanReadableErrorMessage());
  }
}
