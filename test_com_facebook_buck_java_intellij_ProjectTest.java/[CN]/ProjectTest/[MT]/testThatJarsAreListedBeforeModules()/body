{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildRule supportV4=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//java/com/android/support/v4:v4")).build(ruleResolver);
  BuildRule httpCore=PrebuiltJarBuilder.createBuilder(BuildTargetFactory.newInstance("//third_party/java/httpcore:httpcore")).setBinaryJar(Paths.get("httpcore-4.0.1.jar")).build(ruleResolver);
  BuildTarget robolectricTarget=BuildTargetFactory.newInstance("//third_party/java/robolectric:robolectric");
  BuildRule robolectricRule=JavaLibraryBuilder.createBuilder(robolectricTarget).addDep(supportV4.getBuildTarget()).addDep(httpCore.getBuildTarget()).build(ruleResolver);
  ProjectConfig projectConfig=(ProjectConfig)ProjectConfigBuilder.createBuilder(BuildTargetFactory.newInstance("//third_party/java/robolectric:project_config")).setSrcRule(robolectricRule.getBuildTarget()).setSrcRoots(ImmutableList.of("src/main/java")).build(ruleResolver);
  ProjectWithModules projectWithModules=getModulesForActionGraph(ruleResolver,ImmutableSortedSet.of(projectConfig),null);
  List<SerializableModule> modules=projectWithModules.modules;
  assertEquals("Should be one module for the android_library",1,modules.size());
  SerializableModule robolectricModule=Iterables.getOnlyElement(modules);
  assertListEquals("It is imperative that httpcore-4.0.1.jar be listed before the support v4 library, " + "or else when robolectric is listed as a dependency, " + "org.apache.http.params.BasicHttpParams will be loaded from android.jar instead of "+ "httpcore-4.0.1.jar.",ImmutableList.of(SerializableDependentModule.newSourceFolder(),SerializableDependentModule.newLibrary(httpCore.getBuildTarget(),"buck_out_gen_third_party_java_httpcore_httpcore_jar"),SerializableDependentModule.newModule(supportV4.getBuildTarget(),"module_java_com_android_support_v4"),SerializableDependentModule.newStandardJdk()),robolectricModule.getDependencies());
}
