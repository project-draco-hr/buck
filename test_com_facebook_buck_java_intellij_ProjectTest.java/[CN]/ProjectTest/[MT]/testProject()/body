{
  JavaPackageFinder javaPackageFinder=EasyMock.createMock(JavaPackageFinder.class);
  EasyMock.expect(javaPackageFinder.findJavaPackage(Paths.get("foo/module_foo.iml"))).andReturn("");
  EasyMock.expect(javaPackageFinder.findJavaPackage(Paths.get("bar/module_bar.iml"))).andReturn("");
  EasyMock.replay(javaPackageFinder);
  ProjectWithModules projectWithModules=createActionGraphForTesting(javaPackageFinder);
  Project project=projectWithModules.project;
  ActionGraph actionGraph=project.getActionGraph();
  List<Module> modules=projectWithModules.modules;
  assertEquals("Should be one module for the java_library, one for the android_library, " + "one module for the android_resource, and one for each android_binary",5,modules.size());
  Module javaLibraryModule=modules.get(4);
  assertSame(getRuleById("//java/src/com/facebook/exportlib:exportlib",actionGraph),javaLibraryModule.srcRule);
  assertEquals("module_java_src_com_facebook_exportlib",javaLibraryModule.name);
  assertEquals(Paths.get("java/src/com/facebook/exportlib/module_java_src_com_facebook_exportlib.iml"),javaLibraryModule.pathToImlFile);
  assertListEquals(ImmutableList.of(SourceFolder.SRC),javaLibraryModule.sourceFolders);
  DependentModule inheritedJdk=DependentModule.newInheritedJdk();
  DependentModule guavaAsProvidedDep=DependentModule.newLibrary(guava.getBuildTarget(),"third_party_guava_guava_10_0_1_jar");
  guavaAsProvidedDep.scope="PROVIDED";
  assertListEquals(ImmutableList.of(DependentModule.newSourceFolder(),guavaAsProvidedDep,DependentModule.newStandardJdk()),javaLibraryModule.dependencies);
  Module androidLibraryModule=modules.get(3);
  assertSame(getRuleById("//java/src/com/facebook/base:base",actionGraph),androidLibraryModule.srcRule);
  assertEquals("module_java_src_com_facebook_base",androidLibraryModule.name);
  assertEquals(Paths.get("java/src/com/facebook/base/module_java_src_com_facebook_base.iml"),androidLibraryModule.pathToImlFile);
  assertListEquals(ImmutableList.of(SourceFolder.SRC,new SourceFolder("file://$MODULE_DIR$/src-gen",false),SourceFolder.GEN),androidLibraryModule.sourceFolders);
  assertEquals(Boolean.TRUE,androidLibraryModule.hasAndroidFacet);
  assertEquals(Boolean.TRUE,androidLibraryModule.isAndroidLibraryProject);
  assertEquals(null,androidLibraryModule.proguardConfigPath);
  assertEquals(null,androidLibraryModule.resFolder);
  DependentModule androidResourceAsProvidedDep=DependentModule.newModule(BuildTargetFactory.newInstance("//android_res/base:res"),"module_android_res_base");
  DependentModule childAsProvidedDep=DependentModule.newModule(BuildTargetFactory.newInstance("//java/src/com/facebook/child:child"),"module_java_src_com_facebook_child");
  DependentModule exportDepsAsProvidedDep=DependentModule.newModule(BuildTargetFactory.newInstance("//java/src/com/facebook/exportlib:exportlib"),"module_java_src_com_facebook_exportlib");
  assertListEquals(ImmutableList.of(DependentModule.newSourceFolder(),guavaAsProvidedDep,androidResourceAsProvidedDep,childAsProvidedDep,exportDepsAsProvidedDep,inheritedJdk),androidLibraryModule.dependencies);
  Module androidResourceModule=modules.get(0);
  assertSame(getRuleById("//android_res/base:res",actionGraph),androidResourceModule.srcRule);
  assertEquals(Paths.get("res"),androidResourceModule.resFolder);
  Module androidBinaryModuleNoDx=modules.get(2);
  assertSame(getRuleById("//foo:app",actionGraph),androidBinaryModuleNoDx.srcRule);
  assertEquals("module_foo",androidBinaryModuleNoDx.name);
  assertEquals(Paths.get("foo/module_foo.iml"),androidBinaryModuleNoDx.pathToImlFile);
  assertListEquals(ImmutableList.of(SourceFolder.GEN),androidBinaryModuleNoDx.sourceFolders);
  assertEquals(Boolean.TRUE,androidBinaryModuleNoDx.hasAndroidFacet);
  assertEquals(Boolean.FALSE,androidBinaryModuleNoDx.isAndroidLibraryProject);
  assertEquals(null,androidBinaryModuleNoDx.proguardConfigPath);
  assertEquals(null,androidBinaryModuleNoDx.resFolder);
  assertEquals(Paths.get("../keystore/debug.keystore"),androidBinaryModuleNoDx.keystorePath);
  DependentModule grandchildAsProvidedDep=DependentModule.newModule(BuildTargetFactory.newInstance("//java/src/com/facebook/grandchild:grandchild"),"module_java_src_com_facebook_grandchild");
  DependentModule androidLibraryDep=DependentModule.newModule(androidLibraryModule.srcRule.getBuildTarget(),"module_java_src_com_facebook_base");
  assertEquals(ImmutableList.of(DependentModule.newSourceFolder(),guavaAsProvidedDep,androidLibraryDep,androidResourceAsProvidedDep,childAsProvidedDep,exportDepsAsProvidedDep,grandchildAsProvidedDep,inheritedJdk),androidBinaryModuleNoDx.dependencies);
  Module androidBinaryModuleEmptyNoDx=modules.get(1);
  assertSame(getRuleById("//bar:app",actionGraph),androidBinaryModuleEmptyNoDx.srcRule);
  assertEquals("module_bar",androidBinaryModuleEmptyNoDx.name);
  assertEquals(Paths.get("bar/module_bar.iml"),androidBinaryModuleEmptyNoDx.pathToImlFile);
  assertListEquals(ImmutableList.of(SourceFolder.GEN),androidBinaryModuleEmptyNoDx.sourceFolders);
  assertEquals(Boolean.TRUE,androidBinaryModuleEmptyNoDx.hasAndroidFacet);
  assertEquals(Boolean.FALSE,androidBinaryModuleEmptyNoDx.isAndroidLibraryProject);
  assertEquals(null,androidBinaryModuleEmptyNoDx.proguardConfigPath);
  assertEquals(null,androidBinaryModuleEmptyNoDx.resFolder);
  assertEquals(Paths.get("../keystore/debug.keystore"),androidBinaryModuleEmptyNoDx.keystorePath);
  DependentModule guavaAsCompiledDep=DependentModule.newLibrary(guava.getBuildTarget(),"third_party_guava_guava_10_0_1_jar");
  assertEquals("Important that Guava is listed as a 'COMPILED' dependency here because it is " + "only listed as a 'PROVIDED' dependency earlier.",ImmutableList.of(DependentModule.newSourceFolder(),guavaAsCompiledDep,androidLibraryDep,androidResourceAsProvidedDep,childAsProvidedDep,exportDepsAsProvidedDep,grandchildAsProvidedDep,inheritedJdk),androidBinaryModuleEmptyNoDx.dependencies);
  BuildRule guava=getRuleById("//third_party/guava:guava",actionGraph);
  assertSame(guava,Iterables.getOnlyElement(project.getLibraryJars()));
}
