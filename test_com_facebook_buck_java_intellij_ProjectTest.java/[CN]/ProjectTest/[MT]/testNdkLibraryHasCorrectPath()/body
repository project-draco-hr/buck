{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  ProjectFilesystem projectFilesystem=EasyMock.createMock(ProjectFilesystem.class);
  BuildTarget fooJni=BuildTargetFactory.newInstance("//third_party/java/foo/jni:foo-jni");
  NdkLibrary ndkLibrary=NdkLibraryBuilder.createNdkLibrary(fooJni,pathResolver,ruleResolver,projectFilesystem).addSrc(Paths.get("Android.mk")).build();
  ruleResolver.addToIndex(ndkLibrary);
  ProjectConfig ndkProjectConfig=(ProjectConfig)ProjectConfigBuilder.newProjectConfigRuleBuilder(BuildTargetFactory.newInstance("//third_party/java/foo/jni:project_config")).setSrcRule(ndkLibrary.getBuildTarget()).build(ruleResolver);
  ProjectWithModules projectWithModules=getModulesForActionGraph(ruleResolver,ImmutableSortedSet.of(ndkProjectConfig),null);
  List<Module> modules=projectWithModules.modules;
  assertEquals("Should be one module for the ndk_library.",1,modules.size());
  Module androidLibraryModule=Iterables.getOnlyElement(modules);
  assertListEquals(ImmutableList.of(DependentModule.newSourceFolder(),DependentModule.newInheritedJdk()),androidLibraryModule.dependencies);
  assertEquals(Paths.get(String.format("../../../../%s",ndkLibrary.getLibraryPath())),androidLibraryModule.nativeLibs);
}
