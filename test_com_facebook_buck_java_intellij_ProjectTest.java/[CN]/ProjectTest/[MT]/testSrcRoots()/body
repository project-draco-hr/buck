{
  BuildRuleResolver ruleResolver1=new BuildRuleResolver();
  BuildRule resBuildRule=ruleResolver1.addToIndex(AndroidResourceRuleBuilder.newBuilder().setResolver(new SourcePathResolver(ruleResolver1)).setBuildTarget(BuildTargetFactory.newInstance("//resources/com/example:res")).build());
  ProjectConfig projectConfigNullSrcRoots=(ProjectConfig)ProjectConfigBuilder.createBuilder(BuildTargetFactory.newInstance("//resources/com/example:project_config")).setSrcRule(resBuildRule.getBuildTarget()).setSrcRoots(null).build(ruleResolver1);
  ProjectWithModules projectWithModules1=getModulesForActionGraph(ruleResolver1,ImmutableSortedSet.of(projectConfigNullSrcRoots),null);
  assertEquals(1,projectWithModules1.modules.size());
  Module moduleNoJavaSource=projectWithModules1.modules.get(0);
  assertListEquals("Only source tmp should be gen/ when setSrcRoots(null) is specified.",ImmutableList.of(SerializableModule.SourceFolder.GEN),moduleNoJavaSource.sourceFolders);
  BuildRuleResolver ruleResolver2=new BuildRuleResolver();
  BuildRule baseBuildRule=AndroidLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//java/com/example/base:base")).build(ruleResolver2);
  ProjectConfig inPackageProjectConfig=(ProjectConfig)ProjectConfigBuilder.createBuilder(BuildTargetFactory.newInstance("//java/com/example/base:project_config")).setSrcRule(baseBuildRule.getBuildTarget()).setSrcRoots(ImmutableList.<String>of()).build(ruleResolver2);
  JavaPackageFinder javaPackageFinder=EasyMock.createMock(JavaPackageFinder.class);
  EasyMock.expect(javaPackageFinder.findJavaPackage(Paths.get("java/com/example/base/module_java_com_example_base.iml"))).andReturn("com.example.base");
  EasyMock.replay(javaPackageFinder);
  ProjectWithModules projectWithModules2=getModulesForActionGraph(ruleResolver2,ImmutableSortedSet.of(inPackageProjectConfig),javaPackageFinder);
  EasyMock.verify(javaPackageFinder);
  assertEquals(1,projectWithModules2.modules.size());
  Module moduleWithPackagePrefix=projectWithModules2.modules.get(0);
  assertListEquals("The current directory should be a source tmp with a package prefix " + "as well as the gen/ directory.",ImmutableList.of(new SourceFolder("file://$MODULE_DIR$",false,"com.example.base"),SerializableModule.SourceFolder.GEN),moduleWithPackagePrefix.sourceFolders);
  BuildRuleResolver ruleResolver3=new BuildRuleResolver();
  BuildRule baseBuildRule3=AndroidLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//java/com/example/base:base")).build(ruleResolver3);
  ProjectConfig hasSrcFolderProjectConfig=(ProjectConfig)ProjectConfigBuilder.createBuilder(BuildTargetFactory.newInstance("//java/com/example/base:project_config")).setSrcRule(baseBuildRule3.getBuildTarget()).setSrcRoots(ImmutableList.of("src")).build(ruleResolver3);
  ProjectWithModules projectWithModules3=getModulesForActionGraph(ruleResolver3,ImmutableSortedSet.of(hasSrcFolderProjectConfig),null);
  assertEquals(1,projectWithModules3.modules.size());
  Module moduleHasSrcFolder=projectWithModules3.modules.get(0);
  assertListEquals("Both src/ and gen/ should be source folders.",ImmutableList.of(new SourceFolder("file://$MODULE_DIR$/src",false),SerializableModule.SourceFolder.GEN),moduleHasSrcFolder.sourceFolders);
}
