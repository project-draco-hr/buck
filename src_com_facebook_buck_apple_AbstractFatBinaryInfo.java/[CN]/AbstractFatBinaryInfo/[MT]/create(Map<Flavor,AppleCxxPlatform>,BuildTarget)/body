{
  ImmutableList<ImmutableSortedSet<Flavor>> thinFlavorSets=generateThinFlavors(platformFlavorsToAppleCxxPlatforms.keySet(),target.getFlavors());
  if (thinFlavorSets.size() <= 1) {
    return Optional.absent();
  }
  if (!Sets.intersection(target.getFlavors(),FORBIDDEN_BUILD_ACTIONS).isEmpty()) {
    throw new HumanReadableException("%s: Fat binaries is only supported when building an actual binary.",target);
  }
  Predicate<Flavor> isPlatformFlavor=Predicates.in(platformFlavorsToAppleCxxPlatforms.keySet());
  AppleCxxPlatform representativePlatform=null;
  AppleSdk sdk=null;
  for (  SortedSet<Flavor> flavorSet : thinFlavorSets) {
    AppleCxxPlatform platform=Preconditions.checkNotNull(platformFlavorsToAppleCxxPlatforms.get(Iterables.find(flavorSet,isPlatformFlavor)));
    if (sdk == null) {
      sdk=platform.getAppleSdk();
      representativePlatform=platform;
    }
 else     if (sdk != platform.getAppleSdk()) {
      throw new HumanReadableException("%s: Fat binaries can only be generated from binaries compiled for the same SDK.",target);
    }
  }
  FatBinaryInfo.Builder builder=FatBinaryInfo.builder().setFatTarget(target).setRepresentativePlatform(Preconditions.checkNotNull(representativePlatform));
  BuildTarget platformFreeTarget=target.withoutFlavors(platformFlavorsToAppleCxxPlatforms.keySet());
  for (  SortedSet<Flavor> flavorSet : thinFlavorSets) {
    builder.addThinTargets(platformFreeTarget.withFlavors(flavorSet));
  }
  return Optional.of(builder.build());
}
