{
  if (args.length < 2)   throw new IllegalArgumentException("usage: classpath output_file rootset_classname_1 [rootset_classname_2 ...]");
  final String _classPath=args[0];
  final URL[] classPath;
{
    final StringTokenizer tokenizer=new StringTokenizer(_classPath,File.pathSeparator);
    classPath=new URL[tokenizer.countTokens()];
    for (int i=0; tokenizer.hasMoreTokens(); ++i) {
      classPath[i]=new File(tokenizer.nextToken()).toURL();
    }
  }
  final File outFile=new File(args[1]);
  final int offset=2;
  final String[] rootSet=args.length > offset ? new String[args.length - offset] : new String[0];
{
    for (int a=0; a < rootSet.length; ++a) {
      rootSet[a]=args[a + offset];
    }
  }
  final ClassDep _this=new ClassDep(rootSet,classPath);
  final String[] deps=_this.getDependencies(true);
  final StringBuffer s=new StringBuffer();
  for (int d=deps.length - 1; d >= 0; --d) {
    s.append(deps[d]);
    if (d > 0)     s.append(',');
  }
  final File parent=outFile.getParentFile();
  if (parent != null)   parent.mkdirs();
  final FileOutputStream out=new FileOutputStream(outFile);
  final Properties result=new Properties();
  result.setProperty("closure",s.toString());
  result.store(out,"this file is auto-generated, do not edit");
  out.close();
}
