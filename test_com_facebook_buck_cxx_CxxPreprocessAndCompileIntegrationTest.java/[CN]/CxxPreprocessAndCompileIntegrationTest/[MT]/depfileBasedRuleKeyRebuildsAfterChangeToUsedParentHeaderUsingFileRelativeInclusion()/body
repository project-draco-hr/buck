{
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(FakeBuckConfig.builder().build()));
  BuildTarget target=BuildTargetFactory.newInstance("//:binary_with_used_relative_parent_header");
  String usedHeaderName="source_relative_parent_header.h";
  String sourceName="source_relative_parent_header/source.cpp";
  BuildTarget preprocessTarget=getPreprocessTarget(cxxPlatform,target,sourceName,AbstractCxxSource.Type.CXX);
  workspace.runBuckBuild("--config","build.depfiles=enabled",target.toString()).assertSuccess();
  BuckBuildLog.BuildLogEntry firstRunEntry=workspace.getBuildLog().getLogEntry(preprocessTarget);
  assertThat(firstRunEntry.getSuccessType(),equalTo(Optional.of(BuildRuleSuccessType.BUILT_LOCALLY)));
  workspace.writeContentsToPath("static inline int newFunction() { return 20; }",usedHeaderName);
  workspace.runBuckBuild("--config","build.depfiles=enabled",target.toString()).assertSuccess();
  BuckBuildLog.BuildLogEntry secondRunEntry=workspace.getBuildLog().getLogEntry(preprocessTarget);
  assertThat(secondRunEntry.getSuccessType(),equalTo(Optional.of(BuildRuleSuccessType.BUILT_LOCALLY)));
  assertThat(secondRunEntry.getRuleKey(),Matchers.not(equalTo(firstRunEntry.getRuleKey())));
}
