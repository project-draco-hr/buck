{
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(new FakeBuckConfig()));
  BuildTarget target=BuildTargetFactory.newInstance("//:source_relative_header");
  CxxSourceRuleFactory cxxSourceRuleFactory=CxxSourceRuleFactoryHelper.of(target,cxxPlatform);
  String usedHeaderName="source_relative_header.h";
  String unusedHeaderName="unused_header.h";
  String sourceName="source_relative_header.cpp";
  BuildTarget preprocessTarget;
  if (mode == CxxPreprocessMode.SEPARATE) {
    preprocessTarget=cxxSourceRuleFactory.createPreprocessBuildTarget(sourceName,AbstractCxxSource.Type.CXX,CxxSourceRuleFactory.PicType.PDC);
  }
 else {
    preprocessTarget=cxxSourceRuleFactory.createCompileBuildTarget(sourceName,CxxSourceRuleFactory.PicType.PDC);
  }
  workspace.runBuckBuild("--config","build.depfiles=true",target.toString());
  BuckBuildLog.BuildLogEntry firstRunEntry=workspace.getBuildLog().getLogEntry(preprocessTarget);
  assertThat(firstRunEntry.getSuccessType(),equalTo(Optional.of(BuildRuleSuccessType.BUILT_LOCALLY)));
  workspace.writeContentsToPath("static inline int newFunction() { return 20; }",unusedHeaderName);
  workspace.runBuckBuild("--config","build.depfiles=true",target.toString());
  BuckBuildLog.BuildLogEntry secondRunEntry=workspace.getBuildLog().getLogEntry(preprocessTarget);
  assertThat(secondRunEntry.getSuccessType(),equalTo(Optional.of(BuildRuleSuccessType.MATCHING_DEP_FILE_RULE_KEY)));
  assertThat(secondRunEntry.getRuleKey(),Matchers.not(equalTo(firstRunEntry.getRuleKey())));
  workspace.writeContentsToPath("static inline int newFunction() { return 20; }",usedHeaderName);
  workspace.runBuckBuild("--config","build.depfiles=true",target.toString());
  BuckBuildLog.BuildLogEntry thirdRunEntry=workspace.getBuildLog().getLogEntry(preprocessTarget);
  assertThat(thirdRunEntry.getSuccessType(),equalTo(Optional.of(BuildRuleSuccessType.BUILT_LOCALLY)));
  assertThat(thirdRunEntry.getRuleKey(),Matchers.not(equalTo(firstRunEntry.getRuleKey())));
  assertThat(thirdRunEntry.getRuleKey(),Matchers.not(equalTo(secondRunEntry.getRuleKey())));
}
