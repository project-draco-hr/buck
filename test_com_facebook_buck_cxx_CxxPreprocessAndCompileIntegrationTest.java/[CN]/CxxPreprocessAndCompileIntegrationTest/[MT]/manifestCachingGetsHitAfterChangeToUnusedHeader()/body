{
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(FakeBuckConfig.builder().build()));
  BuildTarget target=BuildTargetFactory.newInstance("//:binary_with_unused_header");
  String unusedHeaderName="unused_header.h";
  String sourceName="source.cpp";
  BuildTarget preprocessTarget=getPreprocessTarget(cxxPlatform,target,sourceName,AbstractCxxSource.Type.CXX);
  workspace.enableDirCache();
  workspace.runBuckBuild("--config","build.depfiles=cache",target.toString()).assertSuccess();
  BuckBuildLog.BuildLogEntry firstRunEntry=workspace.getBuildLog().getLogEntry(preprocessTarget);
  assertThat(firstRunEntry.getSuccessType(),equalTo(Optional.of(BuildRuleSuccessType.BUILT_LOCALLY)));
  workspace.runBuckCommand("clean");
  workspace.writeContentsToPath("static inline int newFunction() { return 20; }",unusedHeaderName);
  workspace.runBuckBuild("--config","build.depfiles=cache",target.toString()).assertSuccess();
  BuckBuildLog.BuildLogEntry secondRunEntry=workspace.getBuildLog().getLogEntry(preprocessTarget);
  assertThat(secondRunEntry.getSuccessType(),equalTo(Optional.of(BuildRuleSuccessType.FETCHED_FROM_CACHE_MANIFEST_BASED)));
  assertThat(secondRunEntry.getRuleKey(),Matchers.not(equalTo(firstRunEntry.getRuleKey())));
}
