{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
        struct.type=com.facebook.buck.artifact_cache.thrift.BuckCacheRequestType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 100:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list18=iprot.readListBegin();
      struct.payloads=new ArrayList<PayloadInfo>(_list18.size);
      PayloadInfo _elem19;
      for (int _i20=0; _i20 < _list18.size; ++_i20) {
        _elem19=new PayloadInfo();
        _elem19.read(iprot);
        struct.payloads.add(_elem19);
      }
      iprot.readListEnd();
    }
    struct.setPayloadsIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 101:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.fetchRequest=new BuckCacheFetchRequest();
struct.fetchRequest.read(iprot);
struct.setFetchRequestIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 102:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.storeRequest=new BuckCacheStoreRequest();
struct.storeRequest.read(iprot);
struct.setStoreRequestIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
