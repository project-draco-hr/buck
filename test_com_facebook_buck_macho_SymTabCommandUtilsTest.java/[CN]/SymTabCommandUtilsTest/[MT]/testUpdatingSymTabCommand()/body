{
  byte[] commandBytes=SymTabCommandTestData.getBigEndian();
  final int cmdSize=commandBytes.length;
  commandBytes[11]=(byte)cmdSize;
  commandBytes[15]=(byte)3;
  commandBytes[18]=(byte)cmdSize;
  commandBytes[23]=(byte)20;
  SymTabCommand symTabCommand=SymTabCommandUtils.createFromBuffer(ByteBuffer.wrap(commandBytes).order(ByteOrder.BIG_ENDIAN));
  final String content="new_entry";
  ByteBuffer byteBuffer=ByteBuffer.allocate(cmdSize + 20 + SymTabCommandUtils.sizeOfStringTableEntryWithContents(content)).order(ByteOrder.BIG_ENDIAN).putInt(SymTabCommand.LC_SYMTAB.intValue()).putInt(cmdSize).put(commandBytes);
  SymTabCommand updated=SymTabCommandUtils.updateSymTabCommand(byteBuffer,symTabCommand,content);
  assertThat(updated.getStrsize(),equalToObject(symTabCommand.getStrsize().plus(UnsignedInteger.fromIntBits(SymTabCommandUtils.sizeOfStringTableEntryWithContents(content)))));
  byteBuffer.position(updated.getLoadCommandCommonFields().getOffsetInBinary());
  byte[] updatedBytes=new byte[commandBytes.length];
  byteBuffer.get(updatedBytes,0,updatedBytes.length);
  SymTabCommand commandFromBuffer=SymTabCommandUtils.createFromBuffer(ByteBuffer.wrap(updatedBytes).order(ByteOrder.BIG_ENDIAN));
  assertThat(commandFromBuffer.getSymoff(),equalToObject(updated.getSymoff()));
  assertThat(commandFromBuffer.getNsyms(),equalToObject(updated.getNsyms()));
  assertThat(commandFromBuffer.getStroff(),equalToObject(updated.getStroff()));
  assertThat(commandFromBuffer.getStrsize(),equalToObject(updated.getStrsize()));
}
