{
  NewNativeTargetProjectMutator mutator=mutatorWithCommonDefaults();
  BuildTarget depBuildTarget=BuildTarget.builder("//foo","dep").build();
  ReactNativeBuckConfig buckConfig=new ReactNativeBuckConfig(new FakeBuckConfig(ImmutableMap.of("react-native",ImmutableMap.of("packager","react-native/packager.sh")),new AllExistingProjectFilesystem()));
  TargetNode<?> reactNativeNode=new AbstractNodeBuilder<ReactNativeLibraryArgs>(new IosReactNativeLibraryDescription(buckConfig),depBuildTarget){
    @Override public TargetNode<ReactNativeLibraryArgs> build(){
      ProjectFilesystem filesystem=new FakeProjectFilesystem();
      arg.bundleName="Apps/Foo/FooBundle.js";
      arg.entryPath=new PathSourcePath(filesystem,Paths.get("js/FooApp.js"));
      return super.build();
    }
  }
.build();
  mutator.setPostBuildRunScriptPhases(ImmutableList.<TargetNode<?>>of(reactNativeNode));
  NewNativeTargetProjectMutator.Result result=mutator.buildTargetAndAddToProject(generatedProject);
  PBXShellScriptBuildPhase phase=getSingletonPhaseByType(result.target,PBXShellScriptBuildPhase.class);
  String shellScript=phase.getShellScript();
  assertThat(shellScript,startsWith("BASE_DIR=${CONFIGURATION_BUILD_DIR}/${UNLOCALIZED_RESOURCES_FOLDER_PATH}" + " && JS_OUT=${BASE_DIR}/Apps/Foo/FooBundle.js && mkdir -p `dirname ${JS_OUT}`"));
}
