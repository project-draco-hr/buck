{
  if (key == null)   throw new IllegalArgumentException("null input: key");
  if ((++m_writeAccessCount % m_writeClearCheckFrequency) == 0)   removeClearedValues();
  final int keyHashCode=key.hashCode();
  final SoftEntry[] buckets=m_buckets;
  final int bucketIndex=(keyHashCode & 0x7FFFFFFF) % buckets.length;
  Object result=null;
  for (SoftEntry entry=buckets[bucketIndex], prev=null; entry != null; prev=entry, entry=entry.m_next) {
    final Object entryKey=entry.m_key;
    if ((IDENTITY_OPTIMIZATION && (entryKey == key)) || ((keyHashCode == entryKey.hashCode()) && key.equals(entryKey))) {
      if (prev == null) {
        buckets[bucketIndex]=entry.m_next;
      }
 else {
        prev.m_next=entry.m_next;
      }
      final IndexedSoftReference ref=entry.m_softValue;
      result=ref.get();
      ref.m_bucketIndex=-1;
      entry.m_softValue=null;
      entry.m_key=null;
      entry.m_next=null;
      entry=null;
      --m_size;
      break;
    }
  }
  return result;
}
