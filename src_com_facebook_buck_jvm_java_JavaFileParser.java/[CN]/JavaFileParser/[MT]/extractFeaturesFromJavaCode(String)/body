{
  final boolean shouldThrowForUnsupportedWildcardImport=false;
  final AtomicBoolean isPoisonedByUnsupportedWildcardImport=new AtomicBoolean(false);
  final CompilationUnit compilationUnit=makeCompilationUnitFromSource(code);
  final ImmutableSortedSet.Builder<String> providedSymbols=ImmutableSortedSet.naturalOrder();
  final ImmutableSortedSet.Builder<String> requiredSymbols=ImmutableSortedSet.naturalOrder();
  final ImmutableSortedSet.Builder<String> exportedSymbols=ImmutableSortedSet.naturalOrder();
  final ImmutableSortedSet.Builder<String> requiredSymbolsFromExplicitImports=ImmutableSortedSet.naturalOrder();
  compilationUnit.accept(new ASTVisitor(){
    @Nullable private String packageName;
    /** 
 * Maps simple name to fully-qualified name. 
 */
    private Map<String,String> simpleImportedTypes=new HashMap<>();
    /** 
 * Maps wildcard import prefixes, such as {@code "java.util"} to the types in the respective
 * package if a wildcard import such as {@code import java.util.*} is used.
 */
    private Map<String,ImmutableSet<String>> wildcardImports=new HashMap<>();
    @Override public boolean visit(    PackageDeclaration node){
      Preconditions.checkState(packageName == null,"There should be at most one package declaration");
      packageName=node.getName().getFullyQualifiedName();
      return false;
    }
    @Override public boolean visit(    TypeDeclaration node){
      if (node.getParent() instanceof TypeDeclarationStatement) {
        return true;
      }
      String fullyQualifiedName=getFullyQualifiedTypeName(node);
      if (fullyQualifiedName != null) {
        providedSymbols.add(fullyQualifiedName);
      }
      @SuppressWarnings("unchecked") List<Type> interfaceTypes=node.superInterfaceTypes();
      for (      Type interfaceType : interfaceTypes) {
        tryAddType(interfaceType,DependencyType.EXPORTED);
      }
      Type superclassType=node.getSuperclassType();
      if (superclassType != null) {
        tryAddType(superclassType,DependencyType.EXPORTED);
      }
      return true;
    }
    @Override public boolean visit(    EnumDeclaration node){
      String fullyQualifiedName=getFullyQualifiedTypeName(node);
      if (fullyQualifiedName != null) {
        providedSymbols.add(fullyQualifiedName);
      }
      return true;
    }
    @Override public boolean visit(    AnnotationTypeDeclaration node){
      String fullyQualifiedName=getFullyQualifiedTypeName(node);
      if (fullyQualifiedName != null) {
        providedSymbols.add(fullyQualifiedName);
      }
      return true;
    }
    /** 
 * Uses heuristics to try to figure out what type of QualifiedName this is. Returns a non-null
 * value if this is believed to be a reference that qualifies as a "required symbol"
 * relationship.
 */
    @Override public boolean visit(    QualifiedName node){
      QualifiedName ancestor=findMostQualifiedAncestor(node);
      ASTNode parent=ancestor.getParent();
      if (!(parent instanceof PackageDeclaration) && !(parent instanceof ImportDeclaration)) {
        String symbol=ancestor.getFullyQualifiedName();
        if (CharMatcher.javaUpperCase().matches(symbol.charAt(0))) {
          addTypeFromDotDelimitedSequence(symbol,DependencyType.REQUIRED);
        }
      }
      return false;
    }
    /** 
 * @param expr could be "Example", "Example.field", "com.example.Example". Note it could also
 * be a built-in type, such as "java.lang.Integer", in which case it will not be added to
 * the set of required symbols.
 */
    private void addTypeFromDotDelimitedSequence(    String expr,    DependencyType dependencyType){
      if (startsWithUppercaseChar(expr)) {
        int index=expr.indexOf('.');
        if (index >= 0) {
          String leftmostComponent=expr.substring(0,index);
          if (JAVA_LANG_TYPES.contains(leftmostComponent)) {
            return;
          }
        }
      }
      expr=qualifyWithPackageNameIfNecessary(expr);
      addSymbol(expr,dependencyType);
    }
    @Override public boolean visit(    ImportDeclaration node){
      String fullyQualifiedName=node.getName().getFullyQualifiedName();
      if (node.isOnDemand()) {
        ImmutableSet<String> value=SUPPORTED_WILDCARD_IMPORTS.get(fullyQualifiedName);
        if (value != null) {
          wildcardImports.put(fullyQualifiedName,value);
          return false;
        }
 else         if (shouldThrowForUnsupportedWildcardImport) {
          throw new RuntimeException(String.format("Use of wildcard 'import %s.*' makes it impossible to statically determine " + "required symbols in this file. Please enumerate explicit imports.",fullyQualifiedName));
        }
 else {
          isPoisonedByUnsupportedWildcardImport.set(true);
          return false;
        }
      }
      String simpleName=getSimpleNameFromFullyQualifiedName(fullyQualifiedName);
      int index=fullyQualifiedName.indexOf("." + simpleName);
      String enclosingType=fullyQualifiedName.substring(0,index + simpleName.length() + 1);
      requiredSymbolsFromExplicitImports.add(enclosingType);
      simpleImportedTypes.put(simpleName,enclosingType);
      return false;
    }
    @Override public boolean visit(    MethodInvocation node){
      if (node.getExpression() == null) {
        return true;
      }
      String receiver=node.getExpression().toString();
      if (looksLikeAType(receiver)) {
        addTypeFromDotDelimitedSequence(receiver,DependencyType.REQUIRED);
      }
      return true;
    }
    /** 
 * An annotation on a member with zero arguments. 
 */
    @Override public boolean visit(    MarkerAnnotation node){
      DependencyType dependencyType=findDependencyTypeForAnnotation(node);
      addSimpleTypeName(node.getTypeName(),dependencyType);
      return true;
    }
    /** 
 * An annotation on a member with named arguments. 
 */
    @Override public boolean visit(    NormalAnnotation node){
      DependencyType dependencyType=findDependencyTypeForAnnotation(node);
      addSimpleTypeName(node.getTypeName(),dependencyType);
      return true;
    }
    /** 
 * An annotation on a member with a single, unnamed argument. 
 */
    @Override public boolean visit(    SingleMemberAnnotation node){
      DependencyType dependencyType=findDependencyTypeForAnnotation(node);
      addSimpleTypeName(node.getTypeName(),dependencyType);
      return true;
    }
    private DependencyType findDependencyTypeForAnnotation(    Annotation annotation){
      ASTNode parentNode=annotation.getParent();
      if (parentNode == null) {
        return DependencyType.REQUIRED;
      }
      if (parentNode instanceof BodyDeclaration) {
        BodyDeclaration declaration=(BodyDeclaration)parentNode;
        int modifiers=declaration.getModifiers();
        if ((modifiers & Modifier.PRIVATE) == 0) {
          return DependencyType.EXPORTED;
        }
      }
      return DependencyType.REQUIRED;
    }
    @Override public boolean visit(    SimpleType node){
      tryAddType(node,DependencyType.REQUIRED);
      return true;
    }
    @Override public boolean visit(    MethodDeclaration node){
      if ((node.getModifiers() & Modifier.PRIVATE) != 0) {
        return true;
      }
      Type returnType=node.getReturnType2();
      if (returnType != null) {
        tryAddType(returnType,DependencyType.EXPORTED);
      }
      @SuppressWarnings("unchecked") List<SingleVariableDeclaration> params=node.parameters();
      for (      SingleVariableDeclaration decl : params) {
        tryAddType(decl.getType(),DependencyType.EXPORTED);
      }
      @SuppressWarnings("unchecked") List<Type> exceptions=node.thrownExceptionTypes();
      for (      Type exception : exceptions) {
        tryAddType(exception,DependencyType.EXPORTED);
      }
      return true;
    }
    @Override public boolean visit(    FieldDeclaration node){
      if ((node.getModifiers() & Modifier.PRIVATE) == 0) {
        tryAddType(node.getType(),DependencyType.EXPORTED);
      }
      return true;
    }
    private void tryAddType(    Type type,    DependencyType dependencyType){
      if (type.isSimpleType()) {
        SimpleType simpleType=(SimpleType)type;
        Name simpleTypeName=simpleType.getName();
        String simpleName=simpleTypeName.toString();
        if (!CharMatcher.JAVA_UPPER_CASE.matchesAllOf(simpleName)) {
          addSimpleTypeName(simpleTypeName,dependencyType);
        }
      }
 else       if (type.isArrayType()) {
        ArrayType arrayType=(ArrayType)type;
        tryAddType(arrayType.getElementType(),dependencyType);
      }
 else       if (type.isParameterizedType()) {
        ParameterizedType parameterizedType=(ParameterizedType)type;
        tryAddType(parameterizedType.getType(),dependencyType);
        @SuppressWarnings("unchecked") List<Type> argTypes=parameterizedType.typeArguments();
        for (        Type argType : argTypes) {
          tryAddType(argType,dependencyType);
        }
      }
    }
    private void addSimpleTypeName(    Name simpleTypeName,    DependencyType dependencyType){
      String simpleName=simpleTypeName.toString();
      if (JAVA_LANG_TYPES.contains(simpleName)) {
        return;
      }
      String fullyQualifiedNameForSimpleName=simpleImportedTypes.get(simpleName);
      if (fullyQualifiedNameForSimpleName != null) {
        if (dependencyType == DependencyType.EXPORTED) {
          addSymbol(fullyQualifiedNameForSimpleName,DependencyType.EXPORTED);
        }
        return;
      }
      if (!wildcardImports.isEmpty()) {
        for (        Map.Entry<String,ImmutableSet<String>> entry : wildcardImports.entrySet()) {
          Set<String> types=entry.getValue();
          if (types.contains(simpleName)) {
            String packageName=entry.getKey();
            addSymbol(packageName + "." + simpleName,dependencyType);
            return;
          }
        }
      }
      String symbol=simpleTypeName.getFullyQualifiedName();
      symbol=qualifyWithPackageNameIfNecessary(symbol);
      addSymbol(symbol,dependencyType);
    }
    private void addSymbol(    String symbol,    DependencyType dependencyType){
      ((dependencyType == DependencyType.REQUIRED) ? requiredSymbols : exportedSymbols).add(symbol);
    }
    private String qualifyWithPackageNameIfNecessary(    String symbol){
      if (!startsWithUppercaseChar(symbol)) {
        return symbol;
      }
      int index=symbol.indexOf('.');
      if (index >= 0) {
        symbol=symbol.substring(0,index);
      }
      if (packageName != null) {
        symbol=packageName + "." + symbol;
      }
      return symbol;
    }
  }
);
  ImmutableSortedSet<String> totalExportedSymbols=exportedSymbols.build();
  Set<String> totalRequiredSymbols=new HashSet<>();
  if (isPoisonedByUnsupportedWildcardImport.get()) {
    totalRequiredSymbols.addAll(requiredSymbolsFromExplicitImports.build());
  }
 else {
    totalRequiredSymbols.addAll(requiredSymbolsFromExplicitImports.build());
    totalRequiredSymbols.addAll(requiredSymbols.build());
  }
  totalRequiredSymbols.removeAll(totalExportedSymbols);
  return new JavaFileFeatures(providedSymbols.build(),ImmutableSortedSet.copyOf(totalRequiredSymbols),totalExportedSymbols);
}
