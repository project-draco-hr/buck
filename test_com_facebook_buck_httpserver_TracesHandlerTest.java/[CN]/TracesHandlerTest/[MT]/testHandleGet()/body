{
  File a=createMock(File.class);
  expect(a.lastModified()).andStubReturn(1000L);
  expect(a.getName()).andStubReturn("build.a.trace");
  File b=createMock(File.class);
  expect(b.lastModified()).andStubReturn(4000L);
  expect(b.getName()).andStubReturn("build.b.trace");
  File c=createMock(File.class);
  expect(c.lastModified()).andStubReturn(2000L);
  expect(c.getName()).andStubReturn("build.c.trace");
  File d=createMock(File.class);
  expect(d.lastModified()).andStubReturn(3000L);
  expect(d.getName()).andStubReturn("build.d.trace");
  ProjectFilesystem projectFilesystem=createMock(ProjectFilesystem.class);
  expect(projectFilesystem.listFiles(BuckConstant.BUCK_TRACE_DIR)).andReturn(new File[]{a,b,c,d});
  Request baseRequest=createMock(Request.class);
  replayAll();
  TracesHandlerDelegate delegate=new TracesHandlerDelegate(projectFilesystem);
  TemplateHandler tracesHandler=new TemplateHandler(delegate);
  String html=tracesHandler.createHtmlForResponse(baseRequest);
  int indexB=html.indexOf("<a href=\"/trace/b\" target=\"_blank\">build.b.trace</a>");
  assertTrue(indexB > 0);
  int indexD=html.indexOf("<a href=\"/trace/d\" target=\"_blank\">build.d.trace</a>");
  assertTrue(indexD > indexB);
  int indexC=html.indexOf("<a href=\"/trace/c\" target=\"_blank\">build.c.trace</a>");
  assertTrue(indexC > indexD);
  int indexA=html.indexOf("<a href=\"/trace/a\" target=\"_blank\">build.a.trace</a>");
  assertTrue(indexA > indexC);
  verifyAll();
}
