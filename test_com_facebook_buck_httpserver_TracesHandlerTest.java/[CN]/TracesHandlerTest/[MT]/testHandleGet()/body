{
  TracesHelper tracesHelper=createMock(TracesHelper.class);
  expect(tracesHelper.getTraceAttributesFor(BuckConstant.getBuckTraceDir().resolve("build.a.trace"))).andReturn(new TraceAttributes(Optional.of("buck build buck"),1000L));
  expect(tracesHelper.getTraceAttributesFor(BuckConstant.getBuckTraceDir().resolve("build.b.trace"))).andReturn(new TraceAttributes(Optional.of("buck test --all --code-coverage"),4000L));
  expect(tracesHelper.getTraceAttributesFor(BuckConstant.getBuckTraceDir().resolve("build.c.trace"))).andReturn(new TraceAttributes(Optional.<String>absent(),2000L));
  expect(tracesHelper.getTraceAttributesFor(BuckConstant.getBuckTraceDir().resolve("build.d.trace"))).andReturn(new TraceAttributes(Optional.of("buck test //test/com/facebook/buck/cli:cli"),3000L));
  expect(tracesHelper.listTraceFilesByLastModified()).andReturn(ImmutableList.of(BuckConstant.getBuckTraceDir().resolve("build.b.trace"),BuckConstant.getBuckTraceDir().resolve("build.d.trace"),BuckConstant.getBuckTraceDir().resolve("build.c.trace"),BuckConstant.getBuckTraceDir().resolve("build.a.trace")));
  Request baseRequest=createMock(Request.class);
  replayAll();
  TracesHandlerDelegate delegate=new TracesHandlerDelegate(tracesHelper);
  TemplateHandler tracesHandler=new TemplateHandler(delegate);
  String html=tracesHandler.createHtmlForResponse(baseRequest);
  int indexB=html.indexOf("<a href=\"/trace/b\"><tt>build.b.trace</tt></a>");
  assertTrue(indexB > 0);
  int indexBCommand=html.indexOf("buck test --all --code-coverage");
  assertTrue(indexBCommand > 0);
  int indexD=html.indexOf("<a href=\"/trace/d\"><tt>build.d.trace</tt></a>");
  assertTrue(indexD > indexB);
  int indexDCommand=html.indexOf("buck test //test/com/facebook/buck/cli:cli");
  assertTrue(indexDCommand > indexBCommand);
  int indexC=html.indexOf("<a href=\"/trace/c\"><tt>build.c.trace</tt></a>");
  assertTrue(indexC > indexD);
  int indexA=html.indexOf("<a href=\"/trace/a\"><tt>build.a.trace</tt></a>");
  assertTrue(indexA > indexC);
  int indexACommand=html.indexOf("buck build buck");
  assertTrue(indexACommand > indexDCommand);
  verifyAll();
}
