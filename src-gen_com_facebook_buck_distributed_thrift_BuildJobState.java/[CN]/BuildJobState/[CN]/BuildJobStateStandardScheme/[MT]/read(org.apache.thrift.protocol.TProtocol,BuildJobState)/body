{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
          org.apache.thrift.protocol.TMap _map52=iprot.readMapBegin();
          struct.cells=new HashMap<Integer,BuildJobStateCell>(2 * _map52.size);
          int _key53;
          BuildJobStateCell _val54;
          for (int _i55=0; _i55 < _map52.size; ++_i55) {
            _key53=iprot.readI32();
            _val54=new BuildJobStateCell();
            _val54.read(iprot);
            struct.cells.put(_key53,_val54);
          }
          iprot.readMapEnd();
        }
        struct.setCellsIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
      org.apache.thrift.protocol.TList _list56=iprot.readListBegin();
      struct.fileHashes=new ArrayList<BuildJobStateFileHashes>(_list56.size);
      BuildJobStateFileHashes _elem57;
      for (int _i58=0; _i58 < _list56.size; ++_i58) {
        _elem57=new BuildJobStateFileHashes();
        _elem57.read(iprot);
        struct.fileHashes.add(_elem57);
      }
      iprot.readListEnd();
    }
    struct.setFileHashesIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
struct.targetGraph=new BuildJobStateTargetGraph();
struct.targetGraph.read(iprot);
struct.setTargetGraphIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
