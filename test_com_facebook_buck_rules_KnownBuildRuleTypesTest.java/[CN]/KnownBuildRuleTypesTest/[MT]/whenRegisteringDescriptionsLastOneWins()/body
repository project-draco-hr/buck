{
  FlavorDomain<CxxPlatform> cxxPlatforms=FlavorDomain.of("C/C++ platform");
  CxxPlatform defaultPlatform=CxxPlatformUtils.DEFAULT_PLATFORM;
  KnownBuildRuleTypes.Builder buildRuleTypesBuilder=KnownBuildRuleTypes.builder();
  buildRuleTypesBuilder.register(new TestDescription("Foo"));
  buildRuleTypesBuilder.register(new TestDescription("Bar"));
  buildRuleTypesBuilder.register(new TestDescription("Raz"));
  buildRuleTypesBuilder.setCxxPlatforms(cxxPlatforms);
  buildRuleTypesBuilder.setDefaultCxxPlatform(defaultPlatform);
  KnownBuildRuleTypes buildRuleTypes=buildRuleTypesBuilder.build();
  assertEquals("Only one description should have wound up in the final KnownBuildRuleTypes",KnownBuildRuleTypes.builder().setCxxPlatforms(cxxPlatforms).setDefaultCxxPlatform(defaultPlatform).build().getAllDescriptions().size() + 1,buildRuleTypes.getAllDescriptions().size());
  boolean foundTestDescription=false;
  for (  Description<?> description : buildRuleTypes.getAllDescriptions()) {
    if (description.getBuildRuleType().equals(TestDescription.TYPE)) {
      assertFalse("Should only find one test description",foundTestDescription);
      foundTestDescription=true;
      assertEquals("Last description should have won","Raz",((TestDescription)description).getValue());
    }
  }
}
