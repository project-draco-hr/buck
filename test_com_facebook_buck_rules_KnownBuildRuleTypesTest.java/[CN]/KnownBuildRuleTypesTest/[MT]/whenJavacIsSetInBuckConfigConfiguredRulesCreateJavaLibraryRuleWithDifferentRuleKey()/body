{
  final File javac=temporaryFolder.newFile();
  assertTrue(javac.setExecutable(true));
  ImmutableMap<String,ImmutableMap<String,String>> sections=ImmutableMap.of("tools",ImmutableMap.of("javac",javac.toString()));
  BuckConfig buckConfig=FakeBuckConfig.builder().setSections(sections).build();
  KnownBuildRuleTypes buildRuleTypes=DefaultKnownBuildRuleTypes.getDefaultKnownBuildRuleTypes(new FakeProjectFilesystem(),environment);
  DefaultJavaLibrary libraryRule=createJavaLibrary(buildRuleTypes);
  ProcessExecutor processExecutor=createExecutor(javac.toString(),"fakeVersion 0.1");
  KnownBuildRuleTypes configuredBuildRuleTypes=KnownBuildRuleTypes.createBuilder(buckConfig,processExecutor,new FakeAndroidDirectoryResolver(),Optional.<Path>absent()).build();
  DefaultJavaLibrary configuredRule=createJavaLibrary(configuredBuildRuleTypes);
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer()));
  Path javacPath=javac.toPath();
  FakeFileHashCache hashCache=new FakeFileHashCache(ImmutableMap.of(javacPath,MorePaths.asByteSource(javacPath).hash(Hashing.sha1())));
  RuleKey configuredKey=new DefaultRuleKeyBuilderFactory(hashCache,resolver).build(configuredRule);
  RuleKey libraryKey=new DefaultRuleKeyBuilderFactory(hashCache,resolver).build(libraryRule);
  assertNotEquals(libraryKey,configuredKey);
}
