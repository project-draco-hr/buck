{
  BuildTarget barLibTarget=BuildTarget.builder("//bar","lib").build();
  barLibNode=JavaLibraryBuilder.createBuilder(barLibTarget).build();
  BuildTarget fooLibTarget=BuildTarget.builder("//foo","lib").build();
  fooLibNode=JavaLibraryBuilder.createBuilder(fooLibTarget).addDep(barLibTarget).build();
  BuildTarget fooBinTarget=BuildTarget.builder("//foo","binbinary").build();
  fooBinNode=new JavaBinaryRuleBuilder(fooBinTarget).setDeps(ImmutableSortedSet.of(fooLibTarget)).build();
  BuildTarget bazLibTarget=BuildTarget.builder("//baz","lib").build();
  bazLibNode=JavaLibraryBuilder.createBuilder(bazLibTarget).build();
  BuildTarget bazTestTarget=BuildTarget.builder("//baz","xctest").build();
  bazTestNode=JavaTestBuilder.createBuilder(bazTestTarget).setSourceUnderTest(ImmutableSortedSet.of(bazLibTarget)).build();
  BuildTarget fooTestTarget=BuildTarget.builder("//foo","lib-xctest").build();
  fooTestNode=JavaTestBuilder.createBuilder(fooTestTarget).setSourceUnderTest(ImmutableSortedSet.of(fooLibTarget)).addDep(bazLibTarget).build();
  BuildTarget fooBinTestTarget=BuildTarget.builder("//foo","bin-xctest").build();
  fooBinTestNode=JavaTestBuilder.createBuilder(fooBinTestTarget).setSourceUnderTest(ImmutableSortedSet.of(fooBinTarget)).build();
  BuildTarget quxBinTarget=BuildTarget.builder("//qux","bin").build();
  quxBinNode=new JavaBinaryRuleBuilder(quxBinTarget).setDeps(ImmutableSortedSet.of(barLibTarget)).build();
  BuildTarget fooProjectTarget=BuildTarget.builder("//foo","foo").build();
  fooProjectNode=ProjectConfigBuilder.newProjectConfigRuleBuilder(fooProjectTarget).setSrcRule(fooBinTarget).build();
  BuildTarget bazProjectTarget=BuildTarget.builder("//baz","baz").build();
  bazProjectNode=ProjectConfigBuilder.newProjectConfigRuleBuilder(bazProjectTarget).setSrcRule(bazLibTarget).build();
  targetGraph=TargetGraphFactory.newInstance(barLibNode,fooLibNode,fooBinNode,bazLibNode,bazTestNode,fooTestNode,fooBinTestNode,quxBinNode,fooProjectNode,bazProjectNode);
}
