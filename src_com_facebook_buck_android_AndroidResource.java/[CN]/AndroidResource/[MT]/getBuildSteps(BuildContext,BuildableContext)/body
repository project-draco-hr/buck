{
  if (getRes() == null) {
    buildableContext.addMetadata(METADATA_KEY_FOR_ABI,getAbiKeyForDeps().getHash());
    return ImmutableList.of();
  }
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  steps.add(new MakeCleanDirectoryStep(pathToTextSymbolsDir));
  if (rDotJavaPackageArgument == null) {
    steps.add(new AbstractExecutionStep("extract_android_package"){
      @Override public int execute(      ExecutionContext context){
        Preconditions.checkNotNull(manifestFile,"manifestFile cannot be null when res is non-null and rDotJavaPackageArgument is " + "null. This should already be enforced by the constructor.");
        AndroidManifestReader androidManifestReader;
        try {
          androidManifestReader=DefaultAndroidManifestReader.forPath(getResolver().getPath(manifestFile),context.getProjectFilesystem());
        }
 catch (        IOException e) {
          context.logError(e,"Failed to create AndroidManifestReader for %s.",manifestFile);
          return 1;
        }
        String rDotJavaPackageFromAndroidManifest=androidManifestReader.getPackage();
        AndroidResource.this.rDotJavaPackage.set(rDotJavaPackageFromAndroidManifest);
        buildableContext.addMetadata(METADATA_KEY_FOR_R_DOT_JAVA_PACKAGE,rDotJavaPackageFromAndroidManifest);
        return 0;
      }
    }
);
  }
  ImmutableSet<Path> pathsToSymbolsOfDeps=FluentIterable.from(getNonEmptyResourceDeps()).transform(GET_RES_SYMBOLS_TXT).toSet();
  steps.add(new MiniAapt(getResolver().getPath(res),pathToTextSymbolsFile,pathsToSymbolsOfDeps));
  buildableContext.recordArtifact(pathToTextSymbolsFile);
  steps.add(new RecordFileSha1Step(pathToTextSymbolsFile,METADATA_KEY_FOR_ABI,buildableContext));
  return steps.build();
}
