{
  if (getRes() == null) {
    buildableContext.addMetadata(METADATA_KEY_FOR_ABI,Hashing.sha1().newHasher().hash().toString());
    return ImmutableList.of();
  }
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),Preconditions.checkNotNull(pathToTextSymbolsDir)));
  if (rDotJavaPackageArgument == null) {
    Preconditions.checkNotNull(manifestFile,"manifestFile cannot be null when res is non-null and rDotJavaPackageArgument is " + "null. This should already be enforced by the constructor.");
    steps.add(new ExtractFromAndroidManifestStep(getResolver().deprecatedGetPath(manifestFile),getProjectFilesystem(),buildableContext,METADATA_KEY_FOR_R_DOT_JAVA_PACKAGE,Preconditions.checkNotNull(pathToRDotJavaPackageFile)));
    buildableContext.recordArtifact(Preconditions.checkNotNull(pathToRDotJavaPackageFile));
  }
  ImmutableSet<Path> pathsToSymbolsOfDeps=FluentIterable.from(getNonEmptyResourceDeps()).transform(GET_RES_SYMBOLS_TXT).toSet();
  steps.add(new MiniAapt(getResolver(),getProjectFilesystem(),Preconditions.checkNotNull(res),Preconditions.checkNotNull(pathToTextSymbolsFile),pathsToSymbolsOfDeps));
  buildableContext.recordArtifact(Preconditions.checkNotNull(pathToTextSymbolsFile));
  steps.add(new RecordFileSha1Step(getProjectFilesystem(),Preconditions.checkNotNull(pathToTextSymbolsFile),METADATA_KEY_FOR_ABI,buildableContext));
  return steps.build();
}
