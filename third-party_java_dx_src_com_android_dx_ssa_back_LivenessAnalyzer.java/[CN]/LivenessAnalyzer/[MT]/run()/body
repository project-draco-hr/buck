{
  List<SsaInsn> useList=ssaMeth.getUseListForRegister(regV);
  for (  SsaInsn insn : useList) {
    nextFunction=NextFunction.DONE;
    if (insn instanceof PhiInsn) {
      PhiInsn phi=(PhiInsn)insn;
      for (      SsaBasicBlock pred : phi.predBlocksForReg(regV,ssaMeth)) {
        blockN=pred;
        nextFunction=NextFunction.LIVE_OUT_AT_BLOCK;
        handleTailRecursion();
      }
    }
 else {
      blockN=insn.getBlock();
      statementIndex=blockN.getInsns().indexOf(insn);
      if (statementIndex < 0) {
        throw new RuntimeException("insn not found in it's own block");
      }
      nextFunction=NextFunction.LIVE_IN_AT_STATEMENT;
      handleTailRecursion();
    }
  }
  int nextLiveOutBlock;
  while ((nextLiveOutBlock=liveOutBlocks.nextSetBit(0)) >= 0) {
    blockN=ssaMeth.getBlocks().get(nextLiveOutBlock);
    liveOutBlocks.clear(nextLiveOutBlock);
    nextFunction=NextFunction.LIVE_OUT_AT_BLOCK;
    handleTailRecursion();
  }
}
