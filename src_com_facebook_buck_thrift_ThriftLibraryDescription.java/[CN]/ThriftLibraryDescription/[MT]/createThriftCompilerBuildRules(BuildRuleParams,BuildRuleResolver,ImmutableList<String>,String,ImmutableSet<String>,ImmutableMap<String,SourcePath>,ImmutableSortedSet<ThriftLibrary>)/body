{
  SourcePath compiler=thriftBuckConfig.getCompiler();
  ImmutableMap.Builder<Path,SourcePath> includesBuilder=ImmutableMap.builder();
  ImmutableSortedSet.Builder<SymlinkTree> includeTreeRulesBuilder=ImmutableSortedSet.naturalOrder();
  ImmutableList.Builder<Path> includeRootsBuilder=ImmutableList.builder();
  for (  ThriftLibrary dep : deps) {
    includesBuilder.putAll(dep.getIncludes());
    includeTreeRulesBuilder.add(dep.getIncludeTreeRule());
    includeRootsBuilder.add(dep.getIncludeTreeRule().getRoot());
  }
  ImmutableMap<Path,SourcePath> includes=includesBuilder.build();
  ImmutableSortedSet<SymlinkTree> includeTreeRules=includeTreeRulesBuilder.build();
  ImmutableList<Path> includeRoots=includeRootsBuilder.build();
  ImmutableMap.Builder<String,ThriftCompiler> compileRules=ImmutableMap.builder();
  for (  ImmutableMap.Entry<String,SourcePath> ent : srcs.entrySet()) {
    String name=ent.getKey();
    SourcePath source=ent.getValue();
    BuildTarget target=createThriftCompilerBuildTarget(params.getBuildTarget(),name);
    Path outputDir=getThriftCompilerOutputDir(params.getBuildTarget(),name);
    compileRules.put(name,new ThriftCompiler(params.copyWithChanges(THRIFT_COMPILE_TYPE,target,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(new SourcePathResolver(resolver).filterBuildRuleInputs(ImmutableList.<SourcePath>builder().add(compiler).add(source).addAll(includes.values()).build())).addAll(includeTreeRules).build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),new SourcePathResolver(resolver),compiler,flags,outputDir,source,language,options,includeRoots,includes));
  }
  return compileRules.build();
}
