{
  BuildTarget target=params.getBuildTarget();
  Optional<Map.Entry<Flavor,ThriftLanguageSpecificEnhancer>> enhancerFlavor;
  try {
    enhancerFlavor=enhancers.getFlavorAndValue(ImmutableSet.copyOf(target.getFlavors()));
  }
 catch (  FlavorDomainException e) {
    throw new HumanReadableException("%s: %s",target,e.getMessage());
  }
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ImmutableMap<String,SourcePath> namedSources=pathResolver.getSourcePathNames(target,"srcs",args.srcs.keySet());
  ImmutableSortedSet<ThriftLibrary> thriftDeps=resolveThriftDeps(target,resolver.getAllRules(args.deps.or(ImmutableSortedSet.<BuildTarget>of())));
  if (!enhancerFlavor.isPresent()) {
    ImmutableMap.Builder<Path,SourcePath> includesBuilder=ImmutableMap.builder();
    for (    ImmutableMap.Entry<String,SourcePath> entry : namedSources.entrySet()) {
      includesBuilder.put(target.getBasePath().resolve(entry.getKey()),entry.getValue());
    }
    ImmutableMap<Path,SourcePath> includes=includesBuilder.build();
    Path includeRoot=getIncludeRoot(target);
    BuildTarget symlinkTreeTarget=createThriftIncludeSymlinkTreeTarget(target);
    SymlinkTree symlinkTree=new SymlinkTree(params.copyWithChanges(symlinkTreeTarget,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,includeRoot,includes);
    resolver.addToIndex(symlinkTree);
    return new ThriftLibrary(params,pathResolver,thriftDeps,symlinkTree,includes);
  }
  ThriftLanguageSpecificEnhancer enhancer=enhancerFlavor.get().getValue();
  String language=enhancer.getLanguage();
  ImmutableSet<String> options=enhancer.getOptions(target,args);
  ImmutableSet<BuildTarget> implicitDeps=enhancer.getImplicitDepsForTargetFromConstructorArg(target,args);
  ThriftLibrary thriftLibrary=(ThriftLibrary)resolver.getRule(BuildTarget.of(target.getUnflavoredBuildTarget()));
  ImmutableSortedSet<BuildRule> languageSpecificDeps=BuildRules.toBuildRulesFor(target,resolver,Iterables.concat(BuildTargets.propagateFlavorDomains(target,ImmutableList.<FlavorDomain<?>>of(enhancers),FluentIterable.from(thriftDeps).transform(HasBuildTarget.TO_TARGET)),implicitDeps));
  ImmutableMap<String,ThriftCompiler> compilerRules=createThriftCompilerBuildRules(params,resolver,enhancer.getCompilerType(),args.flags.or(ImmutableList.<String>of()),language,options,namedSources,ImmutableSortedSet.<ThriftLibrary>naturalOrder().add(thriftLibrary).addAll(getTransitiveThriftLibraryDeps(thriftDeps)).build());
  resolver.addAllToIndex(compilerRules.values());
  ImmutableMap.Builder<String,ThriftSource> thriftSourceBuilder=ImmutableMap.builder();
  for (  ImmutableMap.Entry<String,SourcePath> ent : namedSources.entrySet()) {
    thriftSourceBuilder.put(ent.getKey(),new ThriftSource(Preconditions.checkNotNull(compilerRules.get(ent.getKey())),Preconditions.checkNotNull(args.srcs.get(ent.getValue())),getThriftCompilerOutputDir(target,ent.getKey())));
  }
  ImmutableMap<String,ThriftSource> thriftSources=thriftSourceBuilder.build();
  return enhancer.createBuildRule(params,resolver,args,thriftSources,languageSpecificDeps);
}
