{
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  final Path output=BuildTargets.getScratchPath(getBuildTarget(),"__%s/deps.txt");
  steps.add(new MakeCleanDirectoryStep(output.getParent()));
  steps.add(new ShellStep(){
    @Override protected ImmutableList<String> getShellCommandInternal(    ExecutionContext context){
      ProjectFilesystem filesystem=context.getProjectFilesystem();
      return ImmutableList.of(getResolver().getPath(jsPackager).toString(),"list-dependencies",platform.toString(),filesystem.resolve(getResolver().getPath(entryPath)).toString(),"--output",filesystem.resolve(output).toString());
    }
    @Override public String getShortName(){
      return "react-native-deps";
    }
  }
);
  steps.add(new AbstractExecutionStep("hash_js_inputs"){
    @Override public int execute(    ExecutionContext context){
      ProjectFilesystem filesystem=context.getProjectFilesystem();
      ImmutableList<Path> paths;
      try {
        paths=FluentIterable.from(filesystem.readLines(output)).transform(MorePaths.TO_PATH).transform(filesystem.getRelativizer()).toSortedList(Ordering.natural());
      }
 catch (      IOException e) {
        context.logError(e,"Error reading output of the 'react-native-deps' step.");
        return 1;
      }
      FluentIterable<SourcePath> unlistedSrcs=FluentIterable.from(paths).transform(SourcePaths.toSourcePath(filesystem)).filter(Predicates.not(Predicates.in(srcs)));
      if (!unlistedSrcs.isEmpty()) {
        context.logError(new RuntimeException(),"Entry path '%s' transitively uses the following source files which were not " + "included in 'srcs':\n%s",entryPath,Joiner.on('\n').join(unlistedSrcs));
        return 1;
      }
      Hasher hasher=Hashing.sha1().newHasher();
      for (      Path path : paths) {
        try {
          hasher.putUnencodedChars(filesystem.computeSha1(path));
        }
 catch (        IOException e) {
          context.logError(e,"Error hashing input file: %s",path);
          return 1;
        }
      }
      buildableContext.addMetadata(METADATA_KEY_FOR_INPUTS_HASH,hasher.hash().toString());
      return 0;
    }
  }
);
  return steps.build();
}
