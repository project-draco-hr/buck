{
  Map<Path,List<Map<String,Object>>> parsedBuildFiles=Maps.newHashMap();
  ImmutableSetMultimap.Builder<Path,BuildTarget> sourceFileTargetsMultimap=ImmutableSetMultimap.builder();
  try (ProjectBuildFileParser parser=projectBuildFileParserFactory.createParser(marshaller,console,environment,buckEventBus)){
    for (    Path sourceFile : sourceFilePaths) {
      for (      Path buckFile : possibleBuckFilesForSourceFile(sourceFile)) {
        List<Map<String,Object>> rules;
        if (parsedBuildFiles.containsKey(buckFile)) {
          rules=parsedBuildFiles.get(buckFile);
        }
 else {
          rules=parser.getAll(buckFile);
          parsedBuildFiles.put(buckFile,rules);
        }
        for (        Map<String,Object> ruleMap : rules) {
          String type=(String)ruleMap.get(BuckPyFunction.TYPE_PROPERTY_NAME);
          if (javaRuleTypes.contains(type)) {
            @SuppressWarnings("unchecked") List<String> srcs=(List<String>)Preconditions.checkNotNull(ruleMap.get("srcs"));
            if (isSourceFilePathInSrcsList(sourceFile,srcs,buckFile.getParent())) {
              Path buckFileDir=buckFile.getParent();
              String baseName="//" + (buckFileDir != null ? MorePaths.pathWithUnixSeparators(buckFileDir) : "");
              String shortName=(String)Preconditions.checkNotNull(ruleMap.get("name"));
              sourceFileTargetsMultimap.put(sourceFile,BuildTarget.builder(projectFilesystem.getRootPath(),baseName,shortName).build());
            }
          }
        }
      }
    }
  }
 catch (  BuildFileParseException e) {
    buckEventBus.post(ThrowableConsoleEvent.create(e,"Error while searching for targets."));
  }
  return sourceFileTargetsMultimap.build();
}
