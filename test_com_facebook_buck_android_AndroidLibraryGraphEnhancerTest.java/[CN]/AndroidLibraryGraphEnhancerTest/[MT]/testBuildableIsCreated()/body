{
  BuildTarget buildTarget=BuildTargetFactory.newInstance("//java/com/example:library");
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  BuildRule resourceRule1=ruleResolver.addToIndex(AndroidResourceRuleBuilder.newBuilder().setResolver(pathResolver).setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res1")).setRDotJavaPackage("com.facebook").setRes(new FakeSourcePath("android_res/com/example/res1")).build());
  BuildRule resourceRule2=ruleResolver.addToIndex(AndroidResourceRuleBuilder.newBuilder().setResolver(pathResolver).setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res2")).setRDotJavaPackage("com.facebook").setRes(new FakeSourcePath("android_res/com/example/res2")).build());
  BuildRuleParams buildRuleParams=new FakeBuildRuleParamsBuilder(buildTarget).setDeclaredDeps(ImmutableSortedSet.of(resourceRule1,resourceRule2)).build();
  AndroidLibraryGraphEnhancer graphEnhancer=new AndroidLibraryGraphEnhancer(buildTarget,buildRuleParams,DEFAULT_JAVAC_OPTIONS,DependencyMode.FIRST_ORDER,Optional.<String>absent());
  Optional<DummyRDotJava> dummyRDotJava=graphEnhancer.getBuildableForAndroidResources(ruleResolver,false);
  assertTrue(dummyRDotJava.isPresent());
  assertEquals("DummyRDotJava must contain these exact AndroidResourceRules.",ImmutableList.of(resourceRule1,resourceRule2),dummyRDotJava.get().getAndroidResourceDeps());
  assertEquals("//java/com/example:library#dummy_r_dot_java",dummyRDotJava.get().getFullyQualifiedName());
  assertEquals("DummyRDotJava must depend on the two AndroidResourceRules.",ImmutableSet.of("//android_res/com/example:res1","//android_res/com/example:res2"),FluentIterable.from(dummyRDotJava.get().getDeps()).transform(Functions.toStringFunction()).toSet());
}
