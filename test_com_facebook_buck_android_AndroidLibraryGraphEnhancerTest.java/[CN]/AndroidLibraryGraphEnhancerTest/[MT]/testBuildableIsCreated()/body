{
  BuildTarget buildTarget=BuildTargetFactory.newInstance("//java/com/example:library");
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildRule resourceRule1=ruleResolver.addToIndex(AndroidResourceRuleBuilder.newBuilder().setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res1")).setRDotJavaPackage("com.facebook").setRes(Paths.get("android_res/com/example/res1")).build());
  BuildRule resourceRule2=ruleResolver.addToIndex(AndroidResourceRuleBuilder.newBuilder().setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res2")).setRDotJavaPackage("com.facebook").setRes(Paths.get("android_res/com/example/res2")).build());
  BuildRuleParams buildRuleParams=new FakeBuildRuleParams(buildTarget,ImmutableSortedSet.of(resourceRule1,resourceRule2));
  AndroidLibraryGraphEnhancer graphEnhancer=new AndroidLibraryGraphEnhancer(buildTarget,buildRuleParams,new FakeBuildRuleBuilderParams(),JavacOptions.DEFAULTS);
  Result result=graphEnhancer.createBuildableForAndroidResources(ruleResolver,false);
  assertTrue(result.getOptionalDummyRDotJava().isPresent());
  assertEquals("DummyRDotJava must contain these exact AndroidResourceRules.",ImmutableList.of(resourceRule1.getBuildable(),resourceRule2.getBuildable()),result.getOptionalDummyRDotJava().get().getAndroidResourceDeps());
  ImmutableSortedSet<BuildRule> newDeps=result.getBuildRuleParams().getDeps();
  assertEquals("BuildRuleParams in the result object must have DummyRDotJava as a dependency.",3,newDeps.size());
  BuildRule dummyRDotJavaRule=newDeps.last();
  assertTrue(dummyRDotJavaRule instanceof HasJavaAbi);
  assertEquals("//java/com/example:library#dummy_r_dot_java",dummyRDotJavaRule.getFullyQualifiedName());
  assertEquals("DummyRDotJava must depend on the two AndroidResourceRules.",ImmutableSet.of("//android_res/com/example:res1","//android_res/com/example:res2"),FluentIterable.from(dummyRDotJavaRule.getDeps()).transform(Functions.toStringFunction()).toSet());
}
