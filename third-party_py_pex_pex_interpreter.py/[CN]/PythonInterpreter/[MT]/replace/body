@classmethod
def replace(cls, requirement):
    self = cls.get()
    if self.identity.matches(requirement):
        return False
    for pi in cls.all():
        if pi.identity.matches(requirement):
            break
    else:
        raise cls.InterpreterNotFound('Could not find interpreter matching filter!')
    os.execve(pi.binary, ([pi.binary] + sys.argv), cls.sanitized_environment())
