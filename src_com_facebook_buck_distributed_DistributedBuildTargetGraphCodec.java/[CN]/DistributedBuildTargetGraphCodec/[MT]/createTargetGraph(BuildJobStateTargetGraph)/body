{
  ImmutableMap.Builder<Integer,Cell> cellBuilder=ImmutableMap.builder();
  for (  Map.Entry<Integer,String> remoteFileSystemRoot : remoteTargetGraph.getFileSystemRoots().entrySet()) {
    final Path remoteFilesystemRoot=Files.createTempDirectory(rootFilesystem.resolve(rootFilesystem.getBuckPaths().getBuckOut()),"remote_");
    ProjectFilesystem projectFilesystem=new ProjectFilesystem(remoteFilesystemRoot);
    Cell cell=rootCell.createCellForDistributedBuild(remoteFilesystemRoot,ImmutableMap.of(remoteFilesystemRoot,rootCell.getBuckConfig()),ImmutableMap.of(remoteFilesystemRoot,projectFilesystem));
    cellBuilder.put(remoteFileSystemRoot.getKey(),cell);
  }
  ImmutableMap<Integer,Cell> cells=cellBuilder.build();
  ImmutableMap.Builder<BuildTarget,TargetNode<?>> targetNodeIndexBuilder=ImmutableMap.builder();
  for (  BuildJobStateTargetNode remoteNode : remoteTargetGraph.getNodes()) {
    Cell cell=Preconditions.checkNotNull(cells.get(remoteNode.getFileSystemRootIndex()));
    ProjectFilesystem projectFilesystem=cell.getFilesystem();
    BuildTarget target=decodeBuildTarget(remoteNode.getBuildTarget(),cell);
    @SuppressWarnings("unchecked") Map<String,Object> rawNode=objectMapper.readValue(remoteNode.getRawNode(),Map.class);
    Path buildFilePath=projectFilesystem.resolve(target.getBasePath()).resolve(cell.getBuildFileName());
    TargetNode<?> targetNode=parserTargetNodeFactory.createTargetNode(cell,buildFilePath,target,rawNode);
    targetNodeIndexBuilder.put(targetNode.getBuildTarget(),targetNode);
  }
  ImmutableMap<BuildTarget,TargetNode<?>> targetNodeIndex=targetNodeIndexBuilder.build();
  MutableDirectedGraph<TargetNode<?>> mutableTargetGraph=new MutableDirectedGraph<>();
  for (  TargetNode<?> targetNode : targetNodeIndex.values()) {
    mutableTargetGraph.addNode(targetNode);
    for (    BuildTarget dep : targetNode.getDeps()) {
      mutableTargetGraph.addEdge(targetNode,Preconditions.checkNotNull(targetNodeIndex.get(dep)));
    }
  }
  return new TargetGraph(mutableTargetGraph,targetNodeIndex);
}
