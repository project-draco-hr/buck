{
  Set<T> argumentSet=args.get(0).getExpression().eval(env);
  int depthBound=args.size() > 1 ? args.get(1).getInteger() : Integer.MAX_VALUE;
  env.buildTransitiveClosure(expression,argumentSet,depthBound);
  Set<T> result=new LinkedHashSet<>();
  Collection<T> current=argumentSet;
  for (int i=0; i <= depthBound; i++) {
    Collection<T> next=env.getFwdDeps(Iterables.filter(current,Predicates.not(Predicates.in(result))));
    result.addAll(current);
    if (next.isEmpty()) {
      break;
    }
    current=next;
  }
  return result;
}
