{
  final SourcePath input;
  if (arg.gwtJar.isPresent()) {
    input=arg.gwtJar.get();
  }
 else   if (arg.sourceJar.isPresent()) {
    input=arg.sourceJar.get();
  }
 else {
    input=arg.binaryJar;
  }
class ExistingOuputs extends AbstractBuildRule {
    @AddToRuleKey private final SourcePath source;
    private final Path output;
    protected ExistingOuputs(    BuildRuleParams params,    SourcePathResolver resolver,    SourcePath source){
      super(params,resolver);
      this.source=source;
      BuildTarget target=params.getBuildTarget();
      this.output=BuildTargets.getGenPath(target,String.format("%s/%%s-gwt.jar",target.getShortName()));
    }
    @Override public ImmutableList<Step> getBuildSteps(    BuildContext context,    BuildableContext buildableContext){
      buildableContext.recordArtifact(getPathToOutput());
      ImmutableList.Builder<Step> steps=ImmutableList.builder();
      steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),output.getParent()));
      steps.add(CopyStep.forFile(getProjectFilesystem(),getResolver().getAbsolutePath(source),output));
      return steps.build();
    }
    @Override public Path getPathToOutput(){
      return output;
    }
  }
  return new ExistingOuputs(params,resolver,input);
}
