{
  BuildRule rule=resolver.requireRule(args.exe);
  if (!(rule instanceof BinaryBuildRule)) {
    throw new HumanReadableException("The 'exe' argument of %s, %s, needs to correspond to a " + "binary rule, such as sh_binary().",params.getBuildTarget(),args.exe.getFullyQualifiedName());
  }
  String expandedStartupArgs;
  try {
    expandedStartupArgs=MACRO_HANDLER.expand(params.getBuildTarget(),params.getCellRoots(),resolver,args.args.or(""));
  }
 catch (  MacroException e) {
    throw new HumanReadableException(e,"%s: %s",params.getBuildTarget(),e.getMessage());
  }
  ImmutableMap<String,String> expandedEnv=ImmutableMap.copyOf(FluentIterable.from(args.env.get().entrySet()).transform(new Function<Map.Entry<String,String>,Map.Entry<String,String>>(){
    @Override public Map.Entry<String,String> apply(    Map.Entry<String,String> input){
      try {
        return Maps.immutableEntry(input.getKey(),MACRO_HANDLER.expand(params.getBuildTarget(),params.getCellRoots(),resolver,input.getValue()));
      }
 catch (      MacroException e) {
        throw new HumanReadableException(e,"%s: %s",params.getBuildTarget(),e.getMessage());
      }
    }
  }
));
  return new DefaultWorkerTool(params,new SourcePathResolver(resolver),(BinaryBuildRule)rule,expandedStartupArgs,expandedEnv);
}
