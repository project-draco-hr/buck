{
  final ActionGraph actionGraph=build.getActionGraph();
  ImmutableList<BuildRule> rulesToBuild=ImmutableList.copyOf(FluentIterable.from(buildTargetsToBuild).transform(new Function<HasBuildTarget,BuildRule>(){
    @Override public BuildRule apply(    HasBuildTarget hasBuildTarget){
      return Preconditions.checkNotNull(actionGraph.findBuildRuleByTarget(hasBuildTarget.getBuildTarget()));
    }
  }
).toSet());
  int exitCode;
  boolean isKeepGoing=options.isKeepGoing();
  try {
    ListenableFuture<List<BuildRuleSuccess>> buildFuture=build.executeBuild(rulesToBuild,isKeepGoing);
    List<BuildRuleSuccess> results;
    try {
      results=buildFuture.get();
    }
 catch (    InterruptedException e) {
      try {
        buildFuture.cancel(true);
      }
 catch (      CancellationException ignored) {
      }
      Thread.currentThread().interrupt();
      throw e;
    }
    LinkedHashMap<BuildRule,Optional<BuildRuleSuccess>> ruleToResult=Maps.newLinkedHashMap();
    Preconditions.checkState(rulesToBuild.size() == results.size());
    for (int i=0, len=rulesToBuild.size(); i < len; i++) {
      BuildRule rule=rulesToBuild.get(i);
      BuildRuleSuccess success=results.get(i);
      ruleToResult.put(rule,Optional.fromNullable(success));
    }
    if (isKeepGoing) {
      String buildReportForConsole=generateBuildReportForConsole(ruleToResult,console.getAnsi());
      console.getStdErr().print(buildReportForConsole);
      exitCode=Iterables.any(results,Predicates.isNull()) ? 1 : 0;
      if (exitCode != 0) {
        console.printBuildFailure("Not all rules succeeded.");
      }
    }
 else {
      exitCode=0;
    }
    Optional<Path> pathToBuildReport=options.getPathToBuildReport();
    if (pathToBuildReport.isPresent()) {
      String jsonBuildReport=generateJsonBuildReport(ruleToResult);
      try {
        Files.write(jsonBuildReport,pathToBuildReport.get().toFile(),Charsets.UTF_8);
      }
 catch (      IOException e) {
        e.printStackTrace(console.getStdErr());
        exitCode=1;
      }
    }
  }
 catch (  IOException e) {
    console.printBuildFailureWithoutStacktrace(e);
    exitCode=1;
  }
catch (  StepFailedException e) {
    console.printBuildFailureWithoutStacktrace(e);
    exitCode=e.getExitCode();
  }
catch (  ExecutionException e) {
    Throwable cause=e.getCause();
    if (cause instanceof HumanReadableException) {
      throw ((HumanReadableException)cause);
    }
 else     if (cause instanceof ExceptionWithHumanReadableMessage) {
      throw new HumanReadableException((ExceptionWithHumanReadableMessage)cause);
    }
 else {
      if (cause instanceof RuntimeException) {
        console.printBuildFailureWithStacktrace(e);
      }
 else {
        console.printBuildFailureWithoutStacktrace(e);
      }
      exitCode=1;
    }
  }
  return exitCode;
}
