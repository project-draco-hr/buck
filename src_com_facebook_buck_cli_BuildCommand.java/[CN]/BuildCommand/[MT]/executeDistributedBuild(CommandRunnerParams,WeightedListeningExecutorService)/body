{
  ProjectFilesystem filesystem=params.getCell().getFilesystem();
  if (distributedBuildStateFile != null) {
    Path stateDumpPath=Paths.get(distributedBuildStateFile);
    TTransport transport;
    boolean loading=Files.exists(stateDumpPath);
    if (loading) {
      transport=new TIOStreamTransport(filesystem.newFileInputStream(stateDumpPath));
    }
 else {
      transport=new TIOStreamTransport(filesystem.newFileOutputStream(stateDumpPath));
    }
    transport=new TZlibTransport(transport);
    TProtocol protocol=new TTupleProtocol(transport);
    try {
      if (loading) {
        DistributedBuildState state=DistributedBuildState.load(protocol);
        BuckConfig buckConfig=state.createBuckConfig(filesystem);
        params.getBuckEventBus().post(ConsoleEvent.info("Done loading state. Aliases: %s",buckConfig.getAliases()));
      }
 else {
        ActionGraphAndResolver actionGraphAndResolver=createActionGraphAndResolver(params,executorService);
        if (actionGraphAndResolver == null) {
          return 1;
        }
        BuckConfig buckConfig=params.getBuckConfig();
        BuildJobState jobState=DistributedBuildState.dump(buckConfig,new DistributedBuildFileHashes(actionGraphAndResolver.getActionGraph(),new SourcePathResolver(actionGraphAndResolver.getResolver()),params.getFileHashCache(),executorService,params.getBuckConfig().getKeySeed()));
        jobState.write(protocol);
        transport.flush();
      }
    }
 catch (    TException e) {
      throw new RuntimeException(e);
    }
 finally {
      transport.close();
    }
  }
  DistBuildConfig config=new DistBuildConfig(params.getBuckConfig());
  ClientSideSlb slb=config.getFrontendConfig().createHttpClientSideSlb(params.getClock(),params.getBuckEventBus());
  OkHttpClient client=config.createOkHttpClient();
  try (HttpService httpService=new LoadBalancedService(slb,client,params.getBuckEventBus());ThriftService<FrontendRequest,FrontendResponse> service=new ThriftOverHttpService<>(ThriftOverHttpServiceConfig.of(httpService))){
    DistributedBuild build=new DistributedBuild(new DistBuildService(service,params.getBuckEventBus()));
    return build.executeAndPrintFailuresToEventBus();
  }
 }
