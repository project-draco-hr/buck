{
  ProjectFilesystem filesystem=params.getCell().getFilesystem();
  if (distributedBuildStateFile != null) {
    Path stateDumpPath=Paths.get(distributedBuildStateFile);
    TTransport transport;
    boolean loading=Files.exists(stateDumpPath);
    if (loading) {
      transport=new TIOStreamTransport(filesystem.newFileInputStream(stateDumpPath));
    }
 else {
      transport=new TIOStreamTransport(filesystem.newFileOutputStream(stateDumpPath));
    }
    transport=new TZlibTransport(transport);
    TProtocol protocol=new TTupleProtocol(transport);
    try {
      DistributedBuildTypeCoercerFactory typeCoercerFactory=new DistributedBuildTypeCoercerFactory(params.getObjectMapper());
      ParserTargetNodeFactory parserTargetNodeFactory=DefaultParserTargetNodeFactory.createForDistributedBuild(params.getBuckEventBus(),new ConstructorArgMarshaller(typeCoercerFactory),typeCoercerFactory);
      DistributedBuildTargetGraphCodec targetGraphCodec=new DistributedBuildTargetGraphCodec(params.getObjectMapper(),parserTargetNodeFactory,new Function<TargetNode<?>,Map<String,Object>>(){
        @Nullable @Override public Map<String,Object> apply(        TargetNode<?> input){
          try {
            return params.getParser().getRawTargetNode(params.getBuckEventBus(),params.getCell().getCell(input.getBuildTarget()),false,executorService,input);
          }
 catch (          BuildFileParseException|InterruptedException e) {
            throw new RuntimeException(e);
          }
        }
      }
);
      if (loading) {
        DistributedBuildState state=DistributedBuildState.load(protocol,params.getCell());
        final TargetGraph targetGraph=state.createTargetGraph(targetGraphCodec);
        ActionGraphAndResolver actionGraphAndResolver=Preconditions.checkNotNull(params.getActionGraphCache().getActionGraph(params.getBuckEventBus(),false,targetGraph,params.getBuckConfig().getKeySeed()));
        BuckConfig rootCellBuckConfig=state.getRootCell().getBuckConfig();
        DistributedCachingBuildEngineDelegate cachingBuildEngineDelegate=new DistributedCachingBuildEngineDelegate(new SourcePathResolver(actionGraphAndResolver.getResolver()),state);
        ImmutableList<TargetNodeSpec> targetNodeSpecs=parseArgumentsAsTargetNodeSpecs(rootCellBuckConfig,getArguments());
        FluentIterable<BuildTarget> targetsToBuild=FluentIterable.from(targetNodeSpecs).transformAndConcat(new Function<TargetNodeSpec,Iterable<BuildTarget>>(){
          @Override public Iterable<BuildTarget> apply(          TargetNodeSpec input){
            return input.filter(targetGraph.getNodes()).keySet();
          }
        }
);
        return executeBuild(params,actionGraphAndResolver,executorService,params.getArtifactCache(),cachingBuildEngineDelegate,rootCellBuckConfig,targetsToBuild);
      }
 else {
        TargetGraphAndBuildTargets targetGraphAndBuildTargets=createTargetGraph(params,executorService);
        ActionGraphAndResolver actionGraphAndResolver=createActionGraphAndResolver(params,targetGraphAndBuildTargets);
        DistributedBuildCellIndexer cellIndexer=new DistributedBuildCellIndexer(params.getCell());
        DistributedBuildFileHashes distributedBuildFileHashes=new DistributedBuildFileHashes(actionGraphAndResolver.getActionGraph(),new SourcePathResolver(actionGraphAndResolver.getResolver()),params.getFileHashCache(),cellIndexer,executorService,params.getBuckConfig().getKeySeed());
        BuildJobState jobState=DistributedBuildState.dump(cellIndexer,distributedBuildFileHashes,targetGraphCodec,targetGraphAndBuildTargets.getTargetGraph());
        jobState.write(protocol);
        transport.flush();
        return 0;
      }
    }
 catch (    TException e) {
      throw new RuntimeException(e);
    }
 finally {
      transport.close();
    }
  }
  DistBuildConfig config=new DistBuildConfig(params.getBuckConfig());
  ClientSideSlb slb=config.getFrontendConfig().createHttpClientSideSlb(params.getClock(),params.getBuckEventBus());
  OkHttpClient client=config.createOkHttpClient();
  try (HttpService httpService=new LoadBalancedService(slb,client,params.getBuckEventBus());ThriftService<FrontendRequest,FrontendResponse> service=new ThriftOverHttpService<>(ThriftOverHttpServiceConfig.of(httpService))){
    DistributedBuild build=new DistributedBuild(new DistBuildService(service,params.getBuckEventBus()));
    return build.executeAndPrintFailuresToEventBus();
  }
 }
