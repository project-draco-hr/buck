{
  final ActionGraph actionGraph=build.getActionGraph();
  Set<BuildRule> rulesToBuild=FluentIterable.from(buildTargetsToBuild).transform(new Function<HasBuildTarget,BuildRule>(){
    @Override public BuildRule apply(    HasBuildTarget hasBuildTarget){
      return actionGraph.findBuildRuleByTarget(hasBuildTarget.getBuildTarget());
    }
  }
).toSet();
  int exitCode;
  try {
    ListenableFuture<List<BuildRuleSuccess>> buildFuture=build.executeBuild(rulesToBuild);
    try {
      buildFuture.get();
    }
 catch (    InterruptedException e) {
      buildFuture.cancel(true);
      Thread.currentThread().interrupt();
      return 1;
    }
    exitCode=0;
  }
 catch (  IOException e) {
    console.printBuildFailureWithoutStacktrace(e);
    exitCode=1;
  }
catch (  StepFailedException e) {
    console.printBuildFailureWithoutStacktrace(e);
    exitCode=e.getExitCode();
  }
catch (  ExecutionException e) {
    Throwable cause=e.getCause();
    if (cause instanceof HumanReadableException) {
      throw ((HumanReadableException)cause);
    }
 else     if (cause instanceof ExceptionWithHumanReadableMessage) {
      throw new HumanReadableException((ExceptionWithHumanReadableMessage)cause);
    }
 else {
      if (cause instanceof RuntimeException) {
        console.printBuildFailureWithStacktrace(e);
      }
 else {
        console.printBuildFailureWithoutStacktrace(e);
      }
      exitCode=1;
    }
  }
  return exitCode;
}
