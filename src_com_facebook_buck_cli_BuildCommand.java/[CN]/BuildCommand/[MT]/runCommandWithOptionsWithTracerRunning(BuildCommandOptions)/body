{
  Verbosity verbosity=options.getVerbosity();
  Logging.setLoggingLevelForVerbosity(verbosity);
  Parser parser=createParser();
  try {
    buildTargets=getBuildTargets(parser,options.getArgumentsFormattedAsBuildTargets());
  }
 catch (  NoSuchBuildTargetException e) {
    console.printFailureWithoutStacktrace(e);
    return 1;
  }
  if (buildTargets.isEmpty()) {
    console.printFailure("Must specify at least one build target.");
    return 1;
  }
  DependencyGraph dependencyGraph;
  try {
    dependencyGraph=parser.parseBuildFilesForTargets(buildTargets,options.getDefaultIncludes());
  }
 catch (  NoSuchBuildTargetException e) {
    console.printFailureWithoutStacktrace(e);
    return 1;
  }
  this.build=options.createBuild(dependencyGraph,getProjectFilesystem().getProjectRoot(),console);
  stdErr.printf("BUILDING %s\n",Joiner.on(' ').join(buildTargets));
  int exitCode=executeBuildAndPrintAnyFailuresToConsole(build,console);
  if (exitCode != 0) {
    return exitCode;
  }
  Tracer.addComment("Build targets built");
  ansi.printlnHighlightedSuccessText(stdErr,"BUILD SUCCESSFUL");
  return 0;
}
