{
  ArtifactCache artifactCache=getArtifactCache(params);
  if (getArguments().isEmpty()) {
    params.getConsole().printBuildFailure("Must specify at least one build target.");
    ImmutableSet<String> aliases=params.getBuckConfig().getAliases();
    if (!aliases.isEmpty()) {
      params.getConsole().getStdErr().println(String.format("Try building one of the following targets:\n%s",Joiner.on(' ').join(Iterators.limit(aliases.iterator(),10))));
    }
    return 1;
  }
  BuildEvent.Started started=BuildEvent.started(getArguments());
  if (params.getParser().getParseStartTime().isPresent()) {
    params.getBuckEventBus().post(started,params.getParser().getParseStartTime().get());
  }
 else {
    params.getBuckEventBus().post(started);
  }
  ActionGraph actionGraph;
  BuildRuleResolver resolver;
  try {
    Pair<ImmutableSet<BuildTarget>,TargetGraph> result=params.getParser().buildTargetGraphForTargetNodeSpecs(parseArgumentsAsTargetNodeSpecs(params.getBuckConfig(),params.getRepository().getFilesystem().getIgnorePaths(),getArguments()),new ParserConfig(params.getBuckConfig()),params.getBuckEventBus(),params.getConsole(),params.getEnvironment(),getEnableProfiling());
    buildTargets=result.getFirst();
    TargetGraphToActionGraph targetGraphToActionGraph=new TargetGraphToActionGraph(params.getBuckEventBus(),new BuildTargetNodeToBuildRuleTransformer(),params.getFileHashCache());
    actionGraph=targetGraphToActionGraph.apply(result.getSecond());
    resolver=targetGraphToActionGraph.getRuleResolver();
  }
 catch (  BuildTargetException|BuildFileParseException e) {
    params.getConsole().printBuildFailureWithoutStacktrace(e);
    return 1;
  }
  if (justBuildTarget != null) {
    BuildTarget explicitTarget=BuildTargetParser.INSTANCE.parse(justBuildTarget,BuildTargetPatternParser.fullyQualified());
    Iterable<BuildRule> actionGraphRules=Preconditions.checkNotNull(actionGraph.getNodes());
    ImmutableSet<BuildTarget> actionGraphTargets=ImmutableSet.copyOf(Iterables.transform(actionGraphRules,HasBuildTarget.TO_TARGET));
    if (!actionGraphTargets.contains(explicitTarget)) {
      params.getConsole().printBuildFailure("Targets specified via `--just-build` must be a subset of action graph.");
      return 1;
    }
    buildTargets=ImmutableSet.of(explicitTarget);
  }
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  try (CommandThreadManager pool=new CommandThreadManager("Build",getConcurrencyLimit(params.getBuckConfig()));Build build=createBuild(params.getBuckConfig(),actionGraph,params.getAndroidPlatformTargetSupplier(),new CachingBuildEngine(pool.getExecutor(),params.getFileHashCache(),getBuildEngineMode().or(params.getBuckConfig().getBuildEngineMode()),params.getBuckConfig().getBuildDepFiles(),new InputBasedRuleKeyBuilderFactory(params.getFileHashCache(),pathResolver),new AbiRuleKeyBuilderFactory(params.getFileHashCache(),pathResolver),new DependencyFileRuleKeyBuilderFactory(params.getFileHashCache(),pathResolver)),artifactCache,params.getConsole(),params.getBuckEventBus(),Optional.<TargetDevice>absent(),params.getPlatform(),params.getEnvironment(),params.getObjectMapper(),params.getClock(),Optional.<AdbOptions>absent(),Optional.<TargetDeviceOptions>absent())){
    lastBuild=build;
    int exitCode=build.executeAndPrintFailuresToEventBus(buildTargets,isKeepGoing(),params.getBuckEventBus(),params.getConsole().getAnsi(),getPathToBuildReport(params.getBuckConfig()));
    params.getBuckEventBus().post(BuildEvent.finished(started,exitCode));
    return exitCode;
  }
 }
