{
  ProjectFilesystem filesystem=params.getCell().getFilesystem();
  DistributedBuildTypeCoercerFactory typeCoercerFactory=new DistributedBuildTypeCoercerFactory(params.getObjectMapper());
  ParserTargetNodeFactory<TargetNode<?>> parserTargetNodeFactory=DefaultParserTargetNodeFactory.createForDistributedBuild(new ConstructorArgMarshaller(typeCoercerFactory),new TargetNodeFactory(typeCoercerFactory));
  DistributedBuildTargetGraphCodec targetGraphCodec=new DistributedBuildTargetGraphCodec(params.getObjectMapper(),parserTargetNodeFactory,new Function<TargetNode<?>,Map<String,Object>>(){
    @Nullable @Override public Map<String,Object> apply(    TargetNode<?> input){
      try {
        return params.getParser().getRawTargetNode(params.getBuckEventBus(),params.getCell().getCell(input.getBuildTarget()),false,executorService,input);
      }
 catch (      BuildFileParseException|InterruptedException e) {
        throw new RuntimeException(e);
      }
    }
  }
);
  BuildJobState jobState=computeDistributedBuildJobState(targetGraphCodec,params,targetGraphAndBuildTargets,actionGraphAndResolver,executorService);
  if (distributedBuildStateFile != null) {
    Path stateDumpPath=Paths.get(distributedBuildStateFile);
    BuildJobStateSerializer.serialize(jobState,filesystem.newFileOutputStream(stateDumpPath));
    return 0;
  }
 else {
    try (DistBuildService service=DistBuildFactory.newDistBuildService(params)){
      DistributedBuild build=new DistributedBuild(jobState,service,1000);
      int exitCode=build.executeAndPrintFailuresToEventBus(executorService,params.getBuckEventBus());
      if (exitCode == 0) {
        exitCode=executeLocalBuild(params,actionGraphAndResolver,executorService);
      }
      return exitCode;
    }
   }
}
