{
  Pair<MutableDirectedGraph<BuildRule>,Map<BuildTarget,Linker.LinkableDepType>> result=getTransitiveNativeLinkableInput(cxxPlatform,inputs,depType,traverse);
  ImmutableList<BuildRule> sorted=TopologicalSort.sort(result.getFirst(),Predicates.<BuildRule>alwaysTrue());
  List<NativeLinkableInput> nativeLinkableInputs=Lists.newArrayList();
  for (  BuildRule buildRule : reverse ? sorted.reverse() : sorted) {
    if (buildRule instanceof NativeLinkable) {
      Linker.LinkableDepType type=result.getSecond().get(buildRule.getBuildTarget());
      if (type != null) {
        NativeLinkable linkable=(NativeLinkable)buildRule;
        nativeLinkableInputs.add(linkable.getNativeLinkableInput(targetGraph,cxxPlatform,type));
      }
    }
  }
  return NativeLinkableInput.concat(nativeLinkableInputs);
}
