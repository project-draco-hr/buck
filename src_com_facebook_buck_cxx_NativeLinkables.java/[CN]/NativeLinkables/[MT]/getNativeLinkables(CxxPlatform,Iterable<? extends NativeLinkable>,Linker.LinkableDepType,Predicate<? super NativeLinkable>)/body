{
  final Map<BuildTarget,NativeLinkable> nativeLinkables=Maps.newHashMap();
  for (  NativeLinkable nativeLinkable : inputs) {
    nativeLinkables.put(nativeLinkable.getBuildTarget(),nativeLinkable);
  }
  final MutableDirectedGraph<BuildTarget> graph=new MutableDirectedGraph<>();
  AbstractBreadthFirstTraversal<BuildTarget> visitor=new AbstractBreadthFirstTraversal<BuildTarget>(nativeLinkables.keySet()){
    @Override public ImmutableSet<BuildTarget> visit(    BuildTarget target){
      NativeLinkable nativeLinkable=Preconditions.checkNotNull(nativeLinkables.get(target));
      graph.addNode(target);
      Iterable<? extends NativeLinkable> nativeLinkableDeps=nativeLinkable.getNativeLinkableExportedDeps(cxxPlatform);
      boolean shouldTraverse=true;
switch (nativeLinkable.getPreferredLinkage(cxxPlatform)) {
case ANY:
        shouldTraverse=linkStyle != Linker.LinkableDepType.SHARED;
      break;
case SHARED:
    shouldTraverse=false;
  break;
case STATIC:
shouldTraverse=true;
break;
}
if (shouldTraverse) {
nativeLinkableDeps=Iterables.concat(nativeLinkableDeps,nativeLinkable.getNativeLinkableDeps(cxxPlatform));
}
ImmutableSet.Builder<BuildTarget> deps=ImmutableSet.builder();
for (NativeLinkable dep : nativeLinkableDeps) {
if (traverse.apply(dep)) {
BuildTarget depTarget=dep.getBuildTarget();
graph.addEdge(target,depTarget);
deps.add(depTarget);
nativeLinkables.put(depTarget,dep);
}
}
return deps.build();
}
}
;
visitor.start();
Iterable<BuildTarget> ordered=TopologicalSort.sort(graph,Predicates.<BuildTarget>alwaysTrue()).reverse();
ImmutableMap.Builder<BuildTarget,NativeLinkable> result=ImmutableMap.builder();
for (BuildTarget target : ordered) {
result.put(target,nativeLinkables.get(target));
}
return result.build();
}
