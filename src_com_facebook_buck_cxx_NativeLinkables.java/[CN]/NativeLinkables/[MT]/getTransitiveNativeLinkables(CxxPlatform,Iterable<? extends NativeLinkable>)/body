{
  final Map<BuildTarget,NativeLinkable> nativeLinkables=Maps.newLinkedHashMap();
  for (  NativeLinkable nativeLinkable : inputs) {
    nativeLinkables.put(nativeLinkable.getBuildTarget(),nativeLinkable);
  }
  final MutableDirectedGraph<BuildTarget> graph=new MutableDirectedGraph<>();
  AbstractBreadthFirstTraversal<BuildTarget> visitor=new AbstractBreadthFirstTraversal<BuildTarget>(nativeLinkables.keySet()){
    @Override public ImmutableSet<BuildTarget> visit(    BuildTarget target){
      NativeLinkable nativeLinkable=Preconditions.checkNotNull(nativeLinkables.get(target));
      graph.addNode(target);
      ImmutableSet.Builder<BuildTarget> deps=ImmutableSet.builder();
      for (      NativeLinkable dep : Iterables.concat(nativeLinkable.getNativeLinkableDeps(cxxPlatform),nativeLinkable.getNativeLinkableExportedDeps(cxxPlatform))) {
        BuildTarget depTarget=dep.getBuildTarget();
        graph.addEdge(target,depTarget);
        deps.add(depTarget);
        nativeLinkables.put(depTarget,dep);
      }
      return deps.build();
    }
  }
;
  visitor.start();
  return ImmutableMap.copyOf(nativeLinkables);
}
