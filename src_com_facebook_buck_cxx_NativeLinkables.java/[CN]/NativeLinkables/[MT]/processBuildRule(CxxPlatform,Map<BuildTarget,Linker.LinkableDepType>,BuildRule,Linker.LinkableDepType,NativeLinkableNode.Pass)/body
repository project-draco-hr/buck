{
  if (!(rule instanceof NativeLinkable)) {
    return NativeLinkableNode.of(rule,pass);
  }
  NativeLinkable linkable=(NativeLinkable)rule;
  NativeLinkable.Linkage depLinkage=linkable.getPreferredLinkage(cxxPlatform);
  Linker.LinkableDepType depType;
switch (depLinkage) {
case STATIC:
{
      depType=type == Linker.LinkableDepType.STATIC ? Linker.LinkableDepType.STATIC : Linker.LinkableDepType.STATIC_PIC;
      break;
    }
case ANY:
{
    depType=type;
    break;
  }
default :
{
  throw new IllegalStateException();
}
}
if (pass == AbstractNativeLinkableNode.Pass.ANY || depType == Linker.LinkableDepType.SHARED) {
Linker.LinkableDepType oldType=wanted.put(rule.getBuildTarget(),depType);
Preconditions.checkState(oldType == null || oldType == depType);
}
if (depType == Linker.LinkableDepType.SHARED) {
pass=AbstractNativeLinkableNode.Pass.SHARED_ONLY;
}
return NativeLinkableNode.of(rule,pass);
}
