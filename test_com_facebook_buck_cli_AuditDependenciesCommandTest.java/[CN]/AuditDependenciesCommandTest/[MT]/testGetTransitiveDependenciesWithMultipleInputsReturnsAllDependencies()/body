{
  BuildTarget thirdJavaTarget=BuildTargetFactory.newInstance("//:test-java-library-three");
  TargetNode<?> thirdJavaNode=JavaLibraryBuilder.createBuilder(thirdJavaTarget).addSrc(Paths.get("src/com/facebook/TestJavaLibraryThree.java")).build();
  BuildTarget secondJavaTarget=BuildTargetFactory.newInstance("//:test-java-library-two");
  TargetNode<?> secondJavaNode=JavaLibraryBuilder.createBuilder(secondJavaTarget).addSrc(Paths.get("src/com/facebook/TestJavaLibraryTwo.java")).addDep(thirdJavaTarget).build();
  BuildTarget javaTarget=BuildTargetFactory.newInstance("//:test-java-library");
  TargetNode<?> javaNode=JavaLibraryBuilder.createBuilder(javaTarget).addSrc(Paths.get("src/com/facebook/TestJavaLibrary.java")).addDep(secondJavaTarget).build();
  BuildTarget secondLibraryTarget=BuildTargetFactory.newInstance("//:test-android-library-two");
  TargetNode<?> secondLibraryNode=JavaLibraryBuilder.createBuilder(secondLibraryTarget).addSrc(Paths.get("src/com/facebook/TestAndroidLibraryTwo.java")).build();
  BuildTarget libraryTarget=BuildTargetFactory.newInstance("//:test-android-library");
  TargetNode<?> libraryNode=JavaLibraryBuilder.createBuilder(libraryTarget).addSrc(Paths.get("src/com/facebook/TestAndroidLibrary.java")).addDep(secondLibraryTarget).build();
  ImmutableSet<TargetNode<?>> nodes=ImmutableSet.of(javaNode,secondJavaNode,thirdJavaNode,libraryNode,secondLibraryNode);
  TargetGraph targetGraph=TargetGraphFactory.newInstance(nodes);
  ImmutableSet<BuildTarget> testInput=ImmutableSet.of(libraryTarget,javaTarget);
  ImmutableSet<BuildTarget> transitiveDependencies=auditDependenciesCommand.getTransitiveDependencies(testInput,targetGraph);
  ImmutableSet<BuildTarget> expectedOutput=ImmutableSet.of(secondLibraryTarget,secondJavaTarget,thirdJavaTarget);
  assertEquals(expectedOutput,transitiveDependencies);
}
