{
  Optional<CxxPlatform> cxxPlatform=cxxPlatforms.getValue(params.getBuildTarget());
  Preconditions.checkState(cxxPlatform.isPresent());
  return new MacroHandler(ImmutableMap.<String,MacroExpander>builder().put("exe",new ExecutableMacroExpander()).put("location",new LocationMacroExpander()).put("cc",new ToolExpander(cxxPlatform.get().getCc().resolve(resolver))).put("cxx",new ToolExpander(cxxPlatform.get().getCxx().resolve(resolver))).put("cflags",new StringExpander(shquoteJoin(cxxPlatform.get().getCflags()))).put("cxxflags",new StringExpander(shquoteJoin(cxxPlatform.get().getCxxflags()))).put("cppflags",new CxxPreprocessorFlagsExpander(cxxPlatform.get(),CxxSource.Type.C)).put("cxxppflags",new CxxPreprocessorFlagsExpander(cxxPlatform.get(),CxxSource.Type.CXX)).put("ld",new ToolExpander(cxxPlatform.get().getLd().resolve(resolver))).put("ldflags-shared",new CxxLinkerFlagsExpander(params,cxxPlatform.get(),Linker.LinkableDepType.SHARED,args.out)).put("ldflags-static",new CxxLinkerFlagsExpander(params,cxxPlatform.get(),Linker.LinkableDepType.STATIC,args.out)).put("ldflags-static-pic",new CxxLinkerFlagsExpander(params,cxxPlatform.get(),Linker.LinkableDepType.STATIC_PIC,args.out)).put("platform-name",new StringExpander(cxxPlatform.get().getFlavor().toString())).build());
}
