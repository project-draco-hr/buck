{
  this.typeCoercerFactory=typeCoercerFactory;
  this.marshaller=marshaller;
  this.allRawNodes=new OptimisticLoadingCache<>(parsingThreads);
  this.targetsCornucopia=HashMultimap.create();
  this.allTargetNodes=new OptimisticLoadingCache<>(parsingThreads);
  this.hasCachedTargetNodeForBuildTargetPredicate=new Predicate<BuildTarget>(){
    @Override public boolean apply(    BuildTarget buildTarget){
      return hasCachedTargetNodeForBuildTarget(buildTarget);
    }
  }
;
  this.buildFileTrees=CacheBuilder.newBuilder().build(new CacheLoader<Cell,BuildFileTree>(){
    @Override public BuildFileTree load(    Cell cell) throws Exception {
      return new FilesystemBackedBuildFileTree(cell.getFilesystem(),cell.getBuildFileName());
    }
  }
);
  this.buildFileDependents=HashMultimap.create();
  this.cachedEnvironment=ImmutableMap.of();
  this.cachedIncludes=new ConcurrentHashMap<>();
  this.knownCells=Collections.synchronizedSet(new HashSet<Cell>());
  this.cachedStateLock=new AutoCloseableReadWriteUpdateLock();
}
