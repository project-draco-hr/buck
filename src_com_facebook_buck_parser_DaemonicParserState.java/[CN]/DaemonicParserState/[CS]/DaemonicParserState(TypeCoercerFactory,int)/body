{
  this.parsingThreads=parsingThreads;
  this.typeCoercerFactory=typeCoercerFactory;
  this.cacheInvalidatedByEnvironmentVariableChangeCounter=new TagSetCounter(COUNTER_CATEGORY,INVALIDATED_BY_ENV_VARS_COUNTER_NAME,ImmutableMap.<String,String>of());
  this.cacheInvalidatedByDefaultIncludesChangeCounter=new IntegerCounter(COUNTER_CATEGORY,INVALIDATED_BY_DEFAULT_INCLUDES_COUNTER_NAME,ImmutableMap.<String,String>of());
  this.cacheInvalidatedByWatchOverflowCounter=new IntegerCounter(COUNTER_CATEGORY,INVALIDATED_BY_WATCH_OVERFLOW_COUNTER_NAME,ImmutableMap.<String,String>of());
  this.buildFilesInvalidatedByFileAddOrRemoveCounter=new IntegerCounter(COUNTER_CATEGORY,BUILD_FILES_INVALIDATED_BY_FILE_ADD_OR_REMOVE_COUNTER_NAME,ImmutableMap.<String,String>of());
  this.filesChangedCounter=new IntegerCounter(COUNTER_CATEGORY,FILES_CHANGED_COUNTER_NAME,ImmutableMap.<String,String>of());
  this.rulesInvalidatedByWatchEventsCounter=new IntegerCounter(COUNTER_CATEGORY,RULES_INVALIDATED_BY_WATCH_EVENTS_COUNTER_NAME,ImmutableMap.<String,String>of());
  this.buildFileTrees=CacheBuilder.newBuilder().build(new CacheLoader<Cell,BuildFileTree>(){
    @Override public BuildFileTree load(    Cell cell) throws Exception {
      return new FilesystemBackedBuildFileTree(cell.getFilesystem(),cell.getBuildFileName());
    }
  }
);
  this.cachedEnvironment=ImmutableMap.of();
  this.cachedIncludes=new ConcurrentHashMap<>();
  this.cellPathToDaemonicState=new ConcurrentHashMap<Path,DaemonicCellState>(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR,parsingThreads);
  this.cachedStateLock=new AutoCloseableReadWriteUpdateLock();
  this.cellStateLock=new AutoCloseableReadWriteUpdateLock();
}
