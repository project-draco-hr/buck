{
  ImmutableMap<String,String> cellEnv=cell.getBuckConfig().getEnvironment();
  Iterable<String> defaultIncludes=new ParserConfig(cell.getBuckConfig()).getDefaultIncludes();
  boolean invalidateCaches=false;
  try (AutoCloseableLock updateLock=cachedStateLock.updateLock()){
    Iterable<String> expected=cachedIncludes.get(cell.getRoot());
    if (!cachedEnvironment.isPresent()) {
      LOG.debug("Cached environment not present, invalidating caches for first run.");
      invalidateCaches=true;
    }
 else     if (!cellEnv.equals(cachedEnvironment.get())) {
      MapDifference<String,String> diff=Maps.difference(cachedEnvironment.get(),cellEnv);
      LOG.warn("Invalidating cache on environment change (%s)",diff);
      SetMultimap<String,String> environmentChanges=HashMultimap.create();
      environmentChanges.putAll(INVALIDATED_BY_ENV_VARS_COUNTER_NAME,diff.entriesOnlyOnLeft().keySet());
      environmentChanges.putAll(INVALIDATED_BY_ENV_VARS_COUNTER_NAME,diff.entriesOnlyOnRight().keySet());
      environmentChanges.putAll(INVALIDATED_BY_ENV_VARS_COUNTER_NAME,diff.entriesDiffering().keySet());
      cacheInvalidatedByEnvironmentVariableChangeCounter.putAll(environmentChanges);
      invalidateCaches=true;
    }
 else     if (expected == null || !Iterables.elementsEqual(defaultIncludes,expected)) {
      invalidateCaches=true;
    }
    if (!invalidateCaches) {
      return;
    }
    try (AutoCloseableLock writeLock=cachedStateLock.writeLock()){
      cachedEnvironment=Optional.of(cellEnv);
      cachedIncludes.put(cell.getRoot(),defaultIncludes);
    }
   }
 synchronized (this) {
    invalidateAllCaches();
    knownCells.add(cell);
  }
}
