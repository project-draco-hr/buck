{
  ImmutableMap<String,String> cellEnv=filteredEnv(cell.getBuckConfig().getEnvironment());
  Iterable<String> defaultIncludes=new ParserConfig(cell.getBuckConfig()).getDefaultIncludes();
  boolean invalidatedByEnvironmentVariableChange=false;
  boolean invalidatedByDefaultIncludesChange=false;
  Iterable<String> expected;
  ImmutableMap<String,String> originalCachedEnvironment;
  try (AutoCloseableLock updateLock=cachedStateLock.updateLock()){
    originalCachedEnvironment=cachedEnvironment;
    expected=cachedIncludes.get(cell.getRoot());
    if (!cellEnv.equals(cachedEnvironment)) {
      invalidatedByEnvironmentVariableChange=true;
    }
 else     if (expected == null || !Iterables.elementsEqual(defaultIncludes,expected)) {
      invalidatedByDefaultIncludesChange=true;
    }
    if (!invalidatedByEnvironmentVariableChange && !invalidatedByDefaultIncludesChange) {
      return;
    }
    try (AutoCloseableLock writeLock=cachedStateLock.writeLock()){
      cachedEnvironment=cellEnv;
      cachedIncludes.put(cell.getRoot(),defaultIncludes);
    }
   }
 synchronized (this) {
    if (invalidateAllCaches()) {
      if (invalidatedByEnvironmentVariableChange) {
        MapDifference<String,String> diff=Maps.difference(originalCachedEnvironment,cellEnv);
        LOG.warn("Invalidating cache on environment change (%s)",diff);
        Set<String> environmentChanges=new HashSet<>();
        environmentChanges.addAll(diff.entriesOnlyOnLeft().keySet());
        environmentChanges.addAll(diff.entriesOnlyOnRight().keySet());
        environmentChanges.addAll(diff.entriesDiffering().keySet());
        cacheInvalidatedByEnvironmentVariableChangeCounter.addAll(environmentChanges);
      }
      if (invalidatedByDefaultIncludesChange) {
        LOG.warn("Invalidating cache on default includes change (%s != %s)",expected,defaultIncludes);
        cacheInvalidatedByDefaultIncludesChangeCounter.inc();
      }
    }
    knownCells.add(cell);
  }
}
