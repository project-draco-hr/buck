{
  if (!WatchEvents.isPathChangeEvent(event)) {
    LOG.debug("Received non-path change event %s, assuming overflow and checking caches.",event);
    if (invalidateAllCaches()) {
      LOG.warn("Invalidated cache on watch event %s.",event);
      cacheInvalidatedByWatchOverflowCounter.inc();
    }
    return;
  }
  filesChangedCounter.inc();
  Path path=(Path)event.context();
  for (  Cell cell : knownCells) {
    try {
      if (isPathCreateOrDeleteEvent(event)) {
        BuildFileTree buildFiles=buildFileTrees.get(cell);
        if (path.endsWith(cell.getBuildFileName())) {
          LOG.debug("Build file %s changed, invalidating build file tree for cell %s",path,cell);
          buildFileTrees.invalidate(cell);
        }
        if (!isTempFile(cell,path)) {
          invalidateContainingBuildFile(cell,buildFiles,path);
        }
 else {
          LOG.debug("Not invalidating the owning build file of %s because it is a temporary file.",cell.getFilesystem().resolve(path).toAbsolutePath().toString());
        }
      }
    }
 catch (    ExecutionException|UncheckedExecutionException e) {
      try {
        Throwables.propagateIfInstanceOf(e,BuildFileParseException.class);
        Throwables.propagate(e);
      }
 catch (      BuildFileParseException bfpe) {
        LOG.warn("Unable to parse already parsed build file.",bfpe);
      }
    }
  }
  invalidatePath(path);
}
