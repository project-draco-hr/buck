{
  invalidateIfProjectBuildFileParserStateChanged(cell);
  final Path buildFile=cell.getAbsolutePathToBuildFile(target);
  invalidateIfBuckConfigHasChanged(cell,buildFile);
  try {
    return allTargetNodes.get(target,new Callable<TargetNode<?>>(){
      @Override public TargetNode<?> call() throws Exception {
        Preconditions.checkState(buildFile.isAbsolute());
        List<Map<String,Object>> rawNodes=loadRawNodes(cell,buildFile,parser);
        for (        Map<String,Object> rawNode : rawNodes) {
          Object shortName=rawNode.get("name");
          if (target.getShortName().equals(shortName)) {
            return createTargetNode(eventBus,cell,buildFile,target,rawNode,nodeListener);
          }
        }
        throw new HumanReadableException(NoSuchBuildTargetException.createForMissingBuildRule(target,BuildTargetPatternParser.forBaseName(target.getBaseName()),cell.getBuildFileName(),"Defined in file: " + buildFile));
      }
    }
);
  }
 catch (  UncheckedExecutionException|ExecutionException e) {
    Throwables.propagateIfInstanceOf(e.getCause(),BuildTargetException.class);
    throw propagate(e);
  }
}
