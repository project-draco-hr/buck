{
  BuildRuleType buildRuleType=parseBuildRuleTypeFromRawRule(cell,rawNode);
  Description<?> description=cell.getDescription(buildRuleType);
  UnflavoredBuildTarget unflavoredBuildTarget=target.withoutCell().getUnflavoredBuildTarget();
  if (target.isFlavored()) {
    if (description instanceof Flavored) {
      if (!((Flavored)description).hasFlavors(ImmutableSet.copyOf(target.getFlavors()))) {
        throw new HumanReadableException("Unrecognized flavor in target %s while parsing %s%s.",target,UnflavoredBuildTarget.BUILD_TARGET_PREFIX,MorePaths.pathWithUnixSeparators(target.getBasePath().resolve(cell.getBuildFileName())));
      }
    }
 else {
      LOG.warn("Target %s (type %s) must implement the Flavored interface " + "before we can check if it supports flavors: %s",unflavoredBuildTarget,buildRuleType,target.getFlavors());
      throw new HumanReadableException("Target %s (type %s) does not currently support flavors (tried %s)",unflavoredBuildTarget,buildRuleType,target.getFlavors());
    }
  }
  UnflavoredBuildTarget unflavoredBuildTargetFromRawData=ParsePipeline.parseBuildTargetFromRawRule(cell.getRoot(),rawNode,buildFile);
  if (!unflavoredBuildTarget.equals(unflavoredBuildTargetFromRawData)) {
    throw new IllegalStateException(String.format("Inconsistent internal state, target from data: %s, expected: %s, raw data: %s",unflavoredBuildTargetFromRawData,unflavoredBuildTarget,Joiner.on(',').withKeyValueSeparator("->").join(rawNode)));
  }
  Cell targetCell=cell.getCell(target);
  BuildRuleFactoryParams factoryParams=new BuildRuleFactoryParams(targetCell.getFilesystem(),target,new FilesystemBackedBuildFileTree(cell.getFilesystem(),cell.getBuildFileName()),targetCell.isEnforcingBuckPackageBoundaries());
  Object constructorArg=description.createUnpopulatedConstructorArg();
  try {
    ImmutableSet.Builder<BuildTarget> declaredDeps=ImmutableSet.builder();
    ImmutableSet.Builder<BuildTargetPattern> visibilityPatterns=ImmutableSet.builder();
    try (SimplePerfEvent.Scope scope=SimplePerfEvent.scope(eventBus,PerfEventId.of("MarshalledConstructorArg"),"target",target)){
      marshaller.populate(targetCell.getCellRoots(),targetCell.getFilesystem(),factoryParams,constructorArg,declaredDeps,visibilityPatterns,rawNode);
    }
     try (SimplePerfEvent.Scope scope=SimplePerfEvent.scope(eventBus,PerfEventId.of("CreatedTargetNode"),"target",target)){
      Hasher hasher=Hashing.sha1().newHasher();
      hasher.putString(BuckVersion.getVersion(),UTF_8);
      JsonObjectHashing.hashJsonObject(hasher,rawNode);
      TargetNode<?> node=new TargetNode(hasher.hash(),description,constructorArg,typeCoercerFactory,factoryParams,declaredDeps.build(),visibilityPatterns.build(),targetCell.getCellRoots());
      nodeListener.onCreate(buildFile,node);
      return node;
    }
   }
 catch (  NoSuchBuildTargetException|TargetNode.InvalidSourcePathInputException e) {
    throw new HumanReadableException(e);
  }
catch (  ConstructorArgMarshalException e) {
    throw new HumanReadableException("%s: %s",target,e.getMessage());
  }
catch (  IOException e) {
    throw new HumanReadableException(e.getMessage(),e);
  }
}
