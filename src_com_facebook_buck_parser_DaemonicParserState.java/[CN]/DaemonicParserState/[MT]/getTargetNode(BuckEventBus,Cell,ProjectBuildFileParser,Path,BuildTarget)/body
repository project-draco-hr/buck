{
  Preconditions.checkState(buildFile.isAbsolute());
  invalidateIfProjectBuildFileParserStateChanged(cell);
  try {
    return allTargetNodes.get(target,new Callable<TargetNode<?>>(){
      @Override public TargetNode<?> call() throws Exception {
        List<Map<String,Object>> rawNodes=loadRawNodes(cell,buildFile,parser);
        TargetNode<?> toReturn=null;
        Set<Object> seen=new HashSet<>();
        Set<Object> duplicates=new HashSet<>();
        for (        Map<String,Object> rawNode : rawNodes) {
          Object shortName=rawNode.get("name");
          if (!seen.add(shortName)) {
            duplicates.add(shortName);
          }
          if (!target.getShortName().equals(shortName)) {
            continue;
          }
          toReturn=createTargetNode(eventBus,cell,target,rawNode);
        }
        if (!duplicates.isEmpty()) {
          StringBuilder message=new StringBuilder("In build file for '").append(target).append("' (").append(buildFile).append(") the following duplicate targets were found: ");
          Joiner.on(", ").appendTo(message,FluentIterable.from(duplicates).transform(new Function<Object,String>(){
            @Override public String apply(            Object input){
              return target.getBaseName() + ":" + input;
            }
          }
));
          throw new HumanReadableException(message.toString());
        }
        if (toReturn != null) {
          return toReturn;
        }
        throw new HumanReadableException(NoSuchBuildTargetException.createForMissingBuildRule(target,BuildTargetPatternParser.forBaseName(target.getBaseName()),cell.getBuildFileName(),"Defined in file: " + buildFile));
      }
    }
);
  }
 catch (  UncheckedExecutionException|ExecutionException e) {
    throw propagate(e);
  }
}
