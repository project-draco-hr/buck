{
  return allRawNodes.get(buildFile,new Callable<ImmutableList<Map<String,Object>>>(){
    @SuppressWarnings("unchecked") @Override public ImmutableList<Map<String,Object>> call() throws Exception {
      List<Map<String,Object>> rawNodes=parser.getAllRulesAndMetaRules(buildFile);
      ImmutableSet<Path> dependentsOfEveryNode=ImmutableSet.of();
      ImmutableMap<String,ImmutableMap<String,Optional<String>>> configs=ImmutableMap.of();
      ImmutableList.Builder<Map<String,Object>> toReturn=ImmutableList.builder();
      for (      Map<String,Object> rawNode : rawNodes) {
        if (rawNode.containsKey(INCLUDES_META_RULE)) {
          List<String> fileNames=((List<String>)rawNode.get(INCLUDES_META_RULE));
          Preconditions.checkNotNull(fileNames);
          dependentsOfEveryNode=FluentIterable.from(fileNames).transform(new Function<String,Path>(){
            @Override public Path apply(            String path){
              return cell.getFilesystem().resolve(Paths.get(path));
            }
          }
).toSet();
        }
 else         if (rawNode.containsKey(CONFIGS_META_RULE)) {
          ImmutableMap.Builder<String,ImmutableMap<String,Optional<String>>> builder=ImmutableMap.builder();
          Map<String,Map<String,String>> configsMeta=Preconditions.checkNotNull((Map<String,Map<String,String>>)rawNode.get(CONFIGS_META_RULE));
          for (          Map.Entry<String,Map<String,String>> ent : configsMeta.entrySet()) {
            builder.put(ent.getKey(),ImmutableMap.copyOf(Maps.transformValues(ent.getValue(),new Function<String,Optional<String>>(){
              @Override public Optional<String> apply(              @Nullable String input){
                return Optional.fromNullable(input);
              }
            }
)));
          }
          configs=builder.build();
        }
 else {
          toReturn.add(rawNode);
        }
      }
synchronized (this) {
        buildFileConfigs.put(buildFile,configs);
        for (        Path dependent : dependentsOfEveryNode) {
          buildFileDependents.put(dependent,buildFile);
        }
      }
      BuckConfig buckConfig=cell.getBuckConfig();
      Iterable<String> defaultIncludes=new ParserConfig(buckConfig).getDefaultIncludes();
synchronized (this) {
        for (        String include : defaultIncludes) {
          int slashesIndex=include.indexOf("//");
          Preconditions.checkState(slashesIndex != -1);
          buildFileDependents.put(cell.getFilesystem().resolve(include.substring(2)),buildFile);
        }
      }
      return toReturn.build();
    }
  }
);
}
