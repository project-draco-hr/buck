{
  Preconditions.checkState(buildFile.isAbsolute());
  invalidateIfProjectBuildFileParserStateChanged(cell);
  final ImmutableList.Builder<Map<String,Object>> withoutMetaIncludesBuilder=ImmutableList.builder();
  ImmutableSet.Builder<Path> dependentsOfEveryNode=ImmutableSet.builder();
  ImmutableMap<String,ImmutableMap<String,Optional<String>>> configs=ImmutableMap.of();
  for (  Map<String,Object> rawNode : rawNodes) {
    if (rawNode.containsKey(INCLUDES_META_RULE)) {
      for (      String path : Preconditions.checkNotNull((List<String>)rawNode.get(INCLUDES_META_RULE))) {
        dependentsOfEveryNode.add(cell.getFilesystem().resolve(path));
      }
    }
 else     if (rawNode.containsKey(CONFIGS_META_RULE)) {
      ImmutableMap.Builder<String,ImmutableMap<String,Optional<String>>> builder=ImmutableMap.builder();
      Map<String,Map<String,String>> configsMeta=Preconditions.checkNotNull((Map<String,Map<String,String>>)rawNode.get(CONFIGS_META_RULE));
      for (      Map.Entry<String,Map<String,String>> ent : configsMeta.entrySet()) {
        builder.put(ent.getKey(),ImmutableMap.copyOf(Maps.transformValues(ent.getValue(),new Function<String,Optional<String>>(){
          @Override public Optional<String> apply(          @Nullable String input){
            return Optional.fromNullable(input);
          }
        }
)));
      }
      configs=builder.build();
    }
 else     if (rawNode.containsKey(ENV_META_RULE)) {
    }
 else {
      withoutMetaIncludesBuilder.add(rawNode);
    }
  }
  final ImmutableList<Map<String,Object>> withoutMetaIncludes=withoutMetaIncludesBuilder.build();
  BuckConfig buckConfig=cell.getBuckConfig();
  Iterable<String> defaultIncludes=new ParserConfig(buckConfig).getDefaultIncludes();
  for (  String include : defaultIncludes) {
    int slashesIndex=include.indexOf("//");
    Preconditions.checkState(slashesIndex != -1);
    dependentsOfEveryNode.add(cell.getFilesystem().resolve(include.substring(2)));
  }
  return getCellState(cell).putRawNodesIfNotPresentAndStripMetaEntries(buildFile,withoutMetaIncludes,dependentsOfEveryNode.build(),configs);
}
