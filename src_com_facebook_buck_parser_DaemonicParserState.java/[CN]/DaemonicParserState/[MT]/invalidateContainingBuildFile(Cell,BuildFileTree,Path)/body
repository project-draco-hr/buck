{
  LOG.debug("Invalidating rules dependent on change to %s in cell %s",path,cell);
  Set<Path> packageBuildFiles=new HashSet<>();
  Optional<Path> packageBuildFile=buildFiles.getBasePathOfAncestorTarget(path);
  packageBuildFiles.addAll(packageBuildFile.transform(cell.getFilesystem().getAbsolutifier()).asSet());
  if (!cell.isEnforcingBuckPackageBoundaries()) {
    while (packageBuildFile.isPresent() && packageBuildFile.get().getParent() != null) {
      packageBuildFile=buildFiles.getBasePathOfAncestorTarget(packageBuildFile.get().getParent());
      packageBuildFiles.addAll(packageBuildFile.asSet());
    }
  }
  if (packageBuildFiles.isEmpty()) {
    LOG.debug("%s is not owned by any build file.  Not invalidating anything.",cell.getFilesystem().resolve(path).toAbsolutePath().toString());
    return;
  }
  buildFilesInvalidatedByFileAddOrRemoveCounter.inc(packageBuildFiles.size());
  for (  Path buildFile : packageBuildFiles) {
    invalidatePath(cell,buildFile.resolve(cell.getBuildFileName()));
  }
}
