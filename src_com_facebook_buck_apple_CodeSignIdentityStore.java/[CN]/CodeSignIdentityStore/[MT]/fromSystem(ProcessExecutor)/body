{
  return new CodeSignIdentityStore(Suppliers.memoize(new Supplier<ImmutableList<CodeSignIdentity>>(){
    @Override public ImmutableList<CodeSignIdentity> get(){
      ProcessExecutorParams processExecutorParams=ProcessExecutorParams.builder().setCommand(ImmutableList.of("security","find-identity","-v","-p","codesigning")).build();
      Set<ProcessExecutor.Option> options=EnumSet.of(ProcessExecutor.Option.EXPECTING_STD_OUT);
      ProcessExecutor.Result result;
      try {
        result=processExecutor.launchAndExecute(processExecutorParams,options,Optional.<String>absent(),Optional.<Long>absent(),Optional.<Function<Process,Void>>absent());
      }
 catch (      InterruptedException|IOException e) {
        LOG.warn("Could not execute security, continuing without codesign identity.");
        return ImmutableList.of();
      }
      if (result.getExitCode() != 0) {
        throw new RuntimeException("security -v -p codesigning failed: " + result.getStderr());
      }
      Matcher matcher=CODE_SIGN_IDENTITY_PATTERN.matcher(result.getStdout().get());
      ImmutableList.Builder<CodeSignIdentity> builder=ImmutableList.builder();
      while (matcher.find()) {
        Optional<HashCode> fingerprint=CodeSignIdentity.toFingerprint(matcher.group(1));
        if (!fingerprint.isPresent()) {
          LOG.warn("Code sign identity fingerprint is invalid, ignored: " + matcher.group(1));
          break;
        }
        String subjectCommonName=matcher.group(2);
        CodeSignIdentity identity=CodeSignIdentity.builder().setFingerprint(fingerprint).setSubjectCommonName(subjectCommonName).build();
        builder.add(identity);
        LOG.debug("Found code signing identity: " + identity.toString());
      }
      ImmutableList<CodeSignIdentity> allValidIdentities=builder.build();
      if (allValidIdentities.isEmpty()) {
        LOG.warn("No valid code signing identities found.  Device build/install won't work.");
      }
 else       if (allValidIdentities.size() > 1) {
        LOG.info("Multiple valid identity found.  This could potentially cause the wrong one to" + " be used unless explicitly specified via CODE_SIGN_IDENTITY.");
      }
      return allValidIdentities;
    }
  }
));
}
