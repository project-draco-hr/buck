{
  byte arrayType=buffer.get();
  if (arrayType != BSER_ARRAY) {
    throw new IOException(String.format("Expected ARRAY to follow TEMPLATE, got %d",arrayType));
  }
  List<Object> keys=deserializeArray(buffer);
  byte numItemsType=buffer.get();
  int numItems=deserializeIntLen(buffer,numItemsType);
  ArrayList<Map<String,Object>> result=new ArrayList<>();
  for (int itemIdx=0; itemIdx < numItems; itemIdx++) {
    Map<String,Object> obj;
    if (keyOrdering == KeyOrdering.UNSORTED) {
      obj=new LinkedHashMap<>();
    }
 else {
      obj=new TreeMap<>();
    }
    for (int keyIdx=0; keyIdx < keys.size(); keyIdx++) {
      byte keyValueType=buffer.get();
      if (keyValueType != BSER_SKIP) {
        String key=(String)keys.get(keyIdx);
        obj.put(key,deserializeRecursiveWithType(buffer,keyValueType));
      }
    }
    result.add(obj);
  }
  return result;
}
