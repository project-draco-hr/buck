{
  Matcher matcher=BUILD_TARGET_PATTERN.matcher(command);
  StringBuffer buffer=new StringBuffer();
  Map<String,BuildRule> fullyQualifiedNameToBuildRule=null;
  while (matcher.find()) {
    if (fullyQualifiedNameToBuildRule == null) {
      fullyQualifiedNameToBuildRule=Maps.newHashMap();
      for (      BuildRule dep : getDeps()) {
        fullyQualifiedNameToBuildRule.put(dep.getFullyQualifiedName(),dep);
      }
    }
    String buildTarget=matcher.group(3);
    String base=matcher.group(4);
    if (base == null) {
      buildTarget=String.format("//%s%s",getBuildTarget().getBasePath(),buildTarget);
    }
    BuildRule matchingRule=fullyQualifiedNameToBuildRule.get(buildTarget);
    if (matchingRule == null) {
      throw new HumanReadableException("No dep named %s for %s %s, cmd was %s",buildTarget,getType().getName(),getFullyQualifiedName(),command);
    }
    String replacement;
    Buildable matchingBuildable=matchingRule.getBuildable();
switch (matcher.group(2)) {
case "exe":
      replacement=getExecutableReplacementFrom(filesystem,command,matchingBuildable);
    break;
case "location":
  replacement=getLocationReplacementFrom(filesystem,matchingBuildable);
break;
default :
throw new HumanReadableException("Unable to determine replacement for '%s' in target %s",matcher.group(2),getFullyQualifiedName());
}
matcher.appendReplacement(buffer,replacement);
}
matcher.appendTail(buffer);
return buffer.toString();
}
