{
  super(params,resolver);
  this.srcs=ImmutableList.copyOf(srcs);
  this.macroExpander=macroExpander;
  this.cmd=cmd;
  this.bash=bash;
  this.cmdExe=cmdExe;
  this.srcsToAbsolutePaths=FluentIterable.from(srcs).transform(resolver.getPathFunction()).toMap(new Function<Path,Path>(){
    @Override public Path apply(    Path src){
      return relativeToAbsolutePathFunction.apply(src);
    }
  }
);
  this.out=out;
  BuildTarget target=params.getBuildTarget();
  this.pathToOutDirectory=Paths.get(BuckConstant.GEN_DIR,target.getBasePathWithSlash());
  this.pathToOutFile=this.pathToOutDirectory.resolve(out);
  if (!pathToOutFile.startsWith(pathToOutDirectory) || pathToOutFile.equals(pathToOutDirectory)) {
    throw new HumanReadableException("The 'out' parameter of genrule %s is '%s', which is not a valid file name.",params.getBuildTarget(),out);
  }
  this.pathToTmpDirectory=Paths.get(BuckConstant.GEN_DIR,target.getBasePathWithSlash(),String.format("%s__tmp",target.getShortNameAndFlavorPostfix()));
  this.absolutePathToTmpDirectory=relativeToAbsolutePathFunction.apply(pathToTmpDirectory);
  this.pathToSrcDirectory=Paths.get(BuckConstant.GEN_DIR,target.getBasePathWithSlash(),String.format("%s__srcs",target.getShortNameAndFlavorPostfix()));
  this.absolutePathToSrcDirectory=relativeToAbsolutePathFunction.apply(pathToSrcDirectory);
  this.relativeToAbsolutePathFunction=relativeToAbsolutePathFunction;
}
