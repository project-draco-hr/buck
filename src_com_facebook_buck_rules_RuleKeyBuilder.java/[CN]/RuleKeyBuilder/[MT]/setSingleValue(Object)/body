{
  if (val == null) {
    ruleKeyLogger.addNullValue();
    return feed(new byte[0]);
  }
 else   if (val instanceof Boolean) {
    ruleKeyLogger.addValue((boolean)val);
    feed(((boolean)val ? "t" : "f").getBytes(StandardCharsets.UTF_8));
  }
 else   if (val instanceof Enum) {
    ruleKeyLogger.addValue((Enum<?>)val);
    feed(String.valueOf(val).getBytes(StandardCharsets.UTF_8));
  }
 else   if (val instanceof Number) {
    Class<?> wrapped=Primitives.wrap(val.getClass());
    if (Double.class.equals(wrapped)) {
      ruleKeyLogger.addValue((Double)val);
      hasher.putDouble(((Double)val).doubleValue());
    }
 else     if (Float.class.equals(wrapped)) {
      ruleKeyLogger.addValue((Float)val);
      hasher.putFloat(((Float)val).floatValue());
    }
 else     if (Integer.class.equals(wrapped)) {
      ruleKeyLogger.addValue((Integer)val);
      hasher.putInt(((Integer)val).intValue());
    }
 else     if (Long.class.equals(wrapped)) {
      ruleKeyLogger.addValue((Long)val);
      hasher.putLong(((Long)val).longValue());
    }
 else     if (Short.class.equals(wrapped)) {
      ruleKeyLogger.addValue((Short)val);
      hasher.putShort(((Short)val).shortValue());
    }
 else {
      throw new RuntimeException(("Unhandled number type: " + val.getClass()));
    }
  }
 else   if (val instanceof Path) {
    throw new HumanReadableException("It's not possible to reliably disambiguate Paths. They are disallowed from rule keys");
  }
 else   if (val instanceof String) {
    ruleKeyLogger.addValue((String)val);
    feed(((String)val).getBytes(StandardCharsets.UTF_8));
  }
 else   if (val instanceof BuildRule) {
    return setBuildRule((BuildRule)val);
  }
 else   if (val instanceof BuildRuleType) {
    ruleKeyLogger.addValue((BuildRuleType)val);
    feed(val.toString().getBytes(StandardCharsets.UTF_8));
  }
 else   if (val instanceof RuleKey) {
    ruleKeyLogger.addValue((RuleKey)val);
    feed(val.toString().getBytes(StandardCharsets.UTF_8));
  }
 else   if (val instanceof BuildTarget || val instanceof UnflavoredBuildTarget) {
    BuildTarget buildTarget=((HasBuildTarget)val).getBuildTarget();
    ruleKeyLogger.addValue(buildTarget);
    feed(buildTarget.getFullyQualifiedName().getBytes(StandardCharsets.UTF_8));
  }
 else   if (val instanceof Either) {
    Either<?,?> either=(Either<?,?>)val;
    if (either.isLeft()) {
      setSingleValue(either.getLeft());
    }
 else {
      setSingleValue(either.getRight());
    }
  }
 else   if (val instanceof SourcePath) {
    return setSourcePath((SourcePath)val);
  }
 else   if (val instanceof NonHashableSourcePathContainer) {
    NonHashableSourcePathContainer nonHashableSourcePathContainer=(NonHashableSourcePathContainer)val;
    return setNonHashingSourcePath(nonHashableSourcePathContainer.getSourcePath());
  }
 else   if (val instanceof SourceRoot) {
    SourceRoot sourceRoot=((SourceRoot)val);
    ruleKeyLogger.addValue(sourceRoot);
    feed(sourceRoot.getName().getBytes(StandardCharsets.UTF_8));
  }
 else   if (val instanceof SourceWithFlags) {
    SourceWithFlags source=(SourceWithFlags)val;
    try (RuleKeyLogger.Scope scope=ruleKeyLogger.pushSourceWithFlags()){
      setSourcePath(source.getSourcePath());
      feed("[".getBytes(StandardCharsets.UTF_8));
      for (      String flag : source.getFlags()) {
        ruleKeyLogger.addValue(flag);
        feed(flag.getBytes(StandardCharsets.UTF_8));
        feed(",".getBytes(StandardCharsets.UTF_8));
      }
      feed("]".getBytes(StandardCharsets.UTF_8));
    }
   }
 else   if (val instanceof Sha1HashCode) {
    Sha1HashCode hashCode=(Sha1HashCode)val;
    feed(hashCode);
  }
 else   if (val instanceof byte[]) {
    byte[] bytes=(byte[])val;
    ruleKeyLogger.addValue(bytes);
    feed(bytes);
  }
 else {
    throw new RuntimeException("Unsupported value type: " + val.getClass());
  }
  return this;
}
