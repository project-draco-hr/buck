{
  if (val instanceof RuleKeyAppendable) {
    setAppendableRuleKey(key,(RuleKeyAppendable)val);
    if (!(val instanceof BuildRule)) {
      return this;
    }
  }
  if (val instanceof Optional) {
    Object o=((Optional<?>)val).orNull();
    return setReflectively(key,o);
  }
  int oldSize=keyStack.size();
  keyStack.push(key);
  try (RuleKeyLogger.Scope keyScope=ruleKeyLogger.pushKey(key)){
    if (val instanceof Collection) {
      val=((Collection<?>)val).iterator();
    }
    if (val instanceof Iterable && !(val instanceof Path)) {
      val=((Iterable<?>)val).iterator();
    }
    if (val instanceof Iterator) {
      Iterator<?> iterator=(Iterator<?>)val;
      while (iterator.hasNext()) {
        setReflectively(key,iterator.next());
      }
      return this;
    }
    if (val instanceof Map) {
      if (!(val instanceof SortedMap | val instanceof ImmutableMap)) {
        logger.info("Adding an unsorted map to the rule key (%s). " + "Expect unstable ordering and caches misses: %s",key,val);
      }
      try (RuleKeyLogger.Scope mapScope=ruleKeyLogger.pushMap()){
        feed("{".getBytes(StandardCharsets.UTF_8));
        for (        Map.Entry<?,?> entry : ((Map<?,?>)val).entrySet()) {
          try (RuleKeyLogger.Scope mapKeyScope=ruleKeyLogger.pushMapKey()){
            setReflectively(key,entry.getKey());
          }
           feed(" -> ".getBytes(StandardCharsets.UTF_8));
          try (RuleKeyLogger.Scope mapValueScope=ruleKeyLogger.pushMapValue()){
            setReflectively(key,entry.getValue());
          }
         }
      }
       return feed("}".getBytes(StandardCharsets.UTF_8));
    }
    if (val instanceof Supplier) {
      Object newVal=((Supplier<?>)val).get();
      return setReflectively(key,newVal);
    }
    return setSingleValue(val);
  }
  finally {
    while (keyStack.size() > oldSize) {
      keyStack.pop();
    }
  }
}
