{
  Map<PBXTarget,XCScheme.BuildableReference> buildTargetToBuildableReferenceMap=Maps.newHashMap();
  for (  PBXTarget target : Iterables.concat(orderedBuildTargets,orderedBuildTestTargets)) {
    String blueprintName=target.getProductName();
    if (blueprintName == null) {
      blueprintName=target.getName();
    }
    Path outputPath=outputDirectory.getParent();
    String buildableReferencePath;
    Path projectPath=Preconditions.checkNotNull(targetToProjectPathMap.get(target));
    if (outputPath == null) {
      buildableReferencePath=projectPath.toString();
    }
 else {
      buildableReferencePath=outputPath.relativize(projectPath).toString();
    }
    XCScheme.BuildableReference buildableReference=new XCScheme.BuildableReference(buildableReferencePath,Preconditions.checkNotNull(target.getGlobalID()),target.getProductReference() != null ? target.getProductReference().getName() : Preconditions.checkNotNull(target.getProductName()),blueprintName);
    buildTargetToBuildableReferenceMap.put(target,buildableReference);
  }
  XCScheme.BuildAction buildAction=new XCScheme.BuildAction(parallelizeBuild);
  for (  PBXTarget target : orderedBuildTargets) {
    addBuildActionForBuildTarget(buildTargetToBuildableReferenceMap.get(target),!primaryTargetIsBuildWithBuck || !primaryTarget.isPresent() || target.equals(primaryTarget.get()) ? XCScheme.BuildActionEntry.BuildFor.DEFAULT : XCScheme.BuildActionEntry.BuildFor.INDEXING,buildAction);
  }
  for (  PBXTarget target : orderedBuildTestTargets) {
    addBuildActionForBuildTarget(buildTargetToBuildableReferenceMap.get(target),XCScheme.BuildActionEntry.BuildFor.TEST_ONLY,buildAction);
  }
  XCScheme.TestAction testAction=new XCScheme.TestAction(Preconditions.checkNotNull(actionConfigNames.get(SchemeActionType.TEST)));
  for (  PBXTarget target : orderedRunTestTargets) {
    XCScheme.BuildableReference buildableReference=buildTargetToBuildableReferenceMap.get(target);
    XCScheme.TestableReference testableReference=new XCScheme.TestableReference(buildableReference);
    testAction.addTestableReference(testableReference);
  }
  Optional<XCScheme.LaunchAction> launchAction=Optional.absent();
  Optional<XCScheme.ProfileAction> profileAction=Optional.absent();
  if (primaryTarget.isPresent()) {
    XCScheme.BuildableReference primaryBuildableReference=buildTargetToBuildableReferenceMap.get(primaryTarget.get());
    if (primaryBuildableReference != null) {
      launchAction=Optional.of(new XCScheme.LaunchAction(primaryBuildableReference,Preconditions.checkNotNull(actionConfigNames.get(SchemeActionType.LAUNCH)),runnablePath,remoteRunnablePath,launchStyle));
      profileAction=Optional.of(new XCScheme.ProfileAction(primaryBuildableReference,Preconditions.checkNotNull(actionConfigNames.get(SchemeActionType.PROFILE))));
    }
  }
  XCScheme.AnalyzeAction analyzeAction=new XCScheme.AnalyzeAction(Preconditions.checkNotNull(actionConfigNames.get(SchemeActionType.ANALYZE)));
  XCScheme.ArchiveAction archiveAction=new XCScheme.ArchiveAction(Preconditions.checkNotNull(actionConfigNames.get(SchemeActionType.ARCHIVE)));
  XCScheme scheme=new XCScheme(schemeName,Optional.of(buildAction),Optional.of(testAction),launchAction,profileAction,Optional.of(analyzeAction),Optional.of(archiveAction));
  outputScheme=Optional.of(scheme);
  Path schemeDirectory=outputDirectory.resolve("xcshareddata/xcschemes");
  projectFilesystem.mkdirs(schemeDirectory);
  Path schemePath=schemeDirectory.resolve(schemeName + ".xcscheme");
  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){
    serializeScheme(scheme,outputStream);
    String contentsToWrite=outputStream.toString();
    if (MoreProjectFilesystems.fileContentsDiffer(new ByteArrayInputStream(contentsToWrite.getBytes(Charsets.UTF_8)),schemePath,projectFilesystem)) {
      projectFilesystem.writeContentsToPath(outputStream.toString(),schemePath);
    }
  }
   return schemePath;
}
