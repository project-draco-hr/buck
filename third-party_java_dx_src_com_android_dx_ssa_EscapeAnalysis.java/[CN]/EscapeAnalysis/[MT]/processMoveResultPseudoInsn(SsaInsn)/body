{
  RegisterSpec result=insn.getResult();
  SsaInsn prevSsaInsn=getInsnForMove(insn);
  int prevOpcode=prevSsaInsn.getOpcode().getOpcode();
  EscapeSet escSet;
  RegisterSpec prevSource;
switch (prevOpcode) {
case RegOps.NEW_INSTANCE:
case RegOps.CONST:
    escSet=new EscapeSet(result.getReg(),regCount,EscapeState.NONE);
  break;
case RegOps.NEW_ARRAY:
case RegOps.FILLED_NEW_ARRAY:
prevSource=prevSsaInsn.getSources().get(0);
if (prevSource.getTypeBearer().isConstant()) {
escSet=new EscapeSet(result.getReg(),regCount,EscapeState.NONE);
escSet.replaceableArray=true;
}
 else {
escSet=new EscapeSet(result.getReg(),regCount,EscapeState.GLOBAL);
}
break;
case RegOps.GET_STATIC:
escSet=new EscapeSet(result.getReg(),regCount,EscapeState.GLOBAL);
break;
case RegOps.CHECK_CAST:
case RegOps.GET_FIELD:
case RegOps.AGET:
prevSource=prevSsaInsn.getSources().get(0);
int setIndex=findSetIndex(prevSource);
if (setIndex != latticeValues.size()) {
escSet=latticeValues.get(setIndex);
escSet.regSet.set(result.getReg());
return escSet;
}
if (prevSource.getType() == Type.KNOWN_NULL) {
escSet=new EscapeSet(result.getReg(),regCount,EscapeState.NONE);
}
 else {
escSet=new EscapeSet(result.getReg(),regCount,EscapeState.GLOBAL);
}
break;
default :
return null;
}
latticeValues.add(escSet);
return escSet;
}
