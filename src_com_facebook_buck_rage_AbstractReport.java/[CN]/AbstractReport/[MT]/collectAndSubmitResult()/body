{
  Optional<UserReport> userReport=getUserReport();
  ImmutableSet<BuildLogEntry> highlightedBuilds=promptForBuildSelection();
  Optional<SourceControlInfo> sourceControlInfo=getSourceControlInfo();
  ImmutableSet<Path> extraInfoPaths=ImmutableSet.of();
  Optional<String> extraInfo=Optional.absent();
  try {
    Optional<ExtraInfoResult> extraInfoResultOptional=extraInfoCollector.run();
    if (extraInfoResultOptional.isPresent()) {
      extraInfoPaths=extraInfoResultOptional.get().getExtraFiles();
      extraInfo=Optional.of(extraInfoResultOptional.get().getOutput());
    }
  }
 catch (  DefaultExtraInfoCollector.ExtraInfoExecutionException e) {
    output.printf("There was a problem gathering additional information: %s. " + "The results will not be attached to the report.",e.getMessage());
  }
  UserLocalConfiguration userLocalConfiguration=UserLocalConfiguration.of(isNoBuckCheckPresent(),getLocalConfigs());
  ImmutableSet<Path> includedPaths=FluentIterable.from(highlightedBuilds).transformAndConcat(new Function<BuildLogEntry,Iterable<Path>>(){
    @Override public Iterable<Path> apply(    BuildLogEntry input){
      ImmutableSet.Builder<Path> result=ImmutableSet.builder();
      Optionals.addIfPresent(input.getRuleKeyLoggerLogFile(),result);
      result.add(input.getRelativePath());
      return result.build();
    }
  }
).append(extraInfoPaths).append(userLocalConfiguration.getLocalConfigs()).toSet();
  DefectReport defectReport=DefectReport.builder().setUserReport(userReport).setHighlightedBuildIds(FluentIterable.from(highlightedBuilds).transformAndConcat(new Function<BuildLogEntry,Iterable<BuildId>>(){
    @Override public Iterable<BuildId> apply(    BuildLogEntry input){
      return input.getBuildId().asSet();
    }
  }
)).setBuildEnvironmentDescription(buildEnvironmentDescription).setSourceControlInfo(sourceControlInfo).setIncludedPaths(includedPaths).setExtraInfo(extraInfo).setUserLocalConfiguration(userLocalConfiguration).build();
  output.println("Writing report, please wait..");
  return defectReporter.submitReport(defectReport);
}
