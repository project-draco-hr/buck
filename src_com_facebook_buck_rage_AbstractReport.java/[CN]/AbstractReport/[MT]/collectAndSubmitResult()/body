{
  Optional<UserReport> userReport=getUserReport();
  ImmutableSet<BuildLogEntry> hightlghtedBuilds=promptForBuildSelection();
  Optional<SourceControlInfo> sourceControlInfo=getSourceControlInfo();
  DefectReport defectReport=DefectReport.builder().setUserReport(userReport).setHighlightedBuildIds(FluentIterable.from(hightlghtedBuilds).transformAndConcat(new Function<BuildLogEntry,Iterable<BuildId>>(){
    @Override public Iterable<BuildId> apply(    BuildLogEntry input){
      return input.getBuildId().asSet();
    }
  }
)).setBuildEnvironmentDescription(buildEnvironmentDescription).setSourceControlInfo(sourceControlInfo).setIncludedPaths(FluentIterable.from(hightlghtedBuilds).transform(new Function<BuildLogEntry,Path>(){
    @Override public Path apply(    BuildLogEntry input){
      return input.getRelativePath();
    }
  }
).toSet()).build();
  output.println("Writing report, please wait..");
  return defectReporter.submitReport(defectReport);
}
