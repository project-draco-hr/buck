{
  List<String> outputLines=Lists.newArrayList();
  Evaluator eval=(depth.isPresent()) ? Evaluators.toDepth(depth.get()) : Evaluators.all();
  Uniqueness uniq=shortestPathOnly ? Uniqueness.NODE_GLOBAL : Uniqueness.NONE;
  Iterable<Path> dependencyPaths=Traversal.description().breadthFirst().relationships(QueryRelType.DEP,Direction.OUTGOING).evaluator(eval).evaluator(Evaluators.includeWhereEndNodeIs(source)).uniqueness(uniq).traverse(target);
  for (  Path path : dependencyPaths) {
    Iterable<String> nodeNames=Iterables.transform(path.nodes(),new Function<Node,String>(){
      @Override public String apply(      Node node){
        return (String)node.getProperty("name");
      }
    }
);
    outputLines.add(Joiner.on(" -> ").join(nodeNames));
  }
  return Joiner.on('\n').join(outputLines);
}
