{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildTarget javaLibraryTargetName=BuildTargetFactory.newInstance("//javasrc:java-library");
  BuildRule javaLibraryRule=JavaLibraryBuilder.createBuilder(javaLibraryTargetName).addSrc(Paths.get("javasrc/JavaLibrary.java")).build(ruleResolver);
  String projectConfigTargetName="//javasrc:project-config";
  BuildRule ruleConfig=ProjectConfigBuilder.newProjectConfigRuleBuilder(BuildTargetFactory.newInstance(projectConfigTargetName)).setSrcRule(javaLibraryRule).build(ruleResolver);
  BuckConfig buckConfig=createBuckConfig(Joiner.on("\n").join("[project]","initial_targets = " + javaLibraryTargetName));
  ProjectCommandForTest command=new ProjectCommandForTest();
  command.createPartialGraphCallReturnValues.push(createGraphFromBuildRules(ImmutableList.of(ruleConfig)));
  command.runCommandWithOptions(createOptions(buckConfig));
  assertTrue(command.createPartialGraphCallReturnValues.isEmpty());
  RawRulePredicate projectConfigPredicate=command.createPartialGraphCallPredicates.get(0);
  checkPredicate(projectConfigPredicate,EMPTY_PARSE_DATA,javaLibraryRule,false);
  checkPredicate(projectConfigPredicate,EMPTY_PARSE_DATA,ruleConfig,true);
  BuildCommandOptions buildOptions=command.buildCommandOptions;
  MoreAsserts.assertContainsOne(buildOptions.getArguments(),javaLibraryTargetName.getFullyQualifiedName());
}
