{
  List<String> processorNames=ImmutableList.of("com.facebook.AnnotationProcessor");
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuckConfig buckConfig=new FakeBuckConfig();
  String targetNameWithout="//javasrc:java-library-without-processor";
  DefaultJavaLibrary ruleWithout=ruleResolver.buildAndAddToIndex(DefaultJavaLibrary.newJavaLibraryRuleBuilder(new FakeBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance(targetNameWithout)).addSrc(Paths.get("javasrc/JavaLibrary.java")));
  BuildTarget targetNameWith=BuildTargetFactory.newInstance("//javasrc:java-library-with-processor");
  DefaultJavaLibrary.Builder builderWith=DefaultJavaLibrary.newJavaLibraryRuleBuilder(new FakeBuildRuleBuilderParams()).setBuildTarget(targetNameWith).addSrc(Paths.get("javasrc/JavaLibrary.java"));
  builderWith.getAnnotationProcessingBuilder().addAllProcessors(processorNames);
  BuildRule ruleWith=ruleResolver.buildAndAddToIndex(builderWith);
  ImmutableMap<String,Object> annotationParseData=ImmutableMap.<String,Object>of(JavaLibraryBuildRuleFactory.ANNOTATION_PROCESSORS,processorNames);
  String projectConfigName="//javasrc:project-config";
  BuildRule ruleConfig=ProjectConfigBuilder.newProjectConfigRuleBuilder(BuildTargetFactory.newInstance(projectConfigName)).setSrcRule(ruleWith).build(ruleResolver);
  ProjectCommandForTest command=new ProjectCommandForTest();
  command.createPartialGraphCallReturnValues.addLast(createGraphFromBuildRules(ImmutableList.<BuildRule>of(ruleConfig)));
  command.createPartialGraphCallReturnValues.addLast(createGraphFromBuildRules(ImmutableList.of(ruleWith)));
  ProjectCommandOptions projectCommandOptions=createOptions(buckConfig);
  projectCommandOptions.setProcessAnnotations(true);
  command.runCommandWithOptions(projectCommandOptions);
  assertTrue(command.createPartialGraphCallReturnValues.isEmpty());
  RawRulePredicate projectConfigPredicate=command.createPartialGraphCallPredicates.get(0);
  checkPredicate(projectConfigPredicate,EMPTY_PARSE_DATA,ruleWithout,false);
  checkPredicate(projectConfigPredicate,annotationParseData,ruleWith,false);
  checkPredicate(projectConfigPredicate,EMPTY_PARSE_DATA,ruleConfig,true);
  RawRulePredicate annotationUsagePredicate=command.createPartialGraphCallPredicates.get(1);
  checkPredicate(annotationUsagePredicate,EMPTY_PARSE_DATA,ruleWithout,false);
  checkPredicate(annotationUsagePredicate,annotationParseData,ruleWith,true);
  checkPredicate(annotationUsagePredicate,EMPTY_PARSE_DATA,ruleConfig,false);
  BuildCommandOptions buildOptions=command.buildCommandOptions;
  MoreAsserts.assertContainsOne(buildOptions.getArguments(),ruleWith.getFullyQualifiedName());
}
