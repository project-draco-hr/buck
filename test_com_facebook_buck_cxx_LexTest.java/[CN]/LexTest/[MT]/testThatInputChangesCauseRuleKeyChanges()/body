{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(FakeFileHashCache.createFromStrings(ImmutableMap.of("lex",Strings.repeat("a",40),"input",Strings.repeat("b",40),"different",Strings.repeat("c",40))),pathResolver);
  RuleKey defaultRuleKey=generateRuleKey(ruleKeyBuilderFactory,new Lex(params,pathResolver,DEFAULT_LEX,DEFAULT_FLAGS,DEFAULT_OUTPUT_SOURCE,DEFAULT_OUTPUT_HEADER,DEFAULT_INPUT));
  RuleKey lexChange=generateRuleKey(ruleKeyBuilderFactory,new Lex(params,pathResolver,new HashedFileTool(Paths.get("different")),DEFAULT_FLAGS,DEFAULT_OUTPUT_SOURCE,DEFAULT_OUTPUT_HEADER,DEFAULT_INPUT));
  assertNotEquals(defaultRuleKey,lexChange);
  RuleKey flagsChange=generateRuleKey(ruleKeyBuilderFactory,new Lex(params,pathResolver,DEFAULT_LEX,ImmutableList.of("-different"),DEFAULT_OUTPUT_SOURCE,DEFAULT_OUTPUT_HEADER,DEFAULT_INPUT));
  assertNotEquals(defaultRuleKey,flagsChange);
  RuleKey outputSourceChange=generateRuleKey(ruleKeyBuilderFactory,new Lex(params,pathResolver,DEFAULT_LEX,DEFAULT_FLAGS,Paths.get("different"),DEFAULT_OUTPUT_HEADER,DEFAULT_INPUT));
  assertNotEquals(defaultRuleKey,outputSourceChange);
  RuleKey outputHeaderChange=generateRuleKey(ruleKeyBuilderFactory,new Lex(params,pathResolver,DEFAULT_LEX,DEFAULT_FLAGS,DEFAULT_OUTPUT_SOURCE,Paths.get("different"),DEFAULT_INPUT));
  assertNotEquals(defaultRuleKey,outputHeaderChange);
  RuleKey inputChange=generateRuleKey(ruleKeyBuilderFactory,new Lex(params,pathResolver,DEFAULT_LEX,DEFAULT_FLAGS,DEFAULT_OUTPUT_SOURCE,DEFAULT_OUTPUT_HEADER,new TestSourcePath("different")));
  assertNotEquals(defaultRuleKey,inputChange);
}
