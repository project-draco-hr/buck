{
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  steps.add(new MakeCleanDirectoryStep(unpackDirectory));
  steps.add(new UnzipStep(aarFile.resolve(),unpackDirectory));
  steps.add(new TouchStep(getProguardConfig()));
  steps.add(new MkdirStep(getAssetsDirectory()));
  steps.add(new MkdirStep(uberClassesJar.getParent()));
  steps.add(new AbstractExecutionStep("create_uber_classes_jar"){
    @Override public int execute(    ExecutionContext context){
      Path classesJar=unpackDirectory.resolve("classes.jar");
      Path libsDirectory=unpackDirectory.resolve("libs");
      ProjectFilesystem projectFilesystem=context.getProjectFilesystem();
      if (!projectFilesystem.exists(libsDirectory) || projectFilesystem.listFiles(libsDirectory).length == 0) {
        try {
          projectFilesystem.copy(classesJar,uberClassesJar,CopySourceMode.FILE);
        }
 catch (        IOException e) {
          context.logError(e,"Failed to copy from %s to %s",classesJar,uberClassesJar);
          return 1;
        }
      }
 else {
        ImmutableSet.Builder<Path> entriesToJarBuilder=ImmutableSet.builder();
        entriesToJarBuilder.add(classesJar);
        for (        File file : projectFilesystem.listFiles(libsDirectory)) {
          entriesToJarBuilder.add(file.toPath());
        }
        ImmutableSet<Path> entriesToJar=entriesToJarBuilder.build();
        try {
          JarDirectoryStepHelper.createJarFile(uberClassesJar,entriesToJar,null,null,true,ImmutableList.<Pattern>of(),context);
        }
 catch (        IOException e) {
          context.logError(e,"Failed to jar %s into %s",entriesToJar,uberClassesJar);
          return 1;
        }
      }
      return 0;
    }
  }
);
  buildableContext.recordArtifactsInDirectory(unpackDirectory);
  buildableContext.recordArtifact(uberClassesJar);
  return steps.build();
}
