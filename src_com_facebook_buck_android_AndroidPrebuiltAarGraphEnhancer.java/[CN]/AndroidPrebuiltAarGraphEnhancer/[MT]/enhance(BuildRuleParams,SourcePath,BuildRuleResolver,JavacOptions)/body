{
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  BuildTarget originalBuildTarget=originalBuildRuleParams.getBuildTarget();
  BuildRuleParams unzipAarParams=originalBuildRuleParams.copyWithChanges(UNZIP_AAR_TYPE,BuildTargets.createFlavoredBuildTarget(originalBuildTarget,AAR_UNZIP_FLAVOR),Suppliers.ofInstance(originalBuildRuleParams.getDeclaredDeps()),Suppliers.ofInstance(originalBuildRuleParams.getExtraDeps()));
  UnzipAar unzipAar=new UnzipAar(unzipAarParams,pathResolver,aarFile);
  ruleResolver.addToIndex(unzipAar);
  BuildRuleParams classesJarParams=originalBuildRuleParams.copyWithChanges(OutputOnlyBuildRule.TYPE,BuildTargets.createFlavoredBuildTarget(originalBuildTarget,AAR_CLASSES_JAR_FLAVOR),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(unzipAar)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  OutputOnlyBuildRule classesJar=new OutputOnlyBuildRule(classesJarParams,pathResolver,unzipAar.getPathToClassesJar());
  ruleResolver.addToIndex(classesJar);
  BuildRuleParams prebuiltJarParams=originalBuildRuleParams.copyWithChanges(PrebuiltJarDescription.TYPE,BuildTargets.createFlavoredBuildTarget(originalBuildTarget,AAR_PREBUILT_JAR_FLAVOR),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(unzipAar)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  PrebuiltJar prebuiltJar=new PrebuiltJar(prebuiltJarParams,pathResolver,new BuildTargetSourcePath(classesJar.getBuildTarget()),Optional.<SourcePath>absent(),Optional.<SourcePath>absent(),Optional.<String>absent());
  ruleResolver.addToIndex(prebuiltJar);
  BuildRuleParams manifestParams=originalBuildRuleParams.copyWithChanges(OutputOnlyBuildRule.TYPE,BuildTargets.createFlavoredBuildTarget(originalBuildTarget,AAR_MANIFEST),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(unzipAar)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  OutputOnlyBuildRule manifest=new OutputOnlyBuildRule(manifestParams,pathResolver,unzipAar.getAndroidManifest());
  ruleResolver.addToIndex(manifest);
  BuildRuleParams androidResourceParams=originalBuildRuleParams.copyWithChanges(AndroidResourceDescription.TYPE,BuildTargets.createFlavoredBuildTarget(originalBuildTarget,AAR_ANDROID_RESOURCE_FLAVOR),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(manifest)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  ImmutableSortedSet<Path> resSrcs=ImmutableSortedSet.of();
  ImmutableSortedSet<Path> assetsSrcs=ImmutableSortedSet.of();
  AndroidResource androidResource=new AndroidResource(androidResourceParams,pathResolver,ImmutableSortedSet.<BuildRule>of(unzipAar),unzipAar.getResDirectory(),resSrcs,null,unzipAar.getAssetsDirectory(),assetsSrcs,new BuildTargetSourcePath(manifest.getBuildTarget()),false);
  ruleResolver.addToIndex(androidResource);
  BuildRuleParams androidLibraryParams=originalBuildRuleParams.copyWithChanges(AndroidLibraryDescription.TYPE,originalBuildTarget,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(androidResource,prebuiltJar,unzipAar)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  return new AndroidPrebuiltAar(androidLibraryParams,pathResolver,unzipAar.getProguardConfig(),prebuiltJar,androidResource,javacOptions);
}
