{
  Preconditions.checkArgument(buildPlatform.equals(Platform.MACOS),String.format("%s can only currently run on Mac OS X.",AppleCxxPlatform.class));
  this.name=Preconditions.checkNotNull(name);
  this.flavor=Preconditions.checkNotNull(flavor);
  ImmutableList<Path> toolSearchPaths=ImmutableList.of(sdkPaths.sdkPath().resolve(USR_BIN),sdkPaths.platformDeveloperPath().resolve(USR_BIN),sdkPaths.toolchainPath().resolve(USR_BIN));
  SourcePath clangPath=getTool("clang",toolSearchPaths);
  SourcePath clangXxPath=getTool("clang++",toolSearchPaths);
  this.as=clangPath;
  this.asflags=ImmutableList.of();
  this.aspp=clangPath;
  this.asppflags=ImmutableList.of();
  this.cc=clangPath;
  this.cflags=ImmutableList.of();
  this.cpp=clangPath;
  this.cppflags=ImmutableList.of();
  this.cxx=clangXxPath;
  this.cxxflags=ImmutableList.of();
  this.cxxpp=clangXxPath;
  this.cxxppflags=ImmutableList.of();
  this.cxxld=clangXxPath;
  this.cxxldflags=ImmutableList.of();
  this.lex=getTool("lex",toolSearchPaths);
  this.lexflags=ImmutableList.of();
  this.yacc=getTool("yacc",toolSearchPaths);
  this.yaccflags=ImmutableList.of();
  this.ld=new DarwinLinker(getTool("libtool",toolSearchPaths));
  this.ldflags=ImmutableList.of();
  this.ar=getTool("ar",toolSearchPaths);
  this.arflags=ImmutableList.of();
}
