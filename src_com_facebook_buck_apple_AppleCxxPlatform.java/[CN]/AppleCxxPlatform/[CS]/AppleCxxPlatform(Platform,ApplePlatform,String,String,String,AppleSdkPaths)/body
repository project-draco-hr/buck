{
  Preconditions.checkArgument(hostPlatform.equals(Platform.MACOS),String.format("%s can only currently run on Mac OS X.",AppleCxxPlatform.class));
  this.flavor=new Flavor(targetSdkName + "-" + targetArchitecture);
  ImmutableList<Path> toolSearchPaths=ImmutableList.of(sdkPaths.sdkPath().resolve(USR_BIN),sdkPaths.platformDeveloperPath().resolve(USR_BIN),sdkPaths.toolchainPath().resolve(USR_BIN));
  SourcePath clangPath=getTool("clang",toolSearchPaths);
  SourcePath clangXxPath=getTool("clang++",toolSearchPaths);
  this.as=clangPath;
  this.asflags=ImmutableList.of();
  this.aspp=clangPath;
  this.asppflags=ImmutableList.of();
  this.cc=clangPath;
  ImmutableList.Builder<String> cflagsBuilder=ImmutableList.builder();
  cflagsBuilder.add("-isysroot",sdkPaths.sdkPath().toString());
  cflagsBuilder.add("-arch",targetArchitecture);
switch (targetPlatform) {
case MACOS:
    cflagsBuilder.add("-mmacosx-version-min=" + targetVersion);
  break;
case IPHONESIMULATOR:
case IPHONEOS:
cflagsBuilder.add("-mios-version-min=" + targetVersion);
break;
}
this.cflags=cflagsBuilder.build();
this.cpp=clangPath;
this.cppflags=ImmutableList.of();
this.cxx=clangXxPath;
this.cxxflags=ImmutableList.of();
this.cxxpp=clangXxPath;
this.cxxppflags=ImmutableList.of();
this.cxxld=clangXxPath;
this.cxxldflags=ImmutableList.of();
this.lex=getTool("lex",toolSearchPaths);
this.lexflags=ImmutableList.of();
this.yacc=getTool("yacc",toolSearchPaths);
this.yaccflags=ImmutableList.of();
this.ld=new DarwinLinker(getTool("libtool",toolSearchPaths));
this.ldflags=ImmutableList.of();
this.ar=getTool("ar",toolSearchPaths);
this.arflags=ImmutableList.of();
this.debugPathSanitizer=Optional.of(new DebugPathSanitizer(250,File.separatorChar,Paths.get("."),ImmutableBiMap.<Path,Path>of()));
}
