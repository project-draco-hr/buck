{
  List<Module> modules=createModulesForProjectConfigs();
  writeJsonConfig(jsonTempFile,modules);
  List<String> modifiedFiles=Lists.newArrayList();
  ExitCodeAndStdOut result=processJsonConfig(jsonTempFile);
  if (result.exitCode != 0) {
    return result.exitCode;
  }
 else {
    Iterable<String> paths=Splitter.on('\n').trimResults().omitEmptyStrings().split(result.stdOut);
    Iterables.addAll(modifiedFiles,paths);
  }
  List<String> modifiedPropertiesFiles=generateProjectDotPropertiesFiles(modules);
  modifiedFiles.addAll(modifiedPropertiesFiles);
  CompilerXml compilerXml=new CompilerXml(modules);
  final String pathToCompilerXml=".idea/compiler.xml";
  File compilerXmlFile=projectFilesystem.getFileForRelativePath(pathToCompilerXml);
  if (compilerXml.write(compilerXmlFile)) {
    modifiedFiles.add(pathToCompilerXml);
  }
  if (pathToPostProcessScript.isPresent()) {
    String pathToScript=pathToPostProcessScript.get();
    Process process=Runtime.getRuntime().exec(new String[]{pathToScript});
    processExecutor.execute(process);
  }
  if (!modifiedFiles.isEmpty()) {
    SortedSet<String> modifiedFilesInSortedForder=Sets.newTreeSet(modifiedFiles);
    stdOut.printf("MODIFIED FILES:\n%s\n",Joiner.on('\n').join(modifiedFilesInSortedForder));
  }
  return 0;
}
