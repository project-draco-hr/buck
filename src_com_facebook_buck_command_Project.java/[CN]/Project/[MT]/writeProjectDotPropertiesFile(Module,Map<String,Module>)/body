{
  String pathToImlFile=module.pathToImlFile;
  SortedSet<String> references=Sets.newTreeSet();
  for (  DependentModule dependency : module.dependencies) {
    if (!dependency.isModule()) {
      continue;
    }
    Module dep=nameToModuleIndex.get(dependency.getModuleName());
    if (dep == null) {
      throw new HumanReadableException("You must define a project_config() in %s " + "containing %s. The project_config() in %s transitively depends on it.",module.target.getBasePathWithSlash() + BuckConstant.BUILD_RULES_FILE_NAME,dependency.getTargetName(),module.target.getFullyQualifiedName());
    }
    if (!dep.isAndroidModule()) {
      continue;
    }
    String relativePath=Paths.computeRelativePath(Paths.getParentPath(pathToImlFile),Paths.getParentPath(dep.pathToImlFile));
    if (relativePath.endsWith("/")) {
      relativePath=relativePath.substring(0,relativePath.length() - 1);
    }
    if (relativePath.isEmpty()) {
      continue;
    }
    references.add(relativePath);
  }
  StringBuilder builder=new StringBuilder();
  builder.append("# This file is automatically generated by Buck.\n");
  builder.append("# Do not modify this file -- YOUR CHANGES WILL BE ERASED!\n");
  builder.append(String.format("target=%s\n",AndroidPlatformTarget.DEFAULT_ANDROID_PLATFORM_TARGET));
  builder.append("proguard.config=proguard.cfg\n");
  boolean isAndroidLibrary=module.isAndroidLibrary();
  if (isAndroidLibrary) {
    builder.append("android.library=" + isAndroidLibrary + "\n");
  }
  int index=1;
  for (  String path : references) {
    builder.append(String.format("android.library.reference.%d=%s\n",index,path));
    ++index;
  }
  final Charset charset=Charsets.US_ASCII;
  File outputFile=new File(createPathToProjectDotPropertiesFileFor(module));
  String properties=builder.toString();
  if (outputFile.exists() && Files.toString(outputFile,charset).equals(properties)) {
    return null;
  }
 else {
    Files.write(properties,outputFile,charset);
    return outputFile;
  }
}
