{
  final String basePathForRule=rule.getBuildTarget().getBasePath();
  new AbstractDependencyVisitor(rule,true){
    private final LinkedHashSet<DependentModule> librariesToAdd=Sets.newLinkedHashSet();
    private final LinkedHashSet<DependentModule> modulesToAdd=Sets.newLinkedHashSet();
    @Override public ImmutableSet<BuildRule> visit(    BuildRule dep){
      ImmutableSet<BuildRule> depsToVisit;
      if (rule.getProperties().is(PACKAGING) || dep instanceof AndroidResource || dep == rule) {
        depsToVisit=dep.getDeps();
      }
 else       if (dep.getProperties().is(LIBRARY) && dep instanceof ExportDependencies) {
        depsToVisit=((ExportDependencies)dep).getExportedDeps();
      }
 else       if (dep.getProperties().is(LIBRARY) && dep instanceof ExportDependencies) {
        depsToVisit=((ExportDependencies)dep).getExportedDeps();
      }
 else {
        depsToVisit=ImmutableSet.of();
      }
      if (isForTests && depsToVisit.isEmpty() && dep.getBuildTarget().getBasePath().equals(basePathForRule)&& !dep.equals(srcTarget)) {
        depsToVisit=dep.getDeps();
      }
      DependentModule dependentModule;
      if (dep instanceof PrebuiltJar) {
        libraryJars.add(dep);
        String libraryName=getIntellijNameForRule(dep);
        dependentModule=DependentModule.newLibrary(dep.getBuildTarget(),libraryName);
      }
 else       if (dep instanceof NdkLibrary) {
        String moduleName=getIntellijNameForRule(dep);
        dependentModule=DependentModule.newModule(dep.getBuildTarget(),moduleName);
      }
 else       if (dep.getFullyQualifiedName().startsWith(ANDROID_GEN_BUILD_TARGET_PREFIX)) {
        return depsToVisit;
      }
 else       if ((dep instanceof JavaLibrary) || dep instanceof AndroidResource) {
        String moduleName=getIntellijNameForRule(dep);
        dependentModule=DependentModule.newModule(dep.getBuildTarget(),moduleName);
      }
 else {
        return depsToVisit;
      }
      if (isForTests) {
        dependentModule.scope="TEST";
      }
 else {
        String currentScope=dependentModule.scope;
        dependentModule.scope="TEST";
        if (dependencies.contains(dependentModule)) {
          dependencies.remove(dependentModule);
        }
        dependentModule.scope=currentScope;
      }
      if (dependentModule.isLibrary()) {
        librariesToAdd.add(dependentModule);
      }
 else {
        modulesToAdd.add(dependentModule);
      }
      return depsToVisit;
    }
    @Override protected void onComplete(){
      dependencies.addAll(librariesToAdd);
      dependencies.addAll(modulesToAdd);
    }
  }
.start();
}
