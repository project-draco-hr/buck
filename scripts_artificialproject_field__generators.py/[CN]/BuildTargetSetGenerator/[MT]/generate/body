def generate(self, base_path, force_length=None):
    if (force_length is not None):
        length = force_length
    else:
        length = weighted_choice(self._lengths)
    type_extension_counts = collections.Counter()
    for i in range(length):
        type = weighted_choice(self._types)
        if self._process_output_extensions:
            extension = weighted_choice(self._output_extensions)
        else:
            extension = None
        type_extension_counts.update([(type, extension)])
    output = []
    for ((type, extension), count) in type_extension_counts.items():
        if self._process_output_extensions:
            options = self._context.gen_targets_with_output_by_type[type]
            options = [x for x in options if (self._get_output_extension(self._context.gen_target_data[x]) == extension)]
        else:
            options = self._context.gen_targets_by_type[type]
        if (count > len(options)):
            raise GenerationFailedException()
        output.extend(random.sample(options, count))
    return GeneratedField(output, output)
