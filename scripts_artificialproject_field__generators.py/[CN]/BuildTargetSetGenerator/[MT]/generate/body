def generate(self, base_path, force_length=None, only_targets_with_output=False):
    if (force_length is not None):
        length = force_length
    else:
        length = weighted_choice(self._lengths)
    type_counts = collections.Counter()
    types = collections.Counter(self._types)
    for i in range(length):
        type_counts.update([weighted_choice(types)])
    output = []
    for (type, count) in type_counts.items():
        if only_targets_with_output:
            options = self._context.gen_targets_with_output_by_type[type]
        else:
            options = self._context.gen_targets_by_type[type]
        if (count > len(options)):
            raise GenerationFailedException()
        output.extend(random.sample(options, count))
    return GeneratedField(output, output)
