def _update_choice_probability(self):
    self._choice_probability_by_type_and_extension = dict()
    for ((type, extension), used_values) in self._unique_values_by_type_and_extension.items():
        all_values = (x for x in self._context.input_target_data.values() if (x['buck.type'] == type))
        if self._process_output_extensions:
            all_values = (x for x in all_values if (self._get_output_extension(x) == extension))
        num = len(used_values)
        denom = sum((1 for x in all_values))
        probability = (float(num) / denom)
        key = (type, extension)
        self._choice_probability_by_type_and_extension[key] = probability
