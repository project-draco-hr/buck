{
  BuildRuleResolver resolver=new BuildRuleResolver();
  AppleAssetCatalog assetCatalog1=(AppleAssetCatalog)createBuildRuleWithDefaults(BuildTarget.builder("//foo","asset_catalog1").build(),resolver,ImmutableSortedSet.<BuildRule>of(),new AppleAssetCatalogDescription(),new Function<AppleAssetCatalogDescription.Arg,AppleAssetCatalogDescription.Arg>(){
    @Override public AppleAssetCatalogDescription.Arg apply(    AppleAssetCatalogDescription.Arg input){
      input.dirs=ImmutableSet.of(Paths.get("AssetCatalog1.xcassets"));
      return input;
    }
  }
);
  resolver.addToIndex(assetCatalog1);
  AppleAssetCatalog assetCatalog2=(AppleAssetCatalog)createBuildRuleWithDefaults(BuildTarget.builder("//foo","asset_catalog2").build(),resolver,ImmutableSortedSet.<BuildRule>of(),new AppleAssetCatalogDescription(),new Function<AppleAssetCatalogDescription.Arg,AppleAssetCatalogDescription.Arg>(){
    @Override public AppleAssetCatalogDescription.Arg apply(    AppleAssetCatalogDescription.Arg input){
      input.dirs=ImmutableSet.of(Paths.get("AssetCatalog2.xcassets"));
      input.copyToBundles=Optional.of(Boolean.TRUE);
      return input;
    }
  }
);
  resolver.addToIndex(assetCatalog2);
  BuildTarget testBuildTarget=BuildTarget.builder("//foo","binary").build();
  NewNativeTargetProjectMutator mutator=mutatorWithCommonDefaults(testBuildTarget);
  mutator.setAssetCatalogs(Paths.get("compile_asset_catalogs"),ImmutableSet.of(assetCatalog1,assetCatalog2));
  NewNativeTargetProjectMutator.Result result=mutator.buildTargetAndAddToProject(generatedProject);
  assertTrue(hasShellScriptPhaseToCompileCommonAndSplitAssetCatalogs(result.target));
}
