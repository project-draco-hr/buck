{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  BuildRule resourceRule1=ruleResolver.addToIndex(AndroidResourceRuleBuilder.newBuilder().setResolver(pathResolver).setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res1")).setRDotJavaPackage("com.facebook").setRes(Paths.get("android_res/com/example/res1")).build());
  setAndroidResourceBuildOutput(resourceRule1,RESOURCE_RULE1_KEY);
  BuildRule resourceRule2=ruleResolver.addToIndex(AndroidResourceRuleBuilder.newBuilder().setResolver(pathResolver).setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res2")).setRDotJavaPackage("com.facebook").setRes(Paths.get("android_res/com/example/res2")).build());
  setAndroidResourceBuildOutput(resourceRule2,RESOURCE_RULE2_KEY);
  DummyRDotJava dummyRDotJava=new DummyRDotJava(new FakeBuildRuleParamsBuilder(BuildTargetFactory.newInstance("//java/base:rule")).build(),pathResolver,ImmutableSet.of((HasAndroidResourceDeps)resourceRule1,(HasAndroidResourceDeps)resourceRule2),DEFAULT_JAVAC,ANDROID_JAVAC_OPTIONS);
  FakeBuildableContext buildableContext=new FakeBuildableContext();
  List<Step> steps=dummyRDotJava.getBuildSteps(EasyMock.createMock(BuildContext.class),buildableContext);
  assertEquals("DummyRDotJava returns an incorrect number of Steps.",6,steps.size());
  String rDotJavaSrcFolder="buck-out/bin/java/base/__rule_rdotjava_src__";
  String rDotJavaBinFolder="buck-out/bin/java/base/__rule_rdotjava_bin__";
  String rDotJavaAbiFolder="buck-out/gen/java/base/__rule_dummyrdotjava_abi__";
  List<String> expectedStepDescriptions=Lists.newArrayList(makeCleanDirDescription(rDotJavaSrcFolder),mergeAndroidResourcesDescription(ImmutableList.of((AndroidResource)resourceRule1,(AndroidResource)resourceRule2)),makeCleanDirDescription(rDotJavaBinFolder),makeCleanDirDescription(rDotJavaAbiFolder),javacInMemoryDescription(rDotJavaBinFolder),"calculate_abi buck-out/bin/java/base/__rule_rdotjava_bin__");
  MoreAsserts.assertSteps("DummyRDotJava.getBuildSteps() must return these exact steps.",expectedStepDescriptions,steps,TestExecutionContext.newInstance());
  assertEquals(ImmutableSet.of(Paths.get(rDotJavaBinFolder)),buildableContext.getRecordedArtifactDirectories());
  Sha1HashCode expectedSha1=AndroidResource.ABI_HASHER.apply(ImmutableList.of((HasAndroidResourceDeps)resourceRule1,(HasAndroidResourceDeps)resourceRule2));
  assertEquals(expectedSha1,dummyRDotJava.getAbiKeyForDeps());
}
