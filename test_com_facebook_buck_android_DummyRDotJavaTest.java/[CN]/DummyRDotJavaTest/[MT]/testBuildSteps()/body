{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  FileHashCache hashCache=new DefaultFileHashCache(filesystem);
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(hashCache,pathResolver);
  BuildRule resourceRule1=ruleResolver.addToIndex(AndroidResourceRuleBuilder.newBuilder().setResolver(pathResolver).setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res1")).setRDotJavaPackage("com.facebook").setRes(new FakeSourcePath("android_res/com/example/res1")).build());
  setAndroidResourceBuildOutput(resourceRule1,RESOURCE_RULE1_KEY);
  BuildRule resourceRule2=ruleResolver.addToIndex(AndroidResourceRuleBuilder.newBuilder().setResolver(pathResolver).setBuildTarget(BuildTargetFactory.newInstance("//android_res/com/example:res2")).setRDotJavaPackage("com.facebook").setRes(new FakeSourcePath("android_res/com/example/res2")).build());
  setAndroidResourceBuildOutput(resourceRule2,RESOURCE_RULE2_KEY);
  DummyRDotJava dummyRDotJava=new DummyRDotJava(new FakeBuildRuleParamsBuilder(BuildTargetFactory.newInstance("//java/base:rule")).setProjectFilesystem(filesystem).build(),pathResolver,ImmutableSet.of((HasAndroidResourceDeps)resourceRule1,(HasAndroidResourceDeps)resourceRule2),new FakeSourcePath("abi.jar"),ANDROID_JAVAC_OPTIONS,false,Optional.<String>absent());
  FakeBuildableContext buildableContext=new FakeBuildableContext();
  List<Step> steps=dummyRDotJava.getBuildSteps(EasyMock.createMock(BuildContext.class),buildableContext);
  assertEquals("DummyRDotJava returns an incorrect number of Steps.",9,steps.size());
  String rDotJavaSrcFolder=BuildTargets.getScratchPath(filesystem,dummyRDotJava.getBuildTarget(),"__%s_rdotjava_src__").toString();
  String rDotJavaBinFolder=BuildTargets.getScratchPath(filesystem,dummyRDotJava.getBuildTarget(),"__%s_rdotjava_bin__").toString();
  String rDotJavaAbiFolder=BuildTargets.getGenPath(filesystem,dummyRDotJava.getBuildTarget(),"__%s_dummyrdotjava_abi__").toString();
  String rDotJavaOutputFolder=BuildTargets.getGenPath(filesystem,dummyRDotJava.getBuildTarget(),"__%s_dummyrdotjava_output__").toString();
  String rDotJavaOutputJar=MorePaths.pathWithPlatformSeparators(String.format("%s/%s.jar",rDotJavaOutputFolder,dummyRDotJava.getBuildTarget().getShortNameAndFlavorPostfix()));
  String genFolder=Paths.get("buck-out/gen/java/base/").toString();
  List<String> sortedSymbolsFiles=FluentIterable.from(ImmutableList.of((AndroidResource)resourceRule1,(AndroidResource)resourceRule2)).transform(Functions.toStringFunction()).toList();
  ImmutableSortedSet<Path> javaSourceFiles=ImmutableSortedSet.of(Paths.get(rDotJavaSrcFolder).resolve("com/facebook/R.java"));
  List<String> expectedStepDescriptions=Lists.newArrayList(makeCleanDirDescription(filesystem.resolve(rDotJavaSrcFolder)),"android-res-merge " + Joiner.on(' ').join(sortedSymbolsFiles),makeCleanDirDescription(filesystem.resolve(rDotJavaBinFolder)),makeCleanDirDescription(filesystem.resolve(rDotJavaAbiFolder)),makeCleanDirDescription(filesystem.resolve(rDotJavaOutputFolder)),String.format("mkdir -p %s",filesystem.resolve(genFolder)),RDotJava.createJavacStepForDummyRDotJavaFiles(javaSourceFiles,BuildTargets.getGenPath(filesystem,dummyRDotJava.getBuildTarget(),"__%s__srcs"),Paths.get(rDotJavaBinFolder),ANDROID_JAVAC_OPTIONS,null,pathResolver,new FakeProjectFilesystem()).getDescription(TestExecutionContext.newInstance()),String.format("jar cf %s  %s",rDotJavaOutputJar,rDotJavaBinFolder),String.format("calculate_abi %s",rDotJavaBinFolder));
  MoreAsserts.assertSteps("DummyRDotJava.getBuildSteps() must return these exact steps.",expectedStepDescriptions,steps,TestExecutionContext.newInstance());
  assertEquals(ImmutableSet.of(Paths.get(rDotJavaBinFolder),Paths.get(rDotJavaOutputJar)),buildableContext.getRecordedArtifacts());
  Sha1HashCode expectedSha1=AndroidResource.ABI_HASHER.apply(ImmutableList.of((HasAndroidResourceDeps)resourceRule1,(HasAndroidResourceDeps)resourceRule2));
  assertEquals(expectedSha1,dummyRDotJava.getAbiKeyForDeps(ruleKeyBuilderFactory));
}
