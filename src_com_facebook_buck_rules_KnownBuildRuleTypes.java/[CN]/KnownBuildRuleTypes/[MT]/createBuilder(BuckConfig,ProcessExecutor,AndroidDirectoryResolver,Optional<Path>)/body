{
  Platform platform=Platform.detect();
  AndroidBuckConfig androidConfig=new AndroidBuckConfig(config,platform);
  Optional<String> ndkVersion=androidConfig.getNdkVersion();
  if (!ndkVersion.isPresent()) {
    ndkVersion=androidDirectoryResolver.getNdkVersion();
  }
  AppleConfig appleConfig=new AppleConfig(config);
  ImmutableList<AppleCxxPlatform> appleCxxPlatforms=buildAppleCxxPlatforms(appleConfig.getAppleDeveloperDirectorySupplier(processExecutor),appleConfig.getExtraToolchainPaths(),appleConfig.getExtraPlatformPaths(),config,appleConfig,processExecutor);
  FlavorDomain<AppleCxxPlatform> platformFlavorsToAppleCxxPlatforms=FlavorDomain.from("Apple C++ Platform",appleCxxPlatforms);
  Optional<Path> ndkRoot=androidDirectoryResolver.getNdkOrAbsent();
  ImmutableMap.Builder<NdkCxxPlatforms.TargetCpuType,NdkCxxPlatform> ndkCxxPlatformsBuilder=ImmutableMap.builder();
  if (ndkRoot.isPresent()) {
    NdkCxxPlatformCompiler.Type compilerType=androidConfig.getNdkCompiler().or(NdkCxxPlatforms.DEFAULT_COMPILER_TYPE);
    String gccVersion=androidConfig.getNdkGccVersion().or(NdkCxxPlatforms.DEFAULT_GCC_VERSION);
    NdkCxxPlatformCompiler compiler=NdkCxxPlatformCompiler.builder().setType(compilerType).setVersion(compilerType == NdkCxxPlatformCompiler.Type.GCC ? gccVersion : androidConfig.getNdkClangVersion().or(NdkCxxPlatforms.DEFAULT_CLANG_VERSION)).setGccVersion(gccVersion).build();
    ndkCxxPlatformsBuilder.putAll(NdkCxxPlatforms.getPlatforms(new ProjectFilesystem(ndkRoot.get()),compiler,androidConfig.getNdkCxxRuntime().or(NdkCxxPlatforms.DEFAULT_CXX_RUNTIME),androidConfig.getNdkAppPlatform().or(NdkCxxPlatforms.DEFAULT_TARGET_APP_PLATFORM),androidConfig.getNdkCpuAbis().or(NdkCxxPlatforms.DEFAULT_CPU_ABIS),platform));
  }
  ImmutableMap<NdkCxxPlatforms.TargetCpuType,NdkCxxPlatform> ndkCxxPlatforms=ndkCxxPlatformsBuilder.build();
  CxxBuckConfig cxxBuckConfig=new CxxBuckConfig(config);
  ImmutableMap.Builder<Flavor,CxxPlatform> cxxPlatformsBuilder=ImmutableMap.builder();
  for (  NdkCxxPlatform ndkCxxPlatform : ndkCxxPlatforms.values()) {
    cxxPlatformsBuilder.put(ndkCxxPlatform.getCxxPlatform().getFlavor(),ndkCxxPlatform.getCxxPlatform());
  }
  for (  AppleCxxPlatform appleCxxPlatform : platformFlavorsToAppleCxxPlatforms.getValues()) {
    cxxPlatformsBuilder.put(appleCxxPlatform.getCxxPlatform().getFlavor(),appleCxxPlatform.getCxxPlatform());
  }
  CxxPlatform systemDefaultCxxPlatform=getHostCxxPlatformFromConfig(cxxBuckConfig,cxxPlatformsBuilder.build(),DefaultCxxPlatforms.build(platform,cxxBuckConfig));
  cxxPlatformsBuilder.put(systemDefaultCxxPlatform.getFlavor(),systemDefaultCxxPlatform);
  ImmutableMap<Flavor,CxxPlatform> cxxPlatformsMap=cxxPlatformsBuilder.build();
  CxxPlatform defaultCxxPlatform=CxxPlatforms.getConfigDefaultCxxPlatform(cxxBuckConfig,cxxPlatformsMap,systemDefaultCxxPlatform);
  ImmutableSet<Flavor> cxxFlavors=CxxBuckConfig.getCxxFlavors(config);
  for (  Flavor flavor : cxxFlavors) {
    CxxBuckConfig flavoredCxxBuckConfig=new CxxBuckConfig(config,flavor);
    CxxPlatform defaultPlatformForFlavor=CxxPlatforms.getConfigDefaultCxxPlatform(flavoredCxxBuckConfig,cxxPlatformsMap,systemDefaultCxxPlatform);
    cxxPlatformsBuilder.put(flavor,CxxPlatforms.copyPlatformWithFlavorAndConfig(defaultPlatformForFlavor,flavoredCxxBuckConfig,flavor));
  }
  cxxPlatformsMap=cxxPlatformsBuilder.build();
  ExecutableFinder executableFinder=new ExecutableFinder();
  FlavorDomain<CxxPlatform> cxxPlatforms=new FlavorDomain<>("C/C++ platform",cxxPlatformsMap);
  DBuckConfig dBuckConfig=new DBuckConfig(config);
  ReactNativeBuckConfig reactNativeBuckConfig=new ReactNativeBuckConfig(config);
  RustBuckConfig rustBuckConfig=new RustBuckConfig(config);
  GoBuckConfig goBuckConfig=new GoBuckConfig(config,processExecutor,cxxPlatforms);
  HalideBuckConfig halideBuckConfig=new HalideBuckConfig(config);
  ProGuardConfig proGuardConfig=new ProGuardConfig(config);
  PythonBuckConfig pyConfig=new PythonBuckConfig(config,executableFinder);
  ImmutableList<PythonPlatform> pythonPlatformsList=pyConfig.getPythonPlatforms(processExecutor);
  FlavorDomain<PythonPlatform> pythonPlatforms=FlavorDomain.from("Python Platform",pythonPlatformsList);
  PythonBinaryDescription pythonBinaryDescription=new PythonBinaryDescription(pyConfig,pythonPlatforms,cxxBuckConfig,defaultCxxPlatform,cxxPlatforms);
  Optional<Long> defaultTestRuleTimeoutMs=config.getLong("test","rule_timeout");
  Downloader downloader;
  DownloadConfig downloadConfig=new DownloadConfig(config);
  if (downloadConfig.isDownloadAtRuntimeOk()) {
    downloader=StackedDownloader.createFromConfig(config,androidDirectoryResolver.getSdkOrAbsent());
  }
 else {
    downloader=new ExplodingDownloader();
  }
  Builder builder=builder();
  JavaBuckConfig javaConfig=new JavaBuckConfig(config);
  JavacOptions defaultJavacOptions=javaConfig.getDefaultJavacOptions();
  JavaOptions defaultJavaOptions=javaConfig.getDefaultJavaOptions();
  ScalaBuckConfig scalaConfig=new ScalaBuckConfig(config);
  InferBuckConfig inferBuckConfig=new InferBuckConfig(config);
  LuaConfig luaConfig=new LuaBuckConfig(config,executableFinder);
  CxxBinaryDescription cxxBinaryDescription=new CxxBinaryDescription(cxxBuckConfig,inferBuckConfig,defaultCxxPlatform,cxxPlatforms);
  CxxLibraryDescription cxxLibraryDescription=new CxxLibraryDescription(cxxBuckConfig,defaultCxxPlatform,inferBuckConfig,cxxPlatforms);
  CodeSignIdentityStore codeSignIdentityStore=CodeSignIdentityStore.fromSystem(processExecutor);
  ProvisioningProfileStore provisioningProfileStore=ProvisioningProfileStore.fromSearchPath(appleConfig.getProvisioningProfileSearchPath());
  AppleLibraryDescription appleLibraryDescription=new AppleLibraryDescription(cxxLibraryDescription,platformFlavorsToAppleCxxPlatforms,defaultCxxPlatform,codeSignIdentityStore,provisioningProfileStore,appleConfig.getDefaultDebugInfoFormatForLibraries());
  builder.register(appleLibraryDescription);
  AppleBinaryDescription appleBinaryDescription=new AppleBinaryDescription(cxxBinaryDescription,platformFlavorsToAppleCxxPlatforms,codeSignIdentityStore,provisioningProfileStore,appleConfig.getDefaultDebugInfoFormatForBinaries());
  builder.register(appleBinaryDescription);
  SwiftLibraryDescription swiftLibraryDescription=new SwiftLibraryDescription(cxxPlatforms,platformFlavorsToAppleCxxPlatforms,defaultCxxPlatform);
  builder.register(swiftLibraryDescription);
  HaskellBuckConfig haskellBuckConfig=new HaskellBuckConfig(config,executableFinder);
  builder.register(new HaskellLibraryDescription(haskellBuckConfig,cxxBuckConfig,cxxPlatforms));
  builder.register(new HaskellBinaryDescription(haskellBuckConfig,cxxPlatforms,defaultCxxPlatform));
  builder.register(new PrebuiltHaskellLibraryDescription());
  ListeningExecutorService dxExecutorService=MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(SmartDexingStep.determineOptimalThreadCount(),new CommandThreadFactory("SmartDexing")));
  builder.register(new AndroidAarDescription(new AndroidManifestDescription(),cxxBuckConfig,ndkCxxPlatforms));
  builder.register(new AndroidBinaryDescription(defaultJavaOptions,defaultJavacOptions,proGuardConfig,ndkCxxPlatforms,dxExecutorService,cxxBuckConfig));
  builder.register(new AndroidBuildConfigDescription(defaultJavacOptions));
  builder.register(new AndroidInstrumentationApkDescription(proGuardConfig,defaultJavacOptions,ndkCxxPlatforms,dxExecutorService,cxxBuckConfig));
  builder.register(new AndroidInstrumentationTestDescription(defaultJavaOptions,defaultTestRuleTimeoutMs));
  builder.register(new AndroidLibraryDescription(defaultJavacOptions));
  builder.register(new AndroidManifestDescription());
  builder.register(new AndroidPrebuiltAarDescription(defaultJavacOptions));
  builder.register(new AndroidReactNativeLibraryDescription(reactNativeBuckConfig));
  builder.register(new AndroidResourceDescription());
  builder.register(new ApkGenruleDescription());
  builder.register(new AppleAssetCatalogDescription());
  builder.register(new ApplePackageDescription(appleConfig,platformFlavorsToAppleCxxPlatforms));
  AppleBundleDescription appleBundleDescription=new AppleBundleDescription(appleBinaryDescription,appleLibraryDescription,cxxPlatforms,platformFlavorsToAppleCxxPlatforms,defaultCxxPlatform,codeSignIdentityStore,provisioningProfileStore,appleConfig.getDefaultDebugInfoFormatForBinaries());
  builder.register(appleBundleDescription);
  builder.register(new AppleResourceDescription());
  builder.register(new AppleTestDescription(appleConfig,appleLibraryDescription,cxxPlatforms,platformFlavorsToAppleCxxPlatforms,defaultCxxPlatform,codeSignIdentityStore,provisioningProfileStore,appleConfig.getAppleDeveloperDirectorySupplierForTests(processExecutor),appleConfig.getDefaultDebugInfoFormatForTests()));
  builder.register(new CoreDataModelDescription());
  builder.register(new CSharpLibraryDescription());
  builder.register(cxxBinaryDescription);
  builder.register(cxxLibraryDescription);
  builder.register(new CxxGenruleDescription(cxxPlatforms));
  builder.register(new CxxLuaExtensionDescription(luaConfig,cxxBuckConfig,cxxPlatforms));
  builder.register(new CxxPythonExtensionDescription(pythonPlatforms,cxxBuckConfig,cxxPlatforms));
  builder.register(new CxxTestDescription(cxxBuckConfig,defaultCxxPlatform,cxxPlatforms,defaultTestRuleTimeoutMs));
  builder.register(new DBinaryDescription(dBuckConfig,cxxBuckConfig,defaultCxxPlatform));
  builder.register(new DLibraryDescription(dBuckConfig,cxxBuckConfig,defaultCxxPlatform));
  builder.register(new DTestDescription(dBuckConfig,cxxBuckConfig,defaultCxxPlatform,defaultTestRuleTimeoutMs));
  builder.register(new ExportFileDescription());
  builder.register(new GenruleDescription());
  builder.register(new GenAidlDescription());
  builder.register(new GoBinaryDescription(goBuckConfig));
  builder.register(new GoLibraryDescription(goBuckConfig));
  builder.register(new GoTestDescription(goBuckConfig,defaultTestRuleTimeoutMs));
  GroovyBuckConfig groovyBuckConfig=new GroovyBuckConfig(config);
  builder.register(new GroovyLibraryDescription(groovyBuckConfig,defaultJavacOptions));
  builder.register(new GroovyTestDescription(groovyBuckConfig,defaultJavaOptions,defaultJavacOptions,defaultTestRuleTimeoutMs,testTempDirOverride));
  builder.register(new GwtBinaryDescription(defaultJavaOptions));
  builder.register(new HalideLibraryDescription(cxxBuckConfig,defaultCxxPlatform,cxxPlatforms,halideBuckConfig));
  builder.register(new IosReactNativeLibraryDescription(reactNativeBuckConfig));
  builder.register(new JavaBinaryDescription(defaultJavaOptions,defaultJavacOptions,defaultCxxPlatform));
  builder.register(new JavaLibraryDescription(defaultJavacOptions));
  builder.register(new JavaTestDescription(defaultJavaOptions,defaultJavacOptions,defaultTestRuleTimeoutMs,defaultCxxPlatform,testTempDirOverride));
  builder.register(new KeystoreDescription());
  builder.register(new LuaBinaryDescription(luaConfig,cxxBuckConfig,defaultCxxPlatform,cxxPlatforms,pythonPlatforms));
  builder.register(new LuaLibraryDescription());
  builder.register(new NdkLibraryDescription(ndkVersion,ndkCxxPlatforms));
  OCamlBuckConfig ocamlBuckConfig=new OCamlBuckConfig(platform,config);
  builder.register(new OCamlBinaryDescription(ocamlBuckConfig));
  builder.register(new OCamlLibraryDescription(ocamlBuckConfig));
  builder.register(new PrebuiltCxxLibraryDescription(cxxBuckConfig,cxxPlatforms));
  builder.register(new PrebuiltDotNetLibraryDescription());
  builder.register(new PrebuiltJarDescription());
  builder.register(new PrebuiltNativeLibraryDescription());
  builder.register(new PrebuiltOCamlLibraryDescription());
  builder.register(new PrebuiltPythonLibraryDescription());
  builder.register(new ProjectConfigDescription());
  builder.register(pythonBinaryDescription);
  builder.register(new PythonLibraryDescription());
  builder.register(new PythonTestDescription(pythonBinaryDescription,pyConfig,pythonPlatforms,cxxBuckConfig,defaultCxxPlatform,defaultTestRuleTimeoutMs,cxxPlatforms));
  builder.register(new RemoteFileDescription(downloader));
  builder.register(new RobolectricTestDescription(defaultJavaOptions,defaultJavacOptions,defaultTestRuleTimeoutMs,defaultCxxPlatform,testTempDirOverride));
  builder.register(new RustBinaryDescription(rustBuckConfig));
  builder.register(new RustLibraryDescription(rustBuckConfig));
  builder.register(new ScalaLibraryDescription(scalaConfig));
  builder.register(new ScalaTestDescription(scalaConfig,defaultJavaOptions,defaultTestRuleTimeoutMs,defaultCxxPlatform,testTempDirOverride));
  builder.register(new ShBinaryDescription());
  builder.register(new ShTestDescription(defaultTestRuleTimeoutMs));
  ThriftBuckConfig thriftBuckConfig=new ThriftBuckConfig(config);
  builder.register(new ThriftLibraryDescription(thriftBuckConfig,ImmutableList.of(new ThriftJavaEnhancer(thriftBuckConfig,defaultJavacOptions),new ThriftCxxEnhancer(thriftBuckConfig,cxxLibraryDescription,false),new ThriftCxxEnhancer(thriftBuckConfig,cxxLibraryDescription,true),new ThriftPythonEnhancer(thriftBuckConfig,ThriftPythonEnhancer.Type.NORMAL),new ThriftPythonEnhancer(thriftBuckConfig,ThriftPythonEnhancer.Type.TWISTED),new ThriftPythonEnhancer(thriftBuckConfig,ThriftPythonEnhancer.Type.ASYNCIO))));
  builder.register(new WorkerToolDescription());
  builder.register(new XcodePostbuildScriptDescription());
  builder.register(new XcodePrebuildScriptDescription());
  builder.register(new XcodeWorkspaceConfigDescription());
  builder.register(new ZipDescription());
  builder.setCxxPlatforms(cxxPlatforms);
  builder.setDefaultCxxPlatform(defaultCxxPlatform);
  return builder;
}
