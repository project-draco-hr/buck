{
  Optional<String> ndkVersion=config.getNdkVersion();
  if (!ndkVersion.isPresent()) {
    ndkVersion=androidDirectoryResolver.getNdkVersion();
  }
  Builder builder=builder();
  JavacOptions androidBinaryOptions=JavacOptions.builder(JavacOptions.DEFAULTS).setJavaCompilerEnvironment(javacEnv).build();
  builder.register(new AndroidBinaryDescription(androidBinaryOptions,config.getProguardJarOverride()));
  builder.register(new AndroidBuildConfigDescription());
  builder.register(new AndroidInstrumentationApkDescription());
  builder.register(new AndroidLibraryDescription(javacEnv));
  builder.register(new AndroidManifestDescription());
  builder.register(new AndroidPrebuiltAarDescription());
  builder.register(new AndroidResourceDescription());
  builder.register(new ApkGenruleDescription());
  builder.register(new AppleAssetCatalogDescription());
  builder.register(new BuckExtensionDescription());
  builder.register(new CoreDataModelDescription());
  builder.register(new CppBinaryDescription());
  builder.register(new CppLibraryDescription());
  builder.register(new ExportFileDescription());
  builder.register(new GenruleDescription());
  builder.register(new GenAidlDescription());
  builder.register(new GenParcelableDescription());
  builder.register(new GwtBinaryDescription());
  builder.register(new KeystoreDescription());
  builder.register(new JavaBinaryDescription());
  builder.register(new JavaLibraryDescription(javacEnv));
  builder.register(new JavaTestDescription(javacEnv));
  builder.register(new IosBinaryDescription());
  builder.register(new IosLibraryDescription());
  builder.register(new IosPostprocessResourcesDescription());
  builder.register(new IosResourceDescription());
  builder.register(new IosTestDescription());
  builder.register(new JavaBinaryDescription());
  builder.register(new MacosxBinaryDescription());
  builder.register(new MacosxFrameworkDescription());
  builder.register(new NdkLibraryDescription(ndkVersion));
  builder.register(new OsxResourceDescription());
  builder.register(new PrebuiltJarDescription());
  builder.register(new PrebuiltNativeLibraryDescription());
  builder.register(new ProjectConfigDescription());
  builder.register(new PythonBinaryDescription());
  builder.register(new PythonLibraryDescription());
  builder.register(new RobolectricTestDescription(javacEnv));
  builder.register(new ShBinaryDescription());
  builder.register(new ShTestDescription());
  builder.register(new ThriftLibraryDescription());
  builder.register(new XcodeNativeDescription());
  builder.register(new XcodeProjectConfigDescription());
  builder.register(new XcodeWorkspaceConfigDescription());
  return builder;
}
