{
  Optional<String> ndkVersion=config.getNdkVersion();
  if (!ndkVersion.isPresent()) {
    ndkVersion=androidDirectoryResolver.getNdkVersion();
  }
  Builder builder=builder();
  JavacOptions androidBinaryOptions=JavacOptions.builder(JavacOptions.DEFAULTS).setJavaCompilerEnviornment(javacEnv).build();
  builder.register(new AndroidBinaryDescription(androidBinaryOptions,config.getProguardJarOverride()));
  builder.register(new AndroidInstrumentationApkDescription());
  builder.register(new AndroidManifestDescription());
  builder.register(new AndroidResourceDescription());
  builder.register(new ApkGenruleDescription());
  builder.register(new CppBinaryDescription());
  builder.register(new CppLibraryDescription());
  builder.register(new ExportFileDescription());
  builder.register(new GenruleDescription());
  builder.register(new GenAidlDescription());
  builder.register(new GenParcelableDescription());
  builder.register(new KeystoreDescription());
  builder.register(new IosBinaryDescription());
  builder.register(new IosLibraryDescription());
  builder.register(new IosResourceDescription());
  builder.register(new IosTestDescription());
  builder.register(new JavaBinaryDescription());
  builder.register(new NdkLibraryDescription(ndkVersion));
  builder.register(new PrebuiltJarDescription());
  builder.register(new PrebuiltNativeLibraryDescription());
  builder.register(new ProjectConfigDescription());
  builder.register(new PythonBinaryDescription());
  builder.register(new PythonLibraryDescription());
  builder.register(new XcodeNativeDescription());
  builder.register(new XcodeProjectConfigDescription());
  builder.register(BuildRuleType.ANDROID_LIBRARY,new AndroidLibraryBuildRuleFactory(javacEnv.getJavacPath(),javacEnv.getJavacVersion()));
  builder.register(BuildRuleType.JAVA_LIBRARY,new JavaLibraryBuildRuleFactory(javacEnv.getJavacPath(),javacEnv.getJavacVersion()));
  builder.register(BuildRuleType.JAVA_TEST,new JavaTestBuildRuleFactory());
  builder.register(BuildRuleType.ROBOLECTRIC_TEST,new RobolectricTestBuildRuleFactory());
  builder.register(BuildRuleType.SH_BINARY,new ShBinaryBuildRuleFactory());
  builder.register(BuildRuleType.SH_TEST,new ShTestBuildRuleFactory());
  return builder;
}
