{
  Platform platform=Platform.detect();
  Optional<String> ndkVersion=config.getNdkVersion();
  if (!ndkVersion.isPresent()) {
    ndkVersion=androidDirectoryResolver.getNdkVersion();
  }
  AppleConfig appleConfig=new AppleConfig(config);
  ThriftBuckConfig thriftBuckConfig=new ThriftBuckConfig(config);
  OCamlBuckConfig ocamlBuckConfig=new OCamlBuckConfig(platform,config);
  CxxBuckConfig cxxBuckConfig=new CxxBuckConfig(config);
  ImmutableMap.Builder<Flavor,CxxPlatform> cxxPlatformsBuilder=ImmutableMap.builder();
  DefaultCxxPlatform defaultCxxPlatform=new DefaultCxxPlatform(platform,config);
  cxxPlatformsBuilder.put(defaultCxxPlatform.asFlavor(),defaultCxxPlatform);
  Optional<Path> ndkRoot=androidDirectoryResolver.findAndroidNdkDir();
  if (ndkRoot.isPresent()) {
    cxxPlatformsBuilder.putAll(getNdkCxxPlatforms(ndkRoot.get(),platform));
  }
  FlavorDomain<CxxPlatform> cxxPlatforms=new FlavorDomain<>("C/C++ platform",cxxPlatformsBuilder.build());
  ProGuardConfig proGuardConfig=new ProGuardConfig(config);
  Optional<Path> pythonPathToPex=config.getPath("python","path_to_pex");
  Optional<Path> pythonPathToPythonTestMain=config.getPath("python","path_to_python_test_main");
  Optional<String> defaultMavenRepo=config.getValue("download","maven_repo");
  Downloader downloader=new Downloader(Optional.<Proxy>absent(),defaultMavenRepo);
  boolean downloadAtRuntimeOk=config.getBooleanValue("download","in_build",false);
  Builder builder=builder();
  JavacOptions androidBinaryOptions=JavacOptions.builder(JavacOptions.DEFAULTS).setJavaCompilerEnvironment(javacEnv).build();
  builder.register(new AndroidBinaryDescription(androidBinaryOptions,proGuardConfig));
  builder.register(new AndroidBuildConfigDescription());
  builder.register(new AndroidInstrumentationApkDescription(proGuardConfig));
  builder.register(new AndroidLibraryDescription(javacEnv));
  builder.register(new AndroidManifestDescription());
  builder.register(new AndroidPrebuiltAarDescription());
  builder.register(new AndroidResourceDescription());
  builder.register(new ApkGenruleDescription());
  builder.register(new AppleAssetCatalogDescription());
  builder.register(new AppleBinaryDescription(appleConfig));
  builder.register(new AppleBundleDescription());
  builder.register(new AppleLibraryDescription(appleConfig));
  builder.register(new AppleResourceDescription());
  builder.register(new AppleTestDescription());
  builder.register(new BuckExtensionDescription());
  builder.register(new CoreDataModelDescription());
  builder.register(new CxxBinaryDescription(cxxBuckConfig,defaultCxxPlatform,cxxPlatforms));
  builder.register(new CxxLibraryDescription(cxxBuckConfig,cxxPlatforms));
  builder.register(new CxxPythonExtensionDescription(cxxBuckConfig,cxxPlatforms));
  builder.register(new CxxTestDescription(cxxBuckConfig,defaultCxxPlatform,cxxPlatforms));
  builder.register(new ExportFileDescription());
  builder.register(new GenruleDescription());
  builder.register(new GenAidlDescription());
  builder.register(new GenParcelableDescription());
  builder.register(new GwtBinaryDescription());
  builder.register(new IosPostprocessResourcesDescription());
  builder.register(new JavaBinaryDescription());
  builder.register(new JavaLibraryDescription(javacEnv));
  builder.register(new JavaTestDescription(javacEnv));
  builder.register(new KeystoreDescription());
  builder.register(new NdkLibraryDescription(ndkVersion));
  builder.register(new OCamlBinaryDescription(ocamlBuckConfig));
  builder.register(new OCamlLibraryDescription(ocamlBuckConfig));
  builder.register(new PrebuiltCxxLibraryDescription(cxxPlatforms));
  builder.register(new PrebuiltJarDescription());
  builder.register(new PrebuiltNativeLibraryDescription());
  builder.register(new PrebuiltOCamlLibraryDescription());
  builder.register(new ProjectConfigDescription());
  builder.register(new PythonBinaryDescription(pythonPathToPex.or(PythonBinaryDescription.DEFAULT_PATH_TO_PEX),pythonEnv,defaultCxxPlatform,cxxPlatforms));
  builder.register(new PythonLibraryDescription());
  builder.register(new PythonTestDescription(pythonPathToPex.or(PythonBinaryDescription.DEFAULT_PATH_TO_PEX),pythonPathToPythonTestMain.or(PythonTestDescription.PYTHON_PATH_TO_PYTHON_TEST_MAIN),pythonEnv,defaultCxxPlatform,cxxPlatforms));
  builder.register(new RemoteFileDescription(downloadAtRuntimeOk,downloader));
  builder.register(new RobolectricTestDescription(javacEnv));
  builder.register(new ShBinaryDescription());
  builder.register(new ShTestDescription());
  builder.register(new ThriftLibraryDescription(thriftBuckConfig,ImmutableList.of(new ThriftJavaEnhancer(thriftBuckConfig,javacEnv),new ThriftCxxEnhancer(thriftBuckConfig,cxxBuckConfig,cxxPlatforms,false),new ThriftCxxEnhancer(thriftBuckConfig,cxxBuckConfig,cxxPlatforms,true),new ThriftPythonEnhancer(thriftBuckConfig,ThriftPythonEnhancer.Type.NORMAL),new ThriftPythonEnhancer(thriftBuckConfig,ThriftPythonEnhancer.Type.TWISTED))));
  builder.register(new XcodeProjectConfigDescription());
  builder.register(new XcodeWorkspaceConfigDescription());
  return builder;
}
