{
  Platform platform=Platform.detect();
  Optional<String> ndkVersion=config.getNdkVersion();
  if (!ndkVersion.isPresent()) {
    ndkVersion=androidDirectoryResolver.getNdkVersion();
  }
  AppleConfig appleConfig=new AppleConfig(config);
  ImmutableMap.Builder<CxxPlatform,AppleSdkPaths> appleCxxPlatformsToAppleSdkPathsBuilder=ImmutableMap.builder();
  buildAppleCxxPlatforms(appleConfig.getAppleDeveloperDirectorySupplier(processExecutor),appleConfig.getExtraToolchainPaths(),appleConfig.getExtraPlatformPaths(),platform,config,appleConfig,appleCxxPlatformsToAppleSdkPathsBuilder);
  ImmutableMap<CxxPlatform,AppleSdkPaths> appleCxxPlatformsToAppleSdkPaths=appleCxxPlatformsToAppleSdkPathsBuilder.build();
  ImmutableMap.Builder<AndroidBinary.TargetCpuType,NdkCxxPlatform> ndkCxxPlatformsBuilder=ImmutableMap.builder();
  Optional<Path> ndkRoot=androidDirectoryResolver.findAndroidNdkDir();
  if (ndkRoot.isPresent()) {
    ndkCxxPlatformsBuilder.putAll(getNdkCxxPlatforms(ndkRoot.get(),platform));
  }
  ImmutableMap<AndroidBinary.TargetCpuType,NdkCxxPlatform> ndkCxxPlatforms=ndkCxxPlatformsBuilder.build();
  CxxBuckConfig cxxBuckConfig=new CxxBuckConfig(config);
  ImmutableMap.Builder<Flavor,CxxPlatform> cxxPlatformsBuilder=ImmutableMap.builder();
  for (  NdkCxxPlatform ndkCxxPlatform : ndkCxxPlatforms.values()) {
    cxxPlatformsBuilder.put(ndkCxxPlatform.getCxxPlatform().getFlavor(),ndkCxxPlatform.getCxxPlatform());
  }
  for (  CxxPlatform appleCxxPlatform : appleCxxPlatformsToAppleSdkPaths.keySet()) {
    cxxPlatformsBuilder.put(appleCxxPlatform.getFlavor(),appleCxxPlatform);
  }
  Optional<String> defaultPlatform=cxxBuckConfig.getDefaultPlatform();
  CxxPlatform defaultCxxPlatform;
  ImmutableMap<Flavor,CxxPlatform> cxxPlatformsMap;
  if (defaultPlatform.isPresent()) {
    cxxPlatformsMap=cxxPlatformsBuilder.build();
    defaultCxxPlatform=cxxPlatformsMap.get(ImmutableFlavor.of(defaultPlatform.get()));
    if (defaultCxxPlatform == null) {
      throw new HumanReadableException("Cannot find default platform %s",defaultPlatform.get());
    }
  }
 else {
    defaultCxxPlatform=DefaultCxxPlatforms.build(platform,cxxBuckConfig);
    cxxPlatformsBuilder.put(defaultCxxPlatform.getFlavor(),defaultCxxPlatform);
    cxxPlatformsMap=cxxPlatformsBuilder.build();
  }
  FlavorDomain<CxxPlatform> cxxPlatforms=new FlavorDomain<>("C/C++ platform",cxxPlatformsMap);
  DBuckConfig dBuckConfig=new DBuckConfig(config);
  ProGuardConfig proGuardConfig=new ProGuardConfig(config);
  PythonBuckConfig pyConfig=new PythonBuckConfig(config,new ExecutableFinder());
  Optional<Path> pythonPathToPythonTestMain=pyConfig.getPathToTestMain();
  Optional<Long> testRuleTimeoutMs=config.getLong("test","rule_timeout");
  Optional<String> defaultMavenRepo=config.getValue("download","maven_repo");
  boolean downloadAtRuntimeOk=config.getBooleanValue("download","in_build",false);
  Downloader downloader;
  if (downloadAtRuntimeOk) {
    downloader=new HttpDownloader(Optional.<Proxy>absent(),defaultMavenRepo);
  }
 else {
    downloader=new ExplodingDownloader();
  }
  Builder builder=builder();
  JavaBuckConfig javaConfig=new JavaBuckConfig(config);
  JavacOptions defaultJavacOptions=javaConfig.getDefaultJavacOptions(processExecutor);
  JavacOptions androidBinaryOptions=JavacOptions.builder(defaultJavacOptions).build();
  CxxBinaryDescription cxxBinaryDescription=new CxxBinaryDescription(cxxBuckConfig,defaultCxxPlatform,cxxPlatforms,CxxSourceRuleFactory.Strategy.SEPARATE_PREPROCESS_AND_COMPILE);
  CxxLibraryDescription cxxLibraryDescription=new CxxLibraryDescription(cxxBuckConfig,cxxPlatforms,CxxSourceRuleFactory.Strategy.SEPARATE_PREPROCESS_AND_COMPILE);
  AppleLibraryDescription appleLibraryDescription=new AppleLibraryDescription(new CxxLibraryDescription(cxxBuckConfig,cxxPlatforms,CxxSourceRuleFactory.Strategy.COMBINED_PREPROCESS_AND_COMPILE),cxxPlatforms,appleCxxPlatformsToAppleSdkPaths);
  builder.register(appleLibraryDescription);
  AppleBinaryDescription appleBinaryDescription=new AppleBinaryDescription(new CxxBinaryDescription(cxxBuckConfig,defaultCxxPlatform,cxxPlatforms,CxxSourceRuleFactory.Strategy.COMBINED_PREPROCESS_AND_COMPILE),cxxPlatforms,appleCxxPlatformsToAppleSdkPaths);
  builder.register(appleBinaryDescription);
  builder.register(new AndroidAarDescription(new AndroidManifestDescription(),new JavaBinaryDescription(defaultJavacOptions,defaultCxxPlatform)));
  builder.register(new AndroidBinaryDescription(androidBinaryOptions,proGuardConfig,ndkCxxPlatforms));
  builder.register(new AndroidBuildConfigDescription(androidBinaryOptions));
  builder.register(new AndroidInstrumentationApkDescription(proGuardConfig,androidBinaryOptions,ndkCxxPlatforms));
  builder.register(new AndroidLibraryDescription(androidBinaryOptions));
  builder.register(new AndroidManifestDescription());
  builder.register(new AndroidPrebuiltAarDescription(androidBinaryOptions));
  builder.register(new AndroidResourceDescription());
  builder.register(new ApkGenruleDescription());
  builder.register(new AppleAssetCatalogDescription());
  builder.register(new AppleBundleDescription(appleBinaryDescription,appleLibraryDescription));
  builder.register(new AppleResourceDescription());
  builder.register(new AppleTestDescription(appleLibraryDescription));
  builder.register(new BuckExtensionDescription(defaultJavacOptions));
  builder.register(new CoreDataModelDescription());
  builder.register(cxxBinaryDescription);
  builder.register(cxxLibraryDescription);
  builder.register(new CxxPythonExtensionDescription(cxxBuckConfig,cxxPlatforms));
  builder.register(new CxxTestDescription(cxxBuckConfig,defaultCxxPlatform,cxxPlatforms));
  builder.register(new DBinaryDescription(dBuckConfig));
  builder.register(new DLibraryDescription(dBuckConfig));
  builder.register(new DTestDescription(dBuckConfig));
  builder.register(new ExportFileDescription());
  builder.register(new GenruleDescription());
  builder.register(new GenAidlDescription());
  builder.register(new GwtBinaryDescription());
  builder.register(new IosPostprocessResourcesDescription());
  builder.register(new JavaBinaryDescription(defaultJavacOptions,defaultCxxPlatform));
  builder.register(new JavaLibraryDescription(defaultJavacOptions));
  builder.register(new JavaTestDescription(defaultJavacOptions,testRuleTimeoutMs));
  builder.register(new KeystoreDescription());
  builder.register(new NdkLibraryDescription(ndkVersion,ndkCxxPlatforms));
  OCamlBuckConfig ocamlBuckConfig=new OCamlBuckConfig(platform,config);
  builder.register(new OCamlBinaryDescription(ocamlBuckConfig));
  builder.register(new OCamlLibraryDescription(ocamlBuckConfig));
  builder.register(new PrebuiltCxxLibraryDescription(cxxPlatforms));
  builder.register(new PrebuiltJarDescription());
  builder.register(new PrebuiltNativeLibraryDescription());
  builder.register(new PrebuiltOCamlLibraryDescription());
  builder.register(new ProjectConfigDescription());
  builder.register(new PythonBinaryDescription(pyConfig.getPathToPex(),pyConfig.getPathToPexExecuter(),pythonEnv,defaultCxxPlatform,cxxPlatforms));
  builder.register(new PythonLibraryDescription());
  builder.register(new PythonTestDescription(projectFilesystem,pyConfig.getPathToPex(),pyConfig.getPathToPexExecuter(),pythonPathToPythonTestMain,pythonEnv,defaultCxxPlatform,cxxPlatforms));
  builder.register(new RemoteFileDescription(downloader));
  builder.register(new RobolectricTestDescription(androidBinaryOptions,testRuleTimeoutMs));
  builder.register(new ShBinaryDescription());
  builder.register(new ShTestDescription());
  ThriftBuckConfig thriftBuckConfig=new ThriftBuckConfig(config);
  builder.register(new ThriftLibraryDescription(thriftBuckConfig,ImmutableList.of(new ThriftJavaEnhancer(thriftBuckConfig,defaultJavacOptions),new ThriftCxxEnhancer(thriftBuckConfig,cxxLibraryDescription,false),new ThriftCxxEnhancer(thriftBuckConfig,cxxLibraryDescription,true),new ThriftPythonEnhancer(thriftBuckConfig,ThriftPythonEnhancer.Type.NORMAL),new ThriftPythonEnhancer(thriftBuckConfig,ThriftPythonEnhancer.Type.TWISTED))));
  builder.register(new XcodeWorkspaceConfigDescription());
  return builder;
}
