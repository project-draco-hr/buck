{
  Platform platform=Platform.detect();
  AndroidBuckConfig androidConfig=new AndroidBuckConfig(config,platform);
  Optional<String> ndkVersion=androidConfig.getNdkVersion();
  if (!ndkVersion.isPresent()) {
    ndkVersion=androidDirectoryResolver.getNdkVersion();
  }
  AppleConfig appleConfig=new AppleConfig(config);
  ImmutableMap.Builder<Flavor,AppleCxxPlatform> platformFlavorsToAppleCxxPlatformsBuilder=ImmutableMap.builder();
  buildAppleCxxPlatforms(appleConfig.getAppleDeveloperDirectorySupplier(processExecutor),appleConfig.getExtraToolchainPaths(),appleConfig.getExtraPlatformPaths(),config,appleConfig,platformFlavorsToAppleCxxPlatformsBuilder);
  ImmutableMap<Flavor,AppleCxxPlatform> platformFlavorsToAppleCxxPlatforms=platformFlavorsToAppleCxxPlatformsBuilder.build();
  ImmutableMap.Builder<NdkCxxPlatforms.TargetCpuType,NdkCxxPlatform> ndkCxxPlatformsBuilder=ImmutableMap.builder();
  Optional<Path> ndkRoot=androidDirectoryResolver.findAndroidNdkDir();
  if (ndkRoot.isPresent()) {
    ndkCxxPlatformsBuilder.putAll(NdkCxxPlatforms.getPlatforms(ndkRoot.get(),androidConfig.getNdkAppPlatform().or("android-9"),platform));
  }
  ImmutableMap<NdkCxxPlatforms.TargetCpuType,NdkCxxPlatform> ndkCxxPlatforms=ndkCxxPlatformsBuilder.build();
  CxxBuckConfig cxxBuckConfig=new CxxBuckConfig(config);
  ImmutableMap.Builder<Flavor,CxxPlatform> cxxPlatformsBuilder=ImmutableMap.builder();
  for (  NdkCxxPlatform ndkCxxPlatform : ndkCxxPlatforms.values()) {
    cxxPlatformsBuilder.put(ndkCxxPlatform.getCxxPlatform().getFlavor(),ndkCxxPlatform.getCxxPlatform());
  }
  for (  Map.Entry<Flavor,AppleCxxPlatform> entry : platformFlavorsToAppleCxxPlatforms.entrySet()) {
    cxxPlatformsBuilder.put(entry.getKey(),entry.getValue().getCxxPlatform());
  }
  CxxPlatform systemDefaultCxxPlatform=DefaultCxxPlatforms.build(platform,cxxBuckConfig);
  cxxPlatformsBuilder.put(systemDefaultCxxPlatform.getFlavor(),systemDefaultCxxPlatform);
  ImmutableMap<Flavor,CxxPlatform> cxxPlatformsMap=cxxPlatformsBuilder.build();
  CxxPlatform defaultCxxPlatform=CxxPlatforms.getConfigDefaultCxxPlatform(cxxBuckConfig,cxxPlatformsMap,systemDefaultCxxPlatform);
  FlavorDomain<CxxPlatform> cxxPlatforms=new FlavorDomain<>("C/C++ platform",cxxPlatformsMap);
  DBuckConfig dBuckConfig=new DBuckConfig(config);
  ReactNativeBuckConfig reactNativeBuckConfig=new ReactNativeBuckConfig(config);
  ProGuardConfig proGuardConfig=new ProGuardConfig(config);
  PythonBuckConfig pyConfig=new PythonBuckConfig(config,new ExecutableFinder());
  Optional<Path> pythonPathToPythonTestMain=pyConfig.getPathToTestMain();
  Optional<Long> testRuleTimeoutMs=config.getLong("test","rule_timeout");
  Optional<String> defaultMavenRepo=config.getValue("download","maven_repo");
  boolean downloadAtRuntimeOk=config.getBooleanValue("download","in_build",false);
  Downloader downloader;
  if (downloadAtRuntimeOk) {
    downloader=new HttpDownloader(Optional.<Proxy>absent(),defaultMavenRepo);
  }
 else {
    downloader=new ExplodingDownloader();
  }
  Builder builder=builder();
  JavaBuckConfig javaConfig=new JavaBuckConfig(config);
  JavacOptions defaultJavacOptions=javaConfig.getDefaultJavacOptions(processExecutor);
  JavacOptions androidBinaryOptions=JavacOptions.builder(defaultJavacOptions).build();
  CxxBinaryDescription cxxBinaryDescription=new CxxBinaryDescription(cxxBuckConfig,defaultCxxPlatform,cxxPlatforms,cxxBuckConfig.getPreprocessMode());
  CxxLibraryDescription cxxLibraryDescription=new CxxLibraryDescription(cxxBuckConfig,cxxPlatforms,cxxBuckConfig.getPreprocessMode());
  AppleLibraryDescription appleLibraryDescription=new AppleLibraryDescription(cxxLibraryDescription,cxxPlatforms,platformFlavorsToAppleCxxPlatforms);
  builder.register(appleLibraryDescription);
  AppleBinaryDescription appleBinaryDescription=new AppleBinaryDescription(cxxBinaryDescription,cxxPlatforms,platformFlavorsToAppleCxxPlatforms);
  builder.register(appleBinaryDescription);
  ListeningExecutorService dxExecutorService=MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(SmartDexingStep.determineOptimalThreadCount(),new CommandThreadFactory("SmartDexing")));
  builder.register(new AndroidAarDescription(new AndroidManifestDescription()));
  builder.register(new AndroidBinaryDescription(androidBinaryOptions,proGuardConfig,ndkCxxPlatforms,dxExecutorService));
  builder.register(new AndroidBuildConfigDescription(androidBinaryOptions));
  builder.register(new AndroidInstrumentationApkDescription(proGuardConfig,androidBinaryOptions,ndkCxxPlatforms,dxExecutorService));
  builder.register(new AndroidLibraryDescription(androidBinaryOptions));
  builder.register(new AndroidManifestDescription());
  builder.register(new AndroidPrebuiltAarDescription(androidBinaryOptions));
  builder.register(new AndroidReactNativeLibraryDescription(reactNativeBuckConfig));
  builder.register(new AndroidResourceDescription());
  builder.register(new ApkGenruleDescription());
  builder.register(new AppleAssetCatalogDescription());
  AppleBundleDescription appleBundleDescription=new AppleBundleDescription(appleBinaryDescription,appleLibraryDescription,cxxPlatforms,platformFlavorsToAppleCxxPlatforms,defaultCxxPlatform);
  builder.register(appleBundleDescription);
  builder.register(new AppleResourceDescription());
  builder.register(new AppleTestDescription(appleConfig,appleBundleDescription,appleLibraryDescription,cxxPlatforms,platformFlavorsToAppleCxxPlatforms,defaultCxxPlatform));
  builder.register(new CoreDataModelDescription());
  builder.register(cxxBinaryDescription);
  builder.register(cxxLibraryDescription);
  builder.register(new CxxPythonExtensionDescription(cxxBuckConfig,cxxPlatforms));
  builder.register(new CxxTestDescription(cxxBuckConfig,defaultCxxPlatform,cxxPlatforms));
  builder.register(new DBinaryDescription(dBuckConfig));
  builder.register(new DLibraryDescription(dBuckConfig));
  builder.register(new DTestDescription(dBuckConfig));
  builder.register(new ExportFileDescription());
  builder.register(new GenruleDescription());
  builder.register(new GenAidlDescription());
  builder.register(new GwtBinaryDescription());
  builder.register(new IosPostprocessResourcesDescription());
  builder.register(new IosReactNativeLibaryDescription(reactNativeBuckConfig));
  builder.register(new JavaBinaryDescription(defaultJavacOptions,defaultCxxPlatform));
  builder.register(new JavaLibraryDescription(defaultJavacOptions));
  builder.register(new JavaTestDescription(defaultJavacOptions,testRuleTimeoutMs));
  builder.register(new KeystoreDescription());
  builder.register(new NdkLibraryDescription(ndkVersion,ndkCxxPlatforms));
  OCamlBuckConfig ocamlBuckConfig=new OCamlBuckConfig(platform,config);
  builder.register(new OCamlBinaryDescription(ocamlBuckConfig));
  builder.register(new OCamlLibraryDescription(ocamlBuckConfig));
  builder.register(new PrebuiltCxxLibraryDescription(cxxPlatforms));
  builder.register(new PrebuiltJarDescription());
  builder.register(new PrebuiltNativeLibraryDescription());
  builder.register(new PrebuiltOCamlLibraryDescription());
  builder.register(new ProjectConfigDescription());
  builder.register(new PythonBinaryDescription(pyConfig.getPathToPex(),pyConfig.getPathToPexExecuter(),pythonEnv,defaultCxxPlatform,cxxPlatforms));
  builder.register(new PythonLibraryDescription());
  builder.register(new PythonTestDescription(projectFilesystem,pyConfig.getPathToPex(),pyConfig.getPathToPexExecuter(),pythonPathToPythonTestMain,pythonEnv,defaultCxxPlatform,cxxPlatforms));
  builder.register(new RemoteFileDescription(downloader));
  builder.register(new RobolectricTestDescription(androidBinaryOptions,testRuleTimeoutMs));
  builder.register(new ShBinaryDescription());
  builder.register(new ShTestDescription());
  ThriftBuckConfig thriftBuckConfig=new ThriftBuckConfig(config);
  builder.register(new ThriftLibraryDescription(thriftBuckConfig,ImmutableList.of(new ThriftJavaEnhancer(thriftBuckConfig,defaultJavacOptions),new ThriftCxxEnhancer(thriftBuckConfig,cxxLibraryDescription,false),new ThriftCxxEnhancer(thriftBuckConfig,cxxLibraryDescription,true),new ThriftPythonEnhancer(thriftBuckConfig,ThriftPythonEnhancer.Type.NORMAL),new ThriftPythonEnhancer(thriftBuckConfig,ThriftPythonEnhancer.Type.TWISTED))));
  builder.register(new XcodeWorkspaceConfigDescription());
  return builder;
}
