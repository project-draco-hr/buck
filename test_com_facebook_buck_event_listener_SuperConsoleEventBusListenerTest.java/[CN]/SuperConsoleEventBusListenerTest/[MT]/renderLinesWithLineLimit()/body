{
  Clock fakeClock=new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));
  BuckEventBus eventBus=BuckEventBusFactory.newInstance(fakeClock);
  try (SuperConsoleEventBusListener listener=createSuperConsole(fakeClock,eventBus)){
    FakeThreadStateRenderer fakeRenderer=new FakeThreadStateRenderer(ImmutableList.of(2L,1L,4L,8L,5L));
    ImmutableList.Builder<String> lines;
    ImmutableList<String> fullOutput=ImmutableList.of(" |=> Status of thread 2"," |=> Status of thread 1"," |=> Status of thread 4"," |=> Status of thread 8"," |=> Status of thread 5");
    compareOutput(listener,fakeRenderer,fullOutput,10000);
    compareOutput(listener,fakeRenderer,fullOutput,10000);
    compareOutput(listener,fakeRenderer,fullOutput,6);
    compareOutput(listener,fakeRenderer,fullOutput,5);
    lines=ImmutableList.builder();
    listener.renderLines(fakeRenderer,lines,4,false);
    assertThat(lines.build(),equalTo(ImmutableList.of(" |=> Status of thread 2"," |=> Status of thread 1"," |=> Status of thread 4"," |=> 2 MORE THREADS: t8 t5")));
    assertThat(fakeRenderer.lastSortWasByTime(),is(true));
    lines=ImmutableList.builder();
    listener.renderLines(fakeRenderer,lines,2,false);
    assertThat(lines.build(),equalTo(ImmutableList.of(" |=> Status of thread 2"," |=> 4 MORE THREADS: t1 t4 t8 t5")));
    assertThat(fakeRenderer.lastSortWasByTime(),is(true));
    lines=ImmutableList.builder();
    listener.renderLines(fakeRenderer,lines,1,false);
    assertThat(lines.build(),equalTo(ImmutableList.of(" |=> 5 THREADS: t2 t1 t4 t8 t5")));
    assertThat(fakeRenderer.lastSortWasByTime(),is(true));
  }
 }
