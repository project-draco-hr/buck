{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  Clock fakeClock=new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));
  BuckEventBus eventBus=BuckEventBusFactory.newInstance(fakeClock);
  EventBus rawEventBus=BuckEventBusFactory.getEventBusFor(eventBus);
  TestConsole console=new TestConsole();
  BuildTarget fakeTarget=BuildTargetFactory.newInstance("//banana:stand");
  BuildTarget cachedTarget=BuildTargetFactory.newInstance("//chicken:dance");
  ImmutableSet<BuildTarget> buildTargets=ImmutableSet.of(fakeTarget,cachedTarget);
  Iterable<String> buildArgs=Iterables.transform(buildTargets,Functions.toStringFunction());
  FakeBuildRule fakeRule=new FakeBuildRule(fakeTarget,pathResolver,ImmutableSortedSet.<BuildRule>of());
  FakeBuildRule cachedRule=new FakeBuildRule(cachedTarget,pathResolver,ImmutableSortedSet.<BuildRule>of());
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new FakeRuleKeyBuilderFactory(ImmutableMap.of(fakeTarget,new RuleKey("aaaa"),cachedTarget,new RuleKey("aaaa")));
  SuperConsoleEventBusListener listener=new SuperConsoleEventBusListener(console,fakeClock,silentSummaryVerbosity,new DefaultExecutionEnvironment(ImmutableMap.copyOf(System.getenv()),System.getProperties()),Optional.<WebServer>absent(),Locale.US);
  ProgressEstimator e=new ProgressEstimator(getStorageForTest().getParent().getParent(),eventBus);
  listener.setProgressEstimator(e);
  eventBus.register(listener);
  BuildEvent.RuleCountCalculated ruleCountCalculated=BuildEvent.ruleCountCalculated(ImmutableSet.<BuildTarget>of(),10);
  rawEventBus.post(ruleCountCalculated);
  BuildEvent.Started buildEventStarted=BuildEvent.started(buildArgs);
  rawEventBus.post(configureTestEventAtTime(buildEventStarted,200L,TimeUnit.MILLISECONDS,0L));
  ParseEvent.Started parseStarted=ParseEvent.started(buildTargets);
  rawEventBus.post(configureTestEventAtTime(parseStarted,200L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,300L,ImmutableList.of("[+] PROCESSING BUCK FILES...0.1s"));
  rawEventBus.post(configureTestEventAtTime(ParseEvent.finished(parseStarted,Optional.<TargetGraph>absent()),300L,TimeUnit.MILLISECONDS,0L));
  rawEventBus.post(configureTestEventAtTime(ActionGraphEvent.finished(ActionGraphEvent.started()),400L,TimeUnit.MILLISECONDS,0L));
  final String parsingLine="[-] PROCESSING BUCK FILES...FINISHED 0.2s";
  validateConsole(console,listener,540L,ImmutableList.of(parsingLine,"[+] BUILDING...0.1s" + " [0%] (0/10 JOBS, 0 UPDATED, " + "0.0% CACHE MISS)"));
  rawEventBus.post(configureTestEventAtTime(BuildRuleEvent.started(fakeRule),600L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,800L,ImmutableList.of(parsingLine,"[+] BUILDING...0.4s" + " [1%] (0/10 JOBS, 0 UPDATED, " + "0.0% CACHE MISS)"," |=> //banana:stand...  0.2s (checking local cache)"));
  String stepShortName="doing_something";
  String stepDescription="working hard";
  UUID stepUuid=UUID.randomUUID();
  StepEvent.Started stepEventStarted=StepEvent.started(stepShortName,stepDescription,stepUuid);
  rawEventBus.post(configureTestEventAtTime(stepEventStarted,800L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,900L,ImmutableList.of(parsingLine,"[+] BUILDING...0.5s" + " [1%] (0/10 JOBS, 0 UPDATED, " + "0.0% CACHE MISS)"," |=> //banana:stand...  0.3s (running doing_something[0.1s])"));
  rawEventBus.post(configureTestEventAtTime(StepEvent.finished(stepEventStarted,0),900L,TimeUnit.MILLISECONDS,0L));
  rawEventBus.post(configureTestEventAtTime(BuildRuleEvent.finished(fakeRule,ruleKeyBuilderFactory,BuildRuleStatus.SUCCESS,CacheResult.miss(),Optional.of(BuildRuleSuccessType.BUILT_LOCALLY),Optional.<HashCode>absent(),Optional.<Long>absent()),1000L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,1000L,ImmutableList.of(parsingLine,"[+] BUILDING...0.6s [1%] (1/10 JOBS, 1 UPDATED, 10.0% CACHE MISS)"," |=> IDLE"));
  rawEventBus.post(configureTestEventAtTime(BuildRuleEvent.started(cachedRule),1010L,TimeUnit.MILLISECONDS,2L));
  validateConsole(console,listener,1100L,ImmutableList.of(parsingLine,"[+] BUILDING...0.7s [2%] (1/10 JOBS, 1 UPDATED, 10.0% CACHE MISS)"," |=> IDLE"," |=> //chicken:dance...  0.1s (checking local cache)"));
  rawEventBus.post(configureTestEventAtTime(BuildRuleEvent.finished(cachedRule,ruleKeyBuilderFactory,BuildRuleStatus.SUCCESS,CacheResult.miss(),Optional.of(BuildRuleSuccessType.BUILT_LOCALLY),Optional.<HashCode>absent(),Optional.<Long>absent()),1120L,TimeUnit.MILLISECONDS,2L));
  rawEventBus.post(configureTestEventAtTime(BuildEvent.finished(buildEventStarted,0),1234L,TimeUnit.MILLISECONDS,0L));
  final String buildingLine="[-] BUILDING...FINISHED 0.8s" + " [100%] (2/10 JOBS, 2 UPDATED, 20.0% CACHE MISS)";
  validateConsole(console,listener,1300L,ImmutableList.of(parsingLine,buildingLine));
}
