{
  Clock fakeClock=new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));
  BuckEventBus eventBus=BuckEventBusFactory.newInstance(fakeClock);
  SuperConsoleEventBusListener listener=createSuperConsole(fakeClock,eventBus);
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer()));
  BuildTarget fakeTarget=BuildTargetFactory.newInstance("//banana:stand");
  BuildTarget cachedTarget=BuildTargetFactory.newInstance("//chicken:dance");
  ImmutableSet<BuildTarget> buildTargets=ImmutableSet.of(fakeTarget,cachedTarget);
  Iterable<String> buildArgs=Iterables.transform(buildTargets,Functions.toStringFunction());
  FakeBuildRule fakeRule=new FakeBuildRule(fakeTarget,pathResolver,ImmutableSortedSet.<BuildRule>of());
  FakeBuildRule cachedRule=new FakeBuildRule(cachedTarget,pathResolver,ImmutableSortedSet.<BuildRule>of());
  ProjectBuildFileParseEvents.Started parseEventStarted=new ProjectBuildFileParseEvents.Started();
  eventBus.postWithoutConfiguring(configureTestEventAtTime(parseEventStarted,0L,TimeUnit.MILLISECONDS,0L));
  validateConsole(listener,0L,ImmutableList.of("[+] PARSING BUCK FILES...0.0s"));
  validateConsole(listener,100L,ImmutableList.of("[+] PARSING BUCK FILES...0.1s"));
  eventBus.postWithoutConfiguring(configureTestEventAtTime(new ProjectBuildFileParseEvents.Finished(parseEventStarted),200L,TimeUnit.MILLISECONDS,0L));
  validateConsole(listener,200L,ImmutableList.of("[-] PARSING BUCK FILES...FINISHED 0.2s"));
  BuildEvent.Started buildEventStarted=BuildEvent.started(buildArgs);
  eventBus.postWithoutConfiguring(configureTestEventAtTime(buildEventStarted,200L,TimeUnit.MILLISECONDS,0L));
  ParseEvent.Started parseStarted=ParseEvent.started(buildTargets);
  eventBus.postWithoutConfiguring(configureTestEventAtTime(parseStarted,200L,TimeUnit.MILLISECONDS,0L));
  validateConsole(listener,300L,ImmutableList.of("[+] PROCESSING BUCK FILES...0.1s"));
  eventBus.postWithoutConfiguring(configureTestEventAtTime(ParseEvent.finished(parseStarted,Optional.<TargetGraph>absent()),300L,TimeUnit.MILLISECONDS,0L));
  ActionGraphEvent.Started actionGraphStarted=ActionGraphEvent.started();
  eventBus.postWithoutConfiguring(configureTestEventAtTime(actionGraphStarted,300L,TimeUnit.MILLISECONDS,0L));
  eventBus.postWithoutConfiguring(configureTestEventAtTime(ActionGraphEvent.finished(actionGraphStarted),400L,TimeUnit.MILLISECONDS,0L));
  final String parsingLine="[-] PROCESSING BUCK FILES...FINISHED 0.2s";
  validateConsole(listener,540L,ImmutableList.of(parsingLine,DOWNLOAD_STRING,"[+] BUILDING...0.1s"));
  eventBus.postWithoutConfiguring(configureTestEventAtTime(BuildRuleEvent.started(fakeRule),600L,TimeUnit.MILLISECONDS,0L));
  validateConsole(listener,700L,ImmutableList.of(parsingLine,DOWNLOAD_STRING,"[+] BUILDING...0.3s"," |=> //banana:stand...  0.1s (checking local cache)"));
  ArtifactCompressionEvent.Started compressStarted=ArtifactCompressionEvent.started(ArtifactCompressionEvent.Operation.COMPRESS,ImmutableSet.<RuleKey>of());
  eventBus.postWithoutConfiguring(configureTestEventAtTime(compressStarted,701L,TimeUnit.MILLISECONDS,0L));
  validateConsole(listener,702L,ImmutableList.of(parsingLine,DOWNLOAD_STRING,"[+] BUILDING...0.3s"," |=> //banana:stand...  0.1s (running artifact_compress[0.0s])"));
  eventBus.postWithoutConfiguring(configureTestEventAtTime(ArtifactCompressionEvent.finished(compressStarted),703L,TimeUnit.MILLISECONDS,0L));
  validateConsole(listener,704L,ImmutableList.of(parsingLine,DOWNLOAD_STRING,"[+] BUILDING...0.3s"," |=> //banana:stand...  0.1s (checking local cache)"));
  DirArtifactCacheEvent.DirArtifactCacheEventFactory dirArtifactCacheEventFactory=new DirArtifactCacheEvent.DirArtifactCacheEventFactory();
  ArtifactCacheEvent.Started dirFetchStarted=dirArtifactCacheEventFactory.newFetchStartedEvent(ImmutableSet.<RuleKey>of());
  eventBus.postWithoutConfiguring(configureTestEventAtTime(dirFetchStarted,740L,TimeUnit.MILLISECONDS,0L));
  validateConsole(listener,741L,ImmutableList.of(parsingLine,DOWNLOAD_STRING,"[+] BUILDING...0.3s"," |=> //banana:stand...  0.1s (running dir_artifact_fetch[0.0s])"));
  eventBus.postWithoutConfiguring(configureTestEventAtTime(dirArtifactCacheEventFactory.newFetchFinishedEvent(dirFetchStarted,CacheResult.hit("dir")),742L,TimeUnit.MILLISECONDS,0L));
  validateConsole(listener,800L,ImmutableList.of(parsingLine,DOWNLOAD_STRING,"[+] BUILDING...0.4s"," |=> //banana:stand...  0.2s (checking local cache)"));
  String stepShortName="doing_something";
  String stepDescription="working hard";
  UUID stepUuid=UUID.randomUUID();
  StepEvent.Started stepEventStarted=StepEvent.started(stepShortName,stepDescription,stepUuid);
  eventBus.postWithoutConfiguring(configureTestEventAtTime(stepEventStarted,800L,TimeUnit.MILLISECONDS,0L));
  validateConsole(listener,900L,ImmutableList.of(parsingLine,DOWNLOAD_STRING,"[+] BUILDING...0.5s"," |=> //banana:stand...  0.3s (running doing_something[0.1s])"));
  eventBus.postWithoutConfiguring(configureTestEventAtTime(StepEvent.finished(stepEventStarted,0),900L,TimeUnit.MILLISECONDS,0L));
  eventBus.postWithoutConfiguring(configureTestEventAtTime(BuildRuleEvent.finished(fakeRule,BuildRuleKeys.of(new RuleKey("aaaa")),BuildRuleStatus.SUCCESS,CacheResult.miss(),Optional.of(BuildRuleSuccessType.BUILT_LOCALLY),Optional.<HashCode>absent(),Optional.<Long>absent()),1000L,TimeUnit.MILLISECONDS,0L));
  validateConsole(listener,1000L,ImmutableList.of(parsingLine,DOWNLOAD_STRING,"[+] BUILDING...0.6s"," |=> IDLE"));
  eventBus.postWithoutConfiguring(configureTestEventAtTime(BuildRuleEvent.started(cachedRule),1010L,TimeUnit.MILLISECONDS,2L));
  validateConsole(listener,1100L,ImmutableList.of(parsingLine,DOWNLOAD_STRING,"[+] BUILDING...0.7s"," |=> IDLE"," |=> //chicken:dance...  0.1s (checking local cache)"));
  eventBus.postWithoutConfiguring(configureTestEventAtTime(BuildRuleEvent.finished(cachedRule,BuildRuleKeys.of(new RuleKey("aaaa")),BuildRuleStatus.SUCCESS,CacheResult.miss(),Optional.of(BuildRuleSuccessType.BUILT_LOCALLY),Optional.<HashCode>absent(),Optional.<Long>absent()),1120L,TimeUnit.MILLISECONDS,2L));
  eventBus.postWithoutConfiguring(configureTestEventAtTime(BuildEvent.finished(buildEventStarted,0),1234L,TimeUnit.MILLISECONDS,0L));
  final String buildingLine="[-] BUILDING...FINISHED 0.8s";
  validateConsole(listener,1300L,ImmutableList.of(parsingLine,FINISHED_DOWNLOAD_STRING,buildingLine));
  eventBus.postWithoutConfiguring(configureTestEventAtTime(ConsoleEvent.severe("I've made a huge mistake."),1500L,TimeUnit.MILLISECONDS,0L));
  validateConsoleWithLogLines(listener,1600L,ImmutableList.of(parsingLine,FINISHED_DOWNLOAD_STRING,buildingLine),ImmutableList.of("I've made a huge mistake."));
  InstallEvent.Started installEventStarted=InstallEvent.started(fakeTarget);
  eventBus.postWithoutConfiguring(configureTestEventAtTime(installEventStarted,2500L,TimeUnit.MILLISECONDS,0L));
  validateConsole(listener,3000L,ImmutableList.of(parsingLine,FINISHED_DOWNLOAD_STRING,buildingLine,"[+] INSTALLING...0.5s"));
  eventBus.postWithoutConfiguring(configureTestEventAtTime(InstallEvent.finished(installEventStarted,true,Optional.<Long>absent(),Optional.<String>absent()),4000L,TimeUnit.MILLISECONDS,0L));
  final String installingFinished="[-] INSTALLING...FINISHED 1.5s";
  validateConsole(listener,5000L,ImmutableList.of(parsingLine,FINISHED_DOWNLOAD_STRING,buildingLine,installingFinished));
  HttpArtifactCacheEvent.Scheduled storeScheduledOne=postStoreScheduled(eventBus,0L,TARGET_ONE,6000L);
  HttpArtifactCacheEvent.Scheduled storeScheduledTwo=postStoreScheduled(eventBus,0L,TARGET_TWO,6010L);
  HttpArtifactCacheEvent.Scheduled storeScheduledThree=postStoreScheduled(eventBus,0L,TARGET_THREE,6020L);
  validateConsole(listener,6021L,ImmutableList.of(parsingLine,FINISHED_DOWNLOAD_STRING,buildingLine,installingFinished,"[+] HTTP CACHE UPLOAD...0.00 B (0 COMPLETE/0 FAILED/0 UPLOADING/3 PENDING)"));
  HttpArtifactCacheEvent.Started storeStartedOne=postStoreStarted(eventBus,0,6025L,storeScheduledOne);
  validateConsole(listener,7000,ImmutableList.of(parsingLine,FINISHED_DOWNLOAD_STRING,buildingLine,installingFinished,"[+] HTTP CACHE UPLOAD...0.00 B (0 COMPLETE/0 FAILED/1 UPLOADING/2 PENDING)"));
  long artifactSizeOne=SizeUnit.KILOBYTES.toBytes(1.5);
  postStoreFinished(eventBus,0,artifactSizeOne,7020L,true,storeStartedOne);
  validateConsole(listener,7020,ImmutableList.of(parsingLine,FINISHED_DOWNLOAD_STRING,buildingLine,installingFinished,"[+] HTTP CACHE UPLOAD...1.50 KB (1 COMPLETE/0 FAILED/0 UPLOADING/2 PENDING)"));
  HttpArtifactCacheEvent.Started storeStartedTwo=postStoreStarted(eventBus,0,7030L,storeScheduledTwo);
  long artifactSizeTwo=SizeUnit.KILOBYTES.toBytes(1.6);
  postStoreFinished(eventBus,0,artifactSizeTwo,7030L,false,storeStartedTwo);
  validateConsole(listener,7040,ImmutableList.of(parsingLine,FINISHED_DOWNLOAD_STRING,buildingLine,installingFinished,"[+] HTTP CACHE UPLOAD...1.50 KB (1 COMPLETE/1 FAILED/0 UPLOADING/1 PENDING)"));
  HttpArtifactCacheEvent.Started storeStartedThree=postStoreStarted(eventBus,0,7040L,storeScheduledThree);
  long artifactSizeThree=SizeUnit.KILOBYTES.toBytes(0.6);
  postStoreFinished(eventBus,0,artifactSizeThree,7040L,true,storeStartedThree);
  validateConsole(listener,7040,ImmutableList.of(parsingLine,FINISHED_DOWNLOAD_STRING,buildingLine,installingFinished,"[+] HTTP CACHE UPLOAD...2.10 KB (2 COMPLETE/1 FAILED/0 UPLOADING/0 PENDING)"));
  listener.render();
  TestConsole console=(TestConsole)listener.console;
  String beforeStderrWrite=console.getTextWrittenToStdErr();
  console.getStdErr().print("ROFLCOPTER");
  listener.render();
  assertEquals("After stderr is written to by someone other than SuperConsole, rendering " + "should be a noop.",beforeStderrWrite + "ROFLCOPTER",console.getTextWrittenToStdErr());
}
