{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  Clock fakeClock=new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));
  BuckEventBus eventBus=BuckEventBusFactory.newInstance(fakeClock);
  EventBus rawEventBus=BuckEventBusFactory.getEventBusFor(eventBus);
  TestConsole console=new TestConsole();
  BuildTarget fakeTarget=BuildTargetFactory.newInstance("//banana:stand");
  BuildTarget cachedTarget=BuildTargetFactory.newInstance("//chicken:dance");
  ImmutableSet<BuildTarget> buildTargets=ImmutableSet.of(fakeTarget,cachedTarget);
  Iterable<String> buildArgs=Iterables.transform(buildTargets,Functions.toStringFunction());
  FakeBuildRule fakeRule=new FakeBuildRule(fakeTarget,pathResolver,ImmutableSortedSet.<BuildRule>of());
  FakeBuildRule cachedRule=new FakeBuildRule(cachedTarget,pathResolver,ImmutableSortedSet.<BuildRule>of());
  SuperConsoleEventBusListener listener=new SuperConsoleEventBusListener(console,fakeClock,silentSummaryVerbosity,new DefaultExecutionEnvironment(new FakeProcessExecutor(),ImmutableMap.copyOf(System.getenv()),System.getProperties()),Optional.<WebServer>absent());
  eventBus.register(listener);
  ProjectBuildFileParseEvents.Started parseEventStarted=new ProjectBuildFileParseEvents.Started();
  rawEventBus.post(configureTestEventAtTime(parseEventStarted,0L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,0L,ImmutableList.of(formatConsoleTimes("[+] PARSING BUCK FILES...%s",0.0)));
  validateConsole(console,listener,100L,ImmutableList.of(formatConsoleTimes("[+] PARSING BUCK FILES...%s",0.1)));
  rawEventBus.post(configureTestEventAtTime(new ProjectBuildFileParseEvents.Finished(parseEventStarted),200L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,200L,ImmutableList.of(formatConsoleTimes("[-] PARSING BUCK FILES...FINISHED %s",0.2)));
  BuildEvent.Started buildEventStarted=BuildEvent.started(buildArgs);
  rawEventBus.post(configureTestEventAtTime(buildEventStarted,200L,TimeUnit.MILLISECONDS,0L));
  ParseEvent.Started parseStarted=ParseEvent.started(buildTargets);
  rawEventBus.post(configureTestEventAtTime(parseStarted,200L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,300L,ImmutableList.of(formatConsoleTimes("[+] PROCESSING BUCK FILES...%s",0.1)));
  rawEventBus.post(configureTestEventAtTime(ParseEvent.finished(parseStarted,Optional.<TargetGraph>absent()),300L,TimeUnit.MILLISECONDS,0L));
  rawEventBus.post(configureTestEventAtTime(ActionGraphEvent.finished(ActionGraphEvent.started()),400L,TimeUnit.MILLISECONDS,0L));
  final String parsingLine=formatConsoleTimes("[-] PROCESSING BUCK FILES...FINISHED %s",0.2);
  validateConsole(console,listener,540L,ImmutableList.of(parsingLine,formatConsoleTimes("[+] BUILDING...%s",0.1)));
  rawEventBus.post(configureTestEventAtTime(BuildRuleEvent.started(fakeRule),600L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,700L,ImmutableList.of(parsingLine,formatConsoleTimes("[+] BUILDING...%s",0.3),formatConsoleTimes(" |=> //banana:stand...  %s (checking local cache)",0.1)));
  ArtifactCompressionEvent.Started compressStarted=ArtifactCompressionEvent.started(ArtifactCompressionEvent.Operation.COMPRESS,ImmutableSet.<RuleKey>of());
  rawEventBus.post(configureTestEventAtTime(compressStarted,701L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,702L,ImmutableList.of(parsingLine,formatConsoleTimes("[+] BUILDING...%s",0.3),formatConsoleTimes(" |=> //banana:stand...  %s (running artifact_compress[%s])",0.1,0.0)));
  rawEventBus.post(configureTestEventAtTime(ArtifactCompressionEvent.finished(compressStarted),703L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,704L,ImmutableList.of(parsingLine,formatConsoleTimes("[+] BUILDING...%s",0.3),formatConsoleTimes(" |=> //banana:stand...  %s (checking local cache)",0.1)));
  DirArtifactCacheEvent.DirArtifactCacheEventFactory dirArtifactCacheEventFactory=new DirArtifactCacheEvent.DirArtifactCacheEventFactory();
  ArtifactCacheEvent.Started dirFetchStarted=dirArtifactCacheEventFactory.newFetchStartedEvent(ImmutableSet.<RuleKey>of());
  rawEventBus.post(configureTestEventAtTime(dirFetchStarted,740L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,741L,ImmutableList.of(parsingLine,formatConsoleTimes("[+] BUILDING...%s",0.3),formatConsoleTimes(" |=> //banana:stand...  %s (running dir_artifact_fetch[%s])",0.1,0.0)));
  rawEventBus.post(configureTestEventAtTime(dirArtifactCacheEventFactory.newFetchFinishedEvent(dirFetchStarted,CacheResult.hit("dir")),742L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,800L,ImmutableList.of(parsingLine,formatConsoleTimes("[+] BUILDING...%s",0.4),formatConsoleTimes(" |=> //banana:stand...  %s (checking local cache)",0.2)));
  String stepShortName="doing_something";
  String stepDescription="working hard";
  UUID stepUuid=UUID.randomUUID();
  StepEvent.Started stepEventStarted=StepEvent.started(stepShortName,stepDescription,stepUuid);
  rawEventBus.post(configureTestEventAtTime(stepEventStarted,800L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,900L,ImmutableList.of(parsingLine,formatConsoleTimes("[+] BUILDING...%s",0.5),formatConsoleTimes(" |=> //banana:stand...  %s (running doing_something[%s])",0.3,0.1)));
  rawEventBus.post(configureTestEventAtTime(StepEvent.finished(stepEventStarted,0),900L,TimeUnit.MILLISECONDS,0L));
  rawEventBus.post(configureTestEventAtTime(BuildRuleEvent.finished(fakeRule,BuildRuleStatus.SUCCESS,CacheResult.miss(),Optional.of(BuildRuleSuccessType.BUILT_LOCALLY),Optional.<HashCode>absent(),Optional.<Long>absent()),1000L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,1000L,ImmutableList.of(parsingLine,formatConsoleTimes("[+] BUILDING...%s",0.6)," |=> IDLE"));
  rawEventBus.post(configureTestEventAtTime(BuildRuleEvent.started(cachedRule),1010L,TimeUnit.MILLISECONDS,2L));
  validateConsole(console,listener,1100L,ImmutableList.of(parsingLine,formatConsoleTimes("[+] BUILDING...%s",0.7)," |=> IDLE",formatConsoleTimes(" |=> //chicken:dance...  %s (checking local cache)",0.1)));
  rawEventBus.post(configureTestEventAtTime(BuildRuleEvent.finished(cachedRule,BuildRuleStatus.SUCCESS,CacheResult.miss(),Optional.of(BuildRuleSuccessType.BUILT_LOCALLY),Optional.<HashCode>absent(),Optional.<Long>absent()),1120L,TimeUnit.MILLISECONDS,2L));
  rawEventBus.post(configureTestEventAtTime(BuildEvent.finished(buildEventStarted,0),1234L,TimeUnit.MILLISECONDS,0L));
  final String buildingLine=formatConsoleTimes("[-] BUILDING...FINISHED %s",0.8);
  validateConsole(console,listener,1300L,ImmutableList.of(parsingLine,buildingLine));
  rawEventBus.post(configureTestEventAtTime(ConsoleEvent.severe("I've made a huge mistake."),1500L,TimeUnit.MILLISECONDS,0L));
  validateConsoleWithLogLines(console,listener,1600L,ImmutableList.of(parsingLine,buildingLine),ImmutableList.of("I've made a huge mistake."));
  InstallEvent.Started installEventStarted=InstallEvent.started(fakeTarget);
  rawEventBus.post(configureTestEventAtTime(installEventStarted,2500L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,3000L,ImmutableList.of(parsingLine,buildingLine,formatConsoleTimes("[+] INSTALLING...%s",0.5)));
  rawEventBus.post(configureTestEventAtTime(InstallEvent.finished(installEventStarted,true,Optional.<Long>absent()),4000L,TimeUnit.MILLISECONDS,0L));
  final String installingFinished=formatConsoleTimes("[-] INSTALLING...FINISHED %s",1.5);
  validateConsole(console,listener,5000L,ImmutableList.of(parsingLine,buildingLine,installingFinished));
  HttpArtifactCacheEvent.Scheduled storeScheduledOne=postStoreScheduled(rawEventBus,0L,TARGET_ONE,6000L);
  HttpArtifactCacheEvent.Scheduled storeScheduledTwo=postStoreScheduled(rawEventBus,0L,TARGET_TWO,6010L);
  validateConsole(console,listener,6011L,ImmutableList.of(parsingLine,buildingLine,installingFinished,formatConsoleTimes("[+] HTTP CACHE UPLOAD...%s (0 COMPLETE/0 FAILED/0 UPLOADING/2 PENDING)",0.0)));
  HttpArtifactCacheEvent.Started storeStartedOne=postStoreStarted(rawEventBus,0,6015L,storeScheduledOne);
  validateConsole(console,listener,7000,ImmutableList.of(parsingLine,buildingLine,installingFinished,formatConsoleTimes("[+] HTTP CACHE UPLOAD...%s (0 COMPLETE/0 FAILED/1 UPLOADING/1 PENDING)",1.0)));
  postStoreFinished(rawEventBus,0,7020L,true,storeStartedOne);
  validateConsole(console,listener,7020,ImmutableList.of(parsingLine,buildingLine,installingFinished,formatConsoleTimes("[+] HTTP CACHE UPLOAD...%s (1 COMPLETE/0 FAILED/0 UPLOADING/1 PENDING)",1.0)));
  HttpArtifactCacheEvent.Started storeStartedTwo=postStoreStarted(rawEventBus,0,7030L,storeScheduledTwo);
  postStoreFinished(rawEventBus,0,7030L,false,storeStartedTwo);
  validateConsole(console,listener,7040,ImmutableList.of(parsingLine,buildingLine,installingFinished,formatConsoleTimes("[+] HTTP CACHE UPLOAD...%s (1 COMPLETE/1 FAILED/0 UPLOADING/0 PENDING)",1.0)));
  listener.render();
  String beforeStderrWrite=console.getTextWrittenToStdErr();
  console.getStdErr().print("ROFLCOPTER");
  listener.render();
  assertEquals("After stderr is written to by someone other than SuperConsole, rendering " + "should be a noop.",beforeStderrWrite + "ROFLCOPTER",console.getTextWrittenToStdErr());
}
