{
  Clock fakeClock=new IncrementingFakeClock(TimeUnit.SECONDS.toNanos(1));
  BuckEventBus eventBus=BuckEventBusFactory.newInstance(fakeClock);
  EventBus rawEventBus=BuckEventBusFactory.getEventBusFor(eventBus);
  TestConsole console=new TestConsole();
  BuildTarget fakeTarget=BuildTargetFactory.newInstance("//banana:stand");
  BuildTarget cachedTarget=BuildTargetFactory.newInstance("//chicken:dance");
  ImmutableList<BuildTarget> buildTargets=ImmutableList.of(fakeTarget,cachedTarget);
  FakeBuildRule fakeRule=new FakeBuildRule(BuildRuleType.GENRULE,fakeTarget,ImmutableSortedSet.<BuildRule>of(),ImmutableSet.<BuildTargetPattern>of());
  FakeBuildRule cachedRule=new FakeBuildRule(BuildRuleType.GENRULE,cachedTarget,ImmutableSortedSet.<BuildRule>of(),ImmutableSet.<BuildTargetPattern>of());
  SuperConsoleEventBusListener listener=new SuperConsoleEventBusListener(console,fakeClock,new DefaultExecutionEnvironment());
  eventBus.register(listener);
  rawEventBus.post(configureTestEventAtTime(BuildEvent.started(buildTargets),0L,TimeUnit.MILLISECONDS,0L));
  rawEventBus.post(configureTestEventAtTime(ParseEvent.started(buildTargets),0L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,300L,ImmutableList.of("[+] PARSING BUILD FILES...0.30s"));
  rawEventBus.post(configureTestEventAtTime(ParseEvent.finished(buildTargets,Optional.<DependencyGraph>absent()),400L,TimeUnit.MILLISECONDS,0L));
  final String parsingLine="[-] PARSING BUILD FILES...FINISHED 0.40s";
  validateConsole(console,listener,540L,ImmutableList.of(parsingLine,"[+] BUILDING...0.14s"));
  rawEventBus.post(configureTestEventAtTime(BuildRuleEvent.started(fakeRule),600L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,800L,ImmutableList.of(parsingLine,"[+] BUILDING...0.40s"," |=> //banana:stand...  0.20s (checking local cache)"));
  FakeStep fakeStep=new FakeStep("doing_something","working hard",0);
  rawEventBus.post(configureTestEventAtTime(StepEvent.started(fakeStep,"working hard"),800L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,900L,ImmutableList.of(parsingLine,"[+] BUILDING...0.50s"," |=> //banana:stand...  0.30s (running doing_something[0.10s])"));
  rawEventBus.post(configureTestEventAtTime(StepEvent.finished(fakeStep,"working hard",0),900L,TimeUnit.MILLISECONDS,0L));
  rawEventBus.post(configureTestEventAtTime(BuildRuleEvent.finished(fakeRule,BuildRuleStatus.SUCCESS,CacheResult.MISS,Optional.of(BuildRuleSuccess.Type.BUILT_LOCALLY)),1000L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,1000L,ImmutableList.of(parsingLine,"[+] BUILDING...0.60s"," |=> IDLE"));
  rawEventBus.post(configureTestEventAtTime(BuildRuleEvent.started(cachedRule),1010L,TimeUnit.MILLISECONDS,2L));
  validateConsole(console,listener,1100L,ImmutableList.of(parsingLine,"[+] BUILDING...0.70s"," |=> IDLE"," |=> //chicken:dance...  0.09s (checking local cache)"));
  rawEventBus.post(configureTestEventAtTime(BuildRuleEvent.finished(cachedRule,BuildRuleStatus.SUCCESS,CacheResult.MISS,Optional.of(BuildRuleSuccess.Type.BUILT_LOCALLY)),1120L,TimeUnit.MILLISECONDS,2L));
  rawEventBus.post(configureTestEventAtTime(BuildEvent.finished(buildTargets,0),1234L,TimeUnit.MILLISECONDS,0L));
  final String buildingLine="[-] BUILDING...FINISHED 0.83s";
  validateConsole(console,listener,1300L,ImmutableList.of(parsingLine,buildingLine));
  rawEventBus.post(configureTestEventAtTime(LogEvent.severe("I've made a huge mistake."),1500L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,1600L,ImmutableList.of(parsingLine,buildingLine,"Log:","I've made a huge mistake."));
  rawEventBus.post(configureTestEventAtTime(InstallEvent.started(fakeTarget),2500L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,3000L,ImmutableList.of(parsingLine,buildingLine,"[+] INSTALLING...0.50s","Log:","I've made a huge mistake."));
  rawEventBus.post(configureTestEventAtTime(InstallEvent.finished(fakeTarget,true),4000L,TimeUnit.MILLISECONDS,0L));
  validateConsole(console,listener,5000L,ImmutableList.of(parsingLine,buildingLine,"[-] INSTALLING...FINISHED 1.50s","Log:","I've made a huge mistake."));
  listener.render();
  String beforeStderrWrite=console.getTextWrittenToStdErr();
  console.getStdErr().print("ROFLCOPTER");
  listener.render();
  assertEquals("After stderr is written to by someone other than SuperConsole, rendering " + "should be a noop.",beforeStderrWrite + "ROFLCOPTER",console.getTextWrittenToStdErr());
}
