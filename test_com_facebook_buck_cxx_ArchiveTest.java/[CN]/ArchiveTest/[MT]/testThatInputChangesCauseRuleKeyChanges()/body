{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new FakeRuleKeyBuilderFactory(FakeFileHashCache.createFromStrings(ImmutableMap.of("ar",Strings.repeat("0",40),"a.o",Strings.repeat("a",40),"b.o",Strings.repeat("b",40),"c.o",Strings.repeat("c",40),"different",Strings.repeat("d",40))));
  RuleKeyPair defaultRuleKey=generateRuleKey(ruleKeyBuilderFactory,pathResolver,new Archive(params,pathResolver,DEFAULT_ARCHIVER,DEFAULT_OUTPUT,DEFAULT_INPUTS));
  RuleKeyPair archiverChange=generateRuleKey(ruleKeyBuilderFactory,pathResolver,new Archive(params,pathResolver,new HashedFileTool(Paths.get("different")),DEFAULT_OUTPUT,DEFAULT_INPUTS));
  assertNotEquals(defaultRuleKey,archiverChange);
  RuleKeyPair outputChange=generateRuleKey(ruleKeyBuilderFactory,pathResolver,new Archive(params,pathResolver,DEFAULT_ARCHIVER,Paths.get("different"),DEFAULT_INPUTS));
  assertNotEquals(defaultRuleKey,outputChange);
  RuleKeyPair inputChange=generateRuleKey(ruleKeyBuilderFactory,pathResolver,new Archive(params,pathResolver,DEFAULT_ARCHIVER,DEFAULT_OUTPUT,ImmutableList.<SourcePath>of(new TestSourcePath("different"))));
  assertNotEquals(defaultRuleKey,inputChange);
}
