{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"lexyacc",tmp);
  workspace.setUp();
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new FakeProjectFilesystem(),new FakeBuckConfig());
  BuildTarget target=BuildTargetFactory.newInstance("//foo:main");
  BuildTarget binaryTarget=CxxDescriptionEnhancer.createCxxLinkTarget(target);
  String sourceName="main.cpp";
  String yaccSourceName="mainy.yy";
  String yaccSourceFull="foo/" + yaccSourceName;
  BuildTarget yaccTarget=CxxDescriptionEnhancer.createYaccBuildTarget(target,yaccSourceName);
  BuildTarget yaccPreprocessTarget=CxxPreprocessables.createPreprocessBuildTarget(target,cxxPlatform.getFlavor(),CxxSource.Type.CXX,false,yaccSourceName + ".cc");
  BuildTarget yaccCompileTarget=CxxCompilableEnhancer.createCompileBuildTarget(target,cxxPlatform.getFlavor(),yaccSourceName + ".cc",false);
  BuildTarget preprocessTarget=CxxPreprocessables.createPreprocessBuildTarget(target,cxxPlatform.getFlavor(),CxxSource.Type.CXX,false,sourceName);
  BuildTarget compileTarget=CxxCompilableEnhancer.createCompileBuildTarget(target,cxxPlatform.getFlavor(),sourceName,false);
  BuildTarget headerSymlinkTreeTarget=CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target,cxxPlatform.getFlavor(),CxxDescriptionEnhancer.HeaderVisibility.PRIVATE);
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  BuckBuildLog buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(yaccTarget,headerSymlinkTreeTarget,yaccPreprocessTarget,yaccCompileTarget,preprocessTarget,compileTarget,binaryTarget,target),buildLog.getAllTargets());
  buildLog.assertTargetBuiltLocally(yaccTarget.toString());
  buildLog.assertTargetBuiltLocally(headerSymlinkTreeTarget.toString());
  buildLog.assertTargetBuiltLocally(compileTarget.toString());
  buildLog.assertTargetBuiltLocally(yaccCompileTarget.toString());
  buildLog.assertTargetBuiltLocally(binaryTarget.toString());
  buildLog.assertTargetBuiltLocally(target.toString());
  workspace.resetBuildLogFile();
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(yaccTarget,headerSymlinkTreeTarget,yaccPreprocessTarget,yaccCompileTarget,preprocessTarget,compileTarget,binaryTarget,target),buildLog.getAllTargets());
  buildLog.assertTargetHadMatchingRuleKey(yaccTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(headerSymlinkTreeTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(compileTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(yaccCompileTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(binaryTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(target.toString());
  workspace.resetBuildLogFile();
  workspace.replaceFileContents(yaccSourceFull,"expression","somethingElse");
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(yaccTarget,headerSymlinkTreeTarget,yaccPreprocessTarget,yaccCompileTarget,preprocessTarget,compileTarget,binaryTarget,target),buildLog.getAllTargets());
  buildLog.assertTargetBuiltLocally(yaccTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(headerSymlinkTreeTarget.toString());
  buildLog.assertTargetBuiltLocally(compileTarget.toString());
  buildLog.assertTargetBuiltLocally(yaccCompileTarget.toString());
  buildLog.assertTargetBuiltLocally(binaryTarget.toString());
  buildLog.assertTargetBuiltLocally(target.toString());
}
