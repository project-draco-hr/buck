{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"lexyacc",tmp);
  workspace.setUp();
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(FakeBuckConfig.builder().build()));
  BuildTarget target=BuildTargetFactory.newInstance(workspace.getDestPath(),"//foo:main");
  CxxSourceRuleFactory cxxSourceRuleFactory=CxxSourceRuleFactoryHelper.of(workspace.getDestPath(),target,cxxPlatform);
  BuildTarget binaryTarget=CxxDescriptionEnhancer.createCxxLinkTarget(target);
  String sourceName="main.cpp";
  String yaccSourceName="mainy.yy";
  String yaccSourceFull="foo/" + yaccSourceName;
  BuildTarget yaccTarget=CxxDescriptionEnhancer.createYaccBuildTarget(target,yaccSourceName);
  BuildTarget yaccPreprocessTarget=cxxSourceRuleFactory.createPreprocessBuildTarget(yaccSourceName + ".cc",CxxSource.Type.CXX,CxxSourceRuleFactory.PicType.PDC);
  BuildTarget yaccCompileTarget=cxxSourceRuleFactory.createCompileBuildTarget(yaccSourceName + ".cc",CxxSourceRuleFactory.PicType.PDC);
  BuildTarget preprocessTarget=cxxSourceRuleFactory.createPreprocessBuildTarget(sourceName,CxxSource.Type.CXX,CxxSourceRuleFactory.PicType.PDC);
  BuildTarget compileTarget=cxxSourceRuleFactory.createCompileBuildTarget(sourceName,CxxSourceRuleFactory.PicType.PDC);
  BuildTarget headerSymlinkTreeTarget=CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target,cxxPlatform.getFlavor(),HeaderVisibility.PRIVATE);
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  BuckBuildLog buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(yaccTarget,headerSymlinkTreeTarget,yaccPreprocessTarget,yaccCompileTarget,preprocessTarget,compileTarget,binaryTarget,target),buildLog.getAllTargets());
  buildLog.assertTargetBuiltLocally(yaccTarget.toString());
  buildLog.assertTargetBuiltLocally(headerSymlinkTreeTarget.toString());
  buildLog.assertTargetBuiltLocally(compileTarget.toString());
  buildLog.assertTargetBuiltLocally(yaccCompileTarget.toString());
  buildLog.assertTargetBuiltLocally(binaryTarget.toString());
  buildLog.assertTargetBuiltLocally(target.toString());
  workspace.resetBuildLogFile();
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(target,binaryTarget),buildLog.getAllTargets());
  buildLog.assertTargetHadMatchingRuleKey(binaryTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(target.toString());
  workspace.resetBuildLogFile();
  workspace.replaceFileContents(yaccSourceFull,"NUMBER","SOMETHING_ELSE");
  workspace.runBuckCommand("build",target.toString()).assertSuccess();
  buildLog=workspace.getBuildLog();
  assertEquals(ImmutableSet.of(yaccTarget,headerSymlinkTreeTarget,yaccPreprocessTarget,yaccCompileTarget,preprocessTarget,compileTarget,binaryTarget,target),buildLog.getAllTargets());
  buildLog.assertTargetBuiltLocally(yaccTarget.toString());
  buildLog.assertTargetHadMatchingRuleKey(headerSymlinkTreeTarget.toString());
  buildLog.assertTargetBuiltLocally(compileTarget.toString());
  buildLog.assertTargetBuiltLocally(yaccCompileTarget.toString());
  assertThat(buildLog.getLogEntry(binaryTarget).getSuccessType().get(),Matchers.not(Matchers.equalTo(BuildRuleSuccessType.MATCHING_RULE_KEY)));
  buildLog.assertTargetBuiltLocally(target.toString());
}
