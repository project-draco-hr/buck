def buck_build_target(args, cwd, target, perftest_side, log_as_perftest=True):
    'Builds a target with buck and returns performance information.\n    '
    log(('Running buck build %s.' % target))
    env = os.environ.copy()
    env.update({'BUCK_REPOSITORY_DIRTY': '0', })
    if log_as_perftest:
        env.update({'BUCK_EXTRA_JAVA_ARGS': ('-Dbuck.perftest_id=%s,-Dbuck.perftest_side=%s' % (args.perftest_id, perftest_side)), })
    start = datetime.now()
    with tempfile.TemporaryFile() as tmpFile:
        subprocess.check_call([args.path_to_buck, 'build', target, '-v', '5'], stdout=tmpFile, stderr=tmpFile, cwd=cwd, env=env)
        tmpFile.seek(0)
        build_output = tmpFile.read()
    finish = datetime.now()
    rule_debug_map = {}
    for line in build_output.splitlines():
        match = RULEKEY_LINE.match(line)
        if match:
            rule_debug_map[match.group('rule_key')] = match.group('rule_key_debug')
    logfile_path = os.path.join(cwd, 'buck-out', 'bin', 'build.log')
    cache_results = defaultdict(list)
    rule_key_map = {}
    with open(logfile_path, 'r') as logfile:
        for line in logfile.readlines():
            line = line.strip()
            match = BUILD_RESULT_LOG_LINE.search(line)
            if match:
                cache_results[match.group('cache_result')].append({'rule_name': match.group('rule_name'), 'rule_key': match.group('rule_key'), 'rule_key_debug': rule_debug_map[match.group('rule_key')], })
                rule_key_map[match.group('rule_name')] = rule_debug_map[match.group('rule_key')]
    result = BuildResult((finish - start), cache_results, rule_key_map)
    cache_counts = {}
    for (key, value) in result.cache_results.iteritems():
        cache_counts[key] = len(value)
    log(('Test Build Finished! Elapsed Seconds: %d, Cache Counts: %s' % (result.time_delta.total_seconds(), repr(cache_counts))))
    return result
