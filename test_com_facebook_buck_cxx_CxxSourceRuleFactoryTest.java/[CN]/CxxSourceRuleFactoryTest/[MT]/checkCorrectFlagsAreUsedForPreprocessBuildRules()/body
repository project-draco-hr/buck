{
  BuildRuleResolver buildRuleResolver=new BuildRuleResolver();
  SourcePathResolver sourcePathResolver=new SourcePathResolver(buildRuleResolver);
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  ProjectFilesystem filesystem=new AllExistingProjectFilesystem();
  Joiner space=Joiner.on(" ");
  ImmutableList<String> explicitCppflags=ImmutableList.of("-explicit-cppflag");
  ImmutableList<String> explicitCxxppflags=ImmutableList.of("-explicit-cxxppflag");
  CxxPreprocessorInput cxxPreprocessorInput=CxxPreprocessorInput.builder().putAllPreprocessorFlags(CxxSource.Type.C,explicitCppflags).putAllPreprocessorFlags(CxxSource.Type.CXX,explicitCxxppflags).build();
  ImmutableList<String> asppflags=ImmutableList.of("-asppflag","-asppflag");
  SourcePath cpp=new TestSourcePath("cpp");
  ImmutableList<String> cppflags=ImmutableList.of("-cppflag","-cppflag");
  SourcePath cxxpp=new TestSourcePath("cxxpp");
  ImmutableList<String> cxxppflags=ImmutableList.of("-cxxppflag","-cxxppflag");
  FakeBuckConfig buckConfig=new FakeBuckConfig(ImmutableMap.of("cxx",ImmutableMap.<String,String>builder().put("asppflags",space.join(asppflags)).put("cpp",sourcePathResolver.getPath(cpp).toString()).put("cppflags",space.join(cppflags)).put("cxxpp",sourcePathResolver.getPath(cxxpp).toString()).put("cxxppflags",space.join(cxxppflags)).build()),filesystem);
  CxxPlatform platform=DefaultCxxPlatforms.build(new CxxBuckConfig(buckConfig));
  CxxSourceRuleFactory cxxSourceRuleFactory=new CxxSourceRuleFactory(params,buildRuleResolver,sourcePathResolver,platform,cxxPreprocessorInput,ImmutableList.<String>of());
  String cSourceName="test.c";
  List<String> perFileFlagsForTestC=ImmutableList.of("-per-file-flag-for-c-file","-and-another-one");
  CxxSource cSource=CxxSource.of(CxxSource.Type.C,new TestSourcePath(cSourceName),perFileFlagsForTestC);
  CxxPreprocessAndCompile cPreprocess=cxxSourceRuleFactory.requirePreprocessBuildRule(buildRuleResolver,cSourceName,cSource,CxxSourceRuleFactory.PicType.PDC);
  assertContains(cPreprocess.getFlags(),explicitCppflags);
  assertContains(cPreprocess.getFlags(),cppflags);
  assertContains(cPreprocess.getFlags(),perFileFlagsForTestC);
  CxxPreprocessAndCompile cPreprocessAndCompile=cxxSourceRuleFactory.requirePreprocessAndCompileBuildRule(buildRuleResolver,cSourceName,cSource,CxxSourceRuleFactory.PicType.PDC,CxxPreprocessMode.SEPARATE);
  assertContains(cPreprocessAndCompile.getFlags(),explicitCppflags);
  assertContains(cPreprocessAndCompile.getFlags(),cppflags);
  assertContains(cPreprocessAndCompile.getFlags(),perFileFlagsForTestC);
  String cxxSourceName="test.cpp";
  List<String> perFileFlagsForTestCpp=ImmutableList.of("-per-file-flag-for-cpp-file");
  CxxSource cxxSource=CxxSource.of(CxxSource.Type.CXX,new TestSourcePath(cxxSourceName),perFileFlagsForTestCpp);
  CxxPreprocessAndCompile cxxPreprocess=cxxSourceRuleFactory.requirePreprocessBuildRule(buildRuleResolver,cxxSourceName,cxxSource,CxxSourceRuleFactory.PicType.PDC);
  assertContains(cxxPreprocess.getFlags(),explicitCxxppflags);
  assertContains(cxxPreprocess.getFlags(),cxxppflags);
  assertContains(cxxPreprocess.getFlags(),perFileFlagsForTestCpp);
  CxxPreprocessAndCompile cxxPreprocessAndCompile=cxxSourceRuleFactory.requirePreprocessAndCompileBuildRule(buildRuleResolver,cxxSourceName,cxxSource,CxxSourceRuleFactory.PicType.PDC,CxxPreprocessMode.SEPARATE);
  assertContains(cxxPreprocessAndCompile.getFlags(),explicitCxxppflags);
  assertContains(cxxPreprocessAndCompile.getFlags(),cxxppflags);
  assertContains(cxxPreprocessAndCompile.getFlags(),perFileFlagsForTestCpp);
  String assemblerWithCppSourceName="test.S";
  List<String> perFileFlagsForTestS=ImmutableList.of("-a-flag-for-s-file","-another-one","-one-more");
  CxxSource assemblerWithCppSource=CxxSource.of(CxxSource.Type.ASSEMBLER_WITH_CPP,new TestSourcePath(assemblerWithCppSourceName),perFileFlagsForTestS);
  CxxPreprocessAndCompile assemblerWithCppPreprocess=cxxSourceRuleFactory.requirePreprocessBuildRule(buildRuleResolver,assemblerWithCppSourceName,assemblerWithCppSource,CxxSourceRuleFactory.PicType.PDC);
  assertContains(assemblerWithCppPreprocess.getFlags(),asppflags);
  assertContains(assemblerWithCppPreprocess.getFlags(),perFileFlagsForTestS);
  CxxPreprocessAndCompile assemblerWithCppPreprocessAndCompile=cxxSourceRuleFactory.requirePreprocessAndCompileBuildRule(buildRuleResolver,assemblerWithCppSourceName,assemblerWithCppSource,CxxSourceRuleFactory.PicType.PDC,CxxPreprocessMode.SEPARATE);
  assertContains(assemblerWithCppPreprocessAndCompile.getFlags(),asppflags);
  assertContains(assemblerWithCppPreprocessAndCompile.getFlags(),perFileFlagsForTestS);
}
