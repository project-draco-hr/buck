{
  BuildRuleResolver buildRuleResolver=new BuildRuleResolver();
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  ProjectFilesystem filesystem=new AllExistingProjectFilesystem();
  ImmutableList<String> explicitCompilerFlags=ImmutableList.of("-fobjc-arc");
  BuckConfig buckConfig=FakeBuckConfig.builder().setFilesystem(filesystem).build();
  CxxPlatform platform=DefaultCxxPlatforms.build(new CxxBuckConfig(buckConfig));
  CxxSourceRuleFactory cxxSourceRuleFactory=new CxxSourceRuleFactory(params,buildRuleResolver,new SourcePathResolver(buildRuleResolver),platform,ImmutableList.<CxxPreprocessorInput>of(),explicitCompilerFlags,Optional.<SourcePath>absent());
  String objcSourceName="test.mi";
  CxxSource objcSource=CxxSource.of(CxxSource.Type.OBJC_CPP_OUTPUT,new FakeSourcePath(objcSourceName),ImmutableList.<String>of());
  CxxPreprocessAndCompile objcCompile=cxxSourceRuleFactory.requireCompileBuildRule(buildRuleResolver,objcSourceName,objcSource,CxxSourceRuleFactory.PicType.PDC);
  assertContains(objcCompile.getRuleCompilerFlags().get(),explicitCompilerFlags);
  objcSourceName="test.m";
  objcSource=CxxSource.of(CxxSource.Type.OBJC,new FakeSourcePath(objcSourceName),ImmutableList.<String>of());
  CxxPreprocessAndCompile objcPreprocessAndCompile=cxxSourceRuleFactory.requirePreprocessAndCompileBuildRule(buildRuleResolver,objcSourceName,objcSource,CxxSourceRuleFactory.PicType.PDC,CxxPreprocessMode.SEPARATE);
  assertContains(objcPreprocessAndCompile.getRuleCompilerFlags().get(),explicitCompilerFlags);
  String objcxxSourceName="test.mii";
  CxxSource objcxxSource=CxxSource.of(CxxSource.Type.OBJCXX_CPP_OUTPUT,new FakeSourcePath(objcxxSourceName),ImmutableList.<String>of());
  CxxPreprocessAndCompile objcxxCompile=cxxSourceRuleFactory.requireCompileBuildRule(buildRuleResolver,objcxxSourceName,objcxxSource,CxxSourceRuleFactory.PicType.PDC);
  assertContains(objcxxCompile.getRuleCompilerFlags().get(),explicitCompilerFlags);
  objcxxSourceName="test.mm";
  objcxxSource=CxxSource.of(CxxSource.Type.OBJCXX,new FakeSourcePath(objcxxSourceName),ImmutableList.<String>of());
  CxxPreprocessAndCompile objcxxPreprocessAndCompile=cxxSourceRuleFactory.requirePreprocessAndCompileBuildRule(buildRuleResolver,objcxxSourceName,objcxxSource,CxxSourceRuleFactory.PicType.PDC,CxxPreprocessMode.SEPARATE);
  assertContains(objcxxPreprocessAndCompile.getRuleCompilerFlags().get(),explicitCompilerFlags);
}
