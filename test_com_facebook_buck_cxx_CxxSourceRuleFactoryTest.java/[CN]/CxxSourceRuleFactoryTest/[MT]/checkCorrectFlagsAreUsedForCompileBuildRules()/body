{
  BuildRuleResolver buildRuleResolver=new BuildRuleResolver();
  SourcePathResolver sourcePathResolver=new SourcePathResolver(buildRuleResolver);
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  ProjectFilesystem filesystem=new AllExistingProjectFilesystem();
  Joiner space=Joiner.on(" ");
  ImmutableList<String> explicitCompilerFlags=ImmutableList.of("-explicit-compilerflag");
  SourcePath as=new TestSourcePath("as");
  ImmutableList<String> asflags=ImmutableList.of("-asflag","-asflag");
  SourcePath cc=new TestSourcePath("cc");
  ImmutableList<String> cflags=ImmutableList.of("-cflag","-cflag");
  SourcePath cxx=new TestSourcePath("cxx");
  ImmutableList<String> cxxflags=ImmutableList.of("-cxxflag","-cxxflag");
  BuckConfig buckConfig=FakeBuckConfig.builder().setSections(ImmutableMap.of("cxx",ImmutableMap.<String,String>builder().put("as",sourcePathResolver.deprecatedGetPath(as).toString()).put("asflags",space.join(asflags)).put("cc",sourcePathResolver.deprecatedGetPath(cc).toString()).put("cflags",space.join(cflags)).put("cxx",sourcePathResolver.deprecatedGetPath(cxx).toString()).put("cxxflags",space.join(cxxflags)).build())).setFilesystem(filesystem).build();
  CxxPlatform platform=DefaultCxxPlatforms.build(new CxxBuckConfig(buckConfig));
  CxxSourceRuleFactory cxxSourceRuleFactory=new CxxSourceRuleFactory(params,buildRuleResolver,sourcePathResolver,platform,ImmutableList.<CxxPreprocessorInput>of(),explicitCompilerFlags,Optional.<SourcePath>absent());
  String cSourceName="test.i";
  List<String> cSourcePerFileFlags=ImmutableList.of("-c-source-par-file-flag");
  CxxSource cSource=CxxSource.of(CxxSource.Type.C_CPP_OUTPUT,new TestSourcePath(cSourceName),cSourcePerFileFlags);
  CxxPreprocessAndCompile cCompile=cxxSourceRuleFactory.requireCompileBuildRule(buildRuleResolver,cSourceName,cSource,CxxSourceRuleFactory.PicType.PDC);
  assertContains(cCompile.getRuleCompilerFlags().get(),explicitCompilerFlags);
  assertContains(cCompile.getPlatformCompilerFlags().get(),cflags);
  assertContains(cCompile.getPlatformCompilerFlags().get(),asflags);
  assertContains(cCompile.getRuleCompilerFlags().get(),cSourcePerFileFlags);
  cSourceName="test.c";
  cSource=CxxSource.of(CxxSource.Type.C,new TestSourcePath(cSourceName),cSourcePerFileFlags);
  CxxPreprocessAndCompile cPreprocessAndCompile=cxxSourceRuleFactory.requirePreprocessAndCompileBuildRule(buildRuleResolver,cSourceName,cSource,CxxSourceRuleFactory.PicType.PDC,CxxPreprocessMode.SEPARATE);
  assertContains(cPreprocessAndCompile.getRuleCompilerFlags().get(),explicitCompilerFlags);
  assertContains(cPreprocessAndCompile.getPlatformCompilerFlags().get(),cflags);
  assertContains(cPreprocessAndCompile.getPlatformCompilerFlags().get(),asflags);
  assertContains(cPreprocessAndCompile.getRuleCompilerFlags().get(),cSourcePerFileFlags);
  String cxxSourceName="test.ii";
  List<String> cxxSourcePerFileFlags=ImmutableList.of("-cxx-source-par-file-flag");
  CxxSource cxxSource=CxxSource.of(CxxSource.Type.CXX_CPP_OUTPUT,new TestSourcePath(cxxSourceName),cxxSourcePerFileFlags);
  CxxPreprocessAndCompile cxxCompile=cxxSourceRuleFactory.requireCompileBuildRule(buildRuleResolver,cxxSourceName,cxxSource,CxxSourceRuleFactory.PicType.PDC);
  assertContains(cxxCompile.getRuleCompilerFlags().get(),explicitCompilerFlags);
  assertContains(cxxCompile.getPlatformCompilerFlags().get(),cxxflags);
  assertContains(cxxCompile.getPlatformCompilerFlags().get(),asflags);
  assertContains(cxxCompile.getRuleCompilerFlags().get(),cxxSourcePerFileFlags);
  cxxSourceName="test.cpp";
  cxxSource=CxxSource.of(CxxSource.Type.CXX,new TestSourcePath(cxxSourceName),cxxSourcePerFileFlags);
  CxxPreprocessAndCompile cxxPreprocessAndCompile=cxxSourceRuleFactory.requirePreprocessAndCompileBuildRule(buildRuleResolver,cxxSourceName,cxxSource,CxxSourceRuleFactory.PicType.PDC,CxxPreprocessMode.SEPARATE);
  assertContains(cxxPreprocessAndCompile.getRuleCompilerFlags().get(),explicitCompilerFlags);
  assertContains(cxxPreprocessAndCompile.getPlatformCompilerFlags().get(),cxxflags);
  assertContains(cxxPreprocessAndCompile.getPlatformCompilerFlags().get(),asflags);
  assertContains(cxxPreprocessAndCompile.getRuleCompilerFlags().get(),cxxSourcePerFileFlags);
  String cCppOutputSourceName="test2.i";
  List<String> cCppOutputSourcePerFileFlags=ImmutableList.of("-c-cpp-output-source-par-file-flag");
  CxxSource cCppOutputSource=CxxSource.of(CxxSource.Type.C_CPP_OUTPUT,new TestSourcePath(cCppOutputSourceName),cCppOutputSourcePerFileFlags);
  CxxPreprocessAndCompile cCppOutputCompile=cxxSourceRuleFactory.requireCompileBuildRule(buildRuleResolver,cCppOutputSourceName,cCppOutputSource,CxxSourceRuleFactory.PicType.PDC);
  assertContains(cCppOutputCompile.getRuleCompilerFlags().get(),explicitCompilerFlags);
  assertContains(cCppOutputCompile.getPlatformCompilerFlags().get(),cflags);
  assertContains(cCppOutputCompile.getPlatformCompilerFlags().get(),asflags);
  assertContains(cCppOutputCompile.getRuleCompilerFlags().get(),cCppOutputSourcePerFileFlags);
  cCppOutputSourceName="test2.c";
  cCppOutputSource=CxxSource.of(CxxSource.Type.C,new TestSourcePath(cCppOutputSourceName),cCppOutputSourcePerFileFlags);
  CxxPreprocessAndCompile cCppOutputPreprocessAndCompile=cxxSourceRuleFactory.requirePreprocessAndCompileBuildRule(buildRuleResolver,cCppOutputSourceName,cCppOutputSource,CxxSourceRuleFactory.PicType.PDC,CxxPreprocessMode.SEPARATE);
  assertContains(cCppOutputPreprocessAndCompile.getRuleCompilerFlags().get(),explicitCompilerFlags);
  assertContains(cCppOutputPreprocessAndCompile.getPlatformCompilerFlags().get(),cflags);
  assertContains(cCppOutputPreprocessAndCompile.getPlatformCompilerFlags().get(),asflags);
  assertContains(cCppOutputPreprocessAndCompile.getRuleCompilerFlags().get(),cCppOutputSourcePerFileFlags);
  String assemblerSourceName="test.s";
  List<String> assemblerSourcePerFileFlags=ImmutableList.of("-assember-source-par-file-flag");
  CxxSource assemblerSource=CxxSource.of(CxxSource.Type.ASSEMBLER,new TestSourcePath(assemblerSourceName),assemblerSourcePerFileFlags);
  CxxPreprocessAndCompile assemblerCompile=cxxSourceRuleFactory.requireCompileBuildRule(buildRuleResolver,assemblerSourceName,assemblerSource,CxxSourceRuleFactory.PicType.PDC);
  assertContains(assemblerCompile.getPlatformCompilerFlags().get(),asflags);
  assertContains(assemblerCompile.getRuleCompilerFlags().get(),assemblerSourcePerFileFlags);
  assemblerSourceName="test.S";
  assemblerSource=CxxSource.of(CxxSource.Type.ASSEMBLER_WITH_CPP,new TestSourcePath(assemblerSourceName),assemblerSourcePerFileFlags);
  CxxPreprocessAndCompile assemblerPreprocessAndCompile=cxxSourceRuleFactory.requirePreprocessAndCompileBuildRule(buildRuleResolver,assemblerSourceName,assemblerSource,CxxSourceRuleFactory.PicType.PDC,CxxPreprocessMode.SEPARATE);
  assertContains(assemblerPreprocessAndCompile.getPlatformCompilerFlags().get(),asflags);
  assertContains(assemblerPreprocessAndCompile.getRuleCompilerFlags().get(),assemblerSourcePerFileFlags);
}
