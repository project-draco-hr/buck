{
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  BuildRuleResolver resolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  FakeBuildRule dep=resolver.addToIndex(new FakeBuildRule("//:dep1",new SourcePathResolver(new BuildRuleResolver())));
  CxxPreprocessorInput cxxPreprocessorInput=CxxPreprocessorInput.builder().addRules(dep.getBuildTarget()).build();
  CxxSourceRuleFactory cxxSourceRuleFactory=new CxxSourceRuleFactory(params,resolver,pathResolver,CXX_PLATFORM,cxxPreprocessorInput,ImmutableList.<String>of());
  String name="foo/bar.cpp";
  SourcePath input=new PathSourcePath(PROJECT_FILESYSTEM,target.getBasePath().resolve(name));
  CxxSource cxxSource=CxxSource.of(CxxSource.Type.CXX,input,ImmutableList.<String>of());
  BuildRule cxxPreprocess=cxxSourceRuleFactory.requirePreprocessBuildRule(resolver,name,cxxSource,CxxSourceRuleFactory.PicType.PDC);
  assertEquals(ImmutableSortedSet.<BuildRule>of(dep),cxxPreprocess.getDeps());
  cxxPreprocess=cxxSourceRuleFactory.requirePreprocessAndCompileBuildRule(resolver,name,cxxSource,CxxSourceRuleFactory.PicType.PDC,CxxPreprocessMode.SEPARATE);
  assertEquals(ImmutableSortedSet.<BuildRule>of(dep),cxxPreprocess.getDeps());
}
