{
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  BuildRuleResolver resolver=new BuildRuleResolver();
  ImmutableList<String> platformFlags=ImmutableList.of("-some","-flags");
  CxxPlatform platform=DefaultCxxPlatforms.build(new CxxBuckConfig(FakeBuckConfig.builder().setSections(ImmutableMap.of("cxx",ImmutableMap.of("cxxflags",Joiner.on(" ").join(platformFlags)))).build()));
  CxxSourceRuleFactory cxxSourceRuleFactory=new CxxSourceRuleFactory(params,resolver,new SourcePathResolver(resolver),platform,ImmutableList.<CxxPreprocessorInput>of(),ImmutableList.<String>of(),Optional.<SourcePath>absent());
  String name="source.ii";
  CxxSource cxxSource=CxxSource.of(CxxSource.Type.CXX_CPP_OUTPUT,new TestSourcePath(name),ImmutableList.<String>of());
  CxxPreprocessAndCompile cxxCompile=cxxSourceRuleFactory.requireCompileBuildRule(resolver,name,cxxSource,CxxSourceRuleFactory.PicType.PDC);
  assertNotEquals(-1,Collections.indexOfSubList(cxxCompile.getPlatformCompilerFlags().get(),platformFlags));
  name="source.cpp";
  cxxSource=CxxSource.of(CxxSource.Type.CXX,new TestSourcePath(name),ImmutableList.<String>of());
  CxxPreprocessAndCompile cxxPreprocessAndCompile=cxxSourceRuleFactory.requirePreprocessAndCompileBuildRule(resolver,name,cxxSource,CxxSourceRuleFactory.PicType.PDC,CxxPreprocessMode.SEPARATE);
  assertNotEquals(-1,Collections.indexOfSubList(cxxPreprocessAndCompile.getPreprocessorDelegate().get().getPreprocessorCommand(),platformFlags));
}
