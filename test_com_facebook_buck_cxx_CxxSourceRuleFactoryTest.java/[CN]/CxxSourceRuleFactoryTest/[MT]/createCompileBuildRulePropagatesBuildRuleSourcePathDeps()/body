{
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  BuildRuleResolver resolver=new BuildRuleResolver();
  FakeBuildRule dep=createFakeBuildRule("//:test",new SourcePathResolver(resolver));
  resolver.addToIndex(dep);
  SourcePath input=new BuildTargetSourcePath(PROJECT_FILESYSTEM,dep.getBuildTarget());
  CxxSourceRuleFactory cxxSourceRuleFactory=new CxxSourceRuleFactory(params,resolver,new SourcePathResolver(resolver),CXX_PLATFORM,CxxPreprocessorInput.EMPTY,ImmutableList.<String>of());
  String nameCompile="foo/bar.ii";
  CxxSource cxxSourceCompile=CxxSource.of(CxxSource.Type.CXX_CPP_OUTPUT,input,ImmutableList.<String>of());
  CxxPreprocessAndCompile cxxCompile=cxxSourceRuleFactory.createCompileBuildRule(nameCompile,cxxSourceCompile,CxxSourceRuleFactory.PicType.PDC);
  assertEquals(ImmutableSortedSet.<BuildRule>of(dep),cxxCompile.getDeps());
  String namePreprocessAndCompile="foo/bar.cpp";
  CxxSource cxxSourcePreprocessAndCompile=CxxSource.of(CxxSource.Type.CXX,input,ImmutableList.<String>of());
  CxxPreprocessAndCompile cxxPreprocessAndCompile=cxxSourceRuleFactory.createPreprocessAndCompileBuildRule(namePreprocessAndCompile,cxxSourcePreprocessAndCompile,CxxSourceRuleFactory.PicType.PDC);
  assertEquals(ImmutableSortedSet.<BuildRule>of(dep),cxxPreprocessAndCompile.getDeps());
}
