{
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ImmutableList<String> platformFlags=ImmutableList.of("-some","-flags");
  CxxPlatform platform=DefaultCxxPlatforms.build(new CxxBuckConfig(FakeBuckConfig.builder().setSections(ImmutableMap.of("cxx",ImmutableMap.of("cxxppflags",Joiner.on(" ").join(platformFlags)))).build()));
  CxxPreprocessorInput cxxPreprocessorInput=CxxPreprocessorInput.EMPTY;
  CxxSourceRuleFactory cxxSourceRuleFactory=CxxSourceRuleFactory.builder().setParams(params).setResolver(resolver).setPathResolver(pathResolver).setCxxPlatform(platform).addCxxPreprocessorInput(cxxPreprocessorInput).setPicType(CxxSourceRuleFactory.PicType.PDC).build();
  String name="source.cpp";
  CxxSource cxxSource=CxxSource.of(CxxSource.Type.CXX,new FakeSourcePath(name),ImmutableList.<String>of());
  CxxPreprocessAndCompile cxxPreprocess=cxxSourceRuleFactory.requirePreprocessBuildRule(name,cxxSource);
  assertNotEquals(-1,Collections.indexOfSubList(cxxPreprocess.getPreprocessorDelegate().get().getCommand(CxxToolFlags.of()),platformFlags));
  CxxPreprocessAndCompile cxxPreprocessAndCompile=cxxSourceRuleFactory.requirePreprocessAndCompileBuildRule(name,cxxSource,CxxPreprocessMode.SEPARATE);
  assertNotEquals(-1,Collections.indexOfSubList(cxxPreprocessAndCompile.getPreprocessorDelegate().get().getCommand(CxxToolFlags.of()),platformFlags));
}
