{
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  FakeBuildRule dep=createFakeBuildRule("//:test",new SourcePathResolver(resolver));
  resolver.addToIndex(dep);
  SourcePath input=new BuildTargetSourcePath(dep.getBuildTarget());
  CxxSourceRuleFactory cxxSourceRuleFactory=CxxSourceRuleFactory.builder().setParams(params).setResolver(resolver).setPathResolver(new SourcePathResolver(resolver)).setCxxPlatform(CXX_PLATFORM).setPicType(CxxSourceRuleFactory.PicType.PDC).build();
  String nameCompile="foo/bar.ii";
  CxxSource cxxSourceCompile=CxxSource.of(CxxSource.Type.CXX_CPP_OUTPUT,input,ImmutableList.<String>of());
  CxxPreprocessAndCompile cxxCompile=cxxSourceRuleFactory.requireCompileBuildRule(resolver,nameCompile,cxxSourceCompile);
  assertEquals(ImmutableSortedSet.<BuildRule>of(dep),cxxCompile.getDeps());
  String namePreprocessAndCompile="foo/bar.cpp";
  CxxSource cxxSourcePreprocessAndCompile=CxxSource.of(CxxSource.Type.CXX,input,ImmutableList.<String>of());
  CxxPreprocessAndCompile cxxPreprocessAndCompile=cxxSourceRuleFactory.requirePreprocessAndCompileBuildRule(resolver,namePreprocessAndCompile,cxxSourcePreprocessAndCompile,CxxPreprocessMode.SEPARATE);
  assertEquals(ImmutableSortedSet.<BuildRule>of(dep),cxxPreprocessAndCompile.getDeps());
}
