{
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  FakeBuildRule dep=resolver.addToIndex(new FakeBuildRule("//:dep1",pathResolver));
  CxxPreprocessorInput cxxPreprocessorInput=CxxPreprocessorInput.builder().addRules(dep.getBuildTarget()).build();
  CxxSourceRuleFactory cxxSourceRuleFactory=CxxSourceRuleFactory.builder().setParams(params).setResolver(resolver).setPathResolver(pathResolver).setCxxPlatform(CXX_PLATFORM).addCxxPreprocessorInput(cxxPreprocessorInput).setPicType(CxxSourceRuleFactory.PicType.PDC).build();
  String name="foo/bar.cpp";
  SourcePath input=new PathSourcePath(PROJECT_FILESYSTEM,target.getBasePath().resolve(name));
  CxxSource cxxSource=CxxSource.of(CxxSource.Type.CXX,input,ImmutableList.<String>of());
  BuildRule cxxPreprocess=cxxSourceRuleFactory.requirePreprocessBuildRule(name,cxxSource);
  assertEquals(ImmutableSortedSet.<BuildRule>of(dep),cxxPreprocess.getDeps());
  cxxPreprocess=cxxSourceRuleFactory.requirePreprocessAndCompileBuildRule(name,cxxSource,CxxPreprocessMode.SEPARATE);
  assertEquals(ImmutableSortedSet.<BuildRule>of(dep),cxxPreprocess.getDeps());
}
