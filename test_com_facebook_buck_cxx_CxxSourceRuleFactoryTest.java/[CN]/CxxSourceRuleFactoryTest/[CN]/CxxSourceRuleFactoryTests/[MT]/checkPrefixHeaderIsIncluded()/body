{
  BuildRuleResolver buildRuleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  ProjectFilesystem filesystem=new AllExistingProjectFilesystem();
  BuckConfig buckConfig=FakeBuckConfig.builder().setFilesystem(filesystem).build();
  CxxPlatform platform=DefaultCxxPlatforms.build(new CxxBuckConfig(buckConfig));
  String prefixHeaderName="test.pch";
  SourcePath prefixHeaderSourcePath=new FakeSourcePath(filesystem,prefixHeaderName);
  CxxSourceRuleFactory cxxSourceRuleFactory=CxxSourceRuleFactory.builder().setParams(params).setResolver(buildRuleResolver).setPathResolver(new SourcePathResolver(buildRuleResolver)).setCxxPlatform(platform).setPrefixHeader(prefixHeaderSourcePath).setPicType(CxxSourceRuleFactory.PicType.PDC).build();
  String objcSourceName="test.m";
  CxxSource objcSource=CxxSource.of(CxxSource.Type.OBJC,new FakeSourcePath(objcSourceName),ImmutableList.<String>of());
  CxxPreprocessAndCompile objcPreprocessAndCompile=cxxSourceRuleFactory.requirePreprocessAndCompileBuildRule(objcSourceName,objcSource,CxxPreprocessMode.SEPARATE);
  ImmutableList<String> explicitPrefixHeaderRelatedFlags=ImmutableList.of("-include",filesystem.resolve(prefixHeaderName).toString());
  CxxPreprocessAndCompileStep step=objcPreprocessAndCompile.makeMainStep();
  assertContains(step.getCommand(),explicitPrefixHeaderRelatedFlags);
}
