{
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ShBinary cxxpp=(ShBinary)new ShBinaryBuilder(BuildTargetFactory.newInstance("//:cxxpp")).setMain(new FakeSourcePath("blah")).build(resolver);
  ShBinary cxx=(ShBinary)new ShBinaryBuilder(BuildTargetFactory.newInstance("//:cxx")).setMain(new FakeSourcePath("blah")).build(resolver);
  CxxPlatform cxxPlatform=CXX_PLATFORM.withCxxpp(new PreprocessorProvider(new BinaryBuildRuleToolProvider(cxxpp.getBuildTarget(),""),CxxToolProvider.Type.DEFAULT)).withCxx(new CompilerProvider(new BinaryBuildRuleToolProvider(cxx.getBuildTarget(),""),CxxToolProvider.Type.DEFAULT));
  CxxSourceRuleFactory cxxSourceRuleFactory=CxxSourceRuleFactory.builder().setParams(params).setResolver(resolver).setPathResolver(pathResolver).setCxxBuckConfig(CxxPlatformUtils.DEFAULT_CONFIG).setCxxPlatform(cxxPlatform).addCxxPreprocessorInput(CxxPreprocessorInput.EMPTY).setPicType(CxxSourceRuleFactory.PicType.PDC).build();
  String name="foo/bar.cpp";
  SourcePath input=new PathSourcePath(PROJECT_FILESYSTEM,target.getBasePath().resolve(name));
  CxxSource cxxSource=CxxSource.of(CxxSource.Type.CXX,input,ImmutableList.<String>of());
  BuildRule cxxPreprocess=cxxSourceRuleFactory.requirePreprocessBuildRule(name,cxxSource);
  assertThat(cxxPreprocess.getDeps(),Matchers.<BuildRule>hasItems(cxx,cxxpp));
  cxxPreprocess=cxxSourceRuleFactory.requirePreprocessAndCompileBuildRule(name,cxxSource,CxxPreprocessMode.SEPARATE);
  assertThat(cxxPreprocess.getDeps(),Matchers.<BuildRule>hasItems(cxx,cxxpp));
}
