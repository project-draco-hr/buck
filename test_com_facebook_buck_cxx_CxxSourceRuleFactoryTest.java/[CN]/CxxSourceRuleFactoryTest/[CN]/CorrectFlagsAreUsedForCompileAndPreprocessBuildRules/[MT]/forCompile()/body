{
  CxxSource.Type sourceType=CxxSource.Type.fromExtension(MorePaths.getFileExtension(Paths.get(sourceName))).get();
  BuckConfig buckConfig=FakeBuckConfig.builder().setSections(ImmutableMap.of("cxx",ImmutableMap.<String,String>builder().put("as",sourcePathResolver.deprecatedGetPath(as).toString()).put("asflags",space.join(asflags)).put("cc",sourcePathResolver.deprecatedGetPath(cc).toString()).put("cflags",space.join(cflags)).put("cxx",sourcePathResolver.deprecatedGetPath(cxx).toString()).put("cxxflags",space.join(cxxflags)).build())).setFilesystem(PROJECT_FILESYSTEM).build();
  CxxPlatform platform=DefaultCxxPlatforms.build(new CxxBuckConfig(buckConfig));
  CxxSourceRuleFactory cxxSourceRuleFactory=CxxSourceRuleFactory.builder().setParams(params).setResolver(buildRuleResolver).setPathResolver(sourcePathResolver).setCxxPlatform(platform).setCompilerFlags(explicitCompilerFlags).setPicType(CxxSourceRuleFactory.PicType.PDC).build();
  List<String> perFileFlags=ImmutableList.of("-per-file-flag");
  CxxSource source=CxxSource.of(sourceType,new FakeSourcePath(sourceName),perFileFlags);
  CxxPreprocessAndCompile rule;
  if (source.getType().isPreprocessable()) {
    rule=cxxSourceRuleFactory.requirePreprocessAndCompileBuildRule(buildRuleResolver,sourceName,source,CxxPreprocessMode.SEPARATE);
  }
 else {
    rule=cxxSourceRuleFactory.requireCompileBuildRule(buildRuleResolver,sourceName,source);
  }
  ImmutableList<String> command=rule.makeMainStep().getCommand();
  assertContains(command,expectedCompilerFlags);
  assertContains(command,expectedTypeSpecificFlags);
  assertContains(command,asflags);
  assertContains(command,perFileFlags);
}
