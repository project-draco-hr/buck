{
  BuildRuleResolver buildRuleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  ProjectFilesystem filesystem=new AllExistingProjectFilesystem();
  BuckConfig buckConfig=FakeBuckConfig.builder().setFilesystem(filesystem).build();
  CxxPlatform platform=DefaultCxxPlatforms.build(new CxxBuckConfig(buckConfig));
  CxxSourceRuleFactory cxxSourceRuleFactory=CxxSourceRuleFactory.builder().setParams(params).setResolver(buildRuleResolver).setPathResolver(new SourcePathResolver(buildRuleResolver)).setCxxBuckConfig(CxxPlatformUtils.DEFAULT_CONFIG).setCxxPlatform(platform).setPicType(CxxSourceRuleFactory.PicType.PDC).build();
  String[] sourceNames=testExampleSourceSets.get(testExampleSourceSet);
  Map<String,CxxSource> sources=new HashMap<>();
  for (  String sourceName : sourceNames) {
    sources.put(sourceName,CxxSource.of(CxxSource.Type.OBJC,new FakeSourcePath(sourceName),ImmutableList.<String>of()));
  }
  ImmutableMap<CxxPreprocessAndCompile,SourcePath> rules=cxxSourceRuleFactory.requirePreprocessAndCompileRules(strategy,ImmutableMap.copyOf(sources));
  assertEquals(String.format("Expected %d rules, but found only %d",sourceNames.length,rules.size()),sourceNames.length,rules.size());
}
