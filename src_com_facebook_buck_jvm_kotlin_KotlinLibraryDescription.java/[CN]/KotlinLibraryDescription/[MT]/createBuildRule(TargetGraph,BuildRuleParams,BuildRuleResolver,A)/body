{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  BuildTarget abiJarTarget=params.getBuildTarget().withAppendedFlavors(CalculateAbi.FLAVOR);
  ImmutableSortedSet<BuildRule> exportedDeps=resolver.getAllRules(args.exportedDeps.get());
  DefaultJavaLibrary defaultJavaLibrary=resolver.addToIndex(new DefaultJavaLibrary(params.appendExtraDeps(BuildRules.getExportedRules(Iterables.concat(params.getDeclaredDeps().get(),exportedDeps,resolver.getAllRules(args.providedDeps.get())))),pathResolver,args.srcs.get(),validateResources(pathResolver,params.getProjectFilesystem(),args.resources.get()),Optional.<Path>absent(),Optional.<SourcePath>absent(),ImmutableList.<String>of(),exportedDeps,resolver.getAllRules(args.providedDeps.get()),new BuildTargetSourcePath(abiJarTarget),false,ImmutableSet.<Path>of(),new KotlincToJarStepFactory(kotlinBuckConfig.getKotlinCompiler().get(),args.extraKotlincArguments.get()),Optional.<Path>absent(),Optional.<String>absent(),ImmutableSortedSet.<BuildTarget>of(),ImmutableSet.<Pattern>of()));
  resolver.addToIndex(CalculateAbi.of(abiJarTarget,pathResolver,params,new BuildTargetSourcePath(defaultJavaLibrary.getBuildTarget())));
  return defaultJavaLibrary;
}
