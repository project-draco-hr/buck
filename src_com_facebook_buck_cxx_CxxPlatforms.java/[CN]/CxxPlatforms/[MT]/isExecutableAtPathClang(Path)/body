{
  ImmutableList<String> command=ImmutableList.of(path.toString(),"--version");
  ProcessExecutorParams params=ProcessExecutorParams.builder().setCommand(command).build();
  ProcessExecutor.Result result;
  try (PrintStream stdout=new PrintStream(new ByteArrayOutputStream());PrintStream stderr=new PrintStream(new ByteArrayOutputStream())){
    ProcessExecutor processExecutor=new ProcessExecutor(new Console(Verbosity.SILENT,stdout,stderr,Ansi.withoutTty()));
    result=processExecutor.launchAndExecute(params,EnumSet.of(ProcessExecutor.Option.EXPECTING_STD_OUT),Optional.<String>absent(),Optional.<Long>absent(),Optional.<Function<Process,Void>>absent());
  }
 catch (  InterruptedException|IOException e) {
    throw new RuntimeException(e);
  }
  if (result.getExitCode() != 0) {
    String message=String.format("%s exited with unexpected return code %s",command,result.getExitCode());
    LOG.error(message);
    throw new RuntimeException(message);
  }
  String stdout=result.getStdout().or("");
  Iterable<String> lines=Splitter.on(CharMatcher.anyOf("\r\n")).split(stdout);
  LOG.debug("Output of %s: %s",command,lines);
  return isVersionOfClang(lines);
}
