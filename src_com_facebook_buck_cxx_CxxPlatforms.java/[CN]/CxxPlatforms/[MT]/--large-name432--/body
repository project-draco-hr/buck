{
  CxxPlatform.Builder builder=CxxPlatform.builder();
  builder.setFlavor(flavor).setAs(config.getCompilerProvider("as").or(as)).setAspp(config.getPreprocessorProvider("aspp").or(aspp)).setCc(config.getCompilerProvider("cc").or(cc)).setCxx(config.getCompilerProvider("cxx").or(cxx)).setCpp(config.getPreprocessorProvider("cpp").or(cpp)).setCxxpp(config.getPreprocessorProvider("cxxpp").or(cxxpp)).setCuda(config.getCompilerProvider("cuda")).setCudapp(config.getPreprocessorProvider("cudapp")).setAsm(config.getCompilerProvider("asm")).setAsmpp(config.getPreprocessorProvider("asmpp")).setLd(config.getLinkerProvider("ld",ld.getType()).or(ld)).addAllLdflags(ldFlags).setAr(getTool("ar",config).transform(getArchiver(ar.getClass(),config)).or(ar)).setRanlib(getTool("ranlib",config).or(ranlib)).setStrip(getTool("strip",config).or(strip)).setSymbolNameTool(new PosixNmSymbolNameTool(getTool("nm",config).or(nm))).setSharedLibraryExtension(sharedLibraryExtension).setSharedLibraryVersionedExtensionFormat(sharedLibraryVersionedExtensionFormat).setDebugPathSanitizer(debugPathSanitizer.or(new DebugPathSanitizer(config.getDebugPathSanitizerLimit(),File.separatorChar,Paths.get("."),ImmutableBiMap.<Path,Path>of()))).setFlagMacros(flagMacros);
  builder.addAllCflags(cflags);
  builder.addAllCxxflags(cflags);
  builder.addAllCppflags(cppflags);
  builder.addAllCxxppflags(cppflags);
  builder.addAllAsflags(asflags);
  builder.addAllAsppflags(asppflags);
  CxxPlatforms.addToolFlagsFromConfig(config,builder);
  return builder.build();
}
