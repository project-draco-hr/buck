{
  CxxPlatform.Builder builder=CxxPlatform.builder();
  builder.setFlavor(flavor).setAs(getTool(flavor,"as",config).or(as)).setAspp(getTool(flavor,"aspp",config).transform(getPreprocessor(aspp.getClass())).or(aspp)).setCc(getTool(flavor,"cc",config).transform(getCompiler(cc.getClass())).or(cc)).setCxx(getTool(flavor,"cxx",config).transform(getCompiler(cxx.getClass())).or(cxx)).setCpp(getTool(flavor,"cpp",config).transform(getPreprocessor(cpp.getClass())).or(cpp)).setCxxpp(getTool(flavor,"cxxpp",config).transform(getPreprocessor(cxxpp.getClass())).or(cxxpp)).setLd(getTool(flavor,"ld",config).transform(getLinker(ld.getClass(),config)).or(ld)).addAllLdflags(ldFlags).setAr(getTool(flavor,"ar",config).transform(getArchiver(ar.getClass(),config)).or(ar)).setRanlib(getTool(flavor,"ranlib",config).or(ranlib)).setStrip(getTool(flavor,"strip",config).or(strip)).setSymbolNameTool(new PosixNmSymbolNameTool(getTool(flavor,"nm",config).or(nm))).setSharedLibraryExtension(sharedLibraryExtension).setSharedLibraryVersionedExtensionFormat(sharedLibraryVersionedExtensionFormat).setDebugPathSanitizer(debugPathSanitizer.or(CxxPlatforms.DEFAULT_DEBUG_PATH_SANITIZER)).setFlagMacros(flagMacros);
  builder.addAllCflags(cflags);
  builder.addAllCxxflags(cflags);
  builder.addAllCppflags(cppflags);
  builder.addAllCxxppflags(cppflags);
  builder.addAllAsflags(asflags);
  builder.addAllAsppflags(asppflags);
  CxxPlatforms.addToolFlagsFromConfig(config,builder);
  return builder.build();
}
