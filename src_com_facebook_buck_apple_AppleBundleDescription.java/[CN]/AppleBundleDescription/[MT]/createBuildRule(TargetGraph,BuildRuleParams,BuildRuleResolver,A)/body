{
  Optional<FatBinaryInfo> fatBinaryInfo=FatBinaryInfo.create(platformFlavorsToAppleCxxPlatforms,params.getBuildTarget());
  AppleCxxPlatform appleCxxPlatform;
  if (fatBinaryInfo.isPresent()) {
    appleCxxPlatform=fatBinaryInfo.get().getRepresentativePlatform();
  }
 else {
    CxxPlatform cxxPlatform;
    try {
      cxxPlatform=cxxPlatformFlavorDomain.getValue(params.getBuildTarget().getFlavors()).or(defaultCxxPlatform);
    }
 catch (    FlavorDomainException e) {
      throw new HumanReadableException(e,"%s: %s",params.getBuildTarget(),e.getMessage());
    }
    appleCxxPlatform=platformFlavorsToAppleCxxPlatforms.get(cxxPlatform.getFlavor());
    if (appleCxxPlatform == null) {
      throw new HumanReadableException("%s: Apple bundle requires an Apple platform, found '%s'",params.getBuildTarget(),cxxPlatform.getFlavor().getName());
    }
  }
  AppleBundleDestinations destinations=AppleBundleDestinations.platformDestinations(appleCxxPlatform.getAppleSdk().getApplePlatform());
  ImmutableSet.Builder<SourcePath> bundleDirsBuilder=ImmutableSet.builder();
  ImmutableSet.Builder<SourcePath> dirsContainingResourceDirsBuilder=ImmutableSet.builder();
  ImmutableSet.Builder<SourcePath> bundleFilesBuilder=ImmutableSet.builder();
  ImmutableSet.Builder<SourcePath> bundleVariantFilesBuilder=ImmutableSet.builder();
  AppleResources.collectResourceDirsAndFiles(targetGraph,Preconditions.checkNotNull(targetGraph.get(params.getBuildTarget())),bundleDirsBuilder,dirsContainingResourceDirsBuilder,bundleFilesBuilder,bundleVariantFilesBuilder);
  ImmutableSet<SourcePath> bundleDirs=bundleDirsBuilder.build();
  ImmutableSet<SourcePath> dirsContainingResourceDirs=dirsContainingResourceDirsBuilder.build();
  ImmutableSet<SourcePath> bundleFiles=bundleFilesBuilder.build();
  ImmutableSet<SourcePath> bundleVariantFiles=bundleVariantFilesBuilder.build();
  SourcePathResolver sourcePathResolver=new SourcePathResolver(resolver);
  Optional<AppleAssetCatalog> assetCatalog=AppleDescriptions.createBuildRuleForTransitiveAssetCatalogDependencies(targetGraph,params,sourcePathResolver,appleCxxPlatform.getAppleSdk().getApplePlatform(),appleCxxPlatform.getActool());
  BuildRule flavoredBinaryRule=getFlavoredBinaryRule(targetGraph,params,resolver,args);
  BuildRuleParams bundleParamsWithFlavoredBinaryDep=getBundleParamsWithUpdatedDeps(params,args.binary,ImmutableSet.<BuildRule>builder().add(flavoredBinaryRule).addAll(assetCatalog.asSet()).addAll(BuildRules.toBuildRulesFor(params.getBuildTarget(),resolver,SourcePaths.filterBuildTargetSourcePaths(Iterables.concat(bundleFiles,bundleDirs,dirsContainingResourceDirs,bundleVariantFiles)))).build());
  ImmutableSet<SourcePath> extensionBundlePaths=collectFirstLevelAppleDependencyBundles(params.getDeps());
  return new AppleBundle(bundleParamsWithFlavoredBinaryDep,sourcePathResolver,args.extension,args.infoPlist,args.infoPlistSubstitutions.get(),Optional.of(flavoredBinaryRule),destinations,bundleDirs,bundleFiles,dirsContainingResourceDirs,extensionBundlePaths,Optional.of(bundleVariantFiles),appleCxxPlatform.getIbtool(),appleCxxPlatform.getDsymutil(),appleCxxPlatform.getCxxPlatform().getStrip(),assetCatalog,args.getTests(),appleCxxPlatform.getAppleSdk(),allValidCodeSignIdentities,provisioningProfileSearchPath,AppleBundle.DebugInfoFormat.DSYM);
}
