{
  ImmutableSet<Flavor> flavors=params.getBuildTarget().withoutFlavors(ImmutableSet.of(ReactNativeFlavors.DO_NOT_BUNDLE)).getFlavors();
  if (!cxxPlatformFlavorDomain.containsAnyOf(flavors)) {
    flavors=new ImmutableSet.Builder<Flavor>().addAll(flavors).add(defaultCxxPlatform.getFlavor()).build();
  }
  final TargetNode<?> binaryTargetNode=Preconditions.checkNotNull(targetGraph.get(args.binary));
  if (binaryTargetNode.getDescription() instanceof AppleLibraryDescription && (Sets.intersection(SUPPORTED_LIBRARY_FLAVORS,binaryTargetNode.getBuildTarget().getFlavors()).size() != 1)) {
    throw new HumanReadableException("AppleExtension bundle [%s] must have exactly one of these flavors: [%s].",binaryTargetNode.getBuildTarget().toString(),Joiner.on(", ").join(SUPPORTED_LIBRARY_FLAVORS));
  }
  BuildRuleParams binaryRuleParams=new BuildRuleParams(args.binary,Suppliers.ofInstance(BuildRules.toBuildRulesFor(params.getBuildTarget(),resolver,binaryTargetNode.getDeclaredDeps())),Suppliers.ofInstance(BuildRules.toBuildRulesFor(params.getBuildTarget(),resolver,binaryTargetNode.getExtraDeps())),params.getProjectFilesystem(),params.getCellRoots());
  return CxxDescriptionEnhancer.requireBuildRule(targetGraph,binaryRuleParams,resolver,flavors.toArray(new Flavor[0]));
}
