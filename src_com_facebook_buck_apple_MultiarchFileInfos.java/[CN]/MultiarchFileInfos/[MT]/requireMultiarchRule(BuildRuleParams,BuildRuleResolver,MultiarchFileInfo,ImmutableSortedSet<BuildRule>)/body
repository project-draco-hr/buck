{
  Optional<BuildRule> existingRule=resolver.getRuleOptional(info.getFatTarget());
  if (existingRule.isPresent()) {
    return existingRule.get();
  }
  ImmutableSortedSet<SourcePath> inputs=FluentIterable.from(thinRules).transform(SourcePaths.getToBuildTargetSourcePath()).toSortedSet(Ordering.natural());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  MultiarchFile multiarchFile=new MultiarchFile(params.copyWithDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(thinRules)),pathResolver,info.getRepresentativePlatform().getLipo(),inputs,BuildTargets.getGenPath(params.getBuildTarget(),"%s"));
  resolver.addToIndex(multiarchFile);
  return multiarchFile;
}
