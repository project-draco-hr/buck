{
  URL url;
  try {
    url=new URL(buckConfig.getValue("cache","http_url").or(DEFAULT_HTTP_URL));
  }
 catch (  MalformedURLException e) {
    throw new HumanReadableException(e,"Malformed [cache]http_url: %s",e.getMessage());
  }
  int timeoutSeconds=Integer.parseInt(buckConfig.getValue("cache","http_timeout_seconds").or(DEFAULT_HTTP_CACHE_TIMEOUT_SECONDS));
  boolean doStore=readCacheMode("http_mode",DEFAULT_HTTP_CACHE_MODE);
  OkHttpClient client=new OkHttpClient();
  final String localhost=buckConfig.getLocalhost();
  client.networkInterceptors().add(new Interceptor(){
    @Override public Response intercept(    Chain chain) throws IOException {
      return chain.proceed(chain.request().newBuilder().addHeader("X-BuckCache-User",System.getProperty("user.name","<unknown>")).addHeader("X-BuckCache-Host",localhost).build());
    }
  }
);
  client.setConnectTimeout(timeoutSeconds,TimeUnit.SECONDS);
  client.setConnectionPool(new ConnectionPool(200,TimeUnit.MINUTES.toMillis(5)));
  OkHttpClient fetchClient=client.clone();
  fetchClient.setReadTimeout(timeoutSeconds,TimeUnit.SECONDS);
  return new HttpArtifactCache("http",fetchClient,client,url,doStore,projectFilesystem,buckEventBus,Hashing.crc32());
}
