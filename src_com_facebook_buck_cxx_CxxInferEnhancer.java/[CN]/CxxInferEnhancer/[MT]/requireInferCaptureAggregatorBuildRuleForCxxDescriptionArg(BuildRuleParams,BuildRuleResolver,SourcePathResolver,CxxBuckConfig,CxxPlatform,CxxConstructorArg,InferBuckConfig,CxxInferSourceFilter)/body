{
  Flavor inferCaptureOnly=InferFlavors.INFER_CAPTURE_ONLY.get();
  BuildRuleParams paramsWithInferCaptureOnlyFlavor=InferFlavors.paramsWithoutAnyInferFlavor(params).withFlavor(inferCaptureOnly);
  Optional<CxxInferCaptureRulesAggregator> existingRule=resolver.getRuleOptionalWithType(paramsWithInferCaptureOnlyFlavor.getBuildTarget(),CxxInferCaptureRulesAggregator.class);
  if (existingRule.isPresent()) {
    return existingRule.get();
  }
  CxxInferCaptureAndAggregatingRules<CxxInferCaptureRulesAggregator> cxxInferCaptureAndAnalyzeRules=requireTransitiveCaptureAndAggregatingRules(params,resolver,cxxBuckConfig,cxxPlatform,args,inferConfig,sourceFilter,inferCaptureOnly,CxxInferCaptureRulesAggregator.class);
  return createInferCaptureAggregatorRule(paramsWithInferCaptureOnlyFlavor,resolver,pathResolver,cxxInferCaptureAndAnalyzeRules);
}
