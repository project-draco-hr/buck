{
  Flavor inferAnalyze=InferFlavors.INFER_ANALYZE.get();
  BuildRuleParams paramsWithInferAnalyzeFlavor=InferFlavors.paramsWithoutAnyInferFlavor(params).withFlavor(inferAnalyze);
  Optional<CxxInferAnalyze> existingRule=resolver.getRuleOptionalWithType(paramsWithInferAnalyzeFlavor.getBuildTarget(),CxxInferAnalyze.class);
  if (existingRule.isPresent()) {
    return existingRule.get();
  }
  CxxInferCaptureAndAggregatingRules<CxxInferAnalyze> cxxInferCaptureAndAnalyzeRules=requireTransitiveCaptureAndAggregatingRules(params,resolver,cxxBuckConfig,cxxPlatform,args,inferConfig,sourceFilter,inferAnalyze,CxxInferAnalyze.class);
  return createInferAnalyzeRule(paramsWithInferAnalyzeFlavor,resolver,pathResolver,inferConfig,cxxInferCaptureAndAnalyzeRules);
}
