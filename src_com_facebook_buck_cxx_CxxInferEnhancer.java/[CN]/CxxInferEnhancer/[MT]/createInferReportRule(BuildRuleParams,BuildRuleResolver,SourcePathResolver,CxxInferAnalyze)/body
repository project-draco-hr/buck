{
  ImmutableSortedSet<Path> reportsToMergeFromDeps=FluentIterable.from(analysisToReport.getTransitiveAnalyzeRules()).transform(new Function<CxxInferAnalyze,Path>(){
    @Override public Path apply(    CxxInferAnalyze input){
      return input.getPathToOutput();
    }
  }
).toSortedSet(Ordering.natural());
  ImmutableSortedSet<Path> reportsToMerge=ImmutableSortedSet.<Path>naturalOrder().addAll(reportsToMergeFromDeps).add(analysisToReport.getPathToOutput()).build();
  return buildRuleResolver.addToIndex(new CxxInferReport(buildRuleParams.copyWithDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(analysisToReport.getTransitiveAnalyzeRules()).add(analysisToReport).build()),buildRuleParams.getExtraDeps()),sourcePathResolver,reportsToMerge));
}
