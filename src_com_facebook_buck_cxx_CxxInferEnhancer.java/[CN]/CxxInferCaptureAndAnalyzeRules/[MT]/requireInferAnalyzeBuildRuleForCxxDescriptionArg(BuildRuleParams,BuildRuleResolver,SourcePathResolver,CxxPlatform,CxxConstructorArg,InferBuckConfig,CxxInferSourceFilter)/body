{
  BuildRuleParams cleanParams=InferFlavors.paramsWithoutAnyInferFlavor(params);
  BuildRuleParams paramsWithInferAnalyzeFlavor=cleanParams.withFlavor(InferFlavors.INFER_ANALYZE.get());
  Optional<CxxInferAnalyze> existingRule=resolver.getRuleOptionalWithType(paramsWithInferAnalyzeFlavor.getBuildTarget(),CxxInferAnalyze.class);
  if (existingRule.isPresent()) {
    return existingRule.get();
  }
  ImmutableMap<String,CxxSource> sources=collectSources(cleanParams.getBuildTarget(),resolver,cxxPlatform,args);
  ImmutableSet<CxxInferCapture> captureRules=requireInferCaptureBuildRules(cleanParams,resolver,cxxPlatform,sources,inferConfig,sourceFilter,args);
  ImmutableSet<CxxInferAnalyze> transitiveDepsLibraryRules=requireTransitiveDependentLibraries(cxxPlatform,cleanParams.getDeps());
  CxxInferCaptureAndAnalyzeRules cxxInferCaptureAndAnalyzeRules=new CxxInferCaptureAndAnalyzeRules(captureRules,transitiveDepsLibraryRules);
  return createInferAnalyzeRule(paramsWithInferAnalyzeFlavor,resolver,pathResolver,inferConfig,cxxInferCaptureAndAnalyzeRules);
}
