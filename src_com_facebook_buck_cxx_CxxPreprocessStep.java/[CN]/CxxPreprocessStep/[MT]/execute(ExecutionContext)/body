{
  ProcessBuilder builder=new ProcessBuilder();
  builder.command(getCommand());
  builder.directory(context.getProjectDirectoryRoot().toAbsolutePath().toFile());
  builder.redirectOutput(ProcessBuilder.Redirect.PIPE);
  builder.redirectError(ProcessBuilder.Redirect.PIPE);
  Path outputPath=context.getProjectFilesystem().resolve(this.output);
  Path outputTempPath=context.getProjectFilesystem().resolve(this.output + ".tmp");
  try {
    Process process=builder.start();
    ByteArrayOutputStream error=new ByteArrayOutputStream();
    try (OutputStream output=Files.newOutputStream(outputTempPath);FunctionLineProcessorThread outputProcessor=new FunctionLineProcessorThread(process.getInputStream(),output,createOutputLineProcessor(context.getProjectDirectoryRoot(),replacementPaths,sanitizer));FunctionLineProcessorThread errorProcessor=new FunctionLineProcessorThread(process.getErrorStream(),error,createErrorLineProcessor())){
      outputProcessor.start();
      errorProcessor.start();
    }
     int exitCode=process.waitFor();
    if (exitCode == 0) {
      Files.move(outputTempPath,outputPath,StandardCopyOption.REPLACE_EXISTING,StandardCopyOption.ATOMIC_MOVE);
    }
    String err=new String(error.toByteArray());
    if (!err.isEmpty()) {
      context.getConsole().printErrorText(err);
    }
    return exitCode;
  }
 catch (  InterruptedException|InterruptedIOException e) {
    throw new InterruptedException();
  }
catch (  Exception e) {
    context.getConsole().printBuildFailureWithStacktrace(e);
    return 1;
  }
}
