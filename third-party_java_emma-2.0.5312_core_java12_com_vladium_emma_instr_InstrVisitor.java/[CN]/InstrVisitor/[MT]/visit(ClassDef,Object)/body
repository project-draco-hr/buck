{
  final ClassDef cls=m_cls;
  final String clsVMName=cls.getName();
  final String clsName=Types.vmNameToJavaName(clsVMName);
  final boolean trace1=m_log.atTRACE1();
  if (trace1)   m_log.trace1("visit","class: [" + clsVMName + "]");
  if (SKIP_SYNTHETIC_CLASSES && cls.isSynthetic()) {
    m_instrument=false;
    m_metadata=false;
    if (trace1)     m_log.trace1("visit","skipping synthetic class");
    return ctx;
  }
  if (!m_warningIssued && clsName.startsWith(IAppConstants.APP_PACKAGE)) {
    m_warningIssued=true;
    m_log.warning(IAppConstants.APP_NAME + " classes appear to be included on the instrumentation");
    m_log.warning("path: this is not a correct way to use " + IAppConstants.APP_NAME);
  }
{
    final int[] existing=cls.getFields(COVERAGE_FIELD_NAME);
    if (existing.length > 0) {
      m_instrument=false;
      m_metadata=false;
      if (m_ignoreAlreadyInstrumented) {
        if (trace1)         m_log.trace1("visit","skipping instrumented class");
        return ctx;
      }
 else {
        throw new IllegalStateException("class [" + clsName + "] appears to be instrumented already");
      }
    }
  }
  final IConstantCollection constants=cls.getConstants();
  SyntheticAttribute_info syntheticMarker=null;
{
    if (MARK_ADDED_ELEMENTS_SYNTHETIC)     m_syntheticStringIndex=cls.addCONSTANT_Utf8(Attribute_info.ATTRIBUTE_SYNTHETIC,true);
  }
{
    final int coverageFieldOffset;
    final String fieldDescriptor="[[Z";
    final int fieldModifiers=IAccessFlags.ACC_PRIVATE | IAccessFlags.ACC_STATIC | IAccessFlags.ACC_FINAL;
    if (MARK_ADDED_ELEMENTS_SYNTHETIC) {
      final IAttributeCollection fieldAttributes=ElementFactory.newAttributeCollection(1);
      syntheticMarker=new SyntheticAttribute_info(m_syntheticStringIndex);
      fieldAttributes.add(syntheticMarker);
      coverageFieldOffset=cls.addField(COVERAGE_FIELD_NAME,fieldDescriptor,fieldModifiers,fieldAttributes);
    }
 else {
      coverageFieldOffset=cls.addField(COVERAGE_FIELD_NAME,fieldDescriptor,fieldModifiers);
    }
    m_coverageFieldrefIndex=cls.addFieldref(coverageFieldOffset);
  }
{
    final String classJVMName="com/vladium/emma/rt/RT";
    final int class_index=cls.addClassref(classJVMName);
    final String methodDescriptor="([[ZLjava/lang/String;J)V";
    final int nametype_index=cls.addNameType("r",methodDescriptor);
    m_registerMethodrefIndex=constants.add(new CONSTANT_Methodref_info(class_index,nametype_index));
  }
{
    final String methodDescriptor="()[[Z";
    final int nametype_index=cls.addNameType(PRECLINIT_METHOD_NAME,methodDescriptor);
    m_preclinitMethodrefIndex=constants.add(new CONSTANT_Methodref_info(cls.getThisClassIndex(),nametype_index));
  }
{
    m_classNameConstantIndex=constants.add(new CONSTANT_String_info(cls.getThisClass().m_name_index));
  }
  visit(cls.getMethods(),ctx);
  if (m_doSUIDCompensation) {
    boolean compensate=((m_clinitStatus & IMetadataConstants.METHOD_ADDED) != 0);
    int existingSUIDFieldCount=0;
    if (compensate) {
{
        final int[] existing=cls.getFields(SUID_FIELD_NAME);
        existingSUIDFieldCount=existing.length;
        if (existingSUIDFieldCount > 0) {
          final IFieldCollection fields=cls.getFields();
          for (int f=0; f < existingSUIDFieldCount; ++f) {
            final Field_info field=fields.get(existing[f]);
            if ((field.getAccessFlags() & (IAccessFlags.ACC_STATIC | IAccessFlags.ACC_FINAL)) == (IAccessFlags.ACC_STATIC | IAccessFlags.ACC_FINAL)) {
              compensate=false;
              break;
            }
          }
        }
      }
      if (compensate && (cls.getThisClassIndex() == 0)) {
        boolean serializable=false;
        final IInterfaceCollection interfaces=cls.getInterfaces();
        for (int i=0, iLimit=interfaces.size(); i < iLimit; ++i) {
          final CONSTANT_Class_info ifc=(CONSTANT_Class_info)constants.get(interfaces.get(i));
          final String ifcName=ifc.getName(cls);
          if (JAVA_IO_SERIALIZABLE_NAME.equals(ifcName) || JAVA_IO_EXTERNALIZABLE_NAME.equals(ifcName)) {
            serializable=true;
            break;
          }
        }
        if (!serializable)         compensate=false;
      }
    }
    if (compensate) {
      if (existingSUIDFieldCount > 0) {
        m_log.warning("class [" + clsName + "] declares a 'serialVersionUID'");
        m_log.warning("field that is not static and final: this is likely an implementation mistake");
        m_log.warning("and can interfere with " + IAppConstants.APP_NAME + "'s SUID compensation");
      }
      final String fieldDescriptor="J";
      final int fieldModifiers=IAccessFlags.ACC_PRIVATE | IAccessFlags.ACC_STATIC | IAccessFlags.ACC_FINAL;
      final IAttributeCollection fieldAttributes=ElementFactory.newAttributeCollection(MARK_ADDED_ELEMENTS_SYNTHETIC ? 2 : 1);
      final int nameIndex=cls.addCONSTANT_Utf8(Attribute_info.ATTRIBUTE_CONSTANT_VALUE,true);
      final int valueIndex=constants.add(new CONSTANT_Long_info(cls.computeSUID(true)));
      final ConstantValueAttribute_info initializer=new ConstantValueAttribute_info(nameIndex,valueIndex);
      fieldAttributes.add(initializer);
      if (MARK_ADDED_ELEMENTS_SYNTHETIC) {
        if (syntheticMarker == null)         syntheticMarker=new SyntheticAttribute_info(m_syntheticStringIndex);
        fieldAttributes.add(syntheticMarker);
      }
      cls.addField(SUID_FIELD_NAME,fieldDescriptor,fieldModifiers,fieldAttributes);
    }
  }
  visit(cls.getAttributes(),ctx);
  return ctx;
}
