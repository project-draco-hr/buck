{
  Comparator<BuildRule> comparator=RetainOrderComparator.createComparator(deps);
  ImmutableSortedSet<BuildRule> sortedDeps=ImmutableSortedSet.copyOf(comparator,deps);
  BuildRuleParams buildRuleParams=new BuildRuleParams(buildTarget,sortedDeps,visibilityPatterns);
  return new AbstractBuildRule(buildRuleParams){
    @Override public BuildRuleType getType(){
      throw new IllegalStateException("This method should not be called");
    }
    @Override public ListenableFuture<BuildRuleSuccess> build(    BuildContext context){
      throw new IllegalStateException("This method should not be called");
    }
    @Override public final Iterable<InputRule> getInputs(){
      return ImmutableList.of();
    }
    @Override public RuleKey.Builder ruleKeyBuilder(){
      throw new IllegalStateException("This method should not be called");
    }
  }
;
}
