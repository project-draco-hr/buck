{
  Comparator<BuildRule> comparator=RetainOrderComparator.createComparator(deps);
  ImmutableSortedSet<BuildRule> sortedDeps=ImmutableSortedSet.copyOf(comparator,deps);
  BuildRuleParams buildRuleParams=new FakeBuildRuleParamsBuilder(buildTarget).setDeps(sortedDeps).setVisibility(visibilityPatterns).build();
  return new AbstractBuildRule(buildRuleParams,null){
    @Override public BuildRuleType getType(){
      throw new IllegalStateException("This method should not be called");
    }
    @Nullable @Override public Buildable getBuildable(){
      return null;
    }
    @Override public final Iterable<Path> getInputs(){
      return ImmutableList.of();
    }
    @Override public RuleKey.Builder appendToRuleKey(    RuleKey.Builder builder){
      throw new IllegalStateException("This method should not be called");
    }
  }
;
}
