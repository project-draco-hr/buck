{
  BuildRule nonPublicBuildRule1=createRule(nonPublicTarget1,noDeps,ImmutableSet.<BuildTargetPattern>of(new SingletonBuildTargetPattern(orcaTarget.getFullyQualifiedName())));
  BuildRule nonPublicBuildRule2=createRule(nonPublicTarget2,noDeps,ImmutableSet.<BuildTargetPattern>of(new SingletonBuildTargetPattern("//some/other:target")));
  BuildRule publicBuildRule=createRule(publicTarget,noDeps,ImmutableSet.of(BuildTargetPattern.MATCH_ALL));
  try {
    createRule(orcaTarget,ImmutableSet.of(publicBuildRule,nonPublicBuildRule1,nonPublicBuildRule2),noVisibilityPatterns);
    fail("createRule() should throw an exception");
  }
 catch (  RuntimeException e) {
    assertEquals(String.format("%s depends on %s, which is not visible",orcaTarget,nonPublicBuildRule2),e.getMessage());
  }
}
