{
  BuildRule nonPublicBuildRule1=createRule(nonPublicTarget1,noDeps,ImmutableSet.<BuildTargetPattern>of(new SingletonBuildTargetPattern(orcaTarget.getFullyQualifiedName())));
  BuildRule nonPublicBuildRule2=createRule(nonPublicTarget2,noDeps,ImmutableSet.<BuildTargetPattern>of(new SingletonBuildTargetPattern(orcaTarget.getFullyQualifiedName())));
  AbstractBuildRule orcaRule=createRule(orcaTarget,ImmutableSet.of(nonPublicBuildRule1,nonPublicBuildRule2),noVisibilityPatterns);
  assertTrue(shouldBeVisibleMessage(nonPublicBuildRule1,orcaTarget),nonPublicBuildRule1.isVisibleTo(orcaTarget));
  assertTrue(shouldBeVisibleMessage(nonPublicBuildRule2,orcaTarget),nonPublicBuildRule2.isVisibleTo(orcaTarget));
  assertFalse(orcaRule.isVisibleTo(nonPublicTarget1));
  assertFalse(orcaRule.isVisibleTo(nonPublicTarget2));
  BuildRule publicBuildRule=createRule(publicTarget,noDeps,ImmutableSet.of(BuildTargetPattern.MATCH_ALL));
  assertTrue(publicBuildRule.isVisibleTo(nonPublicTarget1));
  assertFalse(nonPublicBuildRule1.isVisibleTo(publicTarget));
}
