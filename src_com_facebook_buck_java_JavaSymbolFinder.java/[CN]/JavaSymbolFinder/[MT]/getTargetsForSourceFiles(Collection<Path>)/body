{
  Map<Path,List<Map<String,Object>>> parsedBuildFiles=Maps.newHashMap();
  ImmutableSetMultimap.Builder<Path,BuildTarget> sourceFileTargetsMultimap=ImmutableSetMultimap.builder();
  try (ProjectBuildFileParser parser=projectBuildFileParserFactory.createParser(config.getDefaultIncludes(),console,environment)){
    for (    Path sourceFile : sourceFilePaths) {
      for (      Path buckFile : possibleBuckFilesForSourceFile(sourceFile)) {
        List<Map<String,Object>> rules;
        if (parsedBuildFiles.containsKey(buckFile)) {
          rules=parsedBuildFiles.get(buckFile);
        }
 else {
          rules=parser.getAllRules(buckFile);
          parsedBuildFiles.put(buckFile,rules);
        }
        for (        Map<String,Object> ruleMap : rules) {
          String type=(String)ruleMap.get("type");
          if (javaRuleTypes.contains(type)) {
            @SuppressWarnings("unchecked") List<String> srcs=(List<String>)ruleMap.get("srcs");
            if (isSourceFilePathInSrcsList(sourceFile,srcs,buckFile.getParent())) {
              Path buckFileDir=buckFile.getParent();
              String baseName="//" + (buckFileDir != null ? buckFileDir : "");
              String shortName=(String)ruleMap.get("name");
              sourceFileTargetsMultimap.put(sourceFile,BuildTarget.builder(baseName,shortName).build());
            }
          }
        }
      }
    }
  }
 catch (  BuildFileParseException e) {
    buckEventBus.post(ThrowableConsoleEvent.create(e,"Error while searching for targets."));
  }
  return sourceFileTargetsMultimap.build();
}
