{
  optionsBuilder.add("-source",getSourceLevel());
  optionsBuilder.add("-target",getTargetLevel());
  if (isDebug()) {
    optionsBuilder.add("-g");
  }
  if (isVerbose()) {
    optionsBuilder.add("-verbose");
  }
  if (getBootclasspath().isPresent()) {
    optionsBuilder.add("-bootclasspath",getBootclasspath().get());
  }
 else {
    String bcp=getSourceToBootclasspath().get(getSourceLevel());
    if (bcp != null) {
      optionsBuilder.add("-bootclasspath",bcp);
    }
  }
  if (!getAnnotationProcessingParams().isEmpty()) {
    Path generateTo=getAnnotationProcessingParams().getGeneratedSourceFolderName();
    if (generateTo != null) {
      optionsBuilder.add("-s").add(pathRelativizer.apply(generateTo).toString());
    }
    optionsBuilder.add("-processorpath",Joiner.on(File.pathSeparator).join(FluentIterable.from(getAnnotationProcessingParams().getSearchPathElements()).transform(pathRelativizer).transform(Functions.toStringFunction())));
    if (!getAnnotationProcessingParams().getNames().isEmpty()) {
      optionsBuilder.add("-processor",Joiner.on(',').join(getAnnotationProcessingParams().getNames()));
    }
    for (    String parameter : getAnnotationProcessingParams().getParameters()) {
      optionsBuilder.add("-A" + parameter);
    }
    if (getAnnotationProcessingParams().getProcessOnly()) {
      optionsBuilder.add("-proc:only");
    }
  }
  optionsBuilder.addAll(getExtraArguments());
}
