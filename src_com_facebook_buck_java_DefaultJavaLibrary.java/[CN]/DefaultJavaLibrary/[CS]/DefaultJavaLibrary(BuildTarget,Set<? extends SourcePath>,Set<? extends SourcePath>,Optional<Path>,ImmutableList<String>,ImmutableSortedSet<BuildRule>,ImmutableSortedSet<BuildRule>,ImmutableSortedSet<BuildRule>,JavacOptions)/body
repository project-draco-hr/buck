{
  this.target=Preconditions.checkNotNull(target);
  this.deps=ImmutableSortedSet.<BuildRule>naturalOrder().addAll(deps).addAll(exportedDeps).build();
  this.srcs=ImmutableSortedSet.copyOf(srcs);
  this.resources=ImmutableSortedSet.copyOf(resources);
  this.proguardConfig=Preconditions.checkNotNull(proguardConfig);
  this.postprocessClassesCommands=Preconditions.checkNotNull(postprocessClassesCommands);
  this.exportedDeps=exportedDeps;
  this.providedDeps=providedDeps;
  this.additionalClasspathEntries=ImmutableSet.of();
  this.javacOptions=Preconditions.checkNotNull(javacOptions);
  if (!srcs.isEmpty() || !resources.isEmpty()) {
    this.outputJar=Optional.of(getOutputJarPath(getBuildTarget()));
  }
 else {
    this.outputJar=Optional.absent();
  }
  this.outputClasspathEntriesSupplier=Suppliers.memoize(new Supplier<ImmutableSetMultimap<JavaLibrary,Path>>(){
    @Override public ImmutableSetMultimap<JavaLibrary,Path> get(){
      return JavaLibraryClasspathProvider.getOutputClasspathEntries(DefaultJavaLibrary.this,outputJar);
    }
  }
);
  this.transitiveClasspathEntriesSupplier=Suppliers.memoize(new Supplier<ImmutableSetMultimap<JavaLibrary,Path>>(){
    @Override public ImmutableSetMultimap<JavaLibrary,Path> get(){
      return JavaLibraryClasspathProvider.getTransitiveClasspathEntries(DefaultJavaLibrary.this,outputJar);
    }
  }
);
  this.declaredClasspathEntriesSupplier=Suppliers.memoize(new Supplier<ImmutableSetMultimap<JavaLibrary,Path>>(){
    @Override public ImmutableSetMultimap<JavaLibrary,Path> get(){
      return JavaLibraryClasspathProvider.getDeclaredClasspathEntries(DefaultJavaLibrary.this);
    }
  }
);
  this.buildOutputInitializer=new BuildOutputInitializer<>(target,this);
}
