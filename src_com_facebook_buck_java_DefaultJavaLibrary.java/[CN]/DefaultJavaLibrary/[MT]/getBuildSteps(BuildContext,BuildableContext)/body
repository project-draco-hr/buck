{
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  if (getProperties().is(ANDROID)) {
    this.javacOptions=JavacOptions.builder(javacOptions).setBootclasspath(context.getAndroidBootclasspathSupplier().get()).build();
  }
  ImmutableSetMultimap<JavaLibrary,Path> transitiveClasspathEntries=ImmutableSetMultimap.<JavaLibrary,Path>builder().putAll(getTransitiveClasspathEntries()).putAll(this,additionalClasspathEntries).build();
  ImmutableSetMultimap<JavaLibrary,Path> declaredClasspathEntries=ImmutableSetMultimap.<JavaLibrary,Path>builder().putAll(getDeclaredClasspathEntries()).putAll(this,additionalClasspathEntries).build();
  Path annotationGenFolder=javacOptions.getAnnotationProcessingParams().getGeneratedSourceFolderName();
  if (annotationGenFolder != null) {
    MakeCleanDirectoryStep mkdirGeneratedSources=new MakeCleanDirectoryStep(getProjectFilesystem(),annotationGenFolder);
    steps.add(mkdirGeneratedSources);
    buildableContext.recordArtifact(annotationGenFolder);
  }
  BuildTarget target=getBuildTarget();
  Path outputDirectory=getClassesDir(target);
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),outputDirectory));
  Optional<JavacStep.SuggestBuildRules> suggestBuildRule=createSuggestBuildFunction(context,transitiveClasspathEntries,declaredClasspathEntries,JAR_RESOLVER);
  Collection<Path> provided=JavaLibraryClasspathProvider.getJavaLibraryDeps(providedDeps).transformAndConcat(new Function<JavaLibrary,Collection<Path>>(){
    @Override public Collection<Path> apply(    JavaLibrary input){
      return input.getOutputClasspathEntries().values();
    }
  }
).filter(Predicates.notNull()).toSet();
  ImmutableSet<Path> declared=ImmutableSet.<Path>builder().addAll(declaredClasspathEntries.values()).addAll(provided).build();
  createCommandsForJavac(outputDirectory,declared,javacOptions,suggestBuildRule,steps,target);
  addPostprocessClassesCommands(getProjectFilesystem().getRootPath(),steps,postprocessClassesCommands,outputDirectory);
  JavaPackageFinder finder=context.getJavaPackageFinder();
  if (resourcesRoot.isPresent()) {
    finder=new ResourcesRootPackageFinder(resourcesRoot.get(),finder);
  }
  steps.add(new CopyResourcesStep(getProjectFilesystem(),getResolver(),target,resources,outputDirectory,finder));
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),getOutputJarDirPath(target)));
  Path abiJar=getOutputJarDirPath(target).resolve(String.format("%s-abi.jar",target.getShortNameAndFlavorPostfix()));
  steps.add(new MkdirStep(getProjectFilesystem(),abiJar.getParent()));
  if (outputJar.isPresent()) {
    Path output=outputJar.get();
    steps.add(new JarDirectoryStep(getProjectFilesystem(),output,Collections.singleton(outputDirectory),null,null));
    buildableContext.recordArtifact(output);
    steps.add(new CalculateAbiStep(buildableContext,getProjectFilesystem(),output,abiJar));
  }
 else {
    Path scratch=BuildTargets.getScratchPath(target,String.format("%%s/%s-temp-abi.jar",target.getShortNameAndFlavorPostfix()));
    steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),scratch.getParent()));
    steps.add(new TouchStep(getProjectFilesystem(),scratch));
    steps.add(new CalculateAbiStep(buildableContext,getProjectFilesystem(),scratch,abiJar));
  }
  JavaLibraryRules.addAccumulateClassNamesStep(this,buildableContext,steps);
  return steps.build();
}
