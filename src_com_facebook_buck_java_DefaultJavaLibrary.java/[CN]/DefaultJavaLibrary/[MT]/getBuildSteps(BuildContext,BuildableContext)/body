{
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  if (getProperties().is(ANDROID)) {
    this.javacOptions=JavacOptions.builder(javacOptions).setBootclasspath(context.getAndroidBootclasspathSupplier().get()).build();
  }
  ImmutableSetMultimap<JavaLibrary,Path> transitiveClasspathEntries=ImmutableSetMultimap.<JavaLibrary,Path>builder().putAll(getTransitiveClasspathEntries()).putAll(this,additionalClasspathEntries).build();
  ImmutableSetMultimap<JavaLibrary,Path> declaredClasspathEntries=ImmutableSetMultimap.<JavaLibrary,Path>builder().putAll(getDeclaredClasspathEntries()).putAll(this,additionalClasspathEntries).build();
  Path annotationGenFolder=javacOptions.getAnnotationProcessingData().getGeneratedSourceFolderName();
  if (annotationGenFolder != null) {
    MakeCleanDirectoryStep mkdirGeneratedSources=new MakeCleanDirectoryStep(annotationGenFolder);
    steps.add(mkdirGeneratedSources);
    buildableContext.recordArtifactsInDirectory(annotationGenFolder);
  }
  Path outputDirectory=getClassesDir(getBuildTarget());
  steps.add(new MakeCleanDirectoryStep(outputDirectory));
  Optional<JavacInMemoryStep.SuggestBuildRules> suggestBuildRule=createSuggestBuildFunction(context,transitiveClasspathEntries,declaredClasspathEntries,JAR_RESOLVER);
  Supplier<Sha1HashCode> abiKeySupplier=createCommandsForJavac(outputDirectory,ImmutableSet.copyOf(transitiveClasspathEntries.values()),ImmutableSet.copyOf(declaredClasspathEntries.values()),javacOptions,context.getBuildDependencies(),suggestBuildRule,steps,getBuildTarget());
  addPostprocessClassesCommands(steps,postprocessClassesCommands,outputDirectory);
  steps.add(new CopyResourcesStep(getBuildTarget(),resources,outputDirectory,context.getJavaPackageFinder()));
  if (outputJar.isPresent()) {
    steps.add(new MakeCleanDirectoryStep(getOutputJarDirPath(getBuildTarget())));
    steps.add(new JarDirectoryStep(outputJar.get(),Collections.singleton(outputDirectory),null,null));
    buildableContext.recordArtifact(outputJar.get());
  }
  Preconditions.checkNotNull(abiKeySupplier,"abiKeySupplier must be set so that getAbiKey() will " + "return a non-null value if this rule builds successfully.");
  addStepsToRecordAbiToDisk(steps,abiKeySupplier,buildableContext);
  JavaLibraryRules.addAccumulateClassNamesStep(this,buildableContext,steps);
  return steps.build();
}
