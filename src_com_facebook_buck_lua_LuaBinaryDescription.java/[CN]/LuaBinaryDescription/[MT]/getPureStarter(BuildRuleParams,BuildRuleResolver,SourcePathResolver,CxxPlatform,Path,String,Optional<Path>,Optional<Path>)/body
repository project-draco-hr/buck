{
  BuildTarget templateTarget=BuildTarget.builder(baseParams.getBuildTarget()).addFlavors(ImmutableFlavor.of("starter-template")).build();
  ruleResolver.addToIndex(new WriteFile(baseParams.copyWithChanges(templateTarget,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,getPureStarterTemplate(),BuildTargets.getGenPath(baseParams.getProjectFilesystem(),templateTarget,"%s/starter.lua.in"),false));
  BuildTarget target=BuildTarget.builder(baseParams.getBuildTarget()).addFlavors(ImmutableFlavor.of("pure-starter")).build();
  final Tool lua=luaConfig.getLua(ruleResolver);
  ruleResolver.addToIndex(WriteStringTemplateRule.from(baseParams,pathResolver,target,output,new BuildTargetSourcePath(templateTarget),ImmutableMap.of("SHEBANG",lua.getCommandPrefix(pathResolver).get(0),"MAIN_MODULE",Escaper.escapeAsPythonString(mainModule),"MODULES_DIR",relativeModulesDir.isPresent() ? Escaper.escapeAsPythonString(relativeModulesDir.get().toString()) : "nil","PY_MODULES_DIR",relativePythonModulesDir.isPresent() ? Escaper.escapeAsPythonString(relativePythonModulesDir.get().toString()) : "nil","EXT_SUFFIX",Escaper.escapeAsPythonString(cxxPlatform.getSharedLibraryExtension())),true));
  return new BuildTargetSourcePath(target);
}
