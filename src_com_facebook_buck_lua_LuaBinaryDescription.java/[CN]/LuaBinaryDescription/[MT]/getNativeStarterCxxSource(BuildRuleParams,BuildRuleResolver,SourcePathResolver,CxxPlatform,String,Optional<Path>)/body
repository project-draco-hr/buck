{
  BuildTarget templateTarget=BuildTarget.builder(baseParams.getBuildTarget()).addFlavors(ImmutableFlavor.of("native-starter-cxx-source-template")).build();
  ruleResolver.addToIndex(new WriteFile(baseParams.copyWithChanges(templateTarget,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,getNativeStarterCxxSourceTemplate(),BuildTargets.getGenPath(baseParams.getProjectFilesystem(),templateTarget,"%s/native-starter.cpp.in"),false));
  BuildTarget target=BuildTarget.builder(baseParams.getBuildTarget()).addFlavors(ImmutableFlavor.of("native-starter-cxx-source")).build();
  Path output=BuildTargets.getGenPath(baseParams.getProjectFilesystem(),target,"%s/native-starter.cpp");
  ruleResolver.addToIndex(WriteStringTemplateRule.from(baseParams,pathResolver,target,output,new BuildTargetSourcePath(templateTarget),ImmutableMap.of("MAIN_MODULE",Escaper.escapeAsPythonString(mainModule),"MODULES_DIR",relativeModulesDir.isPresent() ? Escaper.escapeAsPythonString(relativeModulesDir.get().toString()) : "NULL","EXT_SUFFIX",Escaper.escapeAsPythonString(cxxPlatform.getSharedLibraryExtension())),false));
  return CxxSource.of(CxxSource.Type.CXX,new BuildTargetSourcePath(target),ImmutableList.<String>of());
}
