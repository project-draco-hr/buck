{
  Path output=getOutputPath(params.getBuildTarget(),params.getProjectFilesystem());
  Tool lua=luaConfig.getLua(resolver);
  Tool packager=luaConfig.getPackager().resolve(resolver);
  LuaStandaloneBinary binary=resolver.addToIndex(new LuaStandaloneBinary(params.copyWithChanges(params.getBuildTarget().withAppendedFlavors(ImmutableFlavor.of("binary")),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(pathResolver.filterBuildRuleInputs(starter)).addAll(components.getDeps(pathResolver)).addAll(lua.getDeps(pathResolver)).addAll(packager.getDeps(pathResolver)).build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,packager,ImmutableList.<String>of(),output,Optional.of(starter),components,mainModule,lua,luaConfig.shouldCacheBinaries()));
  return new CommandTool.Builder().addArg(new SourcePathArg(pathResolver,new BuildTargetSourcePath(binary.getBuildTarget()))).build();
}
