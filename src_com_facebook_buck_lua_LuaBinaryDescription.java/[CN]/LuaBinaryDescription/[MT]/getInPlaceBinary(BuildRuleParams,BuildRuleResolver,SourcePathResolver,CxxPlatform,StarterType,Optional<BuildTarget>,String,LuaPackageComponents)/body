{
  Path output=getOutputPath(params.getBuildTarget(),params.getProjectFilesystem());
  final SymlinkTree modulesLinkTree=resolver.addToIndex(createSymlinkTree(params,resolver,pathResolver,ImmutableFlavor.of("modules-link-tree"),components.getModules()));
  Path relativeModulesLinkTreeRoot=output.getParent().relativize(params.getProjectFilesystem().getRootPath().relativize(modulesLinkTree.getRoot()));
  final List<SymlinkTree> nativeLibsLinktree=new ArrayList<>();
  Optional<Path> relativeNativeLibsLinkTreeRoot=Optional.absent();
  if (!components.getNativeLibraries().isEmpty()) {
    SymlinkTree symlinkTree=resolver.addToIndex(createSymlinkTree(params,resolver,pathResolver,ImmutableFlavor.of("native-libs-link-tree"),components.getNativeLibraries()));
    nativeLibsLinktree.add(symlinkTree);
    relativeNativeLibsLinkTreeRoot=Optional.of(output.getParent().relativize(params.getProjectFilesystem().getRootPath().relativize(symlinkTree.getRoot())));
  }
  final Tool starter=getStarter(params,resolver,pathResolver,cxxPlatform,starterType,nativeStarterLibrary,mainModule,relativeModulesLinkTreeRoot,relativeNativeLibsLinkTreeRoot);
  return new Tool(){
    @Override public ImmutableCollection<BuildRule> getDeps(    SourcePathResolver resolver){
      return ImmutableSortedSet.<BuildRule>naturalOrder().addAll(starter.getDeps(pathResolver)).addAll(components.getDeps(pathResolver)).add(modulesLinkTree).addAll(nativeLibsLinktree).build();
    }
    @Override public ImmutableCollection<SourcePath> getInputs(){
      return ImmutableSortedSet.<SourcePath>naturalOrder().addAll(starter.getInputs()).addAll(components.getInputs()).build();
    }
    @Override public ImmutableList<String> getCommandPrefix(    SourcePathResolver resolver){
      return starter.getCommandPrefix(resolver);
    }
    @Override public ImmutableMap<String,String> getEnvironment(    SourcePathResolver resolver){
      return ImmutableMap.of();
    }
    @Override public void appendToRuleKey(    RuleKeyObjectSink sink){
      sink.setReflectively("starter",starter).setReflectively("components",components);
    }
  }
;
}
