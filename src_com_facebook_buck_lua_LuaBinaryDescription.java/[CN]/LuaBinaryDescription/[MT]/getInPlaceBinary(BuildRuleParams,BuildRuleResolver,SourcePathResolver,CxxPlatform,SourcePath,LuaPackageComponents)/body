{
  final List<SourcePath> extraInputs=new ArrayList<>();
  final SymlinkTree modulesLinkTree=resolver.addToIndex(createSymlinkTree(getModulesSymlinkTreeTarget(params.getBuildTarget()),params,resolver,pathResolver,params.getProjectFilesystem().resolve(getModulesSymlinkTreeRoot(params.getBuildTarget(),params.getProjectFilesystem())),components.getModules()));
  final List<SymlinkTree> pythonModulesLinktree=new ArrayList<>();
  if (!components.getPythonModules().isEmpty()) {
    SourcePath emptyInit=PythonBinaryDescription.createEmptyInitModule(params,resolver,pathResolver);
    extraInputs.add(emptyInit);
    ImmutableMap<String,SourcePath> pythonModules=MoreMaps.transformKeys(PythonBinaryDescription.addMissingInitModules(MoreMaps.transformKeys(components.getPythonModules(),MorePaths.toPathFn(params.getProjectFilesystem().getRootPath().getFileSystem())),emptyInit),Functions.toStringFunction());
    final SymlinkTree symlinkTree=resolver.addToIndex(createSymlinkTree(getPythonModulesSymlinkTreeTarget(params.getBuildTarget()),params,resolver,pathResolver,params.getProjectFilesystem().resolve(getPythonModulesSymlinkTreeRoot(params.getBuildTarget(),params.getProjectFilesystem())),pythonModules));
    pythonModulesLinktree.add(symlinkTree);
  }
  final List<SymlinkTree> nativeLibsLinktree=new ArrayList<>();
  if (!components.getNativeLibraries().isEmpty()) {
    SymlinkTree symlinkTree=resolver.addToIndex(createSymlinkTree(getNativeLibsSymlinkTreeTarget(params.getBuildTarget()),params,resolver,pathResolver,params.getProjectFilesystem().resolve(getNativeLibsSymlinkTreeRoot(params.getBuildTarget(),params.getProjectFilesystem())),addVersionLessLibraries(cxxPlatform,components.getNativeLibraries())));
    nativeLibsLinktree.add(symlinkTree);
  }
  return new Tool(){
    @Override public ImmutableCollection<BuildRule> getDeps(    SourcePathResolver resolver){
      return ImmutableSortedSet.<BuildRule>naturalOrder().addAll(pathResolver.filterBuildRuleInputs(starter)).addAll(components.getDeps(resolver)).add(modulesLinkTree).addAll(nativeLibsLinktree).addAll(pythonModulesLinktree).addAll(pathResolver.filterBuildRuleInputs(extraInputs)).build();
    }
    @Override public ImmutableCollection<SourcePath> getInputs(){
      return ImmutableSortedSet.<SourcePath>naturalOrder().add(starter).addAll(components.getInputs()).addAll(extraInputs).build();
    }
    @Override public ImmutableList<String> getCommandPrefix(    SourcePathResolver resolver){
      return ImmutableList.of(resolver.getAbsolutePath(starter).toString());
    }
    @Override public ImmutableMap<String,String> getEnvironment(    SourcePathResolver resolver){
      return ImmutableMap.of();
    }
    @Override public void appendToRuleKey(    RuleKeyObjectSink sink){
      sink.setReflectively("starter",starter).setReflectively("components",components);
    }
  }
;
}
