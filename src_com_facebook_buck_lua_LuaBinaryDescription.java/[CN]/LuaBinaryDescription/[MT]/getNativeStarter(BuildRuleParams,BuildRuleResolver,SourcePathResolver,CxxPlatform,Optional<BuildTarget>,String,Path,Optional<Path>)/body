{
  BuildTarget target=BuildTarget.builder(baseParams.getBuildTarget()).addFlavors(ImmutableFlavor.of("native-starter")).build();
  Iterable<? extends AbstractCxxLibrary> nativeStarterDeps=getNativeStarterDeps(ruleResolver,nativeStarterLibrary);
  Path output=getOutputPath(baseParams.getBuildTarget(),baseParams.getProjectFilesystem());
  ImmutableMap<CxxPreprocessAndCompile,SourcePath> objects=CxxSourceRuleFactory.requirePreprocessAndCompileRules(baseParams,ruleResolver,pathResolver,cxxBuckConfig,cxxPlatform,ImmutableList.<CxxPreprocessorInput>builder().add(CxxPreprocessorInput.builder().putAllPreprocessorFlags(CxxSource.Type.CXX,nativeStarterLibrary.isPresent() ? ImmutableList.<String>of() : ImmutableList.of("-DBUILTIN_NATIVE_STARTER")).build()).addAll(getTransitiveCxxPreprocessorInput(cxxPlatform,nativeStarterDeps)).build(),ImmutableMultimap.<CxxSource.Type,String>of(),Optional.<SourcePath>absent(),cxxBuckConfig.getPreprocessMode(),ImmutableMap.of("native-starter.cpp",getNativeStarterCxxSource(baseParams,ruleResolver,pathResolver,cxxPlatform,mainModule,relativeModulesDir)),CxxSourceRuleFactory.PicType.PDC);
  ruleResolver.addToIndex(CxxLinkableEnhancer.createCxxLinkableBuildRule(cxxBuckConfig,cxxPlatform,baseParams,ruleResolver,pathResolver,target,Linker.LinkType.EXECUTABLE,Optional.<String>absent(),output,Linker.LinkableDepType.SHARED,nativeStarterDeps,Optional.<Linker.CxxRuntimeType>absent(),Optional.<SourcePath>absent(),ImmutableSet.<BuildTarget>of(),NativeLinkableInput.builder().addAllArgs(relativeNativeLibsDir.isPresent() ? StringArg.from(Linkers.iXlinker("-rpath",String.format("%s/%s",cxxPlatform.getLd().resolve(ruleResolver).origin(),relativeNativeLibsDir.get().toString()))) : ImmutableList.<com.facebook.buck.rules.args.Arg>of()).addAllArgs(SourcePathArg.from(pathResolver,objects.values())).build()));
  return new CommandTool.Builder().addArg(new SourcePathArg(pathResolver,new BuildTargetSourcePath(target))).build();
}
