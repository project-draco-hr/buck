{
  Path output=getOutputPath(baseParams.getBuildTarget(),baseParams.getProjectFilesystem());
  StarterType starterType=getStarterType(mayHaveNativeCode);
  Optional<Path> relativeModulesDir=Optional.absent();
  Optional<Path> relativePythonModulesDir=Optional.absent();
  Optional<Path> relativeNativeLibsDir=Optional.absent();
  if (packageStyle == LuaConfig.PackageStyle.INPLACE) {
    relativeModulesDir=Optional.of(output.getParent().relativize(getModulesSymlinkTreeRoot(baseParams.getBuildTarget(),baseParams.getProjectFilesystem())));
    relativePythonModulesDir=Optional.of(output.getParent().relativize(getPythonModulesSymlinkTreeRoot(baseParams.getBuildTarget(),baseParams.getProjectFilesystem())));
    if (starterType == StarterType.NATIVE) {
      relativeNativeLibsDir=Optional.of(output.getParent().relativize(getNativeLibsSymlinkTreeRoot(baseParams.getBuildTarget(),baseParams.getProjectFilesystem())));
    }
  }
  return getStarter(baseParams,ruleResolver,pathResolver,cxxPlatform,baseParams.getBuildTarget().withAppendedFlavors(packageStyle == LuaConfig.PackageStyle.STANDALONE ? ImmutableFlavor.of("starter") : BINARY_FLAVOR),packageStyle == LuaConfig.PackageStyle.STANDALONE ? output.resolveSibling(output.getFileName() + "-starter") : output,starterType,nativeStarterLibrary,mainModule,relativeModulesDir,relativePythonModulesDir,relativeNativeLibsDir);
}
