{
  final LuaPackageComponents.Builder builder=LuaPackageComponents.builder();
  final Map<BuildTarget,NativeLinkable> nativeLinkables=new LinkedHashMap<>();
  final Map<BuildTarget,CxxPythonExtension> pythonExtensions=new LinkedHashMap<>();
  new AbstractBreadthFirstThrowingTraversal<BuildRule,NoSuchBuildTargetException>(deps){
    private final ImmutableSet<BuildRule> empty=ImmutableSet.of();
    @Override public ImmutableSet<BuildRule> visit(    BuildRule rule) throws NoSuchBuildTargetException {
      ImmutableSet<BuildRule> deps=empty;
      if (rule instanceof LuaPackageable) {
        LuaPackageable packageable=(LuaPackageable)rule;
        LuaPackageComponents.addComponents(builder,packageable.getLuaPackageComponents());
        deps=rule.getDeps();
      }
 else       if (rule instanceof CxxPythonExtension) {
        pythonExtensions.put(rule.getBuildTarget(),(CxxPythonExtension)rule);
      }
 else       if (rule instanceof PythonPackagable) {
        PythonPackagable packageable=(PythonPackagable)rule;
        PythonPackageComponents components=packageable.getPythonPackageComponents(pythonPlatform,cxxPlatform);
        builder.putAllPythonModules(MoreMaps.transformKeys(components.getModules(),Functions.toStringFunction()));
        builder.putAllNativeLibraries(MoreMaps.transformKeys(components.getNativeLibraries(),Functions.toStringFunction()));
        deps=rule.getDeps();
      }
 else       if (rule instanceof CxxLuaExtension) {
        CxxLuaExtension extension=(CxxLuaExtension)rule;
        builder.putModules(extension.getModule(cxxPlatform),extension.getExtension(cxxPlatform));
        nativeLinkables.putAll(Maps.uniqueIndex(extension.getNativeLinkTargetDeps(cxxPlatform),HasBuildTarget.TO_TARGET));
      }
 else       if (rule instanceof NativeLinkable) {
        NativeLinkable linkable=(NativeLinkable)rule;
        nativeLinkables.put(linkable.getBuildTarget(),linkable);
      }
      return deps;
    }
  }
.start();
  for (  Map.Entry<BuildTarget,CxxPythonExtension> entry : pythonExtensions.entrySet()) {
    PythonPackageComponents components=entry.getValue().getPythonPackageComponents(pythonPlatform,cxxPlatform);
    builder.putAllPythonModules(MoreMaps.transformKeys(components.getModules(),Functions.toStringFunction()));
    builder.putAllNativeLibraries(MoreMaps.transformKeys(components.getNativeLibraries(),Functions.toStringFunction()));
    nativeLinkables.putAll(Maps.uniqueIndex(entry.getValue().getNativeLinkTarget(pythonPlatform).getNativeLinkTargetDeps(cxxPlatform),HasBuildTarget.TO_TARGET));
  }
  for (  NativeLinkable nativeLinkable : NativeLinkables.getTransitiveNativeLinkables(cxxPlatform,nativeLinkables.values()).values()) {
    NativeLinkable.Linkage linkage=nativeLinkable.getPreferredLinkage(cxxPlatform);
    if (linkage != NativeLinkable.Linkage.STATIC) {
      builder.putAllNativeLibraries(nativeLinkable.getSharedLibraries(cxxPlatform));
    }
  }
  Path output=getOutputPath(baseParams.getBuildTarget(),baseParams.getProjectFilesystem());
  LuaPackageComponents components=builder.build();
  StarterType starterType=getStarterType(components);
  if (starterType == StarterType.NATIVE) {
    components=addNativeDeps(components,cxxPlatform,getNativeStarterDeps(ruleResolver,nativeStarterLibrary));
  }
  Optional<Path> relativeModulesDir=Optional.absent();
  Optional<Path> relativePythonModulesDir=Optional.absent();
  Optional<Path> relativeNativeLibsDir=Optional.absent();
  if (packageStyle == LuaConfig.PackageStyle.INPLACE) {
    if (!components.getModules().isEmpty()) {
      relativeModulesDir=Optional.of(output.getParent().relativize(getModulesSymlinkTreeRoot(baseParams.getBuildTarget(),baseParams.getProjectFilesystem())));
    }
    if (!components.getNativeLibraries().isEmpty()) {
      relativeNativeLibsDir=Optional.of(output.getParent().relativize(getNativeLibsSymlinkTreeRoot(baseParams.getBuildTarget(),baseParams.getProjectFilesystem())));
    }
    if (!components.getPythonModules().isEmpty()) {
      relativePythonModulesDir=Optional.of(output.getParent().relativize(getPythonModulesSymlinkTreeRoot(baseParams.getBuildTarget(),baseParams.getProjectFilesystem())));
    }
  }
  Starter starter=getStarter(baseParams,ruleResolver,pathResolver,cxxPlatform,output,starterType,nativeStarterLibrary,mainModule,relativeModulesDir,relativePythonModulesDir,relativeNativeLibsDir);
  return LuaBinaryPackageComponents.of(starter.build(),components);
}
