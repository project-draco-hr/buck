{
  final LuaPackageComponents.Builder builder=LuaPackageComponents.builder();
  final OmnibusRoots.Builder omnibusRoots=OmnibusRoots.builder(cxxPlatform,FluentIterable.from(getNativeStarterDeps(ruleResolver,nativeStarterLibrary)).transform(HasBuildTarget.TO_TARGET).toSet());
  final Map<BuildTarget,NativeLinkable> nativeLinkableRoots=new LinkedHashMap<>();
  final Map<BuildTarget,CxxLuaExtension> luaExtensions=new LinkedHashMap<>();
  final Map<BuildTarget,CxxPythonExtension> pythonExtensions=new LinkedHashMap<>();
  new AbstractBreadthFirstThrowingTraversal<BuildRule,NoSuchBuildTargetException>(deps){
    private final ImmutableSet<BuildRule> empty=ImmutableSet.of();
    @Override public ImmutableSet<BuildRule> visit(    BuildRule rule) throws NoSuchBuildTargetException {
      ImmutableSet<BuildRule> deps=empty;
      if (rule instanceof LuaPackageable) {
        LuaPackageable packageable=(LuaPackageable)rule;
        LuaPackageComponents components=packageable.getLuaPackageComponents();
        LuaPackageComponents.addComponents(builder,components);
        if (components.hasNativeCode(cxxPlatform)) {
          for (          BuildRule dep : rule.getDeps()) {
            if (dep instanceof NativeLinkable) {
              NativeLinkable linkable=(NativeLinkable)dep;
              nativeLinkableRoots.put(linkable.getBuildTarget(),linkable);
              omnibusRoots.addExcludedRoot(linkable);
            }
          }
        }
        deps=rule.getDeps();
      }
 else       if (rule instanceof CxxPythonExtension) {
        CxxPythonExtension extension=(CxxPythonExtension)rule;
        NativeLinkTarget target=extension.getNativeLinkTarget(pythonPlatform);
        pythonExtensions.put(rule.getBuildTarget(),(CxxPythonExtension)rule);
        omnibusRoots.addIncludedRoot(target);
      }
 else       if (rule instanceof PythonPackagable) {
        PythonPackagable packageable=(PythonPackagable)rule;
        PythonPackageComponents components=packageable.getPythonPackageComponents(pythonPlatform,cxxPlatform);
        builder.putAllPythonModules(MoreMaps.transformKeys(components.getModules(),Functions.toStringFunction()));
        builder.putAllNativeLibraries(MoreMaps.transformKeys(components.getNativeLibraries(),Functions.toStringFunction()));
        if (components.hasNativeCode(cxxPlatform)) {
          for (          BuildRule dep : rule.getDeps()) {
            if (dep instanceof NativeLinkable) {
              NativeLinkable linkable=(NativeLinkable)dep;
              nativeLinkableRoots.put(linkable.getBuildTarget(),linkable);
              omnibusRoots.addExcludedRoot(linkable);
            }
          }
        }
        deps=rule.getDeps();
      }
 else       if (rule instanceof CxxLuaExtension) {
        CxxLuaExtension extension=(CxxLuaExtension)rule;
        luaExtensions.put(extension.getBuildTarget(),extension);
        omnibusRoots.addIncludedRoot(extension);
      }
 else       if (rule instanceof NativeLinkable) {
        NativeLinkable linkable=(NativeLinkable)rule;
        nativeLinkableRoots.put(linkable.getBuildTarget(),linkable);
        omnibusRoots.addPotentialRoot(rule);
      }
      return deps;
    }
  }
.start();
  if (luaConfig.getNativeLinkStrategy() == NativeLinkStrategy.MERGED) {
    OmnibusRoots roots=omnibusRoots.build();
    OmnibusLibraries libraries=Omnibus.getSharedLibraries(baseParams,ruleResolver,pathResolver,cxxBuckConfig,cxxPlatform,ImmutableList.<com.facebook.buck.rules.args.Arg>of(),roots.getIncludedRoots().values(),roots.getExcludedRoots().values());
    for (    Map.Entry<BuildTarget,OmnibusRoot> root : libraries.getRoots().entrySet()) {
      CxxLuaExtension luaExtension=luaExtensions.get(root.getKey());
      if (luaExtension != null) {
        builder.putModules(luaExtension.getModule(cxxPlatform),root.getValue().getPath());
        continue;
      }
      CxxPythonExtension pythonExtension=pythonExtensions.get(root.getKey());
      if (pythonExtension != null) {
        builder.putPythonModules(pythonExtension.getModule().toString(),root.getValue().getPath());
        continue;
      }
      NativeLinkTarget target=Preconditions.checkNotNull(roots.getIncludedRoots().get(root.getKey()),"%s: linked unexpected omnibus root: %s",baseParams.getBuildTarget(),root.getKey());
      NativeLinkTargetMode mode=target.getNativeLinkTargetMode(cxxPlatform);
      String soname=Preconditions.checkNotNull(mode.getLibraryName().orNull(),"%s: omnibus library for %s was built without soname",baseParams.getBuildTarget(),root.getKey());
      builder.putNativeLibraries(soname,root.getValue().getPath());
    }
    for (    OmnibusLibrary library : libraries.getLibraries()) {
      builder.putNativeLibraries(library.getSoname(),library.getPath());
    }
  }
 else {
    for (    Map.Entry<BuildTarget,CxxLuaExtension> entry : luaExtensions.entrySet()) {
      CxxLuaExtension extension=entry.getValue();
      builder.putModules(extension.getModule(cxxPlatform),extension.getExtension(cxxPlatform));
      nativeLinkableRoots.putAll(Maps.uniqueIndex(extension.getNativeLinkTargetDeps(cxxPlatform),HasBuildTarget.TO_TARGET));
    }
    for (    Map.Entry<BuildTarget,CxxPythonExtension> entry : pythonExtensions.entrySet()) {
      PythonPackageComponents components=entry.getValue().getPythonPackageComponents(pythonPlatform,cxxPlatform);
      builder.putAllPythonModules(MoreMaps.transformKeys(components.getModules(),Functions.toStringFunction()));
      builder.putAllNativeLibraries(MoreMaps.transformKeys(components.getNativeLibraries(),Functions.toStringFunction()));
      nativeLinkableRoots.putAll(Maps.uniqueIndex(entry.getValue().getNativeLinkTarget(pythonPlatform).getNativeLinkTargetDeps(cxxPlatform),HasBuildTarget.TO_TARGET));
    }
    for (    NativeLinkable nativeLinkable : NativeLinkables.getTransitiveNativeLinkables(cxxPlatform,nativeLinkableRoots.values()).values()) {
      NativeLinkable.Linkage linkage=nativeLinkable.getPreferredLinkage(cxxPlatform);
      if (linkage != NativeLinkable.Linkage.STATIC) {
        builder.putAllNativeLibraries(nativeLinkable.getSharedLibraries(cxxPlatform));
      }
    }
  }
  Path output=getOutputPath(baseParams.getBuildTarget(),baseParams.getProjectFilesystem());
  LuaPackageComponents components=builder.build();
  StarterType starterType=getStarterType(components);
  if (starterType == StarterType.NATIVE) {
    components=addNativeDeps(components,cxxPlatform,getNativeStarterDeps(ruleResolver,nativeStarterLibrary));
  }
  Optional<Path> relativeModulesDir=Optional.absent();
  Optional<Path> relativePythonModulesDir=Optional.absent();
  Optional<Path> relativeNativeLibsDir=Optional.absent();
  if (packageStyle == LuaConfig.PackageStyle.INPLACE) {
    if (!components.getModules().isEmpty()) {
      relativeModulesDir=Optional.of(output.getParent().relativize(getModulesSymlinkTreeRoot(baseParams.getBuildTarget(),baseParams.getProjectFilesystem())));
    }
    if (!components.getNativeLibraries().isEmpty()) {
      relativeNativeLibsDir=Optional.of(output.getParent().relativize(getNativeLibsSymlinkTreeRoot(baseParams.getBuildTarget(),baseParams.getProjectFilesystem())));
    }
    if (!components.getPythonModules().isEmpty()) {
      relativePythonModulesDir=Optional.of(output.getParent().relativize(getPythonModulesSymlinkTreeRoot(baseParams.getBuildTarget(),baseParams.getProjectFilesystem())));
    }
  }
  Starter starter=getStarter(baseParams,ruleResolver,pathResolver,cxxPlatform,baseParams.getBuildTarget().withAppendedFlavors(packageStyle == LuaConfig.PackageStyle.STANDALONE ? ImmutableFlavor.of("starter") : BINARY_FLAVOR),packageStyle == LuaConfig.PackageStyle.STANDALONE ? output.resolveSibling(output.getFileName() + "-starter") : output,starterType,nativeStarterLibrary,mainModule,relativeModulesDir,relativePythonModulesDir,relativeNativeLibsDir);
  return LuaBinaryPackageComponents.of(starter.build(),components);
}
