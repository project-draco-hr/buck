{
  final LuaPackageComponents.Builder builder=LuaPackageComponents.builder();
  final OmnibusRoots.Builder omnibusRoots=OmnibusRoots.builder(cxxPlatform,ImmutableSet.<BuildTarget>of());
  final Map<BuildTarget,NativeLinkable> nativeLinkableRoots=new LinkedHashMap<>();
  final Map<BuildTarget,CxxLuaExtension> luaExtensions=new LinkedHashMap<>();
  final Map<BuildTarget,CxxPythonExtension> pythonExtensions=new LinkedHashMap<>();
  new AbstractBreadthFirstThrowingTraversal<BuildRule,NoSuchBuildTargetException>(deps){
    private final ImmutableSet<BuildRule> empty=ImmutableSet.of();
    @Override public ImmutableSet<BuildRule> visit(    BuildRule rule) throws NoSuchBuildTargetException {
      ImmutableSet<BuildRule> deps=empty;
      if (rule instanceof LuaPackageable) {
        LuaPackageable packageable=(LuaPackageable)rule;
        LuaPackageComponents components=packageable.getLuaPackageComponents();
        LuaPackageComponents.addComponents(builder,components);
        if (components.hasNativeCode(cxxPlatform)) {
          for (          BuildRule dep : rule.getDeps()) {
            if (dep instanceof NativeLinkable) {
              NativeLinkable linkable=(NativeLinkable)dep;
              nativeLinkableRoots.put(linkable.getBuildTarget(),linkable);
              omnibusRoots.addExcludedRoot(linkable);
            }
          }
        }
        deps=rule.getDeps();
      }
 else       if (rule instanceof CxxPythonExtension) {
        CxxPythonExtension extension=(CxxPythonExtension)rule;
        NativeLinkTarget target=extension.getNativeLinkTarget(pythonPlatform);
        pythonExtensions.put(target.getBuildTarget(),(CxxPythonExtension)rule);
        omnibusRoots.addIncludedRoot(target);
      }
 else       if (rule instanceof PythonPackagable) {
        PythonPackagable packageable=(PythonPackagable)rule;
        PythonPackageComponents components=packageable.getPythonPackageComponents(pythonPlatform,cxxPlatform);
        builder.putAllPythonModules(MoreMaps.transformKeys(components.getModules(),Functions.toStringFunction()));
        builder.putAllNativeLibraries(MoreMaps.transformKeys(components.getNativeLibraries(),Functions.toStringFunction()));
        if (components.hasNativeCode(cxxPlatform)) {
          for (          BuildRule dep : rule.getDeps()) {
            if (dep instanceof NativeLinkable) {
              NativeLinkable linkable=(NativeLinkable)dep;
              nativeLinkableRoots.put(linkable.getBuildTarget(),linkable);
              omnibusRoots.addExcludedRoot(linkable);
            }
          }
        }
        deps=rule.getDeps();
      }
 else       if (rule instanceof CxxLuaExtension) {
        CxxLuaExtension extension=(CxxLuaExtension)rule;
        luaExtensions.put(extension.getBuildTarget(),extension);
        omnibusRoots.addIncludedRoot(extension);
      }
 else       if (rule instanceof NativeLinkable) {
        NativeLinkable linkable=(NativeLinkable)rule;
        nativeLinkableRoots.put(linkable.getBuildTarget(),linkable);
        omnibusRoots.addPotentialRoot(rule);
      }
      return deps;
    }
  }
.start();
  Starter starter=createStarter(baseParams,ruleResolver,pathResolver,cxxPlatform,nativeStarterLibrary,mainModule,packageStyle,!nativeLinkableRoots.isEmpty() || !omnibusRoots.isEmpty());
  SourcePath starterPath=null;
  if (luaConfig.getNativeLinkStrategy() == NativeLinkStrategy.MERGED) {
    if (starter instanceof NativeExecutableStarter) {
      NativeExecutableStarter nativeStarter=(NativeExecutableStarter)starter;
      omnibusRoots.addIncludedRoot(nativeStarter);
    }
    OmnibusRoots roots=omnibusRoots.build();
    OmnibusLibraries libraries=Omnibus.getSharedLibraries(baseParams,ruleResolver,pathResolver,cxxBuckConfig,cxxPlatform,ImmutableList.<com.facebook.buck.rules.args.Arg>of(),roots.getIncludedRoots().values(),roots.getExcludedRoots().values());
    for (    Map.Entry<BuildTarget,OmnibusRoot> root : libraries.getRoots().entrySet()) {
      CxxLuaExtension luaExtension=luaExtensions.get(root.getKey());
      if (luaExtension != null) {
        builder.putModules(luaExtension.getModule(cxxPlatform),root.getValue().getPath());
        continue;
      }
      CxxPythonExtension pythonExtension=pythonExtensions.get(root.getKey());
      if (pythonExtension != null) {
        builder.putPythonModules(pythonExtension.getModule().toString(),root.getValue().getPath());
        continue;
      }
      if (root.getKey().equals(baseParams.getBuildTarget())) {
        starterPath=root.getValue().getPath();
        continue;
      }
      NativeLinkTarget target=Preconditions.checkNotNull(roots.getIncludedRoots().get(root.getKey()),"%s: linked unexpected omnibus root: %s",baseParams.getBuildTarget(),root.getKey());
      NativeLinkTargetMode mode=target.getNativeLinkTargetMode(cxxPlatform);
      String soname=Preconditions.checkNotNull(mode.getLibraryName().orNull(),"%s: omnibus library for %s was built without soname",baseParams.getBuildTarget(),root.getKey());
      builder.putNativeLibraries(soname,root.getValue().getPath());
    }
    for (    OmnibusLibrary library : libraries.getLibraries()) {
      builder.putNativeLibraries(library.getSoname(),library.getPath());
    }
  }
 else {
    for (    Map.Entry<BuildTarget,CxxLuaExtension> entry : luaExtensions.entrySet()) {
      CxxLuaExtension extension=entry.getValue();
      builder.putModules(extension.getModule(cxxPlatform),extension.getExtension(cxxPlatform));
      nativeLinkableRoots.putAll(Maps.uniqueIndex(extension.getNativeLinkTargetDeps(cxxPlatform),HasBuildTarget.TO_TARGET));
    }
    if (starter instanceof NativeExecutableStarter) {
      NativeExecutableStarter executableStarter=(NativeExecutableStarter)starter;
      nativeLinkableRoots.putAll(Maps.uniqueIndex(executableStarter.getNativeStarterDeps(),HasBuildTarget.TO_TARGET));
    }
    for (    Map.Entry<BuildTarget,CxxPythonExtension> entry : pythonExtensions.entrySet()) {
      PythonPackageComponents components=entry.getValue().getPythonPackageComponents(pythonPlatform,cxxPlatform);
      builder.putAllPythonModules(MoreMaps.transformKeys(components.getModules(),Functions.toStringFunction()));
      builder.putAllNativeLibraries(MoreMaps.transformKeys(components.getNativeLibraries(),Functions.toStringFunction()));
      nativeLinkableRoots.putAll(Maps.uniqueIndex(entry.getValue().getNativeLinkTarget(pythonPlatform).getNativeLinkTargetDeps(cxxPlatform),HasBuildTarget.TO_TARGET));
    }
    for (    NativeLinkable nativeLinkable : NativeLinkables.getTransitiveNativeLinkables(cxxPlatform,nativeLinkableRoots.values()).values()) {
      NativeLinkable.Linkage linkage=nativeLinkable.getPreferredLinkage(cxxPlatform);
      if (linkage != NativeLinkable.Linkage.STATIC) {
        builder.putAllNativeLibraries(nativeLinkable.getSharedLibraries(cxxPlatform));
      }
    }
  }
  if (starterPath == null) {
    starterPath=starter.build();
  }
  return LuaBinaryPackageComponents.of(starterPath,builder.build());
}
