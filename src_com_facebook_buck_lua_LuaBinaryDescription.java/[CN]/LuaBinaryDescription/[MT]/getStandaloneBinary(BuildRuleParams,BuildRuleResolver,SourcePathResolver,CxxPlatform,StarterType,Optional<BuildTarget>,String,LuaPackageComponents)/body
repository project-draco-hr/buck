{
  Path output=getOutputPath(params.getBuildTarget(),params.getProjectFilesystem());
  Optional<SourcePath> nativeStarter=Optional.absent();
  if (starterType == StarterType.NATIVE) {
    nativeStarter=Optional.of(getNativeStarter(params,resolver,pathResolver,cxxPlatform,BuildTargets.getGenPath(params.getProjectFilesystem(),params.getBuildTarget(),"%s-native-starter"),nativeStarterLibrary,mainModule,Optional.<Path>absent(),Optional.<Path>absent()));
  }
  Tool lua=luaConfig.getLua(resolver);
  Tool packager=luaConfig.getPackager().resolve(resolver);
  LuaStandaloneBinary binary=resolver.addToIndex(new LuaStandaloneBinary(params.copyWithChanges(params.getBuildTarget().withAppendedFlavors(ImmutableFlavor.of("binary")),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(pathResolver.filterBuildRuleInputs(nativeStarter.asSet())).addAll(components.getDeps(pathResolver)).addAll(lua.getDeps(pathResolver)).addAll(packager.getDeps(pathResolver)).build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,packager,ImmutableList.<String>of(),output,nativeStarter,components,mainModule,lua,luaConfig.shouldCacheBinaries()));
  return new CommandTool.Builder().addArg(new SourcePathArg(pathResolver,new BuildTargetSourcePath(binary.getBuildTarget()))).build();
}
