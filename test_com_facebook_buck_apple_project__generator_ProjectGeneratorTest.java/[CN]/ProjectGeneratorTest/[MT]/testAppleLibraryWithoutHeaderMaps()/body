{
  ImmutableSortedMap<String,ImmutableMap<String,String>> configs=ImmutableSortedMap.of("Debug",ImmutableMap.<String,String>of());
  BuildTarget libraryTarget=BuildTarget.builder(rootPath,"//foo","lib").build();
  TargetNode<?> libraryNode=AppleLibraryBuilder.createBuilder(libraryTarget).setConfigs(Optional.of(configs)).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("foo.m"))))).build();
  BuildTarget testTarget=BuildTarget.builder(rootPath,"//foo","xctest").build();
  TargetNode<?> testNode=AppleTestBuilder.createBuilder(testTarget).setConfigs(Optional.of(configs)).setInfoPlist(new FakeSourcePath("Info.plist")).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("fooTest.m"))))).setDeps(Optional.of(ImmutableSortedSet.of(libraryTarget))).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(libraryNode,testNode),ImmutableSet.of(ProjectGenerator.Option.DISABLE_HEADER_MAPS));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:xctest");
  ImmutableMap<String,String> settings=getBuildSettings(testTarget,target,"Debug");
  assertEquals("$(inherited) " + "../buck-out/gen/_project/ptQfVNNRREMFWy8msh938FIQgOU-private-headers " + "../buck-out/gen/_project/ptQfVNNRREMFWy8msh938FIQgOU-public-headers "+ "../buck-out/gen/_project/CwkbTNOBmbhf7TdVehLAj7vKmzI-public-headers "+ "../buck-out",settings.get("HEADER_SEARCH_PATHS"));
}
