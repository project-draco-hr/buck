{
  BuildTarget frameworkTarget=BuildTarget.builder(rootPath,"//foo","framework").addFlavors(FakeAppleRuleDescriptions.DEFAULT_MACOSX_X86_64_PLATFORM.getFlavor(),CxxDescriptionEnhancer.SHARED_FLAVOR).build();
  BuildTarget frameworkBinaryTarget=BuildTarget.builder(rootPath,"//foo","framework_bin").addFlavors(FakeAppleRuleDescriptions.DEFAULT_MACOSX_X86_64_PLATFORM.getFlavor(),CxxDescriptionEnhancer.SHARED_FLAVOR).build();
  TargetNode<?> frameworkBinaryNode=AppleLibraryBuilder.createBuilder(frameworkBinaryTarget).build();
  TargetNode<?> frameworkNode=AppleBundleBuilder.createBuilder(frameworkTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.FRAMEWORK)).setInfoPlist(new FakeSourcePath("Info.plist")).setBinary(frameworkBinaryTarget).build();
  BuildTarget resourceTarget=BuildTarget.builder(rootPath,"//foo","res").build();
  SourcePath sourcePath=new BuildTargetSourcePath(frameworkTarget);
  TargetNode<?> resourceNode=AppleResourceBuilder.createBuilder(resourceTarget).setFiles(ImmutableSet.<SourcePath>of()).setDirs(ImmutableSet.<SourcePath>of(sourcePath)).build();
  BuildTarget binaryTarget=BuildTarget.builder(rootPath,"//foo","bin").build();
  TargetNode<?> binaryNode=AppleBinaryBuilder.createBuilder(binaryTarget).setDeps(Optional.of(ImmutableSortedSet.of(resourceTarget))).build();
  BuildTarget bundleTarget=BuildTarget.builder(rootPath,"//foo","bundle").addFlavors(FakeAppleRuleDescriptions.DEFAULT_MACOSX_X86_64_PLATFORM.getFlavor()).build();
  TargetNode<?> bundleNode=AppleBundleBuilder.createBuilder(bundleTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.APP)).setInfoPlist(new FakeSourcePath("Info.plist")).setBinary(binaryTarget).build();
  ImmutableSet<TargetNode<?>> nodes=ImmutableSet.<TargetNode<?>>of(frameworkBinaryNode,frameworkNode,resourceNode,binaryNode,bundleNode);
  final TargetGraph targetGraph=TargetGraphFactory.newInstance(ImmutableSet.copyOf(nodes));
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(nodes,ImmutableSet.<ProjectGenerator.Option>of(),getSourcePathResolverWithRulesForNodeFunction(targetGraph));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),bundleTarget.getFullyQualifiedName());
  assertEquals(target.getProductType(),ProductType.APPLICATION);
  for (  PBXBuildPhase buildPhase : target.getBuildPhases()) {
    assertFalse(buildPhase instanceof PBXCopyFilesBuildPhase);
  }
  assertThat(target.getBuildPhases().size(),Matchers.equalTo(1));
}
