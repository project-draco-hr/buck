{
  BuildTarget libraryTarget=BuildTarget.builder(rootPath,"//foo","lib").build();
  BuildTarget bundleTarget=BuildTarget.builder(rootPath,"//foo","bundle").build();
  BuildTarget testTarget=BuildTarget.builder(rootPath,"//foo","test").build();
  TargetNode<?> libraryNode=AppleLibraryBuilder.createBuilder(libraryTarget).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("foo.h"),ImmutableList.of("public")),SourceWithFlags.of(new FakeSourcePath("bar.h"))))).build();
  TargetNode<?> bundleNode=AppleBundleBuilder.createBuilder(bundleTarget).setBinary(libraryTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.FRAMEWORK)).setInfoPlist(new FakeSourcePath("Info.plist")).setTests(Optional.of(ImmutableSortedSet.of(testTarget))).build();
  TargetNode<?> testNode=AppleTestBuilder.createBuilder(testTarget).setConfigs(Optional.of(ImmutableSortedMap.of("Default",ImmutableMap.<String,String>of()))).setInfoPlist(new FakeSourcePath("Info.plist")).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setDeps(Optional.of(ImmutableSortedSet.of(bundleTarget))).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(libraryNode,bundleNode,testNode));
  projectGenerator.createXcodeProjects();
  PBXProject project=projectGenerator.getGeneratedProject();
  PBXTarget testPBXTarget=assertTargetExistsAndReturnTarget(project,"//foo:test");
  ImmutableMap<String,String> buildSettings=getBuildSettings(testTarget,testPBXTarget,"Default");
  assertEquals("test binary should use header symlink trees for both public and non-public headers " + "of the tested library in HEADER_SEARCH_PATHS","$(inherited) " + "../buck-out/gen/foo/test-private-header-symlink-tree/.tree.hmap " + "../buck-out/gen/foo/test-public-header-symlink-tree/.tree.hmap "+ "../buck-out/gen/foo/lib-public-header-symlink-tree/.tree.hmap "+ "../buck-out/gen/foo/lib-private-header-symlink-tree/.tree.hmap "+ "../buck-out",buildSettings.get("HEADER_SEARCH_PATHS"));
  assertEquals("USER_HEADER_SEARCH_PATHS should not be set",null,buildSettings.get("USER_HEADER_SEARCH_PATHS"));
}
