{
  BuildTarget libraryTarget=BuildTarget.builder(rootPath,"//foo","lib").build();
  TargetNode<?> libraryNode=AppleLibraryBuilder.createBuilder(libraryTarget).setFrameworks(Optional.of(ImmutableSortedSet.of(FrameworkPath.ofSourceTreePath(new SourceTreePath(PBXReference.SourceTree.SDKROOT,Paths.get("Library.framework"),Optional.<String>absent()))))).build();
  BuildTarget testTarget=BuildTarget.builder(rootPath,"//foo","xctest").build();
  TargetNode<?> testNode=AppleTestBuilder.createBuilder(testTarget).setInfoPlist(new FakeSourcePath("Info.plist")).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("fooTest.m"))))).setDeps(Optional.of(ImmutableSortedSet.of(libraryTarget))).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(libraryNode,testNode),ImmutableSet.<ProjectGenerator.Option>of());
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:xctest");
  assertEquals("Should have exact number of build phases",2,target.getBuildPhases().size());
  assertHasSingletonSourcesPhaseWithSourcesAndFlags(target,ImmutableMap.of("fooTest.m",Optional.<String>absent()));
  ProjectGeneratorTestUtils.assertHasSingletonFrameworksPhaseWithFrameworkEntries(target,ImmutableList.of("$SDKROOT/Library.framework"));
}
