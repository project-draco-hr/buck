{
  BuildTarget compilerTarget=BuildTarget.builder(rootPath,"//foo","lib").addFlavors(HalideLibraryDescription.HALIDE_COMPILER_FLAVOR).build();
  TargetNode<?> compiler=new HalideLibraryBuilder(compilerTarget).setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("main.cpp")),SourceWithFlags.of(new FakeSourcePath("filter.cpp")))).build();
  BuildTarget libTarget=BuildTarget.builder(rootPath,"//foo","lib").build();
  TargetNode<?> lib=new HalideLibraryBuilder(libTarget).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.<TargetNode<?>>of(compiler,lib));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:lib");
  assertThat(target.isa(),equalTo("PBXNativeTarget"));
  assertHasConfigurations(target,"Debug","Release","Profile");
  assertEquals(1,target.getBuildPhases().size());
  PBXShellScriptBuildPhase scriptPhase=ProjectGeneratorTestUtils.getSingletonPhaseByType(target,PBXShellScriptBuildPhase.class);
  assertEquals(0,scriptPhase.getInputPaths().size());
  assertEquals(0,scriptPhase.getOutputPaths().size());
  ImmutableSet<BuildTarget> requiredBuildTargets=projectGenerator.getRequiredBuildTargets();
  assertTrue(requiredBuildTargets.contains(compilerTarget));
  assertThat(requiredBuildTargets,hasItem(libTarget.withFlavors(HalideLibraryDescription.HALIDE_COMPILE_FLAVOR,DEFAULT_PLATFORM.getFlavor())));
}
