{
  ImmutableSortedMap<String,ImmutableMap<String,String>> configs=ImmutableSortedMap.of("Debug",ImmutableMap.of("HEADER_SEARCH_PATHS","headers","LIBRARY_SEARCH_PATHS","libraries"));
  BuildTarget libraryTarget=BuildTarget.builder(rootPath,"//foo","lib").build();
  TargetNode<?> libraryNode=AppleLibraryBuilder.createBuilder(libraryTarget).setConfigs(Optional.of(configs)).setExportedHeaders(ImmutableSortedSet.<SourcePath>of(new FakeSourcePath("HeaderGroup1/bar.h"))).setFrameworks(Optional.of(ImmutableSortedSet.of(FrameworkPath.ofSourceTreePath(new SourceTreePath(PBXReference.SourceTree.SDKROOT,Paths.get("Library.framework"),Optional.<String>absent()))))).build();
  BuildTarget testTarget=BuildTarget.builder(rootPath,"//foo","xctest").build();
  TargetNode<?> testNode=AppleTestBuilder.createBuilder(testTarget).setConfigs(Optional.of(configs)).setInfoPlist(new FakeSourcePath("Info.plist")).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("fooTest.m"))))).setDeps(Optional.of(ImmutableSortedSet.of(libraryTarget))).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(libraryNode,testNode),ImmutableSet.<ProjectGenerator.Option>of());
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:xctest");
  ImmutableMap<String,String> settings=getBuildSettings(testTarget,target,"Debug");
  assertEquals("headers " + "../buck-out/gen/_project/ptQfVNNRREMFWy8msh938FIQgOU-private-headers/.hmap " + "../buck-out/gen/_project/ptQfVNNRREMFWy8msh938FIQgOU-public-headers/.hmap "+ "../buck-out/gen/_project/CwkbTNOBmbhf7TdVehLAj7vKmzI-public-headers/.hmap "+ "../buck-out",settings.get("HEADER_SEARCH_PATHS"));
  assertEquals("libraries $BUILT_PRODUCTS_DIR",settings.get("LIBRARY_SEARCH_PATHS"));
  assertEquals("Should have exact number of build phases",2,target.getBuildPhases().size());
  assertHasSingletonSourcesPhaseWithSourcesAndFlags(target,ImmutableMap.of("fooTest.m",Optional.<String>absent()));
  ProjectGeneratorTestUtils.assertHasSingletonFrameworksPhaseWithFrameworkEntries(target,ImmutableList.of("$SDKROOT/Library.framework"));
}
