{
  BuildTarget depTarget=BuildTarget.builder(rootPath,"//dep","dep").build();
  TargetNode<?> depNode=AppleLibraryBuilder.createBuilder(depTarget).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("e.m"))))).build();
  BuildTarget binaryTarget=BuildTarget.builder(rootPath,"//foo","binary").build();
  TargetNode<?> binaryNode=AppleBinaryBuilder.createBuilder(binaryTarget).setConfigs(Optional.of(ImmutableSortedMap.of("Debug",ImmutableMap.<String,String>of()))).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("foo.m"),ImmutableList.of("-foo"))))).setExtraXcodeSources(Optional.of(ImmutableList.<SourcePath>of(new FakeSourcePath("libsomething.a")))).setHeaders(ImmutableSortedSet.<SourcePath>of(new FakeSourcePath("foo.h"))).setFrameworks(Optional.of(ImmutableSortedSet.of(FrameworkPath.ofSourceTreePath(new SourceTreePath(PBXReference.SourceTree.SDKROOT,Paths.get("Foo.framework"),Optional.<String>absent()))))).setDeps(Optional.of(ImmutableSortedSet.of(depTarget))).setHeaderPathPrefix(Optional.<String>absent()).setPrefixHeader(Optional.<SourcePath>absent()).build();
  ProjectGenerator projectGenerator=createProjectGeneratorForCombinedProject(ImmutableSet.of(depNode,binaryNode));
  projectGenerator.createXcodeProjects();
  PBXTarget target=assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:binary");
  assertHasConfigurations(target,"Debug");
  assertEquals(target.getProductType(),ProductType.TOOL);
  assertEquals("Should have exact number of build phases",2,target.getBuildPhases().size());
  assertHasSingletonSourcesPhaseWithSourcesAndFlags(target,ImmutableMap.of("foo.m",Optional.of("-foo"),"libsomething.a",Optional.<String>absent()));
  ProjectGeneratorTestUtils.assertHasSingletonFrameworksPhaseWithFrameworkEntries(target,ImmutableList.of("$SDKROOT/Foo.framework","$BUILT_PRODUCTS_DIR/libdep.a"));
  assertTrue(FluentIterable.from(target.getBuildPhases()).filter(PBXResourcesBuildPhase.class).isEmpty());
}
