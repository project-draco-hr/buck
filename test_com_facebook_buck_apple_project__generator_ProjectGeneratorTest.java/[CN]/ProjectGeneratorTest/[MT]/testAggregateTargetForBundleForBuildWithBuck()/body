{
  BuildTarget binaryTarget=BuildTarget.builder(rootPath,"//foo","binary").build();
  TargetNode<?> binaryNode=AppleBinaryBuilder.createBuilder(binaryTarget).setConfigs(Optional.of(ImmutableSortedMap.of("Debug",ImmutableMap.<String,String>of()))).build();
  BuildTarget bundleTarget=BuildTarget.builder(rootPath,"//foo","bundle").build();
  TargetNode<?> bundleNode=AppleBundleBuilder.createBuilder(bundleTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.APP)).setInfoPlist(new FakeSourcePath("Info.plist")).setBinary(binaryTarget).build();
  ImmutableSet<TargetNode<?>> nodes=ImmutableSet.<TargetNode<?>>of(bundleNode,binaryNode);
  final TargetGraph targetGraph=TargetGraphFactory.newInstance(nodes);
  ProjectGenerator projectGenerator=new ProjectGenerator(targetGraph,FluentIterable.from(nodes).transform(HasBuildTarget.TO_TARGET).toSet(),projectCell,OUTPUT_DIRECTORY,PROJECT_NAME,"BUCK",ImmutableSet.<ProjectGenerator.Option>of(),Optional.of(bundleTarget),ImmutableList.of("--flag","value with spaces"),ImmutableList.<BuildTarget>of(),new AlwaysFoundExecutableFinder(),ImmutableMap.<String,String>of(),PLATFORMS,DEFAULT_PLATFORM,getSourcePathResolverForNodeFunction(targetGraph),getFakeBuckEventBus(),halideBuckConfig,cxxBuckConfig,appleConfig);
  projectGenerator.createXcodeProjects();
  PBXTarget buildWithBuckTarget=null;
  for (  PBXTarget target : projectGenerator.getGeneratedProject().getTargets()) {
    if (target.getProductName() != null && target.getProductName().endsWith("-Buck")) {
      buildWithBuckTarget=target;
    }
  }
  assertThat(buildWithBuckTarget,is(notNullValue()));
  assertHasConfigurations(buildWithBuckTarget,"Debug");
  assertKeepsConfigurationsInMainGroup(projectGenerator.getGeneratedProject(),buildWithBuckTarget);
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  assertEquals("Should have exact number of build phases",2,buildWithBuckTarget.getBuildPhases().size());
  PBXBuildPhase buildPhase=Iterables.get(buildWithBuckTarget.getBuildPhases(),0);
  assertThat(buildPhase,instanceOf(PBXShellScriptBuildPhase.class));
  PBXShellScriptBuildPhase shellScriptBuildPhase=(PBXShellScriptBuildPhase)buildPhase;
  assertThat(shellScriptBuildPhase.getShellScript(),containsString("-- \"--show-output --report-absolute-paths --flag 'value with spaces'\" " + bundleTarget.getFullyQualifiedName() + " dwarf dwarf-and-dsym"));
  Path fixUUIDScriptPath=ProjectGenerator.getFixUUIDScriptPath(filesystem);
  assertThat(shellScriptBuildPhase.getShellScript(),containsString("python " + fixUUIDScriptPath + " --verbose "+ filesystem.resolve(filesystem.getBuckPaths().getBuckOut()).resolve("bin/foo/bundle-unsanitised/bundle.app")+ " "+ filesystem.resolve(filesystem.getBuckPaths().getBuckOut()).resolve("bin/foo/bundle-unsanitised/bundle.dSYM")+ " "+ bundleTarget.getShortName()));
  assertThat(shellScriptBuildPhase.getShellScript(),containsString("machoutils absolutify_object_paths --binary $BUCK_BUNDLE_OUTPUT_PATH/bundle " + "--output " + filesystem.resolve(filesystem.getBuckPaths().getBuckOut()).resolve("bin/foo/bundle-unsanitised/bundle.app/bundle") + " --old_compdir "+ "\"./////////////////////"));
  assertThat(shellScriptBuildPhase.getShellScript(),containsString("////////\" --new_compdir \"" + filesystem.getRootPath().toString() + "\""));
  PBXBuildPhase codesignPhase=buildWithBuckTarget.getBuildPhases().get(1);
  assertThat(codesignPhase,instanceOf(PBXShellScriptBuildPhase.class));
  PBXShellScriptBuildPhase codesignShellScriptPhase=(PBXShellScriptBuildPhase)codesignPhase;
  Path codesignScriptPath=ProjectGenerator.getCodesignScriptPath(filesystem);
  assertThat(codesignShellScriptPhase.getShellScript(),containsString("python " + codesignScriptPath + " /usr/bin/codesign "+ filesystem.resolve(filesystem.getBuckPaths().getBuckOut()).resolve("bin/foo/bundle-unsanitised/bundle.app")));
}
