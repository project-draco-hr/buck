{
  RegisterSpecList sources=insn.getSources();
  int szSources=sources.size();
  int categoriesForIndex[]=new int[szSources];
  int rangeLength=0;
  for (int i=0; i < szSources; i++) {
    int category=sources.get(i).getCategory();
    categoriesForIndex[i]=category;
    rangeLength+=categoriesForIndex[i];
  }
  int maxScore=Integer.MIN_VALUE;
  int resultRangeStart=-1;
  BitSet resultMovesRequired=null;
  int rangeStartOffset=0;
  for (int i=0; i < szSources; i++) {
    int ssaCenterReg=sources.get(i).getReg();
    if (i != 0) {
      rangeStartOffset-=categoriesForIndex[i - 1];
    }
    if (!ssaRegsMapped.get(ssaCenterReg)) {
      continue;
    }
    int rangeStart=mapper.oldToNew(ssaCenterReg) + rangeStartOffset;
    if (rangeStart < 0 || spansParamRange(rangeStart,rangeLength)) {
      continue;
    }
    BitSet curMovesRequired=new BitSet(szSources);
    int fitWidth=fitPlanForRange(rangeStart,insn,categoriesForIndex,curMovesRequired);
    if (fitWidth < 0) {
      continue;
    }
    int score=fitWidth - curMovesRequired.cardinality();
    if (score > maxScore) {
      maxScore=score;
      resultRangeStart=rangeStart;
      resultMovesRequired=curMovesRequired;
    }
    if (fitWidth == rangeLength) {
      break;
    }
  }
  if (resultRangeStart == -1) {
    resultMovesRequired=new BitSet(szSources);
    resultRangeStart=findAnyFittingRange(insn,rangeLength,categoriesForIndex,resultMovesRequired);
  }
  for (int i=resultMovesRequired.nextSetBit(0); i >= 0; i=resultMovesRequired.nextSetBit(i + 1)) {
    insn.changeOneSource(i,insertMoveBefore(insn,sources.get(i)));
  }
  return resultRangeStart;
}
