{
  final Map<String,Pair<JarEntry,Optional<Path>>> entries=Maps.newTreeMap();
  filesystem.walkFileTree(directory,EnumSet.of(FileVisitOption.FOLLOW_LINKS),Integer.MAX_VALUE,new SimpleFileVisitor<Path>(){
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      String relativePath=MorePaths.pathWithUnixSeparators(MorePaths.relativize(directory,file));
      if (shouldEntryBeRemovedFromJar(eventBus,relativePath,blacklist)) {
        return FileVisitResult.CONTINUE;
      }
      JarEntry entry=new JarEntry(relativePath);
      String entryName=entry.getName();
      entry.setTime(ZipConstants.getFakeTime());
      if (!isDuplicateAllowed(entryName) && !alreadyAddedEntries.add(entryName)) {
        if (!entryName.endsWith("/")) {
          eventBus.post(ConsoleEvent.create(determineSeverity(entry),"Duplicate found when adding directory to jar: %s",relativePath));
        }
        return FileVisitResult.CONTINUE;
      }
      entries.put(entry.getName(),new Pair<>(entry,Optional.of(file)));
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attrs) throws IOException {
      String relativePath=MorePaths.pathWithUnixSeparators(MorePaths.relativize(directory,dir));
      if (relativePath.isEmpty()) {
        return FileVisitResult.CONTINUE;
      }
      String entryName=relativePath.replace('\\','/') + "/";
      if (alreadyAddedEntries.contains(entryName)) {
        return FileVisitResult.CONTINUE;
      }
      JarEntry entry=new JarEntry(entryName);
      entry.setTime(ZipConstants.getFakeTime());
      entries.put(entry.getName(),new Pair<>(entry,Optional.<Path>absent()));
      return FileVisitResult.CONTINUE;
    }
  }
);
  for (  Pair<JarEntry,Optional<Path>> entry : entries.values()) {
    jar.putNextEntry(entry.getFirst());
    if (entry.getSecond().isPresent()) {
      Files.copy(entry.getSecond().get(),jar);
    }
    jar.closeEntry();
  }
}
