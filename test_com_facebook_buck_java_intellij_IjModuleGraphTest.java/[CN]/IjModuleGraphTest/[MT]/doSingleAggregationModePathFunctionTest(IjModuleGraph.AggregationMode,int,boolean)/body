{
  ImmutableList<Path> originalPaths=ImmutableList.of(Paths.get("a","b","c","d","e"),Paths.get("a","b","c","d"),Paths.get("a","b","c"),Paths.get("a","b"),Paths.get("a"),Paths.get(""));
  ImmutableList<Path> trimmedPaths=ImmutableList.of(Paths.get("a","b","c"),Paths.get("a","b","c"),Paths.get("a","b","c"),Paths.get("a","b"),Paths.get("a"),Paths.get(""));
  Function<Path,Path> transform=aggregationMode.getBasePathTransform(graphSize);
  assertThat(FluentIterable.from(originalPaths).transform(transform).toList(),Matchers.equalTo(expectTrimmed ? trimmedPaths : originalPaths));
}
