{
  TargetNode<?> junitReflect=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//third-party/junit/reflect:reflect")).build();
  TargetNode<?> junitCore=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//third-party/junit/core:core")).addExportedDep(junitReflect.getBuildTarget()).build();
  TargetNode<?> junitRule=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//third-party/junit/rule:rule")).addDep(junitCore.getBuildTarget()).build();
  TargetNode<?> testRule=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//tests/feature:tests")).addDep(junitRule.getBuildTarget()).build();
  IjModuleGraph moduleGraph=createModuleGraph(ImmutableSet.of(junitReflect,junitCore,junitRule,testRule));
  IjModule junitRuleModule=getModuleForTarget(moduleGraph,junitRule);
  IjModule testRuleModule=getModuleForTarget(moduleGraph,testRule);
  assertEquals(ImmutableSet.of(junitRuleModule),moduleGraph.getOutgoingNodesFor(testRuleModule));
}
