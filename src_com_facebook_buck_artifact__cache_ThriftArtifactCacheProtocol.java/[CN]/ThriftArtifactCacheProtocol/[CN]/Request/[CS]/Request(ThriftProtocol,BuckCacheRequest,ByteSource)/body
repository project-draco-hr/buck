{
  this.payloads=thriftData.isSetPayloads() ? ImmutableList.copyOf(thriftData.getPayloads()) : ImmutableList.<PayloadInfo>of();
  Preconditions.checkArgument(payloadByteSources.length == this.payloads.size(),"Number of payloadStreams provided [%s] does not match number of payloads " + "in the thriftData [%d].",payloadByteSources.length,payloads.size());
  this.payloadByteSources=payloadByteSources;
  long payloadBytes=0;
  for (  PayloadInfo info : payloads) {
    payloadBytes+=info.getSizeBytes();
  }
  this.totalPayloadBytes=payloadBytes;
  try {
    serializedThriftData=ThriftUtil.serialize(protocol,thriftData);
  }
 catch (  TException e) {
    throw new IOException("Failed to serialize BuckCacheFetchRequest.",e);
  }
}
