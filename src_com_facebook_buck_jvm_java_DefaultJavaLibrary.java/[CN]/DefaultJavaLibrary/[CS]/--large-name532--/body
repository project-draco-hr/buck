{
  super(params.appendExtraDeps(new Supplier<Iterable<? extends BuildRule>>(){
    @Override public Iterable<? extends BuildRule> get(){
      return resolver.filterBuildRuleInputs(abiClasspath.get());
    }
  }
),resolver);
  this.compileStepFactory=compileStepFactory;
  for (  BuildRule dep : exportedDeps) {
    if (!(dep instanceof JavaLibrary)) {
      throw new HumanReadableException(params.getBuildTarget() + ": exported dep " + dep.getBuildTarget()+ " ("+ dep.getType()+ ") "+ "must be a type of java library.");
    }
  }
  this.srcs=ImmutableSortedSet.copyOf(srcs);
  this.resources=ImmutableSortedSet.copyOf(resources);
  this.proguardConfig=proguardConfig;
  this.postprocessClassesCommands=postprocessClassesCommands;
  this.exportedDeps=exportedDeps;
  this.providedDeps=providedDeps;
  this.additionalClasspathEntries=FluentIterable.from(additionalClasspathEntries).transform(getProjectFilesystem().getAbsolutifier()).toSet();
  this.resourcesRoot=resourcesRoot;
  this.manifestFile=manifestFile;
  this.mavenCoords=mavenCoords;
  this.tests=tests;
  this.abiJar=abiJar;
  this.trackClassUsage=trackClassUsage;
  this.abiClasspath=abiClasspath;
  this.deps=params.getDeps();
  if (!srcs.isEmpty() || !resources.isEmpty() || manifestFile.isPresent()) {
    this.outputJar=Optional.of(getOutputJarPath(getBuildTarget(),getProjectFilesystem()));
  }
 else {
    this.outputJar=Optional.absent();
  }
  this.outputClasspathEntriesSupplier=Suppliers.memoize(new Supplier<ImmutableSet<Path>>(){
    @Override public ImmutableSet<Path> get(){
      return JavaLibraryClasspathProvider.getOutputClasspathJars(DefaultJavaLibrary.this,getResolver(),sourcePathForOutputJar());
    }
  }
);
  this.transitiveClasspathsSupplier=Suppliers.memoize(new Supplier<ImmutableSet<Path>>(){
    @Override public ImmutableSet<Path> get(){
      return JavaLibraryClasspathProvider.getClasspathsFromLibraries(getTransitiveClasspathDeps());
    }
  }
);
  this.transitiveClasspathDepsSupplier=Suppliers.memoize(new Supplier<ImmutableSet<JavaLibrary>>(){
    @Override public ImmutableSet<JavaLibrary> get(){
      return JavaLibraryClasspathProvider.getTransitiveClasspathDeps(DefaultJavaLibrary.this);
    }
  }
);
  this.buildOutputInitializer=new BuildOutputInitializer<>(params.getBuildTarget(),this);
  this.generatedSourceFolder=generatedSourceFolder;
  this.classesToRemoveFromJar=classesToRemoveFromJar;
}
