{
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  ImmutableSetMultimap<JavaLibrary,Path> declaredClasspathEntries=ImmutableSetMultimap.<JavaLibrary,Path>builder().putAll(getDeclaredClasspathEntries()).putAll(this,additionalClasspathEntries).build();
  BuildTarget target=getBuildTarget();
  Path outputDirectory=getClassesDir(target,getProjectFilesystem());
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),outputDirectory));
  SuggestBuildRules suggestBuildRule=DefaultSuggestBuildRules.createSuggestBuildFunction(JAR_RESOLVER,declaredClasspathEntries.keySet(),ImmutableSet.<JavaLibrary>builder().addAll(getTransitiveClasspathDeps()).add(this).build(),context.getActionGraph().getNodes());
  Collection<Path> provided=JavaLibraryClasspathProvider.getJavaLibraryDeps(providedDeps).transformAndConcat(new Function<JavaLibrary,Collection<Path>>(){
    @Override public Collection<Path> apply(    JavaLibrary input){
      return input.getOutputClasspaths();
    }
  }
).filter(Predicates.notNull()).toSet();
  ImmutableSortedSet<Path> declared=ImmutableSortedSet.<Path>naturalOrder().addAll(declaredClasspathEntries.values()).addAll(provided).build();
  Step mkdir=new MakeCleanDirectoryStep(getProjectFilesystem(),getPathToAbiOutputDir());
  steps.add(mkdir);
  JavaPackageFinder finder=context.getJavaPackageFinder();
  if (resourcesRoot.isPresent()) {
    finder=new ResourcesRootPackageFinder(resourcesRoot.get(),finder);
  }
  steps.add(new CopyResourcesStep(getProjectFilesystem(),getResolver(),target,resources,outputDirectory,finder));
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),getOutputJarDirPath(target,getProjectFilesystem())));
  if (!getJavaSrcs().isEmpty()) {
    ClassUsageFileWriter usedClassesFileWriter;
    if (trackClassUsage) {
      final Path usedClassesFilePath=getUsedClassesFilePath(getBuildTarget(),getProjectFilesystem());
      depFileOutputPath=getProjectFilesystem().getPathForRelativePath(usedClassesFilePath);
      usedClassesFileWriter=new DefaultClassUsageFileWriter(usedClassesFilePath,new ClassUsageTracker());
      buildableContext.recordArtifact(usedClassesFilePath);
    }
 else {
      usedClassesFileWriter=NoOpClassUsageFileWriter.instance();
    }
    Path pathToSrcsList=BuildTargets.getGenPath(getProjectFilesystem(),getBuildTarget(),"__%s__srcs");
    steps.add(new MkdirStep(getProjectFilesystem(),pathToSrcsList.getParent()));
    Path scratchDir=BuildTargets.getGenPath(getProjectFilesystem(),target,"lib__%s____working_directory");
    steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),scratchDir));
    Optional<Path> workingDirectory=Optional.of(scratchDir);
    compileStepFactory.createCompileToJarStep(context,getJavaSrcs(),target,getResolver(),getProjectFilesystem(),declared,outputDirectory,workingDirectory,pathToSrcsList,Optional.of(suggestBuildRule),postprocessClassesCommands,ImmutableSortedSet.of(outputDirectory),Optional.<String>absent(),manifestFile.transform(getResolver().getAbsolutePathFunction()),outputJar.get(),usedClassesFileWriter,steps,buildableContext,classesToRemoveFromJar);
  }
  Path abiJar=getOutputJarDirPath(target,getProjectFilesystem()).resolve(String.format("%s-abi.jar",target.getShortNameAndFlavorPostfix()));
  if (outputJar.isPresent()) {
    Path output=outputJar.get();
    if (getJavaSrcs().isEmpty()) {
      steps.add(new JarDirectoryStep(getProjectFilesystem(),output,ImmutableSortedSet.of(outputDirectory),null,manifestFile.transform(getResolver().getAbsolutePathFunction()).orNull(),true,classesToRemoveFromJar));
    }
    buildableContext.recordArtifact(output);
    steps.add(new CalculateAbiStep(buildableContext,getProjectFilesystem(),output,abiJar));
  }
 else {
    Path scratch=BuildTargets.getScratchPath(getProjectFilesystem(),target,String.format("%%s/%s-temp-abi.jar",target.getShortNameAndFlavorPostfix()));
    steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),scratch.getParent()));
    steps.add(new TouchStep(getProjectFilesystem(),scratch));
    steps.add(new CalculateAbiStep(buildableContext,getProjectFilesystem(),scratch,abiJar));
  }
  JavaLibraryRules.addAccumulateClassNamesStep(this,buildableContext,steps);
  return steps.build();
}
