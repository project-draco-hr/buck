{
  BuildTarget parentTarget=parentParams.getBuildTarget();
  BuildTarget swiftCompanionTarget=parentTarget.withAppendedFlavors(SWIFT_FLAVOR);
  Optional<BuildRule> rule=buildRuleResolver.getRuleOptional(swiftCompanionTarget);
  if (rule.isPresent()) {
    return rule;
  }
  if (!args.srcs.isPresent() || args.srcs.get().isEmpty()) {
    return Optional.absent();
  }
  SourcePathResolver sourcePathResolver=new SourcePathResolver(buildRuleResolver);
  ImmutableSortedSet.Builder<SourcePath> swiftSrcsBuilder=ImmutableSortedSet.naturalOrder();
  for (  SourceWithFlags source : args.srcs.get()) {
    if (MorePaths.getFileExtension(sourcePathResolver.getAbsolutePath(source.getSourcePath())).equalsIgnoreCase(SWIFT_EXTENSION)) {
      swiftSrcsBuilder.add(source.getSourcePath());
    }
  }
  ImmutableSortedSet<SourcePath> swiftSrcs=swiftSrcsBuilder.build();
  if (swiftSrcs.isEmpty()) {
    return Optional.absent();
  }
  AppleCxxPlatform appleCxxPlatform=ApplePlatforms.getAppleCxxPlatformForBuildTarget(cxxPlatformFlavorDomain,defaultCxxPlatform,platformFlavorsToAppleCxxPlatforms,swiftCompanionTarget,Optional.<MultiarchFileInfo>absent());
  Optional<Tool> swiftCompiler=appleCxxPlatform.getSwift();
  if (!swiftCompiler.isPresent()) {
    throw new HumanReadableException("Platform %s is missing swift compiler",appleCxxPlatform);
  }
  BuildRuleParams params=parentParams.copyWithBuildTarget(swiftCompanionTarget);
  return Optional.<BuildRule>of(new SwiftLibrary(swiftCompiler.get(),params,sourcePathResolver,ImmutableList.<BuildRule>of(),args.frameworks.get(),args.libraries.get(),platformFlavorsToAppleCxxPlatforms,BuildTargets.getGenPath(params.getProjectFilesystem(),swiftCompanionTarget,"%s"),swiftCompanionTarget.getShortName(),swiftSrcs,Optional.of(true),Optional.<Pattern>absent()));
}
