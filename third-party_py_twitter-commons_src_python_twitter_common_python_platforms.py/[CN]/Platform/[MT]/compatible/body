@staticmethod
def compatible(package, platform):
    if ((package is None) or (platform is None) or (package == platform)):
        return True
    (MAJOR, MINOR, PLATFORM) = range(1, 4)
    package_match = Platform.MACOSX_VERSION_STRING.match(package)
    platform_match = Platform.MACOSX_VERSION_STRING.match(platform)
    if (not (package_match and platform_match)):
        return compatible_platforms(package, platform)
    if (package_match.group(MAJOR) != platform_match.group(MAJOR)):
        return False
    if (int(package_match.group(MINOR)) > int(platform_match.group(MINOR))):
        return False
    package_platform = package_match.group(PLATFORM)
    if (package_platform not in Platform.MACOSX_PLATFORM_COMPATIBILITY):
        raise Platform.UnknownPlatformError(package_platform)
    sys_platform = platform_match.group(PLATFORM)
    if (sys_platform not in Platform.MACOSX_PLATFORM_COMPATIBILITY):
        raise Platform.UnknownPlatformError(sys_platform)
    package_compatibility = set(Platform.MACOSX_PLATFORM_COMPATIBILITY[package_platform])
    system_compatibility = set(Platform.MACOSX_PLATFORM_COMPATIBILITY[sys_platform])
    return bool(package_compatibility.intersection(system_compatibility))
