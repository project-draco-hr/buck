{
  workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"writer",tmpFolder);
  workspace.setUp();
  DepsForBuildFiles depsForBuildFiles=new DepsForBuildFiles();
  BuildTarget fooTarget=workspace.newBuildTarget("//java/com/example:foo");
  BuildTarget barTarget=workspace.newBuildTarget("//java/com/example:bar");
  BuildTarget bazTarget=workspace.newBuildTarget("//java/com/example/baz:baz");
  BuildTarget aTarget=workspace.newBuildTarget("//java/com/example:a");
  BuildTarget bTarget=workspace.newBuildTarget("//java/com/example:b");
  BuildTarget cTarget=workspace.newBuildTarget("//java/com/example:c");
  BuildTarget dTarget=workspace.newBuildTarget("//java/com/example:d");
  BuildTarget eTarget=workspace.newBuildTarget("//java/com/example:e");
  BuildTarget fTarget=workspace.newBuildTarget("//java/com/example:f");
  BuildTarget gTarget=workspace.newBuildTarget("//java/com/example:g");
  BuildTarget hTarget=workspace.newBuildTarget("//java/com/example:h");
  BuildTarget iTarget=workspace.newBuildTarget("//java/com/example:i");
  depsForBuildFiles.addDep(fooTarget,barTarget);
  depsForBuildFiles.addDep(fooTarget,bazTarget);
  depsForBuildFiles.addDep(barTarget,bazTarget);
  depsForBuildFiles.addDep(bazTarget,gTarget);
  depsForBuildFiles.addDep(bazTarget,hTarget);
  depsForBuildFiles.addDep(bazTarget,aTarget);
  depsForBuildFiles.addDep(bazTarget,eTarget);
  depsForBuildFiles.addDep(bazTarget,bTarget);
  depsForBuildFiles.addDep(bazTarget,iTarget);
  depsForBuildFiles.addDep(bazTarget,dTarget);
  depsForBuildFiles.addDep(bazTarget,fTarget);
  depsForBuildFiles.addDep(bazTarget,cTarget);
  int numWritten=AutodepsWriter.write(depsForBuildFiles,"BUCK",ObjectMappers.newDefaultInstance(),MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor()),1);
  workspace.verify();
  assertEquals(2,numWritten);
}
