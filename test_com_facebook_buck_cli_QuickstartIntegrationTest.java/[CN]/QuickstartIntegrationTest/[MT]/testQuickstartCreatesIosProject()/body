{
  assumeThat(Platform.detect(),is(Platform.MACOS));
  ProjectWorkspace quickstartWorkspace=TestDataHelper.createProjectWorkspaceForScenario(this,"empty_project",quickstartDirectory);
  quickstartWorkspace.setUp();
  ProcessResult result=quickstartWorkspace.runBuckCommand("quickstart","--type","ios","--dest-dir",destDir.getRoot().toAbsolutePath().toString()).assertSuccess();
  ProjectWorkspace destinationWorkspace=TestDataHelper.createProjectWorkspaceForScenario(this,"quickstart_expected_ios_project",destDir);
  destinationWorkspace.setUp();
  destinationWorkspace.verify();
  verifyHasBuckVersionFile(destDir.getRoot(),result);
  Path readme=destDir.getRoot().resolve("README.md");
  assertTrue("`buck quickstart` should create a README file.",Files.isRegularFile(readme));
  assertEquals("`buck quickstart` should output the contents of the README file to standard output.",new String(Files.readAllBytes(readme),StandardCharsets.UTF_8),result.getStdout());
  result=destinationWorkspace.runBuckCommand("targets").assertSuccess();
  assertEquals("`buck targets` should display a list of targets.",Joiner.on('\n').join("//ios:BuckDemoApp","//ios:BuckDemoAppBinary","//ios:BuckDemoAppPackage","//ios:BuckDemoAppResources","//ios:BuckDemoAppTest") + "\n",result.getStdout());
  destinationWorkspace.runBuckCommand("build","demo_app_ios").assertSuccess();
  Path buckOut=destinationWorkspace.getPath("buck-out");
  assertTrue("`buck build` should create a buck-out directory.",Files.isDirectory(buckOut));
  destinationWorkspace.runBuckCommand("project","demo_app_ios").assertSuccess();
}
