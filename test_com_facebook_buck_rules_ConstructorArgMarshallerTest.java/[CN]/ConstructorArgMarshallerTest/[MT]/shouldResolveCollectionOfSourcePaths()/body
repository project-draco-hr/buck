{
class Dto {
    public ImmutableSortedSet<SourcePath> srcs;
  }
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildTarget target=BuildTargetFactory.newInstance("//example/path:manifest");
  BuildRule rule=new FakeBuildRule(new BuildRuleType("py"),target,new SourcePathResolver(resolver));
  resolver.addToIndex(rule);
  Dto dto=new Dto();
  marshaller.populate(filesystem,buildRuleFactoryParams(),dto,ImmutableSet.<BuildTarget>builder(),ImmutableSet.<BuildTargetPattern>builder(),ImmutableMap.<String,Object>of("srcs",ImmutableList.of("main.py","lib/__init__.py","lib/manifest.py")));
  ImmutableSet<String> observedValues=FluentIterable.from(dto.srcs).transform(Functions.toStringFunction()).toSet();
  assertEquals(ImmutableSet.of("example/path/main.py","example/path/lib/__init__.py","example/path/lib/manifest.py"),observedValues);
}
