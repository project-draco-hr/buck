{
class Dto {
    public ImmutableSortedSet<SourcePath> srcs;
  }
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  BuildTarget target=BuildTargetFactory.newInstance("//example/path:manifest");
  BuildRule rule=new FakeBuildRule(target,new SourcePathResolver(resolver));
  resolver.addToIndex(rule);
  Dto dto=new Dto();
  marshaller.populate(createCellRoots(filesystem),filesystem,buildRuleFactoryParams(),dto,ImmutableSet.<BuildTarget>builder(),ImmutableSet.<VisibilityPattern>builder(),ImmutableMap.<String,Object>of("srcs",ImmutableList.of("main.py","lib/__init__.py","lib/manifest.py")));
  ImmutableSet<String> observedValues=FluentIterable.from(dto.srcs).transform(new Function<SourcePath,String>(){
    @Nullable @Override public String apply(    SourcePath input){
      return ((PathSourcePath)input).getRelativePath().toString();
    }
  }
).toSet();
  assertEquals(ImmutableSet.of(Paths.get("example/path/main.py").toString(),Paths.get("example/path/lib/__init__.py").toString(),Paths.get("example/path/lib/manifest.py").toString()),observedValues);
}
