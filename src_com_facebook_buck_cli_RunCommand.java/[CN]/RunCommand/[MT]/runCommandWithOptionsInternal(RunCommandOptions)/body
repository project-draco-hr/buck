{
  if (!options.hasTargetSpecified()) {
    console.printBuildFailure("No target given to run");
    console.getStdOut().println("buck run <target> <arg1> <arg2>...");
    return 1;
  }
  BuildCommand buildCommand=new BuildCommand(getCommandRunnerParams());
  BuildCommandOptions buildCommandOptions=new BuildCommandOptions(options.getBuckConfig());
  buildCommandOptions.setArguments(ImmutableList.of(options.getTarget()));
  int exitCode=buildCommand.runCommandWithOptions(buildCommandOptions);
  if (exitCode != 0) {
    return exitCode;
  }
  String targetName=options.getTarget();
  BuildTarget target;
  try {
    target=getBuildTargets(ImmutableList.of(targetName)).get(0);
  }
 catch (  NoSuchBuildTargetException e) {
    console.printBuildFailure(e.getMessage());
    return 1;
  }
  Build build=buildCommand.getBuild();
  BuildRule targetRule=build.getActionGraph().findBuildRuleByTarget(target);
  BinaryBuildRule binaryBuildRule=null;
  if (targetRule instanceof BinaryBuildRule) {
    binaryBuildRule=(BinaryBuildRule)targetRule;
  }
  if (binaryBuildRule == null) {
    console.printBuildFailure("target " + targetName + " is not a binary rule (only binary rules can be `run`)");
    return 1;
  }
  ImmutableList<String> fullCommand=new ImmutableList.Builder<String>().addAll(binaryBuildRule.getExecutableCommand(getProjectFilesystem())).addAll(options.getTargetArguments()).build();
  ShellStep step=new DefaultShellStep(fullCommand);
  return step.execute(build.getExecutionContext());
}
