{
  if (!hasTargetSpecified()) {
    params.getBuckEventBus().post(ConsoleEvent.severe("No target given to run"));
    params.getBuckEventBus().post(ConsoleEvent.severe("buck run <target> <arg1> <arg2>..."));
    return 1;
  }
  BuildCommand buildCommand=new BuildCommand(ImmutableList.of(getTarget(params.getBuckConfig())));
  int exitCode=buildCommand.runWithoutHelp(params);
  if (exitCode != 0) {
    return exitCode;
  }
  String targetName=getTarget(params.getBuckConfig());
  BuildTarget target=Iterables.getOnlyElement(getBuildTargets(params.getCell().getCellRoots(),ImmutableSet.of(targetName)));
  Build build=buildCommand.getBuild();
  BuildRule targetRule;
  try {
    targetRule=build.getRuleResolver().requireRule(target);
  }
 catch (  NoSuchBuildTargetException e) {
    throw new HumanReadableException(e.getHumanReadableErrorMessage());
  }
  BinaryBuildRule binaryBuildRule=null;
  if (targetRule instanceof BinaryBuildRule) {
    binaryBuildRule=(BinaryBuildRule)targetRule;
  }
  if (binaryBuildRule == null) {
    params.getBuckEventBus().post(ConsoleEvent.severe("target " + targetName + " is not a binary rule (only binary rules can be `run`)"));
    return 1;
  }
  SourcePathResolver resolver=new SourcePathResolver(build.getRuleResolver());
  Tool executable=binaryBuildRule.getExecutableCommand();
  ListeningProcessExecutor processExecutor=new ListeningProcessExecutor();
  ProcessExecutorParams processExecutorParams=ProcessExecutorParams.builder().addAllCommand(executable.getCommandPrefix(resolver)).addAllCommand(getTargetArguments()).setEnvironment(ImmutableMap.<String,String>builder().putAll(params.getEnvironment()).putAll(executable.getEnvironment(resolver)).build()).setDirectory(params.getCell().getFilesystem().getRootPath().toFile()).build();
  ForwardingProcessListener processListener=new ForwardingProcessListener(Channels.newChannel(params.getConsole().getStdOut()),Channels.newChannel(params.getConsole().getStdErr()));
  ListeningProcessExecutor.LaunchedProcess process=processExecutor.launchProcess(processExecutorParams,processListener);
  try {
    return processExecutor.waitForProcess(process,Long.MAX_VALUE,TimeUnit.DAYS);
  }
  finally {
    processExecutor.destroyProcess(process,false);
    processExecutor.waitForProcess(process,Long.MAX_VALUE,TimeUnit.DAYS);
  }
}
