{
  Set<Path> inputs=Sets.newHashSet();
  Set<String> nonExistentInputs=Sets.newHashSet();
  Set<String> nonFileInputs=Sets.newHashSet();
  ProjectFilesystem projectFilesystem=getProjectFilesystem();
  for (  String filePath : filePaths) {
    File file=projectFilesystem.getFileForRelativePath(filePath);
    if (!file.exists()) {
      nonExistentInputs.add(filePath);
    }
 else     if (!file.isFile()) {
      nonFileInputs.add(filePath);
    }
 else {
      inputs.add(Paths.get(filePath));
    }
  }
  Set<Path> inputsWithNoOwners=Sets.newHashSet(inputs);
  SetMultimap<TargetNode<?>,Path> owners=TreeMultimap.create();
  for (  final Path commandInput : inputs) {
    Predicate<Path> startsWith=new Predicate<Path>(){
      @Override public boolean apply(      Path input){
        return !commandInput.equals(input) && commandInput.startsWith(input);
      }
    }
;
    Set<Path> ruleInputs=targetNode.getInputs();
    if (ruleInputs.contains(commandInput) || FluentIterable.from(ruleInputs).anyMatch(startsWith)) {
      inputsWithNoOwners.remove(commandInput);
      owners.put(targetNode,commandInput);
    }
  }
  if (guessForDeletedEnabled) {
    for (    String nonExsitentInput : nonExistentInputs) {
      owners.put(targetNode,new File(nonExsitentInput).toPath());
    }
  }
  return new OwnersReport(owners,inputsWithNoOwners,nonExistentInputs,nonFileInputs);
}
