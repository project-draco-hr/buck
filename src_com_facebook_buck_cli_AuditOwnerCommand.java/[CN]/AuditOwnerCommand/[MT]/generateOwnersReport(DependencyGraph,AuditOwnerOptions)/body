{
  Set<InputRule> inputs=Sets.newHashSet();
  Set<String> nonExistentInputs=Sets.newHashSet();
  Set<String> nonFileInputs=Sets.newHashSet();
  ProjectFilesystem projectFilesystem=getProjectFilesystem();
  Function<String,Path> pathRelativizer=projectFilesystem.getPathRelativizer();
  for (  String filePath : options.getArguments()) {
    File file=projectFilesystem.getFileForRelativePath(filePath);
    if (!file.exists()) {
      nonExistentInputs.add(filePath);
    }
 else     if (!file.isFile()) {
      nonFileInputs.add(filePath);
    }
 else {
      inputs.add(InputRule.inputPathAsInputRule(filePath,pathRelativizer));
    }
  }
  Set<InputRule> inputsWithNoOwners=Sets.newHashSet(inputs);
  SetMultimap<BuildRule,InputRule> owners=createOwnersMap();
  for (  BuildRule rule : graph.getNodes()) {
    for (    InputRule ruleInput : rule.getInputs()) {
      if (inputs.contains(ruleInput)) {
        inputsWithNoOwners.remove(ruleInput);
        owners.put(rule,ruleInput);
      }
    }
  }
  if (options.isGuessForDeletedEnabled()) {
    guessOwnersForNonExistentFiles(graph,owners,nonExistentInputs);
  }
  return new OwnersReport(owners,inputsWithNoOwners,nonExistentInputs,nonFileInputs);
}
