{
  final Path rootPath=params.getCell().getFilesystem().getRootPath();
  Preconditions.checkState(rootPath.isAbsolute());
  Map<Path,List<TargetNode<?>>> targetNodes=Maps.newHashMap();
  OwnersReport report=OwnersReport.emptyReport();
  for (  Path filePath : getArgumentsAsPaths(rootPath,arguments)) {
    Optional<Path> basePath=buildFileTree.getBasePathOfAncestorTarget(filePath);
    if (!basePath.isPresent()) {
      report=report.updatedWith(new OwnersReport(ImmutableSetMultimap.<TargetNode<?>,Path>of(),ImmutableSet.of(filePath),Sets.<String>newHashSet(),Sets.<String>newHashSet()));
      continue;
    }
    Path buckFile=basePath.get().resolve(parserConfig.getBuildFileName());
    Preconditions.checkState(params.getCell().getFilesystem().exists(buckFile));
    if (!targetNodes.containsKey(buckFile)) {
      try {
        targetNodes.put(buckFile,params.getParser().getOrLoadTargetNodes(buckFile,parserConfig,params.getBuckEventBus(),params.getConsole(),params.getEnvironment()));
      }
 catch (      BuildFileParseException|BuildTargetException e) {
        Path targetBasePath=MorePaths.relativize(rootPath,rootPath.resolve(basePath.get()));
        String targetBaseName="//" + MorePaths.pathWithUnixSeparators(targetBasePath);
        params.getConsole().getStdErr().format("Could not parse build targets for %s",targetBaseName);
        throw e;
      }
    }
    for (    TargetNode<?> targetNode : targetNodes.get(buckFile)) {
      report=report.updatedWith(generateOwnersReport(params,targetNode,ImmutableList.of(filePath.toString()),guessForDeletedEnabled));
    }
  }
  return report;
}
