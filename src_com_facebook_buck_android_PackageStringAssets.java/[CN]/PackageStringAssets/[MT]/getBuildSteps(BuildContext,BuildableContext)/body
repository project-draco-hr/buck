{
  if (filteredResourcesProvider.getResDirectories().isEmpty()) {
    buildableContext.addMetadata(STRING_ASSETS_ZIP_HASH,Hashing.sha1().hashInt(0).toString());
    return ImmutableList.of();
  }
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  Path pathToBaseDir=getPathToStringAssetsDir();
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),pathToBaseDir));
  Path pathToDirContainingAssetsDir=pathToBaseDir.resolve("string_assets");
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),pathToDirContainingAssetsDir));
  final Path pathToStrings=pathToDirContainingAssetsDir.resolve("assets").resolve("strings");
  Function<String,Path> assetPathBuilder=new Function<String,Path>(){
    @Override public Path apply(    String locale){
      return pathToStrings.resolve(locale + STRING_ASSET_FILE_EXTENSION);
    }
  }
;
  Path pathToStringAssetsZip=getPathToStringAssetsZip();
  Path pathToAllLocalesStringAssetsZip=getPathToAllLocalesStringAssetsZip();
  steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),pathToStrings));
  steps.add(new CompileStringsStep(getProjectFilesystem(),filteredResourcesProvider.getStringFiles(),aaptPackageResources.getPathToRDotTxtDir(),assetPathBuilder));
  steps.add(new ZipStep(getProjectFilesystem(),pathToAllLocalesStringAssetsZip,ImmutableSet.<Path>of(),false,ZipStep.MAX_COMPRESSION_LEVEL,pathToDirContainingAssetsDir));
  steps.add(new ZipStep(getProjectFilesystem(),pathToStringAssetsZip,FluentIterable.from(locales).transform(assetPathBuilder).toSet(),false,ZipStep.MAX_COMPRESSION_LEVEL,pathToDirContainingAssetsDir));
  steps.add(new RecordFileSha1Step(getProjectFilesystem(),pathToStringAssetsZip,STRING_ASSETS_ZIP_HASH,buildableContext));
  buildableContext.recordArtifact(pathToAllLocalesStringAssetsZip);
  buildableContext.recordArtifact(pathToStringAssetsZip);
  return steps.build();
}
