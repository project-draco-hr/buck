{
  ImmutableSet.Builder<BuildTarget> rules=ImmutableSet.builder();
  ImmutableMultimap.Builder<CxxSource.Type,String> preprocessorFlags=ImmutableMultimap.builder();
  Map<Path,SourcePath> includeNameToPathMap=new HashMap<>();
  Map<Path,SourcePath> includeFullNameToPathMap=new HashMap<>();
  ImmutableSet.Builder<Path> includeRoots=ImmutableSet.builder();
  ImmutableSet.Builder<Path> systemIncludeRoots=ImmutableSet.builder();
  ImmutableSet.Builder<Path> headerMaps=ImmutableSet.builder();
  ImmutableSet.Builder<Path> frameworkRoots=ImmutableSet.builder();
  for (  CxxPreprocessorInput input : inputs) {
    rules.addAll(input.getRules());
    preprocessorFlags.putAll(input.getPreprocessorFlags());
    CxxHeaders.addAllEntriesToIncludeMap(includeNameToPathMap,input.getIncludes().getNameToPathMap());
    CxxHeaders.addAllEntriesToIncludeMap(includeFullNameToPathMap,input.getIncludes().getFullNameToPathMap());
    includeRoots.addAll(input.getIncludeRoots());
    systemIncludeRoots.addAll(input.getSystemIncludeRoots());
    headerMaps.addAll(input.getHeaderMaps());
    frameworkRoots.addAll(input.getFrameworkRoots());
  }
  return CxxPreprocessorInput.of(rules.build(),preprocessorFlags.build(),CxxHeaders.builder().putAllNameToPathMap(includeNameToPathMap).putAllFullNameToPathMap(includeFullNameToPathMap).build(),includeRoots.build(),systemIncludeRoots.build(),headerMaps.build(),frameworkRoots.build());
}
