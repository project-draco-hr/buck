{
  while (pos < buffer.length) {
    char c=buffer[pos];
    pos++;
switch (c) {
case '(':
{
        addToken(new Token(TokenKind.LPAREN));
        break;
      }
case ')':
{
      addToken(new Token(TokenKind.RPAREN));
      break;
    }
case ',':
{
    addToken(new Token(TokenKind.COMMA));
    break;
  }
case '+':
{
  addToken(new Token(TokenKind.PLUS));
  break;
}
case '-':
{
addToken(new Token(TokenKind.MINUS));
break;
}
case '=':
{
addToken(new Token(TokenKind.EQUALS));
break;
}
case '^':
{
addToken(new Token(TokenKind.CARET));
break;
}
case '\n':
case ' ':
case '\t':
case '\r':
{
break;
}
case '\'':
case '\"':
{
addToken(quotedWord(c));
break;
}
default :
{
addToken(wordOrKeyword());
break;
}
}
}
addToken(new Token(TokenKind.EOF));
this.buffer=null;
}
