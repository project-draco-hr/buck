{
  ProjectFilesystem projectFilesystem=new FakeProjectFilesystem();
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(new FakeBuckConfig()));
  final BuildTarget publicHeaderTarget=BuildTargetFactory.newInstance("//:header");
  final BuildTarget publicHeaderSymlinkTreeTarget=BuildTargetFactory.newInstance("//:symlink");
  final Path publicHeaderSymlinkTreeRoot=Paths.get("symlink/tree/root");
  final BuildTarget privateHeaderTarget=BuildTargetFactory.newInstance("//:privateheader");
  final BuildTarget privateHeaderSymlinkTreeTarget=BuildTargetFactory.newInstance("//:privatesymlink");
  final Path privateHeaderSymlinkTreeRoot=Paths.get("private/symlink/tree/root");
  final BuildRule archive=new FakeBuildRule("//:archive",pathResolver);
  final Path archiveOutput=Paths.get("output/path/lib.a");
  final BuildRule sharedLibrary=new FakeBuildRule("//:shared",pathResolver);
  final Path sharedLibraryOutput=Paths.get("output/path/lib.so");
  final String sharedLibrarySoname="lib.so";
  FakeCxxLibrary cxxLibrary=new FakeCxxLibrary(params,pathResolver,publicHeaderTarget,publicHeaderSymlinkTreeTarget,publicHeaderSymlinkTreeRoot,privateHeaderTarget,privateHeaderSymlinkTreeTarget,privateHeaderSymlinkTreeRoot,archive,archiveOutput,sharedLibrary,sharedLibraryOutput,sharedLibrarySoname,ImmutableSortedSet.<BuildTarget>of());
  CxxPreprocessorInput expectedPublicCxxPreprocessorInput=CxxPreprocessorInput.builder().addRules(publicHeaderTarget,publicHeaderSymlinkTreeTarget).addIncludeRoots(publicHeaderSymlinkTreeRoot).build();
  assertEquals(expectedPublicCxxPreprocessorInput,cxxLibrary.getCxxPreprocessorInput(cxxPlatform,CxxDescriptionEnhancer.HeaderVisibility.PUBLIC));
  CxxPreprocessorInput expectedPrivateCxxPreprocessorInput=CxxPreprocessorInput.builder().addRules(privateHeaderTarget,privateHeaderSymlinkTreeTarget).addIncludeRoots(privateHeaderSymlinkTreeRoot).build();
  assertEquals(expectedPrivateCxxPreprocessorInput,cxxLibrary.getCxxPreprocessorInput(cxxPlatform,CxxDescriptionEnhancer.HeaderVisibility.PRIVATE));
  NativeLinkableInput expectedStaticNativeLinkableInput=NativeLinkableInput.of(ImmutableList.<SourcePath>of(new BuildTargetSourcePath(projectFilesystem,archive.getBuildTarget())),ImmutableList.of(archiveOutput.toString()));
  assertEquals(expectedStaticNativeLinkableInput,cxxLibrary.getNativeLinkableInput(cxxPlatform,Linker.LinkableDepType.STATIC));
  NativeLinkableInput expectedSharedNativeLinkableInput=NativeLinkableInput.of(ImmutableList.<SourcePath>of(new BuildTargetSourcePath(projectFilesystem,sharedLibrary.getBuildTarget())),ImmutableList.of(sharedLibraryOutput.toString()));
  assertEquals(expectedSharedNativeLinkableInput,cxxLibrary.getNativeLinkableInput(cxxPlatform,Linker.LinkableDepType.SHARED));
  PythonPackageComponents expectedPythonPackageComponents=PythonPackageComponents.of(ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(Paths.get(sharedLibrarySoname),new PathSourcePath(projectFilesystem,sharedLibraryOutput)));
  assertEquals(expectedPythonPackageComponents,cxxLibrary.getPythonPackageComponents(cxxPlatform));
  assertEquals(ImmutableList.<Step>of(),cxxLibrary.getBuildSteps(null,null));
  assertNull(cxxLibrary.getPathToOutputFile());
  assertTrue(ImmutableList.copyOf(cxxLibrary.getInputs()).isEmpty());
}
