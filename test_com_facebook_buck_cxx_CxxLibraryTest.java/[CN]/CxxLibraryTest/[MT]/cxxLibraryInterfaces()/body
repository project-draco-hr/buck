{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  CxxPlatform cxxPlatform=new DefaultCxxPlatform(new FakeBuckConfig());
  final BuildTarget headerTarget=BuildTargetFactory.newInstance("//:header");
  final BuildTarget headerSymlinkTreeTarget=BuildTargetFactory.newInstance("//:symlink");
  final Path headerSymlinkTreeRoot=Paths.get("symlink/tree/root");
  final BuildRule archive=new FakeBuildRule("//:archive",pathResolver);
  final Path archiveOutput=Paths.get("output/path/lib.a");
  final BuildRule sharedLibrary=new FakeBuildRule("//:shared",pathResolver);
  final Path sharedLibraryOutput=Paths.get("output/path/lib.so");
  final String sharedLibrarySoname="lib.so";
  CxxLibrary cxxLibrary=new CxxLibrary(params,pathResolver){
    @Override public CxxPreprocessorInput getCxxPreprocessorInput(){
      return CxxPreprocessorInput.builder().setRules(ImmutableSet.of(headerTarget,headerSymlinkTreeTarget)).setIncludeRoots(headerSymlinkTreeRoot).build();
    }
    @Override public NativeLinkableInput getNativeLinkableInput(    Linker linker,    Type type){
      return type == Type.STATIC ? new NativeLinkableInput(ImmutableList.<SourcePath>of(new BuildTargetSourcePath(archive.getBuildTarget())),ImmutableList.of(archiveOutput.toString())) : new NativeLinkableInput(ImmutableList.<SourcePath>of(new BuildTargetSourcePath(sharedLibrary.getBuildTarget())),ImmutableList.of(sharedLibraryOutput.toString()));
    }
    @Override public PythonPackageComponents getPythonPackageComponents(){
      return new PythonPackageComponents(ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(Paths.get(sharedLibrarySoname),new PathSourcePath(sharedLibraryOutput)));
    }
  }
;
  CxxPreprocessorInput expectedCxxPreprocessorInput=CxxPreprocessorInput.builder().setRules(ImmutableSet.of(headerTarget,headerSymlinkTreeTarget)).setIncludeRoots(headerSymlinkTreeRoot).build();
  assertEquals(expectedCxxPreprocessorInput,cxxLibrary.getCxxPreprocessorInput());
  NativeLinkableInput expectedStaticNativeLinkableInput=new NativeLinkableInput(ImmutableList.<SourcePath>of(new BuildTargetSourcePath(archive.getBuildTarget())),ImmutableList.of(archiveOutput.toString()));
  assertEquals(expectedStaticNativeLinkableInput,cxxLibrary.getNativeLinkableInput(cxxPlatform.getLd(),NativeLinkable.Type.STATIC));
  NativeLinkableInput expectedSharedNativeLinkableInput=new NativeLinkableInput(ImmutableList.<SourcePath>of(new BuildTargetSourcePath(sharedLibrary.getBuildTarget())),ImmutableList.of(sharedLibraryOutput.toString()));
  assertEquals(expectedSharedNativeLinkableInput,cxxLibrary.getNativeLinkableInput(cxxPlatform.getLd(),NativeLinkable.Type.SHARED));
  PythonPackageComponents expectedPythonPackageComponents=new PythonPackageComponents(ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(Paths.get(sharedLibrarySoname),new PathSourcePath(sharedLibraryOutput)));
  assertEquals(expectedPythonPackageComponents,cxxLibrary.getPythonPackageComponents());
  assertEquals(ImmutableList.<Step>of(),cxxLibrary.getBuildSteps(null,null));
  assertNull(cxxLibrary.getPathToOutputFile());
  assertTrue(ImmutableList.copyOf(cxxLibrary.getInputsToCompareToOutput()).isEmpty());
}
