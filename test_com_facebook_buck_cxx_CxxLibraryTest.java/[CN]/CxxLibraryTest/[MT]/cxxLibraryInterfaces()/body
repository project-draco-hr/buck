{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer()));
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(FakeBuckConfig.builder().build()));
  final BuildTarget publicHeaderTarget=BuildTargetFactory.newInstance("//:header");
  final BuildTarget publicHeaderSymlinkTreeTarget=BuildTargetFactory.newInstance("//:symlink");
  final BuildTarget privateHeaderTarget=BuildTargetFactory.newInstance("//:privateheader");
  final BuildTarget privateHeaderSymlinkTreeTarget=BuildTargetFactory.newInstance("//:privatesymlink");
  final BuildRule archive=new FakeBuildRule("//:archive",pathResolver);
  final BuildRule sharedLibrary=new FakeBuildRule("//:shared",pathResolver);
  final Path sharedLibraryOutput=Paths.get("output/path/lib.so");
  final String sharedLibrarySoname="lib.so";
  FakeCxxLibrary cxxLibrary=new FakeCxxLibrary(params,pathResolver,publicHeaderTarget,publicHeaderSymlinkTreeTarget,privateHeaderTarget,privateHeaderSymlinkTreeTarget,archive,sharedLibrary,sharedLibraryOutput,sharedLibrarySoname,ImmutableSortedSet.<BuildTarget>of());
  CxxPreprocessorInput expectedPublicCxxPreprocessorInput=CxxPreprocessorInput.builder().addIncludes(CxxSymlinkTreeHeaders.builder().setIncludeType(CxxPreprocessables.IncludeType.LOCAL).putNameToPathMap(Paths.get("header.h"),new BuildTargetSourcePath(publicHeaderTarget)).setRoot(new BuildTargetSourcePath(publicHeaderSymlinkTreeTarget)).build()).build();
  assertEquals(expectedPublicCxxPreprocessorInput,cxxLibrary.getCxxPreprocessorInput(cxxPlatform,HeaderVisibility.PUBLIC));
  CxxPreprocessorInput expectedPrivateCxxPreprocessorInput=CxxPreprocessorInput.builder().addIncludes(CxxSymlinkTreeHeaders.builder().setIncludeType(CxxPreprocessables.IncludeType.LOCAL).setRoot(new BuildTargetSourcePath(privateHeaderSymlinkTreeTarget)).putNameToPathMap(Paths.get("header.h"),new BuildTargetSourcePath(privateHeaderTarget)).build()).build();
  assertEquals(expectedPrivateCxxPreprocessorInput,cxxLibrary.getCxxPreprocessorInput(cxxPlatform,HeaderVisibility.PRIVATE));
  NativeLinkableInput expectedStaticNativeLinkableInput=NativeLinkableInput.of(ImmutableList.<Arg>of(new SourcePathArg(pathResolver,new BuildTargetSourcePath(archive.getBuildTarget()))),ImmutableSet.<FrameworkPath>of(),ImmutableSet.<FrameworkPath>of());
  assertEquals(expectedStaticNativeLinkableInput,cxxLibrary.getNativeLinkableInput(cxxPlatform,Linker.LinkableDepType.STATIC));
  NativeLinkableInput expectedSharedNativeLinkableInput=NativeLinkableInput.of(ImmutableList.<Arg>of(new SourcePathArg(pathResolver,new BuildTargetSourcePath(sharedLibrary.getBuildTarget()))),ImmutableSet.<FrameworkPath>of(),ImmutableSet.<FrameworkPath>of());
  assertEquals(expectedSharedNativeLinkableInput,cxxLibrary.getNativeLinkableInput(cxxPlatform,Linker.LinkableDepType.SHARED));
  assertEquals(ImmutableList.<Step>of(),cxxLibrary.getBuildSteps(null,null));
  assertNull(cxxLibrary.getPathToOutput());
}
