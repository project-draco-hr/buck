{
  ProjectFilesystem projectFilesystem=new FakeProjectFilesystem();
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(new FakeBuckConfig()));
  BuildTarget staticPicLibraryTarget=BuildTarget.builder(params.getBuildTarget()).addFlavors(cxxPlatform.getFlavor(),CxxDescriptionEnhancer.STATIC_PIC_FLAVOR).build();
  ruleResolver.addToIndex(new FakeBuildRule(BuildRuleParamsFactory.createTrivialBuildRuleParams(staticPicLibraryTarget),pathResolver));
  CxxLibrary cxxLibrary=new CxxLibrary(params,ruleResolver,pathResolver,false,Functions.constant(ImmutableMultimap.<CxxSource.Type,String>of()),Functions.constant(ImmutableList.<String>of()),Optional.<String>absent(),ImmutableList.<Path>of(),CxxLibrary.Linkage.STATIC,false,Optional.<String>absent(),ImmutableSortedSet.<BuildTarget>of());
  assertThat(cxxLibrary.getSharedLibraries(cxxPlatform).entrySet(),Matchers.empty());
  assertThat(cxxLibrary.getPythonPackageComponents(cxxPlatform).getNativeLibraries().entrySet(),Matchers.empty());
  NativeLinkableInput expectedSharedNativeLinkableInput=NativeLinkableInput.of(ImmutableList.<SourcePath>of(new BuildTargetSourcePath(projectFilesystem,staticPicLibraryTarget)),ImmutableList.of(CxxDescriptionEnhancer.getStaticLibraryPath(target,cxxPlatform.getFlavor(),CxxSourceRuleFactory.PicType.PIC).toString()));
  assertEquals(expectedSharedNativeLinkableInput,cxxLibrary.getNativeLinkableInput(cxxPlatform,Linker.LinkableDepType.SHARED));
}
