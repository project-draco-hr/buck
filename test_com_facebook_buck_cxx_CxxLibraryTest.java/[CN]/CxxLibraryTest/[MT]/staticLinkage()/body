{
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(FakeBuckConfig.builder().build()));
  BuildTarget staticPicLibraryTarget=BuildTarget.builder(params.getBuildTarget()).addFlavors(cxxPlatform.getFlavor(),CxxDescriptionEnhancer.STATIC_PIC_FLAVOR).build();
  ruleResolver.addToIndex(new FakeBuildRule(new FakeBuildRuleParamsBuilder(staticPicLibraryTarget).build(),pathResolver));
  CxxLibrary cxxLibrary=new CxxLibrary(params,ruleResolver,pathResolver,FluentIterable.from(params.getDeclaredDeps().get()).filter(NativeLinkable.class),Predicates.<CxxPlatform>alwaysFalse(),Functions.constant(ImmutableMultimap.<CxxSource.Type,String>of()),Functions.constant(ImmutableList.<Arg>of()),Optional.<Pattern>absent(),ImmutableSet.<FrameworkPath>of(),ImmutableSet.<FrameworkPath>of(),NativeLinkable.Linkage.STATIC,false,Optional.<String>absent(),ImmutableSortedSet.<BuildTarget>of(),false);
  assertThat(cxxLibrary.getSharedLibraries(TargetGraph.EMPTY,cxxPlatform).entrySet(),Matchers.empty());
  assertThat(cxxLibrary.getPythonPackageComponents(TargetGraph.EMPTY,PythonTestUtils.PYTHON_PLATFORM,cxxPlatform).getNativeLibraries().entrySet(),Matchers.empty());
  NativeLinkableInput expectedSharedNativeLinkableInput=NativeLinkableInput.of(ImmutableList.<Arg>of(new SourcePathArg(pathResolver,new BuildTargetSourcePath(staticPicLibraryTarget))),ImmutableSet.<FrameworkPath>of(),ImmutableSet.<FrameworkPath>of());
  assertEquals(expectedSharedNativeLinkableInput,cxxLibrary.getNativeLinkableInput(TargetGraph.EMPTY,cxxPlatform,Linker.LinkableDepType.SHARED));
}
