{
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(FakeBuckConfig.builder().build()));
  BuildTarget staticPicLibraryTarget=params.getBuildTarget().withAppendedFlavors(cxxPlatform.getFlavor(),CxxDescriptionEnhancer.STATIC_PIC_FLAVOR);
  ruleResolver.addToIndex(new FakeBuildRule(new FakeBuildRuleParamsBuilder(staticPicLibraryTarget).build(),pathResolver));
  FrameworkPath frameworkPath=FrameworkPath.ofSourcePath(new BuildTargetSourcePath(BuildTargetFactory.newInstance("//foo:baz")));
  CxxLibrary cxxLibrary=new CxxLibrary(params,ruleResolver,pathResolver,FluentIterable.from(params.getDeclaredDeps().get()),Predicates.<CxxPlatform>alwaysTrue(),Predicates.<CxxPlatform>alwaysTrue(),Functions.constant(ImmutableMultimap.<CxxSource.Type,String>of()),Functions.constant(StringArg.from("-ldl")),Functions.constant(NativeLinkableInput.of()),Optional.<Pattern>absent(),ImmutableSet.of(frameworkPath),ImmutableSet.<FrameworkPath>of(),NativeLinkable.Linkage.STATIC,false,Optional.<String>absent(),ImmutableSortedSet.<BuildTarget>of(),false);
  NativeLinkableInput expectedSharedNativeLinkableInput=NativeLinkableInput.of(StringArg.from("-ldl"),ImmutableSet.of(frameworkPath),ImmutableSet.<FrameworkPath>of());
  assertEquals(expectedSharedNativeLinkableInput,cxxLibrary.getNativeLinkableInput(cxxPlatform,Linker.LinkableDepType.SHARED));
}
