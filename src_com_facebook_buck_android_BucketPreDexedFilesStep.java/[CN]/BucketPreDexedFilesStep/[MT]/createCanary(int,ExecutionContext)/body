{
  FileLike fileLike=CanaryFactory.create(index);
  String canaryDirName="canary_" + String.valueOf(index);
  final Path scratchDirectoryForCanaryClass=scratchDirectory.resolve(canaryDirName);
  String relativePathToClassFile=fileLike.getRelativePath();
  Preconditions.checkState(relativePathToClassFile.endsWith(".class"));
  final String className=relativePathToClassFile.replaceFirst("\\.class$","");
  Path classFile=scratchDirectoryForCanaryClass.resolve(relativePathToClassFile);
  ProjectFilesystem projectFilesystem=context.getProjectFilesystem();
  projectFilesystem.createParentDirs(classFile);
  try (InputStream inputStream=fileLike.getInput()){
    projectFilesystem.copyToPath(inputStream,classFile);
  }
   return new DexWithClasses(){
    @Override public int getSizeEstimate(){
      return 0;
    }
    @Override public Path getPathToDexFile(){
      return scratchDirectoryForCanaryClass;
    }
    @Override public ImmutableSet<String> getClassNames(){
      return ImmutableSet.of(className);
    }
  }
;
}
