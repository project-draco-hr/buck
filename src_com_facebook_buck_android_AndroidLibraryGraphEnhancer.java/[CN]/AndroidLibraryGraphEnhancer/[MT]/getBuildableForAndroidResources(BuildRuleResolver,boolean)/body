{
  Optional<BuildRule> previouslyCreated=ruleResolver.getRuleOptional(dummyRDotJavaBuildTarget);
  if (previouslyCreated.isPresent()) {
    return previouslyCreated.transform(new Function<BuildRule,DummyRDotJava>(){
      @Override public DummyRDotJava apply(      BuildRule input){
        return (DummyRDotJava)input;
      }
    }
);
  }
  ImmutableSortedSet<BuildRule> originalDeps=originalBuildRuleParams.getDeps();
  ImmutableSet<HasAndroidResourceDeps> androidResourceDeps;
switch (resourceDependencyMode) {
case FIRST_ORDER:
    androidResourceDeps=FluentIterable.from(originalDeps).filter(HasAndroidResourceDeps.class).filter(HasAndroidResourceDeps.NON_EMPTY_RESOURCE).toSet();
  break;
case TRANSITIVE:
androidResourceDeps=UnsortedAndroidResourceDeps.createFrom(originalDeps,Optional.<UnsortedAndroidResourceDeps.Callback>absent()).getResourceDeps();
break;
default :
throw new IllegalStateException("Invalid resource dependency mode: " + resourceDependencyMode);
}
if (androidResourceDeps.isEmpty() && !createBuildableIfEmptyDeps) {
return Optional.absent();
}
SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
ImmutableSortedSet.Builder<BuildRule> actualDeps=ImmutableSortedSet.naturalOrder();
for (HasAndroidResourceDeps dep : androidResourceDeps) {
actualDeps.add(Preconditions.checkNotNull(ruleResolver.getRule(dep.getBuildTarget())));
}
actualDeps.addAll(pathResolver.filterBuildRuleInputs(javacOptions.getInputs()));
BuildRuleParams dummyRDotJavaParams=originalBuildRuleParams.copyWithChanges(dummyRDotJavaBuildTarget,Suppliers.ofInstance(actualDeps.build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
DummyRDotJava dummyRDotJava=new DummyRDotJava(dummyRDotJavaParams,pathResolver,androidResourceDeps,javacOptions);
ruleResolver.addToIndex(dummyRDotJava);
return Optional.of(dummyRDotJava);
}
