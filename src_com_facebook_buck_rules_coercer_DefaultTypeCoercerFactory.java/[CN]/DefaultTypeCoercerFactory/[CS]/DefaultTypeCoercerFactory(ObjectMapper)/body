{
  jacksonObjectMapper=mapper.copy().setPropertyNamingStrategy(PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES).enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
  TypeCoercer<String> stringTypeCoercer=new IdentityTypeCoercer<>(String.class);
  TypeCoercer<Flavor> flavorTypeCoercer=new FlavorTypeCoercer();
  TypeCoercer<Path> pathTypeCoercer=new PathTypeCoercer();
  TypeCoercer<Label> labelTypeCoercer=new LabelTypeCoercer();
  TypeCoercer<BuildTargetPattern> buildTargetPatternTypeCoercer=new IdentityTypeCoercer<BuildTargetPattern>(BuildTargetPattern.class){
    @Override public BuildTargetPattern coerce(    CellPathResolver cellRoots,    ProjectFilesystem filesystem,    Path pathRelativeToProjectRoot,    Object object) throws CoerceFailedException {
      throw new UnsupportedOperationException();
    }
  }
;
  TypeCoercer<BuildTarget> buildTargetTypeCoercer=new BuildTargetTypeCoercer();
  TypeCoercer<SourcePath> sourcePathTypeCoercer=new SourcePathTypeCoercer(buildTargetTypeCoercer,pathTypeCoercer);
  TypeCoercer<SourceWithFlags> sourceWithFlagsTypeCoercer=new SourceWithFlagsTypeCoercer(sourcePathTypeCoercer,new ListTypeCoercer<>(stringTypeCoercer));
  TypeCoercer<OCamlSource> ocamlSourceTypeCoercer=new OCamlSourceTypeCoercer(sourcePathTypeCoercer);
  TypeCoercer<Float> floatTypeCoercer=new NumberTypeCoercer<>(Float.class);
  TypeCoercer<NeededCoverageSpec> neededCoverageSpecTypeCoercer=new NeededCoverageSpecTypeCoercer(floatTypeCoercer,buildTargetTypeCoercer,stringTypeCoercer);
  nonParameterizedTypeCoercers=new TypeCoercer<?>[]{labelTypeCoercer,pathTypeCoercer,flavorTypeCoercer,sourcePathTypeCoercer,buildTargetTypeCoercer,buildTargetPatternTypeCoercer,stringTypeCoercer,new IdentityTypeCoercer<>(Boolean.class),new NumberTypeCoercer<>(Integer.class),new NumberTypeCoercer<>(Double.class),floatTypeCoercer,new NumberTypeCoercer<>(Long.class),new NumberTypeCoercer<>(Short.class),new NumberTypeCoercer<>(Byte.class),sourceWithFlagsTypeCoercer,ocamlSourceTypeCoercer,new BuildConfigFieldsTypeCoercer(),new UriTypeCoercer(),new FrameworkPathTypeCoercer(sourcePathTypeCoercer),new SourceWithFlagsListTypeCoercer(stringTypeCoercer,sourceWithFlagsTypeCoercer),new SourceListTypeCoercer(stringTypeCoercer,sourcePathTypeCoercer),new LogLevelTypeCoercer(),new ManifestEntriesTypeCoercer(jacksonObjectMapper),patternTypeCoercer,neededCoverageSpecTypeCoercer};
}
