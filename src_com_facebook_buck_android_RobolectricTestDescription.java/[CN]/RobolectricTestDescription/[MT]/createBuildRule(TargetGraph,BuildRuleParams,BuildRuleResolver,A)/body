{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ImmutableList<String> vmArgs=args.vmArgs.get();
  JavacOptions.Builder javacOptionsBuilder=JavaLibraryDescription.getJavacOptions(pathResolver,args,templateOptions);
  AnnotationProcessingParams annotationParams=args.buildAnnotationProcessingParams(params.getBuildTarget(),params.getProjectFilesystem(),resolver);
  javacOptionsBuilder.setAnnotationProcessingParams(annotationParams);
  JavacOptions javacOptions=javacOptionsBuilder.build();
  AndroidLibraryGraphEnhancer graphEnhancer=new AndroidLibraryGraphEnhancer(params.getBuildTarget(),params.copyWithExtraDeps(Suppliers.ofInstance(resolver.getAllRules(args.exportedDeps.get()))),javacOptions,ResourceDependencyMode.TRANSITIVE);
  Optional<DummyRDotJava> dummyRDotJava=graphEnhancer.getBuildableForAndroidResources(resolver,true);
  ImmutableSet<Path> additionalClasspathEntries=ImmutableSet.of();
  if (dummyRDotJava.isPresent()) {
    additionalClasspathEntries=ImmutableSet.of(dummyRDotJava.get().getRDotJavaBinFolder());
    ImmutableSortedSet<BuildRule> newExtraDeps=ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getExtraDeps().get()).add(dummyRDotJava.get()).build();
    params=params.copyWithExtraDeps(Suppliers.ofInstance(newExtraDeps));
  }
  JavaTestDescription.CxxLibraryEnhancement cxxLibraryEnhancement=new JavaTestDescription.CxxLibraryEnhancement(targetGraph,params,args.useCxxLibraries,pathResolver,cxxPlatform);
  params=cxxLibraryEnhancement.updatedParams;
  BuildTarget abiJarTarget=BuildTarget.builder(params.getBuildTarget()).addFlavors(CalculateAbi.FLAVOR).build();
  RobolectricTest test=resolver.addToIndex(new RobolectricTest(params.appendExtraDeps(Iterables.concat(BuildRules.getExportedRules(Iterables.concat(params.getDeclaredDeps().get(),resolver.getAllRules(args.providedDeps.get()))),pathResolver.filterBuildRuleInputs(javacOptions.getInputs(pathResolver)))),pathResolver,args.srcs.get(),JavaLibraryDescription.validateResources(pathResolver,args,params.getProjectFilesystem()),args.labels.get(),args.contacts.get(),args.proguardConfig.transform(SourcePaths.toSourcePath(params.getProjectFilesystem())),new BuildTargetSourcePath(abiJarTarget),additionalClasspathEntries,javacOptions,vmArgs,cxxLibraryEnhancement.nativeLibsEnvironment,JavaTestDescription.validateAndGetSourcesUnderTest(args.sourceUnderTest.get(),params.getBuildTarget(),resolver),args.resourcesRoot,args.mavenCoords,dummyRDotJava,testRuleTimeoutMs,args.getRunTestSeparately(),args.stdOutLogLevel,args.stdErrLogLevel,testTempDirOverride));
  resolver.addToIndex(CalculateAbi.of(abiJarTarget,pathResolver,params,new BuildTargetSourcePath(test.getBuildTarget())));
  return test;
}
