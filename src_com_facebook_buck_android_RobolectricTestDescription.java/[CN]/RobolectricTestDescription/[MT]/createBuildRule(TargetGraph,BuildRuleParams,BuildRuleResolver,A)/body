{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ImmutableList<String> vmArgs=args.vmArgs.get();
  JavacOptions javacOptions=JavacOptionsFactory.create(templateOptions,params,resolver,pathResolver,args);
  AndroidLibraryGraphEnhancer graphEnhancer=new AndroidLibraryGraphEnhancer(params.getBuildTarget(),params.copyWithExtraDeps(Suppliers.ofInstance(resolver.getAllRules(args.exportedDeps.get()))),javacOptions,DependencyMode.TRANSITIVE,true,Optional.<String>absent(),Optional.<String>absent());
  Optional<DummyRDotJava> dummyRDotJava=graphEnhancer.getBuildableForAndroidResources(resolver,true);
  ImmutableSet<Path> additionalClasspathEntries=ImmutableSet.of();
  if (dummyRDotJava.isPresent()) {
    additionalClasspathEntries=ImmutableSet.of(dummyRDotJava.get().getPathToOutput());
    ImmutableSortedSet<BuildRule> newExtraDeps=ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getExtraDeps().get()).add(dummyRDotJava.get()).build();
    params=params.copyWithExtraDeps(Suppliers.ofInstance(newExtraDeps));
  }
  JavaTestDescription.CxxLibraryEnhancement cxxLibraryEnhancement=new JavaTestDescription.CxxLibraryEnhancement(params,args.useCxxLibraries,resolver,pathResolver,cxxPlatform);
  params=cxxLibraryEnhancement.updatedParams;
  BuildTarget abiJarTarget=params.getBuildTarget().withAppendedFlavors(CalculateAbi.FLAVOR);
  BuildRuleParams testsLibraryParams=params.copyWithDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getDeclaredDeps().get()).addAll(FluentIterable.from(params.getDeclaredDeps().get()).filter(JavaTest.class).transform(new Function<JavaTest,BuildRule>(){
    @Override public BuildRule apply(    JavaTest input){
      return input.getCompiledTestsLibrary();
    }
  }
)).build()),params.getExtraDeps());
  testsLibraryParams=testsLibraryParams.appendExtraDeps(Iterables.concat(BuildRules.getExportedRules(Iterables.concat(testsLibraryParams.getDeclaredDeps().get(),resolver.getAllRules(args.providedDeps.get()))),pathResolver.filterBuildRuleInputs(javacOptions.getInputs(pathResolver)))).withFlavor(JavaTest.COMPILED_TESTS_LIBRARY_FLAVOR);
  JavaLibrary testsLibrary=resolver.addToIndex(new DefaultJavaLibrary(testsLibraryParams,pathResolver,args.srcs.get(),validateResources(pathResolver,params.getProjectFilesystem(),args.resources.get()),javacOptions.getGeneratedSourceFolderName(),args.proguardConfig.transform(SourcePaths.toSourcePath(params.getProjectFilesystem())),ImmutableList.<String>of(),ImmutableSortedSet.<BuildRule>of(),ImmutableSortedSet.<BuildRule>of(),new BuildTargetSourcePath(abiJarTarget),javacOptions.trackClassUsage(),additionalClasspathEntries,new JavacToJarStepFactory(javacOptions,new BootClasspathAppender()),args.resourcesRoot,args.mavenCoords,ImmutableSortedSet.<BuildTarget>of(),ImmutableSet.<Pattern>of()));
  RobolectricTest robolectricTest=resolver.addToIndex(new RobolectricTest(params.copyWithDeps(Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of(testsLibrary)),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,testsLibrary,additionalClasspathEntries,args.labels.get(),args.contacts.get(),TestType.JUNIT,javaOptions,vmArgs,cxxLibraryEnhancement.nativeLibsEnvironment,dummyRDotJava,args.testRuleTimeoutMs.or(defaultTestRuleTimeoutMs),args.env.get(),args.getRunTestSeparately(),args.getForkMode(),args.stdOutLogLevel,args.stdErrLogLevel));
  resolver.addToIndex(CalculateAbi.of(abiJarTarget,pathResolver,params,new BuildTargetSourcePath(testsLibrary.getBuildTarget())));
  return robolectricTest;
}
