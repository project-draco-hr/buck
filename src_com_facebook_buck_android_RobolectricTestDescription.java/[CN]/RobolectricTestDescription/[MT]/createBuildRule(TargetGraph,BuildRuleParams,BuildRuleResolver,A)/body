{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ImmutableList<String> vmArgs=args.vmArgs.get();
  JavacOptions javacOptions=JavacOptionsFactory.create(templateOptions,params,resolver,pathResolver,args);
  AndroidLibraryGraphEnhancer graphEnhancer=new AndroidLibraryGraphEnhancer(params.getBuildTarget(),params.copyWithExtraDeps(Suppliers.ofInstance(resolver.getAllRules(args.exportedDeps.get()))),javacOptions,DependencyMode.TRANSITIVE,true,Optional.<String>absent());
  Optional<DummyRDotJava> dummyRDotJava=graphEnhancer.getBuildableForAndroidResources(resolver,true);
  ImmutableSet<Path> additionalClasspathEntries=ImmutableSet.of();
  if (dummyRDotJava.isPresent()) {
    additionalClasspathEntries=ImmutableSet.of(dummyRDotJava.get().getPathToOutput());
    ImmutableSortedSet<BuildRule> newExtraDeps=ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getExtraDeps().get()).add(dummyRDotJava.get()).build();
    params=params.copyWithExtraDeps(Suppliers.ofInstance(newExtraDeps));
  }
  JavaTestDescription.CxxLibraryEnhancement cxxLibraryEnhancement=new JavaTestDescription.CxxLibraryEnhancement(params,args.useCxxLibraries,resolver,pathResolver,cxxPlatform);
  params=cxxLibraryEnhancement.updatedParams;
  BuildTarget abiJarTarget=params.getBuildTarget().withAppendedFlavors(CalculateAbi.FLAVOR);
  RobolectricTest test=resolver.addToIndex(new RobolectricTest(params.appendExtraDeps(Iterables.concat(BuildRules.getExportedRules(Iterables.concat(params.getDeclaredDeps().get(),resolver.getAllRules(args.providedDeps.get()))),pathResolver.filterBuildRuleInputs(javacOptions.getInputs(pathResolver)))),pathResolver,args.srcs.get(),validateResources(pathResolver,params.getProjectFilesystem(),args.resources.get()),args.labels.get(),args.contacts.get(),args.proguardConfig.transform(SourcePaths.toSourcePath(params.getProjectFilesystem())),new BuildTargetSourcePath(abiJarTarget),additionalClasspathEntries,javacOptions,javaOptions,vmArgs,cxxLibraryEnhancement.nativeLibsEnvironment,JavaTestDescription.validateAndGetSourcesUnderTest(args.sourceUnderTest.get(),params.getBuildTarget(),resolver),args.resourcesRoot,args.mavenCoords,dummyRDotJava,args.testRuleTimeoutMs.or(defaultTestRuleTimeoutMs),args.getRunTestSeparately(),args.stdOutLogLevel,args.stdErrLogLevel,testTempDirOverride));
  resolver.addToIndex(CalculateAbi.of(abiJarTarget,pathResolver,params,new BuildTargetSourcePath(test.getBuildTarget())));
  return test;
}
