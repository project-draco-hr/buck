{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ImmutableList<String> vmArgs=args.vmArgs.get();
  JavacOptions.Builder javacOptionsBuilder=JavaLibraryDescription.getJavacOptions(resolver,args,templateOptions);
  AnnotationProcessingParams annotationParams=args.buildAnnotationProcessingParams(params.getBuildTarget(),params.getProjectFilesystem(),resolver);
  javacOptionsBuilder.setAnnotationProcessingParams(annotationParams);
  JavacOptions javacOptions=javacOptionsBuilder.build();
  AndroidLibraryGraphEnhancer graphEnhancer=new AndroidLibraryGraphEnhancer(params.getBuildTarget(),params.copyWithExtraDeps(Suppliers.ofInstance(resolver.getAllRules(args.exportedDeps.get()))),javacOptions,ResourceDependencyMode.TRANSITIVE);
  Optional<DummyRDotJava> dummyRDotJava=graphEnhancer.getBuildableForAndroidResources(resolver,true);
  ImmutableSet<Path> additionalClasspathEntries=ImmutableSet.of();
  if (dummyRDotJava.isPresent()) {
    additionalClasspathEntries=ImmutableSet.of(dummyRDotJava.get().getRDotJavaBinFolder());
    ImmutableSortedSet<BuildRule> newExtraDeps=ImmutableSortedSet.<BuildRule>naturalOrder().addAll(params.getExtraDeps()).add(dummyRDotJava.get()).build();
    params=params.copyWithExtraDeps(Suppliers.ofInstance(newExtraDeps));
  }
  return new RobolectricTest(params.appendExtraDeps(Iterables.concat(BuildRules.getExportedRules(Iterables.concat(params.getDeclaredDeps(),resolver.getAllRules(args.providedDeps.get()))),pathResolver.filterBuildRuleInputs(javacOptions.getInputs()))),pathResolver,args.srcs.get(),JavaLibraryDescription.validateResources(pathResolver,args,params.getProjectFilesystem()),args.labels.get(),args.contacts.get(),args.proguardConfig,additionalClasspathEntries,javacOptions,vmArgs,JavaTestDescription.validateAndGetSourcesUnderTest(args.sourceUnderTest.get(),params.getBuildTarget(),resolver),args.resourcesRoot,dummyRDotJava,testRuleTimeoutMs,args.getRunTestSeparately());
}
