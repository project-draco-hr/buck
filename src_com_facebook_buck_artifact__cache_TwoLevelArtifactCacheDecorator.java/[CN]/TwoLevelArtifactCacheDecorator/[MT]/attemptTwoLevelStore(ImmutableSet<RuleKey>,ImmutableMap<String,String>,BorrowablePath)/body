{
  ListenableFuture<Optional<String>> contentHash=Futures.transformAsync(Futures.<Void>immediateFuture(null),new AsyncFunction<Void,Optional<String>>(){
    @Override public ListenableFuture<Optional<String>> apply(    Void input) throws Exception {
      long fileSize=projectFilesystem.getFileSize(output.getPath());
      if (!performTwoLevelStores || fileSize < minimumTwoLevelStoredArtifactSize || (maximumTwoLevelStoredArtifactSize.isPresent() && fileSize > maximumTwoLevelStoredArtifactSize.get())) {
        return Futures.immediateFuture(Optional.<String>absent());
      }
      long hashComputationStart=System.currentTimeMillis();
      String hashCode=projectFilesystem.computeSha1(output.getPath()) + "2c00";
      long hashComputationEnd=System.currentTimeMillis();
      secondLevelHashComputationTimeMs.addSample(hashComputationEnd - hashComputationStart);
      return Futures.transform(delegate.store(ImmutableSet.of(new RuleKey(hashCode)),ImmutableMap.<String,String>of(),output),Functions.constant(Optional.of(hashCode)));
    }
  }
,listeningExecutorService);
  return Futures.transformAsync(contentHash,new AsyncFunction<Optional<String>,Boolean>(){
    @Override public ListenableFuture<Boolean> apply(    Optional<String> contentHash) throws Exception {
      if (!contentHash.isPresent()) {
        return Futures.immediateFuture(false);
      }
      ImmutableMap<String,String> metadataWithCacheKey=ImmutableMap.<String,String>builder().putAll(metadata).put(METADATA_KEY,contentHash.get()).build();
      return Futures.transform(delegate.store(ruleKeys,metadataWithCacheKey,BorrowablePath.notBorrowablePath(emptyFilePath)),Functions.constant(true));
    }
  }
,listeningExecutorService);
}
