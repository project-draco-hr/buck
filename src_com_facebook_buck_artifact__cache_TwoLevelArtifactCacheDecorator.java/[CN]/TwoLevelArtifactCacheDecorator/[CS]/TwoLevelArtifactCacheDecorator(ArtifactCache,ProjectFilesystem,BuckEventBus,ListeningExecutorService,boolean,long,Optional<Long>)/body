{
  this.delegate=delegate;
  this.projectFilesystem=projectFilesystem;
  this.listeningExecutorService=listeningExecutorService;
  this.performTwoLevelStores=performTwoLevelStores;
  this.minimumTwoLevelStoredArtifactSize=minimumTwoLevelStoredArtifactSize;
  this.maximumTwoLevelStoredArtifactSize=maximumTwoLevelStoredArtifactSize;
  try {
    projectFilesystem.mkdirs(BuckConstant.SCRATCH_PATH);
    this.emptyFilePath=projectFilesystem.resolve(projectFilesystem.createTempFile(BuckConstant.SCRATCH_PATH,".buckcache",".empty"));
  }
 catch (  IOException e) {
    throw new HumanReadableException("Could not create file in " + projectFilesystem.resolve(BuckConstant.SCRATCH_PATH));
  }
  secondLevelCacheHitTypes=new TagSetCounter(COUNTER_CATEGORY,"second_level_cache_hit_types",ImmutableMap.<String,String>of());
  secondLevelCacheHitBytes=new SamplingCounter(COUNTER_CATEGORY,"second_level_cache_hit_bytes",ImmutableMap.<String,String>of());
  secondLevelCacheMisses=new IntegerCounter(COUNTER_CATEGORY,"second_level_cache_misses",ImmutableMap.<String,String>of());
  secondLevelHashComputationTimeMs=new SamplingCounter(COUNTER_CATEGORY,"second_level_hash_computation_time_ms",ImmutableMap.<String,String>of());
  buckEventBus.post(new CounterRegistry.AsyncCounterRegistrationEvent(ImmutableSet.of(secondLevelCacheHitTypes,secondLevelCacheHitBytes,secondLevelCacheMisses,secondLevelHashComputationTimeMs)));
}
