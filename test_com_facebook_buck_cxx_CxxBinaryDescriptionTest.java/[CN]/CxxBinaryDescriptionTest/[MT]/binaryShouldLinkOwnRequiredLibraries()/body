{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  CxxPlatform platform=CxxLibraryBuilder.createDefaultPlatform();
  CxxBinaryBuilder binaryBuilder=new CxxBinaryBuilder(BuildTargetFactory.newInstance("//:foo").withFlavors(platform.getFlavor(),ImmutableFlavor.of("shared")));
  binaryBuilder.setLibraries(ImmutableSortedSet.of(FrameworkPath.ofSourcePath(new FakeSourcePath("/some/path/libs.dylib")),FrameworkPath.ofSourcePath(new FakeSourcePath("/another/path/liba.dylib")))).setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("foo.c"))));
  TargetGraph targetGraph=TargetGraphFactory.newInstance(binaryBuilder.build());
  BuildRuleResolver resolver=new BuildRuleResolver(targetGraph,new DefaultTargetNodeToBuildRuleTransformer());
  CxxBinary binary=(CxxBinary)binaryBuilder.build(resolver,filesystem,targetGraph);
  assertThat(binary.getLinkRule(),Matchers.instanceOf(CxxLink.class));
  assertThat(Arg.stringify(((CxxLink)binary.getLinkRule()).getArgs()),Matchers.hasItems("-L","/another/path","/some/path","-la","-ls"));
}
