{
  ProjectFilesystem projectFilesystem=new FakeProjectFilesystem();
  CxxPlatform cxxPlatform=CxxBinaryBuilder.createDefaultPlatform();
  String genHeaderName="test/foo.h";
  BuildTarget genHeaderTarget=BuildTargetFactory.newInstance("//:genHeader");
  GenruleBuilder genHeaderBuilder=GenruleBuilder.newGenruleBuilder(genHeaderTarget).setOut(genHeaderName);
  String genSourceName="test/foo.cpp";
  BuildTarget genSourceTarget=BuildTargetFactory.newInstance("//:genSource");
  GenruleBuilder genSourceBuilder=GenruleBuilder.newGenruleBuilder(genSourceTarget).setOut(genSourceName);
  BuildTarget depTarget=BuildTargetFactory.newInstance("//:dep");
  CxxLibraryBuilder depBuilder=new CxxLibraryBuilder(depTarget).setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("test.cpp"))));
  BuildTarget archiveTarget=BuildTarget.builder(depTarget).addFlavors(CxxDescriptionEnhancer.STATIC_FLAVOR).addFlavors(cxxPlatform.getFlavor()).build();
  BuildTarget headerSymlinkTreeTarget=BuildTarget.builder(depTarget).addFlavors(CxxDescriptionEnhancer.EXPORTED_HEADER_SYMLINK_TREE_FLAVOR).addFlavors(cxxPlatform.getFlavor()).build();
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  CxxBinaryBuilder cxxBinaryBuilder=new CxxBinaryBuilder(target).setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("test/bar.cpp")),SourceWithFlags.of(new BuildTargetSourcePath(genSourceTarget)))).setHeaders(ImmutableSortedSet.<SourcePath>of(new FakeSourcePath("test/bar.h"),new BuildTargetSourcePath(genHeaderTarget))).setDeps(ImmutableSortedSet.of(depTarget));
  TargetGraph targetGraph=TargetGraphFactory.newInstance(genHeaderBuilder.build(),genSourceBuilder.build(),depBuilder.build(),cxxBinaryBuilder.build());
  BuildRuleResolver resolver=new BuildRuleResolver(targetGraph,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  genHeaderBuilder.build(resolver,projectFilesystem,targetGraph);
  genSourceBuilder.build(resolver,projectFilesystem,targetGraph);
  depBuilder.build(resolver,projectFilesystem,targetGraph);
  CxxBinary binRule=(CxxBinary)cxxBinaryBuilder.build(resolver,projectFilesystem,targetGraph);
  CxxLink rule=binRule.getRule();
  CxxSourceRuleFactory cxxSourceRuleFactory=new CxxSourceRuleFactory(cxxBinaryBuilder.createBuildRuleParams(resolver,projectFilesystem),resolver,pathResolver,cxxPlatform,ImmutableList.<CxxPreprocessorInput>of(),ImmutableList.<String>of(),Optional.<SourcePath>absent(),CxxSourceRuleFactory.PicType.PDC);
  assertEquals(ImmutableSet.of(cxxSourceRuleFactory.createCompileBuildTarget("test/bar.cpp"),cxxSourceRuleFactory.createCompileBuildTarget(genSourceName),archiveTarget),FluentIterable.from(rule.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule preprocessRule1=resolver.getRule(cxxSourceRuleFactory.createPreprocessBuildTarget("test/bar.cpp",CxxSource.Type.CXX));
  assertEquals(ImmutableSet.of(genHeaderTarget,headerSymlinkTreeTarget,CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target,cxxPlatform.getFlavor(),HeaderVisibility.PRIVATE)),FluentIterable.from(preprocessRule1.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule compileRule1=resolver.getRule(cxxSourceRuleFactory.createCompileBuildTarget("test/bar.cpp"));
  assertNotNull(compileRule1);
  assertEquals(ImmutableSet.of(preprocessRule1.getBuildTarget()),FluentIterable.from(compileRule1.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule preprocessRule2=resolver.getRule(cxxSourceRuleFactory.createPreprocessBuildTarget(genSourceName,CxxSource.Type.CXX));
  assertEquals(ImmutableSet.of(genHeaderTarget,genSourceTarget,headerSymlinkTreeTarget,CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target,cxxPlatform.getFlavor(),HeaderVisibility.PRIVATE)),FluentIterable.from(preprocessRule2.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule compileRule2=resolver.getRule(cxxSourceRuleFactory.createCompileBuildTarget(genSourceName));
  assertNotNull(compileRule2);
  assertEquals(ImmutableSet.of(preprocessRule2.getBuildTarget()),FluentIterable.from(compileRule2.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
}
