{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  BuildTarget leafBinaryTarget=BuildTargetFactory.newInstance("//:dep");
  CxxBinaryBuilder leafCxxBinaryBuilder=new CxxBinaryBuilder(leafBinaryTarget);
  BuildTarget libraryTarget=BuildTargetFactory.newInstance("//:lib");
  CxxLibraryBuilder cxxLibraryBuilder=new CxxLibraryBuilder(libraryTarget).setDeps(ImmutableSortedSet.of(leafBinaryTarget));
  BuildTarget topLevelBinaryTarget=BuildTargetFactory.newInstance("//:bin");
  CxxBinaryBuilder topLevelCxxBinaryBuilder=new CxxBinaryBuilder(topLevelBinaryTarget).setDeps(ImmutableSortedSet.of(libraryTarget));
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraphFactory.newInstance(leafCxxBinaryBuilder.build(),cxxLibraryBuilder.build(),topLevelCxxBinaryBuilder.build()),new BuildTargetNodeToBuildRuleTransformer());
  BuildRule leafCxxBinary=leafCxxBinaryBuilder.build(resolver,filesystem);
  cxxLibraryBuilder.build(resolver,filesystem);
  CxxBinary topLevelCxxBinary=(CxxBinary)topLevelCxxBinaryBuilder.build(resolver,filesystem);
  assertThat(BuildRules.getTransitiveRuntimeDeps(topLevelCxxBinary),Matchers.hasItem(leafCxxBinary));
}
