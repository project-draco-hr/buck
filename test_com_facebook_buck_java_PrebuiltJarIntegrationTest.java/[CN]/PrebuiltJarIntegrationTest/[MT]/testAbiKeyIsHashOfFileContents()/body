{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"prebuilt",temp);
  workspace.setUp();
  ProjectWorkspace.ProcessResult result=workspace.runBuckBuild("//:jar");
  result.assertSuccess();
  BuildRuleEvent.Finished finished=getRuleFinished(result.getCapturedEvents());
  assertEquals(CacheResultType.MISS,finished.getCacheResult().getType());
  result=workspace.runBuckBuild("//:jar");
  result.assertSuccess();
  finished=getRuleFinished(result.getCapturedEvents());
  assertEquals(CacheResultType.LOCAL_KEY_UNCHANGED_HIT,finished.getCacheResult().getType());
  Path binaryJar=workspace.getPath("junit.jar");
  HashCode originalHash=MorePaths.asByteSource(binaryJar).hash(Hashing.sha1());
  Path expectedOut=BuildTargets.getGenPath(BuildTargetFactory.newInstance("//:jar"),"%s-abi.jar");
  Path abiJar=workspace.getPath(expectedOut.toString());
  HashCode abiHash=MorePaths.asByteSource(abiJar).hash(Hashing.sha1());
  assertTrue(Files.exists(abiJar));
  assertNotEquals(originalHash,abiHash);
}
