{
  List<ListenableFuture<Void>> storeFutures=Lists.newArrayListWithExpectedSize(writableArtifactCaches.size());
  for (  ArtifactCache artifactCache : writableArtifactCaches) {
    if (output.canBorrow() && artifactCache.equals(writableArtifactCaches.get(writableArtifactCaches.size() - 1))) {
      output=BorrowablePath.borrowablePath(output.getPath());
    }
 else {
      output=BorrowablePath.notBorrowablePath(output.getPath());
    }
    storeFutures.add(artifactCache.store(info,output));
  }
  return Futures.transform(Futures.allAsList(storeFutures),Functions.<Void>constant(null));
}
