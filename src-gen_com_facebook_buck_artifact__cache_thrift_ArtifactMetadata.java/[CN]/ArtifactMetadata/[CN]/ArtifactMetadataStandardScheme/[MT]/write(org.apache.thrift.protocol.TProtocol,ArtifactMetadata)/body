{
  struct.validate();
  oprot.writeStructBegin(STRUCT_DESC);
  if (struct.ruleKeys != null) {
    if (struct.isSetRuleKeys()) {
      oprot.writeFieldBegin(RULE_KEYS_FIELD_DESC);
{
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,struct.ruleKeys.size()));
        for (        RuleKey _iter7 : struct.ruleKeys) {
          _iter7.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
  }
  if (struct.metadata != null) {
    if (struct.isSetMetadata()) {
      oprot.writeFieldBegin(METADATA_FIELD_DESC);
{
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING,org.apache.thrift.protocol.TType.STRING,struct.metadata.size()));
        for (        Map.Entry<String,String> _iter8 : struct.metadata.entrySet()) {
          oprot.writeString(_iter8.getKey());
          oprot.writeString(_iter8.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
  }
  if (struct.buildTarget != null) {
    if (struct.isSetBuildTarget()) {
      oprot.writeFieldBegin(BUILD_TARGET_FIELD_DESC);
      oprot.writeString(struct.buildTarget);
      oprot.writeFieldEnd();
    }
  }
  if (struct.repository != null) {
    if (struct.isSetRepository()) {
      oprot.writeFieldBegin(REPOSITORY_FIELD_DESC);
      oprot.writeString(struct.repository);
      oprot.writeFieldEnd();
    }
  }
  if (struct.artifactPayloadCrc32 != null) {
    if (struct.isSetArtifactPayloadCrc32()) {
      oprot.writeFieldBegin(ARTIFACT_PAYLOAD_CRC32_FIELD_DESC);
      oprot.writeString(struct.artifactPayloadCrc32);
      oprot.writeFieldEnd();
    }
  }
  if (struct.scheduleType != null) {
    if (struct.isSetScheduleType()) {
      oprot.writeFieldBegin(SCHEDULE_TYPE_FIELD_DESC);
      oprot.writeString(struct.scheduleType);
      oprot.writeFieldEnd();
    }
  }
  oprot.writeFieldStop();
  oprot.writeStructEnd();
}
