{
  org.apache.thrift.protocol.TField schemeField;
  iprot.readStructBegin();
  while (true) {
    schemeField=iprot.readFieldBegin();
    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
      break;
    }
switch (schemeField.id) {
case 1:
      if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
{
          org.apache.thrift.protocol.TList _list0=iprot.readListBegin();
          struct.ruleKeys=new ArrayList<RuleKey>(_list0.size);
          RuleKey _elem1;
          for (int _i2=0; _i2 < _list0.size; ++_i2) {
            _elem1=new RuleKey();
            _elem1.read(iprot);
            struct.ruleKeys.add(_elem1);
          }
          iprot.readListEnd();
        }
        struct.setRuleKeysIsSet(true);
      }
 else {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
      }
    break;
case 2:
  if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
{
      org.apache.thrift.protocol.TMap _map3=iprot.readMapBegin();
      struct.metadata=new HashMap<String,String>(2 * _map3.size);
      String _key4;
      String _val5;
      for (int _i6=0; _i6 < _map3.size; ++_i6) {
        _key4=iprot.readString();
        _val5=iprot.readString();
        struct.metadata.put(_key4,_val5);
      }
      iprot.readMapEnd();
    }
    struct.setMetadataIsSet(true);
  }
 else {
    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
  }
break;
case 3:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.buildTarget=iprot.readString();
struct.setBuildTargetIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 4:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.repository=iprot.readString();
struct.setRepositoryIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 5:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.artifactPayloadCrc32=iprot.readString();
struct.setArtifactPayloadCrc32IsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
case 6:
if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
struct.scheduleType=iprot.readString();
struct.setScheduleTypeIsSet(true);
}
 else {
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
break;
default :
org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
struct.validate();
}
