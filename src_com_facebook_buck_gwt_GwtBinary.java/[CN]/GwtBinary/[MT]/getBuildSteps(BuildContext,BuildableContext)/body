{
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  Path workingDirectory=getPathToOutputFile().getParent();
  steps.add(new MakeCleanDirectoryStep(workingDirectory));
  final Path deployDirectory=workingDirectory.resolve("deploy");
  steps.add(new MkdirStep(deployDirectory));
  Step javaStep=new ShellStep(){
    @Override public String getShortName(){
      return "gwt-compile";
    }
    @Override protected ImmutableList<String> getShellCommandInternal(    ExecutionContext context){
      ProjectFilesystem projectFilesystem=context.getProjectFilesystem();
      ImmutableList.Builder<String> javaArgsBuilder=ImmutableList.builder();
      javaArgsBuilder.add("java");
      javaArgsBuilder.add("-Dgwt.normalizeTimestamps=true");
      javaArgsBuilder.addAll(vmArgs);
      javaArgsBuilder.add("-classpath",Joiner.on(File.pathSeparator).join(Iterables.transform(getClasspathEntries(),projectFilesystem.getAbsolutifier())),GWT_COMPILER_CLASS,"-war",projectFilesystem.resolve(getPathToOutputFile()).toString(),"-style",style.name(),"-optimize",String.valueOf(optimize),"-localWorkers",String.valueOf(localWorkers),"-deploy",projectFilesystem.resolve(deployDirectory).toString());
      if (draftCompile) {
        javaArgsBuilder.add("-draftCompile");
      }
      if (strict) {
        javaArgsBuilder.add("-strict");
      }
      javaArgsBuilder.addAll(experimentalArgs);
      javaArgsBuilder.addAll(modules);
      final ImmutableList<String> javaArgs=javaArgsBuilder.build();
      return javaArgs;
    }
  }
;
  steps.add(javaStep);
  buildableContext.recordArtifact(getPathToOutputFile());
  return steps.build();
}
