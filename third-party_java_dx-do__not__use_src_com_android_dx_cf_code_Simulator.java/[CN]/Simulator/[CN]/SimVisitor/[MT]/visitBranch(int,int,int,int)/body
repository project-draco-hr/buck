{
switch (opcode) {
case ByteOps.IFEQ:
case ByteOps.IFNE:
case ByteOps.IFLT:
case ByteOps.IFGE:
case ByteOps.IFGT:
case ByteOps.IFLE:
{
      machine.popArgs(frame,Type.INT);
      break;
    }
case ByteOps.IFNULL:
case ByteOps.IFNONNULL:
{
    machine.popArgs(frame,Type.OBJECT);
    break;
  }
case ByteOps.IF_ICMPEQ:
case ByteOps.IF_ICMPNE:
case ByteOps.IF_ICMPLT:
case ByteOps.IF_ICMPGE:
case ByteOps.IF_ICMPGT:
case ByteOps.IF_ICMPLE:
{
  machine.popArgs(frame,Type.INT,Type.INT);
  break;
}
case ByteOps.IF_ACMPEQ:
case ByteOps.IF_ACMPNE:
{
machine.popArgs(frame,Type.OBJECT,Type.OBJECT);
break;
}
case ByteOps.GOTO:
case ByteOps.JSR:
case ByteOps.GOTO_W:
case ByteOps.JSR_W:
{
machine.clearArgs();
break;
}
default :
{
visitInvalid(opcode,offset,length);
return;
}
}
machine.auxTargetArg(target);
machine.run(frame,offset,opcode);
}
