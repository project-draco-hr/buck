{
  int sz=values.size();
  out.writeShort(Opcodes.FILL_ARRAY_DATA_PAYLOAD);
  out.writeShort(elemWidth);
  out.writeInt(initLength);
switch (elemWidth) {
case 1:
{
      for (int i=0; i < sz; i++) {
        Constant cst=values.get(i);
        out.writeByte((byte)((CstLiteral32)cst).getIntBits());
      }
      break;
    }
case 2:
{
    for (int i=0; i < sz; i++) {
      Constant cst=values.get(i);
      out.writeShort((short)((CstLiteral32)cst).getIntBits());
    }
    break;
  }
case 4:
{
  for (int i=0; i < sz; i++) {
    Constant cst=values.get(i);
    out.writeInt(((CstLiteral32)cst).getIntBits());
  }
  break;
}
case 8:
{
for (int i=0; i < sz; i++) {
  Constant cst=values.get(i);
  out.writeLong(((CstLiteral64)cst).getLongBits());
}
break;
}
default :
break;
}
if (elemWidth == 1 && (sz % 2 != 0)) {
out.writeByte(0x00);
}
}
