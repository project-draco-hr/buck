{
  ImmutableList.Builder<Step> stepsBuilder=ImmutableList.builder();
  ImmutableList<String> archiveCommandPrefix=ImmutableList.<String>builder().addAll(archiver).add("rcs").add(output.toString()).build();
  CommandSplitter commandSplitter=new CommandSplitter(archiveCommandPrefix);
  Iterable<String> arguments=FluentIterable.from(inputs).transform(Functions.toStringFunction());
  for (  final ImmutableList<String> command : commandSplitter.getCommandsForArguments(arguments)) {
    stepsBuilder.add(new ShellStep(workingDirectory){
      @Override public String getShortName(){
        return "archive";
      }
      @Override protected ImmutableList<String> getShellCommandInternal(      ExecutionContext context){
        return command;
      }
      @Override public ImmutableMap<String,String> getEnvironmentVariables(      ExecutionContext context){
        return environment;
      }
    }
);
  }
  return stepsBuilder.build();
}
