{
  Path primaryDexClassesFile=Paths.get("the/manifest.txt");
  SplitZipStep splitZipStep=new SplitZipStep(ImmutableSet.<String>of(),"","","","",Optional.<Path>absent(),ImmutableSet.of("List"),Optional.of(primaryDexClassesFile),ZipSplitter.DexSplitStrategy.MAXIMIZE_PRIMARY_DEX_SIZE,DexStore.JAR,"",true,4 * 1024 * 1024);
  List<String> linesInManifestFile=ImmutableList.of("com/google/common/collect/ImmutableSortedSet","  com/google/common/collect/ImmutableSet","# com/google/common/collect/ImmutableMap");
  ProjectFilesystem projectFilesystem=EasyMock.createMock(ProjectFilesystem.class);
  EasyMock.expect(projectFilesystem.readLines(primaryDexClassesFile)).andReturn(linesInManifestFile);
  ExecutionContext context=EasyMock.createMock(ExecutionContext.class);
  EasyMock.expect(context.getProjectFilesystem()).andReturn(projectFilesystem);
  EasyMock.replay(projectFilesystem,context);
  Predicate<String> requiredInPrimaryZipPredicate=splitZipStep.createRequiredInPrimaryZipPredicate(context);
  assertTrue("All non-.class files should be accepted.",requiredInPrimaryZipPredicate.apply("apples.txt"));
  assertTrue("com/google/common/collect/ImmutableSortedSet.class is listed in the manifest verbatim.",requiredInPrimaryZipPredicate.apply("com/google/common/collect/ImmutableSortedSet.class"));
  assertTrue("com/google/common/collect/ImmutableSet.class is in the manifest with whitespace.",requiredInPrimaryZipPredicate.apply("com/google/common/collect/ImmutableSet.class"));
  assertFalse("com/google/common/collect/ImmutableSet.class cannot have whitespace as param.",requiredInPrimaryZipPredicate.apply("  com/google/common/collect/ImmutableSet.class"));
  assertFalse("com/google/common/collect/ImmutableMap.class is commented out.",requiredInPrimaryZipPredicate.apply("com/google/common/collect/ImmutableMap.class"));
  assertFalse("com/google/common/collect/Iterables.class is not even mentioned.",requiredInPrimaryZipPredicate.apply("com/google/common/collect/Iterables.class"));
  assertTrue("java/awt/List.class matches the substring 'List'.",requiredInPrimaryZipPredicate.apply("java/awt/List.class"));
  assertFalse("Substring matching is case-sensitive.",requiredInPrimaryZipPredicate.apply("shiny/Glistener.class"));
  EasyMock.verify(projectFilesystem,context);
}
