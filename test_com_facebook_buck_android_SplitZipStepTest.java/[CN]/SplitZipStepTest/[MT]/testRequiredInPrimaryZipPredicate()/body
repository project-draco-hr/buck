{
  Path primaryDexClassesFile=Paths.get("the/manifest.txt");
  List<String> linesInManifestFile=ImmutableList.of("com/google/common/collect/ImmutableSortedSet","  com/google/common/collect/ImmutableSet","# com/google/common/collect/ImmutableMap");
  ProjectFilesystem projectFilesystem=EasyMock.createMock(ProjectFilesystem.class);
  EasyMock.expect(projectFilesystem.readLines(primaryDexClassesFile)).andReturn(linesInManifestFile);
  EasyMock.replay(projectFilesystem);
  SplitZipStep splitZipStep=new SplitZipStep(projectFilesystem,ImmutableSet.<Path>of(),Paths.get(""),Paths.get(""),Paths.get(""),"",Optional.<Path>absent(),Optional.<Path>absent(),new DexSplitMode(true,ZipSplitter.DexSplitStrategy.MAXIMIZE_PRIMARY_DEX_SIZE,DexStore.JAR,true,4 * 1024 * 1024,ImmutableSet.of("List"),Optional.<SourcePath>of(new FakeSourcePath("the/manifest.txt")),Optional.<SourcePath>absent(),false,Optional.<SourcePath>absent(),Optional.<SourcePath>absent()),Optional.<Path>absent(),Optional.of(Paths.get("the/manifest.txt")),Optional.<Path>absent(),Optional.<Path>absent(),Paths.get(""));
  Predicate<String> requiredInPrimaryZipPredicate=splitZipStep.createRequiredInPrimaryZipPredicate(ProguardTranslatorFactory.createForTest(Optional.<Map<String,String>>absent()),Suppliers.ofInstance(ImmutableList.<ClassNode>of()));
  assertTrue("com/google/common/collect/ImmutableSortedSet.class is listed in the manifest verbatim.",requiredInPrimaryZipPredicate.apply("com/google/common/collect/ImmutableSortedSet.class"));
  assertTrue("com/google/common/collect/ImmutableSet.class is in the manifest with whitespace.",requiredInPrimaryZipPredicate.apply("com/google/common/collect/ImmutableSet.class"));
  assertFalse("com/google/common/collect/ImmutableSet.class cannot have whitespace as param.",requiredInPrimaryZipPredicate.apply("  com/google/common/collect/ImmutableSet.class"));
  assertFalse("com/google/common/collect/ImmutableMap.class is commented out.",requiredInPrimaryZipPredicate.apply("com/google/common/collect/ImmutableMap.class"));
  assertFalse("com/google/common/collect/Iterables.class is not even mentioned.",requiredInPrimaryZipPredicate.apply("com/google/common/collect/Iterables.class"));
  assertTrue("java/awt/List.class matches the substring 'List'.",requiredInPrimaryZipPredicate.apply("java/awt/List.class"));
  assertFalse("Substring matching is case-sensitive.",requiredInPrimaryZipPredicate.apply("shiny/Glistener.class"));
  EasyMock.verify(projectFilesystem);
}
