{
  Path proguardConfigFile=Paths.get("the/configuration.txt");
  Path proguardMappingFile=Paths.get("the/mapping.txt");
  SplitZipStep splitZipStep=new SplitZipStep(ImmutableSet.<Path>of(),Paths.get(""),Paths.get(""),Paths.get(""),"",Optional.of(proguardConfigFile),Optional.of(proguardMappingFile),new DexSplitMode(true,ZipSplitter.DexSplitStrategy.MAXIMIZE_PRIMARY_DEX_SIZE,DexStore.JAR,true,4 * 1024 * 1024,ImmutableSet.of("primary"),Optional.<SourcePath>absent(),Optional.<SourcePath>absent(),false,Optional.<SourcePath>absent(),Optional.<SourcePath>absent()),Optional.<Path>absent(),Optional.<Path>absent(),Optional.<Path>absent(),Optional.<Path>absent(),Paths.get(""));
  ProjectFilesystem projectFilesystem=EasyMock.createMock(ProjectFilesystem.class);
  EasyMock.expect(projectFilesystem.readLines(proguardConfigFile)).andReturn(ImmutableList.<String>of("-dontobfuscate"));
  ExecutionContext context=EasyMock.createMock(ExecutionContext.class);
  EasyMock.expect(context.getProjectFilesystem()).andReturn(projectFilesystem).anyTimes();
  EasyMock.replay(projectFilesystem,context);
  ProguardTranslatorFactory translatorFactory=ProguardTranslatorFactory.create(context,Optional.of(proguardConfigFile),Optional.of(proguardMappingFile));
  Predicate<String> requiredInPrimaryZipPredicate=splitZipStep.createRequiredInPrimaryZipPredicate(context,translatorFactory,Suppliers.ofInstance(ImmutableList.<ClassNode>of()));
  assertTrue("Primary class should be in primary.",requiredInPrimaryZipPredicate.apply("primary.class"));
  assertFalse("Secondary class should be in secondary.",requiredInPrimaryZipPredicate.apply("secondary.class"));
  EasyMock.verify(projectFilesystem,context);
}
