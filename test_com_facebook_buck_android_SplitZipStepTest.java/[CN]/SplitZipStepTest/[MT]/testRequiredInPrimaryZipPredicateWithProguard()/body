{
  List<String> linesInMappingFile=ImmutableList.of("foo.bar.MappedPrimary -> foo.bar.a:","foo.bar.MappedSecondary -> foo.bar.b:","foo.bar.UnmappedPrimary -> foo.bar.UnmappedPrimary:","foo.bar.UnmappedSecondary -> foo.bar.UnmappedSecondary:","foo.primary.MappedPackage -> x.a:","foo.secondary.MappedPackage -> x.b:","foo.primary.UnmappedPackage -> foo.primary.UnmappedPackage:");
  List<String> linesInManifestFile=ImmutableList.of("foo/bar/MappedPrimary","foo/bar/UnmappedPrimary","foo/bar/b","x/b");
  Path proguardConfigFile=Paths.get("the/configuration.txt");
  Path proguardMappingFile=Paths.get("the/mapping.txt");
  Path primaryDexClassesFile=Paths.get("the/manifest.txt");
  ProjectFilesystem projectFilesystem=EasyMock.createMock(ProjectFilesystem.class);
  EasyMock.expect(projectFilesystem.readLines(primaryDexClassesFile)).andReturn(linesInManifestFile);
  EasyMock.expect(projectFilesystem.readLines(proguardConfigFile)).andReturn(ImmutableList.<String>of());
  EasyMock.expect(projectFilesystem.readLines(proguardMappingFile)).andReturn(linesInMappingFile);
  EasyMock.replay(projectFilesystem);
  SplitZipStep splitZipStep=new SplitZipStep(projectFilesystem,ImmutableSet.<Path>of(),Paths.get(""),Paths.get(""),Paths.get(""),"",Paths.get(""),Paths.get(""),Optional.of(proguardConfigFile),Optional.of(proguardMappingFile),new DexSplitMode(true,ZipSplitter.DexSplitStrategy.MAXIMIZE_PRIMARY_DEX_SIZE,DexStore.JAR,true,4 * 1024 * 1024,ImmutableSet.of("/primary/","x/"),Optional.<SourcePath>of(new FakeSourcePath("the/manifest.txt")),Optional.<SourcePath>absent(),false,Optional.<SourcePath>absent(),Optional.<SourcePath>absent()),Optional.<Path>absent(),Optional.of(Paths.get("the/manifest.txt")),Optional.<Path>absent(),Optional.<Path>absent(),ImmutableMultimap.<APKModule,Path>of(),new APKModuleGraph(null,null,null),Paths.get(""));
  ProguardTranslatorFactory translatorFactory=ProguardTranslatorFactory.create(projectFilesystem,Optional.of(proguardConfigFile),Optional.of(proguardMappingFile));
  Predicate<String> requiredInPrimaryZipPredicate=splitZipStep.createRequiredInPrimaryZipPredicate(translatorFactory,Suppliers.ofInstance(ImmutableList.<ClassNode>of()));
  assertTrue("Mapped class from primary list should be in primary.",requiredInPrimaryZipPredicate.apply("foo/bar/a.class"));
  assertTrue("Unmapped class from primary list should be in primary.",requiredInPrimaryZipPredicate.apply("foo/bar/UnmappedPrimary.class"));
  assertTrue("Mapped class from substring should be in primary.",requiredInPrimaryZipPredicate.apply("x/a.class"));
  assertTrue("Unmapped class from substring should be in primary.",requiredInPrimaryZipPredicate.apply("foo/primary/UnmappedPackage.class"));
  assertFalse("Mapped class with obfuscated name match should not be in primary.",requiredInPrimaryZipPredicate.apply("foo/bar/b.class"));
  assertFalse("Unmapped class name should not randomly be in primary.",requiredInPrimaryZipPredicate.apply("foo/bar/UnmappedSecondary.class"));
  assertFalse("Map class with obfuscated name substring should not be in primary.",requiredInPrimaryZipPredicate.apply("x/b.class"));
  EasyMock.verify(projectFilesystem);
}
