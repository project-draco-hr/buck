{
  byte[] magic=ObjectFileScrubbers.getBytes(map,MH_MAGIC.length);
  boolean is64bit;
  if (Arrays.equals(MH_MAGIC,magic) || Arrays.equals(MH_CIGAM,magic)) {
    is64bit=false;
  }
 else   if (Arrays.equals(MH_MAGIC_64,magic) || Arrays.equals(MH_CIGAM_64,magic)) {
    is64bit=true;
  }
 else {
    throw new ScrubException("invalid Mach-O magic");
  }
  ObjectFileScrubbers.getBytes(map,4);
  ObjectFileScrubbers.getBytes(map,4);
  ObjectFileScrubbers.getBytes(map,4);
  int commandsCount=ObjectFileScrubbers.getLittleEndian32BitLong(map);
  ObjectFileScrubbers.getLittleEndian32BitLong(map);
  ObjectFileScrubbers.getBytes(map,4);
  if (is64bit) {
    ObjectFileScrubbers.getBytes(map,4);
  }
  for (int i=0; i < commandsCount; i++) {
    int command=ObjectFileScrubbers.getLittleEndian32BitLong(map);
    int commandSize=ObjectFileScrubbers.getLittleEndian32BitLong(map);
    if (LC_UUID == command) {
      ObjectFileScrubbers.putBytes(map,uuid);
      return;
    }
 else {
      ObjectFileScrubbers.getBytes(map,commandSize - 8);
    }
  }
  throw new ScrubException("LC_UUID command not found");
}
