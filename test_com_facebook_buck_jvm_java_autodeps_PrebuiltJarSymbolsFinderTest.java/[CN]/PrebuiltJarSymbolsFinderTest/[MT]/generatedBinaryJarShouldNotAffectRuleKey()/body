{
  SourcePathResolver pathResolver=null;
  File jarFile=new File(tmp.getRoot(),"common.jar");
  Map<Path,HashCode> pathsToHashes=ImmutableMap.of(jarFile.toPath(),HashCode.fromString(Strings.repeat("abcd",10)));
  FakeFileHashCache fileHashCache=new FakeFileHashCache(pathsToHashes);
  JavaSymbolsRule javaSymbolsRule1=new JavaSymbolsRule(BuildTargetFactory.newInstance("//foo:rule"),createFinderForGeneratedJar("//foo:jar_genrule1"),ImmutableSortedSet.<String>of(),ObjectMappers.newDefaultInstance(),new ProjectFilesystem(tmp.getRootPath()));
  RuleKey key1=new DefaultRuleKeyBuilderFactory(0,fileHashCache,pathResolver).newInstance(javaSymbolsRule1).build();
  JavaSymbolsRule javaSymbolsRule2=new JavaSymbolsRule(BuildTargetFactory.newInstance("//foo:rule"),createFinderForGeneratedJar("//foo:jar_genrule2"),ImmutableSortedSet.<String>of(),ObjectMappers.newDefaultInstance(),new ProjectFilesystem(tmp.getRootPath()));
  RuleKey key2=new DefaultRuleKeyBuilderFactory(0,fileHashCache,pathResolver).newInstance(javaSymbolsRule2).build();
  assertNotNull(key1);
  assertNotNull(key2);
  assertEquals("Keys should match even though different BuildTargetSourcePaths are used.",key1,key2);
}
