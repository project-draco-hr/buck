{
  if (!recursive) {
    function.apply(basePath.resolve(BuckConstant.BUILD_RULES_FILE_NAME));
    return;
  }
  filesystem.walkRelativeFileTree(basePath,new FileVisitor<Path>(){
    @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attrs) throws IOException {
      if (recursiveIgnorePaths.contains(dir)) {
        return FileVisitResult.SKIP_SUBTREE;
      }
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      if (BuckConstant.BUILD_RULES_FILE_NAME.equals(file.getFileName().toString())) {
        function.apply(file);
      }
      return FileVisitResult.CONTINUE;
    }
    @Override public FileVisitResult visitFileFailed(    Path file,    IOException exc) throws IOException {
      throw exc;
    }
    @Override public FileVisitResult postVisitDirectory(    Path dir,    IOException exc) throws IOException {
      if (exc != null) {
        throw exc;
      }
      return FileVisitResult.CONTINUE;
    }
  }
);
}
