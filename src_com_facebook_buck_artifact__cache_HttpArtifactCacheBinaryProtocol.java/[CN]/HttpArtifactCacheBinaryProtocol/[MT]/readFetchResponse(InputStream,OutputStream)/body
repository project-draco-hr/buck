{
  FetchResponseReadResult.Builder result=FetchResponseReadResult.builder();
  Hasher hasher=HASH_FUNCTION.newHasher();
  try (DataInputStream input=new DataInputStream(byteStream)){
    int metadataSize=input.readInt();
    byte[] rawMetadata=new byte[metadataSize];
    ByteStreams.readFully(input,rawMetadata);
    try (InputStream rawMetadataIn=new ByteArrayInputStream(rawMetadata)){
      try (DataInputStream metadataIn=new DataInputStream(new HasherInputStream(hasher,rawMetadataIn))){
        int size=metadataIn.readInt();
        for (int i=0; i < size; i++) {
          result.addRuleKeys(new RuleKey(metadataIn.readUTF()));
        }
        size=metadataIn.readInt();
        for (int i=0; i < size; i++) {
          String key=metadataIn.readUTF();
          int valSize=metadataIn.readInt();
          byte[] val=new byte[valSize];
          ByteStreams.readFully(metadataIn,val);
          result.putMetadata(key,new String(val,Charsets.UTF_8));
        }
      }
       byte[] hashCodeBytes=new byte[HASH_FUNCTION.bits() / Byte.SIZE];
      ByteStreams.readFully(rawMetadataIn,hashCodeBytes);
      result.setExpectedHashCode(HashCode.fromBytes(hashCodeBytes));
    }
     Hasher artifactOnlyHasher=HASH_FUNCTION.newHasher();
    try (InputStream payload=new HasherInputStream(artifactOnlyHasher,new HasherInputStream(hasher,byteStream))){
      result.setResponseSizeBytes(ByteStreams.copy(payload,payloadSink));
      result.setArtifactOnlyHashCode(artifactOnlyHasher.hash());
    }
     result.setActualHashCode(hasher.hash());
  }
   return result.build();
}
