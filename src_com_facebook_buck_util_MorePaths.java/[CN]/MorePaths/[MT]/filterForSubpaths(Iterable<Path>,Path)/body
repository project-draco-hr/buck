{
  final Path normalizedRoot=root.toAbsolutePath().normalize();
  return FluentIterable.from(paths).filter(new Predicate<Path>(){
    @Override public boolean apply(    Path input){
      if (input.isAbsolute()) {
        return input.normalize().startsWith(normalizedRoot);
      }
 else {
        return true;
      }
    }
  }
).transform(new Function<Path,Path>(){
    @Override public Path apply(    Path input){
      if (input.isAbsolute()) {
        return normalizedRoot.relativize(input.normalize());
      }
 else {
        return input;
      }
    }
  }
).toSet();
}
