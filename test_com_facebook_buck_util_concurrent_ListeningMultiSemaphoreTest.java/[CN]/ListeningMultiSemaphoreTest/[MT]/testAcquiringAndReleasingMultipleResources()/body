{
  ResourceAmounts values=amountsOfCpuAndMemory(7,7);
  ListeningMultiSemaphore array=new ListeningMultiSemaphore(values);
  ListenableFuture<Void> cpuOnly=array.acquire(amountsOfCpu(5));
  ListenableFuture<Void> memOnly=array.acquire(amountsOfMemory(5));
  assertThat(cpuOnly.isDone(),Matchers.equalTo(true));
  assertThat(memOnly.isDone(),Matchers.equalTo(true));
  assertThat(array.getAvailableResources(),Matchers.equalTo(ResourceAmounts.of(2,2,0,0)));
  ListenableFuture<Void> cpuAndMem1=array.acquire(amountsOfCpuAndMemory(4,4));
  assertThat(cpuAndMem1.isDone(),Matchers.equalTo(false));
  ListenableFuture<Void> cpuAndMem2=array.acquire(amountsOfCpuAndMemory(2,2));
  assertThat(cpuAndMem2.isDone(),Matchers.equalTo(true));
  assertThat(array.getAvailableResources(),Matchers.equalTo(amountsOfCpuAndMemory(0,0)));
  ListenableFuture<Void> cpuAndMem3=array.acquire(amountsOfCpuAndMemory(3,3));
  assertThat(cpuAndMem3.isDone(),Matchers.equalTo(false));
  assertThat(array.getQueueLength(),Matchers.equalTo(2));
  array.release(amountsOfCpu(5));
  assertThat(cpuAndMem1.isDone(),Matchers.equalTo(false));
  assertThat(cpuAndMem3.isDone(),Matchers.equalTo(false));
  assertThat(array.getAvailableResources(),Matchers.equalTo(amountsOfCpuAndMemory(5,0)));
  array.release(amountsOfMemory(5));
  assertThat(cpuAndMem1.isDone(),Matchers.equalTo(true));
  assertThat(cpuAndMem3.isDone(),Matchers.equalTo(false));
  assertThat(array.getAvailableResources(),Matchers.equalTo(amountsOfCpuAndMemory(1,1)));
  assertThat(array.getQueueLength(),Matchers.equalTo(1));
  array.release(amountsOfCpuAndMemory(2,2));
  assertThat(cpuAndMem3.isDone(),Matchers.equalTo(true));
  assertThat(array.getAvailableResources(),Matchers.equalTo(amountsOfCpuAndMemory(0,0)));
}
