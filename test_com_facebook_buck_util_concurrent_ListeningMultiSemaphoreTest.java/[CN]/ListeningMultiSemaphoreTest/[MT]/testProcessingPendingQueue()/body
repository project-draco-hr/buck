{
  ImmutableMap<String,Integer> values=ImmutableMap.of("cpu",7);
  ListeningMultiSemaphore array=new ListeningMultiSemaphore(values);
  ListenableFuture<Void> f1=array.acquire(ImmutableMap.of("cpu",3));
  assertThat(f1.isDone(),Matchers.equalTo(true));
  assertThat(array.getAvailableResources(),Matchers.equalTo(ImmutableMap.of("cpu",4)));
  ListenableFuture<Void> f2=array.acquire(ImmutableMap.of("cpu",5));
  assertThat(f2.isDone(),Matchers.equalTo(false));
  assertThat(array.getQueueLength(),Matchers.equalTo(1));
  assertThat(array.getAvailableResources(),Matchers.equalTo(ImmutableMap.of("cpu",4)));
  final AtomicBoolean f2HasBeenReleased=new AtomicBoolean(false);
  f2.addListener(new Runnable(){
    @Override public void run(){
      f2HasBeenReleased.set(true);
    }
  }
,MoreExecutors.newDirectExecutorService());
  array.release(ImmutableMap.of("cpu",3));
  assertThat(f2HasBeenReleased.get(),Matchers.equalTo(true));
  assertThat(array.getAvailableResources(),Matchers.equalTo(ImmutableMap.of("cpu",2)));
  array.release(ImmutableMap.of("cpu",5));
  assertThat(array.getAvailableResources(),Matchers.equalTo(array.getMaximumValues()));
}
