{
  Preconditions.checkNotNull(absolutePath);
  Preconditions.checkArgument(absolutePath.isAbsolute());
  if (cachedRepositories.containsKey(absolutePath)) {
    return cachedRepositories.get(absolutePath);
  }
  if (!canonicalPathNames.containsKey(absolutePath)) {
    throw new HumanReadableException("No repository name known for " + absolutePath);
  }
  Optional<String> name=canonicalPathNames.get(absolutePath);
  ProjectFilesystem projectFilesystem=new ProjectFilesystem(absolutePath,BuckConfig.createDefaultBuckConfig(new ProjectFilesystem(absolutePath),platform,clientEnvironment).getIgnorePaths());
  BuckConfig config=BuckConfig.createDefaultBuckConfig(projectFilesystem,platform,clientEnvironment);
  PropertyFinder propertyFinder=new DefaultPropertyFinder(projectFilesystem,clientEnvironment);
  AndroidDirectoryResolver androidDirectoryResolver=new DefaultAndroidDirectoryResolver(projectFilesystem,config.getNdkVersion(),propertyFinder);
  JavaBuckConfig javaConfig=new JavaBuckConfig(config);
  ProcessExecutor processExecutor=new ProcessExecutor(console);
  JavaCompilerEnvironment javacEnv=javaConfig.getJavaCompilerEnvironment(processExecutor);
  PythonBuckConfig pythonConfig=new PythonBuckConfig(config);
  PythonEnvironment pythonEnv=pythonConfig.getPythonEnvironment(processExecutor);
  KnownBuildRuleTypes buildRuleTypes=KnownBuildRuleTypes.createInstance(config,androidDirectoryResolver,javacEnv,pythonEnv);
  Repository repository=new Repository(name,projectFilesystem,buildRuleTypes,config,this,androidDirectoryResolver);
  cachedRepositories.put(absolutePath,repository);
  updateCanonicalNames(repository.getBuckConfig().getRepositoryPaths());
  return repository;
}
