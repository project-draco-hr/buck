{
  BuildContext.Builder builder=BuildContext.builder();
  builder.setDependencyGraph(EasyMock.createMock(DependencyGraph.class));
  builder.setStepRunner(EasyMock.createMock(StepRunner.class));
  builder.setProjectFilesystem(EasyMock.createMock(ProjectFilesystem.class));
  builder.setArtifactCache(EasyMock.createMock(ArtifactCache.class));
  builder.setJavaPackageFinder(EasyMock.createMock(JavaPackageFinder.class));
  builder.setEventBus(BuckEventBusFactory.newInstance());
  AndroidPlatformTarget androidPlatformTarget=EasyMock.createMock(AndroidPlatformTarget.class);
  List<File> entries=ImmutableList.of(new File("add-ons/addon-google_apis-google-15/libs/effects.jar"),new File("add-ons/addon-google_apis-google-15/libs/maps.jar"),new File("add-ons/addon-google_apis-google-15/libs/usb.jar"));
  EasyMock.expect(androidPlatformTarget.getBootclasspathEntries()).andReturn(entries);
  EasyMock.replay(androidPlatformTarget);
  builder.setAndroidBootclasspathForAndroidPlatformTarget(Optional.of(androidPlatformTarget));
  BuildContext context=builder.build();
  Supplier<String> androidBootclasspathSupplier=context.getAndroidBootclasspathSupplier();
  String androidBootclasspath=Paths.normalizePathSeparator(androidBootclasspathSupplier.get());
  assertEquals("add-ons/addon-google_apis-google-15/libs/effects.jar:" + "add-ons/addon-google_apis-google-15/libs/maps.jar:" + "add-ons/addon-google_apis-google-15/libs/usb.jar",androidBootclasspath);
  androidBootclasspathSupplier.get();
  EasyMock.verify(androidPlatformTarget);
}
