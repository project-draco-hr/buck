{
  this.ruleDeps=new RuleDepsCache(service);
  this.unskippedRulesTracker=createUnskippedRulesTracker(buildMode,ruleDeps,service);
  this.service=service;
  this.buildMode=buildMode;
  this.dependencySchedulingOrder=dependencySchedulingOrder;
  this.depFiles=depFiles;
  this.maxDepFileCacheEntries=maxDepFileCacheEntries;
  this.artifactCacheSizeLimit=artifactCacheSizeLimit;
  this.objectMapper=ObjectMappers.newDefaultInstance();
  this.pathResolver=pathResolver;
  this.fileHashCaches=createFileHashCacheLoader(fileHashCache);
  this.ruleKeyFactories=CacheBuilder.newBuilder().build(new CacheLoader<ProjectFilesystem,RuleKeyFactories>(){
    @Override public RuleKeyFactories load(    @Nonnull ProjectFilesystem filesystem) throws Exception {
      return ruleKeyFactoriesFunction.apply(filesystem);
    }
  }
);
  this.networkExecutor=MoreExecutors.listeningDecorator(new ThreadPoolExecutor(MAX_TEST_NETWORK_THREADS,MAX_TEST_NETWORK_THREADS,15L,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(MAX_TEST_NETWORK_THREADS),new ThreadFactoryBuilder().setNameFormat("Network Test I/O" + "-%d").build(),new ThreadPoolExecutor.CallerRunsPolicy()));
}
