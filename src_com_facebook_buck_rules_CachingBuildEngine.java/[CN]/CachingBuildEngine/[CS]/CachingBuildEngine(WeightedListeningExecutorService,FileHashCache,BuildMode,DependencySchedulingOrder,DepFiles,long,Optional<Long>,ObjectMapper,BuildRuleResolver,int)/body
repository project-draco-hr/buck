{
  this.ruleDeps=new RuleDepsCache(service);
  this.unskippedRulesTracker=createUnskippedRulesTracker(buildMode,ruleDeps,service);
  this.service=service;
  this.buildMode=buildMode;
  this.dependencySchedulingOrder=dependencySchedulingOrder;
  this.depFiles=depFiles;
  this.maxDepFileCacheEntries=maxDepFileCacheEntries;
  this.artifactCacheSizeLimit=artifactCacheSizeLimit;
  this.objectMapper=objectMapper;
  this.pathResolver=new SourcePathResolver(resolver);
  this.fileHashCaches=createFileHashCacheLoader(fileHashCache);
  this.ruleKeyFactories=CacheBuilder.newBuilder().build(new CacheLoader<ProjectFilesystem,RuleKeyFactories>(){
    @Override public RuleKeyFactories load(    @Nonnull ProjectFilesystem filesystem) throws Exception {
      return RuleKeyFactories.build(keySeed,fileHashCaches.get(filesystem),resolver);
    }
  }
);
}
