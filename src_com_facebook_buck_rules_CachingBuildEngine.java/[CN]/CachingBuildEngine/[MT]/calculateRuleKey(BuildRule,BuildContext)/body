{
  ListenableFuture<RuleKey> ruleKey=ruleKeys.get(rule.getBuildTarget());
  if (ruleKey == null) {
    ListenableFuture<List<RuleKey>> depKeys=Futures.transform(getRuleDeps(rule),new AsyncFunction<ImmutableSortedSet<BuildRule>,List<RuleKey>>(){
      @Override public ListenableFuture<List<RuleKey>> apply(      @Nonnull ImmutableSortedSet<BuildRule> deps){
        List<ListenableFuture<RuleKey>> depKeys=Lists.newArrayListWithExpectedSize(rule.getDeps().size());
        for (        BuildRule dep : deps) {
          depKeys.add(calculateRuleKey(dep,context));
        }
        return Futures.allAsList(depKeys);
      }
    }
);
    ruleKey=Futures.transform(depKeys,new Function<List<RuleKey>,RuleKey>(){
      @Override public RuleKey apply(      List<RuleKey> input){
        context.getEventBus().logVerboseAndPost(LOG,BuildRuleEvent.started(rule));
        try {
          return rule.getRuleKey();
        }
  finally {
          context.getEventBus().logVerboseAndPost(LOG,BuildRuleEvent.suspended(rule));
        }
      }
    }
,service);
    ruleKeys.put(rule.getBuildTarget(),ruleKey);
  }
  return ruleKey;
}
