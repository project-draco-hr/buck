{
  return Futures.transformAsync(ruleDeps.get(rule),new AsyncFunction<ImmutableSortedSet<BuildRule>,List<Object>>(){
    @Override public ListenableFuture<List<Object>> apply(    ImmutableSortedSet<BuildRule> deps){
      List<ListenableFuture<?>> results=Lists.newArrayListWithExpectedSize(deps.size());
      for (      BuildRule dep : deps) {
        if (seen.add(dep)) {
          results.add(walkRule(dep,seen));
        }
      }
      return Futures.allAsList(results);
    }
  }
);
}
