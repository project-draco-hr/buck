{
  if (!useManifestCaching(rule)) {
    return Optional.absent();
  }
  final Optional<Pair<RuleKey,ImmutableSet<SourcePath>>> manifestKey=ruleKeyFactories.getUnchecked(rule.getProjectFilesystem()).depFileRuleKeyBuilderFactory.buildManifestKey(rule);
  if (!manifestKey.isPresent()) {
    buildInfoRecorder.addBuildMetadata(BuildInfo.METADATA_KEY_FOR_MANIFEST_KEY,manifestKey.get().getFirst().toString());
    return Optional.absent();
  }
  final LazyPath tempFile=new LazyPath(){
    @Override protected Path create() throws IOException {
      return Files.createTempFile("buck.",".manifest");
    }
  }
;
  CacheResult manifestResult=fetchArtifactForBuildable(manifestKey.get().getFirst(),tempFile,context.getArtifactCache(),buildInfoRecorder);
  if (!manifestResult.getType().isSuccess()) {
    return Optional.absent();
  }
  Path manifestPath=getManifestPath(rule);
  rule.getProjectFilesystem().deleteFileAtPathIfExists(manifestPath);
  rule.getProjectFilesystem().createParentDirs(manifestPath);
  try (OutputStream outputStream=rule.getProjectFilesystem().newFileOutputStream(manifestPath);InputStream inputStream=new GZIPInputStream(new BufferedInputStream(Files.newInputStream(tempFile.get())))){
    ByteStreams.copy(inputStream,outputStream);
  }
   Files.delete(tempFile.get());
  Manifest manifest;
  try (InputStream input=rule.getProjectFilesystem().newFileInputStream(manifestPath)){
    manifest=new Manifest(input);
  }
   Optional<RuleKey> ruleKey=manifest.lookup(fileHashCaches.getUnchecked(rule.getProjectFilesystem()),pathResolver,manifestKey.get().getSecond());
  if (!ruleKey.isPresent()) {
    return Optional.absent();
  }
  CacheResult cacheResult=tryToFetchArtifactFromBuildCacheAndOverlayOnTopOfProjectFilesystem(rule,ruleKey.get(),buildInfoRecorder,context.getArtifactCache(),rule.getProjectFilesystem(),context);
  if (cacheResult.getType().isSuccess()) {
    return Optional.of(BuildResult.success(rule,BuildRuleSuccessType.FETCHED_FROM_CACHE_MANIFEST_BASED,cacheResult));
  }
  return Optional.absent();
}
