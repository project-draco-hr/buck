{
  ListenableFuture<?> result=Futures.immediateFuture(null);
  if (seen.putIfAbsent(rule,0) == null) {
    result=Futures.transform(getRuleDeps(rule),new AsyncFunction<ImmutableSortedSet<BuildRule>,List<Object>>(){
      @Override public ListenableFuture<List<Object>> apply(      @Nonnull ImmutableSortedSet<BuildRule> deps){
        List<ListenableFuture<?>> results=Lists.newArrayListWithExpectedSize(deps.size());
        for (        BuildRule dep : deps) {
          results.add(walkRule(dep,seen));
        }
        return Futures.allAsList(results);
      }
    }
);
  }
  return result;
}
