{
  Optional<ListenableFuture<BuildResult>> existingResult=Optional.fromNullable(results.get(rule.getBuildTarget()));
  if (existingResult.isPresent()) {
    return existingResult.get();
  }
  ListenableFuture<RuleKey> ruleKey=calculateRuleKey(rule,context);
  ListenableFuture<BuildResult> result=Futures.transform(ruleKey,new AsyncFunction<RuleKey,BuildResult>(){
    @Override public ListenableFuture<BuildResult> apply(    @Nonnull RuleKey input) throws Exception {
      return processBuildRule(rule,context,asyncCallbacks);
    }
  }
,service);
  results.put(rule.getBuildTarget(),result);
  return result;
}
