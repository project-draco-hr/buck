{
  final ConcurrentLinkedQueue<ListenableFuture<Void>> asyncCallbacks=new ConcurrentLinkedQueue<>();
  final ListenableFuture<BuildResult> resultFuture=getBuildRuleResultWithRuntimeDeps(rule,context,asyncCallbacks);
  return Futures.transform(resultFuture,new AsyncFunction<BuildResult,BuildResult>(){
    @Override public ListenableFuture<BuildResult> apply(    @Nonnull BuildResult result) throws Exception {
      return Futures.transform(Futures.allAsList(asyncCallbacks),Functions.constant(result));
    }
  }
);
}
