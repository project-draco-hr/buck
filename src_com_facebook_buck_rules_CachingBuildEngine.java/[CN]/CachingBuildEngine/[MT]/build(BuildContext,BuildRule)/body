{
  final ConcurrentLinkedQueue<ListenableFuture<Void>> asyncCallbacks=new ConcurrentLinkedQueue<>();
  ListenableFuture<BuildResult> resultFuture=MoreFutures.chainExceptions(registerTopLevelRule(rule,context.getEventBus()),getBuildRuleResultWithRuntimeDeps(rule,context,asyncCallbacks),serviceByAdjustingDefaultWeightsTo(SCHEDULING_MORE_WORK_RESOURCE_AMOUNTS));
  return Futures.transformAsync(resultFuture,new AsyncFunction<BuildResult,BuildResult>(){
    @Override public ListenableFuture<BuildResult> apply(    BuildResult result) throws Exception {
      return Futures.transform(Futures.allAsList(asyncCallbacks),Functions.constant(result));
    }
  }
,serviceByAdjustingDefaultWeightsTo(SCHEDULING_MORE_WORK_RESOURCE_AMOUNTS));
}
