{
  RuleKey ruleKey=rule.getRuleKey();
  Optional<RuleKey> cachedRuleKey=onDiskBuildInfo.getRuleKey();
  if (ruleKey.equals(cachedRuleKey.orNull())) {
    return new BuildResult(rule,BuildRuleSuccessType.MATCHING_RULE_KEY,CacheResult.localKeyUnchangedHit());
  }
  AbiRule abiRule=checkIfRuleOrBuildableIsAbiRule(rule);
  if (abiRule != null) {
    RuleKey ruleKeyNoDeps=rule.getRuleKeyWithoutDeps();
    Optional<RuleKey> cachedRuleKeyNoDeps=onDiskBuildInfo.getRuleKeyWithoutDeps();
    if (ruleKeyNoDeps.equals(cachedRuleKeyNoDeps.orNull())) {
      Sha1HashCode abiKeyForDeps=abiRule.getAbiKeyForDeps();
      Optional<Sha1HashCode> cachedAbiKeyForDeps=onDiskBuildInfo.getHash(ABI_KEY_FOR_DEPS_ON_DISK_METADATA);
      if (abiKeyForDeps.equals(cachedAbiKeyForDeps.orNull())) {
        return new BuildResult(rule,BuildRuleSuccessType.MATCHING_DEPS_ABI_AND_RULE_KEY_NO_DEPS,CacheResult.localKeyUnchangedHit());
      }
    }
  }
  CacheResult cacheResult;
  if (shouldTryToFetchFromCache) {
    try {
      cacheResult=tryToFetchArtifactFromBuildCacheAndOverlayOnTopOfProjectFilesystem(rule,buildInfoRecorder,context.getArtifactCache(),context.getProjectRoot(),context);
    }
 catch (    InterruptedException e) {
      return new BuildResult(rule,e);
    }
  }
 else {
    cacheResult=CacheResult.skip();
  }
  BuildableContext buildableContext=new DefaultBuildableContext(buildInfoRecorder);
  if (!cacheResult.getType().isSuccess()) {
    try {
      executeCommandsNowThatDepsAreBuilt(rule,context,buildableContext);
    }
 catch (    StepFailedException e) {
      return new BuildResult(rule,e);
    }
  }
  if (rule instanceof HasPostBuildSteps) {
    try {
      executePostBuildSteps(rule,((HasPostBuildSteps)rule).getPostBuildSteps(context,buildableContext),context);
    }
 catch (    StepFailedException e) {
      return new BuildResult(rule,e);
    }
  }
  return new BuildResult(rule,cacheResult.getType().isSuccess() ? BuildRuleSuccessType.FETCHED_FROM_CACHE : BuildRuleSuccessType.BUILT_LOCALLY,cacheResult);
}
