{
  if (!rule.isCacheable()) {
    return Futures.immediateFuture(CacheResult.ignored());
  }
  final LazyPath lazyZipPath=new LazyPath(){
    @Override protected Path create() throws IOException {
      return Files.createTempFile("buck_artifact_" + MoreFiles.sanitize(rule.getBuildTarget().getShortName()),".zip");
    }
  }
;
  ListenableFuture<CacheResult> cacheResult=asyncFetchArtifactForBuildable(ruleKey,lazyZipPath,artifactCache,buildInfoRecorder);
  ListenableFuture<CacheResult> unzipResult=Futures.transformAsync(cacheResult,new AsyncFunction<CacheResult,CacheResult>(){
    @Override public ListenableFuture<CacheResult> apply(    CacheResult cacheResult) throws Exception {
      return unzipArtifactFromCacheResult(rule,ruleKey,lazyZipPath,buildContext,filesystem,cacheResult);
    }
  }
,networkExecutor);
  return unzipResult;
}
