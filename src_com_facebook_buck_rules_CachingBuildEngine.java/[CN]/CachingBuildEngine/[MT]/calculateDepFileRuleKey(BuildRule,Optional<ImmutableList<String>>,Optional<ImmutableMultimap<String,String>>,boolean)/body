{
  Preconditions.checkState(useDependencyFileRuleKey(rule));
  if (!depFile.isPresent()) {
    return Optional.absent();
  }
  RuleKeyFactories repoData=this.ruleKeyFactories.get(rule.getProjectFilesystem());
  Preconditions.checkNotNull(repoData);
  ImmutableList<Path> inputs=FluentIterable.from(depFile.get()).transform(MorePaths.TO_PATH).toList();
  RuleKeyBuilder builder=repoData.depFileRuleKeyBuilderFactory.newInstance(rule);
  for (  Path input : inputs) {
    try {
      builder.setPath(input);
    }
 catch (    NoSuchFileException e) {
      if (!allowMissingInputs) {
        throw e;
      }
      return Optional.absent();
    }
  }
  if (inputMap.isPresent()) {
    for (    BuildRule dep : rule.getDeps()) {
      if (dep instanceof SymlinkTree) {
        continue;
      }
      builder.setReflectively("buck.deps",dep);
    }
    builder.setReflectively("buck.input-map",inputMap);
  }
 else {
    builder.setReflectively("buck.deps",rule.getDeps());
  }
  return Optional.of(builder.build());
}
