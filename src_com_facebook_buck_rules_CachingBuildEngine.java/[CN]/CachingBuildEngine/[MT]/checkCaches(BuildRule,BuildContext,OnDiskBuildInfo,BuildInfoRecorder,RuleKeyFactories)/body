{
  return new AsyncFunction<List<BuildResult>,Optional<BuildResult>>(){
    @Override public ListenableFuture<Optional<BuildResult>> apply(    List<BuildResult> depResults) throws InterruptedException, IOException, ExecutionException {
      for (      BuildResult depResult : depResults) {
        if (buildMode != BuildMode.POPULATE_FROM_REMOTE_CACHE && depResult.getStatus() != BuildRuleStatus.SUCCESS) {
          return Futures.immediateFuture(Optional.of(BuildResult.canceled(rule,Preconditions.checkNotNull(depResult.getFailure()))));
        }
      }
      if (buildMode != BuildMode.POPULATE_FROM_REMOTE_CACHE && !context.isKeepGoing() && firstFailure != null) {
        return Futures.immediateFuture(Optional.of(BuildResult.canceled(rule,firstFailure)));
      }
      if (useDependencyFileRuleKey(rule)) {
        Optional<Pair<RuleKey,ImmutableSet<SourcePath>>> depFileRuleKeyAndInputs=calculateDepFileRuleKey(rule,onDiskBuildInfo.getValues(BuildInfo.METADATA_KEY_FOR_DEP_FILE),true);
        if (depFileRuleKeyAndInputs.isPresent()) {
          RuleKey depFileRuleKey=depFileRuleKeyAndInputs.get().getFirst();
          Optional<RuleKey> lastDepFileRuleKey=onDiskBuildInfo.getRuleKey(BuildInfo.METADATA_KEY_FOR_DEP_FILE_RULE_KEY);
          if (lastDepFileRuleKey.isPresent() && depFileRuleKey.equals(lastDepFileRuleKey.get())) {
            return Futures.immediateFuture(Optional.of(BuildResult.success(rule,BuildRuleSuccessType.MATCHING_DEP_FILE_RULE_KEY,CacheResult.localKeyUnchangedHit())));
          }
        }
      }
      if (useManifestCaching(rule)) {
        Optional<Pair<RuleKey,ImmutableSet<SourcePath>>> manifestKey=ruleKeyFactories.getUnchecked(rule.getProjectFilesystem()).depFileRuleKeyBuilderFactory.buildManifestKey(rule);
        if (manifestKey.isPresent()) {
          CacheResult cacheResult=performManifestBasedCacheFetch(rule,context,manifestKey.get(),buildInfoRecorder).get();
          if (cacheResult.getType().isSuccess()) {
            return Futures.immediateFuture(Optional.of(BuildResult.success(rule,BuildRuleSuccessType.FETCHED_FROM_CACHE_MANIFEST_BASED,cacheResult)));
          }
        }
      }
      if (rule instanceof SupportsInputBasedRuleKey) {
        Optional<RuleKey> inputRuleKey=ruleKeyFactory.inputBasedRuleKeyBuilderFactory.build(rule);
        if (inputRuleKey.isPresent()) {
          buildInfoRecorder.addBuildMetadata(BuildInfo.METADATA_KEY_FOR_INPUT_BASED_RULE_KEY,inputRuleKey.get().toString());
          Optional<RuleKey> lastInputRuleKey=onDiskBuildInfo.getRuleKey(BuildInfo.METADATA_KEY_FOR_INPUT_BASED_RULE_KEY);
          if (inputRuleKey.get().equals(lastInputRuleKey.orNull())) {
            return Futures.immediateFuture(Optional.of(BuildResult.success(rule,BuildRuleSuccessType.MATCHING_INPUT_BASED_RULE_KEY,CacheResult.localKeyUnchangedHit())));
          }
          CacheResult cacheResult=tryToFetchArtifactFromBuildCacheAndOverlayOnTopOfProjectFilesystem(rule,inputRuleKey.get(),buildInfoRecorder,context.getArtifactCache(),rule.getProjectFilesystem(),context).get();
          if (cacheResult.getType().isSuccess()) {
            return Futures.immediateFuture(Optional.of(BuildResult.success(rule,BuildRuleSuccessType.FETCHED_FROM_CACHE_INPUT_BASED,cacheResult)));
          }
        }
      }
      if (rule instanceof AbiRule) {
        RuleKey abiRuleKey=ruleKeyFactory.abiRuleKeyBuilderFactory.build(rule);
        buildInfoRecorder.addBuildMetadata(BuildInfo.METADATA_KEY_FOR_ABI_RULE_KEY,abiRuleKey.toString());
        Optional<RuleKey> lastAbiRuleKey=onDiskBuildInfo.getRuleKey(BuildInfo.METADATA_KEY_FOR_ABI_RULE_KEY);
        if (abiRuleKey.equals(lastAbiRuleKey.orNull())) {
          return Futures.immediateFuture(Optional.of(BuildResult.success(rule,BuildRuleSuccessType.MATCHING_ABI_RULE_KEY,CacheResult.localKeyUnchangedHit())));
        }
      }
      if (buildMode == BuildMode.POPULATE_FROM_REMOTE_CACHE) {
        LOG.info("Cannot populate cache for " + rule.getBuildTarget().getFullyQualifiedName());
        return Futures.immediateFuture(Optional.of(BuildResult.canceled(rule,new HumanReadableException("Skipping %s: in cache population mode local builds are " + "disabled",rule))));
      }
      return Futures.immediateFuture(Optional.<BuildResult>absent());
    }
  }
;
}
