{
  ListenableFuture<BuildResult> existingResult=results.get(rule.getBuildTarget());
  if (existingResult != null) {
    return existingResult;
  }
  ListenableFuture<RuleKey> ruleKey=calculateRuleKey(rule,context);
  ListenableFuture<BuildResult> result=Futures.transformAsync(ruleKey,new AsyncFunction<RuleKey,BuildResult>(){
    @Override public ListenableFuture<BuildResult> apply(    RuleKey input) throws Exception {
      return processBuildRule(rule,context,asyncCallbacks);
    }
  }
,serviceByAdjustingDefaultWeightsTo(SCHEDULING_MORE_WORK_RESOURCE_AMOUNTS));
  if (!(rule instanceof HasRuntimeDeps)) {
    results.put(rule.getBuildTarget(),result);
    return result;
  }
  ImmutableSortedSet<BuildRule> runtimeDeps=((HasRuntimeDeps)rule).getRuntimeDeps();
  List<ListenableFuture<BuildResult>> runtimeDepResults=Lists.newArrayListWithExpectedSize(runtimeDeps.size());
  for (  BuildRule dep : runtimeDeps) {
    runtimeDepResults.add(getBuildRuleResultWithRuntimeDepsUnlocked(dep,context,asyncCallbacks));
  }
  result=MoreFutures.chainExceptions(Futures.allAsList(runtimeDepResults),result);
  results.put(rule.getBuildTarget(),result);
  return result;
}
