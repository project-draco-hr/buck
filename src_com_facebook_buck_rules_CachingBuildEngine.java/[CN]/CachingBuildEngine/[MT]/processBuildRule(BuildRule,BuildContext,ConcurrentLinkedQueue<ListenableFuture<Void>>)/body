{
  final RuleKeyFactories keyFactories=ruleKeyFactories.getUnchecked(rule.getProjectFilesystem());
  final FileHashCache fileHashCache=fileHashCaches.getUnchecked(rule.getProjectFilesystem());
  final OnDiskBuildInfo onDiskBuildInfo=context.createOnDiskBuildInfoFor(rule.getBuildTarget(),rule.getProjectFilesystem());
  final BuildInfoRecorder buildInfoRecorder=context.createBuildInfoRecorder(rule.getBuildTarget(),rule.getProjectFilesystem()).addBuildMetadata(BuildInfo.METADATA_KEY_FOR_RULE_KEY,keyFactories.defaultRuleKeyBuilderFactory.build(rule).toString());
  final BuildableContext buildableContext=new DefaultBuildableContext(buildInfoRecorder);
  final AtomicReference<Long> outputSize=Atomics.newReference();
  ListenableFuture<BuildResult> buildResult=processBuildRule(rule,context,onDiskBuildInfo,buildInfoRecorder,buildableContext,asyncCallbacks);
  if (buildMode == BuildMode.DEEP || buildMode == BuildMode.POPULATE_FROM_REMOTE_CACHE) {
    buildResult=MoreFutures.chainExceptions(getDepResults(rule,context,asyncCallbacks),buildResult);
  }
  AsyncFunction<BuildResult,BuildResult> callback=new AsyncFunction<BuildResult,BuildResult>(){
    @Override public ListenableFuture<BuildResult> apply(    BuildResult input) throws Exception {
      if (input.getStatus() != BuildRuleStatus.SUCCESS) {
        return Futures.immediateFuture(input);
      }
      BuildRuleSuccessType success=Preconditions.checkNotNull(input.getSuccess());
      if (success != BuildRuleSuccessType.BUILT_LOCALLY) {
        for (        String str : onDiskBuildInfo.getValues(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS).get()) {
          buildInfoRecorder.recordArtifact(Paths.get(str));
        }
      }
      outputSize.set(buildInfoRecorder.getOutputSize());
      if (success.outputsHaveChanged()) {
        if (rule instanceof HasPostBuildSteps) {
          executePostBuildSteps(rule,((HasPostBuildSteps)rule).getPostBuildSteps(context,buildableContext),context);
        }
        FileHashCache fileHashCache=fileHashCaches.get(rule.getProjectFilesystem());
        for (        Path path : buildInfoRecorder.getRecordedPaths()) {
          fileHashCache.invalidate(rule.getProjectFilesystem().resolve(path));
        }
      }
      if (useDependencyFileRuleKey(rule) && success == BuildRuleSuccessType.BUILT_LOCALLY) {
        ImmutableList<SourcePath> inputs=((SupportsDependencyFileRuleKey)rule).getInputsAfterBuildingLocally();
        ImmutableList<String> inputStrings=FluentIterable.from(inputs).transform(DependencyFileEntry.fromSourcePathFunction(pathResolver)).transform(MoreFunctions.toJsonFunction(objectMapper)).toList();
        buildInfoRecorder.addMetadata(BuildInfo.METADATA_KEY_FOR_DEP_FILE,inputStrings);
        Optional<Pair<RuleKey,ImmutableSet<SourcePath>>> depFileRuleKeyAndInputs=calculateDepFileRuleKey(rule,Optional.of(inputStrings),false);
        Preconditions.checkState(depFileRuleKeyAndInputs.isPresent());
        RuleKey depFileRuleKey=depFileRuleKeyAndInputs.get().getFirst();
        buildInfoRecorder.addBuildMetadata(BuildInfo.METADATA_KEY_FOR_DEP_FILE_RULE_KEY,depFileRuleKey.toString());
        if (useManifestCaching(rule)) {
          updateAndStoreManifest(rule,depFileRuleKeyAndInputs.get().getFirst(),depFileRuleKeyAndInputs.get().getSecond(),context.getArtifactCache());
        }
      }
      if (success == BuildRuleSuccessType.BUILT_LOCALLY && shouldUploadToCache(rule,outputSize.get())) {
        ImmutableSortedMap.Builder<String,String> outputHashes=ImmutableSortedMap.naturalOrder();
        for (        Path path : buildInfoRecorder.getOutputPaths()) {
          outputHashes.put(path.toString(),fileHashCache.get(rule.getProjectFilesystem().resolve(path)).toString());
        }
        buildInfoRecorder.addBuildMetadata(BuildInfo.METADATA_KEY_FOR_RECORDED_PATH_HASHES,outputHashes.build());
      }
      if (success != BuildRuleSuccessType.BUILT_LOCALLY && success.outputsHaveChanged()) {
        Optional<ImmutableMap<String,String>> hashes=onDiskBuildInfo.getMap(BuildInfo.METADATA_KEY_FOR_RECORDED_PATH_HASHES);
        if (hashes.isPresent()) {
          for (          Map.Entry<String,String> ent : hashes.get().entrySet()) {
            Path path=rule.getProjectFilesystem().getRootPath().getFileSystem().getPath(ent.getKey());
            HashCode hashCode=HashCode.fromString(ent.getValue());
            fileHashCache.set(rule.getProjectFilesystem().resolve(path),hashCode);
          }
        }
      }
      buildInfoRecorder.addBuildMetadata(BuildInfo.METADATA_KEY_FOR_TARGET,rule.getBuildTarget().toString());
      buildInfoRecorder.addMetadata(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS,FluentIterable.from(buildInfoRecorder.getRecordedPaths()).transform(Functions.toStringFunction()).toList());
      if (success.shouldWriteRecordedMetadataToDiskAfterBuilding()) {
        try {
          boolean clearExistingMetadata=success.shouldClearAndOverwriteMetadataOnDisk();
          buildInfoRecorder.writeMetadataToDisk(clearExistingMetadata);
        }
 catch (        IOException e) {
          throw new IOException(String.format("Failed to write metadata to disk for %s.",rule),e);
        }
      }
      try {
        if (rule instanceof InitializableFromDisk) {
          doInitializeFromDisk((InitializableFromDisk<?>)rule,onDiskBuildInfo);
        }
      }
 catch (      IOException e) {
        throw new IOException(String.format("Error initializing %s from disk.",rule),e);
      }
      return Futures.immediateFuture(input);
    }
  }
;
  buildResult=Futures.transformAsync(buildResult,ruleAsyncFunction(rule,context,callback));
  final SettableFuture<BuildResult> result=SettableFuture.create();
  asyncCallbacks.add(MoreFutures.addListenableCallback(buildResult,new FutureCallback<BuildResult>(){
    private void cleanupAfterError(){
      try {
        onDiskBuildInfo.deleteExistingMetadata();
      }
 catch (      Throwable t) {
        context.getEventBus().post(ThrowableConsoleEvent.create(t,"Error when deleting metadata for %s.",rule));
      }
    }
    private void uploadToCache(    BuildRuleSuccessType success){
      Set<RuleKey> ruleKeys=Sets.newHashSet();
      if (success.shouldUploadResultingArtifact()) {
        ruleKeys.add(keyFactories.defaultRuleKeyBuilderFactory.build(rule));
      }
      if (rule instanceof SupportsInputBasedRuleKey && success.shouldUploadResultingArtifactInputBased()) {
        ruleKeys.add(onDiskBuildInfo.getRuleKey(BuildInfo.METADATA_KEY_FOR_INPUT_BASED_RULE_KEY).get());
      }
      if (useManifestCaching(rule) && success.shouldUploadResultingArtifactManifestBased()) {
        ruleKeys.add(onDiskBuildInfo.getRuleKey(BuildInfo.METADATA_KEY_FOR_DEP_FILE_RULE_KEY).get());
      }
      if (!ruleKeys.isEmpty()) {
        try {
          buildInfoRecorder.performUploadToArtifactCache(ImmutableSet.copyOf(ruleKeys),context.getArtifactCache(),context.getEventBus());
        }
 catch (        Throwable t) {
          context.getEventBus().post(ThrowableConsoleEvent.create(t,"Error uploading to cache for %s.",rule));
        }
      }
    }
    private void handleResult(    BuildResult input){
      Optional<Long> outputSize=Optional.absent();
      Optional<HashCode> outputHash=Optional.absent();
      Optional<BuildRuleSuccessType> successType=Optional.absent();
      context.getEventBus().logVerboseAndPost(LOG,BuildRuleEvent.resumed(rule,keyFactories.defaultRuleKeyBuilderFactory));
      if (input.getStatus() == BuildRuleStatus.FAIL) {
        firstFailure=input.getFailure();
        cleanupAfterError();
      }
      result.set(input);
      if (input.getStatus() == BuildRuleStatus.SUCCESS) {
        BuildRuleSuccessType success=Preconditions.checkNotNull(input.getSuccess());
        successType=Optional.of(success);
        try {
          outputSize=Optional.of(buildInfoRecorder.getOutputSize());
        }
 catch (        IOException e) {
          context.getEventBus().post(ThrowableConsoleEvent.create(e,"Error getting output size for %s.",rule));
        }
        if (outputSize.isPresent() && shouldUploadToCache(rule,outputSize.get())) {
          uploadToCache(success);
        }
        if (success == BuildRuleSuccessType.BUILT_LOCALLY && shouldUploadToCache(rule,outputSize.get())) {
          try {
            outputHash=Optional.of(buildInfoRecorder.getOutputHash(fileHashCache));
          }
 catch (          IOException e) {
            context.getEventBus().post(ThrowableConsoleEvent.create(e,"Error getting output hash for %s.",rule));
          }
        }
      }
      context.getEventBus().logVerboseAndPost(LOG,BuildRuleEvent.finished(rule,BuildRuleKeys.builder().setRuleKey(keyFactories.defaultRuleKeyBuilderFactory.build(rule)).setInputRuleKey(onDiskBuildInfo.getRuleKey(BuildInfo.METADATA_KEY_FOR_INPUT_BASED_RULE_KEY)).build(),input.getStatus(),input.getCacheResult(),successType,outputHash,outputSize));
    }
    @Override public void onSuccess(    BuildResult input){
      handleResult(input);
    }
    @Override public void onFailure(    @Nonnull Throwable thrown){
      handleResult(BuildResult.failure(rule,thrown));
      if (thrown instanceof InterruptedException) {
        Thread.currentThread().interrupt();
      }
    }
  }
));
  return result;
}
