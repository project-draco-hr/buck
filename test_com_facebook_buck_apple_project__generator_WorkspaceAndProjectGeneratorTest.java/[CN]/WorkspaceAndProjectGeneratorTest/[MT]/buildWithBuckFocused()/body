{
  final String fooLib="//foo:lib";
  Optional<Path> buck=new ExecutableFinder().getOptionalExecutable(Paths.get("buck"),ImmutableMap.<String,String>of());
  assumeThat(buck.isPresent(),is(true));
  WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(rootCell,targetGraph,workspaceNode.getConstructorArg(),workspaceNode.getBuildTarget(),ImmutableSet.of(ProjectGenerator.Option.INCLUDE_TESTS,ProjectGenerator.Option.INCLUDE_DEPENDENCIES_TESTS),false,true,ImmutableList.<String>of(),ImmutableList.of(BuildTargetFactory.newInstance(fooLib)),false,new AlwaysFoundExecutableFinder(),ImmutableMap.<String,String>of(),PLATFORMS,DEFAULT_PLATFORM,"BUCK",getSourcePathResolverForNodeFunction(targetGraph),getFakeBuckEventBus(),halideBuckConfig,cxxBuckConfig,appleConfig);
  Map<Path,ProjectGenerator> projectGenerators=new HashMap<>();
  generator.generateWorkspaceAndDependentProjects(projectGenerators);
  ProjectGenerator fooProjectGenerator=projectGenerators.get(Paths.get("foo"));
  assertThat(fooProjectGenerator,is(notNullValue()));
  for (  PBXTarget target : fooProjectGenerator.getGeneratedProject().getTargets()) {
    if (target.getName() != null && !target.getName().equals(fooLib) && !target.getName().endsWith("-Buck")) {
      assertThat(target.getBuildPhases().size(),Matchers.equalTo(0));
    }
  }
}
