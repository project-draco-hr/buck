{
  WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(rootCell,targetGraph,workspaceNode.getConstructorArg(),workspaceNode.getBuildTarget(),ImmutableSet.of(ProjectGenerator.Option.INCLUDE_TESTS,ProjectGenerator.Option.INCLUDE_DEPENDENCIES_TESTS),true,false,ImmutableList.<String>of(),ImmutableList.<BuildTarget>of(),false,new AlwaysFoundExecutableFinder(),ImmutableMap.<String,String>of(),PLATFORMS,DEFAULT_PLATFORM,"BUCK",getSourcePathResolverForNodeFunction(targetGraph),getFakeBuckEventBus(),halideBuckConfig,cxxBuckConfig,appleConfig,swiftBuckConfig);
  Map<Path,ProjectGenerator> projectGenerators=new HashMap<>();
  generator.generateWorkspaceAndDependentProjects(projectGenerators,MoreExecutors.newDirectExecutorService());
  assertTrue("Combined project generation should not populate the project generators map",projectGenerators.isEmpty());
  Optional<ProjectGenerator> projectGeneratorOptional=generator.getCombinedProjectGenerator();
  assertTrue("Combined project generator should be present",projectGeneratorOptional.isPresent());
  ProjectGenerator projectGenerator=projectGeneratorOptional.get();
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:bin");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:lib");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:bin-xctest");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//foo:lib-xctest");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//bar:lib");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(projectGenerator.getGeneratedProject(),"//baz:lib");
}
