{
  final String fooLib="//NOT:EXISTING_TARGET";
  Optional<Path> buck=new ExecutableFinder().getOptionalExecutable(Paths.get("buck"),ImmutableMap.<String,String>of());
  assumeThat(buck.isPresent(),is(true));
  WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(rootCell,targetGraph,workspaceNode.getConstructorArg(),workspaceNode.getBuildTarget(),ImmutableSet.of(ProjectGenerator.Option.INCLUDE_TESTS,ProjectGenerator.Option.INCLUDE_DEPENDENCIES_TESTS),false,true,ImmutableList.<String>of(),ImmutableList.of(BuildTargetFactory.newInstance(fooLib)),false,new AlwaysFoundExecutableFinder(),ImmutableMap.<String,String>of(),PLATFORMS,DEFAULT_PLATFORM,"BUCK",getSourcePathResolverForNodeFunction(targetGraph),getFakeBuckEventBus(),halideBuckConfig,cxxBuckConfig,appleConfig);
  Map<Path,ProjectGenerator> projectGenerators=new HashMap<>();
  try {
    generator.generateWorkspaceAndDependentProjects(projectGenerators,MoreExecutors.newDirectExecutorService());
  }
 catch (  IllegalArgumentException e) {
    assertThat(e.getMessage(),Matchers.equalTo("Cannot find build target " + fooLib + " in target graph"));
    return;
  }
  fail("Project generation should fail because there is no " + fooLib + " target in the graph!");
}
