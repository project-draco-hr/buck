{
  WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(rootCell,targetGraph,workspaceNode.getConstructorArg(),workspaceNode.getBuildTarget(),ImmutableSet.<ProjectGenerator.Option>of(),false,false,ImmutableList.<String>of(),ImmutableList.<BuildTarget>of(),false,new AlwaysFoundExecutableFinder(),ImmutableMap.<String,String>of(),PLATFORMS,DEFAULT_PLATFORM,"BUCK",getSourcePathResolverForNodeFunction(targetGraph),getFakeBuckEventBus(),halideBuckConfig,cxxBuckConfig,appleConfig,swiftBuckConfig);
  Map<Path,ProjectGenerator> projectGenerators=new HashMap<>();
  generator.generateWorkspaceAndDependentProjects(projectGenerators,MoreExecutors.newDirectExecutorService());
  ProjectGenerator fooProjectGenerator=projectGenerators.get(Paths.get("foo"));
  ProjectGenerator barProjectGenerator=projectGenerators.get(Paths.get("bar"));
  ProjectGenerator bazProjectGenerator=projectGenerators.get(Paths.get("baz"));
  ProjectGenerator quxProjectGenerator=projectGenerators.get(Paths.get("qux"));
  assertNull("The Qux project should not be generated at all",quxProjectGenerator);
  assertNull("The Baz project should not be generated at all",bazProjectGenerator);
  assertNotNull("The Foo project should have been generated",fooProjectGenerator);
  assertNotNull("The Bar project should have been generated",barProjectGenerator);
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(fooProjectGenerator.getGeneratedProject(),"//foo:bin");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(fooProjectGenerator.getGeneratedProject(),"//foo:lib");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(barProjectGenerator.getGeneratedProject(),"//bar:lib");
}
