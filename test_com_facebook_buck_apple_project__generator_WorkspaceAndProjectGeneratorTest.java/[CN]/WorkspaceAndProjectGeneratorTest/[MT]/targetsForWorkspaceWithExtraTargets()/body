{
  BuildTarget fooLibTarget=BuildTarget.builder(rootCell.getRoot(),"//foo","FooLib").build();
  TargetNode<AppleLibraryDescription.Arg> fooLib=AppleLibraryBuilder.createBuilder(fooLibTarget).build();
  BuildTarget barLibTarget=BuildTarget.builder(rootCell.getRoot(),"//bar","BarLib").build();
  TargetNode<AppleLibraryDescription.Arg> barLib=AppleLibraryBuilder.createBuilder(barLibTarget).build();
  BuildTarget bazLibTarget=BuildTarget.builder(rootCell.getRoot(),"//baz","BazLib").build();
  TargetNode<AppleLibraryDescription.Arg> bazLib=AppleLibraryBuilder.createBuilder(bazLibTarget).setDeps(Optional.of(ImmutableSortedSet.of(barLibTarget))).build();
  TargetNode<XcodeWorkspaceConfigDescription.Arg> workspaceNode=XcodeWorkspaceConfigBuilder.createBuilder(BuildTarget.builder(rootCell.getRoot(),"//foo","workspace").build()).setWorkspaceName(Optional.of("workspace")).setSrcTarget(Optional.of(fooLibTarget)).setExtraTargets(Optional.of(ImmutableSortedSet.of(bazLibTarget))).build();
  TargetGraph targetGraph=TargetGraphFactory.newInstance(fooLib,barLib,bazLib,workspaceNode);
  WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(rootCell,targetGraph,workspaceNode.getConstructorArg(),workspaceNode.getBuildTarget(),ImmutableSet.of(ProjectGenerator.Option.INCLUDE_TESTS,ProjectGenerator.Option.INCLUDE_DEPENDENCIES_TESTS),false,false,ImmutableList.<String>of(),ImmutableList.<BuildTarget>of(),false,false,new AlwaysFoundExecutableFinder(),ImmutableMap.<String,String>of(),PLATFORMS,DEFAULT_PLATFORM,"BUCK",getSourcePathResolverForNodeFunction(targetGraph),getFakeBuckEventBus(),halideBuckConfig,cxxBuckConfig);
  Map<Path,ProjectGenerator> projectGenerators=new HashMap<>();
  generator.generateWorkspaceAndDependentProjects(projectGenerators);
  ProjectGenerator fooProjectGenerator=projectGenerators.get(Paths.get("foo"));
  ProjectGenerator barProjectGenerator=projectGenerators.get(Paths.get("bar"));
  ProjectGenerator bazProjectGenerator=projectGenerators.get(Paths.get("baz"));
  assertNotNull("The Foo project should have been generated",fooProjectGenerator);
  assertNotNull("The Bar project should have been generated",barProjectGenerator);
  assertNotNull("The Baz project should have been generated",bazProjectGenerator);
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(fooProjectGenerator.getGeneratedProject(),"//foo:FooLib");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(barProjectGenerator.getGeneratedProject(),"//bar:BarLib");
  ProjectGeneratorTestUtils.assertTargetExistsAndReturnTarget(bazProjectGenerator.getGeneratedProject(),"//baz:BazLib");
  XCScheme mainScheme=generator.getSchemeGenerators().get("workspace").getOutputScheme().get();
  XCScheme.BuildAction mainSchemeBuildAction=mainScheme.getBuildAction().get();
  assertThat(mainSchemeBuildAction.getBuildActionEntries(),hasSize(3));
  assertThat(mainSchemeBuildAction.getBuildActionEntries().get(0),withNameAndBuildingFor("FooLib",equalTo(XCScheme.BuildActionEntry.BuildFor.DEFAULT)));
  assertThat(mainSchemeBuildAction.getBuildActionEntries().get(1),withNameAndBuildingFor("BarLib",equalTo(XCScheme.BuildActionEntry.BuildFor.DEFAULT)));
  assertThat(mainSchemeBuildAction.getBuildActionEntries().get(2),withNameAndBuildingFor("BazLib",equalTo(XCScheme.BuildActionEntry.BuildFor.DEFAULT)));
}
