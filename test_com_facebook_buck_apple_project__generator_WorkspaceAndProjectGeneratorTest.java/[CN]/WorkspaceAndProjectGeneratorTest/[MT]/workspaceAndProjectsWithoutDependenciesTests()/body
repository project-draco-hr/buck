{
  WorkspaceAndProjectGenerator generator=new WorkspaceAndProjectGenerator(rootCell,targetGraph,workspaceNode.getConstructorArg(),workspaceNode.getBuildTarget(),ImmutableSet.<ProjectGenerator.Option>of(ProjectGenerator.Option.INCLUDE_TESTS),false,false,ImmutableList.<String>of(),ImmutableList.<BuildTarget>of(),false,new AlwaysFoundExecutableFinder(),ImmutableMap.<String,String>of(),PLATFORMS,DEFAULT_PLATFORM,"BUCK",getSourcePathResolverForNodeFunction(targetGraph),getFakeBuckEventBus(),halideBuckConfig,cxxBuckConfig,appleConfig,swiftBuckConfig);
  Map<Path,ProjectGenerator> projectGenerators=new HashMap<>();
  generator.generateWorkspaceAndDependentProjects(projectGenerators,MoreExecutors.newDirectExecutorService());
  Optional<XCScheme> scheme=Iterables.getOnlyElement(generator.getSchemeGenerators().values()).getOutputScheme();
  assertThat(scheme.isPresent(),is(true));
  assertThat("Test for project FooBin should have been generated",scheme.get().getBuildAction().get().getBuildActionEntries(),hasItem(withNameAndBuildingFor("bin-xctest",equalTo(XCScheme.BuildActionEntry.BuildFor.TEST_ONLY))));
  assertThat("Test for project FooLib should not be generated at all",scheme.get().getBuildAction().get().getBuildActionEntries(),not(hasItem(withNameAndBuildingFor("lib-xctest",equalTo(XCScheme.BuildActionEntry.BuildFor.TEST_ONLY)))));
}
