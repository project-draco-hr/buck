{
  ActionGraphEvent.Started started=ActionGraphEvent.started();
  eventBus.post(started);
  final BuildRuleResolver resolver=new BuildRuleResolver(targetGraph,buildRuleGenerator);
  final int numberOfNodes=targetGraph.getNodes().size();
  final AtomicInteger processedNodes=new AtomicInteger(0);
  AbstractBottomUpTraversal<TargetNode<?>,ActionGraph> bottomUpTraversal=new AbstractBottomUpTraversal<TargetNode<?>,ActionGraph>(targetGraph){
    @Override public void visit(    TargetNode<?> node){
      BuildRule rule;
      try {
        rule=buildRuleGenerator.transform(targetGraph,resolver,node);
      }
 catch (      NoSuchBuildTargetException e) {
        throw new HumanReadableException(e);
      }
      Optional<BuildRule> existingRule=resolver.getRuleOptional(rule.getBuildTarget());
      Preconditions.checkState(!existingRule.isPresent() || existingRule.get().equals(rule));
      if (!existingRule.isPresent()) {
        resolver.addToIndex(rule);
      }
      eventBus.post(ActionGraphEvent.processed(processedNodes.incrementAndGet(),numberOfNodes));
    }
  }
;
  bottomUpTraversal.traverse();
  Pair<ActionGraph,BuildRuleResolver> result=new Pair<>(new ActionGraph(resolver.getBuildRules()),resolver);
  eventBus.post(ActionGraphEvent.finished(started));
  return result;
}
