{
  ActionGraphEvent.Started started=ActionGraphEvent.started();
  eventBus.post(started);
  final LoadingCache<ProjectFilesystem,RepoSpecificData> mappedRepos=CacheBuilder.newBuilder().build(new CacheLoader<ProjectFilesystem,RepoSpecificData>(){
    @Override public RepoSpecificData load(    ProjectFilesystem filesystem){
      return new RepoSpecificData(fileHashCache);
    }
  }
);
  AbstractBottomUpTraversal<TargetNode<?>,ActionGraph> bottomUpTraversal=new AbstractBottomUpTraversal<TargetNode<?>,ActionGraph>(targetGraph){
    @Override public void visit(    TargetNode<?> node){
      ProjectFilesystem filesystem=node.getRuleFactoryParams().getProjectFilesystem();
      RepoSpecificData data=mappedRepos.getUnchecked(filesystem);
      BuildRule rule;
      try {
        rule=buildRuleGenerator.transform(targetGraph,data.ruleResolver,node,data.ruleKeyBuilderFactory);
      }
 catch (      NoSuchBuildTargetException e) {
        throw new HumanReadableException(e);
      }
      Optional<BuildRule> existingRule=data.ruleResolver.getRuleOptional(rule.getBuildTarget());
      Preconditions.checkState(!existingRule.isPresent() || existingRule.get().equals(rule));
      if (!existingRule.isPresent()) {
        data.ruleResolver.addToIndex(rule);
      }
    }
  }
;
  bottomUpTraversal.traverse();
  ImmutableMap.Builder<ProjectFilesystem,BuildRuleResolver> resolvers=ImmutableMap.builder();
  ImmutableSet.Builder<BuildRule> allRules=ImmutableSet.builder();
  for (  Map.Entry<ProjectFilesystem,RepoSpecificData> entry : mappedRepos.asMap().entrySet()) {
    BuildRuleResolver ruleResolver=entry.getValue().ruleResolver;
    resolvers.put(entry.getKey(),ruleResolver);
    allRules.addAll(ruleResolver.getBuildRules());
  }
  ruleResolvers=resolvers.build();
  ActionGraph result=new ActionGraph(allRules.build());
  eventBus.post(ActionGraphEvent.finished(started));
  return result;
}
