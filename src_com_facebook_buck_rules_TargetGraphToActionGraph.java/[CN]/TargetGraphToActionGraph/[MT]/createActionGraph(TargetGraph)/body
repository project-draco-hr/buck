{
  ActionGraphEvent.Started started=ActionGraphEvent.started();
  eventBus.post(started);
  final LoadingCache<ProjectFilesystem,RuleKeyBuilderFactory> ruleKeyBuilderFactories=CacheBuilder.newBuilder().build(new CacheLoader<ProjectFilesystem,RuleKeyBuilderFactory>(){
    @Override public RuleKeyBuilderFactory load(    ProjectFilesystem filesystem) throws Exception {
      StackedFileHashCache cellHashCache=new StackedFileHashCache(ImmutableList.of(fileHashCache,new DefaultFileHashCache(filesystem)));
      return new DefaultRuleKeyBuilderFactory(cellHashCache,new SourcePathResolver(resolver));
    }
  }
);
  final int numberOfNodes=targetGraph.getNodes().size();
  final AtomicInteger processedNodes=new AtomicInteger(0);
  AbstractBottomUpTraversal<TargetNode<?>,ActionGraph> bottomUpTraversal=new AbstractBottomUpTraversal<TargetNode<?>,ActionGraph>(targetGraph){
    @Override public void visit(    TargetNode<?> node){
      RuleKeyBuilderFactory data=ruleKeyBuilderFactories.getUnchecked(node.getRuleFactoryParams().getProjectFilesystem());
      BuildRule rule;
      try {
        rule=buildRuleGenerator.transform(targetGraph,resolver,node,data);
      }
 catch (      NoSuchBuildTargetException e) {
        throw new HumanReadableException(e);
      }
      Optional<BuildRule> existingRule=resolver.getRuleOptional(rule.getBuildTarget());
      Preconditions.checkState(!existingRule.isPresent() || existingRule.get().equals(rule));
      if (!existingRule.isPresent()) {
        resolver.addToIndex(rule);
      }
      eventBus.post(ActionGraphEvent.processed(processedNodes.incrementAndGet(),numberOfNodes));
    }
  }
;
  bottomUpTraversal.traverse();
  ActionGraph result=new ActionGraph(resolver.getBuildRules());
  eventBus.post(ActionGraphEvent.finished(started));
  return result;
}
