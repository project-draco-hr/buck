{
  ActionGraphEvent.Started started=ActionGraphEvent.started();
  eventBus.post(started);
  final LoadingCache<CellFilesystemResolver,Pair<BuildRuleResolver,RuleKeyBuilderFactory>> cellSpecificData=CacheBuilder.newBuilder().build(new CacheLoader<CellFilesystemResolver,Pair<BuildRuleResolver,RuleKeyBuilderFactory>>(){
    @Override public Pair<BuildRuleResolver,RuleKeyBuilderFactory> load(    CellFilesystemResolver cellNameResolver) throws Exception {
      BuildRuleResolver ruleResolver=new BuildRuleResolverView(cellNameResolver);
      StackedFileHashCache cellHashCache=new StackedFileHashCache(ImmutableList.of(fileHashCache,new DefaultFileHashCache(cellNameResolver.getFilesystem())));
      RuleKeyBuilderFactory factory=new DefaultRuleKeyBuilderFactory(cellHashCache,new SourcePathResolver(ruleResolver));
      return new Pair<>(ruleResolver,factory);
    }
  }
);
  final int numberOfNodes=targetGraph.getNodes().size();
  final AtomicInteger processedNodes=new AtomicInteger(0);
  AbstractBottomUpTraversal<TargetNode<?>,ActionGraph> bottomUpTraversal=new AbstractBottomUpTraversal<TargetNode<?>,ActionGraph>(targetGraph){
    @Override public void visit(    TargetNode<?> node){
      Pair<BuildRuleResolver,RuleKeyBuilderFactory> data=cellSpecificData.getUnchecked(node.getCellFilesystemResolver());
      BuildRule rule;
      try {
        rule=buildRuleGenerator.transform(targetGraph,data.getFirst(),node,data.getSecond());
      }
 catch (      NoSuchBuildTargetException e) {
        throw new HumanReadableException(e);
      }
      BuildRuleResolver ruleResolver=data.getFirst();
      Optional<BuildRule> existingRule=ruleResolver.getRuleOptional(rule.getBuildTarget());
      Preconditions.checkState(!existingRule.isPresent() || existingRule.get().equals(rule));
      if (!existingRule.isPresent()) {
        ruleResolver.addToIndex(rule);
      }
      eventBus.post(ActionGraphEvent.processed(processedNodes.incrementAndGet(),numberOfNodes));
    }
  }
;
  bottomUpTraversal.traverse();
  ImmutableSet.Builder<BuildRule> allRules=ImmutableSet.builder();
  for (  BuildRuleResolver resolver : ruleResolvers.asMap().values()) {
    allRules.addAll(resolver.getBuildRules());
  }
  ActionGraph result=new ActionGraph(allRules.build());
  eventBus.post(ActionGraphEvent.finished(started));
  return result;
}
