{
  ActionGraphEvent.Started started=ActionGraphEvent.started();
  eventBus.post(started);
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  final RuleKeyBuilderFactory ruleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(fileHashCache,pathResolver);
  AbstractBottomUpTraversal<TargetNode<?>,ActionGraph> bottomUpTraversal=new AbstractBottomUpTraversal<TargetNode<?>,ActionGraph>(targetGraph){
    @Override public void visit(    TargetNode<?> node){
      BuildRule rule;
      try {
        rule=buildRuleGenerator.transform(targetGraph,ruleResolver,node,ruleKeyBuilderFactory);
      }
 catch (      NoSuchBuildTargetException e) {
        throw new HumanReadableException(e);
      }
      Optional<BuildRule> existingRule=ruleResolver.getRuleOptional(rule.getBuildTarget());
      Preconditions.checkState(!existingRule.isPresent() || existingRule.get().equals(rule));
      if (!existingRule.isPresent()) {
        ruleResolver.addToIndex(rule);
      }
    }
  }
;
  bottomUpTraversal.traverse();
  ActionGraph result=new ActionGraph(ruleResolver.getBuildRules());
  eventBus.post(ActionGraphEvent.finished(started));
  return result;
}
