{
  final ImmutableSet<String> fullyQualifiedBuildTargets=ImmutableSet.copyOf(options.getArgumentsFormattedAsBuildTargets(params.getBuckConfig()));
  if (fullyQualifiedBuildTargets.isEmpty()) {
    params.getConsole().printBuildFailure("Must specify at least one build target.");
    return 1;
  }
  ImmutableSet<BuildTarget> targets=FluentIterable.from(options.getArgumentsFormattedAsBuildTargets(params.getBuckConfig())).transform(new Function<String,BuildTarget>(){
    @Override public BuildTarget apply(    String input){
      return params.getParser().getBuildTargetParser().parse(input,BuildTargetPatternParser.fullyQualified(params.getParser().getBuildTargetParser()));
    }
  }
).toSet();
  TargetGraph graph;
  try {
    graph=params.getParser().buildTargetGraphForBuildTargets(targets,new ParserConfig(params.getBuckConfig()),params.getBuckEventBus(),params.getConsole(),params.getEnvironment(),options.getEnableProfiling());
  }
 catch (  BuildTargetException|BuildFileParseException e) {
    params.getConsole().printBuildFailureWithoutStacktrace(e);
    return 1;
  }
  TreeMultimap<BuildTarget,BuildTarget> targetsAndDependencies=TreeMultimap.create();
  for (  BuildTarget target : targets) {
    targetsAndDependencies.putAll(target,getDependenciesWithOptions(params,target,graph,options));
  }
  if (options.shouldGenerateJsonOutput()) {
    printJSON(params,targetsAndDependencies);
  }
 else {
    printToConsole(params,targetsAndDependencies);
  }
  return 0;
}
