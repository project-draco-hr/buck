{
  final ImmutableList.Builder<Step> relinkerSteps=ImmutableList.builder();
  if (isRelinkable) {
    ImmutableList<Arg> args=ImmutableList.<Arg>builder().addAll(linkerArgs).add(new StringArg("-Wl,--version-script=" + getRelativeVersionFilePath().toString())).build();
    relinkerSteps.addAll(new CxxLink(buildRuleParams.withFlavor(ImmutableFlavor.of("cxx-link")),getResolver(),linker,getLibFilePath(),args,cxxBuckConfig.getLinkScheduleInfo(),cxxBuckConfig.shouldCacheLinks()).getBuildSteps(context,buildableContext));
    buildableContext.recordArtifact(getRelativeVersionFilePath());
  }
  buildableContext.recordArtifact(getSymbolsNeededOutPath());
  return ImmutableList.of(new MkdirStep(getProjectFilesystem(),getScratchDirPath()),new AbstractExecutionStep("xdso-dce relinker"){
    @Override public int execute(    ExecutionContext context) throws IOException, InterruptedException {
      ImmutableSet<String> symbolsNeeded=readSymbolsNeeded();
      if (!isRelinkable) {
        getProjectFilesystem().copyFile(getBaseLibPath(),getLibFilePath());
      }
 else {
        writeVersionScript(symbolsNeeded);
        for (        Step s : relinkerSteps.build()) {
          if (s.execute(context) != 0) {
            return 1;
          }
        }
      }
      writeSymbols(getSymbolsNeededOutPath(),Sets.union(symbolsNeeded,getSymbols(getLibFilePath()).undefined));
      return 0;
    }
  }
);
}
