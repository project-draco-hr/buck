{
  TargetNode<?> nonPublicTargetNode1=createTargetNode(nonPublicTarget1,ImmutableSet.<BuildTargetPattern>of(new SingletonBuildTargetPattern(orcaTarget.getFullyQualifiedName())));
  TargetNode<?> nonPublicTargetNode2=createTargetNode(nonPublicTarget2,ImmutableSet.<BuildTargetPattern>of(new SingletonBuildTargetPattern("//some/other:target")));
  TargetNode<?> publicTargetNode=createTargetNode(publicTarget,ImmutableSet.of(BuildTargetPattern.MATCH_ALL));
  publicTargetNode.checkVisibility(orcaTarget);
  nonPublicTargetNode1.checkVisibility(orcaTarget);
  try {
    nonPublicTargetNode2.checkVisibility(orcaTarget);
    fail("checkVisibility() should throw an exception");
  }
 catch (  RuntimeException e) {
    assertEquals(String.format("%s depends on %s, which is not visible",orcaTarget,nonPublicTargetNode2.getBuildTarget()),e.getMessage());
  }
}
