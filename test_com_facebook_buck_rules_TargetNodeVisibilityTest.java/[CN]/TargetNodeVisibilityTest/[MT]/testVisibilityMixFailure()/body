{
  TargetNode<?> nonPublicTargetNode1=createTargetNode(nonPublicTarget1,VISIBLETO_ORCA);
  TargetNode<?> nonPublicTargetNode2=createTargetNode(nonPublicTarget2,VISIBLETO_SOME_OTHER);
  TargetNode<?> publicTargetNode=createTargetNode(publicTarget,VISIBLETO_PUBLIC);
  TargetNode<?> orcaRule=createTargetNode(orcaTarget);
  publicTargetNode.isVisibleToOrThrow(GRAPH,orcaRule);
  nonPublicTargetNode1.isVisibleToOrThrow(GRAPH,orcaRule);
  try {
    nonPublicTargetNode2.isVisibleToOrThrow(GRAPH,orcaRule);
    fail("checkVisibility() should throw an exception");
  }
 catch (  RuntimeException e) {
    assertEquals(String.format("%s depends on %s, which is not visible",orcaTarget,nonPublicTargetNode2.getBuildTarget()),e.getMessage());
  }
}
