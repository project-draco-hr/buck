{
  if (!(args.keystore.getBuildable() instanceof Keystore)) {
    throw new HumanReadableException("In %s, keystore='%s' must be a keystore() but was %s().",params.getBuildTarget(),args.keystore.getFullyQualifiedName(),args.keystore.getType().getName());
  }
  ProGuardObfuscateStep.SdkProguardType androidSdkProguardConfig=args.androidSdkProguardConfig.or(ProGuardObfuscateStep.SdkProguardType.DEFAULT);
  if (args.useAndroidProguardConfigWithOptimizations.isPresent()) {
    Preconditions.checkArgument(!args.androidSdkProguardConfig.isPresent(),"The deprecated use_android_proguard_config_with_optimizations parameter" + " cannot be used with android_sdk_proguard_config.");
    androidSdkProguardConfig=args.useAndroidProguardConfigWithOptimizations.or(false) ? ProGuardObfuscateStep.SdkProguardType.OPTIMIZED : ProGuardObfuscateStep.SdkProguardType.DEFAULT;
  }
  DexSplitMode dexSplitMode=createDexSplitMode(args);
  return new AndroidBinary(params,javacOptions,proguardJarOverride,args.manifest,args.target,args.deps.get(),(Keystore)args.keystore.getBuildable(),getPackageType(args),dexSplitMode,args.noDx.or(ImmutableSet.<BuildTarget>of()),androidSdkProguardConfig,args.optimizationPasses,args.proguardConfig,getCompressionMode(args),getCpuFilters(args),new FilterResourcesStep.ResourceFilter(args.resourceFilter.or(ImmutableList.<String>of())),args.buildStringSourceMap.or(false),args.disablePreDex.or(false),args.exopackage.or(false),args.preprocessJavaClassesDeps.or(ImmutableSet.<BuildRule>of()),args.preprocessJavaClassesBash);
}
