{
  ResourceCompressionMode compressionMode=getCompressionMode(args);
  BuildTarget target=params.getBuildTarget();
  boolean isFlavored=target.isFlavored();
  if (isFlavored) {
    if (target.getFlavors().contains(PACKAGE_STRING_ASSETS_FLAVOR) && !compressionMode.isStoreStringsAsAssets()) {
      throw new HumanReadableException("'package_string_assets' flavor does not exist for %s.",target.getUnflavoredBuildTarget());
    }
    params=params.copyWithBuildTarget(BuildTarget.of(target.getUnflavoredBuildTarget()));
  }
  BuildRule keystore=resolver.getRule(args.keystore);
  if (!(keystore instanceof Keystore)) {
    throw new HumanReadableException("In %s, keystore='%s' must be a keystore() but was %s().",params.getBuildTarget(),keystore.getFullyQualifiedName(),keystore.getType());
  }
  ProGuardObfuscateStep.SdkProguardType androidSdkProguardConfig=args.androidSdkProguardConfig.or(ProGuardObfuscateStep.SdkProguardType.DEFAULT);
  if (args.useAndroidProguardConfigWithOptimizations.isPresent()) {
    Preconditions.checkArgument(!args.androidSdkProguardConfig.isPresent(),"The deprecated use_android_proguard_config_with_optimizations parameter" + " cannot be used with android_sdk_proguard_config.");
    androidSdkProguardConfig=args.useAndroidProguardConfigWithOptimizations.or(false) ? ProGuardObfuscateStep.SdkProguardType.OPTIMIZED : ProGuardObfuscateStep.SdkProguardType.DEFAULT;
  }
  EnumSet<ExopackageMode> exopackageModes=EnumSet.noneOf(ExopackageMode.class);
  if (args.exopackageModes.isPresent() && !args.exopackageModes.get().isEmpty()) {
    exopackageModes=EnumSet.copyOf(args.exopackageModes.get());
  }
 else   if (args.exopackage.or(false)) {
    exopackageModes=EnumSet.of(ExopackageMode.SECONDARY_DEX);
  }
  DexSplitMode dexSplitMode=createDexSplitMode(args,exopackageModes);
  PackageType packageType=getPackageType(args);
  boolean shouldPreDex=!args.disablePreDex.or(false) && PackageType.DEBUG.equals(packageType) && !args.preprocessJavaClassesBash.isPresent();
  ResourceFilter resourceFilter=new ResourceFilter(args.resourceFilter.or(ImmutableList.<String>of()));
  AndroidBinaryGraphEnhancer graphEnhancer=new AndroidBinaryGraphEnhancer(params,resolver,compressionMode,resourceFilter,args.resourceUnionPackage,addFallbackLocales(args.locales.or(ImmutableSet.<String>of())),args.manifest,packageType,ImmutableSet.copyOf(args.cpuFilters.get()),args.buildStringSourceMap.or(false),shouldPreDex,AndroidBinary.getPrimaryDexPath(params.getBuildTarget(),params.getProjectFilesystem()),dexSplitMode,ImmutableSet.copyOf(args.noDx.or(ImmutableSet.<BuildTarget>of())),ImmutableSet.<BuildTarget>of(),args.skipCrunchPngs.or(false),javacOptions,exopackageModes,(Keystore)keystore,args.buildConfigValues.get(),args.buildConfigValuesFile,Optional.<Integer>absent(),nativePlatforms,args.enableRelinker.or(false) ? RelinkerMode.ENABLED : RelinkerMode.DISABLED,dxExecutorService,args.manifestEntries.get(),cxxBuckConfig);
  AndroidGraphEnhancementResult result=graphEnhancer.createAdditionalBuildables();
  if (target.getFlavors().contains(PACKAGE_STRING_ASSETS_FLAVOR)) {
    Optional<PackageStringAssets> packageStringAssets=result.getPackageStringAssets();
    Preconditions.checkState(packageStringAssets.isPresent());
    return packageStringAssets.get();
  }
  ImmutableSortedSet.Builder<BuildRule> builder=ImmutableSortedSet.naturalOrder();
  for (  BuildTarget noDxTarget : args.noDx.or(ImmutableSet.<BuildTarget>of())) {
    Optional<BuildRule> ruleOptional=resolver.getRuleOptional(noDxTarget);
    if (ruleOptional.isPresent()) {
      builder.add(ruleOptional.get());
    }
 else {
      LOG.info("%s: no_dx target not a dependency: %s",target,noDxTarget);
    }
  }
  ImmutableSortedSet<BuildRule> buildRulesToExcludeFromDex=builder.build();
  ImmutableSortedSet<JavaLibrary> rulesToExcludeFromDex=FluentIterable.from(buildRulesToExcludeFromDex).filter(JavaLibrary.class).toSortedSet(HasBuildTarget.BUILD_TARGET_COMPARATOR);
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  return new AndroidBinary(params.copyWithExtraDeps(Suppliers.ofInstance(result.getFinalDeps())).appendExtraDeps(pathResolver.filterBuildRuleInputs(result.getPackageableCollection().getProguardConfigs())).appendExtraDeps(rulesToExcludeFromDex),pathResolver,proGuardConfig.getProguardJarOverride(),proGuardConfig.getProguardMaxHeapSize(),proGuardConfig.getProguardAgentPath(),(Keystore)keystore,packageType,dexSplitMode,args.noDx.or(ImmutableSet.<BuildTarget>of()),androidSdkProguardConfig,args.optimizationPasses,args.proguardConfig,compressionMode,args.cpuFilters.get(),resourceFilter,exopackageModes,MACRO_HANDLER.getExpander(params.getBuildTarget(),params.getCellRoots(),resolver),args.preprocessJavaClassesBash,rulesToExcludeFromDex,result,args.reorderClassesIntraDex,args.dexReorderToolFile,args.dexReorderDataDumpFile,args.xzCompressionLevel,dxExecutorService,args.packageAssetLibraries,args.compressAssetLibraries,args.manifestEntries.or(ManifestEntries.empty()),javaOptions.getJavaRuntimeLauncher());
}
