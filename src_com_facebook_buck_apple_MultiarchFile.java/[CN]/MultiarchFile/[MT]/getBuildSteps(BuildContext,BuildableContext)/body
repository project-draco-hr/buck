{
  buildableContext.recordArtifact(output);
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  steps.add(new MkdirStep(getProjectFilesystem(),output.getParent()));
{
    ImmutableList.Builder<String> commandBuilder=ImmutableList.builder();
    commandBuilder.addAll(lipo.getCommandPrefix(getResolver()));
    commandBuilder.add("-create","-output",getProjectFilesystem().resolve(output).toString());
    for (    SourcePath thinBinary : thinBinaries) {
      commandBuilder.add(getResolver().getAbsolutePath(thinBinary).toString());
    }
    steps.add(new DefaultShellStep(getProjectFilesystem().getRootPath(),commandBuilder.build(),lipo.getEnvironment(getResolver())));
  }
{
    Path linkMapDir=Paths.get(output + "-LinkMap");
    steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),linkMapDir));
    for (    SourcePath thinBinary : thinBinaries) {
      Optional<BuildRule> maybeRule=getResolver().getRule(thinBinary);
      if (maybeRule.isPresent()) {
        BuildRule rule=maybeRule.get();
        if (rule instanceof CxxBinary) {
          rule=((CxxBinary)rule).getLinkRule();
        }
        if (rule instanceof CxxLink) {
          Optional<Path> maybeLinkerMapPath=((CxxLink)rule).getLinkerMapPath();
          if (maybeLinkerMapPath.isPresent()) {
            Path source=maybeLinkerMapPath.get();
            Path dest=linkMapDir.resolve(source.getFileName());
            steps.add(CopyStep.forFile(getProjectFilesystem(),source,dest));
            buildableContext.recordArtifact(dest);
          }
        }
      }
    }
  }
  return steps.build();
}
