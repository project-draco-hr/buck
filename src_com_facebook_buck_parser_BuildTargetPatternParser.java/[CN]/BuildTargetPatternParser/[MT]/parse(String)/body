{
  if (VISIBILITY_PUBLIC.equals(buildTargetPattern)) {
    if (isPublicVisibilityAllowed()) {
      return createForAll();
    }
 else {
      throw new BuildTargetParseException(String.format("%s not supported in the parse context",VISIBILITY_PUBLIC));
    }
  }
  Preconditions.checkArgument(buildTargetPattern.startsWith(BUILD_RULE_PREFIX),String.format("'%s' must start with '//'",buildTargetPattern));
  if (buildTargetPattern.equals(WILDCARD_BUILD_RULE_SUFFIX) || buildTargetPattern.endsWith("/" + WILDCARD_BUILD_RULE_SUFFIX)) {
    if (isWildCardAllowed()) {
      if (buildTargetPattern.contains(BUILD_RULE_SEPARATOR)) {
        throw new BuildTargetParseException(String.format("'%s' cannot contain colon",buildTargetPattern));
      }
      String basePathWithSlash=buildTargetPattern.substring(BUILD_RULE_PREFIX.length(),buildTargetPattern.length() - WILDCARD_BUILD_RULE_SUFFIX.length());
      return createForDescendants(basePathWithSlash);
    }
 else {
      throw new BuildTargetParseException(String.format("'%s' cannot end with '...'",buildTargetPattern));
    }
  }
  BuildTarget target=BuildTargetParser.INSTANCE.parse(buildTargetPattern,this);
  if (target.getShortNameAndFlavorPostfix().isEmpty()) {
    return createForChildren(target.getBasePathWithSlash());
  }
 else {
    return createForSingleton(target);
  }
}
