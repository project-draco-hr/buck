{
  Preconditions.checkNotNull(buildTargetPattern);
  if (buildTargetPattern.equals(VISIBILITY_PUBLIC)) {
    if (parseContext.getType() != ParseContext.Type.VISIBILITY) {
      throw new BuildTargetParseException(String.format("%s not supported in the parse context",VISIBILITY_PUBLIC));
    }
 else {
      return BuildTargetPattern.MATCH_ALL;
    }
  }
  Preconditions.checkArgument(buildTargetPattern.startsWith(BUILD_RULE_PREFIX),"buildTargetPattern must start with //");
  Preconditions.checkNotNull(parseContext);
  if (buildTargetPattern.endsWith(WILDCARD_BUILD_RULE_SUFFIX)) {
    if (parseContext.getType() != ParseContext.Type.VISIBILITY) {
      throw new BuildTargetParseException(String.format("%s cannot end with ...",buildTargetPattern));
    }
 else {
      if (buildTargetPattern.contains(BUILD_RULE_SEPARATOR)) {
        throw new BuildTargetParseException(String.format("%s cannot contain colon",buildTargetPattern));
      }
      String basePathWithSlash=buildTargetPattern.substring(BUILD_RULE_PREFIX.length(),buildTargetPattern.length() - WILDCARD_BUILD_RULE_SUFFIX.length());
      return new SubdirectoryBuildTargetPattern(basePathWithSlash);
    }
  }
 else {
    BuildTarget target=buildTargetParser.parse(buildTargetPattern,parseContext);
    if (target.getShortName().isEmpty()) {
      return new ImmediateDirectoryBuildTargetPattern(target.getBasePathWithSlash());
    }
 else {
      return new SingletonBuildTargetPattern(target.getFullyQualifiedName());
    }
  }
}
