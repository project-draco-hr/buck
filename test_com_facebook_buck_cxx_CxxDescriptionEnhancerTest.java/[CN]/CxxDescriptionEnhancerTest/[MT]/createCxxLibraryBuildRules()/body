{
  BuildRuleResolver resolver=new BuildRuleResolver();
  String sourceName="test/bar.cpp";
  String genHeaderName="test/foo.h";
  BuildTarget genHeaderTarget=BuildTargetFactory.newInstance("//:genHeader");
  Genrule genHeader=(Genrule)GenruleBuilder.newGenruleBuilder(genHeaderTarget).setOut(genHeaderName).build(resolver);
  String genSourceName="test/foo.cpp";
  BuildTarget genSourceTarget=BuildTargetFactory.newInstance("//:genSource");
  Genrule genSource=(Genrule)GenruleBuilder.newGenruleBuilder(genSourceTarget).setOut(genSourceName).build(resolver);
  final BuildRule header=createFakeBuildRule("//:header");
  final BuildRule headerSymlinkTree=createFakeBuildRule("//:symlink");
  final Path headerSymlinkTreeRoot=Paths.get("symlink/tree/root");
  final BuildRule staticLibraryDep=createFakeBuildRule("//:static");
  final Path staticLibraryOutput=Paths.get("output/path/lib.a");
  final BuildRule sharedLibraryDep=createFakeBuildRule("//:shared");
  final Path sharedLibraryOutput=Paths.get("output/path/lib.so");
  final String sharedLibrarySoname="soname";
  BuildTarget depTarget=BuildTargetFactory.newInstance("//:dep");
  BuildRuleParams depParams=BuildRuleParamsFactory.createTrivialBuildRuleParams(depTarget);
  CxxLibrary dep=new CxxLibrary(depParams){
    @Override public CxxPreprocessorInput getCxxPreprocessorInput(){
      return new CxxPreprocessorInput(ImmutableSet.of(header.getBuildTarget(),headerSymlinkTree.getBuildTarget()),ImmutableList.<String>of(),ImmutableList.<String>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableList.of(headerSymlinkTreeRoot),ImmutableList.<Path>of());
    }
    @Override public NativeLinkableInput getNativeLinkableInput(    Type type){
      return type == Type.STATIC ? new NativeLinkableInput(ImmutableList.<SourcePath>of(new BuildRuleSourcePath(staticLibraryDep)),ImmutableList.of(staticLibraryOutput.toString())) : new NativeLinkableInput(ImmutableList.<SourcePath>of(new BuildRuleSourcePath(sharedLibraryDep)),ImmutableList.of(sharedLibraryOutput.toString()));
    }
    @Override public PythonPackageComponents getPythonPackageComponents(){
      return new PythonPackageComponents(ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(Paths.get(sharedLibrarySoname),new PathSourcePath(sharedLibraryOutput)));
    }
  }
;
  resolver.addAllToIndex(ImmutableList.of(header,headerSymlinkTree,staticLibraryDep,sharedLibraryDep));
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).setDeps(ImmutableSortedSet.<BuildRule>of(dep)).build();
  CxxBuckConfig cxxBuckConfig=new CxxBuckConfig(new FakeBuckConfig());
  CxxLibrary rule=CxxDescriptionEnhancer.createCxxLibraryBuildRules(params,resolver,cxxBuckConfig,ImmutableList.<String>of(),ImmutableList.<String>of(),ImmutableMap.<Path,SourcePath>of(target.getBasePath().resolve(genHeaderName),new BuildRuleSourcePath(genHeader)),ImmutableList.<String>of(),ImmutableList.of(new CxxSource(sourceName,new TestSourcePath(sourceName)),new CxxSource(genSourceName,new BuildRuleSourcePath(genSource))),false);
  assertEquals(new CxxPreprocessorInput(ImmutableSet.of(CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target)),ImmutableList.<String>of(),ImmutableList.<String>of(),ImmutableMap.<Path,SourcePath>of(Paths.get(genHeaderName),new BuildRuleSourcePath(genHeader)),ImmutableList.of(CxxDescriptionEnhancer.getHeaderSymlinkTreePath(target)),ImmutableList.<Path>of()),rule.getCxxPreprocessorInput());
  BuildRule staticRule=resolver.getRule(CxxDescriptionEnhancer.createStaticLibraryBuildTarget(target));
  assertNotNull(staticRule);
  assertEquals(ImmutableSet.of(CxxCompilableEnhancer.createCompileBuildTarget(target,"test/bar.cpp",false),CxxCompilableEnhancer.createCompileBuildTarget(target,genSourceName,false)),FluentIterable.from(staticRule.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule staticCompileRule1=resolver.getRule(CxxCompilableEnhancer.createCompileBuildTarget(target,"test/bar.cpp",false));
  assertNotNull(staticCompileRule1);
  assertEquals(ImmutableSet.of(genHeaderTarget,headerSymlinkTree.getBuildTarget(),header.getBuildTarget(),CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target)),FluentIterable.from(staticCompileRule1.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule staticCompileRule2=resolver.getRule(CxxCompilableEnhancer.createCompileBuildTarget(target,genSourceName,false));
  assertNotNull(staticCompileRule2);
  assertEquals(ImmutableSet.of(genHeaderTarget,genSourceTarget,headerSymlinkTree.getBuildTarget(),header.getBuildTarget(),CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target)),FluentIterable.from(staticCompileRule2.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule sharedRule=resolver.getRule(CxxDescriptionEnhancer.createSharedLibraryBuildTarget(target));
  assertNotNull(sharedRule);
  assertEquals(ImmutableSet.of(sharedLibraryDep.getBuildTarget(),CxxCompilableEnhancer.createCompileBuildTarget(target,"test/bar.cpp",true),CxxCompilableEnhancer.createCompileBuildTarget(target,genSourceName,true)),FluentIterable.from(sharedRule.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule sharedCompileRule1=resolver.getRule(CxxCompilableEnhancer.createCompileBuildTarget(target,"test/bar.cpp",true));
  assertNotNull(sharedCompileRule1);
  assertEquals(ImmutableSet.of(genHeaderTarget,headerSymlinkTree.getBuildTarget(),header.getBuildTarget(),CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target)),FluentIterable.from(sharedCompileRule1.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule sharedCompileRule2=resolver.getRule(CxxCompilableEnhancer.createCompileBuildTarget(target,genSourceName,true));
  assertNotNull(sharedCompileRule2);
  assertEquals(ImmutableSet.of(genHeaderTarget,genSourceTarget,headerSymlinkTree.getBuildTarget(),header.getBuildTarget(),CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target)),FluentIterable.from(sharedCompileRule2.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  PythonPackageComponents expectedPythonPackageComponents=new PythonPackageComponents(ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(Paths.get(CxxDescriptionEnhancer.getSharedLibrarySoname(target)),new BuildRuleSourcePath(sharedRule)));
  assertEquals(expectedPythonPackageComponents,rule.getPythonPackageComponents());
}
