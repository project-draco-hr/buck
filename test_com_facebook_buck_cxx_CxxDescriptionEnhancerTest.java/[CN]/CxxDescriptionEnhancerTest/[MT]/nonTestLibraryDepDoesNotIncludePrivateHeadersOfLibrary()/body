{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget libTarget=BuildTargetFactory.newInstance("//:lib");
  BuildRuleParams libParams=BuildRuleParamsFactory.createTrivialBuildRuleParams(libTarget);
  FakeCxxLibrary libRule=new FakeCxxLibrary(libParams,pathResolver,BuildTargetFactory.newInstance("//:header"),BuildTargetFactory.newInstance("//:symlink"),Paths.get("symlink/tree/lib"),BuildTargetFactory.newInstance("//:privateheader"),BuildTargetFactory.newInstance("//:privatesymlink"),Paths.get("private/symlink/tree/lib"),new FakeBuildRule("//:archive",pathResolver),Paths.get("output/path/lib.a"),new FakeBuildRule("//:shared",pathResolver),Paths.get("output/path/lib.so"),"lib.so",ImmutableSortedSet.<BuildTarget>of());
  BuildTarget otherLibDepTarget=BuildTargetFactory.newInstance("//:other");
  BuildRuleParams otherLibDepParams=new FakeBuildRuleParamsBuilder(otherLibDepTarget).setDeps(ImmutableSortedSet.<BuildRule>of(libRule)).build();
  ImmutableList<CxxPreprocessorInput> otherInput=CxxDescriptionEnhancer.collectCxxPreprocessorInput(otherLibDepParams,CxxPlatformUtils.DEFAULT_PLATFORM,ImmutableMultimap.<CxxSource.Type,String>of(),ImmutableList.<SourcePath>of(),ImmutableList.<SymlinkTree>of(),ImmutableList.<Path>of(),CxxPreprocessables.getTransitiveCxxPreprocessorInput(CxxPlatformUtils.DEFAULT_PLATFORM,FluentIterable.from(otherLibDepParams.getDeps()).filter(Predicates.instanceOf(CxxPreprocessorDep.class))));
  assertThat("Non-test rule with library dep should include public and not private headers",CxxPreprocessorInput.concat(otherInput).getIncludeRoots(),allOf(hasItem(Paths.get("symlink/tree/lib")),not(hasItem(Paths.get("private/symlink/tree/lib")))));
}
