{
  FakeBuckConfig buckConfig=new FakeBuckConfig();
  DefaultCxxPlatform cxxBuckConfig=new DefaultCxxPlatform(buckConfig);
  Linker linker=new GnuLinker(new TestSourcePath("linker"));
  BuildTarget target=BuildTargetFactory.newInstance("//:test");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  String sourceName="test.cc";
  CxxSource source=new CxxSource(CxxSource.Type.CXX,new TestSourcePath(sourceName));
  CxxLibrary normal=CxxDescriptionEnhancer.createCxxLibraryBuildRules(params,new BuildRuleResolver(),cxxBuckConfig,ImmutableMultimap.<CxxSource.Type,String>of(),ImmutableMultimap.<CxxSource.Type,String>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableList.<String>of(),ImmutableMap.of(sourceName,source),false,Optional.<String>absent());
  assertFalse(normal.getNativeLinkableInput(linker,NativeLinkable.Type.STATIC).getArgs().contains("--whole-archive"));
  assertFalse(normal.getNativeLinkableInput(linker,NativeLinkable.Type.STATIC).getArgs().contains("--no-whole-archive"));
  CxxLibrary linkWhole=CxxDescriptionEnhancer.createCxxLibraryBuildRules(params,new BuildRuleResolver(),cxxBuckConfig,ImmutableMultimap.<CxxSource.Type,String>of(),ImmutableMultimap.<CxxSource.Type,String>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableList.<String>of(),ImmutableMap.of(sourceName,source),true,Optional.<String>absent());
  assertTrue(linkWhole.getNativeLinkableInput(linker,NativeLinkable.Type.STATIC).getArgs().contains("--whole-archive"));
  assertTrue(linkWhole.getNativeLinkableInput(linker,NativeLinkable.Type.STATIC).getArgs().contains("--no-whole-archive"));
}
