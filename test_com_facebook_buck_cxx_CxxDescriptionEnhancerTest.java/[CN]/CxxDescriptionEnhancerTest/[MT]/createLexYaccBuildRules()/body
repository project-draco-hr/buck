{
  BuildRuleResolver resolver=new BuildRuleResolver();
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  Path lexPath=Paths.get("lex");
  filesystem.touch(lexPath);
  Path yaccPath=Paths.get("yacc");
  filesystem.touch(yaccPath);
  FakeBuckConfig buckConfig=new FakeBuckConfig(ImmutableMap.of("cxx",ImmutableMap.of("lex",lexPath.toString(),"yacc",yaccPath.toString())),filesystem);
  CxxPlatform cxxBuckConfig=DefaultCxxPlatforms.build(new CxxBuckConfig(buckConfig));
  BuildTarget target=BuildTargetFactory.newInstance("//:test");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  String lexSourceName="test.ll";
  BuildTarget genruleTarget=BuildTargetFactory.newInstance("//:genrule_lex");
  Genrule genrule=(Genrule)GenruleBuilder.newGenruleBuilder(genruleTarget).setOut(lexSourceName).build(resolver);
  SourcePath lexSource=new BuildTargetSourcePath(filesystem,genrule.getBuildTarget());
  String yaccSourceName="test.yy";
  SourcePath yaccSource=new TestSourcePath(yaccSourceName);
  CxxHeaderSourceSpec actual=CxxDescriptionEnhancer.createLexYaccBuildRules(params,resolver,cxxBuckConfig,ImmutableList.<String>of(),ImmutableMap.of(lexSourceName,lexSource),ImmutableList.<String>of(),ImmutableMap.of(yaccSourceName,yaccSource));
  Lex lex=(Lex)resolver.getRule(CxxDescriptionEnhancer.createLexBuildTarget(target,lexSourceName));
  assertNotNull(lex);
  assertEquals(ImmutableSortedSet.<BuildRule>of(genrule),lex.getDeps());
  Yacc yacc=(Yacc)resolver.getRule(CxxDescriptionEnhancer.createYaccBuildTarget(target,yaccSourceName));
  assertNotNull(yacc);
  assertEquals(ImmutableSortedSet.<BuildRule>of(),yacc.getDeps());
  Path lexOutputSource=CxxDescriptionEnhancer.getLexSourceOutputPath(target,lexSourceName);
  Path lexOutputHeader=CxxDescriptionEnhancer.getLexHeaderOutputPath(target,lexSourceName);
  Path yaccOutputPrefix=CxxDescriptionEnhancer.getYaccOutputPrefix(target,Files.getNameWithoutExtension(yaccSourceName));
  Path yaccOutputSource=Yacc.getSourceOutputPath(yaccOutputPrefix);
  Path yaccOutputHeader=Yacc.getHeaderOutputPath(yaccOutputPrefix);
  CxxHeaderSourceSpec expected=CxxHeaderSourceSpec.of(ImmutableMap.<Path,SourcePath>of(target.getBasePath().resolve(lexSourceName + ".h"),new BuildTargetSourcePath(filesystem,lex.getBuildTarget(),lexOutputHeader),target.getBasePath().resolve(yaccSourceName + ".h"),new BuildTargetSourcePath(filesystem,yacc.getBuildTarget(),yaccOutputHeader)),ImmutableMap.of(lexSourceName + ".cc",CxxSource.of(CxxSource.Type.CXX,new BuildTargetSourcePath(filesystem,lex.getBuildTarget(),lexOutputSource),ImmutableList.<String>of()),yaccSourceName + ".cc",CxxSource.of(CxxSource.Type.CXX,new BuildTargetSourcePath(filesystem,yacc.getBuildTarget(),yaccOutputSource),ImmutableList.<String>of())));
  assertEquals(expected,actual);
}
