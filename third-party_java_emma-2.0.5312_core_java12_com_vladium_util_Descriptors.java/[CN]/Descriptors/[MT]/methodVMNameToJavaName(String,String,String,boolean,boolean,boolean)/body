{
  final StringBuffer out=new StringBuffer();
  if (renameInits) {
    if (IClassDefConstants.CLINIT_NAME.equals(methodVMName))     return "<static initializer>";
 else     if (IClassDefConstants.INIT_NAME.equals(methodVMName))     out.append(className);
 else     out.append(methodVMName);
  }
 else {
    if (IClassDefConstants.CLINIT_NAME.equals(methodVMName))     return IClassDefConstants.CLINIT_NAME;
 else     out.append(methodVMName);
  }
  final char[] chars=descriptor.toCharArray();
  int end;
  out.append(" (");
{
    for (end=chars.length; chars[--end] != ')'; )     ;
    for (int start=1; start < end; ) {
      if (start > 1)       out.append(", ");
      start=typeDescriptorToJavaName(chars,start,shortTypeNames,out);
    }
  }
  if (appendReturnType) {
    out.append("): ");
    typeDescriptorToJavaName(chars,end + 1,shortTypeNames,out);
  }
 else {
    out.append(')');
  }
  return out.toString();
}
