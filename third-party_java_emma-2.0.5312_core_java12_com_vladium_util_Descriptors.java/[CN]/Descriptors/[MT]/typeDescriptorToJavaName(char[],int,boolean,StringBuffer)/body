{
  int dims;
  for (dims=0; descriptor[start] == '['; ++dims, ++start)   ;
  char c=descriptor[start++];
switch (c) {
case 'L':
{
      if (shortTypeNames) {
        int lastSlash=-1;
        for (int s=start; descriptor[s] != ';'; ++s) {
          if (descriptor[s] == '/')           lastSlash=s;
        }
        for (start=lastSlash > 0 ? lastSlash + 1 : start; descriptor[start] != ';'; ++start) {
          c=descriptor[start];
          if (RENAME_INNER_CLASSES)           out.append(c != '$' ? c : '.');
 else           out.append(c);
        }
      }
 else {
        for (; descriptor[start] != ';'; ++start) {
          c=descriptor[start];
          out.append(c != '/' ? c : '.');
        }
      }
      ++start;
    }
  break;
case 'B':
out.append("byte");
break;
case 'C':
out.append("char");
break;
case 'D':
out.append("double");
break;
case 'F':
out.append("float");
break;
case 'I':
out.append("int");
break;
case 'J':
out.append("long");
break;
case 'S':
out.append("short");
break;
case 'Z':
out.append("boolean");
break;
case 'V':
out.append("void");
break;
default :
throw new IllegalStateException("unknown type descriptor element: " + c);
}
if (dims > 0) {
out.append(' ');
for (int d=0; d < dims; ++d) out.append("[]");
}
return start;
}
