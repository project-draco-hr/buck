{
  Capture<Runnable> capture=EasyMock.newCapture();
  EasyMock.expect(mockScheduler.scheduleWithFixedDelay(EasyMock.capture(capture),EasyMock.anyLong(),EasyMock.anyLong(),EasyMock.anyObject(TimeUnit.class))).andReturn(mockFuture).once();
  ResponseBody body=ResponseBody.create(MediaType.parse("text/plain"),"The Body.");
  Response response=new Response.Builder().body(body).code(200).protocol(Protocol.HTTP_1_1).request(new Request.Builder().url("http://dummy.url").build()).build();
  Call mockCall=EasyMock.createMock(Call.class);
  EasyMock.expect(mockCall.execute()).andReturn(response).times(SERVERS.size());
  EasyMock.expect(mockClient.newCall(EasyMock.anyObject(Request.class))).andReturn(mockCall).times(SERVERS.size());
  EasyMock.replay(mockClient,mockCall,mockScheduler);
  try (ClientSideSlb slb=new ClientSideSlb(config)){
    Runnable healthCheckLoop=capture.getValue();
    healthCheckLoop.run();
  }
   EasyMock.verify(mockClient,mockCall,mockScheduler);
}
