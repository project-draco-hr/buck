{
  Preconditions.checkState(isDirectory(pathRelativeToProjectRoot));
  final PathMatcher pathMatcher=FileSystems.getDefault().getPathMatcher("glob:" + globPattern);
  return FluentIterable.from(fileContents.keySet()).filter(new Predicate<Path>(){
    @Override public boolean apply(    Path input){
      return input.getParent().equals(pathRelativeToProjectRoot) && pathMatcher.matches(input.getFileName());
    }
  }
).toSortedSet(Ordering.natural().onResultOf(new Function<Path,FileTime>(){
    @Override public FileTime apply(    Path path){
      try {
        return getLastModifiedTimeFetcher().getLastModifiedTime(path);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
).compound(Ordering.natural()).reverse());
}
