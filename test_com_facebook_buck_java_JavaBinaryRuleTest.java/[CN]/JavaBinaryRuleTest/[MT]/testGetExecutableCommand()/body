{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  ruleResolver.buildAndAddToIndex(PrebuiltJarRule.newPrebuiltJarRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//third_party/generator:generator")).setBinaryJar(PATH_TO_GENERATOR_JAR).addVisibilityPattern(BuildTargetPattern.MATCH_ALL));
  ruleResolver.buildAndAddToIndex(PrebuiltJarRule.newPrebuiltJarRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//third_party/guava:guava")).setBinaryJar(PATH_TO_GUAVA_JAR).addVisibilityPattern(BuildTargetPattern.MATCH_ALL));
  ruleResolver.buildAndAddToIndex(DefaultJavaLibraryRule.newJavaLibraryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//java/com/facebook/base:base")).addSrc("java/com/facebook/base/Base.java").addDep(BuildTargetFactory.newInstance("//third_party/guava:guava")));
  JavaBinaryRule javaBinaryRule=ruleResolver.buildAndAddToIndex(JavaBinaryRule.newJavaBinaryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//java/com/facebook/base:Main")).addDep(BuildTargetFactory.newInstance("//java/com/facebook/base:base")).setMainClass("com.facebook.base.Main"));
  final String basePath=new File(".").getAbsolutePath().replaceFirst("\\.$","");
  String expectedClasspath=basePath + javaBinaryRule.getPathToOutputFile();
  String expectedCommand=String.format("java -jar %s",expectedClasspath);
  ProjectFilesystem projectFilesystem=createMock(ProjectFilesystem.class);
  Function<String,Path> pathRelativizer=new Function<String,Path>(){
    @Override public Path apply(    String path){
      return Paths.get(basePath,path);
    }
  }
;
  expect(projectFilesystem.getPathRelativizer()).andReturn(pathRelativizer);
  replay(projectFilesystem);
  assertEquals(expectedCommand,javaBinaryRule.getExecutableCommand(projectFilesystem));
  verify(projectFilesystem);
  assertFalse("Library rules that are used exclusively by genrules should not be part of the classpath.",expectedClasspath.contains(PATH_TO_GENERATOR_JAR));
}
