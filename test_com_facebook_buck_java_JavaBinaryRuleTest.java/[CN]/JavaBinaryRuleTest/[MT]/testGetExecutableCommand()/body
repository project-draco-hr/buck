{
  BuildRuleBuilderParams buildRuleBuilderParams=new BuildRuleBuilderParams();
  buildRuleBuilderParams.buildAndAddToIndex(PrebuiltJarRule.newPrebuiltJarRuleBuilder().setBuildTarget(BuildTargetFactory.newInstance("//third_party/generator:generator")).setBinaryJar(PATH_TO_GENERATOR_JAR).addVisibilityPattern(BuildTargetPattern.MATCH_ALL));
  buildRuleBuilderParams.buildAndAddToIndex(PrebuiltJarRule.newPrebuiltJarRuleBuilder().setBuildTarget(BuildTargetFactory.newInstance("//third_party/guava:guava")).setBinaryJar(PATH_TO_GUAVA_JAR).addVisibilityPattern(BuildTargetPattern.MATCH_ALL));
  JavaLibraryRule javaLibraryRule=buildRuleBuilderParams.buildAndAddToIndex(DefaultJavaLibraryRule.newJavaLibraryRuleBuilder().setBuildTarget(BuildTargetFactory.newInstance("//java/com/facebook/base:base")).addSrc("java/com/facebook/base/Base.java").addDep(BuildTargetFactory.newInstance("//third_party/guava:guava")));
  JavaBinaryRule javaBinaryRule=buildRuleBuilderParams.buildAndAddToIndex(JavaBinaryRule.newJavaBinaryRuleBuilder().setBuildTarget(BuildTargetFactory.newInstance("//java/com/facebook/base:Main")).addDep(BuildTargetFactory.newInstance("//java/com/facebook/base:base")).setMainClass("com.facebook.base.Main"));
  String basePath=new File(".").getAbsolutePath().replaceFirst("\\.$","");
  String expectedClasspath=basePath + PATH_TO_GUAVA_JAR + ":"+ basePath+ javaLibraryRule.getPathToOutputFile();
  String expectedCommand=String.format("java -classpath %s com.facebook.base.Main",expectedClasspath);
  assertEquals(expectedCommand,javaBinaryRule.getExecutableCommand());
  assertFalse("Library rules that are used exclusively by genrules should not be part of the classpath.",expectedClasspath.contains(PATH_TO_GENERATOR_JAR));
}
