{
  T arg=description.createUnpopulatedConstructorArg();
  for (  Field field : arg.getClass().getFields()) {
    Object value;
    if (field.getType().isAssignableFrom(ImmutableSortedSet.class)) {
      value=ImmutableSortedSet.of();
    }
 else     if (field.getType().isAssignableFrom(ImmutableList.class)) {
      value=ImmutableList.of();
    }
 else     if (field.getType().isAssignableFrom(ImmutableMap.class)) {
      value=ImmutableMap.of();
    }
 else     if (field.getType().isAssignableFrom(Optional.class)) {
      Type nonOptionalType=Types.getFirstNonOptionalType(field);
      TypeCoercerFactory typeCoercerFactory=new TypeCoercerFactory();
      TypeCoercer<?> typeCoercer=typeCoercerFactory.typeCoercerForType(nonOptionalType);
      value=typeCoercer.getOptionalValue();
    }
 else     if (field.getType().isAssignableFrom(String.class)) {
      value="";
    }
 else     if (field.getType().isAssignableFrom(Path.class)) {
      value=Paths.get("");
    }
 else     if (field.getType().isAssignableFrom(SourcePath.class)) {
      value=new PathSourcePath(new FakeProjectFilesystem(),Paths.get(""));
    }
 else     if (field.getType().isPrimitive()) {
      continue;
    }
 else {
      continue;
    }
    try {
      field.set(arg,value);
    }
 catch (    IllegalAccessException e) {
      throw new RuntimeException(e);
    }
  }
  return arg;
}
