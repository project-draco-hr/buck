{
  final File sourceFile=new File(TestDataHelper.getTestDataScenario(this,"xz_with_rm_and_check"),"xzstep.data");
  final File destinationFile=tmp.newFile("xzstep.data.xz");
  XzStep step=new XzStep(sourceFile.getPath(),destinationFile.getPath(),1,false,XZ.CHECK_CRC32);
  ProjectFilesystem fs=EasyMock.createMock(ProjectFilesystem.class);
  EasyMock.expect(fs.deleteFileAtPath(sourceFile.getPath())).andReturn(true);
  EasyMock.replay(fs);
  ExecutionContext context=TestExecutionContext.newBuilder().setProjectFilesystem(fs).build();
  assertEquals(0,step.execute(context));
  InputSupplier<FileInputStream> original=Files.newInputStreamSupplier(sourceFile);
  InputSupplier<InputStream> decompressed=new InputSupplier<InputStream>(){
    @Override public InputStream getInput() throws IOException {
      return new XZInputStream(new FileInputStream(destinationFile));
    }
  }
;
  assertTrue("Decompressed file must be identical to original.",ByteStreams.equal(decompressed,original));
  EasyMock.verify(fs);
}
