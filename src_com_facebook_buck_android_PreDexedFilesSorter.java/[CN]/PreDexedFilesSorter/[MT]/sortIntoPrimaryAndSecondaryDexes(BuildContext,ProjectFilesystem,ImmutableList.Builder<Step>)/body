{
  Map<APKModule,DexStoreContents> apkModuleDexesContents=new HashMap<>();
  DexStoreContents rootStoreContents=new DexStoreContents(apkModuleGraph.getRootAPKModule(),context,filesystem,steps);
  apkModuleDexesContents.put(apkModuleGraph.getRootAPKModule(),rootStoreContents);
  if (rDotJavaDex.isPresent()) {
    rootStoreContents.addPrimaryDex(rDotJavaDex.get());
  }
  for (  APKModule module : dexFilesToMerge.keySet()) {
    ImmutableList<DexWithClasses> sortedDexFilesToMerge=FluentIterable.from(dexFilesToMerge.get(module)).toSortedList(DexWithClasses.DEX_WITH_CLASSES_COMPARATOR);
    for (    DexWithClasses dexWithClasses : sortedDexFilesToMerge) {
      if (module.equals(apkModuleGraph.getRootAPKModule()) && mustBeInPrimaryDex(dexWithClasses)) {
        rootStoreContents.addPrimaryDex(dexWithClasses);
      }
 else {
        DexStoreContents storeContents=apkModuleDexesContents.get(module);
        if (storeContents == null) {
          storeContents=new DexStoreContents(module,context,filesystem,steps);
          apkModuleDexesContents.put(module,storeContents);
        }
        storeContents.addDex(dexWithClasses);
      }
    }
  }
  ImmutableMap.Builder<String,Result> resultBuilder=ImmutableMap.builder();
  for (  DexStoreContents contents : apkModuleDexesContents.values()) {
    resultBuilder.put(contents.apkModule.getName(),contents.getResult());
  }
  return resultBuilder.build();
}
