{
  final FileLike fileLike=CanaryFactory.create(storeName,index);
  final String canaryDirName="canary_" + storeName + "_"+ String.valueOf(index);
  final Path scratchDirectoryForCanaryClass=scratchDirectory.resolve(canaryDirName);
  final String relativePathToClassFile=fileLike.getRelativePath();
  Preconditions.checkState(relativePathToClassFile.endsWith(".class"));
  final String className=relativePathToClassFile.replaceFirst("\\.class$","");
  steps.add(new AbstractExecutionStep("write_canary_class"){
    @Override public StepExecutionResult execute(    ExecutionContext context){
      Path classFile=scratchDirectoryForCanaryClass.resolve(relativePathToClassFile);
      try (InputStream inputStream=fileLike.getInput()){
        filesystem.createParentDirs(classFile);
        filesystem.copyToPath(inputStream,classFile);
      }
 catch (      IOException e) {
        context.logError(e,"Error writing canary class file: %s.",classFile.toString());
        return StepExecutionResult.ERROR;
      }
      return StepExecutionResult.SUCCESS;
    }
  }
);
  return new DexWithClasses(){
    @Override public int getSizeEstimate(){
      return 0;
    }
    @Override public Path getPathToDexFile(){
      return scratchDirectoryForCanaryClass;
    }
    @Override public ImmutableSet<String> getClassNames(){
      return ImmutableSet.of(className);
    }
    @Override public Sha1HashCode getClassesHash(){
      Hasher hasher=Hashing.sha1().newHasher();
      hasher.putString(canaryDirName,Charsets.UTF_8);
      return Sha1HashCode.fromHashCode(hasher.hash());
    }
  }
;
}
