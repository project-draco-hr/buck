{
  ProjectFilesystem filesystem=params.getCell().getFilesystem();
  BuckConfig buckConfig=params.getBuckConfig();
  RageConfig rageConfig=RageBuckConfig.create(buckConfig);
  DirtyPrintStreamDecorator stdOut=params.getConsole().getStdOut();
  ProcessExecutor processExecutor=new ProcessExecutor(params.getConsole());
  VersionControlCmdLineInterfaceFactory vcsFactory=new DefaultVersionControlCmdLineInterfaceFactory(params.getCell().getFilesystem().getRootPath(),new PrintStreamProcessExecutorFactory(),new VersionControlBuckConfig(buckConfig),buckConfig.getEnvironment());
  Optional<VcsInfoCollector> vcsInfoCollector=VcsInfoCollector.create(vcsFactory.createCmdLineInterface());
  ExtraInfoCollector extraInfoCollector=new DefaultExtraInfoCollector(rageConfig,filesystem,processExecutor);
  AbstractReport report;
  if (params.getConsole().getAnsi().isAnsiTerminal() && !nonInteractive) {
    report=new InteractiveReport(new DefaultDefectReporter(filesystem,params.getObjectMapper(),rageConfig),filesystem,stdOut,params.getStdIn(),params.getBuildEnvironmentDescription(),vcsInfoCollector,rageConfig,extraInfoCollector);
  }
 else {
    report=new AutomatedReport(new DefaultDefectReporter(filesystem,params.getObjectMapper(),rageConfig),filesystem,stdOut,params.getBuildEnvironmentDescription(),gatherVcsInfo ? vcsInfoCollector : Optional.<VcsInfoCollector>absent(),rageConfig,extraInfoCollector);
  }
  Optional<DefectSubmitResult> defectSubmitResult=report.collectAndSubmitResult();
  if (!defectSubmitResult.isPresent()) {
    stdOut.println("No logs of interesting commands were found. Check if buck-out/log contains " + "commands except buck launch & buck rage.");
    return 0;
  }
  String reportLocation=defectSubmitResult.get().getReportSubmitLocation();
  if (defectSubmitResult.get().getUploadSuccess().isPresent()) {
    if (defectSubmitResult.get().getUploadSuccess().get()) {
      stdOut.printf("Uploading report to %s\n%s",reportLocation,defectSubmitResult.get().getReportSubmitMessage().get());
    }
 else {
      stdOut.printf("%s\nReport saved at %s\n",defectSubmitResult.get().getReportSubmitErrorMessage().get(),reportLocation);
    }
  }
 else {
    stdOut.printf("Report saved at %s\n",reportLocation);
  }
  return 0;
}
