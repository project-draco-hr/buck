{
  ProjectFilesystem filesystem=params.getCell().getFilesystem();
  BuckConfig buckConfig=params.getBuckConfig();
  RageConfig rageConfig=RageBuckConfig.create(buckConfig);
  DirtyPrintStreamDecorator stdOut=params.getConsole().getStdOut();
  ProcessExecutor processExecutor=new ProcessExecutor(params.getConsole());
  VersionControlCmdLineInterfaceFactory vcsFactory=new DefaultVersionControlCmdLineInterfaceFactory(params.getCell().getFilesystem().getRootPath(),new PrintStreamProcessExecutorFactory(),new VersionControlBuckConfig(buckConfig),buckConfig.getEnvironment());
  Optional<VcsInfoCollector> vcsInfoCollector=VcsInfoCollector.create(vcsFactory.createCmdLineInterface());
  ExtraInfoCollector extraInfoCollector=new DefaultExtraInfoCollector(rageConfig,filesystem,processExecutor);
  AbstractReport report;
  if (params.getConsole().getAnsi().isAnsiTerminal() && !nonInteractive) {
    report=new InteractiveReport(new DefaultDefectReporter(filesystem,params.getObjectMapper(),rageConfig),filesystem,stdOut,params.getStdIn(),params.getBuildEnvironmentDescription(),vcsInfoCollector,rageConfig,extraInfoCollector);
  }
 else {
    report=new AutomatedReport(new DefaultDefectReporter(filesystem,params.getObjectMapper(),rageConfig),filesystem,stdOut,params.getBuildEnvironmentDescription(),gatherVcsInfo ? vcsInfoCollector : Optional.<VcsInfoCollector>absent(),rageConfig,extraInfoCollector);
  }
  DefectSubmitResult defectSubmitResult=report.collectAndSubmitResult();
  String uploadPrefix=(defectSubmitResult.getReportSubmitLocation().startsWith("http://")) ? ("Uploading report to") : ("Report saved to");
  stdOut.printf("%s %s\n",uploadPrefix,defectSubmitResult.getReportSubmitLocation());
  if (defectSubmitResult.getReportSubmitMessage().isPresent()) {
    stdOut.println(defectSubmitResult.getReportSubmitMessage().get());
  }
  return 0;
}
