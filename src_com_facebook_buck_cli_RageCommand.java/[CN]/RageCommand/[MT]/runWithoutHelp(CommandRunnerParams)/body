{
  ProjectFilesystem filesystem=params.getCell().getFilesystem();
  BuckConfig buckConfig=params.getBuckConfig();
  RageConfig rageConfig=RageBuckConfig.create(buckConfig);
  DirtyPrintStreamDecorator stdOut=params.getConsole().getStdOut();
  VersionControlCmdLineInterfaceFactory vcsFactory=new DefaultVersionControlCmdLineInterfaceFactory(params.getCell().getFilesystem().getRootPath(),new PrintStreamProcessExecutorFactory(),new VersionControlBuckConfig(buckConfig),buckConfig.getEnvironment());
  AbstractReport report;
  Optional<VcsInfoCollector> vcsInfoCollector=VcsInfoCollector.create(vcsFactory.createCmdLineInterface());
  if (params.getConsole().getAnsi().isAnsiTerminal() && !nonInteractive) {
    report=new InteractiveReport(new DefectReporter(filesystem,params.getObjectMapper(),rageConfig),filesystem,stdOut,params.getStdIn(),params.getBuildEnvironmentDescription(),vcsInfoCollector);
  }
 else {
    report=new AutomatedReport(new DefectReporter(filesystem,params.getObjectMapper(),rageConfig),filesystem,stdOut,params.getBuildEnvironmentDescription(),gatherVcsInfo ? vcsInfoCollector : Optional.<VcsInfoCollector>absent());
  }
  DefectSubmitResult defectSubmitResult=report.collectAndSubmitResult();
  stdOut.printf("Report saved to %s\n",defectSubmitResult.getReportSubmitLocation());
  if (defectSubmitResult.getReportSubmitMessage().isPresent()) {
    stdOut.println(defectSubmitResult.getReportSubmitMessage().get());
  }
  return 0;
}
