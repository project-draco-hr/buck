{
  if (!artifactCache.isPresent()) {
    response.getWriter().write("Serving local cache is disabled for this instance.");
    return HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
  }
  Path temp=null;
  try {
    projectFilesystem.mkdirs(projectFilesystem.getBuckPaths().getScratchDir());
    temp=projectFilesystem.createTempFile(projectFilesystem.getBuckPaths().getScratchDir(),"incoming_upload",".tmp");
    StoreResponseReadResult storeRequest;
    try (DataInputStream requestInputData=new DataInputStream(baseRequest.getInputStream());OutputStream tempFileOutputStream=projectFilesystem.newFileOutputStream(temp)){
      storeRequest=HttpArtifactCacheBinaryProtocol.readStoreRequest(requestInputData,tempFileOutputStream);
    }
     if (!storeRequest.getActualHashCode().equals(storeRequest.getExpectedHashCode())) {
      response.getWriter().write("Checksum mismatch.");
      return HttpServletResponse.SC_NOT_ACCEPTABLE;
    }
    artifactCache.get().store(ArtifactInfo.builder().setRuleKeys(storeRequest.getRuleKeys()).setMetadata(storeRequest.getMetadata()).build(),BorrowablePath.notBorrowablePath(temp));
    return HttpServletResponse.SC_ACCEPTED;
  }
  finally {
    if (temp != null) {
      projectFilesystem.deleteFileAtPathIfExists(temp);
    }
  }
}
