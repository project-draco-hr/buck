{
  final ImmutableSet.Builder<BuildTarget> requiredBuildTargets=ImmutableSet.builder();
  IjLibraryFactory libraryFactory=new DefaultIjLibraryFactory(new DefaultIjLibraryFactory.IjLibraryFactoryResolver(){
    @Override public Path getPath(    SourcePath path){
      Optional<BuildRule> rule=sourcePathResolver.getRule(path);
      if (rule.isPresent()) {
        requiredBuildTargets.add(rule.get().getBuildTarget());
      }
      return projectFilesystem.getRootPath().relativize(sourcePathResolver.getAbsolutePath(path));
    }
    @Override public Optional<Path> getPathIfJavaLibrary(    TargetNode<?> targetNode){
      BuildRule rule=buildRuleResolver.getRule(targetNode.getBuildTarget());
      if (!(rule instanceof JavaLibrary)) {
        return Optional.absent();
      }
      if (rule instanceof AndroidPrebuiltAar) {
        AndroidPrebuiltAar aarRule=(AndroidPrebuiltAar)rule;
        return Optional.fromNullable(aarRule.getBinaryJar());
      }
      requiredBuildTargets.add(rule.getBuildTarget());
      return Optional.fromNullable(rule.getPathToOutput());
    }
  }
);
  IjModuleFactory.IjModuleFactoryResolver moduleFactoryResolver=new IjModuleFactory.IjModuleFactoryResolver(){
    private Function<SourcePath,Path> getAbsolutePathAndRecordRuleFunction=new Function<SourcePath,Path>(){
      @Override public Path apply(      SourcePath input){
        return getRelativePathAndRecordRule(input);
      }
    }
;
    @Override public Optional<Path> getDummyRDotJavaPath(    TargetNode<?> targetNode){
      BuildTarget dummyRDotJavaTarget=AndroidLibraryGraphEnhancer.getDummyRDotJavaTarget(targetNode.getBuildTarget());
      Optional<BuildRule> dummyRDotJavaRule=buildRuleResolver.getRuleOptional(dummyRDotJavaTarget);
      if (dummyRDotJavaRule.isPresent()) {
        requiredBuildTargets.add(dummyRDotJavaTarget);
        return Optional.of(DummyRDotJava.getRDotJavaBinFolder(dummyRDotJavaTarget,projectFilesystem));
      }
      return Optional.absent();
    }
    @Override public Path getAndroidManifestPath(    TargetNode<AndroidBinaryDescription.Arg> targetNode){
      return sourcePathResolver.getAbsolutePath(targetNode.getConstructorArg().manifest);
    }
    @Override public Optional<Path> getProguardConfigPath(    TargetNode<AndroidBinaryDescription.Arg> targetNode){
      return targetNode.getConstructorArg().proguardConfig.transform(getAbsolutePathAndRecordRuleFunction);
    }
    @Override public Optional<Path> getAndroidResourcePath(    TargetNode<AndroidResourceDescription.Arg> targetNode){
      return targetNode.getConstructorArg().res.transform(getAbsolutePathAndRecordRuleFunction);
    }
    @Override public Optional<Path> getAssetsPath(    TargetNode<AndroidResourceDescription.Arg> targetNode){
      return targetNode.getConstructorArg().assets.transform(getAbsolutePathAndRecordRuleFunction);
    }
    @Override public Optional<Path> getAnnotationOutputPath(    TargetNode<? extends JvmLibraryArg> targetNode){
      AnnotationProcessingParams annotationProcessingParams=targetNode.getConstructorArg().buildAnnotationProcessingParams(targetNode.getBuildTarget(),projectFilesystem,buildRuleResolver);
      if (annotationProcessingParams == null || annotationProcessingParams.isEmpty()) {
        return Optional.<Path>absent();
      }
      return Optional.fromNullable(annotationProcessingParams.getGeneratedSourceFolderName()).or(Optional.<Path>absent());
    }
    private Path getRelativePathAndRecordRule(    SourcePath sourcePath){
      requiredBuildTargets.addAll(sourcePathResolver.getRule(sourcePath).transform(HasBuildTarget.TO_TARGET).asSet());
      return sourcePathResolver.getRelativePath(sourcePath);
    }
  }
;
  IjModuleGraph moduleGraph=IjModuleGraph.from(targetGraphAndTargets.getTargetGraph(),libraryFactory,new IjModuleFactory(moduleFactoryResolver,excludeArtifacts),aggregationMode);
  JavaPackageFinder parsingJavaPackageFinder=ParsingJavaPackageFinder.preparse(javaFileParser,projectFilesystem,IjProjectTemplateDataPreparer.createPackageLookupPathSet(moduleGraph),javaPackageFinder);
  IjProjectWriter writer=new IjProjectWriter(new IjProjectTemplateDataPreparer(parsingJavaPackageFinder,moduleGraph,projectFilesystem),projectFilesystem);
  writer.write(buckConfig,runPostGenerationCleaner);
  return requiredBuildTargets.build();
}
