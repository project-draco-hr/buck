{
  ProjectWorkspace projectWorkspace=TestDataHelper.createProjectWorkspaceForScenario(this,"simple_java_target",temporaryFolder);
  projectWorkspace.setUp();
  Cell cell=projectWorkspace.asCell();
  ProjectFilesystem projectFilesystem=cell.getFilesystem();
  projectFilesystem.mkdirs(projectFilesystem.getBuckPaths().getBuckOut());
  BuckConfig buckConfig=cell.getBuckConfig();
  TypeCoercerFactory typeCoercerFactory=new DefaultTypeCoercerFactory(ObjectMappers.newDefaultInstance());
  ConstructorArgMarshaller constructorArgMarshaller=new ConstructorArgMarshaller(typeCoercerFactory);
  Parser parser=new Parser(new BroadcastEventListener(),new ParserConfig(buckConfig),typeCoercerFactory,constructorArgMarshaller);
  TargetGraph targetGraph=parser.buildTargetGraph(BuckEventBusFactory.newInstance(),cell,false,MoreExecutors.listeningDecorator(Executors.newSingleThreadExecutor()),ImmutableSet.of(BuildTargetFactory.newInstance(projectFilesystem.getRootPath(),"//:lib")));
  DistBuildTargetGraphCodec targetGraphCodec=createDefaultCodec(cell,Optional.of(parser));
  BuildJobState dump=DistBuildState.dump(new DistBuildCellIndexer(cell),emptyActionGraph(),targetGraphCodec,targetGraph);
  Cell rootCellWhenLoading=new TestCellBuilder().setFilesystem(createJavaOnlyFilesystem("/loading")).build();
  DistBuildState distributedBuildState=DistBuildState.load(dump,rootCellWhenLoading);
  TargetGraph reconstructedGraph=distributedBuildState.createTargetGraph(targetGraphCodec);
  assertThat(reconstructedGraph.getNodes(),Matchers.hasSize(1));
  TargetNode<JavaLibraryDescription.Arg> reconstructedJavaLibrary=FluentIterable.from(reconstructedGraph.getNodes()).get(0).castArg(JavaLibraryDescription.Arg.class).get();
  ProjectFilesystem reconstructedCellFilesystem=distributedBuildState.getCells().get(0).getFilesystem();
  assertThat(reconstructedJavaLibrary.getConstructorArg().srcs.get(),Matchers.<SourcePath>contains(new PathSourcePath(reconstructedCellFilesystem,reconstructedCellFilesystem.getRootPath().getFileSystem().getPath("A.java"))));
}
