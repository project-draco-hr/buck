{
  ProjectFilesystem parentFs=createJavaOnlyFilesystem("/saving");
  Path cell1Root=parentFs.resolve("cell1");
  Path cell2Root=parentFs.resolve("cell2");
  parentFs.mkdirs(cell1Root);
  parentFs.mkdirs(cell2Root);
  ProjectFilesystem cell1Filesystem=new ProjectFilesystem(cell1Root);
  ProjectFilesystem cell2Filesystem=new ProjectFilesystem(cell2Root);
  Config config=new Config(ConfigBuilder.rawFromLines("[repositories]","cell2 = " + cell2Root.toString()));
  BuckConfig buckConfig=new BuckConfig(config,cell1Filesystem,Architecture.detect(),Platform.detect(),ImmutableMap.<String,String>builder().putAll(System.getenv()).put("envKey","envValue").build(),new DefaultCellPathResolver(cell1Root,config));
  Cell rootCellWhenSaving=new TestCellBuilder().setFilesystem(cell1Filesystem).setBuckConfig(buckConfig).build();
  BuildJobState dump=DistributedBuildState.dump(rootCellWhenSaving,emptyActionGraph(),createDefaultCodec(rootCellWhenSaving,Optional.<Parser>absent()),createCrossCellTargetGraph(cell1Filesystem,cell2Filesystem));
  Cell rootCellWhenLoading=new TestCellBuilder().setFilesystem(createJavaOnlyFilesystem("/loading")).build();
  DistributedBuildState distributedBuildState=DistributedBuildState.load(dump,rootCellWhenLoading);
  ImmutableMap<Integer,Cell> cells=distributedBuildState.getCells();
  assertThat(cells,Matchers.aMapWithSize(2));
}
