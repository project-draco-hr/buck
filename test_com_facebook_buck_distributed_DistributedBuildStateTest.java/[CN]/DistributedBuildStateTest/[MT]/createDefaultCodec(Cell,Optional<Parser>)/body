{
  final ObjectMapper objectMapper=ObjectMappers.newDefaultInstance();
  final BuckEventBus eventBus=BuckEventBusFactory.newInstance();
  Function<? super TargetNode<?>,? extends Map<String,Object>> nodeToRawNode;
  if (parser.isPresent()) {
    nodeToRawNode=new Function<TargetNode<?>,Map<String,Object>>(){
      @Override public Map<String,Object> apply(      TargetNode<?> input){
        try {
          return parser.get().getRawTargetNode(eventBus,cell.getCell(input.getBuildTarget()),false,MoreExecutors.listeningDecorator(MoreExecutors.newDirectExecutorService()),input);
        }
 catch (        BuildFileParseException|InterruptedException e) {
          throw new RuntimeException(e);
        }
      }
    }
;
  }
 else {
    nodeToRawNode=Functions.constant(ImmutableMap.<String,Object>of());
  }
  DistributedBuildTypeCoercerFactory typeCoercerFactory=new DistributedBuildTypeCoercerFactory(objectMapper);
  ParserTargetNodeFactory parserTargetNodeFactory=DefaultParserTargetNodeFactory.createForDistributedBuild(eventBus,new ConstructorArgMarshaller(typeCoercerFactory),typeCoercerFactory);
  return new DistributedBuildTargetGraphCodec(objectMapper,parserTargetNodeFactory,nodeToRawNode);
}
