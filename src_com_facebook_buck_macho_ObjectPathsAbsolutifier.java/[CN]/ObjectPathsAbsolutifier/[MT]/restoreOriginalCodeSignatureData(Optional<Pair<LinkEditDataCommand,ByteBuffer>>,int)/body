{
  if (!codeSignatureData.isPresent()) {
    LOG.info("Code had no code signature to relocate, skipping code signature update");
    return Optional.absent();
  }
  if (stringTableSizeIncrease == 0) {
    LOG.info("String table size did not change, skipping code signature update");
    return Optional.absent();
  }
  LinkEditDataCommand command=codeSignatureData.get().getFirst();
  ByteBuffer contents=codeSignatureData.get().getSecond();
  contents.position(0);
  Preconditions.checkArgument(contents.capacity() > 0,"Contents of code signature is 0 bytes");
  SymTabCommand symTabCommand=getSymTabCommand();
  int unalignedCodeSignatureOffset=symTabCommand.getStroff().intValue() + symTabCommand.getStrsize().intValue();
  int alignedCodeSignatureOffset=LinkEditDataCommandUtils.alignCodeSignatureOffsetValue(unalignedCodeSignatureOffset);
  LinkEditDataCommand updated=command.withDataoff(UnsignedInteger.fromIntBits(alignedCodeSignatureOffset));
  updateFileSizeTo(updated.getDataoff().plus(updated.getDatasize()).intValue());
  LOG.verbose("Re-positioning code signature to " + updated.getDataoff().intValue());
  buffer.position(updated.getDataoff().intValue());
  buffer.put(contents);
  LOG.verbose("Updating LC_CODE_SIGNATURE for new code signature position");
  LinkEditDataCommandUtils.updateLinkEditDataCommand(buffer,command,updated);
  return Optional.of(updated);
}
