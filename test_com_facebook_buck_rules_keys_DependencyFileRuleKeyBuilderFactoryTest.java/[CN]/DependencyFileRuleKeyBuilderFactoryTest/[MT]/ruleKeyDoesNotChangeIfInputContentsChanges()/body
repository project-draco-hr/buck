{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  Path output=Paths.get("output");
  BuildRule rule=ExportFileBuilder.newExportFileBuilder(BuildTargetFactory.newInstance("//:rule")).setOut("out").setSrc(new PathSourcePath(filesystem,output)).build(resolver,filesystem);
  FakeFileHashCache hashCache=new FakeFileHashCache(ImmutableMap.of(output,HashCode.fromInt(0)));
  DefaultRuleKeyBuilderFactory defaultRuleKeyBuilderFactory1=new DefaultRuleKeyBuilderFactory(hashCache,pathResolver);
  RuleKey inputKey1=new DefaultDependencyFileRuleKeyBuilderFactory(hashCache,pathResolver,defaultRuleKeyBuilderFactory1).build(rule,ImmutableList.<Path>of());
  hashCache=new FakeFileHashCache(ImmutableMap.of(output,HashCode.fromInt(1)));
  DefaultRuleKeyBuilderFactory defaultRuleKeyBuilderFactory2=new DefaultRuleKeyBuilderFactory(hashCache,pathResolver);
  RuleKey inputKey2=new DefaultDependencyFileRuleKeyBuilderFactory(hashCache,pathResolver,defaultRuleKeyBuilderFactory2).build(rule,ImmutableList.<Path>of());
  assertThat(inputKey1,Matchers.equalTo(inputKey2));
}
