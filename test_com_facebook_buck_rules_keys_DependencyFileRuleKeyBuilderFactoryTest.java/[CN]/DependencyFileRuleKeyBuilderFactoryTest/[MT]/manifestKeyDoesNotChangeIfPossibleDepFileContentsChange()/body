{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  final FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  final Path output=Paths.get("output");
  BuildRuleParams depParams=new FakeBuildRuleParamsBuilder("//:dep").build();
  final BuildRule dep=new FakeDepFileBuildRule(depParams,pathResolver).setOutputPath(output);
  resolver.addToIndex(dep);
  final BuildTargetSourcePath inputSourcePath=new BuildTargetSourcePath(dep.getBuildTarget());
  BuildRuleParams params=new FakeBuildRuleParamsBuilder("//:rule").build();
  FakeDepFileBuildRule rule=new FakeDepFileBuildRule(params,pathResolver){
{
      setPossibleInputPaths(ImmutableSet.<SourcePath>of(inputSourcePath));
    }
    @AddToRuleKey SourcePath input=inputSourcePath;
  }
;
  FakeFileHashCache hashCache=new FakeFileHashCache(ImmutableMap.of(filesystem.resolve(output),HashCode.fromInt(0)));
  RuleKey manifestKey1=new DefaultDependencyFileRuleKeyBuilderFactory(0,hashCache,pathResolver).buildManifestKey(rule).get().getFirst();
  hashCache=new FakeFileHashCache(ImmutableMap.of(filesystem.resolve(output),HashCode.fromInt(1)));
  RuleKey manifestKey2=new DefaultDependencyFileRuleKeyBuilderFactory(0,hashCache,pathResolver).buildManifestKey(rule).get().getFirst();
  assertThat(manifestKey1,Matchers.equalTo(manifestKey2));
}
