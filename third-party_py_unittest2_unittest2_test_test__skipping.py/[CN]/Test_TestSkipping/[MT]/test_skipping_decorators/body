def test_skipping_decorators(self):
    op_table = ((unittest2.skipUnless, False, True), (unittest2.skipIf, True, False))
    for (deco, do_skip, dont_skip) in op_table:


        class Foo(unittest2.TestCase):

            @deco(do_skip, 'testing')
            def test_skip(self):
                pass

            @deco(dont_skip, 'testing')
            def test_dont_skip(self):
                pass
        test_do_skip = Foo('test_skip')
        test_dont_skip = Foo('test_dont_skip')
        suite = unittest2.TestSuite([test_do_skip, test_dont_skip])
        events = []
        result = LoggingResult(events)
        suite.run(result)
        self.assertEqual(len(result.skipped), 1)
        expected = ['startTest', 'addSkip', 'stopTest', 'startTest', 'addSuccess', 'stopTest']
        self.assertEqual(events, expected)
        self.assertEqual(result.testsRun, 2)
        self.assertEqual(result.skipped, [(test_do_skip, 'testing')])
        self.assertTrue(result.wasSuccessful())
