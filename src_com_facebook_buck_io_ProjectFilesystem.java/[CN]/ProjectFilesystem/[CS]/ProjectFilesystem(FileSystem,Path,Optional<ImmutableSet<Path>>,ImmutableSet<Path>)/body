{
  Preconditions.checkArgument(Files.isDirectory(root));
  Preconditions.checkState(vfs.equals(root.getFileSystem()));
  this.projectRoot=root.toAbsolutePath();
  this.pathAbsolutifier=new Function<Path,Path>(){
    @Override public Path apply(    Path path){
      return resolve(path);
    }
  }
;
  this.pathRelativizer=new Function<Path,Path>(){
    @Override public Path apply(    Path input){
      return projectRoot.relativize(input);
    }
  }
;
  this.blackListedPaths=MorePaths.filterForSubpaths(blackListedPaths,projectRoot);
  this.whiteListedPaths=whiteListedPaths.transform(new Function<ImmutableSet<Path>,ImmutableSet<Path>>(){
    @Override public ImmutableSet<Path> apply(    ImmutableSet<Path> input){
      return MorePaths.filterForSubpaths(input,ProjectFilesystem.this.projectRoot);
    }
  }
);
  this.ignoreValidityOfPaths=false;
}
