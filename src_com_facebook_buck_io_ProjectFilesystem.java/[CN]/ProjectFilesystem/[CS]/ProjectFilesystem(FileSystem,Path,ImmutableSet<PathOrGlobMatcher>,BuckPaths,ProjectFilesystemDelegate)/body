{
  Preconditions.checkArgument(Files.isDirectory(root));
  Preconditions.checkState(vfs.equals(root.getFileSystem()));
  Preconditions.checkArgument(root.isAbsolute());
  this.projectRoot=MorePaths.normalize(root);
  this.delegate=delegate;
  this.pathAbsolutifier=new Function<Path,Path>(){
    @Override public Path apply(    Path path){
      return resolve(path);
    }
  }
;
  this.pathRelativizer=new Function<Path,Path>(){
    @Override public Path apply(    Path input){
      return projectRoot.relativize(input);
    }
  }
;
  this.ignoreValidityOfPaths=false;
  this.blackListedPaths=FluentIterable.from(blackListedPaths).append(FluentIterable.from(ImmutableSet.of(getCacheDir(root,Optional.of(buckPaths.getCacheDir().toString()),buckPaths))).append(ImmutableSet.of(buckPaths.getTrashDir())).transform(PathOrGlobMatcher.toPathMatcher())).toSet();
  this.buckPaths=buckPaths;
  this.blackListedDirectories=FluentIterable.from(this.blackListedPaths).filter(new Predicate<PathOrGlobMatcher>(){
    @Override public boolean apply(    PathOrGlobMatcher matcher){
      return matcher.getType() == PathOrGlobMatcher.Type.PATH;
    }
  }
).transform(new Function<PathOrGlobMatcher,Path>(){
    @Override public Path apply(    PathOrGlobMatcher matcher){
      Path path=matcher.getPath();
      ImmutableSet<Path> filtered=MorePaths.filterForSubpaths(ImmutableSet.of(path),root);
      if (filtered.isEmpty()) {
        return path;
      }
      return Iterables.getOnlyElement(filtered);
    }
  }
).append(ImmutableSet.of(buckPaths.getBuckOut())).transform(PathOrGlobMatcher.toPathMatcher()).append(Iterables.filter(this.blackListedPaths,new Predicate<PathOrGlobMatcher>(){
    @Override public boolean apply(    PathOrGlobMatcher input){
      return input.getType() == PathOrGlobMatcher.Type.GLOB;
    }
  }
)).toSet();
  this.tmpDir=Suppliers.memoize(new Supplier<Path>(){
    @Override public Path get(){
      Path relativeTmpDir=ProjectFilesystem.this.buckPaths.getTmpDir();
      try {
        mkdirs(relativeTmpDir);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
      return relativeTmpDir;
    }
  }
);
}
