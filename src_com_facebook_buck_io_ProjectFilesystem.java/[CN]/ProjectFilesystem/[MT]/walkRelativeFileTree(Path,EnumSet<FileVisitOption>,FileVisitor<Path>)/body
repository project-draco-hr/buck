{
  Path rootPath=getPathForRelativePath(pathRelativeToProjectRoot);
  Files.walkFileTree(rootPath,visitOptions,Integer.MAX_VALUE,new FileVisitor<Path>(){
    @Override public FileVisitResult preVisitDirectory(    Path dir,    BasicFileAttributes attrs) throws IOException {
      return fileVisitor.preVisitDirectory(projectRoot.relativize(dir),attrs);
    }
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      return fileVisitor.visitFile(projectRoot.relativize(file),attrs);
    }
    @Override public FileVisitResult visitFileFailed(    Path file,    IOException exc) throws IOException {
      return fileVisitor.visitFileFailed(projectRoot.relativize(file),exc);
    }
    @Override public FileVisitResult postVisitDirectory(    Path dir,    IOException exc) throws IOException {
      return fileVisitor.postVisitDirectory(projectRoot.relativize(dir),exc);
    }
  }
);
}
