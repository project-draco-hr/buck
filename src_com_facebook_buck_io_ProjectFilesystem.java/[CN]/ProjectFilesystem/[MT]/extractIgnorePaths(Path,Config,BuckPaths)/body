{
  ImmutableSet.Builder<PathOrGlobMatcher> builder=ImmutableSet.builder();
  builder.add(new PathOrGlobMatcher(root,".idea"));
  final String projectKey="project";
  final String ignoreKey="ignore";
  String buckdDirProperty=System.getProperty(BUCK_BUCKD_DIR_KEY,".buckd");
  if (!Strings.isNullOrEmpty(buckdDirProperty)) {
    builder.add(new PathOrGlobMatcher(root,buckdDirProperty));
  }
  Path cacheDir=getCacheDir(root,config.getValue("cache","dir"),buckPaths);
  builder.add(new PathOrGlobMatcher(cacheDir));
  builder.addAll(FluentIterable.from(config.getListWithoutComments(projectKey,ignoreKey)).transform(new Function<String,PathOrGlobMatcher>(){
    @Nullable @Override public PathOrGlobMatcher apply(    String input){
      if (buckPaths.getBuckOut().toString().equals(input)) {
        return null;
      }
      if (GLOB_CHARS.matcher(input).find()) {
        return new PathOrGlobMatcher(root.getFileSystem().getPathMatcher("glob:" + input),input);
      }
      return new PathOrGlobMatcher(root,input);
    }
  }
).filter(Predicates.<PathOrGlobMatcher>notNull()).toList());
  return builder.build();
}
