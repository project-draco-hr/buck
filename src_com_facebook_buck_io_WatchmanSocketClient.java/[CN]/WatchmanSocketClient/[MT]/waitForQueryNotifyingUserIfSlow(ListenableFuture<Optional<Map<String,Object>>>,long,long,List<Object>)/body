{
  long queryStartNanos=clock.nanoTime();
  try {
    return future.get(Math.min(timeoutNanos,pollTimeNanos),TimeUnit.NANOSECONDS);
  }
 catch (  TimeoutException e) {
    long remainingNanos=timeoutNanos - (clock.nanoTime() - queryStartNanos);
    if (remainingNanos > 0) {
      console.getStdErr().getRawStream().format("Waiting for Watchman query [%s]...\n",query);
      try {
        return future.get(remainingNanos,TimeUnit.NANOSECONDS);
      }
 catch (      TimeoutException te) {
        LOG.debug("Timed out");
      }
    }
    LOG.warn("Watchman did not respond within %d ms, disabling.",TimeUnit.NANOSECONDS.toMillis(TIMEOUT_NANOS));
    console.getStdErr().getRawStream().format("Timed out after %d ms waiting for Watchman command [%s]. Disabling Watchman.\n",TimeUnit.NANOSECONDS.toMillis(TIMEOUT_NANOS),query);
    return Optional.absent();
  }
}
