{
  BuildRuleParams buildRuleParams=new FakeBuildRuleParamsBuilder("//:output_folder").setProjectFilesystem(filesystem).build();
  ImmutableList<SourcePath> directories=ImmutableList.<SourcePath>of(new FakeSourcePath(filesystem,"res_in_1"),new FakeSourcePath(filesystem,"res_in_2"));
  MergeAndroidResourceSources mergeAndroidResourceSourcesStep=new MergeAndroidResourceSources(buildRuleParams,new SourcePathResolver(new BuildRuleResolver()),directories);
  ImmutableList<Step> steps=mergeAndroidResourceSourcesStep.getBuildSteps(FakeBuildContext.NOOP_CONTEXT,new FakeBuildableContext());
  assertThat(steps,Matchers.contains(Matchers.hasProperty("shortName",Matchers.equalTo("rm_&&_mkdir")),Matchers.instanceOf(MergeAndroidResourceSourcesStep.class)));
  String resIn1=filesystem.getRootPath().resolve("res_in_1").toString();
  String resIn2=filesystem.getRootPath().resolve("res_in_2").toString();
  assertThat(FluentIterable.from(steps).transform(stepDescriptionFunction),Matchers.contains(Matchers.stringContainsInOrder("rm","mkdir"),Matchers.startsWith(String.format("merge-resources %s,%s -> ",resIn1,resIn2))));
}
