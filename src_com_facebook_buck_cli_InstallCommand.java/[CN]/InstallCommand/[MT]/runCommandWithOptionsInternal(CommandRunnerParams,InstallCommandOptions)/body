{
  if (options.getArguments().size() != 1) {
    params.getConsole().getStdErr().println("Must specify exactly one android_binary() or apk_genrule() rule.");
    return 1;
  }
  BuildCommand buildCommand=new BuildCommand();
  int exitCode=buildCommand.runCommandWithOptions(params,options);
  if (exitCode != 0) {
    return exitCode;
  }
  Build build=buildCommand.getBuild();
  ActionGraph graph=build.getActionGraph();
  BuildRule buildRule=Preconditions.checkNotNull(graph.findBuildRuleByTarget(buildCommand.getBuildTargets().get(0)));
  if (buildRule == null || !(buildRule instanceof InstallableApk)) {
    params.getConsole().printBuildFailure(String.format("Specified rule %s must be of type android_binary() or apk_genrule() but was %s().\n",buildRule.getFullyQualifiedName(),buildRule.getType().getName()));
    return 1;
  }
  InstallableApk installableApk=(InstallableApk)buildRule;
  final AdbHelper adbHelper=new AdbHelper(options.adbOptions(),options.targetDeviceOptions(),build.getExecutionContext(),params.getConsole(),params.getBuckEventBus(),params.getBuckConfig());
  if (options.shouldUninstallFirst()) {
    String packageName=AdbHelper.tryToExtractPackageNameFromManifest(installableApk,build.getExecutionContext());
    adbHelper.uninstallApp(packageName,options.uninstallOptions());
  }
  boolean installSuccess;
  Optional<ExopackageInfo> exopackageInfo=installableApk.getExopackageInfo();
  if (exopackageInfo.isPresent()) {
    installSuccess=new ExopackageInstaller(build.getExecutionContext(),adbHelper,installableApk).install();
  }
 else {
    installSuccess=adbHelper.installApk(installableApk,options);
  }
  if (!installSuccess) {
    return 1;
  }
  if (options.shouldStartActivity()) {
    exitCode=adbHelper.startActivity(installableApk,options.getActivityToStart());
    if (exitCode != 0) {
      return exitCode;
    }
  }
  return exitCode;
}
