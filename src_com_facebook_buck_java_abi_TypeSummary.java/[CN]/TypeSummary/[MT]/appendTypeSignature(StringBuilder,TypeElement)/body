{
  ElementKind kind=element.getKind();
  builder.append(Annotations.printAnnotations(element.getAnnotationMirrors()));
  builder.append(Modifiers.printModifiers(element.getModifiers()));
switch (kind) {
case ANNOTATION_TYPE:
    builder.append("@interface ");
  break;
case CLASS:
builder.append("class ");
break;
case ENUM:
builder.append("enum ");
break;
case INTERFACE:
builder.append("interface ");
break;
default :
throw new RuntimeException("Unhandled kind: " + kind);
}
builder.append(element.getQualifiedName());
List<? extends TypeParameterElement> typeParams=element.getTypeParameters();
if (!typeParams.isEmpty()) {
builder.append("<");
Joiner.on(", ").appendTo(builder,typeParams);
builder.append(">");
}
if (kind == CLASS) {
builder.append(" extends ").append(element.getSuperclass());
}
List<String> converted=Lists.newArrayList(Lists.transform(element.getInterfaces(),MIRROR_TO_STRING));
Collections.sort(converted);
if (!converted.isEmpty()) {
if (kind == CLASS || kind == ENUM) {
builder.append(" implements ");
}
 else {
builder.append(" extends ");
}
Joiner.on(", ").appendTo(builder,converted);
}
builder.append("\n");
}
