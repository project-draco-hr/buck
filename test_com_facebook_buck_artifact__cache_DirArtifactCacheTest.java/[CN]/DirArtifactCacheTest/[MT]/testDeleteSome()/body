{
  Path cacheDir=tmpDir.newFolder();
  Path fileW=cacheDir.resolve("11").resolve("11").resolve("w");
  Path fileX=cacheDir.resolve("22").resolve("22").resolve("x");
  Path fileY=cacheDir.resolve("33").resolve("33").resolve("y");
  Path fileZ=cacheDir.resolve("44").resolve("44").resolve("z");
  Files.createDirectories(fileW.getParent());
  Files.createDirectories(fileX.getParent());
  Files.createDirectories(fileY.getParent());
  Files.createDirectories(fileZ.getParent());
  dirArtifactCache=new DirArtifactCache("dir",new ProjectFilesystem(cacheDir),Paths.get("."),true,Optional.of(3L));
  Files.write(fileW,"w".getBytes(UTF_8));
  Files.write(fileX,"x".getBytes(UTF_8));
  Files.write(fileY,"y".getBytes(UTF_8));
  Files.write(fileZ,"z".getBytes(UTF_8));
  Files.setAttribute(fileW,"lastAccessTime",FileTime.fromMillis(9000));
  Files.setAttribute(fileX,"lastAccessTime",FileTime.fromMillis(0));
  Files.setAttribute(fileY,"lastAccessTime",FileTime.fromMillis(1000));
  Files.setAttribute(fileZ,"lastAccessTime",FileTime.fromMillis(2000));
  assertEquals(4,cacheDir.toFile().listFiles().length);
  dirArtifactCache.deleteOldFiles();
  File[] filesInCache=dirArtifactCache.getAllFilesInCache();
  assertEquals(ImmutableSet.of(fileZ,fileW),FluentIterable.of(filesInCache).transform(new Function<File,Path>(){
    @Override public Path apply(    File input){
      return input.toPath();
    }
  }
).toSet());
}
