{
  Path cacheDir=tmpDir.newFolder();
  Path fileX=tmpDir.newFile("x");
  Path fileY=tmpDir.newFile("y");
  fileHashCache=new FakeFileHashCache(ImmutableMap.of(fileX,HashCode.fromInt(0),fileY,HashCode.fromInt(1)));
  dirArtifactCache=new DirArtifactCache("dir",new ProjectFilesystem(cacheDir),Paths.get("."),true,Optional.<Long>absent());
  Files.write(fileX,"x".getBytes(UTF_8));
  Files.write(fileY,"y".getBytes(UTF_8));
  BuildRule inputRuleX=new BuildRuleForTest(fileX);
  BuildRule inputRuleY=new BuildRuleForTest(fileY);
  assertFalse(inputRuleX.equals(inputRuleY));
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  ruleResolver.addToIndex(inputRuleX);
  ruleResolver.addToIndex(inputRuleY);
  SourcePathResolver resolver=new SourcePathResolver(ruleResolver);
  DefaultRuleKeyBuilderFactory fakeRuleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(0,fileHashCache,resolver);
  RuleKey ruleKeyX=fakeRuleKeyBuilderFactory.build(inputRuleX);
  RuleKey ruleKeyY=fakeRuleKeyBuilderFactory.build(inputRuleY);
  dirArtifactCache.store(ArtifactInfo.builder().addRuleKeys(ruleKeyX).build(),BorrowablePath.borrowablePath(fileX));
  dirArtifactCache.store(ArtifactInfo.builder().addRuleKeys(ruleKeyY).build(),BorrowablePath.notBorrowablePath(fileY));
  assertThat(Files.exists(fileX),Matchers.is(false));
  assertThat(Files.exists(fileY),Matchers.is(true));
}
