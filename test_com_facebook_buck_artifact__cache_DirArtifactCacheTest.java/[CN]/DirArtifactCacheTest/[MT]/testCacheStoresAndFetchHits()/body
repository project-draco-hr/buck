{
  Path cacheDir=tmpDir.newFolder();
  Path fileX=tmpDir.newFile("x");
  Path fileY=tmpDir.newFile("y");
  Path fileZ=tmpDir.newFile("z");
  fileHashCache=new FakeFileHashCache(ImmutableMap.of(fileX,HashCode.fromInt(0),fileY,HashCode.fromInt(1),fileZ,HashCode.fromInt(2)));
  dirArtifactCache=new DirArtifactCache("dir",new ProjectFilesystem(cacheDir),Paths.get("."),true,Optional.<Long>absent());
  Files.write(fileX,"x".getBytes(UTF_8));
  Files.write(fileY,"y".getBytes(UTF_8));
  Files.write(fileZ,"x".getBytes(UTF_8));
  BuildRule inputRuleX=new BuildRuleForTest(fileX);
  BuildRule inputRuleY=new BuildRuleForTest(fileY);
  BuildRule inputRuleZ=new BuildRuleForTest(fileZ);
  assertFalse(inputRuleX.equals(inputRuleY));
  assertFalse(inputRuleX.equals(inputRuleZ));
  assertFalse(inputRuleY.equals(inputRuleZ));
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  ruleResolver.addToIndex(inputRuleX);
  ruleResolver.addToIndex(inputRuleY);
  ruleResolver.addToIndex(inputRuleZ);
  SourcePathResolver resolver=new SourcePathResolver(ruleResolver);
  DefaultRuleKeyBuilderFactory fakeRuleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(fileHashCache,resolver);
  RuleKey ruleKeyX=fakeRuleKeyBuilderFactory.build(inputRuleX);
  RuleKey ruleKeyY=fakeRuleKeyBuilderFactory.build(inputRuleY);
  RuleKey ruleKeyZ=fakeRuleKeyBuilderFactory.build(inputRuleZ);
  assertEquals(CacheResultType.MISS,dirArtifactCache.fetch(ruleKeyX,fileX).getType());
  assertEquals(CacheResultType.MISS,dirArtifactCache.fetch(ruleKeyY,fileY).getType());
  assertEquals(CacheResultType.MISS,dirArtifactCache.fetch(ruleKeyZ,fileZ).getType());
  dirArtifactCache.store(ImmutableSet.of(ruleKeyX),ImmutableMap.<String,String>of(),fileX);
  dirArtifactCache.store(ImmutableSet.of(ruleKeyY),ImmutableMap.<String,String>of(),fileY);
  dirArtifactCache.store(ImmutableSet.of(ruleKeyZ),ImmutableMap.<String,String>of(),fileZ);
  Files.delete(fileX);
  Files.delete(fileY);
  Files.delete(fileZ);
  assertEquals(CacheResultType.HIT,dirArtifactCache.fetch(ruleKeyX,fileX).getType());
  assertEquals(CacheResultType.HIT,dirArtifactCache.fetch(ruleKeyY,fileY).getType());
  assertEquals(CacheResultType.HIT,dirArtifactCache.fetch(ruleKeyZ,fileZ).getType());
  assertEquals(inputRuleX,new BuildRuleForTest(fileX));
  assertEquals(inputRuleY,new BuildRuleForTest(fileY));
  assertEquals(inputRuleZ,new BuildRuleForTest(fileZ));
  assertEquals(6,cacheDir.toFile().listFiles().length);
}
