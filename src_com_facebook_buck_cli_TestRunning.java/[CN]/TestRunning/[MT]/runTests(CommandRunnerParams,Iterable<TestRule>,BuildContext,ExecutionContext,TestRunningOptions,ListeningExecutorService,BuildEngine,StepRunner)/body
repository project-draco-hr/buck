{
  if (options.isUsingOneTimeOutputDirectories()) {
    BuckConstant.setOneTimeTestSubdirectory(UUID.randomUUID().toString());
  }
  ImmutableSet<JavaLibrary> rulesUnderTest;
  if (options.isCodeCoverageEnabled()) {
    rulesUnderTest=getRulesUnderTest(tests);
    if (!rulesUnderTest.isEmpty()) {
      try {
        JavaLibrary library=rulesUnderTest.iterator().next();
        stepRunner.runStepForBuildTarget(new MakeCleanDirectoryStep(library.getProjectFilesystem(),JACOCO_OUTPUT_DIR),Optional.<BuildTarget>absent());
      }
 catch (      StepFailedException e) {
        params.getBuckEventBus().post(ConsoleEvent.severe(Throwables.getRootCause(e).getLocalizedMessage()));
        return 1;
      }
    }
  }
 else {
    rulesUnderTest=ImmutableSet.of();
  }
  final ImmutableSet<String> testTargets=FluentIterable.from(tests).transform(HasBuildTarget.TO_TARGET).transform(Functions.toStringFunction()).toSet();
  final int totalNumberOfTests=Iterables.size(tests);
  params.getBuckEventBus().post(TestRunEvent.started(options.isRunAllTests(),options.getTestSelectorList(),options.shouldExplainTestSelectorList(),testTargets));
  List<ListenableFuture<TestResults>> results=Lists.newArrayList();
  TestRuleKeyFileHelper testRuleKeyFileHelper=new TestRuleKeyFileHelper(buildEngine);
  final AtomicInteger lastReportedTestSequenceNumber=new AtomicInteger();
  final List<TestRun> separateTestRuns=Lists.newArrayList();
  List<TestRun> parallelTestRuns=Lists.newArrayList();
  for (  final TestRule test : tests) {
    boolean isTestRunRequired;
    isTestRunRequired=isTestRunRequiredForTest(test,buildEngine,executionContext,testRuleKeyFileHelper,options.isResultsCacheEnabled(),!options.getTestSelectorList().isEmpty());
    final Map<String,UUID> testUUIDMap=new HashMap<>();
    final AtomicReference<TestStatusMessageEvent.Started> currentTestStatusMessageEvent=new AtomicReference<>();
    TestRule.TestReportingCallback testReportingCallback=new TestRule.TestReportingCallback(){
      @Override public void testsDidBegin(){
        LOG.debug("Tests for rule %s began",test.getBuildTarget());
      }
      @Override public void statusDidBegin(      TestStatusMessage didBeginMessage){
        LOG.debug("Test status did begin: %s",didBeginMessage);
        TestStatusMessageEvent.Started startedEvent=TestStatusMessageEvent.started(didBeginMessage);
        TestStatusMessageEvent.Started previousEvent=currentTestStatusMessageEvent.getAndSet(startedEvent);
        Preconditions.checkState(previousEvent == null,"Received begin status before end status (%s)",previousEvent);
        params.getBuckEventBus().post(startedEvent);
      }
      @Override public void statusDidEnd(      TestStatusMessage didEndMessage){
        LOG.debug("Test status did end: %s",didEndMessage);
        TestStatusMessageEvent.Started previousEvent=currentTestStatusMessageEvent.getAndSet(null);
        Preconditions.checkState(previousEvent != null,"Received end status before begin status (%s)",previousEvent);
        params.getBuckEventBus().post(TestStatusMessageEvent.finished(previousEvent,didEndMessage));
      }
      @Override public void testDidBegin(      String testCaseName,      String testName){
        LOG.debug("Test rule %s test case %s test name %s began",test.getBuildTarget(),testCaseName,testName);
        UUID testUUID=UUID.randomUUID();
        testUUIDMap.put(testCaseName + ":" + testName,testUUID);
        params.getBuckEventBus().post(TestSummaryEvent.started(testUUID,testCaseName,testName));
      }
      @Override public void testDidEnd(      TestResultSummary testResultSummary){
        LOG.debug("Test rule %s test did end: %s",test.getBuildTarget(),testResultSummary);
        UUID testUUID=testUUIDMap.get(testResultSummary.getTestCaseName() + ":" + testResultSummary.getTestName());
        Preconditions.checkNotNull(testUUID);
        params.getBuckEventBus().post(TestSummaryEvent.finished(testUUID,testResultSummary));
      }
      @Override public void testsDidEnd(      List<TestCaseSummary> testCaseSummaries){
        LOG.debug("Test rule %s tests did end: %s",test.getBuildTarget(),testCaseSummaries);
      }
    }
;
    List<Step> steps;
    if (isTestRunRequired) {
      params.getBuckEventBus().post(IndividualTestEvent.started(testTargets));
      ImmutableList.Builder<Step> stepsBuilder=ImmutableList.builder();
      Preconditions.checkState(buildEngine.isRuleBuilt(test.getBuildTarget()));
      List<Step> testSteps=test.runTests(buildContext,executionContext,options,testReportingCallback);
      if (!testSteps.isEmpty()) {
        stepsBuilder.addAll(testSteps);
        stepsBuilder.add(testRuleKeyFileHelper.createRuleKeyInDirStep(test));
      }
      steps=stepsBuilder.build();
    }
 else {
      steps=ImmutableList.of();
    }
    TestRun testRun=TestRun.of(test,steps,getCachingStatusTransformingCallable(isTestRunRequired,test.interpretTestResults(executionContext,!options.getTestSelectorList().isEmpty(),options.isDryRun())),testReportingCallback);
    if (test.runTestSeparately()) {
      LOG.debug("Running test %s in serial",test);
      separateTestRuns.add(testRun);
    }
 else {
      LOG.debug("Running test %s in parallel",test);
      parallelTestRuns.add(testRun);
    }
  }
  final StepRunner.StepRunningCallback testStepRunningCallback=new StepRunner.StepRunningCallback(){
    @Override public void stepsWillRun(    Optional<BuildTarget> buildTarget){
      Preconditions.checkState(buildTarget.isPresent());
      LOG.debug("Test steps will run for %s",buildTarget);
      params.getBuckEventBus().post(TestRuleEvent.started(buildTarget.get()));
    }
    @Override public void stepsDidRun(    Optional<BuildTarget> buildTarget){
      Preconditions.checkState(buildTarget.isPresent());
      LOG.debug("Test steps did run for %s",buildTarget);
      params.getBuckEventBus().post(TestRuleEvent.finished(buildTarget.get()));
    }
  }
;
  for (  TestRun testRun : parallelTestRuns) {
    ListenableFuture<TestResults> testResults=stepRunner.runStepsAndYieldResult(testRun.getSteps(),testRun.getTestResultsCallable(),Optional.of(testRun.getTest().getBuildTarget()),service,testStepRunningCallback);
    results.add(transformTestResults(params,testResults,testRun.getTest(),testRun.getTestReportingCallback(),testTargets,lastReportedTestSequenceNumber,totalNumberOfTests));
  }
  ListenableFuture<List<TestResults>> parallelTestStepsFuture=Futures.allAsList(results);
  final List<TestResults> completedResults=Lists.newArrayList();
  final ListeningExecutorService directExecutorService=MoreExecutors.newDirectExecutorService();
  ListenableFuture<Void> uberFuture=stepRunner.addCallback(parallelTestStepsFuture,new FutureCallback<List<TestResults>>(){
    @Override public void onSuccess(    List<TestResults> parallelTestResults){
      LOG.debug("Parallel tests completed, running separate tests...");
      completedResults.addAll(parallelTestResults);
      List<ListenableFuture<TestResults>> separateResultsList=Lists.newArrayList();
      for (      TestRun testRun : separateTestRuns) {
        separateResultsList.add(transformTestResults(params,stepRunner.runStepsAndYieldResult(testRun.getSteps(),testRun.getTestResultsCallable(),Optional.of(testRun.getTest().getBuildTarget()),directExecutorService,testStepRunningCallback),testRun.getTest(),testRun.getTestReportingCallback(),testTargets,lastReportedTestSequenceNumber,totalNumberOfTests));
      }
      ListenableFuture<List<TestResults>> serialResults=Futures.allAsList(separateResultsList);
      try {
        completedResults.addAll(serialResults.get());
      }
 catch (      ExecutionException e) {
        LOG.error(e,"Error fetching serial test results");
        throw new HumanReadableException(e,"Error fetching serial test results");
      }
catch (      InterruptedException e) {
        LOG.error(e,"Interrupted fetching serial test results");
        try {
          serialResults.cancel(true);
        }
 catch (        CancellationException ignored) {
        }
        Thread.currentThread().interrupt();
        throw new HumanReadableException(e,"Test cancelled");
      }
      LOG.debug("Done running serial tests.");
    }
    @Override public void onFailure(    Throwable e){
      LOG.error(e,"Parallel tests failed, not running serial tests");
      throw new HumanReadableException(e,"Parallel tests failed");
    }
  }
,directExecutorService);
  try {
    uberFuture.get();
  }
 catch (  ExecutionException e) {
    e.printStackTrace(params.getConsole().getStdErr());
    return 1;
  }
catch (  InterruptedException e) {
    try {
      uberFuture.cancel(true);
    }
 catch (    CancellationException ignored) {
    }
    Thread.currentThread().interrupt();
    throw e;
  }
  params.getBuckEventBus().post(TestRunEvent.finished(testTargets,completedResults));
  Optional<String> path=options.getPathToXmlTestOutput();
  if (path.isPresent()) {
    try (Writer writer=Files.newWriter(new File(path.get()),Charsets.UTF_8)){
      writeXmlOutput(completedResults,writer);
    }
   }
  if (options.isCodeCoverageEnabled() && !rulesUnderTest.isEmpty()) {
    try {
      Optional<DefaultJavaPackageFinder> defaultJavaPackageFinderOptional=Optional.fromNullable(params.getBuckConfig().createDefaultJavaPackageFinder());
      stepRunner.runStepForBuildTarget(getReportCommand(rulesUnderTest,defaultJavaPackageFinderOptional,new JavaBuckConfig(params.getBuckConfig()).getDefaultJavaOptions().getJavaRuntimeLauncher(),params.getCell().getFilesystem(),JACOCO_OUTPUT_DIR,options.getCoverageReportFormat(),options.getCoverageReportTitle()),Optional.<BuildTarget>absent());
    }
 catch (    StepFailedException e) {
      params.getBuckEventBus().post(ConsoleEvent.severe(Throwables.getRootCause(e).getLocalizedMessage()));
      return 1;
    }
  }
  boolean failures=Iterables.any(completedResults,new Predicate<TestResults>(){
    @Override public boolean apply(    TestResults results){
      LOG.debug("Checking result %s for failure",results);
      return !results.isSuccess();
    }
  }
);
  return failures ? TEST_FAILURES_EXIT_CODE : 0;
}
