{
  final SettableFuture<TestResults> transformedTestResults=SettableFuture.create();
  FutureCallback<TestResults> callback=new FutureCallback<TestResults>(){
    private TestResults postTestResults(    TestResults testResults){
      if (!testRule.supportsStreamingTests()) {
        LOG.debug("Simulating streaming test events for rule %s",testRule);
        testReportingCallback.testsDidBegin();
        for (        TestCaseSummary testCaseSummary : testResults.getTestCases()) {
          for (          TestResultSummary testResultSummary : testCaseSummary.getTestResults()) {
            testReportingCallback.testDidBegin(testResultSummary.getTestCaseName(),testResultSummary.getTestName());
            testReportingCallback.testDidEnd(testResultSummary);
          }
        }
        testReportingCallback.testsDidEnd(testResults.getTestCases());
        LOG.debug("Done simulating streaming test events for rule %s",testRule);
      }
      TestResults transformedTestResults=TestResults.builder().from(testResults).setSequenceNumber(lastReportedTestSequenceNumber.incrementAndGet()).setTotalNumberOfTests(totalNumberOfTests).build();
      params.getBuckEventBus().post(IndividualTestEvent.finished(testTargets,transformedTestResults));
      return transformedTestResults;
    }
    private String getStackTrace(    Throwable throwable){
      StringWriter sw=new StringWriter();
      PrintWriter pw=new PrintWriter(sw);
      throwable.printStackTrace(pw);
      return sw.toString();
    }
    @Override public void onSuccess(    TestResults testResults){
      LOG.debug("Transforming successful test results %s",testResults);
      if (printTestResults) {
        postTestResults(testResults);
      }
      transformedTestResults.set(testResults);
    }
    @Override public void onFailure(    Throwable throwable){
      LOG.warn(throwable,"Test command step failed, marking %s as failed",testRule);
      TestResults testResults=TestResults.of(testRule.getBuildTarget(),ImmutableList.of(new TestCaseSummary(testRule.getBuildTarget().toString(),ImmutableList.of(new TestResultSummary(testRule.getBuildTarget().toString(),"main",ResultType.FAILURE,0L,throwable.getMessage(),getStackTrace(throwable),"","")))),testRule.getContacts(),FluentIterable.from(testRule.getLabels()).transform(Functions.toStringFunction()).toSet());
      TestResults newTestResults;
      if (printTestResults) {
        newTestResults=postTestResults(testResults);
      }
 else {
        newTestResults=testResults;
      }
      transformedTestResults.set(newTestResults);
    }
  }
;
  Futures.addCallback(originalTestResults,callback);
  return transformedTestResults;
}
