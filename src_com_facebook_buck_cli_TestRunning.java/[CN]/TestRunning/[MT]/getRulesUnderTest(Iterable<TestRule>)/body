{
  ImmutableSet.Builder<JavaLibrary> rulesUnderTest=ImmutableSet.builder();
  for (  TestRule test : tests) {
    if (test instanceof JavaTest) {
      JavaTest javaTest=(JavaTest)test;
      ImmutableSet<BuildRule> sourceUnderTest=javaTest.getSourceUnderTest();
      for (      BuildRule buildRule : sourceUnderTest) {
        if (buildRule instanceof JavaLibrary) {
          JavaLibrary javaLibrary=(JavaLibrary)buildRule;
          rulesUnderTest.add(javaLibrary);
        }
 else {
          throw new HumanReadableException("Test '%s' is a java_test() " + "but it is testing module '%s' " + "which is not a java_library()!",test.getBuildTarget(),buildRule.getBuildTarget());
        }
      }
      ImmutableSet<JavaLibrary> transitiveDeps=javaTest.getTransitiveClasspathDeps();
      for (      JavaLibrary dep : transitiveDeps) {
        if (dep instanceof JavaLibraryWithTests) {
          ImmutableSortedSet<BuildTarget> depTests=((JavaLibraryWithTests)dep).getTests();
          if (depTests.contains(test.getBuildTarget())) {
            rulesUnderTest.add(dep);
          }
        }
      }
    }
  }
  return rulesUnderTest.build();
}
