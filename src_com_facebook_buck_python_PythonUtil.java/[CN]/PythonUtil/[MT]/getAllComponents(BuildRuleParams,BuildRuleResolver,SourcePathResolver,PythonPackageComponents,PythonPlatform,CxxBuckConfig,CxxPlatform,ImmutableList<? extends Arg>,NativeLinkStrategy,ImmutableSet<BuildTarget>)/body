{
  final PythonPackageComponents.Builder allComponents=new PythonPackageComponents.Builder(params.getBuildTarget());
  final Map<BuildTarget,CxxPythonExtension> extensions=new LinkedHashMap<>();
  final Map<BuildTarget,NativeLinkable> nativeLinkableRoots=new LinkedHashMap<>();
  final OmnibusRoots.Builder omnibusRoots=OmnibusRoots.builder(cxxPlatform,preloadDeps);
  allComponents.addComponent(packageComponents,params.getBuildTarget());
  new AbstractBreadthFirstThrowingTraversal<BuildRule,NoSuchBuildTargetException>(params.getDeps()){
    private final ImmutableList<BuildRule> empty=ImmutableList.of();
    @Override public Iterable<BuildRule> visit(    BuildRule rule) throws NoSuchBuildTargetException {
      Iterable<BuildRule> deps=empty;
      if (rule instanceof CxxPythonExtension) {
        CxxPythonExtension extension=(CxxPythonExtension)rule;
        NativeLinkTarget target=((CxxPythonExtension)rule).getNativeLinkTarget(pythonPlatform);
        extensions.put(target.getBuildTarget(),extension);
        omnibusRoots.addIncludedRoot(target);
        List<BuildRule> cxxpydeps=new ArrayList<>();
        for (        BuildRule dep : rule.getDeps()) {
          if (dep instanceof CxxPythonExtension) {
            cxxpydeps.add(dep);
          }
        }
        deps=cxxpydeps;
      }
 else       if (rule instanceof PythonPackagable) {
        PythonPackagable packagable=(PythonPackagable)rule;
        PythonPackageComponents comps=packagable.getPythonPackageComponents(pythonPlatform,cxxPlatform);
        allComponents.addComponent(comps,rule.getBuildTarget());
        if (comps.hasNativeCode(cxxPlatform)) {
          for (          BuildRule dep : rule.getDeps()) {
            if (dep instanceof NativeLinkable) {
              NativeLinkable linkable=(NativeLinkable)dep;
              nativeLinkableRoots.put(linkable.getBuildTarget(),linkable);
              omnibusRoots.addExcludedRoot(linkable);
            }
          }
        }
        deps=rule.getDeps();
      }
 else       if (rule instanceof NativeLinkable) {
        NativeLinkable linkable=(NativeLinkable)rule;
        nativeLinkableRoots.put(linkable.getBuildTarget(),linkable);
        omnibusRoots.addPotentialRoot(linkable);
      }
      return deps;
    }
  }
.start();
  if (nativeLinkStrategy == NativeLinkStrategy.MERGED) {
    OmnibusRoots roots=omnibusRoots.build();
    OmnibusLibraries libraries=Omnibus.getSharedLibraries(params,ruleResolver,pathResolver,cxxBuckConfig,cxxPlatform,extraLdflags,roots.getIncludedRoots().values(),roots.getExcludedRoots().values());
    for (    Map.Entry<BuildTarget,OmnibusRoot> root : libraries.getRoots().entrySet()) {
      CxxPythonExtension extension=extensions.get(root.getKey());
      if (extension != null) {
        allComponents.addModule(extension.getModule(),root.getValue().getPath(),root.getKey());
      }
 else {
        NativeLinkTarget target=Preconditions.checkNotNull(roots.getIncludedRoots().get(root.getKey()),"%s: linked unexpected omnibus root: %s",params.getBuildTarget(),root.getKey());
        NativeLinkTargetMode mode=target.getNativeLinkTargetMode(cxxPlatform);
        String soname=Preconditions.checkNotNull(mode.getLibraryName().orNull(),"%s: omnibus library for %s was built without soname",params.getBuildTarget(),root.getKey());
        allComponents.addNativeLibraries(Paths.get(soname),root.getValue().getPath(),root.getKey());
      }
    }
    for (    OmnibusLibrary library : libraries.getLibraries()) {
      allComponents.addNativeLibraries(Paths.get(library.getSoname()),library.getPath(),params.getBuildTarget());
    }
  }
 else {
    Map<BuildTarget,NativeLinkable> extensionNativeDeps=new LinkedHashMap<>();
    for (    Map.Entry<BuildTarget,CxxPythonExtension> entry : extensions.entrySet()) {
      allComponents.addComponent(entry.getValue().getPythonPackageComponents(pythonPlatform,cxxPlatform),entry.getValue().getBuildTarget());
      extensionNativeDeps.putAll(Maps.uniqueIndex(entry.getValue().getNativeLinkTarget(pythonPlatform).getNativeLinkTargetDeps(cxxPlatform),HasBuildTarget.TO_TARGET));
    }
    ImmutableMap<BuildTarget,NativeLinkable> nativeLinkables=NativeLinkables.getTransitiveNativeLinkables(cxxPlatform,Iterables.concat(nativeLinkableRoots.values(),extensionNativeDeps.values()));
    for (    NativeLinkable nativeLinkable : nativeLinkables.values()) {
      NativeLinkable.Linkage linkage=nativeLinkable.getPreferredLinkage(cxxPlatform);
      if (nativeLinkableRoots.containsKey(nativeLinkable.getBuildTarget()) || linkage != NativeLinkable.Linkage.STATIC) {
        ImmutableMap<String,SourcePath> libs=nativeLinkable.getSharedLibraries(cxxPlatform);
        for (        Map.Entry<String,SourcePath> ent : libs.entrySet()) {
          allComponents.addNativeLibraries(Paths.get(ent.getKey()),ent.getValue(),nativeLinkable.getBuildTarget());
        }
      }
    }
  }
  return allComponents.build();
}
