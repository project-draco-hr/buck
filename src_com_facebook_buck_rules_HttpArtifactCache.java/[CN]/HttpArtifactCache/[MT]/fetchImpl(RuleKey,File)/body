{
  Request request=createRequestBuilder(ruleKey.toString()).get().build();
  Response response=fetchCall(request);
  if (response.code() == HttpURLConnection.HTTP_NOT_FOUND) {
    readTillEnd(response);
    LOGGER.info("fetch(%s, %s): cache miss",url,ruleKey);
    return CacheResult.miss();
  }
  if (response.code() != HttpURLConnection.HTTP_OK) {
    readTillEnd(response);
    String msg=String.format("unexpected response: %d",response.code());
    reportFailure("fetch(%s, %s): %s",url,ruleKey,msg);
    return CacheResult.error(name,msg);
  }
  HashCode expectedHashCode, actualHashCode;
  Path path=file.toPath();
  projectFilesystem.createParentDirs(path);
  Path temp=projectFilesystem.createTempFile(path.getParent(),path.getFileName().toString(),".tmp");
  try (InputStream raw=response.body().byteStream();HashingInputStream hasher=new HashingInputStream(hashFunction,raw);DataInputStream input=new DataInputStream(hasher)){
    String key=input.readUTF();
    if (!key.equals(ruleKey.toString())) {
      String msg="incorrect key name";
      reportFailure("fetch(%s, %s): %s",url,ruleKey,msg);
      return CacheResult.error(name,msg);
    }
    long length=input.readLong();
    try (BoundedInputStream boundedInput=new BoundedInputStream(input,length);OutputStream output=projectFilesystem.newFileOutputStream(temp)){
      ByteStreams.copy(boundedInput,output);
    }
     actualHashCode=hasher.hash();
    byte[] hashCodeBytes=new byte[hashFunction.bits() / Byte.SIZE];
    ByteStreams.readFully(raw,hashCodeBytes);
    expectedHashCode=HashCode.fromBytes(hashCodeBytes);
    if (readTillEnd(input) != 0) {
      String msg="unexpected end of input";
      reportFailure("fetch(%s, %s): %s",url,ruleKey,msg);
      return CacheResult.error(name,msg);
    }
  }
   if (!expectedHashCode.equals(actualHashCode)) {
    String msg="artifact had invalid checksum";
    reportFailure("fetch(%s, %s): %s",url,ruleKey,msg);
    projectFilesystem.deleteFileAtPath(temp);
    return CacheResult.error(name,msg);
  }
  projectFilesystem.move(temp,path,StandardCopyOption.REPLACE_EXISTING);
  LOGGER.info("fetch(%s, %s): cache hit",url,ruleKey);
  return CacheResult.hit(name);
}
