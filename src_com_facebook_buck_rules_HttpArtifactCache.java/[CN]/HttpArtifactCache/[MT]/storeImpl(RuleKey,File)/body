{
  final byte[] keyBytes=writeUTF(ruleKey.toString());
  Request request=createRequestBuilder(ruleKey.toString()).put(new RequestBody(){
    @Override public MediaType contentType(){
      return OCTET_STREAM;
    }
    @Override public long contentLength() throws IOException {
      return keyBytes.length + Long.SIZE / Byte.SIZE + projectFilesystem.getFileSize(file.toPath()) + hashFunction.bits() / Byte.SIZE;
    }
    @Override public void writeTo(    BufferedSink sink) throws IOException {
      try (InputStream fileInput=projectFilesystem.newFileInputStream(file.toPath());OutputStream raw=sink.outputStream();HashingOutputStream hasher=new HashingOutputStream(hashFunction,raw);DataOutputStream output=new DataOutputStream(hasher)){
        output.write(keyBytes);
        output.writeLong(projectFilesystem.getFileSize(file.toPath()));
        ByteStreams.copy(fileInput,output);
        raw.write(hasher.hash().asBytes());
      }
     }
  }
).build();
  Response response=storeCall(request);
  if (response.code() != HttpURLConnection.HTTP_ACCEPTED) {
    reportFailure("store(%s, %s): unexpected response: %d",url,ruleKey,response.code());
  }
}
