{
  Request request=new Request.Builder().url(new URL(url,"artifacts/key/" + ruleKey.toString())).get().build();
  Response response=fetchCall(request);
  if (response.code() == HttpURLConnection.HTTP_NOT_FOUND) {
    readTillEnd(response);
    LOGGER.info("fetch(%s, %s): cache miss",url,ruleKey);
    return CacheResult.miss();
  }
  if (response.code() != HttpURLConnection.HTTP_OK) {
    readTillEnd(response);
    String msg=String.format("unexpected response: %d",response.code());
    reportFailure("fetch(%s, %s): %s",url,ruleKey,msg);
    return CacheResult.error(name,msg);
  }
  Hasher hasher=hashFunction.newHasher();
  ImmutableMap<String,String> metadata;
  HashCode expectedHashCode;
  projectFilesystem.createParentDirs(file);
  Path temp=projectFilesystem.createTempFile(file.getParent(),file.getFileName().toString(),".tmp");
  try (DataInputStream input=new DataInputStream(response.body().byteStream())){
    int metadataSize=input.readInt();
    byte[] rawMetadata=new byte[metadataSize];
    ByteStreams.readFully(input,rawMetadata);
    try (InputStream rawMetadataIn=new ByteArrayInputStream(rawMetadata)){
      try (DataInputStream metadataIn=new DataInputStream(new HasherInputStream(hasher,rawMetadataIn))){
        Set<RuleKey> ruleKeys=Sets.newHashSet();
        int size=metadataIn.readInt();
        for (int i=0; i < size; i++) {
          ruleKeys.add(new RuleKey(metadataIn.readUTF()));
        }
        if (!ruleKeys.contains(ruleKey)) {
          readTillEnd(response);
          String msg="incorrect key name";
          reportFailure("fetch(%s, %s): %s",url,ruleKey,msg);
          return CacheResult.error(name,msg);
        }
        ImmutableMap.Builder<String,String> metadataBuilder=ImmutableMap.builder();
        size=metadataIn.readInt();
        for (int i=0; i < size; i++) {
          String key=metadataIn.readUTF();
          int valSize=metadataIn.readInt();
          byte[] val=new byte[valSize];
          ByteStreams.readFully(metadataIn,val);
          metadataBuilder.put(key,new String(val,Charsets.UTF_8));
        }
        metadata=metadataBuilder.build();
      }
       byte[] hashCodeBytes=new byte[hashFunction.bits() / Byte.SIZE];
      ByteStreams.readFully(rawMetadataIn,hashCodeBytes);
      expectedHashCode=HashCode.fromBytes(hashCodeBytes);
    }
     try (InputStream payload=new HasherInputStream(hasher,response.body().byteStream());OutputStream output=projectFilesystem.newFileOutputStream(temp)){
      ByteStreams.copy(payload,output);
    }
   }
   HashCode actualHashCode=hasher.hash();
  if (!expectedHashCode.equals(actualHashCode)) {
    String msg="artifact had invalid checksum";
    reportFailure("fetch(%s, %s): %s",url,ruleKey,msg);
    projectFilesystem.deleteFileAtPath(temp);
    return CacheResult.error(name,msg);
  }
  projectFilesystem.move(temp,file,StandardCopyOption.REPLACE_EXISTING);
  LOGGER.info("fetch(%s, %s): cache hit",url,ruleKey);
  return CacheResult.hit(name,metadata);
}
