{
  Request.Builder builder=new Request.Builder();
  builder.url(new URL(url,"artifacts/key"));
  final byte[] rawKeys=createKeysHeader(ruleKeys);
  final byte[] rawMetadata=createMetadataHeader(ruleKeys,metadata,new ByteSource(){
    @Override public InputStream openStream() throws IOException {
      return projectFilesystem.newFileInputStream(file.toPath());
    }
  }
,hashFunction);
  builder.put(new RequestBody(){
    @Override public MediaType contentType(){
      return OCTET_STREAM;
    }
    @Override public long contentLength() throws IOException {
      return rawKeys.length + Integer.SIZE / Byte.SIZE + rawMetadata.length + projectFilesystem.getFileSize(file.toPath());
    }
    @Override public void writeTo(    BufferedSink bufferedSink) throws IOException {
      try (DataOutputStream output=new DataOutputStream(bufferedSink.outputStream())){
        output.write(rawKeys);
        output.writeInt(rawMetadata.length);
        output.write(rawMetadata);
        try (InputStream input=projectFilesystem.newFileInputStream(file.toPath())){
          ByteStreams.copy(input,output);
        }
       }
     }
  }
);
  Request request=builder.build();
  Response response=storeCall(request);
  if (response.code() != HttpURLConnection.HTTP_ACCEPTED) {
    reportFailure("store(%s, %s): unexpected response: %d",url,ruleKeys,response.code());
  }
}
