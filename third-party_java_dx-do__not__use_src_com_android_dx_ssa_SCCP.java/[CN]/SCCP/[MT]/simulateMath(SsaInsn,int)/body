{
  Insn ropInsn=insn.getOriginalRopInsn();
  int opcode=insn.getOpcode().getOpcode();
  RegisterSpecList sources=insn.getSources();
  int regA=sources.get(0).getReg();
  Constant cA;
  Constant cB;
  if (latticeValues[regA] != CONSTANT) {
    cA=null;
  }
 else {
    cA=latticeConstants[regA];
  }
  if (sources.size() == 1) {
    CstInsn cstInsn=(CstInsn)ropInsn;
    cB=cstInsn.getConstant();
  }
 else {
    int regB=sources.get(1).getReg();
    if (latticeValues[regB] != CONSTANT) {
      cB=null;
    }
 else {
      cB=latticeConstants[regB];
    }
  }
  if (cA == null || cB == null) {
    return null;
  }
switch (resultType) {
case Type.BT_INT:
    int vR;
  boolean skip=false;
int vA=((CstInteger)cA).getValue();
int vB=((CstInteger)cB).getValue();
switch (opcode) {
case RegOps.ADD:
vR=vA + vB;
break;
case RegOps.SUB:
if (sources.size() == 1) {
vR=vB - vA;
}
 else {
vR=vA - vB;
}
break;
case RegOps.MUL:
vR=vA * vB;
break;
case RegOps.DIV:
if (vB == 0) {
skip=true;
vR=0;
}
 else {
vR=vA / vB;
}
break;
case RegOps.AND:
vR=vA & vB;
break;
case RegOps.OR:
vR=vA | vB;
break;
case RegOps.XOR:
vR=vA ^ vB;
break;
case RegOps.SHL:
vR=vA << vB;
break;
case RegOps.SHR:
vR=vA >> vB;
break;
case RegOps.USHR:
vR=vA >>> vB;
break;
case RegOps.REM:
if (vB == 0) {
skip=true;
vR=0;
}
 else {
vR=vA % vB;
}
break;
default :
throw new RuntimeException("Unexpected op");
}
return skip ? null : CstInteger.make(vR);
default :
return null;
}
}
