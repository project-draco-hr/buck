{
  Preconditions.checkState(isRuleBuilt(),"%s must be built before tests can be run.",this);
  Set<String> testClassNames=getClassNamesForSources(executionContext);
  if (testClassNames.isEmpty()) {
    return ImmutableList.of();
  }
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  Path pathToTestOutput=getPathToTestOutputDirectory();
  MakeCleanDirectoryStep mkdirClean=new MakeCleanDirectoryStep(pathToTestOutput);
  steps.add(mkdirClean);
  ImmutableSet<String> classpathEntries;
  if (getProperties().is(ANDROID)) {
    Preconditions.checkState(optionalDummyRDotJava.isPresent(),"DummyRDotJava must have been created by the BuildRuleBuilder!");
    String rDotJavaClasspathEntry=optionalDummyRDotJava.get().getRDotJavaBinFolder();
    ImmutableSet.Builder<String> classpathEntriesBuilder=ImmutableSet.builder();
    classpathEntriesBuilder.add(rDotJavaClasspathEntry);
    classpathEntriesBuilder.addAll(getTransitiveClasspathEntries().values());
    classpathEntries=classpathEntriesBuilder.build();
  }
 else {
    classpathEntries=ImmutableSet.copyOf(getTransitiveClasspathEntries().values());
  }
  Step junit=new JUnitStep(classpathEntries,testClassNames,amendVmArgs(vmArgs,executionContext.getTargetDeviceOptional()),pathToTestOutput.toString(),executionContext.isCodeCoverageEnabled(),executionContext.isJacocoEnabled(),executionContext.isDebugEnabled());
  steps.add(junit);
  return steps.build();
}
