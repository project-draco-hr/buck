{
  Preconditions.checkArgument(platform != Platform.UNKNOWN);
  Preconditions.checkArgument(architecture != Architecture.UNKNOWN);
  Optional<Map.Entry<String,Platform>> osValue=FluentIterable.from(goOsValues.entrySet()).firstMatch(new Predicate<Map.Entry<String,Platform>>(){
    @Override public boolean apply(    Map.Entry<String,Platform> input){
      return input.getValue() == platform;
    }
  }
);
  Optional<Map.Entry<String,Architecture>> archValue=FluentIterable.from(goArchValues.entrySet()).firstMatch(new Predicate<Map.Entry<String,Architecture>>(){
    @Override public boolean apply(    Map.Entry<String,Architecture> input){
      return input.getValue() == architecture;
    }
  }
);
  if (!osValue.isPresent() || !archValue.isPresent()) {
    return Optional.absent();
  }
  return Optional.of(GoPlatform.builder().setGoOs(osValue.get().getKey()).setGoArch(archValue.get().getKey()).setCxxPlatform(getCxxPlatform(platform,architecture)).build());
}
