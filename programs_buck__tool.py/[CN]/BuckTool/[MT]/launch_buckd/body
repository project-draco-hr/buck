def launch_buckd(self, buck_version_uid=None):
    with Tracing('BuckRepo.launch_buckd'):
        self._setup_watchman_watch()
        if (buck_version_uid is None):
            buck_version_uid = self._get_buck_version_uid()
        buckd_tmp_dir = self._buck_project.create_buckd_tmp_dir()
        ngserver_output_path = os.path.join(buckd_tmp_dir, 'ngserver-out')
        '\n            Use SoftRefLRUPolicyMSPerMB for immediate GC of javac output.\n            Set timeout to 60s (longer than the biggest GC pause seen for a 2GB\n            heap) and GC target to 15s. This means that the GC has to miss its\n            target by 100% or many 500ms heartbeats must be missed before a client\n            disconnection occurs. Specify port 0 to allow Nailgun to find an\n            available port, then parse the port number out of the first log entry.\n            '
        command = ['buckd']
        command.extend(self._get_java_args(buck_version_uid))
        command.append('-Dbuck.buckd_launch_time_nanos={0}'.format(monotonic_time_nanos()))
        command.append('-XX:MaxGCPauseMillis={0}'.format(GC_MAX_PAUSE_TARGET))
        command.append('-XX:SoftRefLRUPolicyMSPerMB=0')
        command.append('-Djava.io.tmpdir={0}'.format(buckd_tmp_dir))
        command.append('-Dcom.martiansoftware.nailgun.NGServer.outputPath={0}'.format(ngserver_output_path))
        command.append('com.facebook.buck.cli.bootstrapper.ClassLoaderBootstrapper')
        command.append('com.martiansoftware.nailgun.NGServer')
        command.append('localhost:0')
        command.append('{0}'.format(BUCKD_CLIENT_TIMEOUT_MILLIS))
        '\n            Change the process group of the child buckd process so that when this\n            script is interrupted, it does not kill buckd.\n            '

        def preexec_func():
            os.setpgrp()
            dev_null_fd = os.open('/dev/null', os.O_RDWR)
            os.dup2(dev_null_fd, 0)
            os.dup2(dev_null_fd, 1)
            os.dup2(dev_null_fd, 2)
            os.close(dev_null_fd)
        process = subprocess.Popen(command, executable=which('java'), cwd=self._buck_project.root, close_fds=True, preexec_fn=preexec_func, env=self._environ_for_buck())
        buckd_port = None
        for i in range(100):
            if buckd_port:
                break
            try:
                try:
                    with open(ngserver_output_path) as f:
                        for line in f:
                            match = BUCKD_LOG_FILE_PATTERN.match(line)
                            if match:
                                buckd_port = match.group(1)
                                break
                except IOError as e:
                    pass
            finally:
                time.sleep(0.1)
        else:
            print('nailgun server did not respond after 10s. Aborting buckd.', file=sys.stderr)
            return 1
        self._buck_project.save_buckd_port(buckd_port)
        self._buck_project.save_buckd_version(buck_version_uid)
        self._buck_project.update_buckd_run_count(0)
        returncode = process.poll()
        if (returncode is None):
            return 0
        return returncode
