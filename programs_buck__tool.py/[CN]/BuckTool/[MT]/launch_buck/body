def launch_buck(self, build_id):
    with Tracing('BuckRepo.launch_buck'):
        if ((self._command_line.command == 'clean') and (not self._command_line.is_help())):
            self.kill_buckd()
        buck_version_uid = self._get_buck_version_uid()
        use_buckd = self._use_buckd()
        if (not self._command_line.is_help()):
            has_watchman = bool(which('watchman'))
            if (use_buckd and has_watchman):
                buckd_run_count = self._buck_project.get_buckd_run_count()
                running_version = self._buck_project.get_running_buckd_version()
                new_buckd_run_count = (buckd_run_count + 1)
                if ((buckd_run_count == MAX_BUCKD_RUN_COUNT) or (running_version != buck_version_uid)):
                    self.kill_buckd()
                    new_buckd_run_count = 0
                if ((new_buckd_run_count == 0) or (not self._is_buckd_running())):
                    self.launch_buckd(buck_version_uid=buck_version_uid)
                else:
                    self._buck_project.update_buckd_run_count(new_buckd_run_count)
            elif (use_buckd and (not has_watchman)):
                print("Not using buckd because watchman isn't installed.", file=sys.stderr)
            elif (not use_buckd):
                print('Not using buckd because NO_BUCKD is set.', file=sys.stderr)
        env = self._environ_for_buck()
        env['BUCK_BUILD_ID'] = build_id
        buck_socket_path = self._buck_project.get_buckd_socket_path()
        if (use_buckd and self._is_buckd_running() and os.path.exists(buck_socket_path)):
            with Tracing('buck', args={'command': sys.argv[1:], }):
                exit_code = 2
                last_diagnostic_time = 0
                while (exit_code == 2):
                    with NailgunConnection('local:.buckd/sock', cwd=self._buck_project.root) as c:
                        exit_code = c.send_command('com.facebook.buck.cli.Main', sys.argv[1:], env=env, cwd=self._buck_project.root)
                        if (exit_code == 2):
                            now = time.time()
                            if ((now - last_diagnostic_time) > DAEMON_BUSY_MESSAGE_SECONDS):
                                print('Daemon is busy, waiting for it to become free...', file=sys.stderr)
                                last_diagnostic_time = now
                            time.sleep(1)
                return exit_code
        command = ['buck']
        extra_default_options = ['-Djava.io.tmpdir={0}'.format(self._tmp_dir)]
        command.extend(self._get_java_args(buck_version_uid, extra_default_options))
        command.append('com.facebook.buck.cli.bootstrapper.ClassLoaderBootstrapper')
        command.append('com.facebook.buck.cli.Main')
        command.extend(sys.argv[1:])
        return subprocess.call(command, cwd=self._buck_project.root, env=env, executable=which('java'))
