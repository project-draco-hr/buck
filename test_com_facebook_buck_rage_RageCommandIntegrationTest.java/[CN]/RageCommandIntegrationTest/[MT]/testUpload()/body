{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"interactive_report",temporaryFolder);
  workspace.setUp();
  final AtomicReference<String> requestMethod=new AtomicReference<>();
  final AtomicReference<String> requestPath=new AtomicReference<>();
  final AtomicReference<byte[]> requestBody=new AtomicReference<>();
  try (HttpdForTests httpd=new HttpdForTests()){
    httpd.addHandler(new AbstractHandler(){
      @Override public void handle(      String s,      Request request,      HttpServletRequest httpServletRequest,      HttpServletResponse httpServletResponse) throws IOException, ServletException {
        requestPath.set(request.getUri().getPath());
        requestMethod.set(request.getMethod());
        requestBody.set(ByteStreams.toByteArray(httpServletRequest.getInputStream()));
        httpServletResponse.setStatus(200);
        try (DataOutputStream out=new DataOutputStream(httpServletResponse.getOutputStream())){
          out.writeBytes("Upload successful");
        }
       }
    }
);
    httpd.start();
    RageConfig config=RageConfig.builder().setReportUploadUri(httpd.getUri("/rage")).build();
    ProjectFilesystem filesystem=new ProjectFilesystem(temporaryFolder.getRoot());
    ObjectMapper objectMapper=ObjectMappers.newDefaultInstance();
    DefectReporter reporter=new DefaultDefectReporter(filesystem,objectMapper,config);
    AutomatedReport automatedReport=new AutomatedReport(reporter,filesystem,new CapturingPrintStream(),TestBuildEnvironmentDescription.INSTANCE,VcsInfoCollector.create(new NoOpCmdLineInterface()),EMPTY_EXTRA_INFO_HELPER);
    DefectSubmitResult defectSubmitResult=automatedReport.collectAndSubmitResult();
    assertThat(defectSubmitResult.getReportSubmitMessage(),Matchers.equalTo(Optional.of("Upload successful")));
    assertThat(requestMethod.get(),Matchers.equalTo("POST"));
    assertThat(requestPath.get(),Matchers.equalTo("/rage"));
    filesystem.mkdirs(filesystem.getBuckPaths().getBuckOut());
    Path report=filesystem.createTempFile(filesystem.getBuckPaths().getBuckOut(),"report","zip");
    filesystem.writeBytesToPath(requestBody.get(),report);
    ZipInspector zipInspector=new ZipInspector(filesystem.resolve(report));
    zipInspector.assertFileExists("report.json");
    zipInspector.assertFileExists("buckconfig.local");
    zipInspector.assertFileExists("bucklogging.local.properties");
    zipInspector.assertFileExists("buck-out/log/" + "2016-06-21_16h16m24s_buildcommand_ac8bd626-6137-4747-84dd-5d4f215c876c/buck.log");
    zipInspector.assertFileExists("buck-out/log/" + "2016-06-21_16h18m51s_autodepscommand_d09893d5-b11e-4e3f-a5bf-70c60a06896e/buck.log");
  }
 }
