{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"interactive_report",temporaryFolder);
  workspace.setUp();
  try (HttpdForTests httpd=new HttpdForTests()){
    httpd.addHandler(new AbstractHandler(){
      @Override public void handle(      String s,      Request request,      HttpServletRequest httpServletRequest,      HttpServletResponse httpServletResponse) throws IOException, ServletException {
        httpServletResponse.setStatus(500);
      }
    }
);
    httpd.start();
    RageConfig rageConfig=createRageConfig(httpd);
    ProjectFilesystem filesystem=new ProjectFilesystem(temporaryFolder.getRoot());
    ObjectMapper objectMapper=ObjectMappers.newDefaultInstance();
    Clock clock=new DefaultClock();
    DefectReporter reporter=new DefaultDefectReporter(filesystem,objectMapper,rageConfig,BuckEventBusFactory.newInstance(clock),clock);
    AutomatedReport automatedReport=new AutomatedReport(reporter,filesystem,new CapturingPrintStream(),TestBuildEnvironmentDescription.INSTANCE,VcsInfoCollector.create(new NoOpCmdLineInterface()),rageConfig,EMPTY_EXTRA_INFO_HELPER);
    DefectSubmitResult submitReport=automatedReport.collectAndSubmitResult().get();
    assertFalse(submitReport.getReportSubmitErrorMessage().get().isEmpty());
    ZipInspector zipInspector=new ZipInspector(filesystem.resolve(submitReport.getReportSubmitLocation()));
    assertEquals(zipInspector.getZipFileEntries().size(),5);
  }
 }
