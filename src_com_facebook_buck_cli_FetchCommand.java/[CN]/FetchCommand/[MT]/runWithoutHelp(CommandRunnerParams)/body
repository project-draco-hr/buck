{
  if (getArguments().isEmpty()) {
    params.getBuckEventBus().post(ConsoleEvent.severe("Must specify at least one build target to fetch."));
    return 1;
  }
  BuildEvent.Started started=BuildEvent.started(getArguments());
  if (params.getParser().getParseStartTime().isPresent()) {
    params.getBuckEventBus().post(started,params.getParser().getParseStartTime().get());
  }
 else {
    params.getBuckEventBus().post(started);
  }
  FetchTargetNodeToBuildRuleTransformer ruleGenerator=createFetchTransformer(params);
  TargetGraphToActionGraph transformer=new TargetGraphToActionGraph(params.getBuckEventBus(),ruleGenerator);
  Pair<ActionGraph,BuildRuleResolver> actionGraphAndResolver;
  ImmutableSet<BuildTarget> buildTargets;
  try {
    Pair<ImmutableSet<BuildTarget>,TargetGraph> result=params.getParser().buildTargetGraphForTargetNodeSpecs(parseArgumentsAsTargetNodeSpecs(params.getBuckConfig(),getArguments()),new ParserConfig(params.getBuckConfig()),params.getBuckEventBus(),params.getConsole(),params.getEnvironment(),getEnableProfiling());
    actionGraphAndResolver=Preconditions.checkNotNull(transformer.apply(result.getSecond()));
    buildTargets=ruleGenerator.getDownloadableTargets();
  }
 catch (  BuildTargetException|BuildFileParseException e) {
    params.getBuckEventBus().post(ConsoleEvent.severe(MoreExceptions.getHumanReadableOrLocalizedMessage(e)));
    return 1;
  }
  int exitCode;
  try (CommandThreadManager pool=new CommandThreadManager("Fetch",getConcurrencyLimit(params.getBuckConfig()));Build build=createBuild(params.getBuckConfig(),actionGraphAndResolver.getFirst(),params.getAndroidPlatformTargetSupplier(),new CachingBuildEngine(pool.getExecutor(),params.getFileHashCache(),getBuildEngineMode().or(params.getBuckConfig().getBuildEngineMode()),params.getBuckConfig().getBuildDepFiles(),actionGraphAndResolver.getSecond()),params.getArtifactCache(),params.getConsole(),params.getBuckEventBus(),Optional.<TargetDevice>absent(),params.getPlatform(),params.getEnvironment(),params.getObjectMapper(),params.getClock(),Optional.<AdbOptions>absent(),Optional.<TargetDeviceOptions>absent())){
    exitCode=build.executeAndPrintFailuresToEventBus(buildTargets,isKeepGoing(),params.getBuckEventBus(),params.getConsole(),getPathToBuildReport(params.getBuckConfig()));
  }
   params.getBuckEventBus().post(BuildEvent.finished(started,exitCode));
  return exitCode;
}
