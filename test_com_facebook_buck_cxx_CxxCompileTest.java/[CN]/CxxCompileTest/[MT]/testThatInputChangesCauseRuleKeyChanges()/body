{
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new FakeRuleKeyBuilderFactory(FakeFileHashCache.createFromStrings(ImmutableMap.of("compiler",Strings.repeat("a",40),"test.o",Strings.repeat("b",40),"test.cpp",Strings.repeat("c",40),"different",Strings.repeat("d",40))));
  RuleKey.Builder.RuleKeyPair defaultRuleKey=generateRuleKey(ruleKeyBuilderFactory,new CxxCompile(params,DEFAULT_COMPILER,DEFAULT_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INCLUDES,DEFAULT_SYSTEM_INCLUDES));
  RuleKey.Builder.RuleKeyPair compilerChange=generateRuleKey(ruleKeyBuilderFactory,new CxxCompile(params,Paths.get("different"),DEFAULT_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INCLUDES,DEFAULT_SYSTEM_INCLUDES));
  assertNotEquals(defaultRuleKey,compilerChange);
  RuleKey.Builder.RuleKeyPair flagsChange=generateRuleKey(ruleKeyBuilderFactory,new CxxCompile(params,DEFAULT_COMPILER,ImmutableList.of("-different"),DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INCLUDES,DEFAULT_SYSTEM_INCLUDES));
  assertNotEquals(defaultRuleKey,flagsChange);
  RuleKey.Builder.RuleKeyPair inputChange=generateRuleKey(ruleKeyBuilderFactory,new CxxCompile(params,DEFAULT_COMPILER,DEFAULT_FLAGS,DEFAULT_OUTPUT,new TestSourcePath("different"),DEFAULT_INCLUDES,DEFAULT_SYSTEM_INCLUDES));
  assertNotEquals(defaultRuleKey,inputChange);
  RuleKey.Builder.RuleKeyPair includesChange=generateRuleKey(ruleKeyBuilderFactory,new CxxCompile(params,DEFAULT_COMPILER,DEFAULT_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,ImmutableList.of(Paths.get("different")),DEFAULT_SYSTEM_INCLUDES));
  assertEquals(defaultRuleKey,includesChange);
  RuleKey.Builder.RuleKeyPair systemIncludesChange=generateRuleKey(ruleKeyBuilderFactory,new CxxCompile(params,DEFAULT_COMPILER,DEFAULT_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEFAULT_INCLUDES,ImmutableList.of(Paths.get("different"))));
  assertEquals(defaultRuleKey,systemIncludesChange);
}
