{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new FakeRuleKeyBuilderFactory(FakeFileHashCache.createFromStrings(ImmutableMap.<String,String>builder().put("compiler",Strings.repeat("a",40)).put("test.o",Strings.repeat("b",40)).put("test.cpp",Strings.repeat("c",40)).put("different",Strings.repeat("d",40)).put("foo/test.h",Strings.repeat("e",40)).put("path/to/a/plugin.so",Strings.repeat("f",40)).put("path/to/a/different/plugin.so",Strings.repeat("a0",40)).build()));
  RuleKey.Builder.RuleKeyPair defaultRuleKey=generateRuleKey(ruleKeyBuilderFactory,pathResolver,new CxxCompile(params,pathResolver,DEFAULT_COMPILER,DEFAULT_PLUGIN,DEFAULT_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEBUG_PATH_SANITIZER));
  RuleKey.Builder.RuleKeyPair compilerChange=generateRuleKey(ruleKeyBuilderFactory,pathResolver,new CxxCompile(params,pathResolver,new TestSourcePath("different"),DEFAULT_PLUGIN,DEFAULT_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEBUG_PATH_SANITIZER));
  assertNotEquals(defaultRuleKey,compilerChange);
  RuleKey.Builder.RuleKeyPair flagsChange=generateRuleKey(ruleKeyBuilderFactory,pathResolver,new CxxCompile(params,pathResolver,DEFAULT_COMPILER,DEFAULT_PLUGIN,ImmutableList.of("-different"),DEFAULT_OUTPUT,DEFAULT_INPUT,DEBUG_PATH_SANITIZER));
  assertNotEquals(defaultRuleKey,flagsChange);
  RuleKey.Builder.RuleKeyPair inputChange=generateRuleKey(ruleKeyBuilderFactory,pathResolver,new CxxCompile(params,pathResolver,DEFAULT_COMPILER,DEFAULT_PLUGIN,DEFAULT_FLAGS,DEFAULT_OUTPUT,new TestSourcePath("different"),DEBUG_PATH_SANITIZER));
  assertNotEquals(defaultRuleKey,inputChange);
  RuleKey.Builder.RuleKeyPair pluginAbsentChange=generateRuleKey(ruleKeyBuilderFactory,pathResolver,new CxxCompile(params,pathResolver,DEFAULT_COMPILER,Optional.<CxxCompile.Plugin>absent(),DEFAULT_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEBUG_PATH_SANITIZER));
  assertNotEquals(defaultRuleKey,pluginAbsentChange);
  RuleKey.Builder.RuleKeyPair pluginPathChange=generateRuleKey(ruleKeyBuilderFactory,pathResolver,new CxxCompile(params,pathResolver,DEFAULT_COMPILER,Optional.of(new CxxCompile.Plugin(DEFAULT_PLUGIN.get().getName(),Paths.get("path/to/a/different/plugin.so"),DEFAULT_PLUGIN.get().getFlags())),DEFAULT_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEBUG_PATH_SANITIZER));
  assertNotEquals(defaultRuleKey,pluginPathChange);
  RuleKey.Builder.RuleKeyPair pluginFlagsChange=generateRuleKey(ruleKeyBuilderFactory,pathResolver,new CxxCompile(params,pathResolver,DEFAULT_COMPILER,Optional.of(new CxxCompile.Plugin(DEFAULT_PLUGIN.get().getName(),DEFAULT_PLUGIN.get().getPath(),ImmutableList.of("-abcde","-aeiou"))),DEFAULT_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEBUG_PATH_SANITIZER));
  assertNotEquals(defaultRuleKey,pluginFlagsChange);
  RuleKey.Builder.RuleKeyPair pluginNameChange=generateRuleKey(ruleKeyBuilderFactory,pathResolver,new CxxCompile(params,pathResolver,DEFAULT_COMPILER,Optional.of(new CxxCompile.Plugin("different_name",DEFAULT_PLUGIN.get().getPath(),DEFAULT_PLUGIN.get().getFlags())),DEFAULT_FLAGS,DEFAULT_OUTPUT,DEFAULT_INPUT,DEBUG_PATH_SANITIZER));
  assertNotEquals(defaultRuleKey,pluginNameChange);
}
