{
  this.filesystem=filesystem;
  this.watchman=watchman;
  this.config=config;
  this.directoryResolver=directoryResolver;
  ParserConfig parserConfig=new ParserConfig(config);
  this.buildFileName=parserConfig.getBuildFileName();
  this.enforceBuckPackageBoundaries=parserConfig.getEnforceBuckPackageBoundary();
  this.tempFilePatterns=parserConfig.getTempFilePatterns();
  PythonBuckConfig pythonConfig=new PythonBuckConfig(config,new ExecutableFinder());
  this.pythonInterpreter=pythonConfig.getPythonInterpreter();
  this.knownBuildRuleTypes=knownBuildRuleTypesFactory.create(config);
  this.repos=CacheBuilder.newBuilder().build(new CacheLoader<String,Repository>(){
    @Override public Repository load(    String repoName) throws Exception {
      Optional<Path> root=getBuckConfig().getPath("repositories",repoName,false);
      if (!root.isPresent()) {
        throw new HumanReadableException("Unable to find repository named '%s' in repo rooted at %s",repoName,getFilesystem().getRootPath());
      }
      ImmutableMap<String,ImmutableMap<String,String>> sections=ImmutableMap.of();
      Config config=Config.createDefaultConfig(root.get(),sections);
      ProjectFilesystem repoFilesystem=new ProjectFilesystem(root.get(),config);
      Repository parent=Repository.this;
      BuckConfig parentConfig=parent.getBuckConfig();
      BuckConfig buckConfig=new BuckConfig(config,repoFilesystem,parentConfig.getPlatform(),parentConfig.getEnvironment());
      Watchman.build(root.get(),parentConfig.getEnvironment(),console);
      return new Repository(repoFilesystem,console,watchman,buckConfig,knownBuildRuleTypesFactory,directoryResolver);
    }
  }
);
  this.repoFilesystemAliases=new Function<Optional<String>,ProjectFilesystem>(){
    @Override public ProjectFilesystem apply(    Optional<String> repoName){
      return getRepository(repoName).getFilesystem();
    }
  }
;
}
