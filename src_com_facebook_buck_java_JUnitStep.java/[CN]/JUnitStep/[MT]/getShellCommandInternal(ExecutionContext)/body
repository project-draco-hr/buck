{
  ImmutableList.Builder<String> args=ImmutableList.builder();
  args.add("java");
  if (isCodeCoverageEnabled) {
    if (!isJacocoEnabled) {
      args.add(String.format("-D%s=%s/coverage.ec",EMMA_COVERAGE_OUT_FILE,EMMA_OUTPUT_DIR));
    }
 else {
      args.add(String.format("-javaagent:%s=destfile=%s/%s,append=true",PATH_TO_JACOCO_AGENT_JAR,JACOCO_OUTPUT_DIR,JACOCO_EXEC_COVERAGE_FILE));
    }
  }
  if (isDebugEnabled) {
    args.add("-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005");
    warnUser(context,"Debugging. Suspending JVM. Connect a JDWP debugger to port 5005 to proceed.");
  }
  args.addAll(vmArgs);
  if (context.getVerbosity().shouldUseVerbosityFlagIfAvailable()) {
    args.add("-verbose");
  }
  List<String> classpath=Lists.newArrayList(classpathEntries);
  if (isCodeCoverageEnabled && !isJacocoEnabled) {
    classpath.add(PATH_TO_EMMA_JAR);
  }
  if (context.getAndroidPlatformTargetOptional().isPresent()) {
    AndroidPlatformTarget androidPlatformTarget=context.getAndroidPlatformTarget();
    for (    Path bootclasspathEntry : androidPlatformTarget.getBootclasspathEntries()) {
      classpath.add(bootclasspathEntry.toString());
    }
  }
  classpath.add(testRunnerClassesDirectory);
  args.add("-classpath").add(Joiner.on(File.pathSeparator).join(classpath));
  args.add(JUNIT_TEST_RUNNER_CLASS_NAME);
  args.add(directoryForTestResults);
  long timeout=isDebugEnabled ? 0 : context.getDefaultTestTimeoutMillis();
  args.add(String.valueOf(timeout));
  StringBuilder selectorsArgBuilder=new StringBuilder();
  if (testSelectorListOptional.isPresent()) {
    TestSelectorList testSelectorList=testSelectorListOptional.get();
    for (    String rawSelector : testSelectorList.getRawSelectors()) {
      selectorsArgBuilder.append(rawSelector).append("\n");
    }
  }
  args.add(selectorsArgBuilder.toString());
  for (  String testClassName : testClassNames) {
    args.add(testClassName);
  }
  return args.build();
}
