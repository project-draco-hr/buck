{
  ImmutableList.Builder<String> args=ImmutableList.builder();
  args.add("java");
  args.add(String.format("-Djava.io.tmpdir=%s",tmpDirectory));
  if (isCodeCoverageEnabled) {
    args.add(String.format("-javaagent:%s=destfile=%s/%s,append=true",PATH_TO_JACOCO_AGENT_JAR,JACOCO_OUTPUT_DIR,JACOCO_EXEC_COVERAGE_FILE));
  }
  args.add(String.format("-D%s=%s",BUILD_ID_PROPERTY,buildId));
  if (isDebugEnabled) {
    args.add("-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005");
    warnUser(context,"Debugging. Suspending JVM. Connect a JDWP debugger to port 5005 to proceed.");
  }
  args.addAll(vmArgs);
  if (context.getVerbosity().shouldUseVerbosityFlagIfAvailable()) {
    args.add("-verbose");
  }
  List<Path> classpath=Lists.newArrayList(classpathEntries);
  classpath.add(testRunnerClassesDirectory);
  args.add("-classpath").add(Joiner.on(File.pathSeparator).join(classpath));
  args.add(JUNIT_TEST_RUNNER_CLASS_NAME);
  args.add(directoryForTestResults.toString());
  long timeout=isDebugEnabled ? 0 : context.getDefaultTestTimeoutMillis();
  args.add(String.valueOf(timeout));
  StringBuilder selectorsArgBuilder=new StringBuilder();
  if (!testSelectorList.isEmpty()) {
    for (    String rawSelector : this.testSelectorList.getRawSelectors()) {
      selectorsArgBuilder.append(rawSelector).append("\n");
    }
  }
  args.add(selectorsArgBuilder.toString());
  args.add(isDryRun ? "non-empty-dry-run-flag" : "");
  for (  String testClassName : testClassNames) {
    args.add(testClassName);
  }
  return args.build();
}
