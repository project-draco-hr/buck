{
  HTMLWriter out=null;
  try {
    File outFile=m_settings.getOutFile();
    if (outFile == null) {
      outFile=new File("index".concat(FILE_EXTENSION));
      m_settings.setOutFile(outFile);
    }
    final File fullOutFile=Files.newFile(m_settings.getOutDir(),outFile);
    m_log.info("writing [" + getType() + "] report to ["+ fullOutFile.getAbsolutePath()+ "] ...");
    out=openOutFile(fullOutFile,m_settings.getOutEncoding(),true);
    final int[] columns=m_settings.getColumnOrder();
    final StringBuffer buf=new StringBuffer();
    final String title;
{
      final StringBuffer _title=new StringBuffer(REPORT_HEADER_TITLE);
      _title.append(" (generated ");
      _title.append(new Date(EMMAProperties.getTimeStamp()));
      _title.append(')');
      title=_title.toString();
    }
    final HTMLDocument page=createPage(title);
{
      final IItem[] path=getParentPath(item);
      addPageHeader(page,item,path);
      addPageFooter(page,item,path);
    }
    page.addH(1,"OVERALL COVERAGE SUMMARY",null);
    final HTMLTable summaryTable=new HTMLTable("100%",null,null,"0");
{
      final HTMLTable.IRow header=summaryTable.newTitleRow();
      final HTMLTable.IRow coverage=summaryTable.newRow();
      for (int c=0; c < columns.length; ++c) {
        final int attrID=columns[c];
        final IItemAttribute attr=item.getAttribute(attrID,m_settings.getUnitsType());
        final HTMLTable.ICell headercell=header.newCell();
        headercell.setText(attr.getName(),true);
        if (attr != null) {
          boolean fail=(m_metrics[attrID] > 0) && !attr.passes(item,m_metrics[attrID]);
          buf.setLength(0);
          attr.format(item,buf);
          final HTMLTable.ICell cell=coverage.newCell();
          cell.setText(buf.toString(),true);
          if (fail)           cell.setClass(CSS_DATA_HIGHLIGHT);
        }
      }
    }
    page.add(summaryTable);
    page.addH(2,"OVERALL STATS SUMMARY",null);
    final HTMLTable statsTable=new HTMLTable(null,null,null,"0");
    statsTable.setClass(CSS_INVISIBLE_TABLE);
{
      HTMLTable.IRow row=statsTable.newRow();
      row.newCell().setText("total packages:",true);
      row.newCell().setText("" + item.getChildCount(),false);
      if (m_srcView && m_hasSrcFileInfo) {
        row=statsTable.newRow();
        row.newCell().setText("total executable files:",true);
        row.newCell().setText("" + item.getAggregate(IItem.TOTAL_SRCFILE_COUNT),false);
      }
      row=statsTable.newRow();
      row.newCell().setText("total classes:",true);
      row.newCell().setText("" + item.getAggregate(IItem.TOTAL_CLASS_COUNT),true);
      row=statsTable.newRow();
      row.newCell().setText("total methods:",true);
      row.newCell().setText("" + item.getAggregate(IItem.TOTAL_METHOD_COUNT),true);
      if (m_srcView && m_hasSrcFileInfo && m_hasLineNumberInfo) {
        row=statsTable.newRow();
        row.newCell().setText("total executable lines:",true);
        row.newCell().setText("" + item.getAggregate(IItem.TOTAL_LINE_COUNT),true);
      }
    }
    page.add(statsTable);
    final boolean deeper=(m_settings.getDepth() > item.getMetadata().getTypeID());
    page.addH(2,"COVERAGE BREAKDOWN BY PACKAGE",null);
    final HTMLTable childSummaryTable=new HTMLTable("100%",null,null,"0");
{
      int[] headerColumns=null;
      boolean odd=true;
      final ItemComparator order=m_typeSortComparators[PackageItem.getTypeMetadata().getTypeID()];
      for (Iterator packages=item.getChildren(order); packages.hasNext(); odd=!odd) {
        final IItem pkg=(IItem)packages.next();
        if (headerColumns == null) {
          headerColumns=addHeaderRow(pkg,childSummaryTable,columns);
        }
        String childHREF=null;
        if (deeper) {
          childHREF=getItemHREF(item,pkg);
        }
        addItemRow(pkg,odd,childSummaryTable,headerColumns,childHREF,false);
        if (deeper)         m_queue.addLast(pkg);
      }
    }
    page.add(childSummaryTable);
    page.emit(out);
    out.flush();
  }
  finally {
    if (out != null)     out.close();
    out=null;
  }
  return ctx;
}
