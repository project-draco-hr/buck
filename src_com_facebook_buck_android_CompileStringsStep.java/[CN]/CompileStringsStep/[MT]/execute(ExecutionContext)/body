{
  ProjectFilesystem filesystem=context.getProjectFilesystem();
  try {
    buildResourceNameToIdMap(filesystem,rDotJavaSrcDir.resolve("R.txt"),resourceNameToIdMap);
  }
 catch (  IOException e) {
    context.logError(e,"Failure parsing R.txt file.");
    return 1;
  }
  ImmutableMultimap<String,Path> filesByLocale=groupFilesByLocale(filteredStringFiles);
  Map<String,StringResources> resourcesByLocale=Maps.newHashMap();
  for (  String locale : filesByLocale.keySet()) {
    try {
      resourcesByLocale.put(locale,compileStringFiles(filesystem,filesByLocale.get(locale)));
    }
 catch (    IOException e) {
      context.logError(e,"Error parsing string file for locale: %s",locale);
      return 1;
    }
  }
  for (  String regionSpecificLocale : regionSpecificToBaseLocaleMap.keySet()) {
    String baseLocale=regionSpecificToBaseLocaleMap.get(regionSpecificLocale);
    if (!resourcesByLocale.containsKey(baseLocale)) {
      continue;
    }
    resourcesByLocale.put(regionSpecificLocale,resourcesByLocale.get(regionSpecificLocale).getMergedResources(resourcesByLocale.get(baseLocale)));
  }
  for (  String locale : filesByLocale.keySet()) {
    try {
      filesystem.writeBytesToPath(resourcesByLocale.get(locale).getBinaryFileContent(),destinationDir.resolve(locale + ".fbstr"));
    }
 catch (    IOException e) {
      context.logError(e,"Error creating binary file for locale: %s",locale);
      return 1;
    }
  }
  return 0;
}
