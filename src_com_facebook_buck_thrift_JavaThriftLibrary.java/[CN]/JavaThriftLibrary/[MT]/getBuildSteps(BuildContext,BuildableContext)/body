{
  final Path projectRoot=context.getProjectRoot();
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  steps.add(new MakeCleanDirectoryStep(genPath));
  steps.addAll(FluentIterable.from(srcs).transform(new Function<SourcePath,Step>(){
    @Override public Step apply(    SourcePath input){
      return new ThriftStep(input.resolve(),Optional.of(genPath),Optional.<Path>absent(),ImmutableSortedSet.<Path>of(projectRoot),ImmutableSortedSet.of(JAVA),ImmutableSortedSet.<String>of());
    }
  }
).toList());
  Path genJavaPath=genPath.resolve("gen-java");
  steps.add(new RmStep(srcJarOutputPath,true));
  steps.add(new ZipStep(srcJarOutputPath,ImmutableSet.<Path>of(),false,ZipStep.DEFAULT_COMPRESSION_LEVEL,genJavaPath));
  buildableContext.recordArtifact(srcJarOutputPath);
  return steps.build();
}
