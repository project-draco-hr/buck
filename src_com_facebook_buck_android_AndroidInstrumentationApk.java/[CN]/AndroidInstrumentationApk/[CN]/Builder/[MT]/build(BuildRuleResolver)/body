{
  BuildRule apkRule=ruleResolver.get(this.apk);
  if (apkRule == null) {
    throw new HumanReadableException("Must specify apk for " + getBuildTarget());
  }
 else   if (!(apkRule.getBuildable() instanceof InstallableApk)) {
    throw new HumanReadableException("In %s, apk='%s' must be an android_binary() or apk_genrule() but was %s().",getBuildTarget(),apkRule.getFullyQualifiedName(),apkRule.getType().getName());
  }
  BuildRuleParams originalParams=createBuildRuleParams(ruleResolver);
  final ImmutableSortedSet<BuildRule> originalDeps=originalParams.getDeps();
  final AndroidBinaryRule apkUnderTest=getUnderlyingApk((InstallableApk)apkRule.getBuildable());
  ImmutableSet<BuildRule> buildRulesToExcludeFromDex=ImmutableSet.<BuildRule>builder().addAll(apkUnderTest.getBuildRulesToExcludeFromDex()).addAll(Classpaths.getClasspathEntries(apkUnderTest.getClasspathDeps()).keySet()).build();
  AndroidBinaryGraphEnhancer graphEnhancer=new AndroidBinaryGraphEnhancer(originalParams);
  ImmutableSortedSet<BuildRule> classpathDepsForInstrumentationApk=getBuildTargetsAsBuildRules(ruleResolver,classpathDeps.build());
  AndroidTransitiveDependencyGraph androidTransitiveDependencyGraph=new AndroidTransitiveDependencyGraph(classpathDepsForInstrumentationApk);
  AndroidResourceDepsFinder androidResourceDepsFinder=new AndroidResourceDepsFinder(androidTransitiveDependencyGraph,buildRulesToExcludeFromDex){
    @Override protected ImmutableList<HasAndroidResourceDeps> findMyAndroidResourceDeps(){
      ImmutableSet<HasAndroidResourceDeps> originalResources=ImmutableSet.copyOf(UberRDotJavaUtil.getAndroidResourceDeps(apkUnderTest));
      ImmutableList<HasAndroidResourceDeps> instrumentationResources=UberRDotJavaUtil.getAndroidResourceDeps(originalDeps);
      ImmutableList.Builder<HasAndroidResourceDeps> allResources=ImmutableList.builder();
      for (      HasAndroidResourceDeps resource : instrumentationResources) {
        if (!originalResources.contains(resource)) {
          allResources.add(resource);
        }
      }
      return allResources.build();
    }
  }
;
  AndroidBinaryGraphEnhancer.AaptEnhancementResult aaptEnhancementResult=graphEnhancer.addBuildablesToCreateAaptResources(ruleResolver,ResourceCompressionMode.DISABLED,ResourceFilter.EMPTY_FILTER,androidResourceDepsFinder,manifest,PackageType.INSTRUMENTED,apkUnderTest.getCpuFilters(),false);
  BuildRuleParams newParams=originalParams.copyWithChangedDeps(graphEnhancer.getTotalDeps());
  return new AndroidInstrumentationApk(newParams,manifest,apkUnderTest,buildRulesToExcludeFromDex,aaptEnhancementResult.getUberRDotJava(),aaptEnhancementResult.getAaptPackageResources(),androidResourceDepsFinder,getBuildTargetsAsBuildRules(ruleResolver,classpathDeps.build()),androidTransitiveDependencyGraph);
}
