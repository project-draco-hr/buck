{
  ST template;
  try {
    template=new ST(Resources.toString(Resources.getResource(ProjectGenerator.class,FIX_UUID_TEMPLATE),Charsets.UTF_8));
  }
 catch (  IOException e) {
    throw new RuntimeException("There was an error loading '" + FIX_UUID_TEMPLATE + "' template",e);
  }
  ImmutableSet<Flavor> flavors=ImmutableSet.copyOf(targetNode.getBuildTarget().getFlavors());
  CxxPlatform cxxPlatform=cxxPlatforms.getValue(flavors).or(defaultCxxPlatform);
  String compDir=cxxPlatform.getDebugPathSanitizer().getCompilationDirectory();
  String sourceDir=Strings.padStart(":" + projectFilesystem.getRootPath().toString(),compDir.length(),'f');
  Optional<String> productName=getProductNameForTargetNode(targetNode);
  String binaryName=AppleBundle.getBinaryName(targetNode.getBuildTarget(),productName);
  Path bundleDestination=getScratchPathForAppBundle(projectFilesystem,targetNode.getBuildTarget(),binaryName);
  Path dsymDestination=getScratchPathForDsymBundle(projectFilesystem,targetNode.getBuildTarget(),binaryName);
  Path resolvedBundleDestination=projectFilesystem.resolve(bundleDestination);
  Path resolvedDsymDestination=projectFilesystem.resolve(dsymDestination);
  Path fixUUIDScriptPath=getFixUUIDScriptPath(projectFilesystem);
  if (attemptToDetermineBestCxxPlatform) {
    template.add("buck_flavor",XCODE_BUILD_SCRIPT_FLAVOR_VALUE);
  }
 else {
    template.add("buck_flavor","");
  }
  template.add("path_to_buck",getPathToBuck(executableFinder,environment));
  template.add("buck_target",targetNode.getBuildTarget().getFullyQualifiedName());
  template.add("root_path",projectFilesystem.getRootPath());
  template.add("comp_dir",compDir);
  template.add("source_dir",sourceDir);
  template.add("resolved_bundle_destination",resolvedBundleDestination);
  template.add("resolved_bundle_destination_parent",resolvedBundleDestination.getParent());
  template.add("resolved_dsym_destination",resolvedDsymDestination);
  template.add("binary_name",binaryName);
  template.add("path_to_fix_uuid_script",fixUUIDScriptPath);
  return template.render();
}
