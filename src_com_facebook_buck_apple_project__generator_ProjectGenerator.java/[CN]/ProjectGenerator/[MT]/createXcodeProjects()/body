{
  LOG.debug("Creating projects for targets %s",initialTargets);
  try (SimplePerfEvent.Scope scope=SimplePerfEvent.scope(buckEventBus,PerfEventId.of("xcode_project_generation"),ImmutableMap.<String,Object>of("Path",getProjectPath()))){
    for (    TargetNode<?> targetNode : targetGraph.getNodes()) {
      if (isBuiltByCurrentProject(targetNode.getBuildTarget())) {
        LOG.debug("Including rule %s in project",targetNode);
        Optional<PBXTarget> target=targetNodeToProjectTarget.getUnchecked(targetNode);
        if (target.isPresent()) {
          targetNodeToGeneratedProjectTargetBuilder.put(targetNode,target.get());
        }
      }
 else {
        LOG.verbose("Excluding rule %s (not built by current project)",targetNode);
      }
    }
    if (targetToBuildWithBuck.isPresent()) {
      generateBuildWithBuckTarget(targetGraph.get(targetToBuildWithBuck.get()));
    }
    int combinedTestIndex=0;
    for (    AppleTestBundleParamsKey key : additionalCombinedTestTargets.keySet()) {
      generateCombinedTestTarget(deriveCombinedTestTargetNameFromKey(key,combinedTestIndex++),key,additionalCombinedTestTargets.get(key));
    }
    for (    String configName : targetConfigNamesBuilder.build()) {
      XCBuildConfiguration outputConfig=project.getBuildConfigurationList().getBuildConfigurationsByName().getUnchecked(configName);
      outputConfig.setBuildSettings(new NSDictionary());
    }
    writeProjectFile(project);
    projectGenerated=true;
  }
 catch (  UncheckedExecutionException e) {
    UncheckedExecutionException originalException=e;
    while (e.getCause() instanceof UncheckedExecutionException) {
      e=(UncheckedExecutionException)e.getCause();
    }
    if (e.getCause() instanceof HumanReadableException) {
      throw (HumanReadableException)e.getCause();
    }
 else {
      throw originalException;
    }
  }
}
