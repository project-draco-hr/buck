{
  final BuildTarget buildTarget=targetNode.getBuildTarget();
  String productName=getProductNameForBuildTarget(buildTarget);
  Path outputPath=getHalideOutputPath(buildTarget);
  Path scriptPath=halideBuckConfig.getXcodeCompileScriptPath();
  Optional<String> script=projectFilesystem.readFileIfItExists(scriptPath);
  PBXShellScriptBuildPhase scriptPhase=new PBXShellScriptBuildPhase();
  scriptPhase.setShellScript(script.or(""));
  NewNativeTargetProjectMutator mutator=new NewNativeTargetProjectMutator(pathRelativizer,sourcePathResolver);
  mutator.setTargetName(getXcodeTargetName(buildTarget)).setProduct(ProductType.STATIC_LIBRARY,productName,outputPath).setPreBuildRunScriptPhases(ImmutableList.of(scriptPhase));
  NewNativeTargetProjectMutator.Result targetBuilderResult;
  try {
    targetBuilderResult=mutator.buildTargetAndAddToProject(project);
  }
 catch (  NoSuchBuildTargetException e) {
    throw new HumanReadableException(e);
  }
  BuildTarget compilerTarget=HalideLibraryDescription.createHalideCompilerBuildTarget(buildTarget);
  Path compilerPath=BuildTargets.getGenPath(projectFilesystem,compilerTarget,"%s");
  ImmutableMap<String,String> appendedConfig=ImmutableMap.<String,String>of();
  ImmutableMap<String,String> extraSettings=ImmutableMap.<String,String>of();
  ImmutableMap.Builder<String,String> defaultSettingsBuilder=ImmutableMap.builder();
  defaultSettingsBuilder.put("REPO_ROOT",projectFilesystem.getRootPath().toAbsolutePath().normalize().toString());
  defaultSettingsBuilder.put("HALIDE_COMPILER_PATH",compilerPath.toString());
  String halideCompilerSrcs="";
  if (targetNode.getConstructorArg().srcs.isPresent()) {
    Iterable<Path> compilerSrcFiles=Iterables.transform(targetNode.getConstructorArg().srcs.get(),new Function<SourceWithFlags,Path>(){
      @Nullable @Override public Path apply(      @Nullable SourceWithFlags input){
        return sourcePathResolver.apply(input.getSourcePath());
      }
    }
);
    halideCompilerSrcs=Joiner.on(" ").join(compilerSrcFiles);
  }
  defaultSettingsBuilder.put("HALIDE_COMPILER_SRCS",halideCompilerSrcs);
  String halideCompilerFlags="";
  if (targetNode.getConstructorArg().compilerFlags.isPresent()) {
    halideCompilerFlags=Joiner.on(" ").join(targetNode.getConstructorArg().compilerFlags.get());
  }
  defaultSettingsBuilder.put("HALIDE_COMPILER_FLAGS",halideCompilerFlags);
  defaultSettingsBuilder.put("HALIDE_OUTPUT_PATH",outputPath.toString());
  defaultSettingsBuilder.put("HALIDE_FUNC_NAME",buildTarget.getShortName());
  defaultSettingsBuilder.put(PRODUCT_NAME,productName);
  Optional<ImmutableSortedMap<String,ImmutableMap<String,String>>> configs=getXcodeBuildConfigurationsForTargetNode(targetNode,appendedConfig);
  PBXNativeTarget target=targetBuilderResult.target;
  setTargetBuildConfigurations(getConfigurationNameToXcconfigPath(buildTarget),target,project.getMainGroup(),configs.get(),extraSettings,defaultSettingsBuilder.build(),appendedConfig);
  return Optional.<PBXTarget>of(target);
}
