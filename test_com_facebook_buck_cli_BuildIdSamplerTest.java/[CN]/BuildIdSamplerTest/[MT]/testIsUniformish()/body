{
  final int iterations=5000;
  final float fudge=0.01f;
  final int bucketCount=10;
  List<Pair<BuildIdSampler,AtomicInteger>> buckets=new ArrayList<>();
  for (int i=1; i <= bucketCount; ++i) {
    buckets.add(new Pair<BuildIdSampler,AtomicInteger>(new BuildIdSampler(((float)i) / bucketCount),new AtomicInteger(0)));
  }
  Random random=new Random(0);
  for (int i=0; i < iterations; ++i) {
    UUID uuid=new UUID(random.nextLong(),random.nextLong());
    BuildId buildId=new BuildId(uuid.toString());
    for (    Pair<BuildIdSampler,AtomicInteger> entry : buckets) {
      if (entry.getFirst().apply(buildId)) {
        entry.getSecond().incrementAndGet();
        break;
      }
    }
  }
  for (  Pair<BuildIdSampler,AtomicInteger> bucketPair : buckets) {
    float bucketSize=((float)bucketPair.getSecond().get()) / iterations;
    assertThat(bucketSize,Matchers.allOf(Matchers.greaterThan(0.1f - fudge),Matchers.lessThan(0.1f + fudge)));
  }
}
