{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  ProjectFilesystem filesystem=new ProjectFilesystem(temporaryFolder.getRootPath());
  filesystem.mkdirs(Paths.get("res1/values"));
  filesystem.mkdirs(Paths.get("res2/values"));
  filesystem.mkdirs(Paths.get("res3/values"));
  filesystem.mkdirs(Paths.get("res4_to_ignore"));
  Path resDep1=Paths.get("res1");
  Path resDep2=Paths.get("res2");
  Path resDep3=Paths.get("res3");
  Path resDep4=Paths.get("res4_to_ignore");
  StringBuilder expectedVmArgBuilder=new StringBuilder();
  expectedVmArgBuilder.append("-D").append(RobolectricTest.LIST_OF_RESOURCE_DIRECTORIES_PROPERTY_NAME).append("=").append(filesystem.resolve(resDep1)).append(File.pathSeparator).append(filesystem.resolve(resDep2)).append(File.pathSeparator).append(filesystem.resolve(resDep3));
  BuildTarget robolectricBuildTarget=BuildTargetFactory.newInstance("//java/src/com/facebook/base/robolectricTest:robolectricTest");
  RobolectricTest robolectricTest=(RobolectricTest)RobolectricTestBuilder.createBuilder(robolectricBuildTarget).build(resolver,filesystem);
  String result=robolectricTest.getRobolectricResourceDirectories(ImmutableList.<HasAndroidResourceDeps>of(new ResourceRule(new PathSourcePath(filesystem,resDep1)),new ResourceRule(new PathSourcePath(filesystem,resDep2)),new ResourceRule(new PathSourcePath(filesystem,resDep3)),new ResourceRule(new PathSourcePath(filesystem,resDep4))));
  assertEquals(expectedVmArgBuilder.toString(),result);
}
