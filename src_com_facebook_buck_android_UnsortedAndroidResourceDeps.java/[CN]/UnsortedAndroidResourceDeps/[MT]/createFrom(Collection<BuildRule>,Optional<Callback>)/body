{
  final ImmutableSet.Builder<HasAndroidResourceDeps> androidResources=ImmutableSet.builder();
  AbstractDependencyVisitor visitor=new AbstractDependencyVisitor(rules){
    @Override public ImmutableSet<BuildRule> visit(    BuildRule rule){
      HasAndroidResourceDeps androidResourceRule=null;
      if (rule instanceof HasAndroidResourceDeps) {
        androidResourceRule=(HasAndroidResourceDeps)rule;
      }
      if (androidResourceRule != null && androidResourceRule.getRes() != null) {
        androidResources.add(androidResourceRule);
      }
      BuildRuleType type=rule.getType();
      ImmutableSet<BuildRule> depsToVisit=maybeVisitAllDeps(rule,TRAVERSABLE_TYPES.contains(type));
      if (callback.isPresent()) {
        callback.get().onRuleVisited(rule,depsToVisit);
      }
      return depsToVisit;
    }
  }
;
  visitor.start();
  return new UnsortedAndroidResourceDeps(androidResources.build());
}
