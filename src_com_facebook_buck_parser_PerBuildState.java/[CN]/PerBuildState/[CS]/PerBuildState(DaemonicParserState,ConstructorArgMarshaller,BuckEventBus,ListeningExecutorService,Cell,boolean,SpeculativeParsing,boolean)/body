{
  this.permState=permState;
  this.marshaller=marshaller;
  this.eventBus=eventBus;
  this.enableProfiling=enableProfiling;
  this.ignoreBuckAutodepsFiles=ignoreBuckAutodepsFiles;
  this.cells=new ConcurrentHashMap<>();
  this.cellSymlinkAllowability=new ConcurrentHashMap<>();
  this.buildInputPathsUnderSymlink=Sets.newConcurrentHashSet();
  this.symlinkExistenceCache=new ConcurrentHashMap<>();
  this.stdout=new PrintStream(ByteStreams.nullOutputStream());
  this.stderr=new PrintStream(ByteStreams.nullOutputStream());
  this.console=new Console(Verbosity.STANDARD_INFORMATION,stdout,stderr,Ansi.withoutTty());
  TargetNodeListener<TargetNode<?>> symlinkCheckers=new TargetNodeListener<TargetNode<?>>(){
    @Override public void onCreate(    Path buildFile,    TargetNode<?> node) throws IOException {
      registerInputsUnderSymlinks(buildFile,node);
    }
  }
;
  ParserConfig parserConfig=new ParserConfig(rootCell.getBuckConfig());
  int numParsingThreads=parserConfig.getNumParsingThreads();
  this.projectBuildFileParserPool=new ProjectBuildFileParserPool(numParsingThreads,new Function<Cell,ProjectBuildFileParser>(){
    @Override public ProjectBuildFileParser apply(    Cell input){
      return createBuildFileParser(input,PerBuildState.this.ignoreBuckAutodepsFiles);
    }
  }
);
  this.rawNodeParsePipeline=new RawNodeParsePipeline(permState.getRawNodeCache(),projectBuildFileParserPool,executorService);
  this.targetNodeParsePipeline=new TargetNodeParsePipeline(permState.<TargetNode<?>>getOrCreateNodeCache(TargetNode.class),DefaultParserTargetNodeFactory.createForParser(eventBus,marshaller,permState.getBuildFileTrees(),symlinkCheckers,new TargetNodeFactory(permState.getTypeCoercerFactory())),parserConfig.getEnableParallelParsing() ? executorService : MoreExecutors.newDirectExecutorService(),eventBus,parserConfig.getEnableParallelParsing() && speculativeParsing.value(),rawNodeParsePipeline);
  this.targetGroupParsePipeline=new TargetGroupParsePipeline(permState.<TargetGroup>getOrCreateNodeCache(TargetGroup.class),DefaultParserTargetGroupFactory.createForParser(eventBus,marshaller),parserConfig.getEnableParallelParsing() ? executorService : MoreExecutors.newDirectExecutorService(),eventBus,rawNodeParsePipeline);
  register(rootCell);
}
