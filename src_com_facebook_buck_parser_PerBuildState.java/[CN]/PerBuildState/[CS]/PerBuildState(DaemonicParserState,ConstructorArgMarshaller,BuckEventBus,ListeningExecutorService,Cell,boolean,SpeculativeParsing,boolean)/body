{
  this.permState=permState;
  this.marshaller=marshaller;
  this.eventBus=eventBus;
  this.enableProfiling=enableProfiling;
  this.ignoreBuckAutodepsFiles=ignoreBuckAutodepsFiles;
  this.cells=new ConcurrentHashMap<>();
  this.cellSymlinkAllowability=new ConcurrentHashMap<>();
  this.buildInputPathsUnderSymlink=Sets.newConcurrentHashSet();
  this.symlinkExistenceCache=new ConcurrentHashMap<>();
  this.stdout=new PrintStream(ByteStreams.nullOutputStream());
  this.stderr=new PrintStream(ByteStreams.nullOutputStream());
  this.console=new Console(Verbosity.STANDARD_INFORMATION,stdout,stderr,Ansi.withoutTty());
  this.symlinkCheckers=new TargetNodeListener(){
    @Override public void onCreate(    Path buildFile,    TargetNode<?> node) throws IOException {
      registerInputsUnderSymlinks(buildFile,node);
    }
  }
;
  ParserConfig parserConfig=new ParserConfig(rootCell.getBuckConfig());
  int numParsingThreads=parserConfig.getNumParsingThreads();
  this.projectBuildFileParserPool=new ProjectBuildFileParserPool(numParsingThreads,new Function<Cell,ProjectBuildFileParser>(){
    @Override public ProjectBuildFileParser apply(    Cell input){
      return createBuildFileParser(input,ignoreBuckAutodepsFiles);
    }
  }
);
  this.parsePipeline=new ParsePipeline(permState,new ParsePipeline.Delegate(){
    @Override public TargetNode<?> createTargetNode(    Cell cell,    Path buildFile,    BuildTarget target,    Map<String,Object> rawNode){
      return DaemonicParserState.createTargetNode(eventBus,cell,buildFile,target,rawNode,marshaller,permState.getTypeCoercerFactory(),symlinkCheckers);
    }
  }
,parserConfig.getEnableParallelParsing() ? executorService : MoreExecutors.newDirectExecutorService(),eventBus,projectBuildFileParserPool,parserConfig.getEnableParallelParsing() && speculativeParsing.value());
  register(rootCell);
}
