{
  Map<Path,Path> newSymlinksEncountered=inputFilesUnderSymlink(node.getInputs(),node.getRuleFactoryParams().getProjectFilesystem(),symlinkExistenceCache);
  if (!newSymlinksEncountered.isEmpty()) {
    ParserConfig.AllowSymlinks allowSymlinks=Preconditions.checkNotNull(cellSymlinkAllowability.get(node.getBuildTarget().getCellPath()));
    if (allowSymlinks == ParserConfig.AllowSymlinks.FORBID) {
      throw new HumanReadableException("Target %s contains input files under a path which contains a symbolic link " + "(%s). To resolve this, use separate rules and declare dependencies instead of " + "using symbolic links.",node.getBuildTarget(),newSymlinksEncountered);
    }
    Optional<ImmutableList<Path>> readOnlyPaths=new ParserConfig(getCell(node.getBuildTarget()).getBuckConfig()).getReadOnlyPaths();
    Cell currentCell=cells.get(node.getBuildTarget().getCellPath());
    if (readOnlyPaths.isPresent() && currentCell != null) {
      Path cellRootPath=currentCell.getFilesystem().getRootPath();
      for (      Path readOnlyPath : readOnlyPaths.get()) {
        if (buildFile.startsWith(cellRootPath.resolve(readOnlyPath))) {
          LOG.debug("Target %s is under a symlink (%s). It will be cached because it belongs " + "under %s, a read-only path white listed in .buckconfing. under [project]" + " read_only_paths",node.getBuildTarget(),newSymlinksEncountered,readOnlyPath);
          return;
        }
      }
    }
    String msg=String.format("Disabling caching for target %s, because one or more input files are under a " + "symbolic link (%s). This will severely impact performance! To resolve this, " + "use separate rules and declare dependencies instead of using symbolic links.",node.getBuildTarget(),newSymlinksEncountered);
    if (allowSymlinks == ParserConfig.AllowSymlinks.WARN) {
      eventBus.post(ConsoleEvent.warning(msg));
    }
 else {
      LOG.warn(msg);
    }
    eventBus.post(ParsingEvent.symlinkInvalidation());
    buildInputPathsUnderSymlink.add(buildFile);
  }
}
