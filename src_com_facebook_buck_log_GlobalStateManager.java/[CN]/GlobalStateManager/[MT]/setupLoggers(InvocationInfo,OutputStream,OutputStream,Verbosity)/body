{
  ReferenceCountedWriter defaultWriter=rotateDefaultLogFileWriter(info.getLogFilePath());
  final long threadId=Thread.currentThread().getId();
  final String commandId=info.getCommandId();
  threadIdToCommandId.putIfAbsent(threadId,commandId);
  commandIdToConsoleHandlerWriter.put(commandId,ConsoleHandler.utf8OutputStreamWriter(consoleHandlerStream));
  if (Verbosity.ALL.equals(consoleHandlerVerbosity)) {
    commandIdToConsoleHandlerLevel.put(commandId,Level.ALL);
  }
  Path logDirectory=info.getLogDirectoryPath();
  try {
    Files.createDirectories(logDirectory);
  }
 catch (  IOException e) {
    LOG.error(e,"Failed to created 'per command log directory': [%s]",logDirectory.toAbsolutePath());
  }
  ReferenceCountedWriter newWriter=defaultWriter.newReference();
  putReferenceCountedWriter(commandId,newWriter);
  return new Closeable(){
    @Override public void close() throws IOException {
      removeReferenceCountedWriter(commandId);
      commandIdToConsoleHandlerWriter.put(commandId,ConsoleHandler.utf8OutputStreamWriter(consoleHandlerOriginalStream));
      commandIdToConsoleHandlerLevel.remove(commandId);
      List<Long> allKeys=Lists.newArrayList(threadIdToCommandId.keySet());
      for (      Long threadId : allKeys) {
        if (commandId.equals(threadIdToCommandId.get(threadId))) {
          threadIdToCommandId.remove(threadId);
        }
      }
      try {
        LOG_FILE_DIR_CLEANER.clean(info.getLogDirectoryPath().getParent());
      }
 catch (      IOException e) {
        LOG.info(e,"It's possible another concurrent buck command removed the file.");
      }
    }
  }
;
}
