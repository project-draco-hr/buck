{
  setupNewDefaultLogFileWriter(info.getTimestampMillis());
  final long threadId=Thread.currentThread().getId();
  final String commandId=info.getCommandId();
  threadIdToCommandId.putIfAbsent(threadId,commandId);
  commandIdToConsoleHandlerWriter.put(commandId,ConsoleHandler.utf8OutputStreamWriter(consoleHandlerStream));
  if (consoleHandlerVerbosity.isPresent() && Verbosity.ALL.equals(consoleHandlerVerbosity.get())) {
    commandIdToConsoleHandlerLevel.put(commandId,Level.ALL);
  }
  Path logDirectory=info.getLogDirectoryPath();
  try {
    Files.createDirectories(logDirectory);
  }
 catch (  IOException e) {
    LOG.error(e,"Failed to created 'per command log directory': [%s]",logDirectory.toAbsolutePath());
  }
  String logFilePath=logDirectory.resolve(BuckConstant.BUCK_LOG_FILE_NAME).toString();
  try {
    commandIdToLogFileHandlerWriter.put(commandId,ConsoleHandler.utf8OutputStreamWriter(new FileOutputStream(logFilePath)));
  }
 catch (  FileNotFoundException e) {
    LOG.error(e,"Failed to create log file [%s].",logFilePath);
  }
  return new Closeable(){
    @Override public void close() throws IOException {
      OutputStreamWriter writer=commandIdToLogFileHandlerWriter.remove(commandId);
      if (writer != null) {
        writer.flush();
        writer.close();
      }
      if (consoleHandlerOriginalStream.isPresent()) {
        commandIdToConsoleHandlerWriter.put(commandId,ConsoleHandler.utf8OutputStreamWriter(consoleHandlerOriginalStream.get()));
      }
 else {
        commandIdToConsoleHandlerWriter.remove(commandId);
      }
      commandIdToConsoleHandlerLevel.remove(commandId);
      List<Long> allKeys=Lists.newArrayList(threadIdToCommandId.keySet());
      for (      Long threadId : allKeys) {
        if (commandId.equals(threadIdToCommandId.get(threadId))) {
          threadIdToCommandId.remove(threadId);
        }
      }
    }
  }
;
}
