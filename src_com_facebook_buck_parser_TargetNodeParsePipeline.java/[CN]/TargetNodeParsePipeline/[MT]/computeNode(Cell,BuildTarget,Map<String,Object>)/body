{
  try (final SimplePerfEvent.Scope scope=SimplePerfEvent.scopeIgnoringShortEvents(eventBus,PerfEventId.of("GetTargetNode"),"target",buildTarget,targetNodePipelineLifetimeEventScope,getMinimumPerfEventTimeMs(),TimeUnit.MILLISECONDS)){
    Function<PerfEventId,SimplePerfEvent.Scope> perfEventScopeFunction=new Function<PerfEventId,SimplePerfEvent.Scope>(){
      @Override public SimplePerfEvent.Scope apply(      PerfEventId perfEventId){
        return SimplePerfEvent.scopeIgnoringShortEvents(eventBus,perfEventId,scope,getMinimumPerfEventTimeMs(),TimeUnit.MILLISECONDS);
      }
    }
;
    final TargetNode<?> targetNode=delegate.createTargetNode(cell,cell.getAbsolutePathToBuildFile(buildTarget),buildTarget,rawNode,perfEventScopeFunction);
    if (speculativeDepsTraversal) {
      executorService.submit(new Runnable(){
        @Override public void run(){
          for (          BuildTarget depTarget : targetNode.getDeps()) {
            Path depCellPath=depTarget.getCellPath();
            if (depCellPath.equals(cell.getRoot())) {
              try {
                if (depTarget.isFlavored()) {
                  getNodeJob(cell,BuildTarget.of(depTarget.getUnflavoredBuildTarget()));
                }
                getNodeJob(cell,depTarget);
              }
 catch (              BuildTargetException e) {
                LOG.info(e,"Could not schedule speculative parsing for %s",depTarget);
              }
            }
          }
        }
      }
);
    }
    return targetNode;
  }
 }
