{
  ImmutableList.Builder<Step> commands=ImmutableList.builder();
  Path outputDirectory=getOutputDirectory();
  Step mkdir=new MkdirStep(outputDirectory);
  commands.add(mkdir);
  ImmutableSet<Path> includePaths;
  if (metaInfDirectory != null) {
    Path stagingRoot=outputDirectory.resolve("meta_inf_staging");
    Path stagingTarget=stagingRoot.resolve("META-INF");
    MakeCleanDirectoryStep createStagingRoot=new MakeCleanDirectoryStep(stagingRoot);
    commands.add(createStagingRoot);
    MkdirAndSymlinkFileStep link=new MkdirAndSymlinkFileStep(metaInfDirectory,stagingTarget);
    commands.add(link);
    includePaths=ImmutableSet.<Path>builder().add(stagingRoot).addAll(getTransitiveClasspathEntries().values()).build();
  }
 else {
    includePaths=ImmutableSet.copyOf(getTransitiveClasspathEntries().values());
  }
  Path outputFile=getPathToOutputFile();
  Path manifestPath=manifestFile == null ? null : manifestFile.resolve();
  Step jar=new JarDirectoryStep(outputFile,includePaths,mainClass,manifestPath,mergeManifests);
  commands.add(jar);
  buildableContext.recordArtifact(outputFile);
  return commands.build();
}
