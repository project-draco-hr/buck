def testMainInstallsHandler(self):
    failfast = object()
    test = object()
    verbosity = object()
    result = object()
    default_handler = signal.getsignal(signal.SIGINT)


    class FakeRunner(object):
        initArgs = []
        runArgs = []

        def __init__(self, *args, **kwargs):
            self.initArgs.append((args, kwargs))

        def run(self, test):
            self.runArgs.append(test)
            return result


    class Program(unittest2.TestProgram):

        def __init__(self, catchbreak):
            self.exit = False
            self.verbosity = verbosity
            self.failfast = failfast
            self.catchbreak = catchbreak
            self.testRunner = FakeRunner
            self.test = test
            self.result = None
    p = Program(False)
    p.runTests()
    self.assertEqual(FakeRunner.initArgs, [((), {'verbosity': verbosity, 'failfast': failfast, 'buffer': None, })])
    self.assertEqual(FakeRunner.runArgs, [test])
    self.assertEqual(p.result, result)
    self.assertEqual(signal.getsignal(signal.SIGINT), default_handler)
    FakeRunner.initArgs = []
    FakeRunner.runArgs = []
    p = Program(True)
    p.runTests()
    self.assertEqual(FakeRunner.initArgs, [((), {'verbosity': verbosity, 'failfast': failfast, 'buffer': None, })])
    self.assertEqual(FakeRunner.runArgs, [test])
    self.assertEqual(p.result, result)
    self.assertNotEqual(signal.getsignal(signal.SIGINT), default_handler)
