{
  if (!sdk.isPresent()) {
    buildToolsErrorMessage=Optional.of(TOOLS_NEED_SDK_MESSAGE);
    return Optional.absent();
  }
  final Path sdkDir=sdk.get();
  final Path toolsDir=sdkDir.resolve("build-tools");
  if (toolsDir.toFile().isDirectory()) {
    File[] directories;
    try {
      directories=toolsDir.toFile().listFiles(new FileFilter(){
        @Override public boolean accept(        File pathname){
          if (!pathname.isDirectory()) {
            return false;
          }
          String version=stripBuildToolsPrefix(pathname.getName());
          if (!VersionStringComparator.isValidVersionString(version)) {
            throw new HumanReadableException("%s in %s is not a valid build tools directory.%n" + "Build tools directories should be follow the naming scheme: " + "android-<VERSION>, build-tools-<VERSION>, or <VERSION>. Please remove "+ "directory %s.",pathname.getName(),buildTools,pathname.getName());
          }
          if (targetBuildToolsVersion.isPresent()) {
            return targetBuildToolsVersion.get().equals(pathname.getName());
          }
          return true;
        }
      }
);
    }
 catch (    HumanReadableException e) {
      buildToolsErrorMessage=Optional.of(e.getHumanReadableErrorMessage());
      return Optional.absent();
    }
    if (targetBuildToolsVersion.isPresent()) {
      if (directories.length == 0) {
        buildToolsErrorMessage=unableToFindTargetBuildTools();
        return Optional.absent();
      }
 else {
        return Optional.of(directories[0].toPath());
      }
    }
    final VersionStringComparator comparator=new VersionStringComparator();
    File newestBuildDir=null;
    String newestBuildDirVersion=null;
    for (    File directory : directories) {
      String currentDirVersion=stripBuildToolsPrefix(directory.getName());
      if (newestBuildDir == null || newestBuildDirVersion == null || comparator.compare(newestBuildDirVersion,currentDirVersion) < 0) {
        newestBuildDir=directory;
        newestBuildDirVersion=currentDirVersion;
      }
    }
    if (newestBuildDir == null) {
      buildToolsErrorMessage=Optional.of(buildTools + " was empty, but should have " + "contained a subdirectory with build tools. Install them using the Android "+ "SDK Manager ("+ toolsDir.getParent().resolve("tools").resolve("android")+ ").");
      return Optional.absent();
    }
    return Optional.of(newestBuildDir.toPath());
  }
  if (targetBuildToolsVersion.isPresent()) {
    buildToolsErrorMessage=unableToFindTargetBuildTools();
    return Optional.absent();
  }
  return Optional.of(sdkDir.resolve("platform-tools"));
}
