{
  Path newNdk=ndkDirectory.resolve(NDK_POST_R11_VERSION_FILENAME);
  Path oldNdk=ndkDirectory.resolve(NDK_PRE_R11_VERSION_FILENAME);
  boolean newNdkPathFound=Files.exists(newNdk);
  boolean oldNdkPathFound=Files.exists(oldNdk);
  if (newNdkPathFound && oldNdkPathFound) {
    throw new HumanReadableException("Android NDK directory " + ndkDirectory + " can not "+ "contain both properties files. Remove source.properties or RELEASE.TXT.");
  }
 else   if (newNdkPathFound) {
    Properties sourceProperties=new Properties();
    try (FileInputStream fileStream=new FileInputStream(newNdk.toFile())){
      sourceProperties.load(fileStream);
      return Optional.fromNullable(sourceProperties.getProperty("Pkg.Revision"));
    }
 catch (    IOException e) {
      throw new HumanReadableException("Failed to read NDK version from " + newNdk + ".");
    }
  }
 else   if (oldNdkPathFound) {
    try (BufferedReader reader=Files.newBufferedReader(oldNdk,Charsets.UTF_8)){
      return Optional.fromNullable(reader.readLine().split("\\s+")[0].replace("r10e-rc4","r10e"));
    }
 catch (    IOException e) {
      throw new HumanReadableException("Failed to read NDK version from " + oldNdk + ".");
    }
  }
 else {
    throw new HumanReadableException(ndkDirectory + " does not contain a valid properties " + "file for Android NDK.");
  }
}
