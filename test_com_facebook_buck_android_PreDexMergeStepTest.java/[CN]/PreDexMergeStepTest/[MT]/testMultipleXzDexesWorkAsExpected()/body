{
  PreDexMergeStep preDexMergeStep=createPreDexMergeStep(SAMPLE_DEX_FILES_TO_MERGE,550,DexStore.XZ);
  ProjectFilesystem projectFilesystem=EasyMock.createMock(ProjectFilesystem.class);
  configureResolveMethod(projectFilesystem);
  setExpectedSecondaryDexFiles(projectFilesystem,1,DexStore.XZ,true);
  ImmutableList<String> lines=ImmutableList.of("secondary-1.dex.jar.xz 56175a8 com.example.common.base.Base");
  projectFilesystem.writeLinesToPath(lines,secondaryDexMetadataTxt);
  AndroidPlatformTarget androidPlatformTarget=EasyMock.createMock(AndroidPlatformTarget.class);
  EasyMock.expect(androidPlatformTarget.getDxExecutable()).andReturn(new File("/usr/bin/dx")).anyTimes();
  ExecutionContext context=TestExecutionContext.newBuilder().setProjectFilesystem(projectFilesystem).setAndroidPlatformTarget(Optional.of(androidPlatformTarget)).build();
  EasyMock.replay(projectFilesystem,androidPlatformTarget);
  int exitCode=preDexMergeStep.execute(context);
  assertEquals(0,exitCode);
  assertTrue(executorService.wasShutdownNowInvoked());
  String dxCommandPrefix=createDxCommandPrefix();
  String tmpJar=secondaryDexJarFilesDir + "/secondary-1.dex.tmp.jar";
  String tmpDxJar=secondaryDexJarFilesDir + "/secondary-1.dex.jar";
  String dxStep=dxCommandPrefix + tmpJar + " "+ "buck-out/gen/dex1.dex.jar "+ "buck-out/gen/dex2.dex.jar "+ "buck-out/gen/dex4.dex.jar";
  String repackStep="repack " + tmpJar + " in "+ tmpDxJar;
  String rmStep="rm -f " + tmpJar;
  String xzStep="xz -z -4 --check=crc32 " + tmpDxJar;
  String dxRepackRmXzCompositeStep=Joiner.on(" && ").join(dxStep,repackStep,rmStep,xzStep);
  MoreAsserts.assertSteps("There should be one simple dx step and one dx-repack-rm-xz composite step.",ImmutableList.of(dxCommandPrefix + "buck-out/gen/app/__app_classes.dex " + "buck-out/gen/app/r_classes.dex.jar "+ "buck-out/gen/dex3.dex.jar",dxRepackRmXzCompositeStep),stepsAddedToStepRunnerToBeRunInParallel,context);
  EasyMock.verify(projectFilesystem,androidPlatformTarget);
}
