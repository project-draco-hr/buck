{
  final BuildTarget target=params.getBuildTarget();
  final boolean bytecodeOnly=args.bytecodeOnly.or(false);
  final String libDir=args.libDir.or("lib");
  final String libName=args.libName.or(target.getShortName());
  final String nativeLib=args.nativeLib.or(String.format("%s.cmxa",libName));
  final String bytecodeLib=args.bytecodeLib.or(String.format("%s.cma",libName));
  final ImmutableList<String> cLibs=args.cLibs.get();
  final Path libPath=target.getBasePath().resolve(libDir);
  final Path includeDir=libPath.resolve(args.includeDir.or(""));
  final Optional<SourcePath> staticNativeLibraryPath=bytecodeOnly ? Optional.<SourcePath>absent() : Optional.<SourcePath>of(new PathSourcePath(params.getProjectFilesystem(),libPath.resolve(nativeLib)));
  final SourcePath staticBytecodeLibraryPath=new PathSourcePath(params.getProjectFilesystem(),libPath.resolve(bytecodeLib));
  final ImmutableList<SourcePath> staticCLibraryPaths=FluentIterable.from(cLibs).transform(new Function<String,SourcePath>(){
    @Override public SourcePath apply(    String input){
      return new PathSourcePath(params.getProjectFilesystem(),libPath.resolve(input));
    }
  }
).toList();
  final SourcePath bytecodeLibraryPath=new PathSourcePath(params.getProjectFilesystem(),libPath.resolve(bytecodeLib));
  return new PrebuiltOCamlLibrary(params,new SourcePathResolver(resolver),staticNativeLibraryPath,staticBytecodeLibraryPath,staticCLibraryPaths,bytecodeLibraryPath,libPath,includeDir);
}
