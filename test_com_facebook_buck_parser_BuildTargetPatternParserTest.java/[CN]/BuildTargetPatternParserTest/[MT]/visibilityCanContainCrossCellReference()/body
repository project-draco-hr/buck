{
  BuildTargetPatternParser<BuildTargetPattern> buildTargetPatternParser=BuildTargetPatternParser.forVisibilityArgument();
  final ProjectFilesystem filesystem=FakeProjectFilesystem.createJavaOnlyFilesystem();
  CellPathResolver cellNames=new CellPathResolver(){
    @Override public Path getCellPath(    Optional<String> input){
      if (input.get().equals("other")) {
        return filesystem.getRootPath();
      }
      throw new RuntimeException("We should only be called with 'other'");
    }
  }
;
  assertEquals(new SingletonBuildTargetPattern(filesystem.getRootPath(),"//:something"),buildTargetPatternParser.parse(cellNames,"other//:something"));
  assertEquals(new SubdirectoryBuildTargetPattern(filesystem.getRootPath(),filesystem.getRootPath().getFileSystem().getPath("sub")),buildTargetPatternParser.parse(cellNames,"other//sub/..."));
}
