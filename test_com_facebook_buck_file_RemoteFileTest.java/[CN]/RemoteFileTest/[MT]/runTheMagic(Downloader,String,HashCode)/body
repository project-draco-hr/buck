{
  ProjectFilesystem filesystem=new ProjectFilesystem(tmp.getRoot().toPath().toAbsolutePath());
  final byte[] bytes=contentsOfFile.getBytes(UTF_8);
  if (downloader == null) {
    downloader=new Downloader(){
      @Override public void fetch(      BuckEventBus eventBus,      URI uri,      Path output) throws IOException {
        Files.createDirectories(output.getParent());
        Files.write(output,bytes);
      }
    }
;
  }
  BuildRuleParams params=new FakeBuildRuleParamsBuilder("//cake:walk").setProjectFilesystem(filesystem).build();
  RemoteFile remoteFile=new RemoteFile(params,new SourcePathResolver(new BuildRuleResolver()),downloader,new URI("http://example.com"),hashCode,"output.txt");
  ImmutableList<Step> buildSteps=remoteFile.getBuildSteps(FakeBuildContext.NOOP_CONTEXT,new FakeBuildableContext());
  ExecutionContext context=TestExecutionContext.newBuilder().setProjectFilesystem(filesystem).build();
  for (  Step buildStep : buildSteps) {
    int result=buildStep.execute(context);
    if (result != 0) {
      break;
    }
  }
  return filesystem.resolve(remoteFile.getPathToOutput());
}
