def _get_buck_version_uid(self):
    with Tracing('BuckRepo._get_buck_version_uid'):
        fake_buck_version_file_path = os.path.join(self._buck_dir, '.fakebuckversion')
        if os.path.exists(fake_buck_version_file_path):
            with open(fake_buck_version_file_path) as fake_buck_version_file:
                fake_buck_version = fake_buck_version_file.read().strip()
            print(textwrap.dedent(('::: Faking buck version %s, despite your buck directory not being that version!\n::: We hope you know what you are doing...' % fake_buck_version)), file=sys.stderr)
            return fake_buck_version
        clean_version = buck_version.get_clean_buck_version(self._buck_dir, allow_dirty=(self._is_buck_repo_dirty_override == '1'))
        if (clean_version is not None):
            return clean_version
        if (self._buck_project.has_no_buck_check or (not self._buck_project.buck_version)):
            return buck_version.get_dirty_buck_version(self._buck_dir)
        if self._has_local_changes():
            print(textwrap.dedent('                ::: Your buck directory has local modifications, and therefore\n                ::: builds will not be able to use a distributed cache.\n                ::: The following files must be either reverted or committed:'), file=sys.stderr)
            subprocess.call(['git', 'ls-files', '-m'], stdout=sys.stderr, cwd=self._buck_dir)
        elif (os.environ.get('BUCK_CLEAN_REPO_IF_DIRTY') != 'NO'):
            print(textwrap.dedent('                ::: Your local buck directory is dirty, and therefore builds will\n                ::: not be able to use a distributed cache.'), file=sys.stderr)
            if sys.stdout.isatty():
                print('::: Do you want to clean your buck directory? [y/N]', file=sys.stderr)
                choice = raw_input().lower()
                if (choice == 'y'):
                    subprocess.call(['git', 'clean', '-fd'], stdout=sys.stderr, cwd=self._buck_dir)
                    raise RestartBuck()
        return buck_version.get_dirty_buck_version(self._buck_dir)
