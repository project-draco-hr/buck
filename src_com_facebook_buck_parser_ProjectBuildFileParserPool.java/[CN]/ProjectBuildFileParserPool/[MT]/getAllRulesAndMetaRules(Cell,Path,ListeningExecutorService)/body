{
  Preconditions.checkState(!closing.get());
  final ListenableFuture<ImmutableList<Map<String,Object>>> futureWork=Futures.transformAsync(initialSchedule(cell),new AsyncFunction<Void,ImmutableList<Map<String,Object>>>(){
    @Override public ListenableFuture<ImmutableList<Map<String,Object>>> apply(    Void input) throws Exception {
      Either<ProjectBuildFileParser,ListenableFuture<Void>> parserRequest=requestParser(cell);
      if (parserRequest.isLeft()) {
        ProjectBuildFileParser parser=parserRequest.getLeft();
        boolean hadErrorDuringParsing=false;
        try {
          return Futures.immediateFuture(ImmutableList.copyOf(parser.getAllRulesAndMetaRules(buildFile)));
        }
 catch (        BuildFileParseException e) {
          hadErrorDuringParsing=true;
          throw e;
        }
 finally {
          returnParser(cell,parser,hadErrorDuringParsing);
        }
      }
 else {
        return Futures.transformAsync(parserRequest.getRight(),this,executorService);
      }
    }
  }
,executorService);
  pendingWork.add(futureWork);
  futureWork.addListener(new Runnable(){
    @Override public void run(){
synchronized (ProjectBuildFileParserPool.this) {
        pendingWork.remove(futureWork);
      }
    }
  }
,executorService);
  return Futures.nonCancellationPropagating(futureWork);
}
