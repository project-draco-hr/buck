{
  ArtifactCacheBuckConfig config=createFromText("[cache]","http_cache_names = bob, fred","","[cache#bob]","http_url = http://bob.com/","","[cache#fred]","http_url = http://fred.com/","http_timeout_seconds = 42","http_mode = readonly","blacklisted_wifi_ssids = yolo","","[cache#ignoreme]","http_url = http://ignored.com/");
  assertThat(config.getHttpCaches(),Matchers.hasSize(2));
  HttpCacheEntry bobCache=FluentIterable.from(config.getHttpCaches()).get(0);
  assertThat(bobCache.getUrl(),Matchers.equalTo(URI.create("http://bob.com/")));
  assertThat(bobCache.getCacheReadMode(),Matchers.equalTo(ArtifactCacheBuckConfig.CacheReadMode.readwrite));
  assertThat(bobCache.getTimeoutSeconds(),Matchers.is(3));
  HttpCacheEntry fredCache=FluentIterable.from(config.getHttpCaches()).get(1);
  assertThat(fredCache.getUrl(),Matchers.equalTo(URI.create("http://fred.com/")));
  assertThat(fredCache.getTimeoutSeconds(),Matchers.is(42));
  assertThat(fredCache.getCacheReadMode(),Matchers.equalTo(ArtifactCacheBuckConfig.CacheReadMode.readonly));
  assertThat(fredCache.isWifiUsableForDistributedCache(Optional.of("wsad")),Matchers.is(true));
  assertThat(fredCache.isWifiUsableForDistributedCache(Optional.of("yolo")),Matchers.is(false));
}
