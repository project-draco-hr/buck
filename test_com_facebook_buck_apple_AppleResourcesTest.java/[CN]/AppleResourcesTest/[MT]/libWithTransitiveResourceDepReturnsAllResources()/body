{
  BuildTarget fooResourceTarget=BuildTarget.builder("//foo","resource").build();
  TargetNode<AppleResourceDescription.Arg> fooResourceNode=AppleResourceBuilder.createBuilder(fooResourceTarget).setFiles(ImmutableSet.<SourcePath>of(new TestSourcePath("foo.png"))).setDirs(ImmutableSet.<SourcePath>of()).build();
  BuildTarget fooLibTarget=BuildTarget.builder("//foo","lib").build();
  TargetNode<AppleNativeTargetDescriptionArg> fooLibNode=AppleLibraryBuilder.createBuilder(fooLibTarget).setDeps(Optional.of(ImmutableSortedSet.of(fooResourceTarget))).build();
  BuildTarget barResourceTarget=BuildTarget.builder("//bar","resource").build();
  TargetNode<AppleResourceDescription.Arg> barResourceNode=AppleResourceBuilder.createBuilder(barResourceTarget).setFiles(ImmutableSet.<SourcePath>of(new TestSourcePath("bar.png"))).setDirs(ImmutableSet.<SourcePath>of()).build();
  TargetNode<AppleNativeTargetDescriptionArg> barLibNode=AppleLibraryBuilder.createBuilder(BuildTarget.builder("//bar","lib").build()).setDeps(Optional.of(ImmutableSortedSet.of(fooLibTarget,barResourceTarget))).build();
  ImmutableSet<TargetNode<?>> graphNodes=ImmutableSet.of(fooResourceNode,fooLibNode,barResourceNode,barLibNode);
  TargetGraph targetGraph=TargetGraphFactory.newInstance(graphNodes);
  ImmutableSet<TargetNode<AppleNativeTargetDescriptionArg>> targetNodes=ImmutableSet.of(barLibNode);
  assertThat(AppleResources.collectRecursiveResources(targetGraph,targetNodes),hasItems(fooResourceNode.getConstructorArg(),barResourceNode.getConstructorArg()));
}
