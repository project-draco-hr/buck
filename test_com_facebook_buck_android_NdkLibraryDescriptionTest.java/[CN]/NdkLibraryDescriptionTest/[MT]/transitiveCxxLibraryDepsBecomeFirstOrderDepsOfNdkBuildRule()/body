{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  FakeBuildRule transitiveInput=resolver.addToIndex(new FakeBuildRule("//:transitive_input",pathResolver));
  transitiveInput.setOutputFile("out");
  FakeNativeLinkable transitiveDep=resolver.addToIndex(new FakeNativeLinkable("//:transitive_dep",pathResolver,new BuildTargetSourcePath(transitiveInput.getBuildTarget())));
  FakeBuildRule firstOrderInput=resolver.addToIndex(new FakeBuildRule("//:first_order_input",pathResolver));
  firstOrderInput.setOutputFile("out");
  FakeNativeLinkable firstOrderDep=resolver.addToIndex(new FakeNativeLinkable("//:first_order_dep",pathResolver,new BuildTargetSourcePath(firstOrderInput.getBuildTarget()),transitiveDep));
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  BuildRule ndkLibrary=new NdkLibraryBuilder(target).addDep(firstOrderDep.getBuildTarget()).build(resolver);
  assertThat(ndkLibrary.getDeps(),Matchers.allOf(Matchers.<BuildRule>hasItem(firstOrderInput),Matchers.<BuildRule>hasItem(transitiveInput)));
}
