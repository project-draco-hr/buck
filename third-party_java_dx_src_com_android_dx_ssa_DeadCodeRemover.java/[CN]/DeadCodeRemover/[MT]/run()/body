{
  pruneDeadInstructions();
  HashSet<SsaInsn> deletedInsns=new HashSet<SsaInsn>();
  ssaMeth.forEachInsn(new NoSideEffectVisitor(worklist));
  int regV;
  while (0 <= (regV=worklist.nextSetBit(0))) {
    worklist.clear(regV);
    if (useList[regV].size() == 0 || isCircularNoSideEffect(regV,null)) {
      SsaInsn insnS=ssaMeth.getDefinitionForRegister(regV);
      if (deletedInsns.contains(insnS)) {
        continue;
      }
      RegisterSpecList sources=insnS.getSources();
      int sz=sources.size();
      for (int i=0; i < sz; i++) {
        RegisterSpec source=sources.get(i);
        useList[source.getReg()].remove(insnS);
        if (!hasSideEffect(ssaMeth.getDefinitionForRegister(source.getReg()))) {
          worklist.set(source.getReg());
        }
      }
      deletedInsns.add(insnS);
    }
  }
  ssaMeth.deleteInsns(deletedInsns);
}
