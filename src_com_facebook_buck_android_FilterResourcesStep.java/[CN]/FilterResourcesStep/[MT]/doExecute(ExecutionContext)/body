{
  List<Predicate<Path>> pathPredicates=Lists.newArrayList();
  boolean canDownscale=imageScaler != null && imageScaler.isAvailable(context);
  LOG.info("FilterResourcesStep: canDownscale: %s. imageScalar non-null: %s.",canDownscale,imageScaler != null);
  if (filterDrawables) {
    Preconditions.checkNotNull(drawableFinder);
    Set<Path> drawables=drawableFinder.findDrawables(inResDirToOutResDirMap.keySet(),context.getProjectFilesystem());
    pathPredicates.add(Filters.createImageDensityFilter(drawables,targetDensities,canDownscale));
  }
  if (!locales.isEmpty()) {
    pathPredicates.add(new Predicate<Path>(){
      @Override public boolean apply(      Path input){
        Matcher matcher=VALUES_DIR_PATTERN.matcher(input.toString());
        if (!matcher.matches()) {
          return true;
        }
        String locale=matcher.group(1);
        if (matcher.group(2) != null) {
          locale+="_" + matcher.group(2);
        }
        return locales.contains(locale);
      }
    }
);
  }
  if (filterStrings) {
    pathPredicates.add(new Predicate<Path>(){
      @Override public boolean apply(      Path pathRelativeToProjectRoot){
        if (!NON_ENGLISH_STRING_PATH.matcher(pathRelativeToProjectRoot.toString()).matches()) {
          return true;
        }
        nonEnglishStringFilesBuilder.add(pathRelativeToProjectRoot);
        for (        Path whitelistedStringDir : whitelistedStringDirs) {
          if (pathRelativeToProjectRoot.startsWith(whitelistedStringDir)) {
            return true;
          }
        }
        return false;
      }
    }
);
  }
  filteredDirectoryCopier.copyDirs(context.getProjectFilesystem(),inResDirToOutResDirMap,Predicates.and(pathPredicates));
  if (canDownscale && filterDrawables) {
    scaleUnmatchedDrawables(context);
  }
  return 0;
}
