{
  List<Predicate<Path>> pathPredicates=Lists.newArrayList();
  if (filterByDensity) {
    Preconditions.checkNotNull(targetDensities);
    Set<Path> rootResourceDirs=inResDirToOutResDirMap.keySet();
    pathPredicates.add(ResourceFilters.createDensityFilter(filesystem,targetDensities));
    Preconditions.checkNotNull(drawableFinder);
    Set<Path> drawables=drawableFinder.findDrawables(rootResourceDirs,filesystem);
    pathPredicates.add(ResourceFilters.createImageDensityFilter(drawables,targetDensities,imageScaler != null && imageScaler.isAvailable(context)));
  }
  final boolean localeFilterEnabled=!locales.isEmpty();
  if (localeFilterEnabled || enableStringWhitelisting) {
    pathPredicates.add(new Predicate<Path>(){
      @Override public boolean apply(      Path path){
        Matcher matcher=NON_ENGLISH_STRINGS_FILE_PATH.matcher(MorePaths.pathWithUnixSeparators(path));
        if (!matcher.matches()) {
          return true;
        }
        if (enableStringWhitelisting) {
          return isPathWhitelisted(path);
        }
 else {
          Preconditions.checkState(localeFilterEnabled);
          String locale=matcher.group(1);
          if (matcher.group(2) != null) {
            locale+="_" + matcher.group(2);
          }
          return locales.contains(locale);
        }
      }
    }
);
  }
  return Predicates.and(pathPredicates);
}
