{
  Preconditions.checkArgument(CxxSourceTypes.isCompilableType(source.getType()));
  BuildTarget target=createCompileBuildTarget(name);
  Compiler compiler=getCompiler(source.getType());
  ImmutableList<String> platformFlags=ImmutableList.<String>builder().addAll(getPicType().getFlags()).addAll(getPlatformCompileFlags(source.getType())).build();
  ImmutableList<String> ruleFlags=ImmutableList.<String>builder().addAll(getRuleCompileFlags(source.getType())).addAll(source.getFlags()).build();
  CxxPreprocessAndCompile result=CxxPreprocessAndCompile.compile(getParams().copyWithChanges(target,new DepsBuilder().add(compiler).add(source),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),getPathResolver(),new CompilerDelegate(getPathResolver(),getCxxPlatform().getDebugPathSanitizer(),compiler,platformFlags,ruleFlags),getCompileOutputPath(target,name),source.getPath(),source.getType(),getCxxPlatform().getDebugPathSanitizer());
  getResolver().addToIndex(result);
  return result;
}
