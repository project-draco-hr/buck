{
  Preconditions.checkArgument(CxxSourceTypes.isPreprocessableType(source.getType()));
  LOG.verbose("Creating preprocessed InferCapture build rule %s for %s",target,source);
  PreprocessorDelegateCacheValue preprocessorDelegateValue=preprocessorDelegates.getUnchecked(PreprocessorDelegateCacheKey.of(source.getType(),source.getFlags()));
  CxxInferCapture result=new CxxInferCapture(getParams().copyWithChanges(target,Suppliers.ofInstance(new DepsBuilder().addAggregatedPreprocessDeps().add(preprocessorDelegateValue.getPreprocessorDelegate().getPreprocessor()).add(source).build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),getPathResolver(),CxxToolFlags.copyOf(CxxSourceTypes.getPlatformPreprocessFlags(getCxxPlatform(),source.getType()),preprocessorFlags.getUnchecked(source.getType())),computeCompilerFlags(source.getType(),source.getFlags()),source.getPath(),source.getType(),getCompileOutputPath(target,name),preprocessorDelegateValue.getPreprocessorDelegate(),inferConfig,getCxxPlatform().getDebugPathSanitizer());
  getResolver().addToIndex(result);
  return result;
}
