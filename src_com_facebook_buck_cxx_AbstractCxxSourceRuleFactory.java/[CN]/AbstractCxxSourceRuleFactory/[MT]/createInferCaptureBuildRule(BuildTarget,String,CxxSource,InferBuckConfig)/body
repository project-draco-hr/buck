{
  Preconditions.checkArgument(CxxSourceTypes.isPreprocessableType(source.getType()));
  LOG.verbose("Creating preprocessed InferCapture build rule %s for %s",target,source);
  PreprocessorDelegate preprocessorDelegate=preprocessorDelegates.getUnchecked(PreprocessAndCompilePreprocessorDelegateKey.of(source.getType(),source.getFlags()));
  CxxInferCapture result=new CxxInferCapture(getParams().copyWithChanges(target,new DepsBuilder().addPreprocessDeps().add(source),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),getPathResolver(),CxxToolFlags.copyOf(CxxSourceTypes.getPlatformPreprocessFlags(getCxxPlatform(),source.getType()),preprocessorFlags.getUnchecked(source.getType())),computeCompilerFlags(source.getType(),source.getFlags()),source.getPath(),source.getType(),getCompileOutputPath(target,name),preprocessorDelegate,inferConfig,getCxxPlatform().getDebugPathSanitizer());
  getResolver().addToIndex(result);
  return result;
}
