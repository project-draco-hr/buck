{
  CxxToolFlags compilerFlags=computeCompilerFlags(source.getType(),source.getFlags());
  String pchIdentifier=String.format("%s%s-%s",PCH_FLAVOR_PREFIX,source.getType().getLanguage(),preprocessorDelegateCacheValue.getCommandHash(compilerFlags));
  BuildTarget target=BuildTarget.builder(getParams().getBuildTarget()).addFlavors(getCxxPlatform().getFlavor()).addFlavors(ImmutableFlavor.of(Flavor.replaceInvalidCharacters(pchIdentifier))).build();
  Optional<CxxPrecompiledHeader> existingRule=getResolver().getRuleOptionalWithType(target,CxxPrecompiledHeader.class);
  if (existingRule.isPresent()) {
    return existingRule.get();
  }
  Path output=BuildTargets.getGenPath(getParams().getProjectFilesystem(),target,"%s.gch");
  PreprocessorDelegate preprocessorDelegate=preprocessorDelegateCacheValue.getPreprocessorDelegate();
  SourcePath path=Preconditions.checkNotNull(preprocessorDelegate.getPrefixHeader().get());
  CxxPrecompiledHeader rule=new CxxPrecompiledHeader(getParams().copyWithChanges(target,Suppliers.ofInstance(new DepsBuilder().addAggregatedPreprocessDeps().add(preprocessorDelegate.getPreprocessor()).add(path).build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),getPathResolver(),output,preprocessorDelegate,compilerFlags,path,source.getType(),getCxxPlatform().getDebugPathSanitizer());
  getResolver().addToIndex(rule);
  return rule;
}
