{
  Preconditions.checkArgument(CxxSourceTypes.isPreprocessableType(source.getType()));
  BuildTarget target=createCompileBuildTarget(name);
  Compiler compiler=CxxSourceTypes.getCompiler(getCxxPlatform(),CxxSourceTypes.getPreprocessorOutputType(source.getType()));
  LOG.verbose("Creating preprocess and compile %s for %s",target,source);
  PreprocessorDelegate preprocessorDelegate=preprocessorDelegates.getUnchecked(PreprocessAndCompilePreprocessorDelegateKey.of(source.getType(),source.getFlags()));
  CxxPreprocessAndCompile result=CxxPreprocessAndCompile.preprocessAndCompile(getParams().copyWithChanges(target,new DepsBuilder().addPreprocessDeps().add(compiler).add(source),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),getPathResolver(),preprocessorDelegate,new CompilerDelegate(getPathResolver(),getCxxPlatform().getDebugPathSanitizer(),compiler,computeCompilerFlags(source.getType(),source.getFlags())),getCompileOutputPath(target,name),source.getPath(),source.getType(),getCxxPlatform().getDebugPathSanitizer(),strategy);
  getResolver().addToIndex(result);
  return result;
}
