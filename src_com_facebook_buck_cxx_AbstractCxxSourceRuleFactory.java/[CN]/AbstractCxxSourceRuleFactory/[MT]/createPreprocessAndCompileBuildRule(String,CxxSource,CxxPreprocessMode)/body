{
  Preconditions.checkArgument(CxxSourceTypes.isPreprocessableType(source.getType()));
  BuildTarget target=createCompileBuildTarget(name);
  Compiler compiler=CxxSourceTypes.getCompiler(getCxxPlatform(),CxxSourceTypes.getPreprocessorOutputType(source.getType())).resolve(getResolver());
  LOG.verbose("Creating preprocess and compile %s for %s",target,source);
  PreprocessorDelegate preprocessorDelegate=preprocessorDelegates.getUnchecked(PreprocessAndCompilePreprocessorDelegateKey.of(source.getType(),source.getFlags()));
  DepsBuilder depsBuilder=new DepsBuilder().addPreprocessDeps().add(preprocessorDelegate.getPreprocessor()).add(compiler).add(source);
  Optional<PrecompiledHeaderReference> precompiledHeaderReference=Optional.absent();
  if (shouldUsePrecompiledHeaders(preprocessorDelegate,strategy)) {
    CxxPrecompiledHeader precompiledHeader=requirePrecompiledHeaderBuildRule(preprocessorDelegate,source);
    depsBuilder.add(precompiledHeader);
    precompiledHeaderReference=Optional.of(PrecompiledHeaderReference.from(precompiledHeader));
  }
  CxxPreprocessAndCompile result=CxxPreprocessAndCompile.preprocessAndCompile(getParams().copyWithChanges(target,Suppliers.ofInstance(depsBuilder.build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),getPathResolver(),preprocessorDelegate,new CompilerDelegate(getPathResolver(),getCxxPlatform().getDebugPathSanitizer(),compiler,computeCompilerFlags(source.getType(),source.getFlags())),getCompileOutputPath(target,name),source.getPath(),source.getType(),precompiledHeaderReference,getCxxPlatform().getDebugPathSanitizer(),strategy);
  getResolver().addToIndex(result);
  return result;
}
