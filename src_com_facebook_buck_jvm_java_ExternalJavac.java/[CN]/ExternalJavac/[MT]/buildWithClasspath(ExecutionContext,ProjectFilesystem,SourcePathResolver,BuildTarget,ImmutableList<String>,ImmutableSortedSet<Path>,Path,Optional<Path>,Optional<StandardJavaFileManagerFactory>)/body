{
  ImmutableList.Builder<String> command=ImmutableList.builder();
  command.add(pathToJavac.toString());
  command.addAll(options);
  ImmutableList<Path> expandedSources;
  try {
    expandedSources=getExpandedSourcePaths(filesystem,invokingRule,javaSourceFilePaths,workingDirectory);
  }
 catch (  IOException e) {
    throw new HumanReadableException("Unable to expand sources for %s into %s",invokingRule,workingDirectory);
  }
  try {
    filesystem.writeLinesToPath(FluentIterable.from(expandedSources).transform(Functions.toStringFunction()).transform(ARGFILES_ESCAPER),pathToSrcsList);
    command.add("@" + pathToSrcsList);
  }
 catch (  IOException e) {
    context.logError(e,"Cannot write list of .java files to compile to %s file! Terminating compilation.",pathToSrcsList);
    return 1;
  }
  ProcessBuilder processBuilder=new ProcessBuilder(command.build());
  Map<String,String> env=processBuilder.environment();
  env.clear();
  env.putAll(context.getEnvironment());
  processBuilder.directory(filesystem.getRootPath().toAbsolutePath().toFile());
  int exitCode=-1;
  try {
    Process p=BgProcessKiller.startProcess(processBuilder);
    ProcessExecutor.Result result=context.getProcessExecutor().execute(p);
    exitCode=result.getExitCode();
  }
 catch (  IOException e) {
    e.printStackTrace(context.getStdErr());
    return exitCode;
  }
  return exitCode;
}
