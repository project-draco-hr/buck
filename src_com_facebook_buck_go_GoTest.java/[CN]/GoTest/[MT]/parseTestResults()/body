{
  ImmutableList.Builder<TestResultSummary> summariesBuilder=ImmutableList.builder();
  try (BufferedReader reader=Files.newBufferedReader(getProjectFilesystem().resolve(getPathToTestResults()),Charsets.UTF_8)){
    Optional<String> currentTest=Optional.absent();
    List<String> stdout=Lists.newArrayList();
    String line;
    while ((line=reader.readLine()) != null) {
      Matcher matcher;
      if ((matcher=TEST_START_PATTERN.matcher(line)).matches()) {
        currentTest=Optional.of(matcher.group("name"));
      }
 else       if ((matcher=TEST_FINISHED_PATTERN.matcher(line)).matches()) {
        if (!currentTest.or("").equals(matcher.group("name"))) {
          throw new RuntimeException(String.format("Error parsing test output: test case end '%s' does not match start '%s'",matcher.group("name"),currentTest.or("")));
        }
        ResultType result=ResultType.FAILURE;
        if ("PASS".equals(matcher.group("status"))) {
          result=ResultType.SUCCESS;
        }
 else         if ("SKIP".equals(matcher.group("status"))) {
          result=ResultType.ASSUMPTION_VIOLATION;
        }
        double timeTaken=0.0;
        try {
          timeTaken=Float.parseFloat(matcher.group("duration"));
        }
 catch (        NumberFormatException ex) {
          Throwables.propagate(ex);
        }
        summariesBuilder.add(new TestResultSummary("go_test",matcher.group("name"),result,(long)(timeTaken * 1000),"","",Joiner.on(System.lineSeparator()).join(stdout),""));
        currentTest=Optional.absent();
        stdout.clear();
      }
 else {
        stdout.add(line);
      }
    }
    if (currentTest.isPresent()) {
      summariesBuilder.add(new TestResultSummary("go_test",currentTest.get(),ResultType.FAILURE,0,"incomplete","",Joiner.on(System.lineSeparator()).join(stdout),""));
    }
  }
   return summariesBuilder.build();
}
