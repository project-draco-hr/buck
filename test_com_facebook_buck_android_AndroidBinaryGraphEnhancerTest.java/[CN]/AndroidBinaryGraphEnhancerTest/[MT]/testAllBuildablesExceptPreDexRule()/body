{
  BuildTarget buildConfigBuildTarget=BuildTarget.builder("//java/com/example","cfg").build();
  BuildRuleParams buildConfigParams=new FakeBuildRuleParamsBuilder(buildConfigBuildTarget).build();
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  AndroidBuildConfigJavaLibrary buildConfigJavaLibrary=AndroidBuildConfigDescription.createBuildRule(buildConfigParams,"com.example.buck",BuildConfigFields.empty(),Optional.<SourcePath>absent(),false,ruleResolver);
  BuildTarget apkTarget=BuildTargetFactory.newInstance("//java/com/example:apk");
  BuildRuleParams originalParams=new FakeBuildRuleParamsBuilder(apkTarget).setDeps(ImmutableSortedSet.<BuildRule>of(buildConfigJavaLibrary)).build();
  Keystore keystore=createStrictMock(Keystore.class);
  AndroidBinaryGraphEnhancer graphEnhancer=new AndroidBinaryGraphEnhancer(originalParams,ruleResolver,ResourcesFilter.ResourceCompressionMode.ENABLED_WITH_STRINGS_AS_ASSETS,FilterResourcesStep.ResourceFilter.EMPTY_FILTER,new TestSourcePath("AndroidManifest.xml"),AndroidBinary.PackageType.DEBUG,ImmutableSet.<TargetCpuType>of(),false,false,BuildTargets.getBinPath(apkTarget,"%s/classes.dex"),DexSplitMode.NO_SPLIT,ImmutableSet.<BuildTarget>of(),ImmutableSet.<BuildTarget>of(),JavacOptions.DEFAULTS,EnumSet.of(ExopackageMode.SECONDARY_DEX),keystore,BuildConfigFields.empty(),Optional.<SourcePath>absent(),ImmutableMap.<TargetCpuType,CxxPlatform>of());
  replay(keystore);
  EnhancementResult result=graphEnhancer.createAdditionalBuildables();
  String flavor="buildconfig_com_example_buck";
  assertEquals("The only classpath entry to dex should be the one from the AndroidBuildConfigJavaLibrary" + " created via graph enhancement.",ImmutableSet.of(Paths.get("buck-out/gen/java/com/example/lib__apk#" + flavor + "__output/apk#"+ flavor+ ".jar")),result.classpathEntriesToDex());
  BuildTarget enhancedBuildConfigTarget=BuildTarget.builder(apkTarget).setFlavor(flavor).build();
  BuildRule enhancedBuildConfigRule=ruleResolver.getRule(enhancedBuildConfigTarget);
  assertTrue(enhancedBuildConfigRule instanceof AndroidBuildConfigJavaLibrary);
  AndroidBuildConfigJavaLibrary enhancedBuildConfigJavaLibrary=(AndroidBuildConfigJavaLibrary)enhancedBuildConfigRule;
  AndroidBuildConfig androidBuildConfig=enhancedBuildConfigJavaLibrary.getAndroidBuildConfig();
  assertEquals("com.example.buck",androidBuildConfig.getJavaPackage());
  assertTrue(androidBuildConfig.isUseConstantExpressions());
  assertEquals("IS_EXOPACKAGE defaults to false, but should now be true. DEBUG should still be true.",BuildConfigFields.fromFields(ImmutableList.of(new BuildConfigFields.Field("boolean","DEBUG","true"),new BuildConfigFields.Field("boolean","IS_EXOPACKAGE","true"),new BuildConfigFields.Field("int","EXOPACKAGE_FLAGS","1"))),androidBuildConfig.getBuildConfigFields());
  ImmutableSortedSet<BuildRule> finalDeps=result.finalDeps();
  assertEquals(1,finalDeps.size());
  BuildRule computeExopackageDepsAbiRule=findRuleOfType(ruleResolver,ComputeExopackageDepsAbi.class);
  assertEquals(computeExopackageDepsAbiRule,finalDeps.first());
  FilteredResourcesProvider resourcesProvider=result.aaptPackageResources().getFilteredResourcesProvider();
  assertTrue(resourcesProvider instanceof ResourcesFilter);
  BuildRule resourcesFilterRule=findRuleOfType(ruleResolver,ResourcesFilter.class);
  BuildRule aaptPackageResourcesRule=findRuleOfType(ruleResolver,AaptPackageResources.class);
  MoreAsserts.assertDepends("AaptPackageResources must depend on ResourcesFilter",aaptPackageResourcesRule,resourcesFilterRule);
  BuildRule packageStringAssetsRule=findRuleOfType(ruleResolver,PackageStringAssets.class);
  MoreAsserts.assertDepends("PackageStringAssets must depend on ResourcesFilter",packageStringAssetsRule,aaptPackageResourcesRule);
  assertFalse(result.preDexMerge().isPresent());
  MoreAsserts.assertDepends("ComputeExopackageDepsAbi must depend on ResourcesFilter",computeExopackageDepsAbiRule,resourcesFilterRule);
  MoreAsserts.assertDepends("ComputeExopackageDepsAbi must depend on PackageStringAssets",computeExopackageDepsAbiRule,packageStringAssetsRule);
  MoreAsserts.assertDepends("ComputeExopackageDepsAbi must depend on AaptPackageResources",computeExopackageDepsAbiRule,aaptPackageResourcesRule);
  assertTrue(result.packageStringAssets().isPresent());
  assertTrue(result.computeExopackageDepsAbi().isPresent());
  verify(keystore);
}
