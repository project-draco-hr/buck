{
  BuildTarget apkTarget=BuildTargetFactory.newInstance("//java/com/example:apk");
  BuildRuleParams originalParams=new BuildRuleParams(apkTarget,ImmutableSortedSet.<BuildRule>of(),ImmutableSortedSet.<BuildTargetPattern>of(),new FakeProjectFilesystem(),new FakeRuleKeyBuilderFactory());
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  AndroidResourceDepsFinder depsFinder=createStrictMock(AndroidResourceDepsFinder.class);
  expect(depsFinder.getAndroidResources()).andStubReturn(ImmutableList.<HasAndroidResourceDeps>of());
  expect(depsFinder.getAndroidTransitiveDependencies()).andStubReturn(AndroidTransitiveDependencies.EMPTY);
  Keystore keystore=createStrictMock(Keystore.class);
  AndroidBinaryGraphEnhancer graphEnhancer=new AndroidBinaryGraphEnhancer(originalParams,ruleResolver,ResourcesFilter.ResourceCompressionMode.ENABLED_WITH_STRINGS_AS_ASSETS,FilterResourcesStep.ResourceFilter.EMPTY_FILTER,depsFinder,new TestSourcePath("AndroidManifest.xml"),AndroidBinary.PackageType.DEBUG,ImmutableSet.<AndroidBinary.TargetCpuType>of(),false,false,BuildTargets.getBinPath(apkTarget,"%s/classes.dex"),DexSplitMode.NO_SPLIT,ImmutableSet.<BuildTarget>of(),JavacOptions.DEFAULTS,true,keystore,Optional.<Path>absent());
  replay(depsFinder,keystore);
  EnhancementResult result=graphEnhancer.createAdditionalBuildables();
  ImmutableSortedSet<BuildRule> finalDeps=result.getFinalDeps();
  assertEquals(1,finalDeps.size());
  BuildRule computeExopackageDepsAbiRule=findRuleForBuilable(ruleResolver,ComputeExopackageDepsAbi.class);
  assertEquals(computeExopackageDepsAbiRule,finalDeps.first());
  FilteredResourcesProvider resourcesProvider=result.getFilteredResourcesProvider();
  assertTrue(resourcesProvider instanceof ResourcesFilter);
  BuildRule resourcesFilterRule=findRuleForBuilable(ruleResolver,ResourcesFilter.class);
  BuildRule uberRDotJavaRule=findRuleForBuilable(ruleResolver,UberRDotJava.class);
  MoreAsserts.assertDepends("UberRDotJava must depend on ResourcesFilter",uberRDotJavaRule,resourcesFilterRule);
  BuildRule packageStringAssetsRule=findRuleForBuilable(ruleResolver,PackageStringAssets.class);
  MoreAsserts.assertDepends("PackageStringAssets must depend on ResourcesFilter",packageStringAssetsRule,uberRDotJavaRule);
  BuildRule aaptPackageResourcesRule=findRuleForBuilable(ruleResolver,AaptPackageResources.class);
  MoreAsserts.assertDepends("AaptPackageResources must depend on ResourcesFilter",aaptPackageResourcesRule,resourcesFilterRule);
  assertFalse(result.getPreDexMerge().isPresent());
  MoreAsserts.assertDepends("ComputeExopackageDepsAbi must depend on ResourcesFilter",computeExopackageDepsAbiRule,resourcesFilterRule);
  MoreAsserts.assertDepends("ComputeExopackageDepsAbi must depend on UberRDotJava",computeExopackageDepsAbiRule,uberRDotJavaRule);
  MoreAsserts.assertDepends("ComputeExopackageDepsAbi must depend on PackageStringAssets",computeExopackageDepsAbiRule,packageStringAssetsRule);
  MoreAsserts.assertDepends("ComputeExopackageDepsAbi must depend on AaptPackageResources",computeExopackageDepsAbiRule,aaptPackageResourcesRule);
  assertTrue(result.getPackageStringAssets().isPresent());
  assertTrue(result.getComputeExopackageDepsAbi().isPresent());
  verify(depsFinder,keystore);
}
