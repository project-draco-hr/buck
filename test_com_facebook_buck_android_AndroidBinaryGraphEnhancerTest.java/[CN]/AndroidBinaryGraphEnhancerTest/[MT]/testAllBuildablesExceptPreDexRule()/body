{
  BuildTarget buildConfigBuildTarget=BuildTargetFactory.newInstance("//java/com/example:cfg");
  BuildRuleParams buildConfigParams=new FakeBuildRuleParamsBuilder(buildConfigBuildTarget).build();
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  AndroidBuildConfigJavaLibrary buildConfigJavaLibrary=AndroidBuildConfigDescription.createBuildRule(buildConfigParams,"com.example.buck",BuildConfigFields.empty(),Optional.<SourcePath>absent(),false,ANDROID_JAVAC_OPTIONS,ruleResolver);
  BuildTarget apkTarget=BuildTargetFactory.newInstance("//java/com/example:apk");
  BuildRuleParams originalParams=new FakeBuildRuleParamsBuilder(apkTarget).setDeclaredDeps(ImmutableSortedSet.<BuildRule>of(buildConfigJavaLibrary)).build();
  Keystore keystore=createStrictMock(Keystore.class);
  AndroidBinaryGraphEnhancer graphEnhancer=new AndroidBinaryGraphEnhancer(originalParams,ruleResolver,ResourcesFilter.ResourceCompressionMode.ENABLED_WITH_STRINGS_AS_ASSETS,FilterResourcesStep.ResourceFilter.EMPTY_FILTER,Optional.<String>absent(),ImmutableSet.<String>of(),new FakeSourcePath("AndroidManifest.xml"),AndroidBinary.PackageType.DEBUG,ImmutableSet.<TargetCpuType>of(),false,false,BuildTargets.getScratchPath(apkTarget,"%s/classes.dex"),DexSplitMode.NO_SPLIT,ImmutableSet.<BuildTarget>of(),ImmutableSet.<BuildTarget>of(),false,ANDROID_JAVAC_OPTIONS,EnumSet.of(ExopackageMode.SECONDARY_DEX),keystore,BuildConfigFields.empty(),Optional.<SourcePath>absent(),Optional.<Integer>absent(),ImmutableMap.<TargetCpuType,NdkCxxPlatform>of(),AndroidBinary.RelinkerMode.DISABLED,MoreExecutors.newDirectExecutorService(),ManifestEntries.empty());
  replay(keystore);
  AndroidGraphEnhancementResult result=graphEnhancer.createAdditionalBuildables();
  Flavor flavor=ImmutableFlavor.of("buildconfig_com_example_buck");
  BuildTarget enhancedBuildConfigTarget=BuildTarget.builder(apkTarget).addFlavors(flavor).build();
  assertEquals("The only classpath entry to dex should be the one from the AndroidBuildConfigJavaLibrary" + " created via graph enhancement.",ImmutableSet.of(BuildTargets.getGenPath(enhancedBuildConfigTarget,"lib__%s__output").resolve(enhancedBuildConfigTarget.getShortNameAndFlavorPostfix() + ".jar")),result.getClasspathEntriesToDex());
  BuildRule enhancedBuildConfigRule=ruleResolver.getRule(enhancedBuildConfigTarget);
  assertTrue(enhancedBuildConfigRule instanceof AndroidBuildConfigJavaLibrary);
  AndroidBuildConfigJavaLibrary enhancedBuildConfigJavaLibrary=(AndroidBuildConfigJavaLibrary)enhancedBuildConfigRule;
  AndroidBuildConfig androidBuildConfig=enhancedBuildConfigJavaLibrary.getAndroidBuildConfig();
  assertEquals("com.example.buck",androidBuildConfig.getJavaPackage());
  assertTrue(androidBuildConfig.isUseConstantExpressions());
  assertEquals("IS_EXOPACKAGE defaults to false, but should now be true. DEBUG should still be true.",BuildConfigFields.fromFields(ImmutableList.of(BuildConfigFields.Field.of("boolean","DEBUG","true"),BuildConfigFields.Field.of("boolean","IS_EXOPACKAGE","true"),BuildConfigFields.Field.of("int","EXOPACKAGE_FLAGS","1"))),androidBuildConfig.getBuildConfigFields());
  ImmutableSortedSet<BuildRule> finalDeps=result.getFinalDeps();
  BuildRule computeExopackageDepsAbiRule=findRuleOfType(ruleResolver,ComputeExopackageDepsAbi.class);
  assertThat(finalDeps,Matchers.hasItem(computeExopackageDepsAbiRule));
  FilteredResourcesProvider resourcesProvider=result.getAaptPackageResources().getFilteredResourcesProvider();
  assertTrue(resourcesProvider instanceof ResourcesFilter);
  BuildRule resourcesFilterRule=findRuleOfType(ruleResolver,ResourcesFilter.class);
  BuildRule aaptPackageResourcesRule=findRuleOfType(ruleResolver,AaptPackageResources.class);
  MoreAsserts.assertDepends("AaptPackageResources must depend on ResourcesFilter",aaptPackageResourcesRule,resourcesFilterRule);
  BuildRule packageStringAssetsRule=findRuleOfType(ruleResolver,PackageStringAssets.class);
  MoreAsserts.assertDepends("PackageStringAssets must depend on ResourcesFilter",packageStringAssetsRule,aaptPackageResourcesRule);
  assertFalse(result.getPreDexMerge().isPresent());
  MoreAsserts.assertDepends("ComputeExopackageDepsAbi must depend on ResourcesFilter",computeExopackageDepsAbiRule,resourcesFilterRule);
  MoreAsserts.assertDepends("ComputeExopackageDepsAbi must depend on PackageStringAssets",computeExopackageDepsAbiRule,packageStringAssetsRule);
  MoreAsserts.assertDepends("ComputeExopackageDepsAbi must depend on AaptPackageResources",computeExopackageDepsAbiRule,aaptPackageResourcesRule);
  assertTrue(result.getPackageStringAssets().isPresent());
  assertTrue(result.getComputeExopackageDepsAbi().isPresent());
  verify(keystore);
}
