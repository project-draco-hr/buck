{
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  AndroidResource resource=(AndroidResource)AndroidResourceBuilder.createBuilder(BuildTargetFactory.newInstance("//:resource")).setRDotJavaPackage("package").setRes(Paths.get("res")).build(ruleResolver);
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  BuildRuleParams originalParams=new FakeBuildRuleParamsBuilder(target).setDeclaredDeps(ImmutableSortedSet.<BuildRule>of(resource)).build();
  AndroidBinaryGraphEnhancer graphEnhancer=new AndroidBinaryGraphEnhancer(TargetGraph.EMPTY,originalParams,ruleResolver,ResourcesFilter.ResourceCompressionMode.ENABLED_WITH_STRINGS_AS_ASSETS,FilterResourcesStep.ResourceFilter.EMPTY_FILTER,Optional.<String>absent(),ImmutableSet.<String>of(),new FakeSourcePath("AndroidManifest.xml"),AndroidBinary.PackageType.DEBUG,ImmutableSet.<TargetCpuType>of(),false,false,BuildTargets.getScratchPath(target,"%s/classes.dex"),DexSplitMode.NO_SPLIT,ImmutableSet.<BuildTarget>of(),ImmutableSet.<BuildTarget>of(),false,ANDROID_JAVAC_OPTIONS,EnumSet.of(ExopackageMode.SECONDARY_DEX),createNiceMock(Keystore.class),BuildConfigFields.empty(),Optional.<SourcePath>absent(),Optional.<Integer>absent(),ImmutableMap.<TargetCpuType,NdkCxxPlatform>of(),MoreExecutors.newDirectExecutorService());
  graphEnhancer.createAdditionalBuildables();
  BuildRule aaptPackageResourcesRule=findRuleOfType(ruleResolver,AaptPackageResources.class);
  MoreAsserts.assertDepends("AaptPackageResources must depend on resource rules",aaptPackageResourcesRule,resource);
}
