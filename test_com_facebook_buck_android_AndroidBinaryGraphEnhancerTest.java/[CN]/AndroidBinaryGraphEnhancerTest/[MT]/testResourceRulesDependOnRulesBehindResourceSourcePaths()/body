{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  FakeBuildRule resourcesDep=ruleResolver.addToIndex(new FakeBuildRule(BuildTargetFactory.newInstance("//:resource_dep"),pathResolver));
  AndroidResource resource=ruleResolver.addToIndex(new AndroidResource(new FakeBuildRuleParamsBuilder("//:resources").build().appendExtraDeps(ImmutableSortedSet.of(resourcesDep)),pathResolver,ImmutableSortedSet.<BuildRule>of(),new BuildTargetSourcePath(resourcesDep.getBuildTarget()),ImmutableSortedSet.<Path>of(),Optional.<SourcePath>absent(),null,null,ImmutableSortedSet.<Path>of(),Optional.<SourcePath>absent(),new TestSourcePath("manifest"),false));
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  BuildRuleParams originalParams=new FakeBuildRuleParamsBuilder(target).setDeclaredDeps(ImmutableSortedSet.<BuildRule>of(resource)).build();
  AndroidBinaryGraphEnhancer graphEnhancer=new AndroidBinaryGraphEnhancer(TargetGraph.EMPTY,originalParams,ruleResolver,ResourcesFilter.ResourceCompressionMode.ENABLED_WITH_STRINGS_AS_ASSETS,FilterResourcesStep.ResourceFilter.EMPTY_FILTER,ImmutableSet.<String>of(),new TestSourcePath("AndroidManifest.xml"),AndroidBinary.PackageType.DEBUG,ImmutableSet.<TargetCpuType>of(),false,false,BuildTargets.getScratchPath(target,"%s/classes.dex"),DexSplitMode.NO_SPLIT,ImmutableSet.<BuildTarget>of(),ImmutableSet.<BuildTarget>of(),false,ANDROID_JAVAC_OPTIONS,EnumSet.of(ExopackageMode.SECONDARY_DEX),createNiceMock(Keystore.class),BuildConfigFields.empty(),Optional.<SourcePath>absent(),Optional.<Integer>absent(),ImmutableMap.<TargetCpuType,NdkCxxPlatform>of(),MoreExecutors.newDirectExecutorService());
  graphEnhancer.createAdditionalBuildables();
  ResourcesFilter resourcesFilter=findRuleOfType(ruleResolver,ResourcesFilter.class);
  MoreAsserts.assertDepends("ResourcesFilter must depend on rules behind resources source paths",resourcesFilter,resourcesDep);
}
