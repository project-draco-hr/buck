{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new FakeRuleKeyBuilderFactory();
  BuildTarget javaDep1BuildTarget=new BuildTarget("//java/com/example","dep1");
  BuildRule javaDep1=JavaLibraryBuilder.createBuilder(javaDep1BuildTarget).addSrc(Paths.get("java/com/example/Dep1.java")).build(ruleResolver);
  BuildTarget javaDep2BuildTarget=new BuildTarget("//java/com/example","dep2");
  BuildRule javaDep2=JavaLibraryBuilder.createBuilder(javaDep2BuildTarget).addSrc(Paths.get("java/com/example/Dep2.java")).build(ruleResolver);
  BuildTarget javaLibBuildTarget=new BuildTarget("//java/com/example","lib");
  BuildRule javaLib=JavaLibraryBuilder.createBuilder(javaLibBuildTarget).addSrc(Paths.get("java/com/example/Lib.java")).addDep(javaDep1).addDep(javaDep2).build(ruleResolver);
  ImmutableSortedSet<BuildRule> originalDeps=ImmutableSortedSet.of(javaLib);
  ImmutableSet<BuildTarget> buildRulesToExcludeFromDex=ImmutableSet.of(javaDep2BuildTarget);
  BuildTarget apkTarget=new BuildTarget("//java/com/example","apk");
  BuildRuleParams originalParams=new BuildRuleParams(apkTarget,originalDeps,ImmutableSet.<BuildTargetPattern>of(),new FakeProjectFilesystem(),ruleKeyBuilderFactory);
  AndroidBinaryGraphEnhancer graphEnhancer=new AndroidBinaryGraphEnhancer(originalParams,ruleResolver,ResourcesFilter.ResourceCompressionMode.DISABLED,FilterResourcesStep.ResourceFilter.EMPTY_FILTER,createStrictMock(AndroidResourceDepsFinder.class),createStrictMock(PathSourcePath.class),AndroidBinary.PackageType.DEBUG,ImmutableSet.<AndroidBinary.TargetCpuType>of(),false,true,BuildTargets.getBinPath(apkTarget,"%s/classes.dex"),DexSplitMode.NO_SPLIT,buildRulesToExcludeFromDex,JavacOptions.DEFAULTS,false,createStrictMock(Keystore.class),Optional.<Path>absent());
  UberRDotJava uberRDotJava=createMock(UberRDotJava.class);
  BuildTarget uberRDotJavaTarget=new BuildTarget("//java/com/example","apk","uber_r_dot_java");
  expect(uberRDotJava.getBuildTarget()).andStubReturn(uberRDotJavaTarget);
  replay(uberRDotJava);
  BuildRule uberRDotJavaRule=new DescribedRule(BuildRuleType.UBER_R_DOT_JAVA,uberRDotJava,new BuildRuleParams(uberRDotJavaTarget,ImmutableSortedSet.<BuildRule>of(),ImmutableSet.of(BuildTargetPattern.MATCH_ALL),new FakeProjectFilesystem(),ruleKeyBuilderFactory));
  ruleResolver.addToIndex(uberRDotJavaTarget,uberRDotJavaRule);
  BuildRule preDexMergeRule=graphEnhancer.createPreDexMergeRule(uberRDotJava);
  BuildTarget dexMergeTarget=new BuildTarget("//java/com/example","apk","dex_merge");
  BuildRule dexMergeRule=ruleResolver.get(dexMergeTarget);
  assertEquals(dexMergeRule.getBuildable(),preDexMergeRule.getBuildable());
  assertEquals("There should be a #dex rule for dep1 and lib, but not dep2 because it is in the no_dx " + "list.  And we should depend on uber_r_dot_java.",3,dexMergeRule.getDeps().size());
  Iterator<BuildRule> depsForPreDexingIter=dexMergeRule.getDeps().iterator();
  BuildRule shouldBeUberRDotJavaRule=depsForPreDexingIter.next();
  assertEquals(uberRDotJavaRule,shouldBeUberRDotJavaRule);
  BuildRule preDexRule1=depsForPreDexingIter.next();
  assertEquals("//java/com/example:dep1#dex",preDexRule1.getBuildTarget().toString());
  assertNotNull(ruleResolver.get(preDexRule1.getBuildTarget()));
  BuildRule preDexRule2=depsForPreDexingIter.next();
  assertEquals("//java/com/example:lib#dex",preDexRule2.getBuildTarget().toString());
  assertNotNull(ruleResolver.get(preDexRule2.getBuildTarget()));
}
