{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildTarget javaDep1BuildTarget=BuildTargetFactory.newInstance("//java/com/example:dep1");
  BuildRule javaDep1=JavaLibraryBuilder.createBuilder(javaDep1BuildTarget).addSrc(Paths.get("java/com/example/Dep1.java")).build(ruleResolver);
  BuildTarget javaDep2BuildTarget=BuildTargetFactory.newInstance("//java/com/example:dep2");
  BuildRule javaDep2=JavaLibraryBuilder.createBuilder(javaDep2BuildTarget).addSrc(Paths.get("java/com/example/Dep2.java")).build(ruleResolver);
  BuildTarget javaLibBuildTarget=BuildTargetFactory.newInstance("//java/com/example:lib");
  BuildRule javaLib=JavaLibraryBuilder.createBuilder(javaLibBuildTarget).addSrc(Paths.get("java/com/example/Lib.java")).addDep(javaDep1.getBuildTarget()).addDep(javaDep2.getBuildTarget()).build(ruleResolver);
  ImmutableSortedSet<BuildRule> originalDeps=ImmutableSortedSet.of(javaLib);
  ImmutableSet<BuildTarget> buildRulesToExcludeFromDex=ImmutableSet.of(javaDep2BuildTarget);
  BuildTarget apkTarget=BuildTargetFactory.newInstance("//java/com/example:apk");
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  BuildRuleParams originalParams=new BuildRuleParams(apkTarget,Suppliers.ofInstance(originalDeps),Suppliers.ofInstance(originalDeps),filesystem,TestCellBuilder.createCellRoots(filesystem));
  AndroidBinaryGraphEnhancer graphEnhancer=new AndroidBinaryGraphEnhancer(TargetGraph.EMPTY,originalParams,ruleResolver,ResourcesFilter.ResourceCompressionMode.DISABLED,FilterResourcesStep.ResourceFilter.EMPTY_FILTER,Optional.<String>absent(),ImmutableSet.<String>of(),createStrictMock(PathSourcePath.class),AndroidBinary.PackageType.DEBUG,ImmutableSet.<TargetCpuType>of(),false,true,BuildTargets.getScratchPath(apkTarget,"%s/classes.dex"),DexSplitMode.NO_SPLIT,buildRulesToExcludeFromDex,ImmutableSet.<BuildTarget>of(),false,ANDROID_JAVAC_OPTIONS,EnumSet.noneOf(ExopackageMode.class),createStrictMock(Keystore.class),BuildConfigFields.empty(),Optional.<SourcePath>absent(),Optional.<Integer>absent(),ImmutableMap.<TargetCpuType,NdkCxxPlatform>of(),MoreExecutors.newDirectExecutorService());
  BuildTarget aaptPackageResourcesTarget=BuildTargetFactory.newInstance("//java/com/example:apk#aapt_package");
  BuildRuleParams aaptPackageResourcesParams=new FakeBuildRuleParamsBuilder(aaptPackageResourcesTarget).build();
  AaptPackageResources aaptPackageResources=new AaptPackageResources(aaptPackageResourcesParams,new SourcePathResolver(ruleResolver),new FakeSourcePath("java/src/com/facebook/base/AndroidManifest.xml"),createMock(FilteredResourcesProvider.class),ImmutableList.<HasAndroidResourceDeps>of(),ImmutableSet.<SourcePath>of(),Optional.<String>absent(),AndroidBinary.PackageType.DEBUG,ANDROID_JAVAC_OPTIONS,false,false,false);
  ruleResolver.addToIndex(aaptPackageResources);
  AndroidPackageableCollection collection=new AndroidPackageableCollector(apkTarget,ImmutableSet.of(javaDep2BuildTarget),ImmutableSet.<BuildTarget>of()).addClasspathEntry(((HasJavaClassHashes)javaDep1),new FakeSourcePath("ignored")).addClasspathEntry(((HasJavaClassHashes)javaDep2),new FakeSourcePath("ignored")).addClasspathEntry(((HasJavaClassHashes)javaLib),new FakeSourcePath("ignored")).build();
  BuildRule preDexMergeRule=graphEnhancer.createPreDexMergeRule(aaptPackageResources,ImmutableList.<DexProducedFromJavaLibrary>of(),collection);
  BuildTarget dexMergeTarget=BuildTargetFactory.newInstance("//java/com/example:apk#dex_merge");
  BuildRule dexMergeRule=ruleResolver.getRule(dexMergeTarget);
  assertEquals(dexMergeRule,preDexMergeRule);
  Flavor dexFlavor=ImmutableFlavor.of("dex");
  BuildTarget javaDep1DexBuildTarget=BuildTarget.builder(javaDep1BuildTarget).addFlavors(dexFlavor).build();
  BuildTarget javaDep2DexBuildTarget=BuildTarget.builder(javaDep2BuildTarget).addFlavors(dexFlavor).build();
  BuildTarget javaLibDexBuildTarget=BuildTarget.builder(javaLibBuildTarget).addFlavors(dexFlavor).build();
  assertThat("There should be a #dex rule for dep1 and lib, but not dep2 because it is in the no_dx " + "list.  And we should depend on uber_r_dot_java",Iterables.transform(dexMergeRule.getDeps(),HasBuildTarget.TO_TARGET),Matchers.allOf(Matchers.hasItem(javaDep1BuildTarget),Matchers.hasItem(javaDep1DexBuildTarget),Matchers.not(Matchers.hasItem(javaDep2DexBuildTarget)),Matchers.hasItem(javaLibDexBuildTarget),Matchers.hasItem(aaptPackageResources.getBuildTarget())));
}
