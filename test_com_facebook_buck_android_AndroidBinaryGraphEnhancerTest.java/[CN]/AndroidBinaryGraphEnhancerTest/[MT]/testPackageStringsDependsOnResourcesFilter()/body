{
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  BuildTarget target=BuildTargetFactory.newInstance("//:target");
  BuildRuleParams originalParams=new FakeBuildRuleParamsBuilder(target).build();
  AndroidBinaryGraphEnhancer graphEnhancer=new AndroidBinaryGraphEnhancer(originalParams,ruleResolver,ResourcesFilter.ResourceCompressionMode.ENABLED_WITH_STRINGS_AS_ASSETS,FilterResourcesStep.ResourceFilter.EMPTY_FILTER,EnumSet.noneOf(RType.class),Optional.<String>absent(),ImmutableSet.<String>of(),new FakeSourcePath("AndroidManifest.xml"),AndroidBinary.PackageType.DEBUG,ImmutableSet.<TargetCpuType>of(),false,false,BuildTargets.getScratchPath(originalParams.getProjectFilesystem(),target,"%s/classes.dex"),DexSplitMode.NO_SPLIT,ImmutableSet.<BuildTarget>of(),ImmutableSet.<BuildTarget>of(),false,ANDROID_JAVAC_OPTIONS,EnumSet.of(ExopackageMode.SECONDARY_DEX),createNiceMock(Keystore.class),BuildConfigFields.empty(),Optional.<SourcePath>absent(),Optional.<Integer>absent(),false,ImmutableMap.<TargetCpuType,NdkCxxPlatform>of(),AndroidBinary.RelinkerMode.DISABLED,MoreExecutors.newDirectExecutorService(),ManifestEntries.empty(),CxxPlatformUtils.DEFAULT_CONFIG,new APKModuleGraph(TargetGraph.EMPTY,originalParams.getBuildTarget(),Optional.<Set<BuildTarget>>absent()));
  graphEnhancer.createAdditionalBuildables();
  ResourcesFilter resourcesFilter=findRuleOfType(ruleResolver,ResourcesFilter.class);
  PackageStringAssets packageStringAssetsRule=findRuleOfType(ruleResolver,PackageStringAssets.class);
  MoreAsserts.assertDepends("PackageStringAssets must depend on AaptPackageResources",packageStringAssetsRule,resourcesFilter);
}
