{
  ClasspathTraverser classpathTraverser=new DefaultClasspathTraverser();
  primaryOut=newZipOutput(outPrimary);
  secondaryDexWriter.reset();
  classpathTraverser.traverse(new ClasspathTraversal(inFiles){
    @Override public void visit(    FileLike entry) throws IOException {
      if (requiredInPrimaryZip.apply(entry.getRelativePath())) {
        primaryOut.putEntry(entry);
      }
    }
  }
);
  classpathTraverser.traverse(new ClasspathTraversal(inFiles){
    @Override public void visit(    FileLike entry) throws IOException {
      if (primaryOut.containsEntry(entry)) {
        return;
      }
      if (dexSplitStrategy == DexSplitStrategy.MAXIMIZE_PRIMARY_DEX_SIZE && primaryOut.canPutEntry(entry)) {
        primaryOut.putEntry(entry);
      }
 else {
        secondaryDexWriter.getOutputToWriteTo(entry).putEntry(entry);
      }
    }
  }
);
  primaryOut.close();
  secondaryDexWriter.close();
  return secondaryDexWriter.getFiles();
}
