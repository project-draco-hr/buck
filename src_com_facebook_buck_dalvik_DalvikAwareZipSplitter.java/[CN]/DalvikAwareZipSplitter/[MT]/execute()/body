{
  ClasspathTraverser classpathTraverser=new DefaultClasspathTraverser();
  final Set<String> secondaryTail=new HashSet<String>();
  primaryOut=newZipOutput(outPrimary);
  secondaryDexWriter.reset();
  final ImmutableMap.Builder<String,FileLike> entriesBuilder=ImmutableMap.builder();
  LOG.debug("Traversing classpath for primary zip");
  classpathTraverser.traverse(new ClasspathTraversal(inFiles,filesystem){
    @Override public void visit(    FileLike entry) throws IOException {
      LOG.debug("Visiting " + entry.getRelativePath());
      String relativePath=entry.getRelativePath();
      Preconditions.checkNotNull(primaryOut);
      if (requiredInPrimaryZip.apply(relativePath)) {
        primaryOut.putEntry(entry);
      }
 else       if (wantedInPrimaryZip.contains(relativePath) || (secondaryHeadSet != null && secondaryHeadSet.contains(relativePath))) {
        entriesBuilder.put(relativePath,new BufferedFileLike(entry));
      }
 else       if (secondaryTailSet != null && secondaryTailSet.contains(relativePath)) {
        entriesBuilder.put(relativePath,new BufferedFileLike(entry));
        secondaryTail.add(relativePath);
      }
    }
  }
);
  ImmutableMap<String,FileLike> entries=entriesBuilder.build();
  for (  String wanted : wantedInPrimaryZip) {
    FileLike entry=entries.get(wanted);
    if ((entry != null) && !primaryOut.containsEntry(entry) && primaryOut.canPutEntry(entry)) {
      primaryOut.putEntry(entry);
    }
  }
  if (secondaryHeadSet != null) {
    for (    String head : secondaryHeadSet) {
      FileLike headEntry=entries.get(head);
      if ((headEntry != null) && !primaryOut.containsEntry(headEntry)) {
        secondaryDexWriter.getOutputToWriteTo(headEntry).putEntry(headEntry);
      }
    }
  }
  LOG.debug("Traversing classpath for secondary zip");
  classpathTraverser.traverse(new ClasspathTraversal(inFiles,filesystem){
    @Override public void visit(    FileLike entry) throws IOException {
      Preconditions.checkNotNull(primaryOut);
      if (primaryOut.containsEntry(entry)) {
        return;
      }
      LOG.debug("Visiting " + entry.getRelativePath());
      if (dexSplitStrategy == DexSplitStrategy.MAXIMIZE_PRIMARY_DEX_SIZE && primaryOut.canPutEntry(entry)) {
        primaryOut.putEntry(entry);
      }
 else {
        String relativePath=entry.getRelativePath();
        if (secondaryHeadSet != null && secondaryHeadSet.contains(relativePath)) {
          return;
        }
        if (secondaryTail.contains(relativePath)) {
          return;
        }
        secondaryDexWriter.getOutputToWriteTo(entry).putEntry(entry);
      }
    }
  }
);
  if (secondaryTailSet != null) {
    for (    String tail : secondaryTailSet) {
      FileLike tailEntry=entries.get(tail);
      if ((tailEntry != null) && !primaryOut.containsEntry(tailEntry) && secondaryTail.contains(tail)) {
        secondaryDexWriter.getOutputToWriteTo(tailEntry).putEntry(tailEntry);
      }
    }
  }
  primaryOut.close();
  secondaryDexWriter.close();
  return secondaryDexWriter.getFiles();
}
