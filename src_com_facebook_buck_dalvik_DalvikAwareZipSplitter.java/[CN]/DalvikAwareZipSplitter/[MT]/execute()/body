{
  ClasspathTraverser classpathTraverser=new DefaultClasspathTraverser();
  final Set<String> secondaryTail=new HashSet<String>();
  primaryOut=newZipOutput(outPrimary);
  secondaryDexWriter.reset();
  final ImmutableMap.Builder<String,FileLike> entriesBuilder=ImmutableMap.builder();
  final List<String> additionalDexStoreEntries=new ArrayList<>();
  LOG.debug("Traversing classpath for primary zip");
  classpathTraverser.traverse(new ClasspathTraversal(inFiles,filesystem){
    @Override public void visit(    FileLike entry) throws IOException {
      LOG.debug("Visiting " + entry.getRelativePath());
      String relativePath=entry.getRelativePath();
      if (!relativePath.endsWith(".class")) {
        return;
      }
      Preconditions.checkNotNull(primaryOut);
      Preconditions.checkNotNull(classPathToDexStore);
      if (requiredInPrimaryZip.apply(relativePath)) {
        primaryOut.putEntry(entry);
      }
 else       if (wantedInPrimaryZip.contains(relativePath) || (secondaryHeadSet != null && secondaryHeadSet.contains(relativePath))) {
        entriesBuilder.put(relativePath,new BufferedFileLike(entry));
      }
 else       if (secondaryTailSet != null && secondaryTailSet.contains(relativePath)) {
        entriesBuilder.put(relativePath,new BufferedFileLike(entry));
        secondaryTail.add(relativePath);
      }
 else {
        ImmutableCollection<APKModule> containingModule=classPathToDexStore.get(relativePath);
        if (!containingModule.isEmpty()) {
          if (containingModule.size() > 1) {
            throw new IllegalStateException(String.format("classpath %s is contained in multiple dex stores: %s",relativePath,classPathToDexStore.get(relativePath).asList().toString()));
          }
          APKModule dexStore=containingModule.iterator().next();
          if (!dexStore.equals(apkModuleGraph.getRootAPKModule())) {
            MySecondaryDexHelper dexHelper=additionalDexWriters.get(dexStore);
            Preconditions.checkNotNull(dexHelper);
            dexHelper.getOutputToWriteTo(entry).putEntry(entry);
            additionalDexStoreEntries.add(relativePath);
          }
        }
      }
    }
  }
);
  ImmutableMap<String,FileLike> entries=entriesBuilder.build();
  for (  String wanted : wantedInPrimaryZip) {
    FileLike entry=entries.get(wanted);
    if ((entry != null) && !primaryOut.containsEntry(entry) && primaryOut.canPutEntry(entry)) {
      primaryOut.putEntry(entry);
    }
  }
  if (secondaryHeadSet != null) {
    for (    String head : secondaryHeadSet) {
      FileLike headEntry=entries.get(head);
      if ((headEntry != null) && !primaryOut.containsEntry(headEntry)) {
        secondaryDexWriter.getOutputToWriteTo(headEntry).putEntry(headEntry);
      }
    }
  }
  LOG.debug("Traversing classpath for secondary zip");
  classpathTraverser.traverse(new ClasspathTraversal(inFiles,filesystem){
    @Override public void visit(    FileLike entry) throws IOException {
      Preconditions.checkNotNull(primaryOut);
      String relativePath=entry.getRelativePath();
      if (primaryOut.containsEntry(entry) || additionalDexStoreEntries.contains(relativePath)) {
        return;
      }
      LOG.debug("Visiting " + entry.getRelativePath());
      if (dexSplitStrategy == DexSplitStrategy.MAXIMIZE_PRIMARY_DEX_SIZE && primaryOut.canPutEntry(entry)) {
        primaryOut.putEntry(entry);
      }
 else {
        if (secondaryHeadSet != null && secondaryHeadSet.contains(relativePath)) {
          return;
        }
        if (secondaryTail.contains(relativePath)) {
          return;
        }
        secondaryDexWriter.getOutputToWriteTo(entry).putEntry(entry);
      }
    }
  }
);
  if (secondaryTailSet != null) {
    for (    String tail : secondaryTailSet) {
      FileLike tailEntry=entries.get(tail);
      if ((tailEntry != null) && !primaryOut.containsEntry(tailEntry) && secondaryTail.contains(tail)) {
        secondaryDexWriter.getOutputToWriteTo(tailEntry).putEntry(tailEntry);
      }
    }
  }
  primaryOut.close();
  secondaryDexWriter.close();
  ImmutableMultimap.Builder<APKModule,Path> outputFilesBuilder=ImmutableMultimap.builder();
  APKModule secondaryDexStore=apkModuleGraph.getRootAPKModule();
  outputFilesBuilder.putAll(secondaryDexStore,secondaryDexWriter.getFiles());
  for (  Map.Entry<APKModule,MySecondaryDexHelper> entry : additionalDexWriters.entrySet()) {
    if (!entry.getKey().equals(secondaryDexStore)) {
      entry.getValue().close();
      outputFilesBuilder.putAll(entry.getKey(),entry.getValue().getFiles());
    }
  }
  return outputFilesBuilder.build();
}
