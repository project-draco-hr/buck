{
  Optional<BuildRule> swiftCompanionBuildRule=swiftDelegate.createCompanionBuildRule(targetGraph,params,resolver,args);
  if (swiftCompanionBuildRule.isPresent()) {
    if (isSwiftTarget(params.getBuildTarget())) {
      return swiftCompanionBuildRule.get();
    }
 else {
      params=params.appendExtraDeps(ImmutableSet.of(swiftCompanionBuildRule.get()));
    }
  }
  Optional<Map.Entry<Flavor,Type>> type=LIBRARY_TYPE.getFlavorAndValue(params.getBuildTarget());
  if (type.isPresent() && type.get().getValue().equals(Type.FRAMEWORK)) {
    return createFrameworkBundleBuildRule(targetGraph,params,resolver,args);
  }
 else {
    return createLibraryBuildRule(params,resolver,args,args.linkStyle,Optional.<SourcePath>absent(),ImmutableSet.<BuildTarget>of());
  }
}
