{
  Optional<Map.Entry<Flavor,Type>> type=LIBRARY_TYPE.getFlavorAndValue(params.getBuildTarget());
  if (type.isPresent() && type.get().getValue().equals(Type.FRAMEWORK)) {
    if (!args.infoPlist.isPresent()) {
      throw new HumanReadableException("Cannot create framework for apple_library '%s':\n" + "No value specified for 'info_plist' attribute.",params.getBuildTarget().getUnflavoredBuildTarget());
    }
    if (!AppleDescriptions.INCLUDE_FRAMEWORKS.getValue(params.getBuildTarget()).isPresent()) {
      return resolver.requireRule(params.getBuildTarget().withAppendedFlavor(AppleDescriptions.INCLUDE_FRAMEWORKS_FLAVOR));
    }
    return AppleDescriptions.createAppleBundle(delegate.getCxxPlatforms(),defaultCxxPlatform,appleCxxPlatformFlavorDomain,targetGraph,params,resolver,codeSignIdentityStore,provisioningProfileStore,params.getBuildTarget(),Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.FRAMEWORK),Optional.<String>absent(),args.infoPlist.get(),args.infoPlistSubstitutions,args.deps.get(),args.getTests());
  }
  return createBuildRule(params,resolver,args,args.linkStyle,Optional.<SourcePath>absent(),ImmutableSet.<BuildTarget>of());
}
