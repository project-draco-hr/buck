{
  Optional<Map.Entry<Flavor,Type>> type;
  try {
    type=LIBRARY_TYPE.getFlavorAndValue(ImmutableSet.copyOf(params.getBuildTarget().getFlavors()));
  }
 catch (  FlavorDomainException e) {
    throw new HumanReadableException("%s: %s",params.getBuildTarget(),e.getMessage());
  }
  if (type.isPresent() && type.get().getValue().isFramework()) {
    if (!args.infoPlist.isPresent()) {
      throw new HumanReadableException("Cannot create framework for apple_library '%s':\n","No value specified for 'info_plist' attribute.",params.getBuildTarget().getUnflavoredBuildTarget());
    }
    BuildTarget binaryTarget=params.withoutFlavor(AppleDescriptions.FRAMEWORK_FLAVOR).withFlavor(CxxDescriptionEnhancer.SHARED_FLAVOR).getBuildTarget();
    return AppleDescriptions.createAppleBundle(cxxPlatformFlavorDomain,defaultCxxPlatform,platformFlavorsToAppleCxxPlatforms,targetGraph,params,resolver,codeSignIdentityStore,provisioningProfileStore,binaryTarget,Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.FRAMEWORK),Optional.<String>absent(),args.infoPlist.get(),args.infoPlistSubstitutions,args.getTests());
  }
  return createBuildRule(params,resolver,args,args.linkStyle,Optional.<SourcePath>absent(),ImmutableSet.<BuildTarget>of());
}
