{
  if (!metadataClass.isAssignableFrom(FrameworkDependencies.class)) {
    return Optional.absent();
  }
  if (!buildTarget.getFlavors().contains(AppleDescriptions.FRAMEWORK_FLAVOR)) {
    return Optional.absent();
  }
  Optional<Flavor> cxxPlatformFlavor=cxxPlatformFlavorDomain.getFlavor(buildTarget);
  Preconditions.checkState(cxxPlatformFlavor.isPresent(),"Could not find cxx platform in:\n%s",Joiner.on(", ").join(buildTarget.getFlavors()));
  ImmutableSet.Builder<SourcePath> sourcePaths=ImmutableSet.builder();
  for (  BuildTarget dep : args.deps.get()) {
    Optional<FrameworkDependencies> frameworks=resolver.requireMetadata(BuildTarget.builder(dep).addFlavors(AppleDescriptions.FRAMEWORK_FLAVOR).addFlavors(AppleDescriptions.NO_INCLUDE_FRAMEWORKS_FLAVOR).addFlavors(cxxPlatformFlavor.get()).build(),FrameworkDependencies.class);
    if (frameworks.isPresent()) {
      sourcePaths.addAll(frameworks.get().getSourcePaths());
    }
  }
  resolver.requireRule(buildTarget);
  sourcePaths.add(new BuildTargetSourcePath(buildTarget));
  return Optional.of(metadataClass.cast(FrameworkDependencies.of(sourcePaths.build())));
}
