{
  Optional<BuildRule> swiftCompanionBuildRule=swiftDelegate.createCompanionBuildRule(targetGraph,params,resolver,args);
  if (swiftCompanionBuildRule.isPresent()) {
    if (isSwiftTarget(params.getBuildTarget())) {
      return swiftCompanionBuildRule.get();
    }
 else {
      params=params.appendExtraDeps(ImmutableSet.of(swiftCompanionBuildRule.get()));
    }
  }
  Optional<StripStyle> flavoredStripStyle=StripStyle.FLAVOR_DOMAIN.getValue(params.getBuildTarget());
  params=CxxStrip.removeStripStyleFlavorInParams(params,flavoredStripStyle);
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  BuildRule unstrippedBinaryRule=requireUnstrippedBuildRule(params,resolver,args,linkableDepType,bundleLoader,blacklist,pathResolver);
  if (!shouldWrapIntoDebuggableBinary(params.getBuildTarget(),unstrippedBinaryRule)) {
    return unstrippedBinaryRule;
  }
  CxxPlatform representativePlatform=delegate.getCxxPlatforms().getValue(Iterables.getFirst(Sets.intersection(delegate.getCxxPlatforms().getFlavors(),params.getBuildTarget().getFlavors()),defaultCxxPlatform.getFlavor()));
  BuildRule strippedBinaryRule=CxxDescriptionEnhancer.createCxxStripRule(CxxStrip.restoreStripStyleFlavorInParams(params,flavoredStripStyle),resolver,representativePlatform.getStrip(),flavoredStripStyle.or(StripStyle.NON_GLOBAL_SYMBOLS),pathResolver,unstrippedBinaryRule);
  return AppleDescriptions.createAppleDebuggableBinary(CxxStrip.restoreStripStyleFlavorInParams(params,flavoredStripStyle),resolver,strippedBinaryRule,(ProvidesLinkedBinaryDeps)unstrippedBinaryRule,AppleDebugFormat.FLAVOR_DOMAIN.getValue(params.getBuildTarget()).or(defaultDebugFormat),delegate.getCxxPlatforms(),delegate.getDefaultCxxPlatform(),appleCxxPlatformFlavorDomain);
}
