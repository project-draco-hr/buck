{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  TargetSources targetSources=TargetSources.ofAppleSources(pathResolver,args.srcs.get());
  Optional<BuildRule> flavoredRule=AppleDescriptions.createFlavoredRule(params,resolver,args,appleConfig,pathResolver,targetSources);
  if (flavoredRule.isPresent()) {
    return flavoredRule.get();
  }
  CxxLibraryDescription.Arg delegateArg=delegate.createUnpopulatedConstructorArg();
  CxxLibraryDescription.TypeAndPlatform typeAndPlatform=CxxLibraryDescription.getTypeAndPlatform(params.getBuildTarget(),cxxPlatformFlavorDomain);
  Optional<AppleSdkPaths> appleSdkPaths=Optional.fromNullable(appleCxxPlatformsToAppleSdkPaths.get(typeAndPlatform.getPlatform()));
  AppleDescriptions.populateCxxConstructorArg(delegateArg,args,params.getBuildTarget(),targetSources,appleSdkPaths);
  delegateArg.exportedHeaders=Optional.absent();
  delegateArg.exportedPreprocessorFlags=Optional.of(ImmutableList.<String>of());
  delegateArg.exportedLangPreprocessorFlags=Optional.of(ImmutableMap.<CxxSource.Type,ImmutableList<String>>of());
  delegateArg.soname=Optional.absent();
  delegateArg.linkWhole=Optional.of(!isSharedLibraryTarget(params.getBuildTarget()));
  return delegate.createBuildRule(params,resolver,delegateArg,typeAndPlatform);
}
