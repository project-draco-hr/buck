{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  Optional<BuildRule> flavoredRule=AppleDescriptions.createFlavoredRule(params,resolver,args,appleConfig,pathResolver);
  if (flavoredRule.isPresent()) {
    return flavoredRule.get();
  }
  CxxLibraryDescription.Arg delegateArg=delegate.createUnpopulatedConstructorArg();
  CxxLibraryDescription.TypeAndPlatform typeAndPlatform=CxxLibraryDescription.getTypeAndPlatform(params.getBuildTarget(),cxxPlatformFlavorDomain);
  Optional<AppleSdkPaths> appleSdkPaths=Optionals.bind(typeAndPlatform.getPlatform(),new Function<Map.Entry<Flavor,CxxPlatform>,Optional<AppleSdkPaths>>(){
    @Override public Optional<AppleSdkPaths> apply(    Map.Entry<Flavor,CxxPlatform> input){
      return Optional.fromNullable(appleCxxPlatformsToAppleSdkPaths.get(input.getValue()));
    }
  }
);
  AppleDescriptions.populateCxxLibraryDescriptionArg(pathResolver,delegateArg,args,params.getBuildTarget(),appleSdkPaths,!isSharedLibraryTarget(params.getBuildTarget()));
  return delegate.createBuildRule(params,resolver,delegateArg,typeAndPlatform);
}
