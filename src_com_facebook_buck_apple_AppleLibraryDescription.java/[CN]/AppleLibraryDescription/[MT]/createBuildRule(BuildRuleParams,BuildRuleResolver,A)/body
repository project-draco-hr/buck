{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  TargetSources targetSources=TargetSources.fromSourcesWithFlags(pathResolver,args.srcs.get(),args.headers.get(),args.exportedHeaders.get());
  Optional<BuildRule> flavoredRule=AppleDescriptions.createFlavoredRule(params,resolver,args,appleConfig,pathResolver,targetSources);
  if (flavoredRule.isPresent()) {
    return flavoredRule.get();
  }
  CxxLibraryDescription.Arg delegateArg=delegate.createUnpopulatedConstructorArg();
  CxxLibraryDescription.TypeAndPlatform typeAndPlatform=CxxLibraryDescription.getTypeAndPlatform(params.getBuildTarget(),cxxPlatformFlavorDomain);
  Optional<AppleSdkPaths> appleSdkPaths=Optional.fromNullable(appleCxxPlatformsToAppleSdkPaths.get(typeAndPlatform.getPlatform()));
  Sets.SetView<SourcePath> allHeaderPaths=Sets.union(targetSources.getPublicHeaderPaths(),targetSources.getPrivateHeaderPaths());
  Path headerPathPrefix=Paths.get(AppleDescriptions.getHeaderPathPrefix(args,params.getBuildTarget()));
  ImmutableMap<String,SourcePath> headerMap=ImmutableMap.<String,SourcePath>builder().putAll(AppleDescriptions.convertToFlatCxxHeaders(Paths.get(""),pathResolver,allHeaderPaths)).putAll(AppleDescriptions.convertToFlatCxxHeaders(headerPathPrefix,pathResolver,targetSources.getPrivateHeaderPaths())).build();
  AppleDescriptions.populateCxxConstructorArg(delegateArg,args,targetSources.getSrcPaths(),headerMap,appleSdkPaths);
  delegateArg.exportedHeaders=Optional.of(Either.<ImmutableList<SourcePath>,ImmutableMap<String,SourcePath>>ofRight(AppleDescriptions.convertToFlatCxxHeaders(headerPathPrefix,pathResolver,targetSources.getPublicHeaderPaths())));
  delegateArg.exportedPreprocessorFlags=Optional.of(ImmutableList.<String>of());
  delegateArg.exportedLangPreprocessorFlags=Optional.of(ImmutableMap.<CxxSource.Type,ImmutableList<String>>of());
  delegateArg.soname=Optional.absent();
  delegateArg.linkWhole=Optional.of(!isSharedLibraryTarget(params.getBuildTarget()));
  return delegate.createBuildRule(params,resolver,delegateArg,typeAndPlatform);
}
