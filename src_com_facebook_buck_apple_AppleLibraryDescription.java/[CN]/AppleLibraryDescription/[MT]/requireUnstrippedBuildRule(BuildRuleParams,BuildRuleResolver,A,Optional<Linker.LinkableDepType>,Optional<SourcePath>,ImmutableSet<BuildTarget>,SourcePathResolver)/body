{
  Optional<MultiarchFileInfo> multiarchFileInfo=MultiarchFileInfos.create(appleCxxPlatformFlavorDomain,params.getBuildTarget());
  if (multiarchFileInfo.isPresent()) {
    ImmutableSortedSet.Builder<BuildRule> thinRules=ImmutableSortedSet.naturalOrder();
    for (    BuildTarget thinTarget : multiarchFileInfo.get().getThinTargets()) {
      thinRules.add(requireSingleArchUnstrippedBuildRule(params.copyWithBuildTarget(thinTarget),resolver,args,linkableDepType,bundleLoader,blacklist,pathResolver));
    }
    return MultiarchFileInfos.requireMultiarchRule(params.copyWithBuildTarget(params.getBuildTarget().withoutFlavors(AppleDebugFormat.FLAVOR_DOMAIN.getFlavors())),resolver,multiarchFileInfo.get(),thinRules.build());
  }
 else {
    return requireSingleArchUnstrippedBuildRule(params,resolver,args,linkableDepType,bundleLoader,blacklist,pathResolver);
  }
}
