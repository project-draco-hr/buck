{
  if (movesFromPhisAtBeginning > 1) {
    List<SsaInsn> toSchedule;
    toSchedule=insns.subList(0,movesFromPhisAtBeginning);
    scheduleUseBeforeAssigned(toSchedule);
    SsaInsn firstNonPhiMoveInsn=insns.get(movesFromPhisAtBeginning);
    if (firstNonPhiMoveInsn.isMoveException()) {
      if (true) {
        throw new RuntimeException("Unexpected: moves from " + "phis before move-exception");
      }
 else {
        boolean moveExceptionInterferes=false;
        int moveExceptionResult=firstNonPhiMoveInsn.getResult().getReg();
        for (        SsaInsn insn : toSchedule) {
          if (insn.isResultReg(moveExceptionResult) || insn.isRegASource(moveExceptionResult)) {
            moveExceptionInterferes=true;
            break;
          }
        }
        if (!moveExceptionInterferes) {
          insns.remove(movesFromPhisAtBeginning);
          insns.add(0,firstNonPhiMoveInsn);
        }
 else {
          RegisterSpec originalResultSpec=firstNonPhiMoveInsn.getResult();
          int spareRegister=parent.borrowSpareRegister(originalResultSpec.getCategory());
          firstNonPhiMoveInsn.changeResultReg(spareRegister);
          RegisterSpec tempSpec=firstNonPhiMoveInsn.getResult();
          insns.add(0,firstNonPhiMoveInsn);
          NormalSsaInsn toAdd=new NormalSsaInsn(new PlainInsn(Rops.opMove(tempSpec.getType()),SourcePosition.NO_INFO,originalResultSpec,RegisterSpecList.make(tempSpec)),this);
          insns.set(movesFromPhisAtBeginning + 1,toAdd);
        }
      }
    }
  }
  if (movesFromPhisAtEnd > 1) {
    scheduleUseBeforeAssigned(insns.subList(insns.size() - movesFromPhisAtEnd - 1,insns.size() - 1));
  }
  parent.returnSpareRegisters();
}
