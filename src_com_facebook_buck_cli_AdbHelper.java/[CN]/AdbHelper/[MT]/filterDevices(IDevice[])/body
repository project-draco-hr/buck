{
  if (allDevices.length == 0) {
    console.printBuildFailure("No devices are found.");
    return null;
  }
  List<IDevice> devices=Lists.newArrayList();
  TriState emulatorsOnly=TriState.UNSPECIFIED;
  if (deviceOptions.isEmulatorsOnlyModeEnabled() && options.isMultiInstallModeEnabled()) {
    emulatorsOnly=TriState.UNSPECIFIED;
  }
 else   if (deviceOptions.isEmulatorsOnlyModeEnabled()) {
    emulatorsOnly=TriState.TRUE;
  }
 else   if (deviceOptions.isRealDevicesOnlyModeEnabled()) {
    emulatorsOnly=TriState.FALSE;
  }
  int onlineDevices=0;
  for (  IDevice device : allDevices) {
    boolean passed=false;
    if (device.isOnline()) {
      onlineDevices++;
      boolean serialMatches=true;
      if (deviceOptions.hasSerialNumber()) {
        serialMatches=device.getSerialNumber().equals(deviceOptions.getSerialNumber());
      }
      boolean deviceTypeMatches;
      if (emulatorsOnly.isSet()) {
        deviceTypeMatches=(emulatorsOnly.asBoolean() == device.isEmulator());
      }
 else {
        deviceTypeMatches=true;
      }
      passed=serialMatches && deviceTypeMatches;
    }
    if (passed) {
      devices.add(device);
    }
  }
  if (onlineDevices == 0) {
    console.printBuildFailure("No devices are found.");
    return null;
  }
  if (devices.isEmpty()) {
    console.printBuildFailure(String.format("Found %d connected device(s), but none of them matches specified filter.",onlineDevices));
    return null;
  }
  if (!options.isMultiInstallModeEnabled() && devices.size() > 1) {
    console.printBuildFailure(String.format("%d device(s) matches specified device filter (1 expected).\n" + "Either disconnect other devices or enable multi-install mode (%s).",devices.size(),AdbOptions.MULTI_INSTALL_MODE_SHORT_ARG));
    return null;
  }
  if (devices.size() > 1) {
    console.getStdOut().printf("Found " + devices.size() + " matching devices.\n");
  }
  return devices;
}
