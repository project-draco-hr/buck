{
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  PrebuiltJarBuilder.createBuilder(BuildTargetFactory.newInstance("//third_party/generator:generator")).setBinaryJar(PATH_TO_GENERATOR_JAR).build(ruleResolver);
  BuildRule guava=PrebuiltJarBuilder.createBuilder(BuildTargetFactory.newInstance("//third_party/guava:guava")).setBinaryJar(PATH_TO_GUAVA_JAR).build(ruleResolver);
  BuildRule libraryRule=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//java/com/facebook/base:base")).addSrc(Paths.get("java/com/facebook/base/Base.java")).addDep(guava.getBuildTarget()).build(ruleResolver);
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(BuildTargetFactory.newInstance("//java/com/facebook/base:Main")).setDeclaredDeps(ImmutableSortedSet.of(libraryRule)).build();
  JavaBinary javaBinary=ruleResolver.addToIndex(new JavaBinary(params,new SourcePathResolver(ruleResolver),"com.facebook.base.Main",null,true,null,ImmutableSet.<String>of(),new DefaultDirectoryTraverser(),ImmutableSetMultimap.<JavaLibrary,Path>of()));
  final String basePath=new File(".").getAbsolutePath().replaceFirst("\\.$","");
  String expectedClasspath=basePath + javaBinary.getPathToOutput();
  List<String> expectedCommand=ImmutableList.of("java","-jar",expectedClasspath);
  assertEquals(expectedCommand,javaBinary.getExecutableCommand().getCommandPrefix(pathResolver));
  assertFalse("Library rules that are used exclusively by genrules should not be part of the classpath.",expectedClasspath.contains(PATH_TO_GENERATOR_JAR.toString()));
}
