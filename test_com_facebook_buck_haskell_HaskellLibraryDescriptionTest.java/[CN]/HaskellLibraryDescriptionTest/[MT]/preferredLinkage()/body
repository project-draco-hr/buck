{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraphFactory.newInstance(),new DefaultTargetNodeToBuildRuleTransformer());
  HaskellLibrary defaultLib=(HaskellLibrary)new HaskellLibraryBuilder(BuildTargetFactory.newInstance("//:default")).build(resolver);
  assertThat(defaultLib.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM),Matchers.is(NativeLinkable.Linkage.ANY));
  HaskellLibrary anyLib=(HaskellLibrary)new HaskellLibraryBuilder(BuildTargetFactory.newInstance("//:any")).setPreferredLinkage(NativeLinkable.Linkage.ANY).build(resolver);
  assertThat(anyLib.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM),Matchers.is(NativeLinkable.Linkage.ANY));
  HaskellLibrary staticLib=(HaskellLibrary)new HaskellLibraryBuilder(BuildTargetFactory.newInstance("//:static")).setPreferredLinkage(NativeLinkable.Linkage.STATIC).build(resolver);
  assertThat(staticLib.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM),Matchers.is(NativeLinkable.Linkage.STATIC));
  HaskellLibrary sharedLib=(HaskellLibrary)new HaskellLibraryBuilder(BuildTargetFactory.newInstance("//:shared")).setPreferredLinkage(NativeLinkable.Linkage.SHARED).build(resolver);
  assertThat(sharedLib.getPreferredLinkage(CxxPlatformUtils.DEFAULT_PLATFORM),Matchers.is(NativeLinkable.Linkage.SHARED));
}
