{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraphFactory.newInstance(),new DefaultTargetNodeToBuildRuleTransformer());
  BuildTarget baseTarget=BuildTargetFactory.newInstance("//:rule");
  BuildRule staticLib=new HaskellLibraryBuilder(baseTarget.withFlavors(CxxPlatformUtils.DEFAULT_PLATFORM.getFlavor(),HaskellLibraryDescription.Type.STATIC.getFlavor())).build(resolver);
  BuildRule staticPicLib=new HaskellLibraryBuilder(baseTarget.withFlavors(CxxPlatformUtils.DEFAULT_PLATFORM.getFlavor(),HaskellLibraryDescription.Type.STATIC_PIC.getFlavor())).build(resolver);
  BuildRule sharedLib=new HaskellLibraryBuilder(baseTarget.withFlavors(CxxPlatformUtils.DEFAULT_PLATFORM.getFlavor(),HaskellLibraryDescription.Type.SHARED.getFlavor())).build(resolver);
  ImmutableList<Path> outputs=ImmutableList.of(Preconditions.checkNotNull(staticLib.getPathToOutput()),Preconditions.checkNotNull(staticPicLib.getPathToOutput()),Preconditions.checkNotNull(sharedLib.getPathToOutput()));
  assertThat(outputs.size(),Matchers.equalTo(ImmutableSet.copyOf(outputs).size()));
  ImmutableList<BuildTarget> targets=ImmutableList.of(staticLib.getBuildTarget(),staticPicLib.getBuildTarget(),sharedLib.getBuildTarget());
  assertThat(targets.size(),Matchers.equalTo(ImmutableSet.copyOf(targets).size()));
}
