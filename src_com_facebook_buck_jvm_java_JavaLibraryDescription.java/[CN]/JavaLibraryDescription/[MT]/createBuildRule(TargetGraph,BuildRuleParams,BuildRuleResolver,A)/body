{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  BuildTarget target=params.getBuildTarget();
  ImmutableSortedSet<Flavor> flavors=target.getFlavors();
  BuildRuleParams paramsWithMavenFlavor=null;
  if (flavors.contains(JavaLibrary.MAVEN_JAR)) {
    paramsWithMavenFlavor=params;
    params=params.copyWithBuildTarget(params.getBuildTarget().withoutFlavors(ImmutableSet.of(JavaLibrary.MAVEN_JAR)));
  }
  if (flavors.contains(JavaLibrary.SRC_JAR)) {
    args.mavenCoords=args.mavenCoords.transform(new Function<String,String>(){
      @Override public String apply(      String input){
        return AetherUtil.addClassifier(input,AetherUtil.CLASSIFIER_SOURCES);
      }
    }
);
    if (!flavors.contains(JavaLibrary.MAVEN_JAR)) {
      return new JavaSourceJar(params,pathResolver,args.srcs.get(),args.mavenCoords);
    }
 else {
      return MavenUberJar.SourceJar.create(Preconditions.checkNotNull(paramsWithMavenFlavor),pathResolver,args.srcs.get(),args.mavenCoords);
    }
  }
  JavacOptions javacOptions=JavacOptionsFactory.create(defaultOptions,params,resolver,pathResolver,args);
  BuildTarget abiJarTarget=params.getBuildTarget().withAppendedFlavors(CalculateAbi.FLAVOR);
  ImmutableSortedSet<BuildRule> exportedDeps=resolver.getAllRules(args.exportedDeps.get());
  DefaultJavaLibrary defaultJavaLibrary=resolver.addToIndex(new DefaultJavaLibrary(params.appendExtraDeps(Iterables.concat(BuildRules.getExportedRules(Iterables.concat(params.getDeclaredDeps().get(),exportedDeps,resolver.getAllRules(args.providedDeps.get()))),pathResolver.filterBuildRuleInputs(javacOptions.getInputs(pathResolver)))),pathResolver,args.srcs.get(),validateResources(pathResolver,params.getProjectFilesystem(),args.resources.get()),javacOptions.getGeneratedSourceFolderName(),args.proguardConfig.transform(SourcePaths.toSourcePath(params.getProjectFilesystem())),args.postprocessClassesCommands.get(),exportedDeps,resolver.getAllRules(args.providedDeps.get()),new BuildTargetSourcePath(abiJarTarget),javacOptions.trackClassUsage(),ImmutableSet.<Path>of(),new JavacToJarStepFactory(javacOptions,JavacOptionsAmender.IDENTITY),args.resourcesRoot,args.mavenCoords,args.tests.get()));
  resolver.addToIndex(CalculateAbi.of(abiJarTarget,pathResolver,params,new BuildTargetSourcePath(defaultJavaLibrary.getBuildTarget())));
  addGwtModule(resolver,pathResolver,params,args);
  if (!flavors.contains(JavaLibrary.MAVEN_JAR)) {
    return defaultJavaLibrary;
  }
 else {
    return MavenUberJar.create(defaultJavaLibrary,Preconditions.checkNotNull(paramsWithMavenFlavor),pathResolver,args.mavenCoords);
  }
}
