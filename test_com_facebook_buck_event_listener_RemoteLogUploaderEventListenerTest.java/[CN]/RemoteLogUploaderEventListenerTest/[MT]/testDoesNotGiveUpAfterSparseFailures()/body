{
  final AtomicInteger logCount=new AtomicInteger(0);
  RemoteLogger failingEveryOtherTimeLogger=new RemoteLogger(){
    @Override public Optional<ListenableFuture<Void>> log(    String jsonBlob){
      System.out.println(jsonBlob);
      int i=logCount.incrementAndGet();
      if (i % 2 == 0) {
        return Optional.of(Futures.<Void>immediateFailedFuture(new Throwable()));
      }
 else {
        return Optional.of(Futures.<Void>immediateFuture(null));
      }
    }
    @Override public ListenableFuture<Void> close(){
      return Futures.immediateFuture(null);
    }
  }
;
  RemoteLogUploaderEventListener eventListener=new RemoteLogUploaderEventListener(objectMapper,failingEveryOtherTimeLogger,BUILD_ENVIRONMENT_DESCRIPTION);
  EventBus eventBus=new EventBus();
  eventBus.register(eventListener);
  final int maxRepetitions=2 * RemoteLogUploaderEventListener.MAX_FAILURE_COUNT;
  for (int i=0; i < maxRepetitions; ++i) {
    eventBus.post(configureTestEvent(BuildEvent.started(ImmutableSet.of(""))));
  }
  assertThat(logCount.get(),Matchers.equalTo(maxRepetitions));
}
