{
  try {
    SimpleFileVisitor<Path> deleteDirVisitor=new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        Files.delete(file);
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult postVisitDirectory(      Path dir,      IOException e) throws IOException {
        if (e == null) {
          if (!(options.contains(DeleteRecursivelyOptions.DELETE_CONTENTS_ONLY) && dir.equals(path))) {
            Files.delete(dir);
          }
          return FileVisitResult.CONTINUE;
        }
 else {
          throw e;
        }
      }
    }
;
    Files.walkFileTree(path,deleteDirVisitor);
  }
 catch (  NoSuchFileException e) {
    if (!options.contains(DeleteRecursivelyOptions.IGNORE_NO_SUCH_FILE_EXCEPTION)) {
      throw e;
    }
  }
}
