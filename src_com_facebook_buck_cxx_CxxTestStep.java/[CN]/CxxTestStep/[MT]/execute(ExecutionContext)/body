{
  ProcessBuilder builder=new ProcessBuilder();
  builder.command(command);
  builder.environment().putAll(env);
  builder.redirectOutput(filesystem.resolve(output).toFile());
  builder.redirectErrorStream(true);
  Process process;
  try {
    process=BgProcessKiller.startProcess(builder);
  }
 catch (  IOException e) {
    context.logError(e,"Error starting command %s",command);
    return StepExecutionResult.ERROR;
  }
  ProcessExecutor executor=context.getProcessExecutor();
  ImmutableSet<ProcessExecutor.Option> options=ImmutableSet.of(ProcessExecutor.Option.EXPECTING_STD_OUT);
  ProcessExecutor.Result result=executor.execute(process,options,Optional.<String>absent(),testRuleTimeoutMs,Optional.<Function<Process,Void>>absent());
  if (result.isTimedOut()) {
    throw new HumanReadableException("Timed out after %d ms running test command %s",testRuleTimeoutMs.or(-1L),command);
  }
  try (FileOutputStream fileOut=new FileOutputStream(filesystem.resolve(exitCode).toFile());ObjectOutputStream objectOut=new ObjectOutputStream(fileOut)){
    objectOut.writeInt(result.getExitCode());
  }
 catch (  IOException e) {
    context.logError(e,"Error saving exit code to %s",exitCode);
    return StepExecutionResult.ERROR;
  }
  return StepExecutionResult.SUCCESS;
}
