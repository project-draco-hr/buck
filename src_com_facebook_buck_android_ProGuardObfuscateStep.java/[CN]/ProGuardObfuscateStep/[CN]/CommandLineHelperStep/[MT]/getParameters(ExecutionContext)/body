{
  ImmutableList.Builder<String> args=ImmutableList.builder();
  AndroidPlatformTarget androidPlatformTarget=context.getAndroidPlatformTarget();
  args.add("-basedirectory").add(context.getProjectDirectoryRoot().toAbsolutePath().toString());
switch (sdkProguardConfig) {
case OPTIMIZED:
    args.add("-include").add(androidPlatformTarget.getOptimizedProguardConfig().toString());
  if (optimizationPasses.isPresent()) {
    args.add("-optimizationpasses").add(optimizationPasses.get().toString());
  }
break;
case DEFAULT:
args.add("-include").add(androidPlatformTarget.getProguardConfig().toString());
break;
case NONE:
break;
default :
throw new RuntimeException("Illegal value for sdkProguardConfig: " + sdkProguardConfig);
}
for (Path proguardConfig : customProguardConfigs) {
args.add("-include").add(proguardConfig.toString());
}
args.add("-include").add(generatedProGuardConfig.toString());
for (Map.Entry<Path,Path> inputOutputEntry : inputAndOutputEntries.entrySet()) {
args.add("-injars").add(inputOutputEntry.getKey().toString());
args.add("-outjars").add(inputOutputEntry.getValue().toString());
}
Iterable<Path> bootclasspathPaths=androidPlatformTarget.getBootclasspathEntries();
Iterable<Path> libraryJars=Iterables.concat(bootclasspathPaths,additionalLibraryJarsForProguard);
Character separator=File.pathSeparatorChar;
args.add("-libraryjars").add(Joiner.on(separator).join(libraryJars));
args.add("-printmapping").add(getMappingTxt().toString());
args.add("-printconfiguration").add(getConfigurationTxt().toString());
return args.build();
}
