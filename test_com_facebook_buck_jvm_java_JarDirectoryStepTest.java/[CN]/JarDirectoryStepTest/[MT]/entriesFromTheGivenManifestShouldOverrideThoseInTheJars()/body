{
  String expected="1.4";
  Path tmp=folder.newFolder();
  Manifest manifest=new Manifest();
  manifest.getMainAttributes().putValue(MANIFEST_VERSION.toString(),"1.0");
  manifest.getMainAttributes().putValue(IMPLEMENTATION_VERSION.toString(),expected);
  Path manifestFile=tmp.resolve("manifest");
  try (OutputStream fos=Files.newOutputStream(manifestFile)){
    manifest.write(fos);
  }
   manifest=new Manifest();
  manifest.getMainAttributes().putValue(MANIFEST_VERSION.toString(),"1.0");
  manifest.getMainAttributes().putValue(IMPLEMENTATION_VERSION.toString(),"1.0");
  Path input=tmp.resolve("input.jar");
  try (CustomZipOutputStream out=ZipOutputStreams.newOutputStream(input)){
    ZipEntry entry=new ZipEntry("META-INF/MANIFEST.MF");
    out.putNextEntry(entry);
    manifest.write(out);
  }
   Path output=tmp.resolve("output.jar");
  JarDirectoryStep step=new JarDirectoryStep(new ProjectFilesystem(tmp),Paths.get("output.jar"),ImmutableSortedSet.of(Paths.get("input.jar")),null,Paths.get("manifest"),true,ImmutableSet.<Pattern>of());
  ExecutionContext context=TestExecutionContext.newInstance();
  assertEquals(0,step.execute(context).getExitCode());
  try (Zip zip=new Zip(output,false)){
    byte[] rawManifest=zip.readFully("META-INF/MANIFEST.MF");
    manifest=new Manifest(new ByteArrayInputStream(rawManifest));
    String version=manifest.getMainAttributes().getValue(IMPLEMENTATION_VERSION);
    assertEquals(expected,version);
  }
 }
