{
  Optional<String> libDir=Optional.of("libs/$(platform)");
  Optional<String> libName=Optional.of("test-$(platform)");
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ProjectFilesystem filesystem=new AllExistingProjectFilesystem();
  Function<Optional<String>,Path> cellRoots=TestCellBuilder.createCellRoots(filesystem);
  CxxPlatform platform1=CxxPlatformUtils.DEFAULT_PLATFORM.withFlavor(ImmutableFlavor.of("PLATFORM1"));
  CxxPlatform platform2=CxxPlatformUtils.DEFAULT_PLATFORM.withFlavor(ImmutableFlavor.of("PLATFORM2"));
  assertEquals(filesystem.resolve(TARGET.getBasePath().resolve(String.format("libs/PLATFORM1/libtest-PLATFORM1.%s",platform1.getSharedLibraryExtension()))),pathResolver.getAbsolutePath(PrebuiltCxxLibraryDescription.getSharedLibraryPath(TARGET,cellRoots,filesystem,resolver,platform1,libDir,libName)));
  assertEquals(filesystem.resolve(TARGET.getBasePath().resolve("libs/PLATFORM1/libtest-PLATFORM1.a")),pathResolver.getAbsolutePath(PrebuiltCxxLibraryDescription.getStaticLibraryPath(TARGET,cellRoots,filesystem,resolver,platform1,libDir,libName)));
  assertEquals(filesystem.resolve(TARGET.getBasePath().resolve(String.format("libs/PLATFORM2/libtest-PLATFORM2.%s",platform2.getSharedLibraryExtension()))),pathResolver.getAbsolutePath(PrebuiltCxxLibraryDescription.getSharedLibraryPath(TARGET,cellRoots,filesystem,resolver,platform2,libDir,libName)));
  assertEquals(filesystem.resolve(TARGET.getBasePath().resolve("libs/PLATFORM2/libtest-PLATFORM2.a")),pathResolver.getAbsolutePath(PrebuiltCxxLibraryDescription.getStaticLibraryPath(TARGET,cellRoots,filesystem,resolver,platform2,libDir,libName)));
}
