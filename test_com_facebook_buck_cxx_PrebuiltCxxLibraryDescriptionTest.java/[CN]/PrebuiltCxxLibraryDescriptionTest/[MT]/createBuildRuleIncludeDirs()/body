{
  BuildRuleResolver resolver=new BuildRuleResolver();
  PrebuiltCxxLibraryDescription.Arg arg=getDefaultArg();
  arg.includeDirs=Optional.of(ImmutableList.of("test"));
  ProjectFilesystem filesystem=new AllExistingProjectFilesystem();
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(TARGET).setProjectFilesystem(filesystem).build();
  PrebuiltCxxLibrary lib=(PrebuiltCxxLibrary)DESC.createBuildRule(params,resolver,arg);
  CxxPreprocessorInput expectedCxxPreprocessorInput=CxxPreprocessorInput.builder().setSystemIncludeRoots(getIncludeDirs(arg)).build();
  assertEquals(expectedCxxPreprocessorInput,lib.getCxxPreprocessorInput());
  NativeLinkableInput expectedStaticLinkableInput=new NativeLinkableInput(ImmutableList.<SourcePath>of(new PathSourcePath(getStaticLibraryPath(arg))),ImmutableList.of(getStaticLibraryPath(arg).toString()));
  assertEquals(expectedStaticLinkableInput,lib.getNativeLinkableInput(CXX_PLATFORM.getLd(),NativeLinkable.Type.STATIC));
  NativeLinkableInput expectedSharedLinkableInput=new NativeLinkableInput(ImmutableList.<SourcePath>of(new PathSourcePath(getSharedLibraryPath(arg))),ImmutableList.of(getSharedLibraryPath(arg).toString()));
  assertEquals(expectedSharedLinkableInput,lib.getNativeLinkableInput(CXX_PLATFORM.getLd(),NativeLinkable.Type.SHARED));
  PythonPackageComponents expectedComponents=new PythonPackageComponents(ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(Paths.get(getSharedLibrarySoname(arg)),new PathSourcePath(getSharedLibraryPath(arg))));
  assertEquals(expectedComponents,lib.getPythonPackageComponents());
}
