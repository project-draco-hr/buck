{
  PrebuiltCxxLibraryDescription.Arg arg=getDefaultArg();
  arg.headerOnly=Optional.of(true);
  CxxLibrary lib=DESC.createBuildRule(PARAMS,RESOLVER,arg);
  CxxPreprocessorInput expectedCxxPreprocessorInput=new CxxPreprocessorInput(ImmutableSet.<BuildTarget>of(),ImmutableList.<String>of(),ImmutableList.<String>of(),ImmutableList.<Path>of(),getIncludeDirs(arg));
  assertEquals(expectedCxxPreprocessorInput,lib.getCxxPreprocessorInput());
  NativeLinkableInput expectedStaticLinkableInput=new NativeLinkableInput(ImmutableSet.<BuildTarget>of(),ImmutableList.<Path>of(),ImmutableList.<String>of());
  assertEquals(expectedStaticLinkableInput,lib.getNativeLinkableInput(NativeLinkable.Type.STATIC));
  NativeLinkableInput expectedSharedLinkableInput=new NativeLinkableInput(ImmutableSet.<BuildTarget>of(),ImmutableList.<Path>of(),ImmutableList.<String>of());
  assertEquals(expectedSharedLinkableInput,lib.getNativeLinkableInput(NativeLinkable.Type.SHARED));
  PythonPackageComponents expectedComponents=new PythonPackageComponents(ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of());
  assertEquals(expectedComponents,lib.getPythonPackageComponents());
}
