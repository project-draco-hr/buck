{
  BuildRuleResolver resolver=new BuildRuleResolver();
  ProjectFilesystem filesystem=new AllExistingProjectFilesystem();
  PrebuiltCxxLibraryBuilder libBuilder=new PrebuiltCxxLibraryBuilder(TARGET).setProvided(true);
  PrebuiltCxxLibrary lib=(PrebuiltCxxLibrary)libBuilder.build(resolver,filesystem,TargetGraphFactory.newInstance(libBuilder.build()));
  PrebuiltCxxLibraryDescription.Arg arg=libBuilder.build().getConstructorArg();
  CxxPreprocessorInput expectedCxxPreprocessorInput=CxxPreprocessorInput.builder().addAllSystemIncludeRoots(getIncludeRoots(lib)).addAllSystemIncludeRoots(getIncludeDirs(arg)).setRules(getInputRules(lib)).build();
  assertThat(lib.getCxxPreprocessorInput(CXX_PLATFORM,HeaderVisibility.PUBLIC),Matchers.equalTo(expectedCxxPreprocessorInput));
  NativeLinkableInput expectedSharedLinkableInput=NativeLinkableInput.of(ImmutableList.<SourcePath>of(new PathSourcePath(filesystem,getSharedLibraryPath(arg))),ImmutableList.of(getSharedLibraryPath(arg).toString()),ImmutableSet.<Path>of());
  assertEquals(expectedSharedLinkableInput,lib.getNativeLinkableInput(CXX_PLATFORM,Linker.LinkableDepType.SHARED));
  PythonPackageComponents expectedComponents=PythonPackageComponents.of(ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableSet.<SourcePath>of(),Optional.<Boolean>absent());
  assertEquals(expectedComponents,lib.getPythonPackageComponents(CXX_PLATFORM));
}
