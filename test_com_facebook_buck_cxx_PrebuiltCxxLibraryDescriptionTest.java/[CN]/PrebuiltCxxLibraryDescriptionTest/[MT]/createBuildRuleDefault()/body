{
  BuildRuleResolver resolver=new BuildRuleResolver();
  ProjectFilesystem filesystem=new AllExistingProjectFilesystem();
  PrebuiltCxxLibraryBuilder libBuilder=new PrebuiltCxxLibraryBuilder(TARGET);
  PrebuiltCxxLibrary lib=(PrebuiltCxxLibrary)libBuilder.build(resolver,filesystem);
  PrebuiltCxxLibraryDescription.Arg arg=libBuilder.build().getConstructorArg();
  CxxPreprocessorInput expectedCxxPreprocessorInput=CxxPreprocessorInput.builder().setSystemIncludeRoots(getIncludeDirs(arg)).build();
  assertEquals(expectedCxxPreprocessorInput,lib.getCxxPreprocessorInput(CXX_PLATFORM));
  NativeLinkableInput expectedStaticLinkableInput=new NativeLinkableInput(ImmutableList.<SourcePath>of(new PathSourcePath(getStaticLibraryPath(arg))),ImmutableList.of(getStaticLibraryPath(arg).toString()));
  assertEquals(expectedStaticLinkableInput,lib.getNativeLinkableInput(CXX_PLATFORM,Linker.LinkableDepType.STATIC));
  NativeLinkableInput expectedSharedLinkableInput=new NativeLinkableInput(ImmutableList.<SourcePath>of(new PathSourcePath(getSharedLibraryPath(arg))),ImmutableList.of(getSharedLibraryPath(arg).toString()));
  assertEquals(expectedSharedLinkableInput,lib.getNativeLinkableInput(CXX_PLATFORM,Linker.LinkableDepType.SHARED));
  PythonPackageComponents expectedComponents=new PythonPackageComponents(ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(Paths.get(getSharedLibrarySoname(arg)),new PathSourcePath(getSharedLibraryPath(arg))));
  assertEquals(expectedComponents,lib.getPythonPackageComponents(CXX_PLATFORM));
}
