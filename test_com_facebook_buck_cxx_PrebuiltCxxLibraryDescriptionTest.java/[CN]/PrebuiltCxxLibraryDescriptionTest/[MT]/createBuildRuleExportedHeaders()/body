{
  ProjectFilesystem filesystem=new AllExistingProjectFilesystem();
  PrebuiltCxxLibraryBuilder libBuilder=new PrebuiltCxxLibraryBuilder(TARGET).setExportedHeaders(SourceList.ofUnnamedSources(ImmutableSortedSet.<SourcePath>of()));
  TargetGraph targetGraph=TargetGraphFactory.newInstance(libBuilder.build());
  BuildRuleResolver resolver=new BuildRuleResolver(targetGraph,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  PrebuiltCxxLibrary lib=(PrebuiltCxxLibrary)libBuilder.build(resolver,filesystem,targetGraph);
  PrebuiltCxxLibraryDescription.Arg arg=libBuilder.build().getConstructorArg();
  CxxPreprocessorInput expectedCxxPreprocessorInput=CxxPreprocessorInput.builder().addAllSystemIncludeRoots(getIncludeDirs(arg)).setRules(getInputRules(lib)).setSystemIncludeRoots(getIncludeRoots(lib)).build();
  assertThat(lib.getCxxPreprocessorInput(CXX_PLATFORM,HeaderVisibility.PUBLIC),Matchers.equalTo(expectedCxxPreprocessorInput));
  NativeLinkableInput expectedStaticLinkableInput=NativeLinkableInput.of(ImmutableList.<Arg>of(new SourcePathArg(pathResolver,new PathSourcePath(filesystem,getStaticLibraryPath(arg)))),ImmutableSet.<FrameworkPath>of(),ImmutableSet.<FrameworkPath>of());
  assertEquals(expectedStaticLinkableInput,lib.getNativeLinkableInput(CXX_PLATFORM,Linker.LinkableDepType.STATIC));
  NativeLinkableInput expectedSharedLinkableInput=NativeLinkableInput.of(ImmutableList.<Arg>of(new SourcePathArg(pathResolver,new PathSourcePath(filesystem,getSharedLibraryPath(arg)))),ImmutableSet.<FrameworkPath>of(),ImmutableSet.<FrameworkPath>of());
  assertEquals(expectedSharedLinkableInput,lib.getNativeLinkableInput(CXX_PLATFORM,Linker.LinkableDepType.SHARED));
}
