{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildRule guava=PrebuiltJarBuilder.createBuilder(BuildTargetFactory.newInstance("//third_party/java/guava:guava")).setBinaryJar(Paths.get("third_party/java/guava.jar")).build(ruleResolver);
  BuildRule baseBuildRule=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//java/com/example/base:base")).addDep(guava.getBuildTarget()).build(ruleResolver);
  BuildRule testBuildRule=JavaTestBuilder.createBuilder(BuildTargetFactory.newInstance("//java/com/example/base:tests")).addDep(guava.getBuildTarget()).build(ruleResolver);
  ProjectConfig projectConfig=(ProjectConfig)ProjectConfigBuilder.newProjectConfigRuleBuilder(BuildTargetFactory.newInstance("//java/com/example/base:project_config")).setSrcRule(baseBuildRule.getBuildTarget()).setTestRule(testBuildRule.getBuildTarget()).setTestRoots(ImmutableList.of("tests")).build(ruleResolver);
  ProjectWithModules projectWithModules=getModulesForActionGraph(ruleResolver,ImmutableSet.of(projectConfig),null);
  List<Module> modules=projectWithModules.modules;
  assertEquals(1,modules.size());
  Module comExampleBaseModule=Iterables.getOnlyElement(modules);
  assertListEquals(ImmutableList.of(DependentModule.newSourceFolder(),DependentModule.newLibrary(guava.getBuildTarget(),"third_party_java_guava_jar"),DependentModule.newStandardJdk()),comExampleBaseModule.dependencies);
}
