{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildRule guava=PrebuiltJarBuilder.createBuilder(BuildTargetFactory.newInstance("//third_party/java/guava:guava")).setBinaryJar(Paths.get("third_party/java/guava.jar")).build(ruleResolver);
  BuildRule baseBuildRule=ruleResolver.buildAndAddToIndex(DefaultJavaLibraryRule.newJavaLibraryRuleBuilder(new FakeBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//java/com/example/base:base")).addDep(BuildTargetFactory.newInstance("//third_party/java/guava:guava")));
  BuildRule testBuildRule=ruleResolver.buildAndAddToIndex(JavaTestRule.newJavaTestRuleBuilder(new FakeBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//java/com/example/base:tests")).addDep(BuildTargetFactory.newInstance("//third_party/java/guava:guava")));
  BuildRule projectConfig=ruleResolver.addToIndex(ProjectConfigBuilder.newProjectConfigRuleBuilder().setBuildTarget(BuildTargetFactory.newInstance("//java/com/example/base:project_config")).setSrcRule(baseBuildRule).setTestRule(testBuildRule).setTestRoots(ImmutableList.of("tests")).build());
  ProjectWithModules projectWithModules=getModulesForPartialGraph(ruleResolver,ImmutableList.of(projectConfig),null);
  List<Module> modules=projectWithModules.modules;
  assertEquals(1,modules.size());
  Module comExampleBaseModule=Iterables.getOnlyElement(modules);
  assertListEquals(ImmutableList.of(DependentModule.newSourceFolder(),DependentModule.newLibrary(guava.getBuildTarget(),"third_party_java_guava_jar"),DependentModule.newStandardJdk()),comExampleBaseModule.dependencies);
}
