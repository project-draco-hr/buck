{
  JavaPackageFinder javaPackageFinder=EasyMock.createMock(JavaPackageFinder.class);
  EasyMock.expect(javaPackageFinder.findJavaPackageForPath("foo/module_foo.iml")).andReturn("");
  EasyMock.expect(javaPackageFinder.findJavaPackageForPath("bar/module_bar.iml")).andReturn("");
  EasyMock.replay(javaPackageFinder);
  ProjectWithModules projectWithModules=createPartialGraphForTesting(javaPackageFinder);
  Project project=projectWithModules.project;
  PartialGraph partialGraph=project.getPartialGraph();
  List<Module> modules=projectWithModules.modules;
  assertEquals("Should be one module for the android_library, one for the android_resource, " + "and one for each android_binary",4,modules.size());
  Module androidLibraryModule=modules.get(0);
  assertSame(getRuleById("//java/src/com/facebook/base:base",partialGraph),androidLibraryModule.srcRule);
  assertEquals("module_java_src_com_facebook_base",androidLibraryModule.name);
  assertEquals("java/src/com/facebook/base/module_java_src_com_facebook_base.iml",androidLibraryModule.pathToImlFile);
  assertListEquals(ImmutableList.of(SourceFolder.SRC,new SourceFolder("file://$MODULE_DIR$/src-gen",false),SourceFolder.GEN),androidLibraryModule.sourceFolders);
  assertEquals(Boolean.TRUE,androidLibraryModule.hasAndroidFacet);
  assertEquals(Boolean.TRUE,androidLibraryModule.isAndroidLibraryProject);
  assertEquals(null,androidLibraryModule.proguardConfigPath);
  assertEquals(null,androidLibraryModule.resFolder);
  DependentModule inheritedJdk=DependentModule.newInheritedJdk();
  DependentModule guavaAsProvidedDep=DependentModule.newLibrary(guava.getBuildTarget(),"guava_10_0_1");
  guavaAsProvidedDep.scope="PROVIDED";
  DependentModule androidResourceAsProvidedDep=DependentModule.newModule(BuildTargetFactory.newInstance("//android_res/base:res"),"module_android_res_base");
  assertListEquals(ImmutableList.of(DependentModule.newSourceFolder(),guavaAsProvidedDep,androidResourceAsProvidedDep,inheritedJdk),androidLibraryModule.dependencies);
  Module androidResourceModule=modules.get(3);
  assertSame(getRuleById("//android_res/base:res",partialGraph),androidResourceModule.srcRule);
  assertEquals("/res",androidResourceModule.resFolder);
  Module androidBinaryModuleNoDx=modules.get(1);
  assertSame(getRuleById("//foo:app",partialGraph),androidBinaryModuleNoDx.srcRule);
  assertEquals("module_foo",androidBinaryModuleNoDx.name);
  assertEquals("foo/module_foo.iml",androidBinaryModuleNoDx.pathToImlFile);
  assertListEquals(ImmutableList.of(SourceFolder.GEN),androidBinaryModuleNoDx.sourceFolders);
  assertEquals(Boolean.TRUE,androidBinaryModuleNoDx.hasAndroidFacet);
  assertEquals(Boolean.FALSE,androidBinaryModuleNoDx.isAndroidLibraryProject);
  assertEquals(null,androidBinaryModuleNoDx.proguardConfigPath);
  assertEquals(null,androidBinaryModuleNoDx.resFolder);
  assertEquals("../debug.keystore",androidBinaryModuleNoDx.keystorePath);
  DependentModule androidLibraryDep=DependentModule.newModule(androidLibraryModule.srcRule.getBuildTarget(),"module_java_src_com_facebook_base");
  assertEquals(ImmutableList.of(DependentModule.newSourceFolder(),guavaAsProvidedDep,androidLibraryDep,androidResourceAsProvidedDep,inheritedJdk),androidBinaryModuleNoDx.dependencies);
  Module androidBinaryModuleEmptyNoDx=modules.get(2);
  assertSame(getRuleById("//bar:app",partialGraph),androidBinaryModuleEmptyNoDx.srcRule);
  assertEquals("module_bar",androidBinaryModuleEmptyNoDx.name);
  assertEquals("bar/module_bar.iml",androidBinaryModuleEmptyNoDx.pathToImlFile);
  assertListEquals(ImmutableList.of(SourceFolder.GEN),androidBinaryModuleEmptyNoDx.sourceFolders);
  assertEquals(Boolean.TRUE,androidBinaryModuleEmptyNoDx.hasAndroidFacet);
  assertEquals(Boolean.FALSE,androidBinaryModuleEmptyNoDx.isAndroidLibraryProject);
  assertEquals(null,androidBinaryModuleEmptyNoDx.proguardConfigPath);
  assertEquals(null,androidBinaryModuleEmptyNoDx.resFolder);
  assertEquals("../debug.keystore",androidBinaryModuleEmptyNoDx.keystorePath);
  DependentModule guavaAsCompiledDep=DependentModule.newLibrary(guava.getBuildTarget(),"guava_10_0_1");
  assertEquals("Important that Guava is listed as a 'COMPILED' dependency here because it is " + "only listed as a 'PROVIDED' dependency earlier.",ImmutableList.of(DependentModule.newSourceFolder(),guavaAsCompiledDep,androidLibraryDep,androidResourceAsProvidedDep,inheritedJdk),androidBinaryModuleEmptyNoDx.dependencies);
  BuildRule guava=getRuleById("//third_party/guava:guava",partialGraph);
  assertSame(guava,Iterables.getOnlyElement(project.getLibraryJars()));
}
