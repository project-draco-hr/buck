{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildRule ex1=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//example/parent:ex1")).addSrc(Paths.get("DoesNotExist.java")).build(ruleResolver);
  BuildRule ex2=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//example/child:ex2")).addSrc(Paths.get("AlsoDoesNotExist.java")).addDep(ex1).build(ruleResolver);
  BuildRule tests=JavaTestBuilder.createBuilder(BuildTargetFactory.newInstance("//example/child:tests")).addSrc(Paths.get("SomeTestFile.java")).addDep(ex2).build(ruleResolver);
  BuildRule config=ProjectConfigBuilder.newProjectConfigRuleBuilder(BuildTargetFactory.newInstance("//example/child:config")).setSrcRule(ex2).setTestRule(tests).build(ruleResolver);
  ProjectWithModules projectWithModules=getModulesForPartialGraph(ruleResolver,ImmutableList.of(config),null);
  Module module=Iterables.getOnlyElement(projectWithModules.modules);
  List<Module> modules=projectWithModules.project.createModulesForProjectConfigs();
  Map<String,Module> map=projectWithModules.project.buildNameToModuleMap(modules);
  try {
    projectWithModules.project.writeProjectDotPropertiesFile(module,map);
    fail("Should have thrown a HumanReadableException");
  }
 catch (  HumanReadableException e) {
    assertEquals("You must define a project_config() in example/child/BUCK containing " + "//example/parent:ex1. The project_config() in //example/child:config transitively " + "depends on it.",e.getHumanReadableErrorMessage().replace("\\","/"));
  }
}
