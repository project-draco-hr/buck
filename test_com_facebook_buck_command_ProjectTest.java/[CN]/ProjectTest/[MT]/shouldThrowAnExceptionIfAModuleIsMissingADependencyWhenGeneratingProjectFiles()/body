{
  Map<String,BuildRule> buildRuleIndex=Maps.newHashMap();
  DefaultJavaLibraryRule ex1=DefaultJavaLibraryRule.newJavaLibraryRuleBuilder().setBuildTarget(BuildTargetFactory.newInstance("//example/parent:ex1")).addSrc("DoesNotExist.java").addVisibilityPattern(BuildTargetPattern.MATCH_ALL).build(buildRuleIndex);
  buildRuleIndex.put(ex1.getFullyQualifiedName(),ex1);
  DefaultJavaLibraryRule ex2=DefaultJavaLibraryRule.newJavaLibraryRuleBuilder().setBuildTarget(BuildTargetFactory.newInstance("//example/child:ex2")).addSrc("AlsoDoesNotExist.java").addDep(ex1.getFullyQualifiedName()).addVisibilityPattern(BuildTargetPattern.MATCH_ALL).build(buildRuleIndex);
  buildRuleIndex.put(ex2.getFullyQualifiedName(),ex2);
  DefaultJavaLibraryRule tests=JavaTestRule.newJavaTestRuleBuilder().setBuildTarget(BuildTargetFactory.newInstance("//example/child:tests")).addSrc("SomeTestFile.java").addDep(ex2.getFullyQualifiedName()).addVisibilityPattern(BuildTargetPattern.MATCH_ALL).build(buildRuleIndex);
  buildRuleIndex.put(tests.getFullyQualifiedName(),tests);
  ProjectConfigRule config=ProjectConfigRule.newProjectConfigRuleBuilder().setBuildTarget(BuildTargetFactory.newInstance("//example/child:config")).setSrcTarget(ex2.getFullyQualifiedName()).setTestTarget(tests.getFullyQualifiedName()).build(buildRuleIndex);
  buildRuleIndex.put(config.getFullyQualifiedName(),config);
  ProjectWithModules projectWithModules=getModulesForPartialGraph(buildRuleIndex,ImmutableList.of(config),null);
  Module module=Iterables.getOnlyElement(projectWithModules.modules);
  List<Module> modules=projectWithModules.project.createModulesForProjectConfigs();
  Map<String,Module> map=projectWithModules.project.buildNameToModuleMap(modules);
  try {
    projectWithModules.project.writeProjectDotPropertiesFile(module,map);
    fail("Should have thrown a HumanReadableException");
  }
 catch (  HumanReadableException e) {
    assertEquals("You must define a project_config() in example/child/BUCK containing " + "//example/parent:ex1. The project_config() in //example/child:config transitively " + "depends on it.",e.getHumanReadableErrorMessage());
  }
}
