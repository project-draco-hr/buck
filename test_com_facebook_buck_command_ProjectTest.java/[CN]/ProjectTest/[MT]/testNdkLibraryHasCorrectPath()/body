{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildTarget fooJni=BuildTargetFactory.newInstance("//third_party/java/foo/jni:foo-jni");
  BuildRule ndkLibrary=ruleResolver.buildAndAddToIndex(NdkLibrary.newNdkLibraryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(fooJni).addSrc("Android.mk").addVisibilityPattern(new SingletonBuildTargetPattern("//third_party/java/foo:foo")));
  ProjectConfigRule ndkProjectConfig=ruleResolver.buildAndAddToIndex(ProjectConfigRule.newProjectConfigRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//third_party/java/foo/jni:project_config")).setSrcTarget(Optional.of(fooJni)));
  ProjectWithModules projectWithModules=getModulesForPartialGraph(ruleResolver,ImmutableList.of(ndkProjectConfig),null);
  List<Module> modules=projectWithModules.modules;
  assertEquals("Should be one module for the ndk_library.",1,modules.size());
  Module androidLibraryModule=Iterables.getOnlyElement(modules);
  assertListEquals(ImmutableList.of(DependentModule.newSourceFolder(),DependentModule.newInheritedJdk()),androidLibraryModule.dependencies);
  assertEquals(String.format("../../../../%s",((NdkLibrary)ndkLibrary.getBuildable()).getLibraryPath()),androidLibraryModule.nativeLibs);
}
