{
  if (javaPackageFinder == null) {
    javaPackageFinder=new FakeJavaPackageFinder();
  }
  ActionGraph actionGraph=RuleMap.createGraphFromBuildRules(ruleResolver);
  ExecutionContext executionContext=EasyMock.createMock(ExecutionContext.class);
  ProjectFilesystem projectFilesystem=EasyMock.createMock(ProjectFilesystem.class);
  Properties keystoreProperties=new Properties();
  keystoreProperties.put("key.alias","androiddebugkey");
  keystoreProperties.put("key.store.password","android");
  keystoreProperties.put("key.alias.password","android");
  EasyMock.expect(projectFilesystem.readPropertiesFile(Paths.get("keystore/debug.keystore.properties"))).andReturn(keystoreProperties).anyTimes();
  ImmutableMap<Path,String> basePathToAliasMap=ImmutableMap.of();
  Project project=new Project(projectConfigs,actionGraph,basePathToAliasMap,javaPackageFinder,executionContext,projectFilesystem,Optional.<String>absent(),Optional.<String>absent(),BuckTestConstant.PYTHON_INTERPRETER,new ObjectMapper());
  EasyMock.replay(executionContext,projectFilesystem);
  List<Module> modules=project.createModulesForProjectConfigs();
  EasyMock.verify(executionContext,projectFilesystem);
  return new ProjectWithModules(project,ImmutableList.copyOf(modules));
}
