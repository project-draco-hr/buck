{
  BuildRuleResolver ruleResolver1=new BuildRuleResolver();
  BuildRule resBuildRule=ruleResolver1.buildAndAddToIndex(AndroidResourceRule.newAndroidResourceRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//resources/com/example:res")));
  BuildRule projectConfigNullSrcRoots=ruleResolver1.addToIndex(ProjectConfigBuilder.newProjectConfigRuleBuilder().setBuildTarget(BuildTargetFactory.newInstance("//resources/com/example:project_config")).setSrcRule(resBuildRule).setSrcRoots(null).build());
  ProjectWithModules projectWithModules1=getModulesForPartialGraph(ruleResolver1,ImmutableList.of(projectConfigNullSrcRoots),null);
  assertEquals(1,projectWithModules1.modules.size());
  Module moduleNoJavaSource=projectWithModules1.modules.get(0);
  assertListEquals("Only source tmp should be gen/ when setSrcRoots(null) is specified.",ImmutableList.of(SourceFolder.GEN),moduleNoJavaSource.sourceFolders);
  BuildRuleResolver ruleResolver2=new BuildRuleResolver();
  BuildRule baseBuildRule=ruleResolver2.buildAndAddToIndex(AndroidLibraryRule.newAndroidLibraryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//java/com/example/base:base")));
  BuildRule inPackageProjectConfig=ruleResolver2.addToIndex(ProjectConfigBuilder.newProjectConfigRuleBuilder().setBuildTarget(BuildTargetFactory.newInstance("//java/com/example/base:project_config")).setSrcRule(baseBuildRule).setSrcRoots(ImmutableList.<String>of()).build());
  JavaPackageFinder javaPackageFinder=EasyMock.createMock(JavaPackageFinder.class);
  EasyMock.expect(javaPackageFinder.findJavaPackageForPath("java/com/example/base/module_java_com_example_base.iml")).andReturn("com.example.base");
  EasyMock.replay(javaPackageFinder);
  ProjectWithModules projectWithModules2=getModulesForPartialGraph(ruleResolver2,ImmutableList.of(inPackageProjectConfig),javaPackageFinder);
  EasyMock.verify(javaPackageFinder);
  assertEquals(1,projectWithModules2.modules.size());
  Module moduleWithPackagePrefix=projectWithModules2.modules.get(0);
  assertListEquals("The current directory should be a source tmp with a package prefix " + "as well as the gen/ directory.",ImmutableList.of(new SourceFolder("file://$MODULE_DIR$",false,"com.example.base"),SourceFolder.GEN),moduleWithPackagePrefix.sourceFolders);
  BuildRuleResolver ruleResolver3=new BuildRuleResolver();
  BuildRule baseBuildRule3=ruleResolver3.buildAndAddToIndex(AndroidLibraryRule.newAndroidLibraryRuleBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//java/com/example/base:base")));
  BuildRule hasSrcFolderProjectConfig=ruleResolver3.addToIndex(ProjectConfigBuilder.newProjectConfigRuleBuilder().setBuildTarget(BuildTargetFactory.newInstance("//java/com/example/base:project_config")).setSrcRule(baseBuildRule3).setSrcRoots(ImmutableList.of("src")).build());
  ProjectWithModules projectWithModules3=getModulesForPartialGraph(ruleResolver3,ImmutableList.of(hasSrcFolderProjectConfig),null);
  assertEquals(1,projectWithModules3.modules.size());
  Module moduleHasSrcFolder=projectWithModules3.modules.get(0);
  assertListEquals("Both src/ and gen/ should be source folders.",ImmutableList.of(new SourceFolder("file://$MODULE_DIR$/src",false),SourceFolder.GEN),moduleHasSrcFolder.sourceFolders);
}
