{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildRule prebuiltJar=PrebuiltJarBuilder.createBuilder(BuildTargetFactory.newInstance("//empty:empty")).setBinaryJar(Paths.get("spoof")).build(ruleResolver);
  BuildRule javaLibrary=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//javasrc:java-library")).addSrc(Paths.get("javasrc/JavaLibrary.java")).addDep(prebuiltJar.getBuildTarget()).build(ruleResolver);
  JavaTestBuilder.newJavaTestBuilder(BuildTargetFactory.newInstance("//javatest:test-java-library")).addSrc(Paths.get("javatest/TestJavaLibrary.java")).addDep(javaLibrary.getBuildTarget()).build(ruleResolver);
  List<String> targets=Lists.newArrayList();
  targets.add("//empty:empty");
  targets.add("//javasrc:java-library");
  targets.add("//javatest:test-java-library");
  PartialGraph graph=createGraphFromBuildRules(ruleResolver,targets);
  ImmutableSet<BuildRuleType> buildRuleTypes=ImmutableSet.of();
  ImmutableSet<String> referencedFiles;
  ImmutableSet<BuildTarget> targetBuildRules=ImmutableSet.of();
  referencedFiles=ImmutableSet.of("excludesrc/CannotFind.java");
  SortedMap<String,BuildRule> matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getActionGraph(),new TargetsCommandPredicate(graph,buildRuleTypes,referencedFiles,targetBuildRules));
  assertTrue(matchingBuildRules.isEmpty());
  referencedFiles=ImmutableSet.of("javatest/TestJavaLibrary.java");
  matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getActionGraph(),new TargetsCommandPredicate(graph,buildRuleTypes,referencedFiles,targetBuildRules));
  assertEquals(ImmutableSet.of("//javatest:test-java-library"),matchingBuildRules.keySet());
  referencedFiles=ImmutableSet.of("javasrc/JavaLibrary.java");
  matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getActionGraph(),new TargetsCommandPredicate(graph,buildRuleTypes,referencedFiles,targetBuildRules));
  assertEquals(ImmutableSet.of("//javatest:test-java-library","//javasrc:java-library"),matchingBuildRules.keySet());
  referencedFiles=ImmutableSet.of("javasrc/" + BuckConstant.BUILD_RULES_FILE_NAME);
  matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getActionGraph(),new TargetsCommandPredicate(graph,buildRuleTypes,referencedFiles,targetBuildRules));
  assertEquals(ImmutableSet.of("//javatest:test-java-library","//javasrc:java-library"),matchingBuildRules.keySet());
  referencedFiles=ImmutableSet.of("javatest/TestJavaLibrary.java","othersrc/CannotFind.java");
  matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getActionGraph(),new TargetsCommandPredicate(graph,buildRuleTypes,referencedFiles,targetBuildRules));
  assertEquals(ImmutableSet.of("//javatest:test-java-library"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getActionGraph(),new TargetsCommandPredicate(graph,buildRuleTypes,ImmutableSet.<String>of(),targetBuildRules));
  assertEquals(ImmutableSet.of("//javatest:test-java-library","//javasrc:java-library","//empty:empty"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getActionGraph(),new TargetsCommandPredicate(graph,ImmutableSet.of(JavaTestDescription.TYPE,JavaLibraryDescription.TYPE),ImmutableSet.<String>of(),targetBuildRules));
  assertEquals(ImmutableSet.of("//javatest:test-java-library","//javasrc:java-library"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getActionGraph(),new TargetsCommandPredicate(graph,ImmutableSet.of(JavaTestDescription.TYPE,JavaLibraryDescription.TYPE),ImmutableSet.<String>of(),ImmutableSet.of(BuildTargetFactory.newInstance("//javasrc:java-library"))));
  assertEquals(ImmutableSet.of("//javasrc:java-library"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getActionGraph(),new TargetsCommandPredicate(graph,ImmutableSet.<BuildRuleType>of(),ImmutableSet.<String>of(),ImmutableSet.of(BuildTargetFactory.newInstance("//javasrc:java-library"))));
  assertEquals(ImmutableSet.of("//javasrc:java-library"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getActionGraph(),new TargetsCommandPredicate(graph,ImmutableSet.<BuildRuleType>of(),ImmutableSet.of("javatest/TestJavaLibrary.java"),ImmutableSet.of(BuildTargetFactory.newInstance("//javasrc:java-library"))));
  assertEquals(ImmutableSet.<String>of(),matchingBuildRules.keySet());
}
