{
  BuckEventBus eventBus=BuckEventBusFactory.newInstance();
  BuildTarget prebuiltJarTarget=BuildTargetFactory.newInstance("//empty:empty");
  TargetNode<?> prebuiltJarNode=PrebuiltJarBuilder.createBuilder(prebuiltJarTarget).setBinaryJar(Paths.get("spoof")).build();
  BuildTarget javaLibraryTarget=BuildTargetFactory.newInstance("//javasrc:java-library");
  TargetNode<?> javaLibraryNode=JavaLibraryBuilder.createBuilder(javaLibraryTarget).addSrc(Paths.get("javasrc/JavaLibrary.java")).addDep(prebuiltJarTarget).build();
  BuildTarget javaTestTarget=BuildTargetFactory.newInstance("//javatest:test-java-library");
  TargetNode<?> javaTestNode=JavaTestBuilder.createBuilder(javaTestTarget).addSrc(Paths.get("javatest/TestJavaLibrary.java")).addDep(javaLibraryTarget).build();
  ImmutableSet<TargetNode<?>> nodes=ImmutableSet.of(prebuiltJarNode,javaLibraryNode,javaTestNode);
  TargetGraph targetGraph=TargetGraphFactory.newInstance(nodes);
  ActionGraph actionGraph=targetGraph.getActionGraph(eventBus);
  ImmutableSet<BuildRuleType> buildRuleTypes=ImmutableSet.of();
  ImmutableSet<Path> referencedFiles;
  referencedFiles=ImmutableSet.of(Paths.get("excludesrc/CannotFind.java"));
  SortedMap<String,BuildRule> matchingBuildRules=targetsCommand.getMatchingBuildRules(actionGraph,new TargetsCommandPredicate(targetGraph,buildRuleTypes,referencedFiles,Optional.<ImmutableSet<BuildTarget>>absent(),eventBus));
  assertTrue(matchingBuildRules.isEmpty());
  referencedFiles=ImmutableSet.of(Paths.get("javatest/TestJavaLibrary.java"));
  matchingBuildRules=targetsCommand.getMatchingBuildRules(actionGraph,new TargetsCommandPredicate(targetGraph,buildRuleTypes,referencedFiles,Optional.<ImmutableSet<BuildTarget>>absent(),eventBus));
  assertEquals(ImmutableSet.of("//javatest:test-java-library"),matchingBuildRules.keySet());
  referencedFiles=ImmutableSet.of(Paths.get("javasrc/JavaLibrary.java"));
  matchingBuildRules=targetsCommand.getMatchingBuildRules(actionGraph,new TargetsCommandPredicate(targetGraph,buildRuleTypes,referencedFiles,Optional.<ImmutableSet<BuildTarget>>absent(),eventBus));
  assertEquals(ImmutableSet.of("//javatest:test-java-library","//javasrc:java-library"),matchingBuildRules.keySet());
  referencedFiles=ImmutableSet.of(Paths.get("javasrc/" + BuckConstant.BUILD_RULES_FILE_NAME));
  matchingBuildRules=targetsCommand.getMatchingBuildRules(actionGraph,new TargetsCommandPredicate(targetGraph,buildRuleTypes,referencedFiles,Optional.<ImmutableSet<BuildTarget>>absent(),eventBus));
  assertEquals(ImmutableSet.of("//javatest:test-java-library","//javasrc:java-library"),matchingBuildRules.keySet());
  referencedFiles=ImmutableSet.of(Paths.get("javatest/TestJavaLibrary.java"),Paths.get("othersrc/CannotFind.java"));
  matchingBuildRules=targetsCommand.getMatchingBuildRules(actionGraph,new TargetsCommandPredicate(targetGraph,buildRuleTypes,referencedFiles,Optional.<ImmutableSet<BuildTarget>>absent(),eventBus));
  assertEquals(ImmutableSet.of("//javatest:test-java-library"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingBuildRules(actionGraph,new TargetsCommandPredicate(targetGraph,buildRuleTypes,ImmutableSet.<Path>of(),Optional.<ImmutableSet<BuildTarget>>absent(),eventBus));
  assertEquals(ImmutableSet.of("//javatest:test-java-library","//javasrc:java-library","//empty:empty"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingBuildRules(actionGraph,new TargetsCommandPredicate(targetGraph,ImmutableSet.of(JavaTestDescription.TYPE,JavaLibraryDescription.TYPE),ImmutableSet.<Path>of(),Optional.<ImmutableSet<BuildTarget>>absent(),eventBus));
  assertEquals(ImmutableSet.of("//javatest:test-java-library","//javasrc:java-library"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingBuildRules(actionGraph,new TargetsCommandPredicate(targetGraph,ImmutableSet.of(JavaTestDescription.TYPE,JavaLibraryDescription.TYPE),ImmutableSet.<Path>of(),Optional.of(ImmutableSet.of(BuildTargetFactory.newInstance("//javasrc:java-library"))),eventBus));
  assertEquals(ImmutableSet.of("//javasrc:java-library"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingBuildRules(actionGraph,new TargetsCommandPredicate(targetGraph,ImmutableSet.<BuildRuleType>of(),ImmutableSet.<Path>of(),Optional.of(ImmutableSet.of(BuildTargetFactory.newInstance("//javasrc:java-library"))),eventBus));
  assertEquals(ImmutableSet.of("//javasrc:java-library"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingBuildRules(actionGraph,new TargetsCommandPredicate(targetGraph,ImmutableSet.<BuildRuleType>of(),ImmutableSet.of(Paths.get("javatest/TestJavaLibrary.java")),Optional.of(ImmutableSet.of(BuildTargetFactory.newInstance("//javasrc:java-library"))),eventBus));
  assertEquals(ImmutableSet.<String>of(),matchingBuildRules.keySet());
}
