{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  PrebuiltJarBuilder.createBuilder(BuildTargetFactory.newInstance("//empty:empty")).setBinaryJar(Paths.get("spoof")).build(ruleResolver);
  ruleResolver.buildAndAddToIndex(DefaultJavaLibraryRule.newJavaLibraryRuleBuilder(new FakeBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//javasrc:java-library")).addSrc(Paths.get("javasrc/JavaLibrary.java")).addVisibilityPattern(BuildTargetPattern.MATCH_ALL).addDep(BuildTargetFactory.newInstance("//empty:empty")));
  ruleResolver.buildAndAddToIndex(JavaTestRule.newJavaTestRuleBuilder(new FakeBuildRuleBuilderParams()).setBuildTarget(BuildTargetFactory.newInstance("//javatest:test-java-library")).addSrc(Paths.get("javatest/TestJavaLibrary.java")).addDep(BuildTargetFactory.newInstance("//javasrc:java-library")));
  List<String> targets=Lists.newArrayList();
  targets.add("//empty:empty");
  targets.add("//javasrc:java-library");
  targets.add("//javatest:test-java-library");
  PartialGraph graph=createGraphFromBuildRules(ruleResolver,targets);
  ImmutableSet<BuildRuleType> buildRuleTypes=ImmutableSet.of();
  ImmutableSet<String> referencedFiles;
  ImmutableSet<BuildTarget> targetBuildRules=ImmutableSet.of();
  referencedFiles=ImmutableSet.of("excludesrc/CannotFind.java");
  SortedMap<String,BuildRule> matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getDependencyGraph(),new TargetsCommandPredicate(graph,buildRuleTypes,referencedFiles,targetBuildRules));
  assertTrue(matchingBuildRules.isEmpty());
  referencedFiles=ImmutableSet.of("javatest/TestJavaLibrary.java");
  matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getDependencyGraph(),new TargetsCommandPredicate(graph,buildRuleTypes,referencedFiles,targetBuildRules));
  assertEquals(ImmutableSet.of("//javatest:test-java-library"),matchingBuildRules.keySet());
  referencedFiles=ImmutableSet.of("javasrc/JavaLibrary.java");
  matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getDependencyGraph(),new TargetsCommandPredicate(graph,buildRuleTypes,referencedFiles,targetBuildRules));
  assertEquals(ImmutableSet.of("//javatest:test-java-library","//javasrc:java-library"),matchingBuildRules.keySet());
  referencedFiles=ImmutableSet.of("javatest/TestJavaLibrary.java","othersrc/CannotFind.java");
  matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getDependencyGraph(),new TargetsCommandPredicate(graph,buildRuleTypes,referencedFiles,targetBuildRules));
  assertEquals(ImmutableSet.of("//javatest:test-java-library"),matchingBuildRules.keySet());
  referencedFiles=null;
  matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getDependencyGraph(),new TargetsCommandPredicate(graph,buildRuleTypes,ImmutableSet.<String>of(),targetBuildRules));
  assertEquals(ImmutableSet.of("//javatest:test-java-library","//javasrc:java-library","//empty:empty"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getDependencyGraph(),new TargetsCommandPredicate(graph,ImmutableSet.of(BuildRuleType.JAVA_TEST,BuildRuleType.JAVA_LIBRARY),ImmutableSet.<String>of(),targetBuildRules));
  assertEquals(ImmutableSet.of("//javatest:test-java-library","//javasrc:java-library"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getDependencyGraph(),new TargetsCommandPredicate(graph,ImmutableSet.of(BuildRuleType.JAVA_TEST,BuildRuleType.JAVA_LIBRARY),ImmutableSet.<String>of(),ImmutableSet.of(BuildTargetFactory.newInstance("//javasrc:java-library"))));
  assertEquals(ImmutableSet.of("//javasrc:java-library"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getDependencyGraph(),new TargetsCommandPredicate(graph,ImmutableSet.<BuildRuleType>of(),ImmutableSet.<String>of(),ImmutableSet.of(BuildTargetFactory.newInstance("//javasrc:java-library"))));
  assertEquals(ImmutableSet.of("//javasrc:java-library"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingBuildRules(graph.getDependencyGraph(),new TargetsCommandPredicate(graph,ImmutableSet.<BuildRuleType>of(),ImmutableSet.of("javatest/TestJavaLibrary.java"),ImmutableSet.of(BuildTargetFactory.newInstance("//javasrc:java-library"))));
  assertEquals(ImmutableSet.<String>of(),matchingBuildRules.keySet());
}
