{
  BuildTarget libraryTarget=BuildTarget.builder("//foo","lib").build();
  BuildTarget libraryTestTarget1=BuildTarget.builder("//foo","xctest1").build();
  BuildTarget libraryTestTarget2=BuildTarget.builder("//foo","xctest2").build();
  BuildTarget testLibraryTarget=BuildTarget.builder("//testlib","testlib").build();
  BuildTarget testLibraryTestTarget=BuildTarget.builder("//testlib","testlib-xctest").build();
  TargetNode<?> libraryNode=AppleLibraryBuilder.createBuilder(libraryTarget).setSrcs(Optional.of(ImmutableList.of(AppleSource.of(new TestSourcePath("foo/foo.m"))))).setTests(Optional.of(ImmutableSortedSet.of(libraryTestTarget1,libraryTestTarget2))).build();
  TargetNode<?> libraryTestNode1=AppleTestBuilder.createBuilder(libraryTestTarget1).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setSrcs(Optional.of(ImmutableList.of(AppleSource.of(new TestSourcePath("foo/testfoo1.m"))))).setDeps(Optional.of(ImmutableSortedSet.of(libraryTarget))).build();
  TargetNode<?> libraryTestNode2=AppleTestBuilder.createBuilder(libraryTestTarget2).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setSrcs(Optional.of(ImmutableList.of(AppleSource.of(new TestSourcePath("foo/testfoo2.m"))))).setDeps(Optional.of(ImmutableSortedSet.of(testLibraryTarget))).build();
  TargetNode<?> testLibraryNode=AppleLibraryBuilder.createBuilder(testLibraryTarget).setSrcs(Optional.of(ImmutableList.of(AppleSource.of(new TestSourcePath("testlib/testlib.m"))))).setTests(Optional.of(ImmutableSortedSet.of(testLibraryTestTarget))).build();
  TargetNode<?> testLibraryTestNode=AppleTestBuilder.createBuilder(testLibraryTestTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setSrcs(Optional.of(ImmutableList.of(AppleSource.of(new TestSourcePath("testlib/testlib-test.m"))))).setDeps(Optional.of(ImmutableSortedSet.of(testLibraryTarget))).build();
  ImmutableSet<TargetNode<?>> nodes=ImmutableSet.of(libraryNode,libraryTestNode1,libraryTestNode2,testLibraryNode,testLibraryTestNode);
  TargetGraph targetGraph=TargetGraphFactory.newInstance(nodes);
  SortedMap<String,TargetNode<?>> matchingBuildRules=targetsCommand.getMatchingNodes(targetGraph,Optional.of(ImmutableSet.of(Paths.get("foo/bar.m"))),Optional.<ImmutableSet<BuildTarget>>absent(),Optional.<ImmutableSet<BuildRuleType>>absent(),true,"BUCK");
  assertTrue(matchingBuildRules.isEmpty());
  matchingBuildRules=targetsCommand.getMatchingNodes(targetGraph,Optional.of(ImmutableSet.of(Paths.get("foo/testfoo1.m"))),Optional.<ImmutableSet<BuildTarget>>absent(),Optional.<ImmutableSet<BuildRuleType>>absent(),true,"BUCK");
  assertEquals(ImmutableSet.of("//foo:lib","//foo:xctest1"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingNodes(targetGraph,Optional.of(ImmutableSet.of(Paths.get("foo/testfoo2.m"))),Optional.<ImmutableSet<BuildTarget>>absent(),Optional.<ImmutableSet<BuildRuleType>>absent(),true,"BUCK");
  assertEquals(ImmutableSet.of("//foo:lib","//foo:xctest1","//foo:xctest2"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingNodes(targetGraph,Optional.of(ImmutableSet.of(Paths.get("testlib/testlib.m"))),Optional.<ImmutableSet<BuildTarget>>absent(),Optional.<ImmutableSet<BuildRuleType>>absent(),true,"BUCK");
  assertEquals(ImmutableSet.of("//foo:lib","//foo:xctest1","//foo:xctest2","//testlib:testlib","//testlib:testlib-xctest"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingNodes(targetGraph,Optional.of(ImmutableSet.of(Paths.get("testlib/testlib-test.m"))),Optional.<ImmutableSet<BuildTarget>>absent(),Optional.<ImmutableSet<BuildRuleType>>absent(),true,"BUCK");
  assertEquals(ImmutableSet.of("//foo:lib","//foo:xctest1","//foo:xctest2","//testlib:testlib","//testlib:testlib-xctest"),matchingBuildRules.keySet());
}
