{
  BuildTarget libraryTarget=BuildTargetFactory.newInstance("//foo:lib");
  BuildTarget libraryTestTarget1=BuildTargetFactory.newInstance("//foo:xctest1");
  BuildTarget libraryTestTarget2=BuildTargetFactory.newInstance("//foo:xctest2");
  BuildTarget testLibraryTarget=BuildTargetFactory.newInstance("//testlib:testlib");
  BuildTarget testLibraryTestTarget=BuildTargetFactory.newInstance("//testlib:testlib-xctest");
  TargetNode<?> libraryNode=AppleLibraryBuilder.createBuilder(libraryTarget).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("foo/foo.m"))))).setTests(Optional.of(ImmutableSortedSet.of(libraryTestTarget1,libraryTestTarget2))).build();
  TargetNode<?> libraryTestNode1=AppleTestBuilder.createBuilder(libraryTestTarget1).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("foo/testfoo1.m"))))).setDeps(Optional.of(ImmutableSortedSet.of(libraryTarget))).build();
  TargetNode<?> libraryTestNode2=AppleTestBuilder.createBuilder(libraryTestTarget2).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("foo/testfoo2.m"))))).setDeps(Optional.of(ImmutableSortedSet.of(testLibraryTarget))).build();
  TargetNode<?> testLibraryNode=AppleLibraryBuilder.createBuilder(testLibraryTarget).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("testlib/testlib.m"))))).setTests(Optional.of(ImmutableSortedSet.of(testLibraryTestTarget))).build();
  TargetNode<?> testLibraryTestNode=AppleTestBuilder.createBuilder(testLibraryTestTarget).setSrcs(Optional.of(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("testlib/testlib-test.m"))))).setDeps(Optional.of(ImmutableSortedSet.of(testLibraryTarget))).build();
  ImmutableSet<TargetNode<?>> nodes=ImmutableSet.of(libraryNode,libraryTestNode1,libraryTestNode2,testLibraryNode,testLibraryTestNode);
  TargetGraph targetGraph=TargetGraphFactory.newInstance(nodes);
  SortedMap<String,TargetNode<?>> matchingBuildRules=targetsCommand.getMatchingNodes(targetGraph,Optional.of(ImmutableSet.of(Paths.get("foo/bar.m"))),Optional.<ImmutableSet<BuildTarget>>absent(),Optional.<ImmutableSet<BuildRuleType>>absent(),true,"BUCK");
  assertTrue(matchingBuildRules.isEmpty());
  matchingBuildRules=targetsCommand.getMatchingNodes(targetGraph,Optional.of(ImmutableSet.of(Paths.get("foo/testfoo1.m"))),Optional.<ImmutableSet<BuildTarget>>absent(),Optional.<ImmutableSet<BuildRuleType>>absent(),true,"BUCK");
  assertEquals(ImmutableSet.of("//foo:lib","//foo:xctest1"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingNodes(targetGraph,Optional.of(ImmutableSet.of(Paths.get("foo/testfoo2.m"))),Optional.<ImmutableSet<BuildTarget>>absent(),Optional.<ImmutableSet<BuildRuleType>>absent(),true,"BUCK");
  assertEquals(ImmutableSet.of("//foo:lib","//foo:xctest1","//foo:xctest2"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingNodes(targetGraph,Optional.of(ImmutableSet.of(Paths.get("testlib/testlib.m"))),Optional.<ImmutableSet<BuildTarget>>absent(),Optional.<ImmutableSet<BuildRuleType>>absent(),true,"BUCK");
  assertEquals(ImmutableSet.of("//foo:lib","//foo:xctest1","//foo:xctest2","//testlib:testlib","//testlib:testlib-xctest"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingNodes(targetGraph,Optional.of(ImmutableSet.of(Paths.get("testlib/testlib-test.m"))),Optional.<ImmutableSet<BuildTarget>>absent(),Optional.<ImmutableSet<BuildRuleType>>absent(),true,"BUCK");
  assertEquals(ImmutableSet.of("//foo:lib","//foo:xctest1","//foo:xctest2","//testlib:testlib","//testlib:testlib-xctest"),matchingBuildRules.keySet());
}
