{
  BuildTarget libraryTarget=BuildTarget.builder("//foo","lib").build();
  TargetNode<?> libraryNode=AppleLibraryBuilder.createBuilder(libraryTarget).setSrcs(Optional.of(ImmutableList.of(SourceWithFlags.of(new TestSourcePath("foo/foo.m"))))).build();
  BuildTarget testTarget=BuildTarget.builder("//foo","xctest").build();
  TargetNode<?> testNode=AppleTestBuilder.createBuilder(testTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setSrcs(Optional.of(ImmutableList.of(SourceWithFlags.of(new TestSourcePath("foo/testfoo.m"))))).setDeps(Optional.of(ImmutableSortedSet.of(libraryTarget))).build();
  ImmutableSet<TargetNode<?>> nodes=ImmutableSet.of(libraryNode,testNode);
  TargetGraph targetGraph=TargetGraphFactory.newInstance(nodes);
  SortedMap<String,TargetNode<?>> matchingBuildRules=targetsCommand.getMatchingNodes(targetGraph,Optional.of(ImmutableSet.of(Paths.get("foo/bar.m"))),Optional.<ImmutableSet<BuildTarget>>absent(),Optional.<ImmutableSet<BuildRuleType>>absent(),false,"BUCK");
  assertTrue(matchingBuildRules.isEmpty());
  matchingBuildRules=targetsCommand.getMatchingNodes(targetGraph,Optional.of(ImmutableSet.of(Paths.get("foo/foo.m"))),Optional.<ImmutableSet<BuildTarget>>absent(),Optional.<ImmutableSet<BuildRuleType>>absent(),false,"BUCK");
  assertEquals(ImmutableSet.of("//foo:lib","//foo:xctest"),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingNodes(targetGraph,Optional.of(ImmutableSet.of(Paths.get("foo/testfoo.m"))),Optional.<ImmutableSet<BuildTarget>>absent(),Optional.<ImmutableSet<BuildRuleType>>absent(),false,"BUCK");
  assertEquals(ImmutableSet.of("//foo:xctest"),matchingBuildRules.keySet());
}
