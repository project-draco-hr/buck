{
  Path resDir=Paths.get("some/resources/dir");
  BuildTarget androidResourceTarget=BuildTargetFactory.newInstance("//:res");
  TargetNode<?> androidResourceNode=AndroidResourceBuilder.createBuilder(androidResourceTarget).setRes(resDir).build();
  Path genSrc=resDir.resolve("foo.txt");
  BuildTarget genTarget=BuildTargetFactory.newInstance("//:res");
  TargetNode<?> genNode=GenruleBuilder.newGenruleBuilder(genTarget).setSrcs(ImmutableList.<SourcePath>of(new PathSourcePath(genSrc))).build();
  TargetGraph targetGraph=TargetGraphFactory.newInstance(androidResourceNode,genNode);
  SortedMap<String,TargetNode<?>> matchingBuildRules;
  matchingBuildRules=targetsCommand.getMatchingNodes(targetGraph,Optional.of(ImmutableSet.of(resDir.resolve("some_resource.txt"))),Optional.<ImmutableSet<BuildTarget>>absent(),Optional.<ImmutableSet<BuildRuleType>>absent());
  assertEquals(ImmutableSet.of(androidResourceTarget.toString()),matchingBuildRules.keySet());
  matchingBuildRules=targetsCommand.getMatchingNodes(targetGraph,Optional.of(ImmutableSet.of(Paths.get(resDir.toString() + "_extra").resolve("some_resource.txt"))),Optional.<ImmutableSet<BuildTarget>>absent(),Optional.<ImmutableSet<BuildRuleType>>absent());
  assertTrue(matchingBuildRules.isEmpty());
  matchingBuildRules=targetsCommand.getMatchingNodes(targetGraph,Optional.of(ImmutableSet.of(genSrc)),Optional.<ImmutableSet<BuildTarget>>absent(),Optional.<ImmutableSet<BuildRuleType>>absent());
  assertEquals(ImmutableSet.of(androidResourceTarget.toString(),genTarget.toString()),matchingBuildRules.keySet());
}
