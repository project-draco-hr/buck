{
  this.workspace=TestDataHelper.createProjectWorkspaceForScenario(this,scenario,tmp);
  this.eventBus=BuckEventBusFactory.newInstance();
  this.console=new TestConsole();
  this.executorService=executorService;
  this.projectBuildFileParsers=new HashSet<>();
  this.workspace.setUp();
  this.cell=this.workspace.asCell();
  this.cache=new ParsePipelineCache();
  final TypeCoercerFactory coercerFactory=new DefaultTypeCoercerFactory(ObjectMappers.newDefaultInstance());
  final ConstructorArgMarshaller constructorArgMarshaller=new ConstructorArgMarshaller(coercerFactory);
  projectBuildFileParserPool=new ProjectBuildFileParserPool(4,new Function<Cell,ProjectBuildFileParser>(){
    @Override public ProjectBuildFileParser apply(    Cell input){
      ProjectBuildFileParser buildFileParser=input.createBuildFileParser(constructorArgMarshaller,console,eventBus,false);
synchronized (projectBuildFileParsers) {
        projectBuildFileParsers.add(buildFileParser);
      }
      return buildFileParser;
    }
  }
);
  final TargetNodeListener nodeListener=new TargetNodeListener(){
    @Override public void onCreate(    Path buildFile,    TargetNode<?> node) throws IOException {
    }
  }
;
  LoadingCache<Cell,BuildFileTree> buildFileTrees=CacheBuilder.newBuilder().build(new CacheLoader<Cell,BuildFileTree>(){
    @Override public BuildFileTree load(    Cell cell) throws Exception {
      return new FilesystemBackedBuildFileTree(cell.getFilesystem(),cell.getBuildFileName());
    }
  }
);
  this.parsePipeline=new ParsePipeline(this.cache,new DefaultParserTargetNodeFactory(eventBus,constructorArgMarshaller,coercerFactory,buildFileTrees,nodeListener),this.executorService,this.eventBus,this.projectBuildFileParserPool,speculativeParsing.value());
}
