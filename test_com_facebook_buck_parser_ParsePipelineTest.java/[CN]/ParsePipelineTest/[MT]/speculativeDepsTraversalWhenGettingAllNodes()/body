{
  final Fixture fixture=createMultiThreadedFixture("pipeline_test");
  final Cell cell=fixture.getCell();
  ImmutableSet<TargetNode<?>> libTargetNodes=fixture.getParsePipeline().getAllTargetNodes(cell,fixture.getCell().getFilesystem().resolve("BUCK"));
  FluentIterable<BuildTarget> allDeps=FluentIterable.from(libTargetNodes).transformAndConcat(new Function<TargetNode<?>,Iterable<BuildTarget>>(){
    @Override public Iterable<BuildTarget> apply(    TargetNode<?> input){
      return input.getDeps();
    }
  }
);
  waitForAll(allDeps,new Predicate<BuildTarget>(){
    @Override public boolean apply(    BuildTarget dep){
      return fixture.getCache().lookupTargetNode(cell,dep) != null;
    }
  }
);
  fixture.close();
}
