{
  SwiftCompile rule=requireSwiftCompileRule(cxxPlatform.getFlavor());
  LOG.debug("Required rule: %s",rule);
  NativeLinkableInput.Builder inputBuilder=NativeLinkableInput.builder();
  AppleCxxPlatform appleCxxPlatform=appleCxxPlatformFlavorDomain.getValue(cxxPlatform.getFlavor());
  Set<Path> swiftRuntimePaths=ImmutableSet.of();
  boolean sharedRequested=false;
switch (type) {
case STATIC:
case STATIC_PIC:
    swiftRuntimePaths=appleCxxPlatform.getSwiftStaticRuntimePaths();
  break;
case SHARED:
sharedRequested=true;
break;
}
if (sharedRequested || swiftRuntimePaths.isEmpty()) {
inputBuilder.addAllArgs(StringArg.from("-Xlinker","-rpath","-Xlinker","@executable_path/Frameworks"));
swiftRuntimePaths=appleCxxPlatform.getSwiftRuntimePaths();
}
 else {
inputBuilder.addAllArgs(StringArg.from("-Xlinker","-force_load_swift_libs","-lswiftRuntime"));
}
for (Path swiftRuntimePath : swiftRuntimePaths) {
inputBuilder.addAllArgs(StringArg.from("-L",swiftRuntimePath.toString()));
}
inputBuilder.addAllArgs(StringArg.from("-Xlinker","-add_ast_path")).addArgs(new SourcePathArg(getResolver(),new BuildTargetSourcePath(rule.getBuildTarget(),rule.getModulePath())),new SourcePathArg(getResolver(),new BuildTargetSourcePath(rule.getBuildTarget(),rule.getObjectPath())));
inputBuilder.addAllFrameworks(frameworks);
inputBuilder.addAllLibraries(libraries);
return inputBuilder.build();
}
