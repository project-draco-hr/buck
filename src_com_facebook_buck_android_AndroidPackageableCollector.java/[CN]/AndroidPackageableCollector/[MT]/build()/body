{
  collectionBuilder.buildConfigs(ImmutableMap.copyOf(buildConfigs));
  final ImmutableSet<HasJavaClassHashes> javaClassProviders=javaClassHashesProviders.build();
  collectionBuilder.addAllJavaLibrariesToDex(FluentIterable.from(javaClassProviders).transform(BuildTarget.TO_TARGET).toSet());
  collectionBuilder.classNamesToHashesSupplier(Suppliers.memoize(new Supplier<Map<String,HashCode>>(){
    @Override public Map<String,HashCode> get(){
      ImmutableMap.Builder<String,HashCode> builder=ImmutableMap.builder();
      for (      HasJavaClassHashes hasJavaClassHashes : javaClassProviders) {
        builder.putAll(hasJavaClassHashes.getClassNamesToHashes());
      }
      return builder.build();
    }
  }
));
  ImmutableSet<BuildTarget> resources=ImmutableSet.copyOf(resourcesWithNonEmptyResDir.build());
  for (  BuildTarget buildTarget : resourcesWithAssets.build()) {
    if (!resources.contains(buildTarget)) {
      resourceDetailsBuilder.addResourcesWithEmptyResButNonEmptyAssetsDir(buildTarget);
    }
  }
  resourceDetailsBuilder.resourceDirectories(resourceDirectories.build().reverse());
  resourceDetailsBuilder.resourcesWithNonEmptyResDir(resourcesWithNonEmptyResDir.build().reverse());
  collectionBuilder.resourceDetails(resourceDetailsBuilder.build());
  return collectionBuilder.build();
}
