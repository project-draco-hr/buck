{
  Preconditions.checkArgument(platform.equals(Platform.MACOS) || platform.equals(Platform.LINUX),"NDKCxxPlatform can only currently run on MacOS or Linux.");
  Host host=Preconditions.checkNotNull(BUILD_PLATFORMS.get(platform));
  this.name=Preconditions.checkNotNull(name);
  this.flavor=Preconditions.checkNotNull(flavor);
  this.as=getTool(ndkRoot,targetConfiguration,host,"as");
  this.asflags=ImmutableList.of("--noexecstack");
  this.aspp=getTool(ndkRoot,targetConfiguration,host,"gcc");
  this.asppflags=ImmutableList.of();
  this.cc=getTool(ndkRoot,targetConfiguration,host,"gcc");
  this.cflags=getCflagsInternal(targetConfiguration);
  this.cpp=getTool(ndkRoot,targetConfiguration,host,"gcc");
  this.cppflags=getCppflags(ndkRoot,targetConfiguration,host);
  this.cxx=getTool(ndkRoot,targetConfiguration,host,"g++");
  this.cxxflags=getCxxflagsInternal(targetConfiguration);
  this.cxxpp=getTool(ndkRoot,targetConfiguration,host,"g++");
  this.cxxppflags=getCxxppflags(ndkRoot,targetConfiguration,host);
  this.cxxld=getTool(ndkRoot,targetConfiguration,host,"g++");
  this.cxxldflags=getCxxldflags(ndkRoot,targetConfiguration);
  this.ld=new GnuLinker(getTool(ndkRoot,targetConfiguration,host,"ld.gold"));
  this.ldflags=ImmutableList.of("-z","noexecstack");
  this.ar=getTool(ndkRoot,targetConfiguration,host,"ar");
  this.arflags=ImmutableList.of();
  this.debugPathSanitizer=Optional.of(new DebugPathSanitizer(250,File.separatorChar,Paths.get("."),ImmutableBiMap.of(ndkRoot,Paths.get("./."))));
}
