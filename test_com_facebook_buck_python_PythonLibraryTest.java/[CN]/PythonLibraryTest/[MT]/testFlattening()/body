{
  BuildRuleResolver ruleResolver=new BuildRuleResolver();
  BuildTarget pyLibraryTarget=BuildTargetFactory.newInstance("//:py_library");
  ruleResolver.buildAndAddToIndex(PythonLibrary.newPythonLibraryBuilder(new FakeAbstractBuildRuleBuilderParams()).addSrc("baz.py").addSrc("foo/__init__.py").addSrc("foo/bar.py").setBuildTarget(pyLibraryTarget));
  FakeBuildableContext buildableContext=new FakeBuildableContext();
  BuildContext buildContext=createMock(BuildContext.class);
  PythonLibrary rule=(PythonLibrary)ruleResolver.get(pyLibraryTarget).getBuildable();
  List<Step> steps=rule.getBuildSteps(buildContext,buildableContext);
  final String projectRoot=projectRootDir.getRoot().getAbsolutePath();
  final String pylibpath="__pylib_py_library";
  ProjectFilesystem projectFilesystem=new ProjectFilesystem(new File(projectRoot));
  ExecutionContext executionContext=TestExecutionContext.newBuilder().setProjectFilesystem(projectFilesystem).build();
  MoreAsserts.assertSteps("python_library() should ensure each file is linked and has its destination directory made",ImmutableList.of(String.format("mkdir -p %s/%s/%s",projectRoot,BuckConstant.GEN_DIR,pylibpath),String.format("mkdir -p %s/%s/%s/foo",projectRoot,BuckConstant.GEN_DIR,pylibpath),String.format("ln -f -s ../../../baz.py %s/%s/%s/baz.py",projectRoot,BuckConstant.GEN_DIR,pylibpath),String.format("ln -f -s ../../../../foo/__init__.py %s/%s/%s/foo/__init__.py",projectRoot,BuckConstant.GEN_DIR,pylibpath),String.format("ln -f -s ../../../../foo/bar.py %s/%s/%s/foo/bar.py",projectRoot,BuckConstant.GEN_DIR,pylibpath)),steps.subList(1,6),executionContext);
  ImmutableSet<Path> artifacts=buildableContext.getRecordedArtifacts();
  assertEquals(ImmutableSet.of(Paths.get("buck-out/gen/__pylib_py_library/baz.py"),Paths.get("buck-out/gen/__pylib_py_library/foo/__init__.py"),Paths.get("buck-out/gen/__pylib_py_library/foo/bar.py")),artifacts);
}
