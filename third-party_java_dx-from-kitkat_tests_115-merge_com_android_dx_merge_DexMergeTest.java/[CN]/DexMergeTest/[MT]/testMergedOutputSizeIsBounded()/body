{
  int steps=100;
  int compactWasteThreshold=1024;
  Dex dexA=resourceToDexBuffer("/testdata/Basic.dex");
  Dex dexB=resourceToDexBuffer("/testdata/TryCatchFinally.dex");
  Dex merged=new DexMerger(dexA,dexB,CollisionPolicy.KEEP_FIRST).merge();
  int maxLength=0;
  for (int i=0; i < steps; i++) {
    DexMerger dexMerger=new DexMerger(dexA,merged,CollisionPolicy.KEEP_FIRST);
    dexMerger.setCompactWasteThreshold(compactWasteThreshold);
    merged=dexMerger.merge();
    maxLength=Math.max(maxLength,merged.getLength());
  }
  int maxExpectedLength=dexA.getLength() + dexB.getLength() + compactWasteThreshold;
  assertTrue(maxLength + " < " + maxExpectedLength,maxLength < maxExpectedLength);
}
