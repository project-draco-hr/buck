{
  JavaLibrary javaLibrary=createMock(JavaLibrary.class);
  expect(javaLibrary.getClassNamesToHashes()).andReturn(ImmutableSortedMap.<String,HashCode>of());
  BuildContext context=createMock(BuildContext.class);
  FakeBuildableContext buildableContext=new FakeBuildableContext();
  ProjectFilesystem projectFilesystem=createMock(ProjectFilesystem.class);
  replayAll();
  BuildTarget buildTarget=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(buildTarget).setProjectFilesystem(projectFilesystem).build();
  DexProducedFromJavaLibrary preDex=new DexProducedFromJavaLibrary(params,new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer())),javaLibrary);
  List<Step> steps=preDex.getBuildSteps(context,buildableContext);
  verifyAll();
  resetAll();
  Path dexOutput=BuildTargets.getGenPath(buildTarget,"%s.dex.jar");
  expect(projectFilesystem.resolve(dexOutput.getParent())).andReturn(Paths.get("/home/user/").resolve(dexOutput.getParent()));
  expect(projectFilesystem.resolve(dexOutput)).andReturn(Paths.get("/home/user/").resolve(dexOutput));
  replayAll();
  ExecutionContext executionContext=TestExecutionContext.newBuilder().build();
  MoreAsserts.assertSteps("Do not generate a .dex.jar file.",ImmutableList.of(String.format("rm -f %s",Paths.get("/home/user/").resolve(dexOutput)),String.format("mkdir -p %s",Paths.get("/home/user/").resolve(dexOutput.getParent())),"record_empty_dx"),steps,executionContext);
  verifyAll();
  resetAll();
  replayAll();
  Step recordArtifactAndMetadataStep=steps.get(2);
  assertThat(recordArtifactAndMetadataStep.getShortName(),startsWith("record_"));
  int exitCode=recordArtifactAndMetadataStep.execute(executionContext);
  assertEquals(0,exitCode);
  verifyAll();
}
