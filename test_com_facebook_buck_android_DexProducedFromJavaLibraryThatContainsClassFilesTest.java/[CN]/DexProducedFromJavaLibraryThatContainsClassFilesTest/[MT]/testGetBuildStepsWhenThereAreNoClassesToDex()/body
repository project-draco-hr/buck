{
  AccumulateClassNames accumulateClassNames=createMock(AccumulateClassNames.class);
  expect(accumulateClassNames.getClassNames()).andReturn(ImmutableSortedMap.<String,HashCode>of());
  BuildContext context=createMock(BuildContext.class);
  FakeBuildableContext buildableContext=new FakeBuildableContext();
  replayAll();
  BuildTarget buildTarget=new BuildTarget("//foo","bar");
  DexProducedFromJavaLibraryThatContainsClassFiles preDex=new DexProducedFromJavaLibraryThatContainsClassFiles(buildTarget,accumulateClassNames);
  List<Step> steps=preDex.getBuildSteps(context,buildableContext);
  verifyAll();
  resetAll();
  ProjectFilesystem projectFilesystem=createMock(ProjectFilesystem.class);
  expect(projectFilesystem.resolve(Paths.get("buck-out/gen/foo"))).andReturn(Paths.get("/home/user/buck-out/gen/foo"));
  expect(projectFilesystem.resolve(Paths.get("buck-out/gen/foo/bar.dex.jar"))).andReturn(Paths.get("/home/user/buck-out/gen/foo/bar.dex.jar"));
  replayAll();
  ExecutionContext executionContext=TestExecutionContext.newBuilder().setProjectFilesystem(projectFilesystem).build();
  MoreAsserts.assertSteps("Do not generate a .dex.jar file.",ImmutableList.of("rm -f /home/user/buck-out/gen/foo/bar.dex.jar","mkdir -p /home/user/buck-out/gen/foo","record_empty_dx"),steps,executionContext);
  verifyAll();
  resetAll();
  Sha1HashCode abiKey=new Sha1HashCode(AbiWriterProtocol.EMPTY_ABI_KEY);
  expect(accumulateClassNames.getAbiKey()).andReturn(abiKey);
  replayAll();
  Step recordArtifactAndMetadataStep=steps.get(2);
  int exitCode=recordArtifactAndMetadataStep.execute(executionContext);
  assertEquals(0,exitCode);
  buildableContext.assertContainsMetadataMapping(AbiRule.ABI_KEY_FOR_DEPS_ON_DISK_METADATA,abiKey.getHash());
  buildableContext.assertContainsMetadataMapping(AbiRule.ABI_KEY_ON_DISK_METADATA,abiKey.getHash());
  verifyAll();
}
