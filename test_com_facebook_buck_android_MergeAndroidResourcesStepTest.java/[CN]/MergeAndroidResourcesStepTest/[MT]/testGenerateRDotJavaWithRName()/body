{
  BuildTarget res1Target=BuildTargetFactory.newInstance("//:res1");
  RDotTxtEntryBuilder entriesBuilder=new RDotTxtEntryBuilder();
  entriesBuilder.add(new RDotTxtFile("com.res1",BuildTargets.getGenPath(entriesBuilder.getProjectFilesystem(),res1Target,"__%s_text_symbols__/R.txt").toString(),ImmutableList.of("int id id1 0x7f020000","int id id2 0x7f020002")));
  FakeProjectFilesystem filesystem=entriesBuilder.getProjectFilesystem();
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer()));
  HasAndroidResourceDeps res1=AndroidResourceRuleBuilder.newBuilder().setResolver(resolver).setBuildTarget(res1Target).setRes(new FakeSourcePath("res1")).setRDotJavaPackage("res1").build();
  MergeAndroidResourcesStep mergeStep=MergeAndroidResourcesStep.createStepForDummyRDotJava(filesystem,resolver,ImmutableList.of(res1),Paths.get("output"),true,Optional.of("res1"),Optional.of("R2"));
  ExecutionContext executionContext=TestExecutionContext.newInstance();
  assertEquals(0,mergeStep.execute(executionContext).getExitCode());
  String resR2Java=filesystem.readFileIfItExists(Paths.get("output/res1/R2.java")).get();
  assertThat(resR2Java,StringContains.containsString("static final int id1=0x07f01001;"));
  assertThat(resR2Java,StringContains.containsString("static final int id2=0x07f01002;"));
}
