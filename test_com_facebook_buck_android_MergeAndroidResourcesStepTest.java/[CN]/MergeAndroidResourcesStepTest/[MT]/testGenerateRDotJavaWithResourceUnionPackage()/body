{
  RDotTxtEntryBuilder entriesBuilder=new RDotTxtEntryBuilder();
  entriesBuilder.add(new RDotTxtFile("com.res1",BuckConstant.GEN_DIR + "/__res1_text_symbols__/R.txt",ImmutableList.of("int id id1 0x7f020000")));
  entriesBuilder.add(new RDotTxtFile("com.res2",BuckConstant.GEN_DIR + "/__res2_text_symbols__/R.txt",ImmutableList.of("int id id2 0x7f020000")));
  FakeProjectFilesystem filesystem=entriesBuilder.getProjectFilesystem();
  HasAndroidResourceDeps res1=AndroidResourceRuleBuilder.newBuilder().setResolver(new SourcePathResolver(new BuildRuleResolver())).setBuildTarget(BuildTargetFactory.newInstance("//:res1")).setRes(new FakeSourcePath("res1")).setRDotJavaPackage("res1").build();
  HasAndroidResourceDeps res2=AndroidResourceRuleBuilder.newBuilder().setResolver(new SourcePathResolver(new BuildRuleResolver())).setBuildTarget(BuildTargetFactory.newInstance("//:res2")).setRes(new FakeSourcePath("res2")).setRDotJavaPackage("res2").build();
  MergeAndroidResourcesStep mergeStep=MergeAndroidResourcesStep.createStepForDummyRDotJava(filesystem,new SourcePathResolver(new BuildRuleResolver()),ImmutableList.of(res1,res2),Paths.get("output"),Optional.of("res1"));
  ExecutionContext executionContext=TestExecutionContext.newInstance();
  assertEquals(0,mergeStep.execute(executionContext));
  String res1java=filesystem.readFileIfItExists(Paths.get("output/res1/R.java")).get();
  String res2java=filesystem.readFileIfItExists(Paths.get("output/res2/R.java")).get();
  assertThat(res1java,StringContains.containsString("id1"));
  assertThat(res1java,StringContains.containsString("id2"));
  assertThat(res2java,CoreMatchers.not(StringContains.containsString("id1")));
  assertThat(res2java,StringContains.containsString("id2"));
}
