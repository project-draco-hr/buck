{
  assumeTrue(Platform.detect() == Platform.MACOS);
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"apple_binary_with_platform",tmp);
  workspace.setUp();
  BuildTarget target=BuildTargetFactory.newInstance("//Apps/TestApp:TestApp").withAppendedFlavors(platformFlavor);
  ProjectWorkspace.ProcessResult result=workspace.runBuckCommand("build","--config","cxx.cflags=-g",target.getFullyQualifiedName());
  result.assertSuccess();
  Path sanitizedObjectFilePath=workspace.getPath(BuildTargets.getGenPath(filesystem,target.withFlavors(platformFlavor,ImmutableFlavor.of("compile-" + sanitize("main.c.o"))),"%s").resolve("main.c.o"));
  Path unsanizitedObjectFilePath=workspace.getPath(filesystem.getBuckPaths().getScratchDir().resolve(Paths.get("unsanitized.main.c.o")));
  DebugPathSanitizer sanitizer=new DebugPathSanitizer(250,File.separatorChar,Paths.get("."),ImmutableBiMap.<Path,Path>of());
  String oldCompDirValue=sanitizer.getCompilationDirectory();
  String newCompDirValue=workspace.getDestPath().toString();
  result=workspace.runBuckCommand("machoutils","fix_compdir","--binary",sanitizedObjectFilePath.toString(),"--output",unsanizitedObjectFilePath.toString(),"--old_compdir",oldCompDirValue,"--new_compdir",newCompDirValue);
  result.assertSuccess();
  ProcessExecutor.Result sanitizedResult=workspace.runCommand("dwarfdump",sanitizedObjectFilePath.toString());
  ProcessExecutor.Result unsanitizedResult=workspace.runCommand("dwarfdump",unsanizitedObjectFilePath.toString());
  assertThat(sanitizedResult.getStdout().or(""),containsString("AT_comp_dir( \"./////////////////////////////"));
  assertThat(unsanitizedResult.getStdout().or(""),not(containsString("AT_comp_dir( \"./////////////////////////////")));
  assertThat(unsanitizedResult.getStdout().or(""),containsString("AT_comp_dir( \"" + newCompDirValue));
}
