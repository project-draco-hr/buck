{
  BasicBlockList blocks=method.getBlocks();
  int sz=blocks.size();
  int maxLabel=blocks.getMaxLabel();
  int[] workSet=Bits.makeBitSet(maxLabel);
  int[] tracebackSet=Bits.makeBitSet(maxLabel);
  for (int i=0; i < sz; i++) {
    BasicBlock one=blocks.get(i);
    Bits.set(workSet,one.getLabel());
  }
  int[] order=new int[sz];
  int at=0;
  for (int label=method.getFirstLabel(); label != -1; label=Bits.findFirst(workSet,0)) {
    traceBack:     for (; ; ) {
      IntList preds=method.labelToPredecessors(label);
      int psz=preds.size();
      for (int i=0; i < psz; i++) {
        int predLabel=preds.get(i);
        if (Bits.get(tracebackSet,predLabel)) {
          break;
        }
        if (!Bits.get(workSet,predLabel)) {
          continue;
        }
        BasicBlock pred=blocks.labelToBlock(predLabel);
        if (pred.getPrimarySuccessor() == label) {
          label=predLabel;
          Bits.set(tracebackSet,label);
          continue traceBack;
        }
      }
      break;
    }
    while (label != -1) {
      Bits.clear(workSet,label);
      Bits.clear(tracebackSet,label);
      order[at]=label;
      at++;
      BasicBlock one=blocks.labelToBlock(label);
      BasicBlock preferredBlock=blocks.preferredSuccessorOf(one);
      if (preferredBlock == null) {
        break;
      }
      int preferred=preferredBlock.getLabel();
      int primary=one.getPrimarySuccessor();
      if (Bits.get(workSet,preferred)) {
        label=preferred;
      }
 else       if ((primary != preferred) && (primary >= 0) && Bits.get(workSet,primary)) {
        label=primary;
      }
 else {
        IntList successors=one.getSuccessors();
        int ssz=successors.size();
        label=-1;
        for (int i=0; i < ssz; i++) {
          int candidate=successors.get(i);
          if (Bits.get(workSet,candidate)) {
            label=candidate;
            break;
          }
        }
      }
    }
  }
  if (at != sz) {
    throw new RuntimeException("shouldn't happen");
  }
  this.order=order;
}
