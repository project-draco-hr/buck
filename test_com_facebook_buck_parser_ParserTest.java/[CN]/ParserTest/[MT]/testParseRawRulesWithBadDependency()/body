{
  String nonExistentBuildTarget="//testdata/com/facebook/feed:util";
  Map<String,Object> rawRule=ImmutableMap.<String,Object>of("type","java_library","name","feed","deps",ImmutableList.of(nonExistentBuildTarget),"buck_base_path","testdata/com/facebook/feed/model");
  List<Map<String,Object>> ruleObjects=ImmutableList.of(rawRule);
  File projectDirectoryRoot=new File(".");
  Ansi ansi=new Ansi();
  ProjectFilesystem filesystem=new ProjectFilesystem(projectDirectoryRoot);
  Parser parser=new Parser(filesystem,new BuildFileTree(ImmutableSet.<BuildTarget>of()),ansi);
  RawRulePredicate predicate=RawRulePredicates.alwaysTrue();
  List<BuildTarget> targets=parser.parseRawRules(ruleObjects,predicate);
  BuildTarget expectedBuildTarget=new BuildTarget(new File("./testdata/com/facebook/feed/model/" + BuckConstant.BUILD_RULES_FILE_NAME),"//testdata/com/facebook/feed/model","feed");
  assertEquals(ImmutableList.of(expectedBuildTarget),targets);
  try {
    parser.findAllTransitiveDependencies(targets,ImmutableList.<String>of());
    fail("Should have thrown a HumanReadableException.");
  }
 catch (  HumanReadableException e) {
    assertEquals(String.format("No such build target: %s.",nonExistentBuildTarget),e.getHumanReadableErrorMessage());
  }
}
