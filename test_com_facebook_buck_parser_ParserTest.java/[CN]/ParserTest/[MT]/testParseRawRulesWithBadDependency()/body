{
  String nonExistentBuildTarget="//testdata/com/facebook/feed:util";
  Map<String,Object> rawRule=ImmutableMap.<String,Object>of("type","java_library","name","feed","deps",ImmutableList.of(nonExistentBuildTarget),"buck.base_path","testdata/com/facebook/feed/model");
  List<Map<String,Object>> ruleObjects=ImmutableList.of(rawRule);
  Parser parser=new Parser(new ProjectFilesystem(new File(".")),new KnownBuildRuleTypes(),new TestConsole(),BuckTestConstant.PYTHON_INTERPRETER);
  parser.parseRawRulesInternal(ruleObjects);
  RawRulePredicate predicate=alwaysTrue();
  List<BuildTarget> targets=parser.filterTargets(predicate);
  BuildTarget expectedBuildTarget=new BuildTarget("//testdata/com/facebook/feed/model","feed");
  assertEquals(ImmutableList.of(expectedBuildTarget),targets);
  try {
    parser.onlyUseThisWhenTestingToFindAllTransitiveDependencies(targets,ImmutableList.<String>of());
    fail("Should have thrown a HumanReadableException.");
  }
 catch (  HumanReadableException e) {
    assertEquals(String.format("No rule found when resolving target %s in build file " + "//testdata/com/facebook/feed/BUCK",nonExistentBuildTarget),e.getHumanReadableErrorMessage());
  }
}
