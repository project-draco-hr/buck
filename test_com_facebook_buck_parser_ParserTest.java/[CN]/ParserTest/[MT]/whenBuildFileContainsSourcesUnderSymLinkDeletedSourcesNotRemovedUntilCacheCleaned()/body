{
  Parser parser=createParser(emptyBuildTargets());
  tempDir.newFolder("bar");
  tempDir.newFile("bar/Bar.java");
  tempDir.newFolder("foo");
  File bazSourceFile=tempDir.newFile("bar/Baz.java");
  Path rootPath=tempDir.getRoot().toPath();
  java.nio.file.Files.createSymbolicLink(rootPath.resolve("foo/bar"),rootPath.resolve("bar"));
  Path testBuckFile=rootPath.resolve("foo").resolve(BuckConstant.BUILD_RULES_FILE_NAME);
  Files.write("java_library(name = 'lib', srcs=glob(['bar/*.java']))\n",testBuckFile.toFile(),Charsets.UTF_8);
  BuildTarget libTarget=BuildTarget.builder("//foo","lib").build();
  Iterable<BuildTarget> buildTargets=ImmutableList.of(libTarget);
  Iterable<String> defaultIncludes=ImmutableList.of();
  BuckEventBus eventBus=BuckEventBusFactory.newInstance();
{
    ActionGraph graph=parser.buildTargetGraphForBuildTargets(buildTargets,defaultIncludes,eventBus,new TestConsole(),ImmutableMap.<String,String>of(),false).getActionGraph();
    BuildRule libRule=graph.findBuildRuleByTarget(libTarget);
    assertEquals(ImmutableList.of(Paths.get("foo/bar/Bar.java"),Paths.get("foo/bar/Baz.java")),libRule.getInputs());
  }
  bazSourceFile.delete();
  WatchEvent<Path> deleteEvent=createPathEvent(Paths.get("bar/Baz.java"),StandardWatchEventKinds.ENTRY_DELETE);
  parser.onFileSystemChange(deleteEvent);
{
    ActionGraph graph=parser.buildTargetGraphForBuildTargets(buildTargets,defaultIncludes,eventBus,new TestConsole(),ImmutableMap.<String,String>of(),false).getActionGraph();
    BuildRule libRule=graph.findBuildRuleByTarget(libTarget);
    assertEquals(ImmutableList.of(Paths.get("foo/bar/Bar.java"),Paths.get("foo/bar/Baz.java")),libRule.getInputs());
  }
  parser.cleanCache();
{
    ActionGraph graph=parser.buildTargetGraphForBuildTargets(buildTargets,defaultIncludes,eventBus,new TestConsole(),ImmutableMap.<String,String>of(),false).getActionGraph();
    BuildRule libRule=graph.findBuildRuleByTarget(libTarget);
    assertEquals(ImmutableList.of(Paths.get("foo/bar/Bar.java")),libRule.getInputs());
  }
}
