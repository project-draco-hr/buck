{
  assumeTrue(Platform.detect() != Platform.WINDOWS);
  tempDir.newFolder("bar");
  tempDir.newFile("bar/Bar.java");
  tempDir.newFolder("foo");
  Path bazSourceFile=tempDir.newFile("bar/Baz.java");
  Path rootPath=tempDir.getRoot().toRealPath();
  Files.createSymbolicLink(rootPath.resolve("foo/bar"),rootPath.resolve("bar"));
  Path testBuckFile=rootPath.resolve("foo").resolve("BUCK");
  Files.write(testBuckFile,"java_library(name = 'lib', srcs=glob(['bar/*.java']))\n".getBytes(UTF_8));
  BuildTarget libTarget=BuildTarget.builder(cellRoot,"//foo","lib").build();
  Iterable<BuildTarget> buildTargets=ImmutableList.of(libTarget);
{
    TargetGraph targetGraph=parser.buildTargetGraph(eventBus,cell,false,buildTargets);
    ActionGraph graph=buildActionGraph(eventBus,targetGraph);
    JavaLibrary libRule=(JavaLibrary)graph.findBuildRuleByTarget(libTarget);
    assertEquals(ImmutableSortedSet.of(Paths.get("foo/bar/Bar.java"),Paths.get("foo/bar/Baz.java")),libRule.getJavaSrcs());
  }
  Files.delete(bazSourceFile);
  WatchEvent<Path> deleteEvent=createPathEvent(Paths.get("bar/Baz.java"),StandardWatchEventKinds.ENTRY_DELETE);
  parser.onFileSystemChange(deleteEvent);
{
    TargetGraph targetGraph=parser.buildTargetGraph(eventBus,cell,false,buildTargets);
    ActionGraph graph=buildActionGraph(eventBus,targetGraph);
    JavaLibrary libRule=(JavaLibrary)graph.findBuildRuleByTarget(libTarget);
    assertEquals(ImmutableSet.of(Paths.get("foo/bar/Bar.java")),libRule.getJavaSrcs());
  }
}
