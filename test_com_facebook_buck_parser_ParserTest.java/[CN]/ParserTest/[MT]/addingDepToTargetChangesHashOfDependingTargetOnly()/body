{
  tempDir.newFolder("foo");
  Path testFooBuckFile=tempDir.newFile("foo/BUCK");
  Files.write(testFooBuckFile,("java_library(name = 'lib', deps = [], visibility=['PUBLIC'])\n" + "java_library(name = 'lib2', deps = [], visibility=['PUBLIC'])\n").getBytes(UTF_8));
  BuildTarget fooLibTarget=BuildTarget.builder(cellRoot,"//foo","lib").build();
  BuildTarget fooLib2Target=BuildTarget.builder(cellRoot,"//foo","lib2").build();
  ImmutableMap<BuildTarget,HashCode> hashes=buildTargetGraphAndGetHashCodes(parser,fooLibTarget,fooLib2Target);
  HashCode libKey=hashes.get(fooLibTarget);
  HashCode lib2Key=hashes.get(fooLib2Target);
  DefaultTypeCoercerFactory typeCoercerFactory=new DefaultTypeCoercerFactory();
  parser=new Parser(new ParserConfig(cell.getBuckConfig()),typeCoercerFactory,new ConstructorArgMarshaller(typeCoercerFactory));
  Files.write(testFooBuckFile,("java_library(name = 'lib', deps = [], visibility=['PUBLIC'])\n" + "java_library(name = 'lib2', deps = [':lib'], visibility=['PUBLIC'])\n").getBytes(UTF_8));
  hashes=buildTargetGraphAndGetHashCodes(parser,fooLibTarget,fooLib2Target);
  assertEquals(libKey,hashes.get(fooLibTarget));
  assertNotEquals(lib2Key,hashes.get(fooLib2Target));
}
