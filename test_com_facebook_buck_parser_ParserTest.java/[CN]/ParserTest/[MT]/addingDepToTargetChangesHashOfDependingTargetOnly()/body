{
  Parser parser=createParser(emptyBuildTargets());
  tempDir.newFolder("foo");
  File testFooBuckFile=tempDir.newFile("foo/BUCK");
  Files.write("java_library(name = 'lib', deps = [], visibility=['PUBLIC'])\n" + "java_library(name = 'lib2', deps = [], visibility=['PUBLIC'])\n",testFooBuckFile,Charsets.UTF_8);
  BuildTarget fooLibTarget=BuildTarget.builder("//foo","lib").build();
  BuildTarget fooLib2Target=BuildTarget.builder("//foo","lib2").build();
  ImmutableMap<BuildTarget,HashCode> hashes=buildTargetGraphAndGetHashCodes(parser,fooLibTarget,fooLib2Target);
  HashCode libKey=hashes.get(fooLibTarget);
  HashCode lib2Key=hashes.get(fooLib2Target);
  parser=createParser(emptyBuildTargets());
  Files.write("java_library(name = 'lib', deps = [], visibility=['PUBLIC'])\n" + "java_library(name = 'lib2', deps = [':lib'], visibility=['PUBLIC'])\n",testFooBuckFile,Charsets.UTF_8);
  hashes=buildTargetGraphAndGetHashCodes(parser,fooLibTarget,fooLib2Target);
  assertEquals(libKey,hashes.get(fooLibTarget));
  assertNotEquals(lib2Key,hashes.get(fooLib2Target));
}
