{
  Parser parser=createParser(emptyBuildTargets());
  tempDir.newFolder("foo");
  File testFooBuckFile=tempDir.newFile("foo/BUCK");
  Files.write("java_library(name = 'lib', srcs=glob(['*.java']), visibility=['PUBLIC'])\n",testFooBuckFile,Charsets.UTF_8);
  File testFooJavaFile=tempDir.newFile("foo/Foo.java");
  Files.write("// Ceci n'est pas une Javafile\n",testFooJavaFile,Charsets.UTF_8);
  File testBarJavaFile=tempDir.newFile("foo/Bar.java");
  Files.write("// Seriously, no Java here\n",testBarJavaFile,Charsets.UTF_8);
  BuildTarget fooLibTarget=BuildTarget.builder("//foo","lib").build();
  HashCode originalHash=buildTargetGraphAndGetHashCodes(parser,fooLibTarget).get(fooLibTarget);
  assertTrue(testBarJavaFile.delete());
  WatchEvent<Path> deleteEvent=createPathEvent(Paths.get("foo/Bar.java"),StandardWatchEventKinds.ENTRY_DELETE);
  parser.onFileSystemChange(deleteEvent);
  HashCode updatedHash=buildTargetGraphAndGetHashCodes(parser,fooLibTarget).get(fooLibTarget);
  assertNotEquals(originalHash,updatedHash);
}
