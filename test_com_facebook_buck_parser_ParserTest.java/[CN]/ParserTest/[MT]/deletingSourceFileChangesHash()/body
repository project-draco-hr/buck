{
  Parser parser=createParser(emptyBuildTargets());
  tempDir.newFolder("foo");
  Path testFooBuckFile=tempDir.newFile("foo/BUCK");
  Files.write(testFooBuckFile,"java_library(name = 'lib', srcs=glob(['*.java']), visibility=['PUBLIC'])\n".getBytes(UTF_8));
  Path testFooJavaFile=tempDir.newFile("foo/Foo.java");
  Files.write(testFooJavaFile,"// Ceci n'est pas une Javafile\n".getBytes(UTF_8));
  Path testBarJavaFile=tempDir.newFile("foo/Bar.java");
  Files.write(testBarJavaFile,"// Seriously, no Java here\n".getBytes(UTF_8));
  BuildTarget fooLibTarget=BuildTarget.builder(cellRoot,"//foo","lib").build();
  HashCode originalHash=buildTargetGraphAndGetHashCodes(parser,fooLibTarget).get(fooLibTarget);
  Files.delete(testBarJavaFile);
  WatchEvent<Path> deleteEvent=createPathEvent(Paths.get("foo/Bar.java"),StandardWatchEventKinds.ENTRY_DELETE);
  parser.onFileSystemChange(deleteEvent);
  HashCode updatedHash=buildTargetGraphAndGetHashCodes(parser,fooLibTarget).get(fooLibTarget);
  assertNotEquals(originalHash,updatedHash);
}
