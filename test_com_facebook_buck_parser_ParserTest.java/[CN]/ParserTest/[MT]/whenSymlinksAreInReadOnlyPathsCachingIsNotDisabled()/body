{
  assumeTrue(Platform.detect() != Platform.WINDOWS);
  Path rootPath=tempDir.getRoot().toRealPath();
  BuckConfig config=FakeBuckConfig.builder().setFilesystem(filesystem).setSections("[project]","read_only_paths = " + rootPath.resolve("foo")).build();
  cell=new TestCellBuilder().setBuckConfig(config).setFilesystem(filesystem).build();
  tempDir.newFolder("bar");
  tempDir.newFile("bar/Bar.java");
  tempDir.newFolder("foo");
  Files.createSymbolicLink(rootPath.resolve("foo/bar"),rootPath.resolve("bar"));
  Path testBuckFile=rootPath.resolve("foo").resolve("BUCK");
  Files.write(testBuckFile,"java_library(name = 'lib', srcs=glob(['bar/*.java']))\n".getBytes(UTF_8));
  BuildTarget libTarget=BuildTarget.builder(cellRoot,"//foo","lib").build();
  Iterable<BuildTarget> buildTargets=ImmutableList.of(libTarget);
  parser.buildTargetGraph(eventBus,cell,false,executorService,buildTargets);
  DaemonicParserState permState=parser.getPermState();
  for (  BuildTarget target : buildTargets) {
    assertTrue(permState.getOrCreateNodeCache(TargetNode.class).lookupComputedNode(cell,target).isPresent());
  }
}
