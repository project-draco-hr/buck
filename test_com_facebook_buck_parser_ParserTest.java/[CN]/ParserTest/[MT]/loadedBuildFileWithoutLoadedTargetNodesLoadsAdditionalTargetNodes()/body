{
  tempDir.newFolder("foo");
  Path testFooBuckFile=tempDir.newFile("foo/BUCK").toRealPath();
  Files.write(testFooBuckFile,"java_library(name = 'lib1')\njava_library(name = 'lib2')\n".getBytes(UTF_8));
  BuildTarget fooLib1Target=BuildTarget.builder(cellRoot,"//foo","lib1").build();
  BuildTarget fooLib2Target=BuildTarget.builder(cellRoot,"//foo","lib2").build();
  TargetNode<?> targetNode=parser.getTargetNode(eventBus,cell,false,executorService,fooLib1Target);
  assertThat(targetNode.getBuildTarget(),equalTo(fooLib1Target));
  ImmutableSet<TargetNode<?>> targetNodes=parser.getAllTargetNodes(eventBus,cell,false,executorService,testFooBuckFile);
  assertThat(targetNodes.size(),equalTo(2));
  assertThat(FluentIterable.from(targetNodes).transform(new Function<TargetNode<?>,BuildTarget>(){
    @Override public BuildTarget apply(    TargetNode<?> targetNode){
      return targetNode.getBuildTarget();
    }
  }
).toList(),Matchers.hasItems(fooLib1Target,fooLib2Target));
}
