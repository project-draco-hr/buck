{
  Parser parser=createParser(emptyBuildTargets());
  tempDir.newFolder("foo");
  File testFooBuckFile=tempDir.newFile("foo/" + BuckConstant.BUILD_RULES_FILE_NAME);
  Files.write("java_library(name = 'lib', srcs=glob(['*.java']), visibility=['PUBLIC'])\n",testFooBuckFile,Charsets.UTF_8);
  File testFooJavaFile=tempDir.newFile("foo/Foo.java");
  Files.write("// Ceci n'est pas une Javafile\n",testFooJavaFile,Charsets.UTF_8);
  BuildTarget fooLibTarget=BuildTarget.builder("//foo","lib").build();
  assertEquals(ImmutableMap.of(fooLibTarget,HashCode.fromString("0f1f71548cbf6f1942f14cf102fdc49b87f854e4")),buildTargetGraphAndGetHashCodes(parser,fooLibTarget));
  Path testFooJavaFilePath=testFooJavaFile.toPath();
  java.nio.file.Files.move(testFooJavaFilePath,testFooJavaFilePath.resolveSibling("Bar.java"));
  WatchEvent<Path> deleteEvent=createPathEvent(Paths.get("foo/Foo.java"),StandardWatchEventKinds.ENTRY_DELETE);
  WatchEvent<Path> createEvent=createPathEvent(Paths.get("foo/Bar.java"),StandardWatchEventKinds.ENTRY_CREATE);
  parser.onFileSystemChange(deleteEvent);
  parser.onFileSystemChange(createEvent);
  assertEquals(ImmutableMap.of(fooLibTarget,HashCode.fromString("00c8e18ee8a48040b70d899d669048c14ef86592")),buildTargetGraphAndGetHashCodes(parser,fooLibTarget));
}
