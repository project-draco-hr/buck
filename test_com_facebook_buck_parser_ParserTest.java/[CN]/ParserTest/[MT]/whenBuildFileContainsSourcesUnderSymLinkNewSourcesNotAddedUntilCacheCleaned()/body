{
  assumeTrue(Platform.detect() != Platform.WINDOWS);
  Parser parser=createParser(emptyBuildTargets());
  tempDir.newFolder("bar");
  tempDir.newFile("bar/Bar.java");
  tempDir.newFolder("foo");
  Path rootPath=tempDir.getRoot().toPath();
  java.nio.file.Files.createSymbolicLink(rootPath.resolve("foo/bar"),rootPath.resolve("bar"));
  Path testBuckFile=rootPath.resolve("foo").resolve("BUCK");
  Files.write("java_library(name = 'lib', srcs=glob(['bar/*.java']))\n",testBuckFile.toFile(),Charsets.UTF_8);
  BuildTarget libTarget=BuildTarget.builder("//foo","lib").build();
  Iterable<BuildTarget> buildTargets=ImmutableList.of(libTarget);
  BuckEventBus eventBus=BuckEventBusFactory.newInstance();
  BuckConfig config=new FakeBuckConfig();
{
    TargetGraph targetGraph=parser.buildTargetGraphForBuildTargets(buildTargets,new ParserConfig(config),eventBus,new TestConsole(),config.getEnvironment(),false);
    ActionGraph graph=buildActionGraph(eventBus,targetGraph);
    JavaLibrary libRule=(JavaLibrary)graph.findBuildRuleByTarget(libTarget);
    assertEquals(ImmutableSet.of(Paths.get("foo/bar/Bar.java")),libRule.getJavaSrcs());
  }
  tempDir.newFile("bar/Baz.java");
  WatchEvent<Path> createEvent=createPathEvent(Paths.get("bar/Baz.java"),StandardWatchEventKinds.ENTRY_CREATE);
  parser.onFileSystemChange(createEvent);
{
    TargetGraph targetGraph=parser.buildTargetGraphForBuildTargets(buildTargets,new ParserConfig(config),eventBus,new TestConsole(),config.getEnvironment(),false);
    ActionGraph graph=buildActionGraph(eventBus,targetGraph);
    JavaLibrary libRule=(JavaLibrary)graph.findBuildRuleByTarget(libTarget);
    assertEquals(ImmutableSet.of(Paths.get("foo/bar/Bar.java")),libRule.getJavaSrcs());
  }
  parser.cleanCache();
{
    TargetGraph targetGraph=parser.buildTargetGraphForBuildTargets(buildTargets,new ParserConfig(config),eventBus,new TestConsole(),config.getEnvironment(),false);
    ActionGraph graph=buildActionGraph(eventBus,targetGraph);
    JavaLibrary libRule=(JavaLibrary)graph.findBuildRuleByTarget(libTarget);
    assertEquals(ImmutableSet.of(Paths.get("foo/bar/Bar.java"),Paths.get("foo/bar/Baz.java")),libRule.getJavaSrcs());
  }
}
