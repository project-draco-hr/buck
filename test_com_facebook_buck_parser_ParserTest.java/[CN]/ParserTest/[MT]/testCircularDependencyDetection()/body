{
  ProjectFilesystem projectFilesystem=createMock(ProjectFilesystem.class);
  BuildTargetParser buildTargetParser=new BuildTargetParser(projectFilesystem){
    @Override public BuildTarget parse(    String buildTargetName,    ParseContext parseContext) throws NoSuchBuildTargetException {
      return BuildTargetFactory.newInstance(buildTargetName);
    }
  }
;
  final BuildFileTree buildFiles=createMock(BuildFileTree.class);
  replay(projectFilesystem,buildFiles);
  Parser parser=createParser(Suppliers.ofInstance(buildFiles),circularBuildTargets(),new ProjectBuildFileParser(ImmutableSet.<String>of()),buildTargetParser);
  BuildTarget rootNode=BuildTargetFactory.newInstance("//:A");
  Iterable<BuildTarget> buildTargets=ImmutableSet.of(rootNode);
  Iterable<String> defaultIncludes=ImmutableList.of();
  try {
    parser.findAllTransitiveDependencies(buildTargets,defaultIncludes);
    fail("Should have thrown a HumanReadableException.");
  }
 catch (  HumanReadableException e) {
    assertEquals("Cycle found: //:C -> //:E -> //:F -> //:C",e.getMessage());
  }
  verify(projectFilesystem,buildFiles);
}
