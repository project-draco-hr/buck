{
  FakeRepositoryFactory fakeFactory=new FakeRepositoryFactory();
  BuildTargetParser buildTargetParser=new BuildTargetParser();
  final BuildFileTree buildFiles=createMock(BuildFileTree.class);
  Parser parser=createParser(ofInstance(buildFiles),circularBuildTargets(),createDoNothingBuildFileParserFactory(),buildTargetParser,fakeFactory);
  replayAll();
  BuildTarget rootNode=BuildTargetFactory.newInstance("//:A");
  Iterable<BuildTarget> buildTargets=ImmutableSet.of(rootNode);
  Iterable<String> defaultIncludes=ImmutableList.of();
  try {
    parser.onlyUseThisWhenTestingToFindAllTransitiveDependencies(buildTargets,defaultIncludes,new TestConsole(),ImmutableMap.<String,String>of(),BuckEventBusFactory.newInstance());
    fail("Should have thrown a HumanReadableException.");
  }
 catch (  HumanReadableException e) {
    assertEquals("Cycle found: //:F -> //:C -> //:E -> //:F",e.getMessage());
  }
  verifyAll();
}
