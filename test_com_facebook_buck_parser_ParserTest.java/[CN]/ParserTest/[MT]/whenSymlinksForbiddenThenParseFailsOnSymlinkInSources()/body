{
  assumeTrue(Platform.detect() != Platform.WINDOWS);
  thrown.expect(HumanReadableException.class);
  thrown.expectMessage("Target //foo:lib contains input files under a path which contains a symbolic link (" + "{foo/bar=bar}). To resolve this, use separate rules and declare dependencies instead of " + "using symbolic links.");
  Parser parser=createParser(ofInstance(new FilesystemBackedBuildFileTree(filesystem,"BUCK")),emptyBuildTargets(),new TestProjectBuildFileParserFactory(filesystem.getRootPath(),buildRuleTypes),FakeBuckConfig.builder().build(),ParserConfig.AllowSymlinks.FORBID);
  tempDir.newFolder("bar");
  tempDir.newFile("bar/Bar.java");
  tempDir.newFolder("foo");
  Path rootPath=tempDir.getRoot().toRealPath();
  Files.createSymbolicLink(rootPath.resolve("foo/bar"),rootPath.resolve("bar"));
  Path testBuckFile=rootPath.resolve("foo").resolve("BUCK");
  Files.write(testBuckFile,"java_library(name = 'lib', srcs=glob(['bar/*.java']))\n".getBytes(UTF_8));
  BuildTarget libTarget=BuildTarget.builder(cellRoot,"//foo","lib").build();
  Iterable<BuildTarget> buildTargets=ImmutableList.of(libTarget);
  BuckEventBus eventBus=BuckEventBusFactory.newInstance();
  BuckConfig config=FakeBuckConfig.builder().build();
  parser.buildTargetGraphForBuildTargets(buildTargets,new ParserConfig(config),eventBus,new TestConsole(),config.getEnvironment(),false);
}
