{
  final BuildTarget buildTarget=BuildTargetFactory.newInstance("//:" + name);
  ImmutableSortedSet.Builder<BuildTarget> depsBuilder=ImmutableSortedSet.naturalOrder();
  for (  String dep : qualifiedDeps) {
    depsBuilder.add(BuildTargetFactory.newInstance("//:" + dep));
  }
  final ImmutableSortedSet<BuildTarget> deps=depsBuilder.build();
  return new BuildRuleBuilder<BuildRule>(){
    @Override public BuildTarget getBuildTarget(){
      return buildTarget;
    }
    @Override public Set<BuildTarget> getDeps(){
      return deps;
    }
    @Override public Set<BuildTargetPattern> getVisibilityPatterns(){
      return ImmutableSet.of();
    }
    @Override public BuildRule build(    final BuildRuleResolver ruleResolver){
      return new FakeBuildRule(JavaLibraryDescription.TYPE,buildTarget,ImmutableSortedSet.<BuildRule>naturalOrder().addAll(Iterables.transform(deps,new Function<BuildTarget,BuildRule>(){
        @Override public BuildRule apply(        BuildTarget target){
          return ruleResolver.get(target);
        }
      }
)).build(),ImmutableSet.<BuildTargetPattern>of());
    }
  }
;
}
