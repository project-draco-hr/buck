{
  final BuildTarget buildTarget=BuildTargetFactory.newInstance("//:" + name);
  ImmutableSortedSet.Builder<String> depsBuilder=ImmutableSortedSet.naturalOrder();
  for (  String dep : qualifiedDeps) {
    depsBuilder.add("//:" + dep);
  }
  final ImmutableSortedSet<String> deps=depsBuilder.build();
  return new BuildRuleBuilder(){
    @Override public BuildTarget getBuildTarget(){
      return buildTarget;
    }
    @Override public Set<String> getDeps(){
      return deps;
    }
    @Override public Set<BuildTargetPattern> getVisibilityPatterns(){
      return ImmutableSet.of();
    }
    @Override public BuildRule build(    final Map<String,BuildRule> buildRuleIndex){
      return new FakeBuildRule(BuildRuleType.JAVA_LIBRARY,buildTarget,ImmutableSortedSet.<BuildRule>naturalOrder().addAll(Iterables.transform(deps,new Function<String,BuildRule>(){
        @Override public BuildRule apply(        String target){
          return buildRuleIndex.get(target);
        }
      }
)).build(),ImmutableSet.<BuildTargetPattern>of());
    }
  }
;
}
