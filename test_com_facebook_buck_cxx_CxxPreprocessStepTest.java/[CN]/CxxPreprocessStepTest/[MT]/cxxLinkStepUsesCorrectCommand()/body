{
  ImmutableList<String> compiler=ImmutableList.of("compiler");
  ImmutableList<String> flags=ImmutableList.of("-Dtest=blah");
  Path output=Paths.get("test.ii");
  Path input=Paths.get("test.cpp");
  ImmutableList<Path> prefixHeaders=ImmutableList.of(Paths.get("first/prefix/header.h"),Paths.get("another/prefix/header.h"));
  ImmutableList<Path> includes=ImmutableList.of(Paths.get("foo/bar"),Paths.get("test"));
  ImmutableList<Path> systemIncludes=ImmutableList.of(Paths.get("/usr/include"),Paths.get("/include"));
  ImmutableList<Path> frameworkRoots=ImmutableList.of(Paths.get("/absolute/path/to/frameworks"),Paths.get("relative/path/to/frameworks"));
  ImmutableMap<Path,Path> replacementPaths=ImmutableMap.of();
  CxxPreprocessStep cxxPreprocessStep=new CxxPreprocessStep(compiler,flags,output,input,prefixHeaders,includes,systemIncludes,frameworkRoots,replacementPaths,Optional.<DebugPathSanitizer>absent());
  ImmutableList<String> expected=ImmutableList.<String>builder().addAll(compiler).add("-E").add("-Dtest=blah").add("-include","first/prefix/header.h").add("-include","another/prefix/header.h").add("-I","foo/bar").add("-I","test").add("-isystem","/usr/include").add("-isystem","/include").add("-F","/absolute/path/to/frameworks").add("-F","relative/path/to/frameworks").add(input.toString()).build();
  ImmutableList<String> actual=cxxPreprocessStep.getCommand();
  assertEquals(expected,actual);
}
