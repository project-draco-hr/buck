{
  final Path androidSupportBinaryPath=Paths.get("third_party/java/support/support.aar");
  final Path androidSupportSourcesPath=Paths.get("third_party/java/support/support-sources.jar");
  final String androidSupportJavadocUrl="file:///support/docs";
  final TargetNode<?> androidPrebuiltAar=AndroidPrebuiltAarBuilder.createBuilder(BuildTargetFactory.newInstance("//third_party/java/support:support")).setBinaryAar(androidSupportBinaryPath).setSourcesJar(androidSupportSourcesPath).setJavadocUrl(androidSupportJavadocUrl).build();
  final BuildRuleResolver buildRuleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  final SourcePathResolver sourcePathResolver=new SourcePathResolver(buildRuleResolver);
  DefaultIjLibraryFactory.IjLibraryFactoryResolver ijLibraryFactoryResolver=new DefaultIjLibraryFactory.IjLibraryFactoryResolver(){
    @Override public Path getPath(    SourcePath path){
      return sourcePathResolver.getRelativePath(path);
    }
    @Override public Optional<Path> getPathIfJavaLibrary(    TargetNode<?> targetNode){
      if (targetNode.equals(androidPrebuiltAar)) {
        return Optional.of(androidSupportBinaryPath);
      }
      return Optional.absent();
    }
  }
;
  Optional<IjLibrary> library=new DefaultIjLibraryFactory(ijLibraryFactoryResolver).getLibrary(androidPrebuiltAar);
  assertTrue(library.isPresent());
  assertEquals(library.get().getBinaryJar(),Optional.of(androidSupportBinaryPath));
  assertEquals(library.get().getSourceJar(),Optional.of(androidSupportSourcesPath));
  assertEquals(library.get().getJavadocUrl(),Optional.of(androidSupportJavadocUrl));
}
