{
  ScriptEngine engine=new ScriptEngineManager().getEngineByName("nashorn");
  final Bindings bindings=engine.getBindings(ScriptContext.ENGINE_SCOPE);
  bindings.remove("quit");
  bindings.remove("exit");
  String quitExitMethod="function quit() {" + "var Exception = Java.type(\"java.lang.Exception\");" + "var ExceptionAdapter = Java.extend(Exception);"+ "var quitException = new ExceptionAdapter(\"" + EXIT_MESSAGE + "\") { "+ "getMessage: function() { "+ "var _super_ = Java.super(quitException); return _super_.getMessage(); } };"+ "throw quitException; } function exit() { quit(); }";
  String helpMethod="function help() { print(" + "\"Available commands:\\n" + "\\tquery(String query) -- query like buck query\\n"+ "\\tprintQuery(query result) -- pretty print query\\n"+ "\\texit(), quit() -- exit repl\\n"+ "\"); }";
  BuckQueryEnvironment queryEnv=new BuckQueryEnvironment(params,false);
  CommandThreadManager queryPool=new CommandThreadManager("Query",params.getBuckConfig().getWorkQueueExecutionOrder(),new ConcurrencyLimit(1,Float.POSITIVE_INFINITY));
  bindings.put("BUCK_params",params);
  bindings.put("BUCK_queryEnv",queryEnv);
  bindings.put("BUCK_queryPool",queryPool);
  bindings.put("BUCK_queryPoolExecutor",queryPool.getExecutor());
  String queryMethod="function query(queryString) {" + "return BUCK_queryEnv.evaluateQuery(queryString, BUCK_queryPoolExecutor);" + "}";
  String printQueryMethod="function printQuery(queryResult) {" + "com.facebook.buck.cli.CommandHelper.printToConsole(BUCK_params, x); }";
  try {
    engine.eval(quitExitMethod + helpMethod + queryMethod+ printQueryMethod);
  }
 catch (  ScriptException e) {
    params.getConsole().getStdOut().println("Repl initialization failed: " + e.getMessage());
  }
  params.getConsole().getStdOut().println("Welcome to buck repl.\nThis is intended for " + "experimentation and debugging, any of the APIs may change without notice!\nYou can exit " + "with exit() or quit(). Help is available with help().");
  return engine;
}
