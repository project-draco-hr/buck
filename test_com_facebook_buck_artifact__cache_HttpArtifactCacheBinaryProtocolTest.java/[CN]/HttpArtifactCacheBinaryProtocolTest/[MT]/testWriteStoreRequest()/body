{
  final String base64EncodedData="AAAAAgAgMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAAIDkwMDA" + "wMDAwMDAwMDAwMDAwMDAwMDA4MDAwMDAwMDA1AAAAXgAAAAIAIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA" + "wMDAwACA5MDAwMDAwMDAwMDAwMDAwMDAwMDAwODAwMDAwMDAwNQAAAAEAA2tleQAAAAV2YWx1ZRf0zcZkYXRhZGF"+ "0YQ==";
  final RuleKey ruleKey=new RuleKey("00000000000000000000000000000000");
  final RuleKey ruleKey2=new RuleKey("90000000000000000000008000000005");
  HttpArtifactCacheBinaryProtocol.StoreRequest storeRequest=new HttpArtifactCacheBinaryProtocol.StoreRequest(ImmutableSet.of(ruleKey,ruleKey2),ImmutableMap.of("key","value"),new ByteSource(){
    @Override public InputStream openStream() throws IOException {
      return new ByteArrayInputStream("datadata".getBytes());
    }
  }
);
  assertThat(storeRequest.getContentLength(),Matchers.is(178L));
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  StoreWriteResult writeResult=storeRequest.write(byteArrayOutputStream);
  assertThat(writeResult.getArtifactContentHashCode(),Matchers.equalTo(HashCode.fromString("2c0b14a4")));
  assertThat(writeResult.getArtifactSizeBytes(),Matchers.is(8L));
  byte[] expectedBytes=BaseEncoding.base64().decode(base64EncodedData);
  assertThat(byteArrayOutputStream.toByteArray(),Matchers.equalTo(expectedBytes));
}
