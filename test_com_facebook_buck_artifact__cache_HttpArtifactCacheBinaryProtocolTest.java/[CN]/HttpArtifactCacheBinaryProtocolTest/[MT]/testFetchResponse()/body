{
  RuleKey ruleKey=new RuleKey("00000000000000000000000000000000");
  RuleKey ruleKey2=new RuleKey("90000000000000000000008000000005");
  final String data="data";
  ImmutableMap<String,String> metadata=ImmutableMap.of("metaKey","metaValue");
  HttpArtifactCacheBinaryProtocol.FetchResponse fetchResponse=new HttpArtifactCacheBinaryProtocol.FetchResponse(ImmutableSet.of(ruleKey,ruleKey2),metadata,new ByteSource(){
    @Override public InputStream openStream() throws IOException {
      return new ByteArrayInputStream(data.getBytes(Charsets.UTF_8));
    }
  }
);
  assertThat(fetchResponse.getContentLength(),Matchers.is(110L));
  ByteArrayOutputStream fetchResponseOutputStream=new ByteArrayOutputStream();
  fetchResponse.write(fetchResponseOutputStream);
  ByteArrayInputStream fetchResponseInputStream=new ByteArrayInputStream(fetchResponseOutputStream.toByteArray());
  ByteArrayOutputStream fetchResponsePayload=new ByteArrayOutputStream();
  FetchResponseReadResult responseReadResult=HttpArtifactCacheBinaryProtocol.readFetchResponse(new DataInputStream(fetchResponseInputStream),fetchResponsePayload);
  assertThat(responseReadResult.getRuleKeys(),Matchers.containsInAnyOrder(ruleKey,ruleKey2));
  assertThat(responseReadResult.getMetadata(),Matchers.equalTo(metadata));
  assertThat(fetchResponsePayload.toByteArray(),Matchers.equalTo(data.getBytes(Charsets.UTF_8)));
}
