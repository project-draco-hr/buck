{
  final MetadataParser parser=new MetadataParser();
  final OptDef[] optdefs=parser.parse(in);
  final OptDefMetadata result=new OptDefMetadata();
  for (int o=0; o < optdefs.length; ++o) {
    result.addOptDef(optdefs[o]);
  }
  if (usageOpts != null) {
    final OptDef usage=new OptDef(true);
    usage.setNames(usageOpts);
    usage.setDescription("display usage information");
    usage.setValueCardinality(OptDef.C_ZERO);
    usage.setRequired(false);
    usage.setDetailedOnly(false);
    usage.setMergeable(false);
    result.addOptDef(usage);
  }
  for (int o=0; o < optdefs.length; ++o) {
    final OptDef optdef=optdefs[o];
    final String[] requires=optdef.getRequiresSet();
    if (requires != null) {
      for (int r=0; r < requires.length; ++r) {
        final OptDef ropt=result.getOptDef(requires[r],null);
        if (ropt == null)         throw new IllegalArgumentException("option [" + optdef.getCanonicalName() + "] specifies an unknown option ["+ requires[r]+ "] in its \'requires\' set");
        if (ropt == optdef)         throw new IllegalArgumentException("option [" + optdef.getCanonicalName() + "] specifies itself in its \'requires\' set");
      }
    }
    final String[] excludes=optdef.getExcludesSet();
    if (excludes != null) {
      for (int x=0; x < excludes.length; ++x) {
        final OptDef xopt=result.getOptDef(excludes[x],null);
        if (xopt == null)         throw new IllegalArgumentException("option [" + optdef.getCanonicalName() + "] specifies an unknown option ["+ excludes[x]+ "] in its \'excludes\' set");
        if (xopt.isRequired())         throw new IllegalArgumentException("option [" + optdef.getCanonicalName() + "] specifies a required option ["+ excludes[x]+ "] in its \'excludes\' set");
        if (xopt == optdef)         throw new IllegalArgumentException("option [" + optdef.getCanonicalName() + "] specifies itself in its \'excludes\' set");
      }
    }
  }
  return result;
}
