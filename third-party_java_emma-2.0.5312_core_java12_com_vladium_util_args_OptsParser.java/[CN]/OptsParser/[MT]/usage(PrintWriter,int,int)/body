{
  final String prefix=OPT_PREFIXES[CANONICAL_OPT_PREFIX];
  for (Iterator i=m_metadata.getOptDefs(); i.hasNext(); ) {
    final OptDef optdef=(OptDef)i.next();
    if ((level < 2) && optdef.isDetailedOnly())     continue;
    final StringBuffer line=new StringBuffer("  ");
    final String canonicalName=optdef.getCanonicalName();
    final boolean isPattern=optdef.isPattern();
    line.append(prefix);
    line.append(canonicalName);
    if (isPattern)     line.append('*');
    final String[] names=optdef.getNames();
    for (int n=0; n < names.length; ++n) {
      final String name=names[n];
      if (!name.equals(canonicalName)) {
        line.append(", ");
        line.append(prefix);
        line.append(name);
        if (isPattern)         line.append('*');
      }
    }
    final String vmnemonic=optdef.getValueMnemonic();
    if (vmnemonic != null) {
      line.append(' ');
      line.append(vmnemonic);
    }
    int padding=16 - line.length();
    if (padding < 2) {
      out.println(line);
      line.setLength(0);
      for (int p=0; p < 16; ++p)       line.append(' ');
    }
 else {
      for (int p=0; p < padding; ++p)       line.append(' ');
    }
    if (optdef.isRequired())     line.append("{required} ");
    line.append(optdef.getDescription());
    out.println(line);
  }
  if (level < DETAILED_USAGE) {
    final OptDef usageOptDef=m_metadata.getUsageOptDef();
    if ((usageOptDef != null) && (usageOptDef.getNames() != null) && (usageOptDef.getNames().length > 1)) {
      out.println();
      out.println("  {use '" + usageOptDef.getNames()[1] + "' option to see detailed usage help}");
    }
  }
}
