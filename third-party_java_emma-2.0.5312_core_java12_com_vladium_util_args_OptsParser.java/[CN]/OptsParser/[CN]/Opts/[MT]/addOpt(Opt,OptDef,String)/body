{
  if (opt == null)   throw new IllegalArgumentException("null input: opt");
  if (optdef == null)   throw new IllegalArgumentException("null input: optdef");
  if (occuranceName == null)   throw new IllegalArgumentException("null input: occuranceName");
  m_opts.add(opt);
  final String[] names=optdef.getNames();
  final boolean isPattern=(opt.getPatternPrefix() != null);
  if (isPattern) {
    final String unprefixedName=occuranceName.substring(opt.getPatternPrefix().length());
    for (int n=0; n < names.length; ++n) {
      m_nameMap.put(names[n].concat(unprefixedName),opt);
    }
{
      final String canonicalPattern=optdef.getCanonicalName();
      List patternList=(List)m_patternMap.get(canonicalPattern);
      if (patternList == null) {
        patternList=new ArrayList();
        for (int n=0; n < names.length; ++n) {
          m_patternMap.put(names[n],patternList);
        }
      }
      patternList.add(opt);
    }
  }
 else {
    for (int n=0; n < names.length; ++n) {
      m_nameMap.put(names[n],opt);
    }
  }
}
