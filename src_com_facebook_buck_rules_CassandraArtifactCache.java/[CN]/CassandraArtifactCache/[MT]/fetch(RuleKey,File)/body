{
  Optional<KeyspaceAndTtl> keyspaceAndTtl=getKeyspaceAndTtl();
  if (!keyspaceAndTtl.isPresent()) {
    return CacheResult.MISS;
  }
  OperationResult<ColumnList<String>> result;
  int ttl;
  try {
    Keyspace keyspace=keyspaceAndTtl.get().getKeyspace();
    ttl=keyspaceAndTtl.get().getTtl();
    result=keyspace.prepareQuery(CF_ARTIFACT).getKey(ruleKey.toString()).execute();
  }
 catch (  ConnectionException e) {
    reportConnectionFailure("Attempting to fetch " + ruleKey + ".",e);
    return CacheResult.MISS;
  }
  CacheResult success=CacheResult.MISS;
  try {
    Column<String> column=result.getResult().getColumnByName(ARTIFACT_COLUMN_NAME);
    if (column != null) {
      byte[] artifact=column.getByteArrayValue();
      Files.createParentDirs(output);
      Files.write(artifact,output);
      if (System.currentTimeMillis() * 1000L - column.getTimestamp() > ttl * 1000000L / 2L) {
        store(ruleKey,output);
      }
      success=CacheResult.CASSANDRA_HIT;
    }
  }
 catch (  IOException e) {
    buckEventBus.post(ThrowableConsoleEvent.create(e,"Artifact was fetched but could not be written: %s at %s.",ruleKey,output.getPath()));
  }
  buckEventBus.post(ConsoleEvent.fine("Artifact fetch(%s, %s) cache %s",ruleKey,output.getPath(),(success.isSuccess() ? "hit" : "miss")));
  return success;
}
