{
  Optional<KeyspaceAndTtl> keyspaceAndTtl=getKeyspaceAndTtl();
  if (!keyspaceAndTtl.isPresent()) {
    return CacheResult.miss();
  }
  OperationResult<ColumnList<String>> result;
  int ttl;
  try {
    Keyspace keyspace=keyspaceAndTtl.get().getKeyspace();
    ttl=keyspaceAndTtl.get().getTtl();
    result=keyspace.prepareQuery(CF_ARTIFACT).getKey(ruleKey.toString()).execute();
  }
 catch (  ConnectionException e) {
    reportConnectionFailure("Attempting to fetch " + ruleKey + ".",e);
    return CacheResult.miss();
  }
  CacheResult success=CacheResult.miss();
  try {
    Column<String> column=result.getResult().getColumnByName(ARTIFACT_COLUMN_NAME);
    if (column != null) {
      ByteArrayInputStream dataStream=new ByteArrayInputStream(column.getByteArrayValue());
      try (ObjectInputStream objectStream=new ObjectInputStream(dataStream)){
        HashCode expectedHashCode;
        try {
          expectedHashCode=(HashCode)objectStream.readObject();
        }
 catch (        ClassNotFoundException|ClassCastException e) {
          buckEventBus.post(ThrowableConsoleEvent.create(e,"Could not deserialize artifact checksum from %s:%s.",ruleKey,output.getPath()));
          return CacheResult.miss();
        }
        Path path=output.toPath();
        Files.createDirectories(path.getParent());
        Path temp=Files.createTempFile(path.getParent(),path.getFileName().toString(),".tmp");
        Files.copy(dataStream,temp,StandardCopyOption.REPLACE_EXISTING);
        HashCode actualHashCode=fileHashCache.get(temp);
        if (!expectedHashCode.equals(actualHashCode)) {
          buckEventBus.post(new CassandraChecksumMismatchEvent(expectedHashCode,actualHashCode));
          Files.delete(temp);
          return CacheResult.miss();
        }
        Files.move(temp,path,StandardCopyOption.REPLACE_EXISTING);
      }
       if (System.currentTimeMillis() * 1000L - column.getTimestamp() > ttl * 1000000L / 2L) {
        store(ruleKey,output);
      }
      success=CacheResult.hit(name);
    }
  }
 catch (  IOException e) {
    buckEventBus.post(ThrowableConsoleEvent.create(e,"Artifact was fetched but could not be written: %s at %s.",ruleKey,output.getPath()));
  }
  buckEventBus.post(ConsoleEvent.fine("Artifact fetch(%s, %s) cache %s",ruleKey,output.getPath(),(success.getType().isSuccess() ? "hit" : "miss")));
  return success;
}
