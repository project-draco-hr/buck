{
  BuildTarget bazTestTarget=BuildTarget.builder("//baz","xctest").build();
  BuildTarget fooBinTestTarget=BuildTarget.builder("//foo","bin-xctest").build();
  BuildTarget barLibTarget=BuildTarget.builder("//bar","lib").build();
  barLibNode=AppleLibraryBuilder.createBuilder(barLibTarget).build();
  BuildTarget bazLibTarget=BuildTarget.builder("//baz","lib").build();
  bazLibNode=AppleLibraryBuilder.createBuilder(bazLibTarget).setTests(Optional.of(ImmutableSortedSet.of(bazTestTarget))).build();
  BuildTarget fooTestTarget=BuildTarget.builder("//foo","lib-xctest").build();
  fooTestNode=AppleTestBuilder.createBuilder(fooTestTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setDeps(Optional.of(ImmutableSortedSet.of(bazLibTarget))).setInfoPlist(new TestSourcePath("Info.plist")).build();
  BuildTarget fooLibTarget=BuildTarget.builder("//foo","lib").build();
  fooLibNode=AppleLibraryBuilder.createBuilder(fooLibTarget).setDeps(Optional.of(ImmutableSortedSet.of(barLibTarget))).setTests(Optional.of(ImmutableSortedSet.of(fooTestTarget))).build();
  BuildTarget fooBinBinaryTarget=BuildTarget.builder("//foo","binbinary").build();
  fooBinBinaryNode=AppleBinaryBuilder.createBuilder(fooBinBinaryTarget).setDeps(Optional.of(ImmutableSortedSet.of(fooLibTarget))).build();
  BuildTarget fooBinTarget=BuildTarget.builder("//foo","bin").build();
  fooBinNode=AppleBundleBuilder.createBuilder(fooBinTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.APP)).setBinary(fooBinBinaryTarget).setTests(Optional.of(ImmutableSortedSet.of(fooBinTestTarget))).setInfoPlist(new TestSourcePath("Info.plist")).build();
  bazTestNode=AppleTestBuilder.createBuilder(bazTestTarget).setDeps(Optional.of(ImmutableSortedSet.of(bazLibTarget))).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setInfoPlist(new TestSourcePath("Info.plist")).build();
  fooBinTestNode=AppleTestBuilder.createBuilder(fooBinTestTarget).setDeps(Optional.of(ImmutableSortedSet.of(fooBinTarget))).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setInfoPlist(new TestSourcePath("Info.plist")).build();
  BuildTarget quxBinTarget=BuildTarget.builder("//qux","bin").build();
  quxBinNode=AppleBinaryBuilder.createBuilder(quxBinTarget).setDeps(Optional.of(ImmutableSortedSet.of(barLibTarget))).build();
  BuildTarget workspaceExtraTestTarget=BuildTarget.builder("//foo","extra-xctest").build();
  workspaceExtraTestNode=AppleTestBuilder.createBuilder(workspaceExtraTestTarget).setExtension(Either.<AppleBundleExtension,String>ofLeft(AppleBundleExtension.XCTEST)).setInfoPlist(new TestSourcePath("Info.plist")).build();
  BuildTarget workspaceTarget=BuildTarget.builder("//foo","workspace").build();
  workspaceNode=XcodeWorkspaceConfigBuilder.createBuilder(workspaceTarget).setWorkspaceName(Optional.of("workspace")).setSrcTarget(Optional.of(fooBinTarget)).setExtraTests(Optional.of(ImmutableSortedSet.of(workspaceExtraTestTarget))).build();
  BuildTarget smallWorkspaceTarget=BuildTarget.builder("//baz","small-workspace").build();
  smallWorkspaceNode=XcodeWorkspaceConfigBuilder.createBuilder(smallWorkspaceTarget).setWorkspaceName(Optional.of("small-workspace")).setSrcTarget(Optional.of(bazLibTarget)).build();
  targetGraph=TargetGraphFactory.newInstance(barLibNode,fooLibNode,fooBinBinaryNode,fooBinNode,bazLibNode,bazTestNode,fooTestNode,fooBinTestNode,quxBinNode,workspaceExtraTestNode,workspaceNode,smallWorkspaceNode);
}
