{
  final MutableDirectedGraph<TargetNode<?>> graph=new MutableDirectedGraph<>();
  AbstractAcyclicDepthFirstPostOrderTraversal<BuildTarget> traversal=new AbstractAcyclicDepthFirstPostOrderTraversal<BuildTarget>(){
    @Override protected Iterator<BuildTarget> findChildren(    BuildTarget buildTarget) throws IOException, InterruptedException {
      BuildTargetPatternParser buildTargetPatternParser=BuildTargetPatternParser.forBaseName(buildTargetParser,buildTarget.getBaseName());
      TargetNode<?> targetNode=getTargetNode(buildTarget);
      if (targetNode == null) {
        throw new HumanReadableException(NoSuchBuildTargetException.createForMissingBuildRule(buildTarget,buildTargetPatternParser,parserConfig.getBuildFileName()));
      }
      Set<BuildTarget> deps=Sets.newHashSet();
      for (      BuildTarget buildTargetForDep : targetNode.getDeps()) {
        try {
          TargetNode<?> depTargetNode=getTargetNode(buildTargetForDep);
          if (depTargetNode == null) {
            parseBuildFileContainingTarget(buildTargetForDep,parserConfig,buildFileParser,environment);
            depTargetNode=getTargetNode(buildTargetForDep);
            if (depTargetNode == null) {
              throw new HumanReadableException(NoSuchBuildTargetException.createForMissingBuildRule(buildTargetForDep,BuildTargetPatternParser.forBaseName(buildTargetParser,buildTargetForDep.getBaseName()),parserConfig.getBuildFileName()));
            }
          }
          depTargetNode.checkVisibility(buildTarget);
          deps.add(buildTargetForDep);
        }
 catch (        HumanReadableException|BuildTargetException|BuildFileParseException e) {
          throw new HumanReadableException(e,"Couldn't get dependency '%s' of target '%s':\n%s",buildTargetForDep,buildTarget,e.getHumanReadableErrorMessage());
        }
      }
      return deps.iterator();
    }
    @Override protected void onNodeExplored(    BuildTarget buildTarget) throws IOException, InterruptedException {
      TargetNode<?> targetNode=getTargetNode(buildTarget);
      Preconditions.checkNotNull(targetNode,"No target node found for %s",buildTarget);
      graph.addNode(targetNode);
      for (      BuildTarget target : targetNode.getDeps()) {
        graph.addEdge(targetNode,getTargetNode(target));
      }
    }
    @Override protected void onTraversalComplete(    Iterable<BuildTarget> nodesInExplorationOrder){
    }
  }
;
  try {
    traversal.traverse(toExplore);
  }
 catch (  AbstractAcyclicDepthFirstPostOrderTraversal.CycleException e) {
    throw new HumanReadableException(e.getMessage());
  }
  return new TargetGraph(graph);
}
