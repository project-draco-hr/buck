{
  final BuildRuleResolver ruleResolver=new BuildRuleResolver();
  final MutableDirectedGraph<BuildRule> graph=new MutableDirectedGraph<>();
  AbstractAcyclicDepthFirstPostOrderTraversal<BuildTarget> traversal=new AbstractAcyclicDepthFirstPostOrderTraversal<BuildTarget>(){
    @Override protected Iterator<BuildTarget> findChildren(    BuildTarget buildTarget) throws IOException {
      ParseContext parseContext=ParseContext.forBaseName(buildTarget.getBaseName());
      if (!knownBuildTargets.containsKey(buildTarget)) {
        throw new HumanReadableException(NoSuchBuildTargetException.createForMissingBuildRule(buildTarget,parseContext));
      }
      BuildRuleBuilder<?> buildRuleBuilder=knownBuildTargets.get(buildTarget);
      Set<BuildTarget> deps=Sets.newHashSet();
      for (      BuildTarget buildTargetForDep : buildRuleBuilder.getDeps()) {
        try {
          if (!knownBuildTargets.containsKey(buildTargetForDep)) {
            parseBuildFileContainingTarget(buildTargetForDep,defaultIncludes,buildFileParser);
          }
          deps.add(buildTargetForDep);
        }
 catch (        BuildTargetException|BuildFileParseException e) {
          throw new HumanReadableException(e);
        }
      }
      return deps.iterator();
    }
    @Override protected void onNodeExplored(    BuildTarget buildTarget){
      BuildRuleBuilder<?> builderForTarget=knownBuildTargets.get(buildTarget);
      BuildRule buildRule=ruleResolver.buildAndAddToIndex(builderForTarget);
      for (      BuildRule dep : buildRule.getDeps()) {
        if (dep.getBuildTarget().isFlavored()) {
          addGraphEnhancedDeps(buildRule);
          break;
        }
      }
      if (buildRule.getDeps().isEmpty()) {
        graph.addNode(buildRule);
      }
 else {
        for (        BuildRule dep : buildRule.getDeps()) {
          graph.addEdge(buildRule,dep);
        }
      }
    }
    private void addGraphEnhancedDeps(    BuildRule buildRule){
      new AbstractDependencyVisitor(buildRule){
        @Override public ImmutableSet<BuildRule> visit(        BuildRule rule){
          ImmutableSet.Builder<BuildRule> depsToVisit=null;
          boolean isRuleFlavored=rule.getBuildTarget().isFlavored();
          for (          BuildRule dep : rule.getDeps()) {
            boolean isDepFlavored=dep.getBuildTarget().isFlavored();
            if (isRuleFlavored || isDepFlavored) {
              graph.addEdge(rule,dep);
            }
            if (isDepFlavored) {
              if (depsToVisit == null) {
                depsToVisit=ImmutableSet.builder();
              }
              depsToVisit.add(dep);
            }
          }
          return depsToVisit == null ? ImmutableSet.<BuildRule>of() : depsToVisit.build();
        }
      }
.start();
    }
    @Override protected void onTraversalComplete(    Iterable<BuildTarget> nodesInExplorationOrder){
    }
  }
;
  try {
    traversal.traverse(toExplore);
  }
 catch (  AbstractAcyclicDepthFirstPostOrderTraversal.CycleException e) {
    throw new HumanReadableException(e.getMessage());
  }
  return new DependencyGraph(graph);
}
