{
  if (Iterables.isEmpty(toExplore)) {
    return TargetGraph.EMPTY;
  }
  final Map<BuildTarget,TargetGroup> groups=Maps.newHashMap();
  for (  TargetGroup group : state.getAllGroups()) {
    groups.put(group.getBuildTarget(),group);
  }
  final MutableDirectedGraph<TargetNode<?>> graph=new MutableDirectedGraph<>();
  final Map<BuildTarget,TargetNode<?>> index=new HashMap<>();
  ParseEvent.Started parseStart=ParseEvent.started(toExplore);
  eventBus.post(parseStart);
  GraphTraversable<BuildTarget> traversable=new GraphTraversable<BuildTarget>(){
    @Override public Iterator<BuildTarget> findChildren(    BuildTarget target){
      TargetNode<?> node;
      try {
        node=state.getTargetNode(target);
      }
 catch (      BuildFileParseException|BuildTargetException e) {
        throw new RuntimeException(e);
      }
      if (ignoreBuckAutodepsFiles) {
        return Collections.emptyIterator();
      }
      for (      BuildTarget dep : node.getDeps()) {
        try {
          state.getTargetNode(dep);
        }
 catch (        BuildFileParseException|BuildTargetException|HumanReadableException e) {
          throw new HumanReadableException(e,"Couldn't get dependency '%s' of target '%s':\n%s",dep,target,e.getMessage());
        }
      }
      return node.getDeps().iterator();
    }
  }
;
  GraphTraversable<BuildTarget> groupExpander=new GraphTraversable<BuildTarget>(){
    @Override public Iterator<BuildTarget> findChildren(    BuildTarget target){
      TargetGroup group=groups.get(target);
      Preconditions.checkNotNull(group,"SANITY FAILURE: Tried to expand group %s but it doesn't exist.",target);
      return Iterators.filter(group.iterator(),new Predicate<BuildTarget>(){
        @Override public boolean apply(        BuildTarget input){
          return groups.containsKey(input);
        }
      }
);
    }
  }
;
  AcyclicDepthFirstPostOrderTraversal<BuildTarget> targetGroupExpansion=new AcyclicDepthFirstPostOrderTraversal<>(groupExpander);
  AcyclicDepthFirstPostOrderTraversal<BuildTarget> targetNodeTraversal=new AcyclicDepthFirstPostOrderTraversal<>(traversable);
  TargetGraph targetGraph=null;
  try {
    for (    BuildTarget target : targetNodeTraversal.traverse(toExplore)) {
      TargetNode<?> targetNode=state.getTargetNode(target);
      Preconditions.checkNotNull(targetNode,"No target node found for %s",target);
      graph.addNode(targetNode);
      MoreMaps.putCheckEquals(index,target,targetNode);
      if (target.isFlavored()) {
        BuildTarget unflavoredTarget=BuildTarget.of(target.getUnflavoredBuildTarget());
        MoreMaps.putCheckEquals(index,unflavoredTarget,state.getTargetNode(unflavoredTarget));
      }
      for (      BuildTarget dep : targetNode.getDeps()) {
        graph.addEdge(targetNode,state.getTargetNode(dep));
      }
    }
    for (    BuildTarget groupTarget : targetGroupExpansion.traverse(groups.keySet())) {
      ImmutableMap<BuildTarget,Iterable<BuildTarget>> replacements=Maps.toMap(groupExpander.findChildren(groupTarget),new Function<BuildTarget,Iterable<BuildTarget>>(){
        @Override public Iterable<BuildTarget> apply(        BuildTarget target){
          TargetGroup group=groups.get(target);
          Preconditions.checkNotNull(group,"SANITY FAILURE: Tried to expand group %s but it doesn't exist.",target);
          return group;
        }
      }
);
      if (!replacements.isEmpty()) {
        groups.put(groupTarget,groups.get(groupTarget).withReplacedTargets(replacements));
      }
    }
    targetGraph=new TargetGraph(graph,ImmutableMap.copyOf(index),ImmutableSet.copyOf(groups.values()));
    return targetGraph;
  }
 catch (  AcyclicDepthFirstPostOrderTraversal.CycleException e) {
    throw new HumanReadableException(e.getMessage());
  }
catch (  RuntimeException e) {
    throw propagateRuntimeCause(e);
  }
 finally {
    eventBus.post(ParseEvent.finished(parseStart,Optional.fromNullable(targetGraph)));
  }
}
