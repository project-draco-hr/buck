{
  if (Iterables.isEmpty(toExplore)) {
    return TargetGraph.EMPTY;
  }
  final MutableDirectedGraph<TargetNode<?>> graph=new MutableDirectedGraph<>();
  final Map<BuildTarget,TargetNode<?>> index=new HashMap<>();
  ParseEvent.Started parseStart=ParseEvent.started(toExplore);
  eventBus.post(parseStart);
  GraphTraversable<BuildTarget> traversable=new GraphTraversable<BuildTarget>(){
    @Override public Iterator<BuildTarget> findChildren(    BuildTarget target){
      TargetNode<?> node;
      try (SimplePerfEvent.Scope scope=getTargetNodeEventScope(eventBus,target)){
        try {
          node=state.getTargetNode(target);
        }
 catch (        BuildFileParseException|BuildTargetException e) {
          throw new RuntimeException(e);
        }
      }
       if (ignoreBuckAutodepsFiles) {
        return Collections.emptyIterator();
      }
      Set<BuildTarget> deps=Sets.newHashSet();
      for (      BuildTarget dep : node.getDeps()) {
        TargetNode<?> depTargetNode;
        try (SimplePerfEvent.Scope scope=getTargetNodeEventScope(eventBus,dep)){
          try {
            depTargetNode=state.getTargetNode(dep);
          }
 catch (          BuildFileParseException|BuildTargetException|HumanReadableException e) {
            throw new HumanReadableException(e,"Couldn't get dependency '%s' of target '%s':\n%s",dep,target,e.getMessage());
          }
        }
         depTargetNode.checkVisibility(node);
        deps.add(dep);
      }
      return deps.iterator();
    }
  }
;
  AcyclicDepthFirstPostOrderTraversal<BuildTarget> traversal=new AcyclicDepthFirstPostOrderTraversal<>(traversable);
  TargetGraph targetGraph=null;
  try {
    for (    BuildTarget target : traversal.traverse(toExplore)) {
      TargetNode<?> targetNode=state.getTargetNode(target);
      Preconditions.checkNotNull(targetNode,"No target node found for %s",target);
      graph.addNode(targetNode);
      MoreMaps.putCheckEquals(index,target,targetNode);
      if (target.isFlavored()) {
        BuildTarget unflavoredTarget=BuildTarget.of(target.getUnflavoredBuildTarget());
        MoreMaps.putCheckEquals(index,unflavoredTarget,state.getTargetNode(unflavoredTarget));
      }
      for (      BuildTarget dep : targetNode.getDeps()) {
        graph.addEdge(targetNode,state.getTargetNode(dep));
      }
    }
    targetGraph=new TargetGraph(graph,ImmutableMap.copyOf(index));
    return targetGraph;
  }
 catch (  AcyclicDepthFirstPostOrderTraversal.CycleException e) {
    throw new HumanReadableException(e.getMessage());
  }
catch (  RuntimeException e) {
    throw propagateRuntimeCause(e);
  }
 finally {
    eventBus.post(ParseEvent.finished(parseStart,Optional.fromNullable(targetGraph)));
  }
}
