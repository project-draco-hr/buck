{
  int exitCode;
  try {
    LinkedHashMap<BuildRule,Optional<BuildResult>> ruleToResult=executeBuild(targetsish,isKeepGoing);
    BuildReport buildReport=new BuildReport(ruleToResult);
    if (isKeepGoing) {
      String buildReportText=buildReport.generateForConsole(ansi);
      buildReportText=buildReportText.substring(0,buildReportText.length() - 1);
      eventBus.post(ConsoleEvent.info(buildReportText));
      exitCode=Iterables.any(ruleToResult.values(),RULES_FAILED_PREDICATE) ? 1 : 0;
      if (exitCode != 0) {
        eventBus.post(ConsoleEvent.severe("Not all rules succeeded."));
      }
    }
 else {
      exitCode=0;
    }
    if (pathToBuildReport.isPresent()) {
      String jsonBuildReport=buildReport.generateJsonBuildReport();
      try {
        Files.write(jsonBuildReport,pathToBuildReport.get().toFile(),Charsets.UTF_8);
      }
 catch (      IOException e) {
        eventBus.post(ThrowableConsoleEvent.create(e,"Failed writing report"));
        exitCode=1;
      }
    }
  }
 catch (  IOException e) {
    eventBus.post(ConsoleEvent.severe(getFailureMessage(e)));
    exitCode=1;
  }
catch (  StepFailedException e) {
    eventBus.post(ConsoleEvent.severe(getFailureMessage(e)));
    exitCode=e.getExitCode();
  }
catch (  ExecutionException e) {
    Throwable cause=e.getCause();
    if (cause instanceof HumanReadableException) {
      throw ((HumanReadableException)cause);
    }
 else     if (cause instanceof ExceptionWithHumanReadableMessage) {
      throw new HumanReadableException((ExceptionWithHumanReadableMessage)cause);
    }
 else {
      if (cause instanceof RuntimeException) {
        eventBus.post(ThrowableConsoleEvent.create(cause,getFailureMessage(cause)));
      }
 else {
        eventBus.post(ConsoleEvent.severe(getFailureMessage(cause)));
      }
      exitCode=1;
    }
  }
  return exitCode;
}
