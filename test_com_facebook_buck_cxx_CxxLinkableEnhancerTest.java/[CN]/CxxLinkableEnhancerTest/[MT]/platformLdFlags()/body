{
  CxxPlatform cxxPlatform=CxxPlatform.builder().from(CXX_PLATFORM).putRuntimeLdflags(Linker.LinkableDepType.SHARED,"-ldummy-shared-libc").putRuntimeLdflags(Linker.LinkableDepType.STATIC,"-ldummy-static-libc").build();
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  ImmutableList<Optional<Linker.CxxRuntimeType>> runtimeTypes=ImmutableList.of(Optional.<Linker.CxxRuntimeType>absent(),Optional.of(Linker.CxxRuntimeType.DYNAMIC),Optional.of(Linker.CxxRuntimeType.STATIC));
  String expectedLibc[]=new String[]{"-ldummy-shared-libc","-ldummy-shared-libc","-ldummy-static-libc"};
  for (int i=0; i < expectedLibc.length; ++i) {
    CxxLink lib=CxxLinkableEnhancer.createCxxLinkableBuildRule(TargetGraph.EMPTY,cxxPlatform,params,pathResolver,ImmutableList.<String>of(),target,Linker.LinkType.SHARED,Optional.<String>absent(),DEFAULT_OUTPUT,DEFAULT_INPUTS,ImmutableList.<SourcePath>of(),Linker.LinkableDepType.SHARED,ImmutableSortedSet.<BuildRule>of(),runtimeTypes.get(i),Optional.<SourcePath>absent(),ImmutableSet.<BuildRule>of());
    assertTrue("\"" + lib.getArgs().toString() + "\" contains "+ expectedLibc[i],lib.getArgs().contains(expectedLibc[i]));
  }
}
