{
  BuildRuleResolver resolver=new BuildRuleResolver();
  BuildTarget bundleLoaderTarget=BuildTargetFactory.newInstance("//foo:bundleLoader");
  BuildRuleParams bundleLoaderParams=BuildRuleParamsFactory.createTrivialBuildRuleParams(bundleLoaderTarget);
  CxxLink bundleLoaderRule=CxxLinkableEnhancer.createCxxLinkableBuildRule(TargetGraph.EMPTY,CXX_PLATFORM,bundleLoaderParams,new SourcePathResolver(resolver),ImmutableList.<String>of(),bundleLoaderTarget,Linker.LinkType.EXECUTABLE,Optional.<String>absent(),DEFAULT_OUTPUT,ImmutableList.<SourcePath>of(new TestSourcePath("simple.o")),Linker.LinkableDepType.STATIC,EMPTY_DEPS,Optional.<Linker.CxxRuntimeType>absent(),Optional.<SourcePath>absent(),ImmutableSet.<BuildRule>of());
  resolver.addToIndex(bundleLoaderRule);
  BuildTarget bundleTarget=BuildTargetFactory.newInstance("//foo:bundle");
  BuildRuleParams bundleParams=BuildRuleParamsFactory.createTrivialBuildRuleParams(bundleTarget);
  CxxLink bundleRule=CxxLinkableEnhancer.createCxxLinkableBuildRule(TargetGraph.EMPTY,CXX_PLATFORM,bundleParams,new SourcePathResolver(resolver),ImmutableList.<String>of(),bundleTarget,Linker.LinkType.MACH_O_BUNDLE,Optional.<String>absent(),DEFAULT_OUTPUT,ImmutableList.<SourcePath>of(new TestSourcePath("another.o")),Linker.LinkableDepType.STATIC,EMPTY_DEPS,Optional.<Linker.CxxRuntimeType>absent(),Optional.<SourcePath>of(new BuildTargetSourcePath(bundleLoaderRule.getBuildTarget())),ImmutableSet.<BuildRule>of());
  assertThat(bundleRule.getDeps(),hasItem(bundleLoaderRule));
}
