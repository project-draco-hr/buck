{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  BuildTarget bundleLoaderTarget=BuildTargetFactory.newInstance("//foo:bundleLoader");
  BuildRuleParams bundleLoaderParams=new FakeBuildRuleParamsBuilder(bundleLoaderTarget).build();
  CxxLink bundleLoaderRule=CxxLinkableEnhancer.createCxxLinkableBuildRule(CxxPlatformUtils.DEFAULT_CONFIG,CXX_PLATFORM,bundleLoaderParams,resolver,new SourcePathResolver(resolver),bundleLoaderTarget,Linker.LinkType.EXECUTABLE,Optional.<String>absent(),DEFAULT_OUTPUT,Linker.LinkableDepType.STATIC,EMPTY_DEPS,Optional.<Linker.CxxRuntimeType>absent(),Optional.<SourcePath>absent(),ImmutableSet.<BuildTarget>of(),NativeLinkableInput.builder().setArgs(SourcePathArg.from(new SourcePathResolver(resolver),new FakeSourcePath("simple.o"))).build());
  resolver.addToIndex(bundleLoaderRule);
  BuildTarget bundleTarget=BuildTargetFactory.newInstance("//foo:bundle");
  BuildRuleParams bundleParams=new FakeBuildRuleParamsBuilder(bundleTarget).build();
  CxxLink bundleRule=CxxLinkableEnhancer.createCxxLinkableBuildRule(CxxPlatformUtils.DEFAULT_CONFIG,CXX_PLATFORM,bundleParams,resolver,new SourcePathResolver(resolver),bundleTarget,Linker.LinkType.MACH_O_BUNDLE,Optional.<String>absent(),DEFAULT_OUTPUT,Linker.LinkableDepType.STATIC,EMPTY_DEPS,Optional.<Linker.CxxRuntimeType>absent(),Optional.<SourcePath>of(new BuildTargetSourcePath(bundleLoaderRule.getBuildTarget())),ImmutableSet.<BuildTarget>of(),NativeLinkableInput.builder().setArgs(SourcePathArg.from(new SourcePathResolver(resolver),new FakeSourcePath("another.o"))).build());
  assertThat(bundleRule.getDeps(),hasItem(bundleLoaderRule));
}
