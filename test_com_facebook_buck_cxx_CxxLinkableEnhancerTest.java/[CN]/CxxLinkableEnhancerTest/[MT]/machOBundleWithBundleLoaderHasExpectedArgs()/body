{
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  ProjectFilesystem filesystem=params.getProjectFilesystem();
  CxxLink cxxLink=CxxLinkableEnhancer.createCxxLinkableBuildRule(CXX_PLATFORM,params,resolver,new SourcePathResolver(resolver),target,Linker.LinkType.MACH_O_BUNDLE,Optional.<String>absent(),DEFAULT_OUTPUT,Linker.LinkableDepType.STATIC,EMPTY_DEPS,Optional.<Linker.CxxRuntimeType>absent(),Optional.<SourcePath>of(new FakeSourcePath(filesystem,"path/to/MyBundleLoader")),ImmutableSet.<BuildTarget>of(),NativeLinkableInput.builder().setArgs(SourcePathArg.from(new SourcePathResolver(resolver),new FakeSourcePath("simple.o"))).build());
  assertThat(Arg.stringify(cxxLink.getArgs()),hasItem("-bundle"));
  assertThat(Arg.stringify(cxxLink.getArgs()),hasConsecutiveItems("-bundle_loader",filesystem.resolve("path/to/MyBundleLoader").toString()));
}
