{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  String staticArg="static";
  NativeLinkableInput staticInput=new NativeLinkableInput(ImmutableList.<SourcePath>of(),ImmutableList.of(staticArg));
  String sharedArg="shared";
  NativeLinkableInput sharedInput=new NativeLinkableInput(ImmutableList.<SourcePath>of(),ImmutableList.of(sharedArg));
  FakeNativeLinkable nativeLinkable=createNativeLinkable("//:dep",pathResolver,staticInput,sharedInput);
  CxxLink staticLink=CxxLinkableEnhancer.createCxxLinkableBuildRule(CXX_PLATFORM,params,pathResolver,ImmutableList.<String>of(),ImmutableList.<String>of(),target,CxxLinkableEnhancer.LinkType.EXECUTABLE,Optional.<String>absent(),DEFAULT_OUTPUT,DEFAULT_INPUTS,NativeLinkable.Type.STATIC,ImmutableSortedSet.<BuildRule>of(nativeLinkable));
  assertTrue(staticLink.getArgs().contains(staticArg));
  assertFalse(staticLink.getArgs().contains(sharedArg));
  CxxLink sharedLink=CxxLinkableEnhancer.createCxxLinkableBuildRule(CXX_PLATFORM,params,pathResolver,ImmutableList.<String>of(),ImmutableList.<String>of(),target,CxxLinkableEnhancer.LinkType.EXECUTABLE,Optional.<String>absent(),DEFAULT_OUTPUT,DEFAULT_INPUTS,NativeLinkable.Type.SHARED,ImmutableSortedSet.<BuildRule>of(nativeLinkable));
  assertFalse(sharedLink.getArgs().contains(staticArg));
  assertTrue(sharedLink.getArgs().contains(sharedArg));
}
