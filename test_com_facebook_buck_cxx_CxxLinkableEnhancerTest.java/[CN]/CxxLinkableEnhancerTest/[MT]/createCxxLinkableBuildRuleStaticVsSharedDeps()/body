{
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  String staticArg="static";
  NativeLinkableInput staticInput=NativeLinkableInput.of(ImmutableList.of(new StringArg(staticArg)),ImmutableSet.<FrameworkPath>of(),ImmutableSet.<FrameworkPath>of());
  String sharedArg="shared";
  NativeLinkableInput sharedInput=NativeLinkableInput.of(ImmutableList.of(new StringArg(sharedArg)),ImmutableSet.<FrameworkPath>of(),ImmutableSet.<FrameworkPath>of());
  FakeNativeLinkable nativeLinkable=createNativeLinkable("//:dep",pathResolver,staticInput,sharedInput);
  CxxLink staticLink=CxxLinkableEnhancer.createCxxLinkableBuildRule(CXX_PLATFORM,params,ruleResolver,pathResolver,target,Linker.LinkType.EXECUTABLE,Optional.<String>absent(),DEFAULT_OUTPUT,Linker.LinkableDepType.STATIC,ImmutableList.<NativeLinkable>of(nativeLinkable),Optional.<Linker.CxxRuntimeType>absent(),Optional.<SourcePath>absent(),ImmutableSet.<BuildTarget>of(),NativeLinkableInput.builder().setArgs(DEFAULT_INPUTS).build());
  ImmutableList<String> args=Arg.stringify(staticLink.getArgs());
  assertTrue(args.contains(staticArg) || args.contains("-Wl," + staticArg));
  assertFalse(args.contains(sharedArg));
  assertFalse(args.contains("-Wl," + sharedArg));
  CxxLink sharedLink=CxxLinkableEnhancer.createCxxLinkableBuildRule(CXX_PLATFORM,params,ruleResolver,pathResolver,target,Linker.LinkType.EXECUTABLE,Optional.<String>absent(),DEFAULT_OUTPUT,Linker.LinkableDepType.SHARED,ImmutableList.<NativeLinkable>of(nativeLinkable),Optional.<Linker.CxxRuntimeType>absent(),Optional.<SourcePath>absent(),ImmutableSet.<BuildTarget>of(),NativeLinkableInput.builder().setArgs(DEFAULT_INPUTS).build());
  args=Arg.stringify(sharedLink.getArgs());
  assertFalse(args.contains(staticArg));
  assertFalse(args.contains("-Wl," + staticArg));
  assertTrue(args.contains(sharedArg) || args.contains("-Wl," + sharedArg));
}
