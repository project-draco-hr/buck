{
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  String soname="soname";
  ImmutableList<String> sonameArgs=ImmutableList.copyOf(CXX_PLATFORM.getLd().soname(soname));
  CxxLink executable=CxxLinkableEnhancer.createCxxLinkableBuildRule(CXX_PLATFORM,params,pathResolver,target,Linker.LinkType.EXECUTABLE,Optional.<String>absent(),DEFAULT_OUTPUT,Linker.LinkableDepType.STATIC,EMPTY_DEPS,Optional.<Linker.CxxRuntimeType>absent(),Optional.<SourcePath>absent(),ImmutableSet.<BuildTarget>of(),NativeLinkableInput.builder().setArgs(DEFAULT_INPUTS).build());
  assertFalse(executable.getArgs().contains(StringArg.from("-shared")));
  assertEquals(Collections.indexOfSubList(executable.getArgs(),sonameArgs),-1);
  CxxLink shared=CxxLinkableEnhancer.createCxxLinkableBuildRule(CXX_PLATFORM,params,pathResolver,target,Linker.LinkType.SHARED,Optional.<String>absent(),DEFAULT_OUTPUT,Linker.LinkableDepType.STATIC,EMPTY_DEPS,Optional.<Linker.CxxRuntimeType>absent(),Optional.<SourcePath>absent(),ImmutableSet.<BuildTarget>of(),NativeLinkableInput.builder().setArgs(DEFAULT_INPUTS).build());
  assertTrue(Arg.stringify(shared.getArgs()).contains("-shared"));
  assertEquals(Collections.indexOfSubList(shared.getArgs(),sonameArgs),-1);
  CxxLink sharedWithSoname=CxxLinkableEnhancer.createCxxLinkableBuildRule(CXX_PLATFORM,params,pathResolver,target,Linker.LinkType.SHARED,Optional.of("soname"),DEFAULT_OUTPUT,Linker.LinkableDepType.STATIC,EMPTY_DEPS,Optional.<Linker.CxxRuntimeType>absent(),Optional.<SourcePath>absent(),ImmutableSet.<BuildTarget>of(),NativeLinkableInput.builder().setArgs(DEFAULT_INPUTS).build());
  ImmutableList<String> args=Arg.stringify(sharedWithSoname.getArgs());
  assertTrue(args.contains("-shared"));
  assertNotEquals(Collections.indexOfSubList(args,sonameArgs),-1);
}
