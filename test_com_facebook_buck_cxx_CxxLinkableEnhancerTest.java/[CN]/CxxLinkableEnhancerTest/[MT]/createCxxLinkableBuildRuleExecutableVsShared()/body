{
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  String soname="soname";
  String sonameFlag="-soname=" + soname;
  CxxLink executable=CxxLinkableEnhancer.createCxxLinkableBuildRule(params,DEFAULT_LINKER,ImmutableList.<String>of(),ImmutableList.<String>of(),target,CxxLinkableEnhancer.LinkType.EXECUTABLE,Optional.<String>absent(),DEFAULT_OUTPUT,DEFAULT_INPUTS,NativeLinkable.Type.STATIC,ImmutableSortedSet.<BuildRule>of());
  assertFalse(executable.getArgs().contains("-shared"));
  assertFalse(executable.getArgs().contains(sonameFlag));
  CxxLink shared=CxxLinkableEnhancer.createCxxLinkableBuildRule(params,DEFAULT_LINKER,ImmutableList.<String>of(),ImmutableList.<String>of(),target,CxxLinkableEnhancer.LinkType.SHARED,Optional.<String>absent(),DEFAULT_OUTPUT,DEFAULT_INPUTS,NativeLinkable.Type.STATIC,ImmutableSortedSet.<BuildRule>of());
  assertTrue(shared.getArgs().contains("-shared"));
  assertFalse(shared.getArgs().contains(sonameFlag));
  CxxLink sharedWithSoname=CxxLinkableEnhancer.createCxxLinkableBuildRule(params,DEFAULT_LINKER,ImmutableList.<String>of(),ImmutableList.<String>of(),target,CxxLinkableEnhancer.LinkType.SHARED,Optional.of("soname"),DEFAULT_OUTPUT,DEFAULT_INPUTS,NativeLinkable.Type.STATIC,ImmutableSortedSet.<BuildRule>of());
  assertTrue(sharedWithSoname.getArgs().contains("-shared"));
  assertTrue(sharedWithSoname.getArgs().contains(sonameFlag));
}
