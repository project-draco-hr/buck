{
  BuildRuleResolver resolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleParams params=BuildRuleParamsFactory.createTrivialBuildRuleParams(target);
  BuildTarget fakeBuildTarget=BuildTargetFactory.newInstance("//:fake");
  FakeBuildRule fakeBuildRule=new FakeBuildRule(new FakeBuildRuleParamsBuilder(fakeBuildTarget).build(),pathResolver);
  resolver.addToIndex(fakeBuildRule);
  NativeLinkableInput nativeLinkableInput=NativeLinkableInput.of(ImmutableList.<SourcePath>of(new BuildTargetSourcePath(fakeBuildRule.getBuildTarget())),ImmutableList.<String>of(),ImmutableSet.<FrameworkPath>of());
  FakeNativeLinkable nativeLinkable=createNativeLinkable("//:dep",pathResolver,nativeLinkableInput,nativeLinkableInput);
  CxxLink cxxLink=CxxLinkableEnhancer.createCxxLinkableBuildRule(TargetGraph.EMPTY,CXX_PLATFORM,params,pathResolver,ImmutableList.<String>of(),target,Linker.LinkType.EXECUTABLE,Optional.<String>absent(),DEFAULT_OUTPUT,DEFAULT_INPUTS,Linker.LinkableDepType.STATIC,ImmutableSortedSet.<BuildRule>of(nativeLinkable),Optional.<Linker.CxxRuntimeType>absent(),Optional.<SourcePath>absent(),ImmutableSet.<BuildRule>of());
  assertTrue(cxxLink.getDeps().contains(fakeBuildRule));
}
