{
  CxxPlatform cxxPlatform=DefaultCxxPlatforms.build(new CxxBuckConfig(FakeBuckConfig.builder().build()));
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  String sentinel="bottom";
  NativeLinkableInput bottomInput=NativeLinkableInput.of(ImmutableList.of(new StringArg(sentinel)),ImmutableSet.<FrameworkPath>of(),ImmutableSet.<FrameworkPath>of());
  BuildRule bottom=createNativeLinkable("//:bottom",pathResolver,bottomInput,bottomInput);
  BuildRule middle=new FakeBuildRule("//:middle",pathResolver,bottom);
  NativeLinkableInput topInput=NativeLinkableInput.of(ImmutableList.<Arg>of(),ImmutableSet.<FrameworkPath>of(),ImmutableSet.<FrameworkPath>of());
  BuildRule top=createNativeLinkable("//:top",pathResolver,topInput,topInput,middle);
  NativeLinkableInput totalInput=NativeLinkables.getTransitiveNativeLinkableInput(cxxPlatform,ImmutableList.of(top),Linker.LinkableDepType.STATIC,Predicates.instanceOf(NativeLinkable.class));
  assertThat(FluentIterable.from(bottomInput.getArgs()).transform(Arg.stringifyFunction()).toList(),hasItem(sentinel));
  assertThat(FluentIterable.from(totalInput.getArgs()).transform(Arg.stringifyFunction()).toList(),not(hasItem(sentinel)));
}
