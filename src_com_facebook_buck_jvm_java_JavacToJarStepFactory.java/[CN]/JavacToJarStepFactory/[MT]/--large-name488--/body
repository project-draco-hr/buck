{
  String spoolMode=javacOptions.getSpoolMode().name();
  boolean isSpoolingToJarEnabled=postprocessClassesCommands.isEmpty() && javacOptions.getSpoolMode() == AbstractJavacOptions.SpoolMode.DIRECT_TO_JAR && javacOptions.getJavac() instanceof Jsr199Javac;
  LOG.info("Target: %s SpoolMode: %s Expected SpoolMode: %s Postprocessing steps: %s",invokingRule.getBaseNameWithSlash(),(isSpoolingToJarEnabled) ? (SpoolMode.DIRECT_TO_JAR) : (SpoolMode.INTERMEDIATE_TO_DISK),spoolMode,postprocessClassesCommands.toString());
  if (isSpoolingToJarEnabled) {
    final JavacOptions buildTimeOptions=amender.amend(javacOptions,context);
    addAnnotationGenFolderStep(buildTimeOptions,filesystem,steps,buildableContext);
    steps.add(new JavacDirectToJarStep(sourceFilePaths,invokingRule,resolver,filesystem,declaredClasspathEntries,buildTimeOptions,outputDirectory,workingDirectory,pathToSrcsList,suggestBuildRules,entriesToJar,mainClass,manifestFile,outputJar,usedClassesFileWriter));
  }
 else {
    super.createCompileToJarStep(context,sourceFilePaths,invokingRule,resolver,filesystem,declaredClasspathEntries,outputDirectory,workingDirectory,pathToSrcsList,suggestBuildRules,postprocessClassesCommands,entriesToJar,mainClass,manifestFile,outputJar,usedClassesFileWriter,steps,buildableContext,javacOptions.getClassesToRemoveFromJar());
  }
}
