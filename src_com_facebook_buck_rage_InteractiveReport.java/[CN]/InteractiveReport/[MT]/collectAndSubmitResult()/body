{
  UserReport.Builder userReport=UserReport.builder();
  userReport.setUserIssueDescription(input.ask("Please describe the problem you wish to report:"));
  ImmutableSet<BuildLogEntry> hightlghtedBuilds=promptForBuildSelection();
  ImmutableSet.Builder<Path> logsAndTraces=ImmutableSet.builder();
  for (  BuildLogEntry hightlghtedBuild : hightlghtedBuilds) {
    logsAndTraces.add(hightlghtedBuild.getRelativePath());
  }
  Optional<SourceControlInfo> sourceControlInfo=Optional.absent();
  if (vcsInfoHelper.isPresent() && input.confirm("Would you like to attach source control information (this includes " + "information about commits and changed files)?")) {
    try {
      sourceControlInfo=Optional.of(vcsInfoHelper.get().gatherScmInformation());
    }
 catch (    VersionControlCommandFailedException e) {
      output.printf("Failed to get source control information: %s, proceeding regardless.\n",e);
    }
  }
  DefectReport defectReport=DefectReport.builder().setUserReport(userReport.build()).setHighlightedBuildIds(FluentIterable.from(hightlghtedBuilds).transformAndConcat(new Function<BuildLogEntry,Iterable<BuildId>>(){
    @Override public Iterable<BuildId> apply(    BuildLogEntry input){
      return input.getBuildId().asSet();
    }
  }
)).setBuildEnvironmentDescription(buildEnvironmentDescription).setSourceControlInfo(sourceControlInfo).setIncludedPaths(FluentIterable.from(hightlghtedBuilds).transform(new Function<BuildLogEntry,Path>(){
    @Override public Path apply(    BuildLogEntry input){
      return input.getRelativePath();
    }
  }
).toSet()).build();
  output.println("Writing report, please wait..");
  return defectReporter.submitReport(defectReport);
}
