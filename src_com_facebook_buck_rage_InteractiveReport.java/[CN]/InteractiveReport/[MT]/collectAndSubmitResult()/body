{
  final String issueDescription=input.ask("Please describe the problem you wish to report:");
  ImmutableSet<BuildLogEntry> hightlghtedBuilds=promptForBuildSelection();
  ImmutableSet.Builder<Path> logsAndTraces=ImmutableSet.builder();
  for (  BuildLogEntry hightlghtedBuild : hightlghtedBuilds) {
    logsAndTraces.add(hightlghtedBuild.getRelativePath());
  }
  UserReport userReport=UserReport.builder().setUserIssueDescription(issueDescription).build();
  DefectReport defectReport=DefectReport.builder().setUserReport(userReport).setHighlightedBuildIds(FluentIterable.from(hightlghtedBuilds).transformAndConcat(new Function<BuildLogEntry,Iterable<BuildId>>(){
    @Override public Iterable<BuildId> apply(    BuildLogEntry input){
      return input.getBuildId().asSet();
    }
  }
)).setBuildEnvironmentDescription(buildEnvironmentDescription).setIncludedPaths(FluentIterable.from(hightlghtedBuilds).transform(new Function<BuildLogEntry,Path>(){
    @Override public Path apply(    BuildLogEntry input){
      return input.getRelativePath();
    }
  }
).toSet()).build();
  output.println("Writing report, please wait..");
  return defectReporter.submitReport(defectReport);
}
