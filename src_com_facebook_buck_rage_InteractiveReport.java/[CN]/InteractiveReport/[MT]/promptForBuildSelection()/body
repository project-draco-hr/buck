{
  ImmutableList<BuildLogEntry> buildLogs=buildLogHelper.getBuildLogs();
  List<BuildLogEntry> interestingBuildLogs=new ArrayList<>();
  for (  BuildLogEntry entry : buildLogs) {
    if (entry.getCommandArgs().isPresent() && !entry.getCommandArgs().get().contains("rage")) {
      interestingBuildLogs.add(entry);
    }
  }
  Collections.sort(interestingBuildLogs,new Comparator<BuildLogEntry>(){
    @Override public int compare(    BuildLogEntry o1,    BuildLogEntry o2){
      return -o1.getLastModifiedTime().compareTo(o2.getLastModifiedTime());
    }
  }
);
  return input.selectRange("Which buck invocations would you like to report?",interestingBuildLogs,new Function<BuildLogEntry,String>(){
    @Override public String apply(    BuildLogEntry input){
      Pair<Double,SizeUnit> humanReadableSize=SizeUnit.getHumanReadableSize(input.getSize(),SizeUnit.BYTES);
      return String.format("\t%s\tbuck [%s] (%.2f %s)",input.getLastModifiedTime(),input.getCommandArgs(),humanReadableSize.getFirst(),humanReadableSize.getSecond().getAbbreviation());
    }
  }
);
}
