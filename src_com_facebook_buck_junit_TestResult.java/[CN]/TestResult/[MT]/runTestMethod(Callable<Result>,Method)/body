{
  PrintStream originalOut=System.out;
  PrintStream originalErr=System.err;
  ByteArrayOutputStream rawStdOutBytes=new ByteArrayOutputStream();
  ByteArrayOutputStream rawStdErrBytes=new ByteArrayOutputStream();
  PrintStream stdOutStream=new PrintStream(rawStdOutBytes,true,ENCODING);
  PrintStream stdErrStream=new PrintStream(rawStdErrBytes,true,ENCODING);
  System.setOut(stdOutStream);
  System.setErr(stdErrStream);
  Result result=runTestAndProduceJUnitResult.call();
  System.setOut(originalOut);
  System.setErr(originalErr);
  stdOutStream.flush();
  stdErrStream.flush();
  int numFailures=result.getFailureCount();
  String className=testMethod.getDeclaringClass().getCanonicalName();
  String methodName=testMethod.getName();
  if (numFailures < 0) {
    throw new IllegalStateException(String.format("Unexpected number of failures while testing %s#%s(): %d (%s)",className,methodName,numFailures,result.getFailures()));
  }
  Failure failure=numFailures == 0 ? null : result.getFailures().get(0);
  String stdOut=rawStdOutBytes.size() == 0 ? null : rawStdOutBytes.toString(ENCODING);
  String stdErr=rawStdErrBytes.size() == 0 ? null : rawStdErrBytes.toString(ENCODING);
  return new TestResult(className,methodName,result.getRunTime(),failure,stdOut,stdErr);
}
