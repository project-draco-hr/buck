{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"timeouts",temporaryFolder);
  workspace.setUp();
  ProcessResult exceedsAnnotationTimeoutTestResult=workspace.runBuckCommand("test","//:ExceedsAnnotationTimeoutTest");
  exceedsAnnotationTimeoutTestResult.assertTestFailure("Test should fail due to timeout");
  assertThat(exceedsAnnotationTimeoutTestResult.getStderr(),containsString("FAILURE testShouldFailDueToExpiredTimeout: test timed out after 1000 milliseconds"));
  ProcessResult timeoutTestWithoutTimeout=workspace.runBuckCommand("test","//:TimeoutChangesBehaviorTest");
  timeoutTestWithoutTimeout.assertSuccess();
  modifyTimeoutInTestAnnotation(PATH_TO_TIMEOUT_BEHAVIOR_TEST,true);
  ProcessResult timeoutTestWithTimeoutOnAnnotation=workspace.runBuckCommand("test","//:TimeoutChangesBehaviorTest");
  timeoutTestWithTimeoutOnAnnotation.assertTestFailure();
  assertThat(timeoutTestWithTimeoutOnAnnotation.getStderr(),containsString("FAILURE testTimeoutDictatesTheSuccessOfThisTest: " + "Database should have an open transaction due to setUp()."));
  modifyTimeoutInTestAnnotation(PATH_TO_TIMEOUT_BEHAVIOR_TEST,false);
  insertTimeoutRule(PATH_TO_TIMEOUT_BEHAVIOR_TEST);
  ProcessResult timeoutTestWithTimeoutRule=workspace.runBuckCommand("test","//:TimeoutChangesBehaviorTest");
  timeoutTestWithTimeoutRule.assertSuccess();
  workspace.verify();
}
