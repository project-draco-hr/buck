{
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"timeouts",temporaryFolder);
  workspace.setUp();
  ProcessResult exceedsAnnotationTimeoutTestResult=workspace.runBuckCommand("test","//:ExceedsAnnotationTimeoutTest");
  assertEquals("Test should fail due to timeout",1,exceedsAnnotationTimeoutTestResult.getExitCode());
  assertTrue(exceedsAnnotationTimeoutTestResult.getStderr().contains("FAILURE testShouldFailDueToExpiredTimeout: test timed out after 1000 milliseconds"));
  ProcessResult timeoutTestWithoutTimeout=workspace.runBuckCommand("test","//:TimeoutChangesBehaviorTest");
  assertEquals(0,timeoutTestWithoutTimeout.getExitCode());
  modifyTimeoutInTestAnnotation(PATH_TO_TIMEOUT_BEHAVIOR_TEST,true);
  ProcessResult timeoutTestWithTimeoutOnAnnotation=workspace.runBuckCommand("test","//:TimeoutChangesBehaviorTest");
  assertEquals(1,timeoutTestWithTimeoutOnAnnotation.getExitCode());
  assertTrue(timeoutTestWithTimeoutOnAnnotation.getStderr().contains("FAILURE testTimeoutDictatesTheSuccessOfThisTest: " + "Database should have an open transaction due to setUp()."));
  modifyTimeoutInTestAnnotation(PATH_TO_TIMEOUT_BEHAVIOR_TEST,false);
  insertTimeoutRule(PATH_TO_TIMEOUT_BEHAVIOR_TEST);
  ProcessResult timeoutTestWithTimeoutRule=workspace.runBuckCommand("test","//:TimeoutChangesBehaviorTest");
  assertEquals(0,timeoutTestWithTimeoutRule.getExitCode());
  workspace.verify();
}
