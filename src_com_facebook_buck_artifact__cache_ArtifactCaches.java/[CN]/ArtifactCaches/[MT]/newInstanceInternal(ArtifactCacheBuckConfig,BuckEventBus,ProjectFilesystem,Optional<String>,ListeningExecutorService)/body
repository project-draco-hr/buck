{
  ImmutableSet<ArtifactCacheBuckConfig.ArtifactCacheMode> modes=buckConfig.getArtifactCacheModes();
  if (modes.isEmpty()) {
    return new NoopArtifactCache();
  }
  ImmutableList.Builder<ArtifactCache> builder=ImmutableList.builder();
  for (  ArtifactCacheBuckConfig.ArtifactCacheMode mode : modes) {
switch (mode) {
case dir:
      builder.add(createDirArtifactCache(Optional.of(buckEventBus),buckConfig.getDirCache(),projectFilesystem));
    break;
case http:
  for (  HttpCacheEntry cacheEntry : buckConfig.getHttpCaches()) {
    if (!cacheEntry.isWifiUsableForDistributedCache(wifiSsid)) {
      continue;
    }
    builder.add(createHttpArtifactCache(cacheEntry,buckConfig.getHostToReportToRemoteCacheServer(),buckEventBus,projectFilesystem,httpWriteExecutorService,buckConfig));
  }
break;
}
}
ImmutableList<ArtifactCache> artifactCaches=builder.build();
ArtifactCache result;
if (artifactCaches.size() == 1) {
result=artifactCaches.get(0);
}
 else {
result=new MultiArtifactCache(artifactCaches);
}
result=new TwoLevelArtifactCacheDecorator(result,projectFilesystem,httpWriteExecutorService,buckConfig.getTwoLevelCachingEnabled(),buckConfig.getTwoLevelCachingMinimumSize(),buckConfig.getTwoLevelCachingMaximumSize());
return result;
}
