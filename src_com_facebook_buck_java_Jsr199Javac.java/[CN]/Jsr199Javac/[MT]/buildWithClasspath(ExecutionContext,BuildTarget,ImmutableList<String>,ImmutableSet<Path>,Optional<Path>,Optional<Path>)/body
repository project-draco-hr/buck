{
  JavaCompiler compiler;
  @Nullable ClassLoader compilerClassLoader;
  ClassLoaderCache classLoaderCache=context.getClassLoaderCache();
  if (javacJar.isPresent()) {
    compilerClassLoader=classLoaderCache.getClassLoaderForClassPath(ClassLoader.getSystemClassLoader(),ImmutableList.of(javacJar.get()));
    try {
      compiler=(JavaCompiler)compilerClassLoader.loadClass("com.sun.tools.javac.api.JavacTool").newInstance();
    }
 catch (    ClassNotFoundException ex) {
      throw new RuntimeException(ex);
    }
catch (    InstantiationException ex) {
      throw new RuntimeException(ex);
    }
catch (    IllegalAccessException ex) {
      throw new RuntimeException(ex);
    }
  }
 else {
    compilerClassLoader=ToolProvider.getSystemToolClassLoader();
    compiler=ToolProvider.getSystemJavaCompiler();
    if (compiler == null) {
      throw new HumanReadableException("No system compiler found. Did you install the JRE instead of the JDK?");
    }
  }
  StandardJavaFileManager fileManager=compiler.getStandardFileManager(null,null,null);
  Iterable<? extends JavaFileObject> compilationUnits=ImmutableSet.of();
  try {
    compilationUnits=createCompilationUnits(fileManager,context.getProjectFilesystem().getAbsolutifier(),javaSourceFilePaths);
  }
 catch (  IOException e) {
    close(fileManager,compilationUnits);
    e.printStackTrace(context.getStdErr());
    return 1;
  }
  if (pathToSrcsList.isPresent()) {
    try {
      context.getProjectFilesystem().writeLinesToPath(FluentIterable.from(javaSourceFilePaths).transform(Functions.toStringFunction()).transform(ARGFILES_ESCAPER),pathToSrcsList.get());
    }
 catch (    IOException e) {
      close(fileManager,compilationUnits);
      context.logError(e,"Cannot write list of .java files to compile to %s file! Terminating compilation.",pathToSrcsList.get());
      return 1;
    }
  }
  DiagnosticCollector<JavaFileObject> diagnostics=new DiagnosticCollector<>();
  List<String> classNamesForAnnotationProcessing=ImmutableList.of();
  Writer compilerOutputWriter=new PrintWriter(context.getStdErr());
  JavaCompiler.CompilationTask compilationTask=compiler.getTask(compilerOutputWriter,fileManager,diagnostics,options,classNamesForAnnotationProcessing,compilationUnits);
  ProcessorBundle bundle=null;
  boolean isSuccess;
  try {
    bundle=prepareProcessors(compiler.getClass().getClassLoader(),invokingRule,options);
    compilationTask.setProcessors(bundle.processors);
    isSuccess=compilationTask.call();
  }
  finally {
    close(fileManager,compilationUnits);
  }
  if (isSuccess) {
    return 0;
  }
 else {
    if (context.getVerbosity().shouldPrintStandardInformation()) {
      int numErrors=0;
      int numWarnings=0;
      for (      Diagnostic<? extends JavaFileObject> diagnostic : diagnostics.getDiagnostics()) {
        Diagnostic.Kind kind=diagnostic.getKind();
        if (kind == Diagnostic.Kind.ERROR) {
          ++numErrors;
          handleMissingSymbolError(invokingRule,diagnostic,context);
        }
 else         if (kind == Diagnostic.Kind.WARNING || kind == Diagnostic.Kind.MANDATORY_WARNING) {
          ++numWarnings;
        }
        context.getStdErr().println(diagnostic);
      }
      if (numErrors > 0 || numWarnings > 0) {
        context.getStdErr().printf("Errors: %d. Warnings: %d.\n",numErrors,numWarnings);
      }
    }
    return 1;
  }
}
