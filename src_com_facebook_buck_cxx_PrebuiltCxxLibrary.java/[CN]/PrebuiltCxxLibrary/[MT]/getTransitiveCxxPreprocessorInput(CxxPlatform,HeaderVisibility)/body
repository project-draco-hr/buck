{
  Pair<Flavor,HeaderVisibility> key=new Pair<>(cxxPlatform.getFlavor(),headerVisibility);
  ImmutableMap<BuildTarget,CxxPreprocessorInput> result=cxxPreprocessorInputCache.get(key);
  if (result == null) {
    Map<BuildTarget,CxxPreprocessorInput> builder=Maps.newLinkedHashMap();
    builder.put(getBuildTarget(),getCxxPreprocessorInput(cxxPlatform,headerVisibility));
    for (    BuildRule dep : getDeps()) {
      if (dep instanceof CxxPreprocessorDep) {
        builder.putAll(((CxxPreprocessorDep)dep).getTransitiveCxxPreprocessorInput(cxxPlatform,headerVisibility));
      }
    }
    result=ImmutableMap.copyOf(builder);
    cxxPreprocessorInputCache.put(key,result);
  }
  return result;
}
