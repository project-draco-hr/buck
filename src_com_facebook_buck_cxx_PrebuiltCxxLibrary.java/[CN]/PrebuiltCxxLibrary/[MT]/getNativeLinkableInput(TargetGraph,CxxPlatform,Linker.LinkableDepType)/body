{
  ImmutableList.Builder<Arg> linkerArgsBuilder=ImmutableList.builder();
  linkerArgsBuilder.addAll(StringArg.from(Preconditions.checkNotNull(exportedLinkerFlags.apply(cxxPlatform))));
  if (!headerOnly) {
    if (provided || (type == Linker.LinkableDepType.SHARED && linkage != Linkage.STATIC)) {
      linkerArgsBuilder.add(new SourcePathArg(getResolver(),requireSharedLibrary(targetGraph,cxxPlatform)));
    }
 else {
      Path staticLibraryPath=type == Linker.LinkableDepType.STATIC_PIC ? getStaticPicLibrary(cxxPlatform) : PrebuiltCxxLibraryDescription.getStaticLibraryPath(getBuildTarget(),cxxPlatform,libDir,libName);
      SourcePathArg staticLibrary=new SourcePathArg(getResolver(),new PathSourcePath(getProjectFilesystem(),staticLibraryPath));
      if (linkWhole) {
        Linker linker=cxxPlatform.getLd();
        linkerArgsBuilder.addAll(linker.linkWhole(staticLibrary));
      }
 else {
        linkerArgsBuilder.add(staticLibrary);
      }
    }
  }
  final ImmutableList<Arg> linkerArgs=linkerArgsBuilder.build();
  return NativeLinkableInput.of(linkerArgs,ImmutableSet.<FrameworkPath>of(),ImmutableSet.<FrameworkPath>of());
}
