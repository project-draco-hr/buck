{
  ImmutableList.Builder<SourcePath> librariesBuilder=ImmutableList.builder();
  ImmutableList.Builder<String> linkerArgsBuilder=ImmutableList.builder();
  linkerArgsBuilder.addAll(Preconditions.checkNotNull(exportedLinkerFlags.apply(cxxPlatform)));
  if (!headerOnly) {
    if (provided || (type == Linker.LinkableDepType.SHARED && linkage != Linkage.STATIC)) {
      SourcePath sharedLibrary=requireSharedLibrary(targetGraph,cxxPlatform);
      librariesBuilder.add(sharedLibrary);
      linkerArgsBuilder.add(pathResolver.getPath(sharedLibrary).toString());
    }
 else {
      Path staticLibraryPath=type == Linker.LinkableDepType.STATIC_PIC ? getStaticPicLibrary(cxxPlatform) : PrebuiltCxxLibraryDescription.getStaticLibraryPath(getBuildTarget(),cxxPlatform,libDir,libName);
      librariesBuilder.add(new PathSourcePath(getProjectFilesystem(),staticLibraryPath));
      if (linkWhole) {
        Linker linker=cxxPlatform.getLd();
        linkerArgsBuilder.addAll(linker.linkWhole(staticLibraryPath.toString()));
      }
 else {
        linkerArgsBuilder.add(staticLibraryPath.toString());
      }
    }
  }
  final ImmutableList<SourcePath> libraries=librariesBuilder.build();
  final ImmutableList<String> linkerArgs=linkerArgsBuilder.build();
  return NativeLinkableInput.of(libraries,linkerArgs,ImmutableSet.<FrameworkPath>of(),ImmutableSet.<FrameworkPath>of());
}
