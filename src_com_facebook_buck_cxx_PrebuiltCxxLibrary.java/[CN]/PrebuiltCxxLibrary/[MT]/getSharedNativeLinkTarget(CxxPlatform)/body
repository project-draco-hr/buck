{
  if (getPreferredLinkage(cxxPlatform) == Linkage.SHARED) {
    return Optional.absent();
  }
  return Optional.<SharedNativeLinkTarget>of(new SharedNativeLinkTarget(){
    @Override public BuildTarget getBuildTarget(){
      return PrebuiltCxxLibrary.this.getBuildTarget();
    }
    @Override public Iterable<? extends NativeLinkable> getSharedNativeLinkTargetDeps(    CxxPlatform cxxPlatform){
      return Iterables.concat(getNativeLinkableDeps(cxxPlatform),getNativeLinkableExportedDeps(cxxPlatform));
    }
    @Override public Optional<String> getSharedNativeLinkTargetLibraryName(    CxxPlatform cxxPlatform){
      return Optional.of(getSoname(cxxPlatform));
    }
    @Override public NativeLinkableInput getSharedNativeLinkTargetInput(    CxxPlatform cxxPlatform) throws NoSuchBuildTargetException {
      return NativeLinkableInput.builder().addAllArgs(StringArg.from(exportedLinkerFlags.apply(cxxPlatform))).addAllArgs(cxxPlatform.getLd().resolve(ruleResolver).linkWhole(new SourcePathArg(getResolver(),getStaticPicLibrary(cxxPlatform).get()))).build();
    }
  }
);
}
