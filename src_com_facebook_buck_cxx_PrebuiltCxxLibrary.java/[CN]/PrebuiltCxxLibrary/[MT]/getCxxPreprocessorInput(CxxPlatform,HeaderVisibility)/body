{
switch (headerVisibility) {
case PUBLIC:
    return CxxPreprocessorInput.builder().from(CxxPreprocessables.getCxxPreprocessorInput(params,ruleResolver,cxxPlatform.getFlavor(),headerVisibility,CxxPreprocessables.IncludeType.SYSTEM,exportedPreprocessorFlags.apply(cxxPlatform),ImmutableList.<FrameworkPath>of())).addAllSystemIncludeRoots(Iterables.transform(includeDirs,getProjectFilesystem().getAbsolutifier())).build();
case PRIVATE:
  return CxxPreprocessorInput.EMPTY;
}
throw new RuntimeException("Invalid header visibility: " + headerVisibility);
}
