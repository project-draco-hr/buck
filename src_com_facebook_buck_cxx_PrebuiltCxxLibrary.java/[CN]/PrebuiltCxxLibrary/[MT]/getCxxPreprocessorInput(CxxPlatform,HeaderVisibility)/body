{
  CxxPreprocessorInput.Builder builder=CxxPreprocessorInput.builder();
switch (headerVisibility) {
case PUBLIC:
    if (Preconditions.checkNotNull(hasHeaders.apply(cxxPlatform))) {
      CxxPreprocessables.addHeaderSymlinkTree(builder,getBuildTarget(),ruleResolver,cxxPlatform.getFlavor(),headerVisibility,CxxPreprocessables.IncludeType.SYSTEM);
    }
  builder.putAllPreprocessorFlags(Preconditions.checkNotNull(exportedPreprocessorFlags.apply(cxxPlatform)));
final Iterable<SourcePath> includePaths=Iterables.transform(includeDirs,new Function<String,SourcePath>(){
  @Override public SourcePath apply(  String input){
    return PrebuiltCxxLibraryDescription.getApplicableSourcePath(params.getBuildTarget(),params.getCellRoots(),params.getProjectFilesystem(),ruleResolver,cxxPlatform,input,Optional.<String>absent());
  }
}
);
builder.addAllSystemIncludeRoots(Iterables.transform(includePaths,getResolver().getAbsolutePathFunction()));
builder.addAllRules(Iterables.transform(getResolver().filterBuildRuleInputs(includePaths),TO_TARGET));
return builder.build();
case PRIVATE:
return builder.build();
}
throw new RuntimeException("Invalid header visibility: " + headerVisibility);
}
