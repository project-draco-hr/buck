{
  CxxPreprocessorInput.Builder builder=CxxPreprocessorInput.builder();
switch (headerVisibility) {
case PUBLIC:
    if (Preconditions.checkNotNull(hasHeaders.apply(cxxPlatform))) {
      CxxPreprocessables.addHeaderSymlinkTree(builder,getBuildTarget(),ruleResolver,cxxPlatform.getFlavor(),headerVisibility,CxxPreprocessables.IncludeType.SYSTEM);
    }
  builder.putAllPreprocessorFlags(Preconditions.checkNotNull(exportedPreprocessorFlags.apply(cxxPlatform)));
builder.addAllSystemIncludeRoots(Iterables.transform(includeDirs,getProjectFilesystem().getAbsolutifier()));
return builder.build();
case PRIVATE:
return builder.build();
}
throw new RuntimeException("Invalid header visibility: " + headerVisibility);
}
