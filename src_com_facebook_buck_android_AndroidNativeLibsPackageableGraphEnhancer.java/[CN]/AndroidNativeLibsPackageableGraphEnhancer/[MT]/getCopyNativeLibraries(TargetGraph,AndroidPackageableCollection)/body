{
  ImmutableMap.Builder<Pair<NdkCxxPlatforms.TargetCpuType,String>,SourcePath> nativeLinkableLibsBuilder=ImmutableMap.builder();
  ImmutableSet<NdkCxxPlatforms.TargetCpuType> filters=cpuFilters.isEmpty() ? nativePlatforms.keySet() : cpuFilters;
  for (  NdkCxxPlatforms.TargetCpuType targetCpuType : filters) {
    NdkCxxPlatform platform=Preconditions.checkNotNull(nativePlatforms.get(targetCpuType));
    boolean hasNativeLibs=false;
    for (    JavaNativeLinkable nativeLinkable : packageableCollection.getNativeLinkables()) {
      ImmutableMap<String,SourcePath> solibs=nativeLinkable.getSharedLibraries(targetGraph,platform.getCxxPlatform());
      for (      Map.Entry<String,SourcePath> entry : solibs.entrySet()) {
        nativeLinkableLibsBuilder.put(new Pair<>(targetCpuType,entry.getKey()),entry.getValue());
        hasNativeLibs=true;
      }
    }
    NdkCxxPlatforms.CxxRuntime cxxRuntime=platform.getCxxRuntime();
    if (hasNativeLibs && !cxxRuntime.equals(NdkCxxPlatforms.CxxRuntime.SYSTEM)) {
      nativeLinkableLibsBuilder.put(new Pair<>(targetCpuType,cxxRuntime.getSoname()),new PathSourcePath(buildRuleParams.getProjectFilesystem(),platform.getCxxSharedRuntimePath()));
    }
  }
  ImmutableMap<Pair<NdkCxxPlatforms.TargetCpuType,String>,SourcePath> nativeLinkableLibs=nativeLinkableLibsBuilder.build();
  if (packageableCollection.getNativeLibsDirectories().isEmpty() && nativeLinkableLibs.isEmpty()) {
    return Optional.absent();
  }
  BuildTarget targetForCopyNativeLibraries=BuildTarget.builder(originalBuildTarget).addFlavors(COPY_NATIVE_LIBS_FLAVOR).build();
  ImmutableSortedSet<BuildRule> nativeLibsRules=BuildRules.toBuildRulesFor(originalBuildTarget,ruleResolver,packageableCollection.getNativeLibsTargets());
  BuildRuleParams paramsForCopyNativeLibraries=buildRuleParams.copyWithChanges(targetForCopyNativeLibraries,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>naturalOrder().addAll(nativeLibsRules).addAll(pathResolver.filterBuildRuleInputs(packageableCollection.getNativeLibsDirectories())).addAll(pathResolver.filterBuildRuleInputs(nativeLinkableLibs.values())).build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  return Optional.of(new CopyNativeLibraries(paramsForCopyNativeLibraries,pathResolver,packageableCollection.getNativeLibsDirectories(),cpuFilters,nativePlatforms,nativeLinkableLibs));
}
