{
  super(seed);
  ruleKeyCache=CacheBuilder.newBuilder().weakKeys().build(new CacheLoader<RuleKeyAppendable,RuleKey>(){
    @Override public RuleKey load(    @Nonnull RuleKeyAppendable appendable) throws Exception {
      RuleKeyBuilder<RuleKey> subKeyBuilder=newBuilder();
      appendable.appendToRuleKey(subKeyBuilder);
      return subKeyBuilder.build();
    }
  }
);
  this.pathResolver=pathResolver;
  this.fileHashCache=new FileHashCache(){
    @Override public HashCode get(    Path path) throws IOException {
      return HashCode.fromLong(0);
    }
    @Override public HashCode get(    ArchiveMemberPath archiveMemberPath) throws IOException {
      throw new AssertionError();
    }
    @Override public boolean willGet(    Path path){
      return true;
    }
    @Override public boolean willGet(    ArchiveMemberPath archiveMemberPath){
      return true;
    }
    @Override public void invalidate(    Path path){
    }
    @Override public void invalidateAll(){
    }
    @Override public void set(    Path path,    HashCode hashCode){
    }
  }
;
}
