{
  if (!artifactCache.isStoreSupported()) {
    return;
  }
  ImmutableSet.Builder<Path> pathsToIncludeInZipBuilder=ImmutableSet.<Path>builder().addAll(Iterables.transform(metadataToWrite.keySet(),new Function<String,Path>(){
    @Override public Path apply(    String key){
      return pathToMetadataDirectory.resolve(key);
    }
  }
)).addAll(pathsToOutputFiles);
  try {
    for (    Path outputDirectory : pathsToOutputDirectories) {
      pathsToIncludeInZipBuilder.addAll(getEntries(outputDirectory));
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
  ImmutableSet<Path> pathsToIncludeInZip=pathsToIncludeInZipBuilder.build();
  File zip;
  try {
    zip=File.createTempFile(buildTarget.getFullyQualifiedName().replace('/','_'),".zip");
    projectFilesystem.createZip(pathsToIncludeInZip,zip);
  }
 catch (  IOException e) {
    eventBus.post(LogEvent.info("Failed to create zip for %s containing:\n%s",buildTarget,Joiner.on('\n').join(ImmutableSortedSet.copyOf(pathsToIncludeInZip))));
    e.printStackTrace();
    return;
  }
  artifactCache.store(ruleKey,zip);
  zip.delete();
}
