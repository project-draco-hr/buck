{
  if (!artifactCache.isStoreSupported()) {
    return;
  }
  ArtifactCompressionEvent.Started started=ArtifactCompressionEvent.started(ArtifactCompressionEvent.Operation.COMPRESS,ruleKeys);
  eventBus.post(started);
  final Path zip;
  ImmutableSet<Path> pathsToIncludeInZip=ImmutableSet.of();
  ImmutableMap<String,String> buildMetadata;
  try {
    pathsToIncludeInZip=getRecordedDirsAndFiles();
    zip=Files.createTempFile("buck_artifact_" + MoreFiles.sanitize(buildTarget.getShortName()),".zip");
    buildMetadata=getBuildMetadata();
    projectFilesystem.createZip(pathsToIncludeInZip,zip,ImmutableMap.<Path,String>of());
  }
 catch (  IOException e) {
    eventBus.post(ConsoleEvent.info("Failed to create zip for %s containing:\n%s",buildTarget,Joiner.on('\n').join(ImmutableSortedSet.copyOf(pathsToIncludeInZip))));
    e.printStackTrace();
    return;
  }
 finally {
    eventBus.post(ArtifactCompressionEvent.finished(started));
  }
  ListenableFuture<Void> storeFuture=artifactCache.store(ruleKeys,buildMetadata,BorrowablePath.notBorrowablePath(zip));
  Futures.addCallback(storeFuture,new FutureCallback<Void>(){
    @Override public void onSuccess(    Void result){
      onCompletion();
    }
    @Override public void onFailure(    Throwable t){
      onCompletion();
      LOG.info(t,"Failed storing RuleKeys %s to the cache.",ruleKeys);
      if (warnedUserOfCacheStoreFailure.compareAndSet(false,true)) {
        eventBus.post(ConsoleEvent.severe("Failed storing an artifact to the cache," + "see log for details."));
      }
    }
    private void onCompletion(){
      try {
        Files.deleteIfExists(zip);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
);
}
