{
  if (!artifactCache.isStoreSupported()) {
    return;
  }
  ArtifactCompressionEvent.Started started=ArtifactCompressionEvent.started(ArtifactCompressionEvent.Operation.COMPRESS,ruleKeys);
  eventBus.post(started);
  Path zip;
  ImmutableSet<Path> pathsToIncludeInZip=ImmutableSet.of();
  ImmutableMap<String,String> buildMetadata;
  try {
    pathsToIncludeInZip=getRecordedDirsAndFiles();
    zip=Files.createTempFile("buck_artifact_" + MoreFiles.sanitize(buildTarget.getShortName()),".zip");
    buildMetadata=getBuildMetadata();
    projectFilesystem.createZip(pathsToIncludeInZip,zip,ImmutableMap.<Path,String>of());
  }
 catch (  IOException e) {
    eventBus.post(ConsoleEvent.info("Failed to create zip for %s containing:\n%s",buildTarget,Joiner.on('\n').join(ImmutableSortedSet.copyOf(pathsToIncludeInZip))));
    e.printStackTrace();
    return;
  }
 finally {
    eventBus.post(ArtifactCompressionEvent.finished(started));
  }
  final Path finalZip=zip;
  ListenableFuture<Void> storeFuture=artifactCache.store(ruleKeys,buildMetadata,zip);
  storeFuture.addListener(new Runnable(){
    @Override public void run(){
      try {
        Files.delete(finalZip);
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
,directExecutor());
}
