{
  final ImmutableSet.Builder<Path> paths=ImmutableSortedSet.naturalOrder();
  paths.addAll(FluentIterable.from(metadataToWrite.keySet()).transform(MorePaths.TO_PATH).transform(new Function<Path,Path>(){
    @Override public Path apply(    Path input){
      return pathToMetadataDirectory.resolve(input);
    }
  }
));
  for (  final Path output : pathsToOutputs) {
    projectFilesystem.walkRelativeFileTree(output,new SimpleFileVisitor<Path>(){
      @Override public FileVisitResult visitFile(      Path file,      BasicFileAttributes attrs) throws IOException {
        paths.add(file);
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult preVisitDirectory(      Path dir,      BasicFileAttributes attrs) throws IOException {
        paths.add(dir);
        return FileVisitResult.CONTINUE;
      }
    }
);
  }
  return paths.build();
}
