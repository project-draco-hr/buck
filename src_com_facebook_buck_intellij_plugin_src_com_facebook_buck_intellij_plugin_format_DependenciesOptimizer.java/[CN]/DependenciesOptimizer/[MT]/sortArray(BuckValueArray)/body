{
  BuckArrayElements arrayElements=array.getArrayElements();
  PsiElement[] arrayValues=arrayElements.getChildren();
  Arrays.sort(arrayValues,new Comparator<PsiElement>(){
    @Override public int compare(    PsiElement e1,    PsiElement e2){
      String[] targetPathArray1=e1.getText().split(":");
      String path1="";
      String target1;
      if (targetPathArray1.length == 2) {
        path1=targetPathArray1[0];
        target1=targetPathArray1[1];
      }
 else {
        target1=targetPathArray1[0];
      }
      String[] targetPathArray2=e2.getText().split(":");
      String path2="";
      String target2;
      if (targetPathArray2.length == 2) {
        path2=targetPathArray2[0];
        target2=targetPathArray2[1];
      }
 else {
        target2=targetPathArray2[0];
      }
      String[] splitPath1=path1.split("/");
      String[] splitPath2=path2.split("/");
      int maxChar=Math.min(splitPath1.length,splitPath2.length);
      int result;
      for (int i=0; i < maxChar; i++) {
        result=splitPath1[i].compareTo(splitPath2[i]);
        if (result != 0) {
          return result;
        }
      }
      result=splitPath1.length - splitPath2.length;
      if (result == 0) {
        return target1.compareTo(target2);
      }
 else {
        return result;
      }
    }
  }
);
  PsiElement[] oldValues=new PsiElement[arrayValues.length];
  for (int i=0; i < arrayValues.length; ++i) {
    oldValues[i]=arrayValues[i].copy();
  }
  for (int i=0; i < arrayValues.length; ++i) {
    arrayElements.getChildren()[i].replace(oldValues[i]);
  }
}
