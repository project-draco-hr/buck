{
  BuildRuleResolver resolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  String genHeaderName="test/foo.h";
  GenruleDescription genHeaderDescription=new GenruleDescription();
  GenruleDescription.Arg genHeaderArg=createEmptyGenruleDescriptionArg();
  genHeaderArg.out=genHeaderName;
  BuildTarget genHeaderTarget=BuildTargetFactory.newInstance("//:genHeader");
  Genrule genHeader=(Genrule)GenruleBuilder.newGenruleBuilder(genHeaderTarget).setOut(genHeaderName).build(resolver);
  String genSourceName="test/foo.cpp";
  GenruleDescription genSourceDescription=new GenruleDescription();
  GenruleDescription.Arg genSourceArg=createEmptyGenruleDescriptionArg();
  genHeaderArg.out=genSourceName;
  BuildTarget genSourceTarget=BuildTargetFactory.newInstance("//:genSource");
  Genrule genSource=(Genrule)GenruleBuilder.newGenruleBuilder(genSourceTarget).setOut(genSourceName).build(resolver);
  final BuildRule header=new FakeBuildRule("//:header",pathResolver);
  final BuildRule headerSymlinkTree=new FakeBuildRule("//:symlink",pathResolver);
  final Path headerSymlinkTreeRoot=Paths.get("symlink/tree/root");
  final BuildRule archive=new FakeBuildRule("//:archive",pathResolver);
  final Path archiveOutput=Paths.get("output/path/lib.a");
  BuildTarget depTarget=BuildTargetFactory.newInstance("//:dep");
  BuildRuleParams depParams=BuildRuleParamsFactory.createTrivialBuildRuleParams(depTarget);
  AbstractCxxLibrary dep=new AbstractCxxLibrary(depParams,pathResolver){
    @Override public CxxPreprocessorInput getCxxPreprocessorInput(    CxxPlatform cxxPlatform){
      return CxxPreprocessorInput.builder().setRules(ImmutableSet.of(header.getBuildTarget(),headerSymlinkTree.getBuildTarget())).setIncludeRoots(headerSymlinkTreeRoot).build();
    }
    @Override public NativeLinkableInput getNativeLinkableInput(    CxxPlatform cxxPlatform,    Type type){
      return new NativeLinkableInput(ImmutableList.<SourcePath>of(new BuildTargetSourcePath(archive.getBuildTarget())),ImmutableList.of(archiveOutput.toString()));
    }
    @Override public PythonPackageComponents getPythonPackageComponents(    CxxPlatform cxxPlatform){
      return new PythonPackageComponents(ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of(),ImmutableMap.<Path,SourcePath>of());
    }
    @Override public Iterable<AndroidPackageable> getRequiredPackageables(){
      return ImmutableList.of();
    }
    @Override public void addToCollector(    AndroidPackageableCollector collector){
    }
    @Override public ImmutableMap<String,SourcePath> getSharedLibraries(    CxxPlatform cxxPlatform){
      return ImmutableMap.of();
    }
  }
;
  resolver.addAllToIndex(ImmutableList.of(header,headerSymlinkTree,archive));
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  CxxBuckConfig cxxBuckConfig=new CxxBuckConfig(new FakeBuckConfig());
  CxxPlatform cxxPlatform=new DefaultCxxPlatform(new FakeBuckConfig());
  FlavorDomain<CxxPlatform> cxxPlatforms=new FlavorDomain<>("C/C++ Platform",ImmutableMap.of(cxxPlatform.asFlavor(),cxxPlatform));
  CxxLibraryDescription description=new CxxLibraryDescription(cxxBuckConfig,cxxPlatforms);
  CxxLibraryDescription.Arg arg=description.createEmptyConstructorArg();
  arg.deps=Optional.of(ImmutableSortedSet.of(dep.getBuildTarget()));
  arg.srcs=Optional.of(Either.<ImmutableList<SourcePath>,ImmutableMap<String,SourcePath>>ofLeft(ImmutableList.<SourcePath>of(new TestSourcePath("test/bar.cpp"),new BuildTargetSourcePath(genSource.getBuildTarget()))));
  String headerName="test/bar.h";
  arg.headers=Optional.of(Either.<ImmutableList<SourcePath>,ImmutableMap<String,SourcePath>>ofLeft(ImmutableList.<SourcePath>of(new TestSourcePath(headerName),new BuildTargetSourcePath(genHeader.getBuildTarget()))));
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).setTargetGraph(TargetGraphFactory.newInstance(createTargetNode(target,description,arg),createTargetNode(genSource.getBuildTarget(),genSourceDescription,genSourceArg),createTargetNode(genHeader.getBuildTarget(),genHeaderDescription,genHeaderArg),createTargetNode(depTarget,new GenruleDescription(),createEmptyGenruleDescriptionArg()))).setDeps(ImmutableSortedSet.<BuildRule>of(dep)).build();
  CxxLibrary rule=(CxxLibrary)description.createBuildRule(params,resolver,arg);
  Path headerRoot=CxxDescriptionEnhancer.getHeaderSymlinkTreePath(target,cxxPlatform.asFlavor());
  assertEquals(CxxPreprocessorInput.builder().setRules(ImmutableSet.of(CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target,cxxPlatform.asFlavor()))).setIncludes(ImmutableCxxHeaders.builder().putNameToPathMap(Paths.get(headerName),new TestSourcePath(headerName)).putNameToPathMap(Paths.get(genHeaderName),new BuildTargetSourcePath(genHeader.getBuildTarget())).putFullNameToPathMap(headerRoot.resolve(headerName),new TestSourcePath(headerName)).putFullNameToPathMap(headerRoot.resolve(genHeaderName),new BuildTargetSourcePath(genHeader.getBuildTarget())).build()).setIncludeRoots(ImmutableList.of(CxxDescriptionEnhancer.getHeaderSymlinkTreePath(target,cxxPlatform.asFlavor()))).build(),rule.getCxxPreprocessorInput(cxxPlatform));
  rule.getNativeLinkableInput(cxxPlatform,NativeLinkable.Type.STATIC);
  BuildRule archiveRule=resolver.getRule(CxxDescriptionEnhancer.createStaticLibraryBuildTarget(target,cxxPlatform.asFlavor()));
  assertNotNull(archiveRule);
  assertEquals(ImmutableSet.of(CxxCompilableEnhancer.createCompileBuildTarget(target,cxxPlatform.asFlavor(),"test/bar.cpp",false),CxxCompilableEnhancer.createCompileBuildTarget(target,cxxPlatform.asFlavor(),genSourceName,false)),FluentIterable.from(archiveRule.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule preprocessRule1=resolver.getRule(CxxPreprocessables.createPreprocessBuildTarget(target,cxxPlatform.asFlavor(),CxxSource.Type.CXX,false,"test/bar.cpp"));
  assertEquals(ImmutableSet.of(genHeaderTarget,headerSymlinkTree.getBuildTarget(),header.getBuildTarget(),CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target,cxxPlatform.asFlavor())),FluentIterable.from(preprocessRule1.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule compileRule1=resolver.getRule(CxxCompilableEnhancer.createCompileBuildTarget(target,cxxPlatform.asFlavor(),"test/bar.cpp",false));
  assertNotNull(compileRule1);
  assertEquals(ImmutableSet.of(preprocessRule1.getBuildTarget()),FluentIterable.from(compileRule1.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule preprocessRule2=resolver.getRule(CxxPreprocessables.createPreprocessBuildTarget(target,cxxPlatform.asFlavor(),CxxSource.Type.CXX,false,genSourceName));
  assertEquals(ImmutableSet.of(genHeaderTarget,genSourceTarget,headerSymlinkTree.getBuildTarget(),header.getBuildTarget(),CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target,cxxPlatform.asFlavor())),FluentIterable.from(preprocessRule2.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule compileRule2=resolver.getRule(CxxCompilableEnhancer.createCompileBuildTarget(target,cxxPlatform.asFlavor(),genSourceName,false));
  assertNotNull(compileRule2);
  assertEquals(ImmutableSet.of(preprocessRule2.getBuildTarget()),FluentIterable.from(compileRule2.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
}
