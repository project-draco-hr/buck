{
  BuildTarget location=BuildTargetFactory.newInstance("//:loc");
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar").withFlavors(CxxDescriptionEnhancer.SHARED_FLAVOR,CxxLibraryBuilder.createDefaultPlatform().getFlavor());
  BuildRuleResolver resolver=new BuildRuleResolver();
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  ExportFileBuilder locBuilder=ExportFileBuilder.newExportFileBuilder(location);
  locBuilder.setOut("somewhere.over.the.rainbow");
  CxxLibraryBuilder libBuilder=new CxxLibraryBuilder(target);
  libBuilder.setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(new PathSourcePath(filesystem,Paths.get("test.cpp")))));
  libBuilder.setLinkerFlags(ImmutableList.of("-Wl,--version-script=$(location //:loc)"));
  TargetGraph targetGraph=TargetGraphFactory.newInstance(libBuilder.build(),locBuilder.build());
  ExportFile loc=(ExportFile)locBuilder.build(resolver,filesystem,targetGraph);
  CxxLink lib=(CxxLink)libBuilder.build(resolver,filesystem,targetGraph);
  assertThat(lib.getDeps(),Matchers.hasItem(loc));
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  assertThat(pathResolver.filterBuildRuleInputs(lib.getInputs()),Matchers.hasItem(loc));
  assertThat(lib.getArgs(),Matchers.hasItem(Matchers.containsString(loc.getPathToOutput().toString())));
}
