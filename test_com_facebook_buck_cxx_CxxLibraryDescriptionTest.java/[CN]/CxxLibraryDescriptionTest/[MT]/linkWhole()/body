{
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  CxxPlatform cxxPlatform=CxxLibraryBuilder.createDefaultPlatform();
  BuildTarget target=BuildTargetFactory.newInstance("//:test");
  Path staticLib=CxxDescriptionEnhancer.getStaticLibraryPath(target,cxxPlatform.getFlavor(),CxxSourceRuleFactory.PicType.PDC);
  Linker linker=cxxPlatform.getLd();
  Set<String> linkWholeFlags=Sets.newHashSet(linker.linkWhole(staticLib.toString()));
  linkWholeFlags.remove(staticLib.toString());
  CxxLibraryBuilder normalBuilder=new CxxLibraryBuilder(target);
  TargetGraph normalGraph=TargetGraphFactory.newInstance(normalBuilder.build());
  CxxLibrary normal=(CxxLibrary)normalBuilder.build(new BuildRuleResolver(),filesystem,normalGraph);
  assertNotContains(normal.getNativeLinkableInput(normalGraph,cxxPlatform,Linker.LinkableDepType.STATIC).getArgs(),linkWholeFlags);
  AbstractCxxSourceBuilder<CxxLibraryDescription.Arg> linkWholeBuilder=new CxxLibraryBuilder(target).setLinkWhole(true).setSrcs(ImmutableList.of(SourceWithFlags.of(new TestSourcePath("foo.cpp"))));
  TargetGraph linkWholeGraph=TargetGraphFactory.newInstance(linkWholeBuilder.build());
  CxxLibrary linkWhole=(CxxLibrary)linkWholeBuilder.build(new BuildRuleResolver(),filesystem,linkWholeGraph);
  assertContains(linkWhole.getNativeLinkableInput(linkWholeGraph,cxxPlatform,Linker.LinkableDepType.STATIC).getArgs(),linkWholeFlags);
}
