{
  BuildRuleResolver resolver=new BuildRuleResolver();
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  CxxPlatform cxxPlatform=CxxLibraryBuilder.createDefaultPlatform();
  BuildTarget target=BuildTargetFactory.newInstance("//:test");
  Linker linker=cxxPlatform.getLd();
  ImmutableList<String> linkWholeFlags=FluentIterable.from(linker.linkWhole(new StringArg("sentinel"))).transform(Arg.stringifyFunction()).filter(Predicates.not(Predicates.equalTo("sentinel"))).toList();
  CxxLibraryBuilder normalBuilder=new CxxLibraryBuilder(target);
  TargetGraph normalGraph=TargetGraphFactory.newInstance(normalBuilder.build());
  CxxLibrary normal=(CxxLibrary)normalBuilder.setSrcs(ImmutableSortedSet.<SourceWithFlags>of(SourceWithFlags.of(new TestSourcePath("test.cpp")))).build(resolver,filesystem,normalGraph);
  NativeLinkableInput input=normal.getNativeLinkableInput(normalGraph,cxxPlatform,Linker.LinkableDepType.STATIC);
  assertThat(FluentIterable.from(input.getArgs()).transform(Arg.stringifyFunction()).toList(),Matchers.not(Matchers.hasItems(linkWholeFlags.toArray(new String[linkWholeFlags.size()]))));
  AbstractCxxSourceBuilder<CxxLibraryDescription.Arg> linkWholeBuilder=new CxxLibraryBuilder(target).setLinkWhole(true).setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(new TestSourcePath("foo.cpp"))));
  TargetGraph linkWholeGraph=TargetGraphFactory.newInstance(linkWholeBuilder.build());
  resolver=new BuildRuleResolver();
  CxxLibrary linkWhole=(CxxLibrary)linkWholeBuilder.setSrcs(ImmutableSortedSet.<SourceWithFlags>of(SourceWithFlags.of(new TestSourcePath("test.cpp")))).build(resolver,filesystem,linkWholeGraph);
  NativeLinkableInput linkWholeInput=linkWhole.getNativeLinkableInput(normalGraph,cxxPlatform,Linker.LinkableDepType.STATIC);
  assertThat(FluentIterable.from(linkWholeInput.getArgs()).transform(Arg.stringifyFunction()).toList(),Matchers.hasItems(linkWholeFlags.toArray(new String[linkWholeFlags.size()])));
}
