{
  BuildTarget location=BuildTargetFactory.newInstance("//:loc");
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar").withFlavors(CxxDescriptionEnhancer.SHARED_FLAVOR,CxxLibraryBuilder.createDefaultPlatform().getFlavor());
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  ExportFileBuilder locBuilder=ExportFileBuilder.newExportFileBuilder(location);
  locBuilder.setOut("somewhere.over.the.rainbow");
  CxxLibraryBuilder libBuilder=new CxxLibraryBuilder(target);
  libBuilder.setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(new PathSourcePath(filesystem,Paths.get("test.cpp")))));
  libBuilder.setPlatformLinkerFlags(PatternMatchedCollection.<ImmutableList<String>>builder().add(Pattern.compile(CxxLibraryBuilder.createDefaultPlatform().getFlavor().toString()),ImmutableList.of("-Wl,--version-script=$(location //:loc)")).build());
  TargetGraph targetGraph=TargetGraphFactory.newInstance(libBuilder.build(),locBuilder.build());
  ExportFile loc=(ExportFile)locBuilder.build(resolver,filesystem,targetGraph);
  CxxLink lib=(CxxLink)libBuilder.build(resolver,filesystem,targetGraph);
  assertThat(lib.getDeps(),hasItem(loc));
  assertThat(Arg.stringify(lib.getArgs()),hasItem(String.format("-Wl,--version-script=%s",Preconditions.checkNotNull(loc.getPathToOutput()).toAbsolutePath())));
  assertThat(Arg.stringify(lib.getArgs()),Matchers.not(hasItem(loc.getPathToOutput().toAbsolutePath().toString())));
}
