{
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  CxxLibraryBuilder libBuilder=new CxxLibraryBuilder(target);
  libBuilder.setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(new PathSourcePath(filesystem,Paths.get("test.cpp")))));
  TargetGraph targetGraph=TargetGraphFactory.newInstance(libBuilder.build());
  BuildRuleResolver resolver=new BuildRuleResolver(targetGraph,new DefaultTargetNodeToBuildRuleTransformer());
  CxxLibrary lib=(CxxLibrary)libBuilder.build(resolver,filesystem,targetGraph);
  NativeLinkableInput nativeLinkableInput=lib.getNativeLinkableInput(CxxLibraryBuilder.createDefaultPlatform(),Linker.LinkableDepType.STATIC_PIC);
  Arg firstArg=nativeLinkableInput.getArgs().get(0);
  assertThat(firstArg,instanceOf(FileListableLinkerInputArg.class));
  ImmutableCollection<BuildRule> deps=firstArg.getDeps(new SourcePathResolver(resolver));
  assertThat(deps.size(),is(1));
  BuildRule buildRule=deps.asList().get(0);
  assertThat(buildRule.getBuildTarget().getFlavors(),hasItem(CxxDescriptionEnhancer.STATIC_PIC_FLAVOR));
}
