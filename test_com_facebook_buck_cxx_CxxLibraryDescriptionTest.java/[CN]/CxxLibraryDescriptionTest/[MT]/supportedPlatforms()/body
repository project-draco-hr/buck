{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  CxxLibraryBuilder cxxLibraryBuilder=(CxxLibraryBuilder)new CxxLibraryBuilder(target).setSrcs(ImmutableList.of(SourceWithFlags.of(new TestSourcePath("test.c"))));
  CxxLibrary cxxLibrary=(CxxLibrary)cxxLibraryBuilder.build(new BuildRuleResolver(),filesystem,TargetGraphFactory.newInstance(cxxLibraryBuilder.build()));
  assertThat(cxxLibrary.getSharedLibraries(CxxPlatformUtils.DEFAULT_PLATFORM).entrySet(),Matchers.not(Matchers.empty()));
  assertThat(cxxLibrary.getPythonPackageComponents(CxxPlatformUtils.DEFAULT_PLATFORM).getNativeLibraries().entrySet(),Matchers.not(Matchers.empty()));
  assertThat(cxxLibrary.getNativeLinkableInput(CxxPlatformUtils.DEFAULT_PLATFORM,Linker.LinkableDepType.SHARED).getArgs(),Matchers.not(Matchers.empty()));
  cxxLibraryBuilder.setSupportedPlatformsRegex(Pattern.compile("nothing"));
  cxxLibrary=(CxxLibrary)cxxLibraryBuilder.build(new BuildRuleResolver(),filesystem,TargetGraphFactory.newInstance(cxxLibraryBuilder.build()));
  assertThat(cxxLibrary.getSharedLibraries(CxxPlatformUtils.DEFAULT_PLATFORM).entrySet(),Matchers.empty());
  assertThat(cxxLibrary.getPythonPackageComponents(CxxPlatformUtils.DEFAULT_PLATFORM).getNativeLibraries().entrySet(),Matchers.empty());
  assertThat(cxxLibrary.getNativeLinkableInput(CxxPlatformUtils.DEFAULT_PLATFORM,Linker.LinkableDepType.SHARED).getArgs(),Matchers.empty());
}
