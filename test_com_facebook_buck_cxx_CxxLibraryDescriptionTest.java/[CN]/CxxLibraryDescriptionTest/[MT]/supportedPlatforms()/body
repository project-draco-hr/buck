{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  CxxLibraryBuilder cxxLibraryBuilder=new CxxLibraryBuilder(target).setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("test.c"))));
  TargetGraph targetGraph1=TargetGraphFactory.newInstance(cxxLibraryBuilder.build());
  BuildRuleResolver resolver1=new BuildRuleResolver(targetGraph1,new BuildTargetNodeToBuildRuleTransformer());
  CxxLibrary cxxLibrary=(CxxLibrary)cxxLibraryBuilder.build(resolver1,filesystem,targetGraph1);
  assertThat(cxxLibrary.getSharedLibraries(CxxPlatformUtils.DEFAULT_PLATFORM).entrySet(),Matchers.not(empty()));
  assertThat(cxxLibrary.getNativeLinkableInput(CxxPlatformUtils.DEFAULT_PLATFORM,Linker.LinkableDepType.SHARED).getArgs(),Matchers.not(empty()));
  cxxLibraryBuilder.setSupportedPlatformsRegex(Pattern.compile("nothing"));
  TargetGraph targetGraph2=TargetGraphFactory.newInstance(cxxLibraryBuilder.build());
  BuildRuleResolver resolver2=new BuildRuleResolver(targetGraph2,new BuildTargetNodeToBuildRuleTransformer());
  cxxLibrary=(CxxLibrary)cxxLibraryBuilder.build(resolver2,filesystem,targetGraph2);
  assertThat(cxxLibrary.getSharedLibraries(CxxPlatformUtils.DEFAULT_PLATFORM).entrySet(),empty());
  assertThat(cxxLibrary.getNativeLinkableInput(CxxPlatformUtils.DEFAULT_PLATFORM,Linker.LinkableDepType.SHARED).getArgs(),empty());
}
