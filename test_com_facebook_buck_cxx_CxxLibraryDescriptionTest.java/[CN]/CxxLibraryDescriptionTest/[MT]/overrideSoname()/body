{
  BuildRuleResolver resolver=new BuildRuleResolver();
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  CxxPlatform cxxPlatform=CxxLibraryBuilder.createDefaultPlatform();
  String soname="test_soname";
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  CxxLibraryBuilder ruleBuilder=new CxxLibraryBuilder(target).setSoname(soname);
  CxxLibrary rule=(CxxLibrary)ruleBuilder.build(resolver,filesystem,TargetGraphFactory.newInstance(ruleBuilder.build()));
  Linker linker=cxxPlatform.getLd();
  NativeLinkableInput input=rule.getNativeLinkableInput(cxxPlatform,Linker.LinkableDepType.SHARED);
  ImmutableList<SourcePath> inputs=ImmutableList.copyOf(input.getInputs());
  assertEquals(inputs.size(),1);
  SourcePath sourcePath=inputs.get(0);
  assertTrue(sourcePath instanceof BuildTargetSourcePath);
  BuildRule buildRule=new SourcePathResolver(resolver).getRule(sourcePath).get();
  assertTrue(buildRule instanceof CxxLink);
  CxxLink cxxLink=(CxxLink)buildRule;
  ImmutableList<String> args=cxxLink.getArgs();
  assertNotEquals(-1,Collections.indexOfSubList(args,ImmutableList.copyOf(CxxLinkableEnhancer.iXlinker(linker.soname(soname)))));
}
