{
  BuildRuleResolver resolver=new BuildRuleResolver();
  String soname="test_soname";
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  DefaultCxxPlatform cxxBuckConfig=new DefaultCxxPlatform(new FakeBuckConfig());
  CxxLibraryDescription description=new CxxLibraryDescription(cxxBuckConfig);
  CxxLibraryDescription.Arg arg=description.createEmptyConstructorArg();
  arg.soname=Optional.of(soname);
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).setTargetGraph(createTargetGraph(target,description,arg)).build();
  CxxLibrary rule=(CxxLibrary)description.createBuildRule(params,resolver,arg);
  Linker linker=cxxBuckConfig.getLd();
  NativeLinkableInput input=rule.getNativeLinkableInput(linker,NativeLinkable.Type.SHARED);
  ImmutableList<SourcePath> inputs=input.getInputs();
  assertEquals(inputs.size(),1);
  SourcePath sourcePath=inputs.get(0);
  assertTrue(sourcePath instanceof BuildTargetSourcePath);
  BuildRule buildRule=new SourcePathResolver(resolver).getRule(sourcePath).get();
  assertTrue(buildRule instanceof CxxLink);
  CxxLink cxxLink=(CxxLink)buildRule;
  ImmutableList<String> args=cxxLink.getArgs();
  assertNotEquals(-1,Collections.indexOfSubList(args,ImmutableList.copyOf(CxxLinkableEnhancer.iXlinker(linker.soname(soname)))));
}
