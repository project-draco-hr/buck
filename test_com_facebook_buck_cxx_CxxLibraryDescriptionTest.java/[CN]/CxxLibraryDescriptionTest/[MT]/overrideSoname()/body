{
  BuildRuleResolver resolver=new BuildRuleResolver();
  String soname="test_soname";
  CxxLibraryDescription.Arg arg=new CxxLibraryDescription.Arg();
  arg.deps=Optional.absent();
  arg.srcs=Optional.absent();
  arg.headers=Optional.absent();
  arg.compilerFlags=Optional.absent();
  arg.propagatedPpFlags=Optional.absent();
  arg.preprocessorFlags=Optional.absent();
  arg.linkWhole=Optional.absent();
  arg.lexSrcs=Optional.absent();
  arg.yaccSrcs=Optional.absent();
  arg.headerNamespace=Optional.absent();
  arg.soname=Optional.of(soname);
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).build();
  DefaultCxxPlatform cxxBuckConfig=new DefaultCxxPlatform(new FakeBuckConfig());
  CxxLibraryDescription description=new CxxLibraryDescription(cxxBuckConfig);
  CxxLibrary rule=description.createBuildRule(params,resolver,arg);
  Linker linker=cxxBuckConfig.getLd();
  NativeLinkableInput input=rule.getNativeLinkableInput(linker,NativeLinkable.Type.SHARED);
  ImmutableList<SourcePath> inputs=input.getInputs();
  assertEquals(inputs.size(),1);
  SourcePath sourcePath=inputs.get(0);
  assertTrue(sourcePath instanceof BuildRuleSourcePath);
  BuildRuleSourcePath buildRuleSourcePath=(BuildRuleSourcePath)sourcePath;
  BuildRule buildRule=buildRuleSourcePath.getRule();
  assertTrue(buildRule instanceof CxxLink);
  CxxLink cxxLink=(CxxLink)buildRule;
  ImmutableList<String> args=cxxLink.getArgs();
  assertNotEquals(-1,Collections.indexOfSubList(args,ImmutableList.copyOf(CxxLinkableEnhancer.iXlinker(linker.soname(soname)))));
}
