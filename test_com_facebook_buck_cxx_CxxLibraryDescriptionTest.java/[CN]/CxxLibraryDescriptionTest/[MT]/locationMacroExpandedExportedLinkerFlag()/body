{
  BuildTarget location=BuildTargetFactory.newInstance("//:loc");
  BuildTarget target=BuildTargetFactory.newInstance("//foo:bar");
  BuildRuleResolver resolver=new BuildRuleResolver();
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  ExportFileBuilder locBuilder=ExportFileBuilder.newExportFileBuilder(location);
  locBuilder.setOut("somewhere.over.the.rainbow");
  CxxLibraryBuilder libBuilder=new CxxLibraryBuilder(target);
  libBuilder.setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(new PathSourcePath(filesystem,Paths.get("test.cpp")))));
  libBuilder.setExportedLinkerFlags(ImmutableList.of("-Wl,--version-script=$(location //:loc)"));
  TargetGraph targetGraph=TargetGraphFactory.newInstance(libBuilder.build(),locBuilder.build());
  ExportFile loc=(ExportFile)locBuilder.build(resolver,filesystem,targetGraph);
  CxxLibrary lib=(CxxLibrary)libBuilder.build(resolver,filesystem,targetGraph);
  NativeLinkableInput nativeLinkableInput=lib.getNativeLinkableInput(targetGraph,CxxLibraryBuilder.createDefaultPlatform(),Linker.LinkableDepType.SHARED);
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  assertThat(FluentIterable.from(nativeLinkableInput.getArgs()).transformAndConcat(Arg.getDepsFunction(pathResolver)).toSet(),Matchers.hasItem(loc));
  assertThat(FluentIterable.from(nativeLinkableInput.getArgs()).transform(Arg.stringifyFunction()).toList(),Matchers.hasItem(Matchers.containsString(Preconditions.checkNotNull(loc.getPathToOutput()).toString())));
}
