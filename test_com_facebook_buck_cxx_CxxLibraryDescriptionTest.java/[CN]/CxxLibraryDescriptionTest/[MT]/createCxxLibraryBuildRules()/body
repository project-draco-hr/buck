{
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem();
  CxxPlatform cxxPlatform=CxxLibraryBuilder.createDefaultPlatform();
  String sourceName="test/bar.cpp";
  String genHeaderName="test/foo.h";
  BuildTarget genHeaderTarget=BuildTargetFactory.newInstance("//:genHeader");
  GenruleBuilder genHeaderBuilder=GenruleBuilder.newGenruleBuilder(genHeaderTarget).setOut(genHeaderName);
  String genSourceName="test/foo.cpp";
  BuildTarget genSourceTarget=BuildTargetFactory.newInstance("//:genSource");
  GenruleBuilder genSourceBuilder=GenruleBuilder.newGenruleBuilder(genSourceTarget).setOut(genSourceName);
  BuildTarget depTarget=BuildTargetFactory.newInstance("//:dep");
  CxxLibraryBuilder depBuilder=new CxxLibraryBuilder(depTarget).setExportedHeaders(SourceList.ofUnnamedSources(ImmutableSortedSet.<SourcePath>of(new FakeSourcePath("blah.h")))).setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath("test.cpp"))));
  BuildTarget sharedLibraryDepTarget=BuildTarget.builder(depTarget).addFlavors(CxxDescriptionEnhancer.SHARED_FLAVOR).addFlavors(cxxPlatform.getFlavor()).build();
  BuildTarget headerSymlinkTreeTarget=BuildTarget.builder(depTarget).addFlavors(CxxDescriptionEnhancer.EXPORTED_HEADER_SYMLINK_TREE_FLAVOR).addFlavors(cxxPlatform.getFlavor()).build();
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  CxxSourceRuleFactory cxxSourceRuleFactoryPDC=CxxSourceRuleFactoryHelper.of(filesystem.getRootPath(),target,cxxPlatform,CxxSourceRuleFactory.PicType.PDC);
  CxxLibraryBuilder cxxLibraryBuilder=new CxxLibraryBuilder(target).setExportedHeaders(ImmutableSortedMap.<String,SourcePath>of(genHeaderName,new BuildTargetSourcePath(genHeaderTarget))).setSrcs(ImmutableSortedSet.of(SourceWithFlags.of(new FakeSourcePath(sourceName)),SourceWithFlags.of(new BuildTargetSourcePath(genSourceTarget)))).setFrameworks(ImmutableSortedSet.of(FrameworkPath.ofSourcePath(new FakeSourcePath("/some/framework/path/s.dylib")),FrameworkPath.ofSourcePath(new FakeSourcePath("/another/framework/path/a.dylib")))).setDeps(ImmutableSortedSet.of(depTarget));
  TargetGraph targetGraph=TargetGraphFactory.newInstance(genHeaderBuilder.build(),genSourceBuilder.build(),depBuilder.build(),cxxLibraryBuilder.build());
  BuildRuleResolver resolver=new BuildRuleResolver(targetGraph,new DefaultTargetNodeToBuildRuleTransformer());
  genHeaderBuilder.build(resolver,filesystem,targetGraph);
  genSourceBuilder.build(resolver,filesystem,targetGraph);
  depBuilder.build(resolver,filesystem,targetGraph);
  CxxLibrary rule=(CxxLibrary)cxxLibraryBuilder.build(resolver,filesystem,targetGraph);
  CxxPreprocessorInput publicInput=rule.getCxxPreprocessorInput(cxxPlatform,HeaderVisibility.PUBLIC);
  assertThat(publicInput.getFrameworks(),Matchers.containsInAnyOrder(FrameworkPath.ofSourcePath(new PathSourcePath(filesystem,Paths.get("/some/framework/path/s.dylib"))),FrameworkPath.ofSourcePath(new PathSourcePath(filesystem,Paths.get("/another/framework/path/a.dylib")))));
  CxxSymlinkTreeHeaders publicHeaders=(CxxSymlinkTreeHeaders)publicInput.getIncludes().get(0);
  assertThat(publicHeaders.getIncludeType(),Matchers.equalTo(CxxPreprocessables.IncludeType.LOCAL));
  assertThat(publicHeaders.getNameToPathMap(),Matchers.equalTo(ImmutableMap.<Path,SourcePath>of(Paths.get(genHeaderName),new BuildTargetSourcePath(genHeaderTarget))));
  assertThat(publicHeaders.getHeaderMap(),Matchers.equalTo(getHeaderMaps(target,resolver,cxxPlatform,HeaderVisibility.PUBLIC)));
  rule.getNativeLinkableInput(cxxPlatform,Linker.LinkableDepType.STATIC);
  BuildRule staticRule=resolver.getRule(CxxDescriptionEnhancer.createStaticLibraryBuildTarget(target,cxxPlatform.getFlavor(),CxxSourceRuleFactory.PicType.PDC));
  assertNotNull(staticRule);
  assertEquals(ImmutableSet.of(cxxSourceRuleFactoryPDC.createCompileBuildTarget("test/bar.cpp"),cxxSourceRuleFactoryPDC.createCompileBuildTarget(genSourceName)),FluentIterable.from(staticRule.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule staticPreprocessRule1=resolver.getRule(cxxSourceRuleFactoryPDC.createPreprocessBuildTarget("test/bar.cpp",CxxSource.Type.CXX));
  assertNotNull(staticPreprocessRule1);
  assertEquals(ImmutableSet.of(genHeaderTarget,headerSymlinkTreeTarget,CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target,cxxPlatform.getFlavor(),HeaderVisibility.PRIVATE),CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target,cxxPlatform.getFlavor(),HeaderVisibility.PUBLIC)),FluentIterable.from(staticPreprocessRule1.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule staticCompileRule1=resolver.getRule(cxxSourceRuleFactoryPDC.createCompileBuildTarget("test/bar.cpp"));
  assertNotNull(staticCompileRule1);
  assertEquals(ImmutableSet.of(staticPreprocessRule1.getBuildTarget()),FluentIterable.from(staticCompileRule1.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule staticPreprocessRule2=resolver.getRule(cxxSourceRuleFactoryPDC.createPreprocessBuildTarget(genSourceName,CxxSource.Type.CXX));
  assertNotNull(staticPreprocessRule2);
  assertEquals(ImmutableSet.of(genHeaderTarget,genSourceTarget,headerSymlinkTreeTarget,CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target,cxxPlatform.getFlavor(),HeaderVisibility.PRIVATE),CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target,cxxPlatform.getFlavor(),HeaderVisibility.PUBLIC)),FluentIterable.from(staticPreprocessRule2.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule staticCompileRule2=resolver.getRule(cxxSourceRuleFactoryPDC.createCompileBuildTarget(genSourceName));
  assertNotNull(staticCompileRule2);
  assertEquals(ImmutableSet.of(staticPreprocessRule2.getBuildTarget()),FluentIterable.from(staticCompileRule2.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  CxxSourceRuleFactory cxxSourceRuleFactoryPIC=CxxSourceRuleFactoryHelper.of(filesystem.getRootPath(),target,cxxPlatform,CxxSourceRuleFactory.PicType.PIC);
  rule.getNativeLinkableInput(cxxPlatform,Linker.LinkableDepType.SHARED);
  BuildRule sharedRule=resolver.getRule(CxxDescriptionEnhancer.createSharedLibraryBuildTarget(target,cxxPlatform.getFlavor()));
  assertNotNull(sharedRule);
  assertEquals(ImmutableSet.of(sharedLibraryDepTarget,cxxSourceRuleFactoryPIC.createCompileBuildTarget("test/bar.cpp"),cxxSourceRuleFactoryPIC.createCompileBuildTarget(genSourceName)),FluentIterable.from(sharedRule.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule sharedPreprocessRule1=resolver.getRule(cxxSourceRuleFactoryPIC.createPreprocessBuildTarget("test/bar.cpp",CxxSource.Type.CXX));
  assertNotNull(sharedPreprocessRule1);
  assertEquals(ImmutableSet.of(genHeaderTarget,headerSymlinkTreeTarget,CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target,cxxPlatform.getFlavor(),HeaderVisibility.PRIVATE),CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target,cxxPlatform.getFlavor(),HeaderVisibility.PUBLIC)),FluentIterable.from(sharedPreprocessRule1.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule sharedCompileRule1=resolver.getRule(cxxSourceRuleFactoryPIC.createCompileBuildTarget("test/bar.cpp"));
  assertNotNull(sharedCompileRule1);
  assertEquals(ImmutableSet.of(sharedPreprocessRule1.getBuildTarget()),FluentIterable.from(sharedCompileRule1.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule sharedPreprocessRule2=resolver.getRule(cxxSourceRuleFactoryPIC.createPreprocessBuildTarget(genSourceName,CxxSource.Type.CXX));
  assertNotNull(sharedPreprocessRule2);
  assertEquals(ImmutableSet.of(genHeaderTarget,genSourceTarget,headerSymlinkTreeTarget,CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target,cxxPlatform.getFlavor(),HeaderVisibility.PRIVATE),CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(target,cxxPlatform.getFlavor(),HeaderVisibility.PUBLIC)),FluentIterable.from(sharedPreprocessRule2.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
  BuildRule sharedCompileRule2=resolver.getRule(cxxSourceRuleFactoryPIC.createCompileBuildTarget(genSourceName));
  assertNotNull(sharedCompileRule2);
  assertEquals(ImmutableSet.of(sharedPreprocessRule2.getBuildTarget()),FluentIterable.from(sharedCompileRule2.getDeps()).transform(HasBuildTarget.TO_TARGET).toSet());
}
