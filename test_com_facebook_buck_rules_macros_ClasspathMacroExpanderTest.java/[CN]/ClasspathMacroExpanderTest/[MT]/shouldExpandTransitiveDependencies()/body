{
  BuildRuleResolver ruleResolver=new BuildRuleResolver(TargetGraph.EMPTY,new DefaultTargetNodeToBuildRuleTransformer());
  BuildRule dep=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//exciting:dep")).addSrc(Paths.get("Dep.java")).build(ruleResolver);
  BuildRule rule=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//exciting:target")).addSrc(Paths.get("Other.java")).addDep(dep.getBuildTarget()).build(ruleResolver);
  BuildTarget forTarget=BuildTargetFactory.newInstance("//:rule");
  ImmutableList<BuildRule> deps=expander.extractBuildTimeDeps(forTarget,createCellRoots(filesystem),ruleResolver,rule.getBuildTarget().toString());
  assertThat(deps,Matchers.containsInAnyOrder(rule,dep));
}
