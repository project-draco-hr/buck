{
  IjModuleFactory factory=new IjModuleFactory();
  Path moduleBasePath=Paths.get("java/com/example");
  BuildTarget buildTargetGuava=BuildTargetFactory.newInstance("//third-party:guava");
  BuildTarget buildTargetHamcrest=BuildTargetFactory.newInstance("//third-party:hamcrest");
  BuildTarget buildTargetJunit=BuildTargetFactory.newInstance("//third-party:junit");
  TargetNode<?> javaLibBase=JavaLibraryBuilder.createBuilder(BuildTargetFactory.newInstance("//java/com/example/base:base")).addSrc(moduleBasePath.resolve("base/File.java")).addDep(buildTargetGuava).build();
  TargetNode<?> javaTestBase=JavaTestBuilder.createBuilder(BuildTargetFactory.newInstance("//java/com/example/base:test")).addSrc(moduleBasePath.resolve("base/TestFile.java")).addSrc(moduleBasePath.resolve("test/TestFile.java")).addDep(buildTargetJunit).addDep(buildTargetGuava).build();
  TargetNode<?> javaTest=JavaTestBuilder.createBuilder(BuildTargetFactory.newInstance("//java/com/example/test:test")).addSrc(moduleBasePath.resolve("test/TestFile2.java")).addDep(javaLibBase.getBuildTarget()).addDep(buildTargetJunit).addDep(buildTargetHamcrest).build();
  IjModule module=factory.createModule(moduleBasePath,ImmutableSet.of(javaLibBase,javaTestBase,javaTest));
  assertEquals(ImmutableMap.of(buildTargetGuava,IjModuleGraph.DependencyType.PROD,buildTargetJunit,IjModuleGraph.DependencyType.PROD,buildTargetHamcrest,IjModuleGraph.DependencyType.TEST),module.getDependencies());
}
