{
  if (!isValidVersionString(a)) {
    throw new RuntimeException("Invalid version string: " + a);
  }
  if (!isValidVersionString(b)) {
    throw new RuntimeException("Invalid version string: " + b);
  }
  String cleanedA=IGNORED_FIELDS_PATTERN.matcher(a).replaceAll("");
  String cleanedB=IGNORED_FIELDS_PATTERN.matcher(b).replaceAll("");
  String[] partsA=DELIMITER_PATTERN.split(cleanedA);
  String[] partsB=DELIMITER_PATTERN.split(cleanedB);
  Iterator<Integer> valuesA=partsToValues(partsA).iterator();
  Iterator<Integer> valuesB=partsToValues(partsB).iterator();
  while (valuesA.hasNext()) {
    if (!valuesB.hasNext()) {
      return 1;
    }
    int comp=valuesA.next().compareTo(valuesB.next());
    if (comp != 0) {
      return comp;
    }
  }
  if (valuesB.hasNext()) {
    return -1;
  }
  boolean isRcA=cleanedA.matches(RC_DETECTION_PATTERN);
  boolean isRcB=cleanedB.matches(RC_DETECTION_PATTERN);
  if (isRcA && isRcB) {
    int rcVersionA=Integer.parseInt(RC_DELIMITER_PATTERN.matcher(cleanedA).replaceAll(""));
    int rcVersionB=Integer.parseInt(RC_DELIMITER_PATTERN.matcher(cleanedB).replaceAll(""));
    if (rcVersionA == rcVersionB) {
      return 0;
    }
    return (rcVersionA > rcVersionB) ? 1 : -1;
  }
 else   if (isRcA) {
    return -1;
  }
 else   if (isRcB) {
    return 1;
  }
  return 0;
}
