{
  DefaultDependencyFileRuleKeyBuilderFactory depFilefactory=new DefaultDependencyFileRuleKeyBuilderFactory(fileHashCache,pathResolver,NOOP_RULE_KEY_FACTORY);
  final Genrule genrule=(Genrule)GenruleBuilder.newGenruleBuilder(BuildTargetFactory.newInstance("//:dep")).setOut("input").build(resolver,filesystem);
  final Path input=Preconditions.checkNotNull(genrule.getPathToOutput());
  filesystem.writeContentsToPath("contents",input);
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).setProjectFilesystem(filesystem).build();
  final Path output=Paths.get("output");
  BuildRule rule=new DepFileBuildRule(params,pathResolver){
    @AddToRuleKey private final SourcePath path=new BuildTargetSourcePath(genrule.getBuildTarget());
    @Override public ImmutableList<Step> getBuildSteps(    BuildContext context,    BuildableContext buildableContext){
      return ImmutableList.<Step>of(new WriteFileStep(filesystem,"",output,false));
    }
    @Override public ImmutableList<SourcePath> getInputsAfterBuildingLocally(){
      return ImmutableList.<SourcePath>of(new PathSourcePath(filesystem,input));
    }
    @Override public Path getPathToOutput(){
      return output;
    }
  }
;
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(MoreExecutors.newDirectExecutorService(),fileHashCache,CachingBuildEngine.BuildMode.SHALLOW,CachingBuildEngine.DependencySchedulingOrder.RANDOM,CachingBuildEngine.DepFiles.CACHE,1L,pathResolver,Functions.constant(new CachingBuildEngine.RuleKeyFactories(ruleKeyBuilderFactory,ruleKeyBuilderFactory,ruleKeyBuilderFactory,depFilefactory)));
  Manifest manifest=Manifest.fromMap(ImmutableMap.of(new RuleKey("abcd"),ImmutableMap.of("some/path.h",HashCode.fromInt(12))));
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  try (GZIPOutputStream outputStream=new GZIPOutputStream(byteArrayOutputStream)){
    manifest.serialize(outputStream);
  }
   cache.store(ImmutableSet.of(cachingBuildEngine.getManifestRuleKey(rule)),ImmutableMap.<String,String>of(),byteArrayOutputStream.toByteArray());
  BuildResult result=cachingBuildEngine.build(buildContext,rule).get();
  assertThat(getSuccess(result),equalTo(BuildRuleSuccessType.BUILT_LOCALLY));
  OnDiskBuildInfo onDiskBuildInfo=buildContext.createOnDiskBuildInfoFor(target,filesystem);
  RuleKey depFileRuleKey=onDiskBuildInfo.getRuleKey(BuildInfo.METADATA_KEY_FOR_DEP_FILE_RULE_KEY).get();
  Path fetchedManifest=tmp.newFile("manifest").toPath();
  CacheResult cacheResult=cache.fetch(cachingBuildEngine.getManifestRuleKey(rule),LazyPath.ofInstance(fetchedManifest));
  assertThat(cacheResult.getType(),equalTo(CacheResultType.HIT));
  manifest=loadManifest(fetchedManifest);
  assertThat(manifest.toMap(),equalTo(ImmutableMap.of(depFileRuleKey,ImmutableMap.of(input.toString(),fileHashCache.get(input)))));
}
