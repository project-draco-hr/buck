{
  DefaultDependencyFileRuleKeyBuilderFactory depFilefactory=new DefaultDependencyFileRuleKeyBuilderFactory(fileHashCache,pathResolver,NOOP_RULE_KEY_FACTORY);
  final Genrule genrule=(Genrule)GenruleBuilder.newGenruleBuilder(BuildTargetFactory.newInstance("//:dep")).setOut("input").build(resolver,filesystem);
  final Path input=Preconditions.checkNotNull(genrule.getPathToOutput());
  filesystem.writeContentsToPath("contents",input);
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).setProjectFilesystem(filesystem).build();
  final Path output=Paths.get("output");
  BuildRule rule=new DepFileBuildRule(params,pathResolver){
    @AddToRuleKey private final SourcePath path=new BuildTargetSourcePath(genrule.getBuildTarget());
    @Override public ImmutableList<Step> getBuildSteps(    BuildContext context,    BuildableContext buildableContext){
      return ImmutableList.<Step>of(new WriteFileStep(filesystem,"",output,false));
    }
    @Override public ImmutableList<SourcePath> getInputsAfterBuildingLocally(){
      return ImmutableList.<SourcePath>of(new PathSourcePath(filesystem,input));
    }
    @Override public Path getPathToOutput(){
      return output;
    }
  }
;
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(MoreExecutors.newDirectExecutorService(),fileHashCache,CachingBuildEngine.BuildMode.SHALLOW,CachingBuildEngine.DependencySchedulingOrder.RANDOM,CachingBuildEngine.DepFiles.CACHE,256L,pathResolver,Functions.constant(new CachingBuildEngine.RuleKeyFactories(ruleKeyBuilderFactory,ruleKeyBuilderFactory,ruleKeyBuilderFactory,depFilefactory)));
  RuleKey artifactKey=new RuleKey("bbbb");
  Manifest manifest=new Manifest();
  manifest.addEntry(fileHashCache,artifactKey,pathResolver,ImmutableSet.<SourcePath>of(new PathSourcePath(filesystem,input)),ImmutableSet.<SourcePath>of(new PathSourcePath(filesystem,input)));
  ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  try (GZIPOutputStream outputStream=new GZIPOutputStream(byteArrayOutputStream)){
    manifest.serialize(outputStream);
  }
   cache.store(ImmutableSet.of(cachingBuildEngine.getManifestRuleKey(rule)),ImmutableMap.<String,String>of(),byteArrayOutputStream.toByteArray());
  Path artifact=tmp.newFile("artifact.zip").toPath();
  writeEntriesToZip(artifact,ImmutableMap.of(BuildInfo.getPathToMetadataDirectory(target).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS),MAPPER.writeValueAsString(ImmutableList.of(output.toString())),output,"stuff"));
  cache.store(ImmutableSet.of(artifactKey),ImmutableMap.<String,String>of(),BorrowablePath.notBorrowablePath(artifact));
  BuildResult result=cachingBuildEngine.build(buildContext,rule).get();
  assertThat(getSuccess(result),equalTo(BuildRuleSuccessType.FETCHED_FROM_CACHE_MANIFEST_BASED));
}
