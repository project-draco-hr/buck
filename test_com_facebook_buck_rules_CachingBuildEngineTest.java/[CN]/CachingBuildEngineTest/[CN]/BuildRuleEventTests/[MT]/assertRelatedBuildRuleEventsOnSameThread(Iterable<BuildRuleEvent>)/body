{
  Map<Long,List<BuildRuleEvent>> grouped=new HashMap<>();
  for (  BuildRuleEvent event : events) {
    if (!grouped.containsKey(event.getThreadId())) {
      grouped.put(event.getThreadId(),new ArrayList<BuildRuleEvent>());
    }
    grouped.get(event.getThreadId()).add(event);
  }
  for (  List<BuildRuleEvent> queue : grouped.values()) {
    Collections.sort(queue,new Comparator<BuildRuleEvent>(){
      @Override public int compare(      BuildRuleEvent o1,      BuildRuleEvent o2){
        return Long.compare(o1.getNanoTime(),o2.getNanoTime());
      }
    }
);
    ImmutableList<String> queueDescription=FluentIterable.from(queue).transform(new Function<BuildRuleEvent,String>(){
      @Override public String apply(      BuildRuleEvent event){
        return String.format("%s@%s",event,event.getNanoTime());
      }
    }
).toList();
    Iterator<BuildRuleEvent> itr=queue.iterator();
    while (itr.hasNext()) {
      BuildRuleEvent event1=itr.next();
      BuildRuleEvent event2=itr.next();
      assertThat(String.format("Two consecutive events (%s,%s) should have the same BuildTarget. (%s)",event1,event2,queueDescription),event1.getBuildRule().getBuildTarget(),equalTo(event2.getBuildRule().getBuildTarget()));
      assertThat(String.format("Two consecutive events (%s,%s) should be suspend/resume or resume/suspend. (%s)",event1,event2,queueDescription),event1.isRuleRunningAfterThisEvent(),equalTo(!event2.isRuleRunningAfterThisEvent()));
    }
  }
}
