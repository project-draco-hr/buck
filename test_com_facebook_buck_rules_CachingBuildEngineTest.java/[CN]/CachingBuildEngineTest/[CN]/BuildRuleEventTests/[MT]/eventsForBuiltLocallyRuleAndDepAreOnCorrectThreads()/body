{
  Clock clock=new IncrementingFakeClock();
  BuckEventBus buckEventBus=BuckEventBusFactory.newInstance(clock);
  FakeBuckEventListener listener=new FakeBuckEventListener();
  buckEventBus.register(listener);
  BuildRule dep=new EmptyBuildRule(new FakeBuildRuleParamsBuilder(BuildTargetFactory.newInstance("//:dep")).setProjectFilesystem(filesystem).build(),pathResolver);
  BuildRule rule=new EmptyBuildRule(new FakeBuildRuleParamsBuilder(BuildTargetFactory.newInstance("//:rule")).setDeclaredDeps(ImmutableSortedSet.of(dep)).setProjectFilesystem(filesystem).build(),pathResolver);
  CachingBuildEngine cachingBuildEngine=cachingBuildEngineFactory().setExecutorService(SERVICE).setRuleKeyFactoriesFunction(Functions.constant(new CachingBuildEngine.RuleKeyFactories(NOOP_RULE_KEY_FACTORY,NOOP_INPUT_BASED_RULE_KEY_FACTORY,NOOP_RULE_KEY_FACTORY,NOOP_DEP_FILE_RULE_KEY_FACTORY))).build();
  BuildContext context=FakeBuildContext.newBuilder().setEventBus(buckEventBus).setJavaPackageFinder(new FakeJavaPackageFinder()).setActionGraph(new ActionGraph(ImmutableList.<BuildRule>of())).build();
  BuildResult result=cachingBuildEngine.build(context,rule).get();
  assertEquals(BuildRuleSuccessType.BUILT_LOCALLY,result.getSuccess());
  assertRelatedBuildRuleEventsOnSameThread(FluentIterable.from(listener.getEvents()).filter(BuildRuleEvent.class));
}
