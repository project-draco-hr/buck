{
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).setProjectFilesystem(filesystem).build();
  FakeAbiRuleBuildRule rule=new FakeAbiRuleBuildRule(params,pathResolver);
  final AbiRuleKeyBuilderFactory abiRuleKeyBuilderFactory=new AbiRuleKeyBuilderFactory(0,fileHashCache,pathResolver,NOOP_RULE_KEY_FACTORY);
  CachingBuildEngine cachingBuildEngine=cachingBuildEngineFactory().setRuleKeyFactoriesFunction(Functions.constant(new CachingBuildEngine.RuleKeyFactories(NOOP_RULE_KEY_FACTORY,NOOP_INPUT_BASED_RULE_KEY_FACTORY,abiRuleKeyBuilderFactory,NOOP_DEP_FILE_RULE_KEY_FACTORY,NOOP_INPUT_COUNTING_RULE_KEY_FACTORY))).build();
  filesystem.writeContentsToPath(new StringBuilder(abiRuleKeyBuilderFactory.build(rule).toString()).reverse().toString(),BuildInfo.getPathToMetadataDirectory(target,filesystem).resolve(BuildInfo.METADATA_KEY_FOR_ABI_RULE_KEY));
  filesystem.writeContentsToPath(MAPPER.writeValueAsString(ImmutableList.of()),BuildInfo.getPathToMetadataDirectory(target,filesystem).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  BuildResult result=cachingBuildEngine.build(buildContext,rule).get();
  assertEquals(BuildRuleSuccessType.BUILT_LOCALLY,result.getSuccess());
}
