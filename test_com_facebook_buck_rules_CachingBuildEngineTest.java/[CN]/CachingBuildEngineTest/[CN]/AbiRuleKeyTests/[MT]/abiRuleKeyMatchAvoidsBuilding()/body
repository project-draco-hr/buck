{
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).setProjectFilesystem(filesystem).build();
  FakeAbiRuleBuildRule rule=new FakeAbiRuleBuildRule(params,pathResolver);
  final AbiRuleKeyBuilderFactory abiRuleKeyBuilderFactory=new AbiRuleKeyBuilderFactory(fileHashCache,pathResolver,ruleKeyBuilderFactory);
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(toWeighted(MoreExecutors.newDirectExecutorService()),fileHashCache,CachingBuildEngine.BuildMode.SHALLOW,CachingBuildEngine.DependencySchedulingOrder.RANDOM,CachingBuildEngine.DepFiles.ENABLED,256L,Optional.<Long>absent(),pathResolver,Functions.constant(new CachingBuildEngine.RuleKeyFactories(ruleKeyBuilderFactory,NOOP_RULE_KEY_FACTORY,abiRuleKeyBuilderFactory,NOOP_DEP_FILE_RULE_KEY_FACTORY)));
  filesystem.writeContentsToPath(abiRuleKeyBuilderFactory.build(rule).toString(),BuildInfo.getPathToMetadataDirectory(target,filesystem).resolve(BuildInfo.METADATA_KEY_FOR_ABI_RULE_KEY));
  filesystem.writeContentsToPath(MAPPER.writeValueAsString(ImmutableList.of()),BuildInfo.getPathToMetadataDirectory(target,filesystem).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  BuildResult result=cachingBuildEngine.build(buildContext,rule).get();
  assertEquals(BuildRuleSuccessType.MATCHING_ABI_RULE_KEY,result.getSuccess());
}
