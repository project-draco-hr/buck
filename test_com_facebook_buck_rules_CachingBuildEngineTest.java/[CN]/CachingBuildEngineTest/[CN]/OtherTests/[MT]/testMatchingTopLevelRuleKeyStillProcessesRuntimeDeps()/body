{
  BuckEventBus buckEventBus=BuckEventBusFactory.newInstance();
  FakeBuckEventListener listener=new FakeBuckEventListener();
  buckEventBus.register(listener);
  BuildRuleParams ruleParams=new FakeBuildRuleParamsBuilder("//:transitive_dep").setProjectFilesystem(filesystem).build();
  FakeBuildRule transitiveRuntimeDep=new FakeBuildRule(ruleParams,pathResolver);
  RuleKey transitiveRuntimeDepKey=ruleKeyBuilderFactory.build(transitiveRuntimeDep);
  filesystem.writeContentsToPath(transitiveRuntimeDepKey.toString(),BuildInfo.getPathToMetadataDirectory(transitiveRuntimeDep.getBuildTarget(),filesystem).resolve(BuildInfo.METADATA_KEY_FOR_RULE_KEY));
  filesystem.writeContentsToPath(MAPPER.writeValueAsString(ImmutableList.of()),BuildInfo.getPathToMetadataDirectory(transitiveRuntimeDep.getBuildTarget(),filesystem).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  FakeBuildRule runtimeDep=new FakeHasRuntimeDeps(BuildTargetFactory.newInstance("//:runtime_dep"),filesystem,pathResolver,transitiveRuntimeDep);
  RuleKey runtimeDepKey=ruleKeyBuilderFactory.build(runtimeDep);
  filesystem.writeContentsToPath(runtimeDepKey.toString(),BuildInfo.getPathToMetadataDirectory(runtimeDep.getBuildTarget(),filesystem).resolve(BuildInfo.METADATA_KEY_FOR_RULE_KEY));
  filesystem.writeContentsToPath(MAPPER.writeValueAsString(ImmutableList.of()),BuildInfo.getPathToMetadataDirectory(runtimeDep.getBuildTarget(),filesystem).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  FakeBuildRule ruleToTest=new FakeHasRuntimeDeps(BUILD_TARGET,filesystem,pathResolver,runtimeDep);
  RuleKey ruleToTestKey=ruleKeyBuilderFactory.build(ruleToTest);
  filesystem.writeContentsToPath(ruleToTestKey.toString(),BuildInfo.getPathToMetadataDirectory(ruleToTest.getBuildTarget(),filesystem).resolve(BuildInfo.METADATA_KEY_FOR_RULE_KEY));
  filesystem.writeContentsToPath(MAPPER.writeValueAsString(ImmutableList.of()),BuildInfo.getPathToMetadataDirectory(ruleToTest.getBuildTarget(),filesystem).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  BuildContext context=FakeBuildContext.newBuilder().setArtifactCache(cache).setEventBus(buckEventBus).setJavaPackageFinder(new FakeJavaPackageFinder()).setActionGraph(new ActionGraph(ImmutableList.<BuildRule>of())).build();
  CachingBuildEngine cachingBuildEngine=cachingBuildEngineFactory().build();
  BuildResult result=cachingBuildEngine.build(context,ruleToTest).get();
  assertEquals(BuildRuleSuccessType.MATCHING_RULE_KEY,result.getSuccess());
  List<BuckEvent> events=listener.getEvents();
  assertThat(events,Matchers.<BuckEvent>containsInRelativeOrder(BuildRuleEvent.started(ruleToTest),BuildRuleEvent.finished(ruleToTest,BuildRuleKeys.of(ruleToTestKey),BuildRuleStatus.SUCCESS,CacheResult.localKeyUnchangedHit(),Optional.of(BuildRuleSuccessType.MATCHING_RULE_KEY),Optional.<HashCode>absent(),Optional.<Long>absent(),Optional.<Integer>absent(),Optional.<Long>absent())));
  assertThat(events,Matchers.<BuckEvent>containsInRelativeOrder(BuildRuleEvent.started(runtimeDep),BuildRuleEvent.finished(runtimeDep,BuildRuleKeys.of(runtimeDepKey),BuildRuleStatus.SUCCESS,CacheResult.localKeyUnchangedHit(),Optional.of(BuildRuleSuccessType.MATCHING_RULE_KEY),Optional.<HashCode>absent(),Optional.<Long>absent(),Optional.<Integer>absent(),Optional.<Long>absent())));
  assertThat(events,Matchers.<BuckEvent>containsInRelativeOrder(BuildRuleEvent.started(transitiveRuntimeDep),BuildRuleEvent.finished(transitiveRuntimeDep,BuildRuleKeys.of(transitiveRuntimeDepKey),BuildRuleStatus.SUCCESS,CacheResult.localKeyUnchangedHit(),Optional.of(BuildRuleSuccessType.MATCHING_RULE_KEY),Optional.<HashCode>absent(),Optional.<Long>absent(),Optional.<Integer>absent(),Optional.<Long>absent())));
}
