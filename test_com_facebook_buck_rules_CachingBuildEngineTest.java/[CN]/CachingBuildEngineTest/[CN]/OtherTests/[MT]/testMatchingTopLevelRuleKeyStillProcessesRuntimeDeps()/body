{
  BuckEventBus buckEventBus=BuckEventBusFactory.newInstance();
  FakeBuckEventListener listener=new FakeBuckEventListener();
  buckEventBus.register(listener);
  BuildRuleParams ruleParams=new FakeBuildRuleParamsBuilder("//:transitive_dep").setProjectFilesystem(filesystem).build();
  FakeBuildRule transitiveRuntimeDep=new FakeBuildRule(ruleParams,pathResolver);
  RuleKey transitiveRuntimeDepKey=ruleKeyBuilderFactory.build(transitiveRuntimeDep);
  filesystem.writeContentsToPath(transitiveRuntimeDepKey.toString(),BuildInfo.getPathToMetadataDirectory(transitiveRuntimeDep.getBuildTarget()).resolve(BuildInfo.METADATA_KEY_FOR_RULE_KEY));
  filesystem.writeContentsToPath(MAPPER.writeValueAsString(ImmutableList.of()),BuildInfo.getPathToMetadataDirectory(transitiveRuntimeDep.getBuildTarget()).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  FakeBuildRule runtimeDep=new FakeHasRuntimeDeps(BuildTargetFactory.newInstance("//:runtime_dep"),filesystem,pathResolver,transitiveRuntimeDep);
  RuleKey runtimeDepKey=ruleKeyBuilderFactory.build(runtimeDep);
  filesystem.writeContentsToPath(runtimeDepKey.toString(),BuildInfo.getPathToMetadataDirectory(runtimeDep.getBuildTarget()).resolve(BuildInfo.METADATA_KEY_FOR_RULE_KEY));
  filesystem.writeContentsToPath(MAPPER.writeValueAsString(ImmutableList.of()),BuildInfo.getPathToMetadataDirectory(runtimeDep.getBuildTarget()).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  FakeBuildRule ruleToTest=new FakeHasRuntimeDeps(BUILD_TARGET,filesystem,pathResolver,runtimeDep);
  RuleKey ruleToTestKey=ruleKeyBuilderFactory.build(ruleToTest);
  filesystem.writeContentsToPath(ruleToTestKey.toString(),BuildInfo.getPathToMetadataDirectory(ruleToTest.getBuildTarget()).resolve(BuildInfo.METADATA_KEY_FOR_RULE_KEY));
  filesystem.writeContentsToPath(MAPPER.writeValueAsString(ImmutableList.of()),BuildInfo.getPathToMetadataDirectory(ruleToTest.getBuildTarget()).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  BuildContext context=FakeBuildContext.newBuilder().setArtifactCache(cache).setEventBus(buckEventBus).setJavaPackageFinder(new FakeJavaPackageFinder()).setActionGraph(new ActionGraph(ImmutableList.<BuildRule>of())).build();
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(toWeighted(MoreExecutors.newDirectExecutorService()),fileHashCache,CachingBuildEngine.BuildMode.SHALLOW,CachingBuildEngine.DependencySchedulingOrder.RANDOM,CachingBuildEngine.DepFiles.ENABLED,256L,resolver);
  BuildResult result=cachingBuildEngine.build(context,ruleToTest).get();
  assertEquals(BuildRuleSuccessType.MATCHING_RULE_KEY,result.getSuccess());
  List<BuckEvent> events=listener.getEvents();
  assertThat(events,Matchers.hasSize(13));
  Iterator<BuckEvent> eventIter=events.iterator();
  assertThat(eventIter.next(),isUnskipedRuleCountEvent(3));
  assertThat(eventIter.next(),isEqualEvent(BuildRuleEvent.started(transitiveRuntimeDep)));
  assertThat(eventIter.next(),isEqualEvent(BuildRuleEvent.suspended(transitiveRuntimeDep,ruleKeyBuilderFactory)));
  assertThat(eventIter.next(),isEqualEvent(BuildRuleEvent.started(runtimeDep)));
  assertThat(eventIter.next(),isEqualEvent(BuildRuleEvent.suspended(runtimeDep,ruleKeyBuilderFactory)));
  assertThat(eventIter.next(),isEqualEvent(BuildRuleEvent.started(ruleToTest)));
  assertThat(eventIter.next(),isEqualEvent(BuildRuleEvent.suspended(ruleToTest,ruleKeyBuilderFactory)));
  assertThat(eventIter.next(),isEqualEvent(BuildRuleEvent.resumed(ruleToTest,ruleKeyBuilderFactory)));
  assertThat(eventIter.next(),isEqualEvent(BuildRuleEvent.finished(ruleToTest,BuildRuleKeys.of(ruleToTestKey),BuildRuleStatus.SUCCESS,CacheResult.localKeyUnchangedHit(),Optional.of(BuildRuleSuccessType.MATCHING_RULE_KEY),Optional.<HashCode>absent(),Optional.<Long>absent())));
  assertThat(eventIter.next(),isEqualEvent(BuildRuleEvent.resumed(runtimeDep,ruleKeyBuilderFactory)));
  assertThat(eventIter.next(),isEqualEvent(BuildRuleEvent.finished(runtimeDep,BuildRuleKeys.of(runtimeDepKey),BuildRuleStatus.SUCCESS,CacheResult.localKeyUnchangedHit(),Optional.of(BuildRuleSuccessType.MATCHING_RULE_KEY),Optional.<HashCode>absent(),Optional.<Long>absent())));
  assertThat(eventIter.next(),isEqualEvent(BuildRuleEvent.resumed(transitiveRuntimeDep,ruleKeyBuilderFactory)));
  assertThat(eventIter.next(),isEqualEvent(BuildRuleEvent.finished(transitiveRuntimeDep,BuildRuleKeys.of(transitiveRuntimeDepKey),BuildRuleStatus.SUCCESS,CacheResult.localKeyUnchangedHit(),Optional.of(BuildRuleSuccessType.MATCHING_RULE_KEY),Optional.<HashCode>absent(),Optional.<Long>absent())));
  assertThat(eventIter.hasNext(),is(false));
}
