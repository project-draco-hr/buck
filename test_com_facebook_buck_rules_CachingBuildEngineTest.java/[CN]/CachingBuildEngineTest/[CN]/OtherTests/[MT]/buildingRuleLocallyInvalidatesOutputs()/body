{
  Path output=Paths.get("output/path");
  filesystem.mkdirs(output.getParent());
  filesystem.writeContentsToPath("something",output);
  HashCode originalHashCode=fileHashCache.get(filesystem.resolve(output));
  assertTrue(fileHashCache.willGet(output));
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).setProjectFilesystem(filesystem).build();
  BuildRule rule=new WriteFile(params,pathResolver,"something else",output,false);
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(toWeighted(MoreExecutors.newDirectExecutorService()),fileHashCache,CachingBuildEngine.BuildMode.SHALLOW,CachingBuildEngine.DependencySchedulingOrder.RANDOM,CachingBuildEngine.DepFiles.ENABLED,256L,Optional.<Long>absent(),NO_INPUT_FILE_SIZE_LIMIT,ObjectMappers.newDefaultInstance(),resolver,0);
  BuildResult result=cachingBuildEngine.build(buildContext,rule).get();
  assertEquals(BuildRuleSuccessType.BUILT_LOCALLY,result.getSuccess());
  HashCode newHashCode=fileHashCache.get(filesystem.resolve(output));
  assertThat(newHashCode,Matchers.not(equalTo(originalHashCode)));
}
