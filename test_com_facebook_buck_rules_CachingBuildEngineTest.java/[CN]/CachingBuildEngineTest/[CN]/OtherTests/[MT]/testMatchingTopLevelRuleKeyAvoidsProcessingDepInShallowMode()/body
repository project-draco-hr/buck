{
  BuckEventBus buckEventBus=BuckEventBusFactory.newInstance();
  FakeBuckEventListener listener=new FakeBuckEventListener();
  buckEventBus.register(listener);
  BuildTarget depTarget=BuildTargetFactory.newInstance("//src/com/facebook/orca:lib");
  FakeBuildRule dep=new FakeBuildRule(depTarget,pathResolver);
  FakeBuildRule ruleToTest=new FakeBuildRule(BUILD_TARGET,filesystem,pathResolver,dep);
  RuleKey ruleToTestKey=ruleKeyBuilderFactory.build(ruleToTest);
  filesystem.writeContentsToPath(ruleToTestKey.toString(),BuildInfo.getPathToMetadataDirectory(BUILD_TARGET).resolve(BuildInfo.METADATA_KEY_FOR_RULE_KEY));
  filesystem.writeContentsToPath(MAPPER.writeValueAsString(ImmutableList.of()),BuildInfo.getPathToMetadataDirectory(BUILD_TARGET).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  BuildContext context=FakeBuildContext.newBuilder().setEventBus(buckEventBus).setArtifactCache(new NoopArtifactCache()).setJavaPackageFinder(new FakeJavaPackageFinder()).setActionGraph(new ActionGraph(ImmutableList.<BuildRule>of())).build();
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(toWeighted(MoreExecutors.newDirectExecutorService()),fileHashCache,CachingBuildEngine.BuildMode.SHALLOW,CachingBuildEngine.DependencySchedulingOrder.RANDOM,CachingBuildEngine.DepFiles.ENABLED,256L,resolver);
  replayAll();
  BuildResult result=cachingBuildEngine.build(context,ruleToTest).get();
  assertEquals(BuildRuleSuccessType.MATCHING_RULE_KEY,result.getSuccess());
  verifyAll();
  List<BuckEvent> events=listener.getEvents();
  assertThat(events,Matchers.hasSize(8));
  Iterator<BuckEvent> eventIter=events.iterator();
  assertThat(eventIter.next(),isUnskipedRuleCountEvent(2));
  assertThat(eventIter.next(),isEqualEvent(BuildRuleEvent.started(dep)));
  assertThat(eventIter.next(),isEqualEvent(BuildRuleEvent.suspended(dep,ruleKeyBuilderFactory)));
  assertThat(eventIter.next(),isEqualEvent(BuildRuleEvent.started(ruleToTest)));
  assertThat(eventIter.next(),isEqualEvent(BuildRuleEvent.suspended(ruleToTest,ruleKeyBuilderFactory)));
  assertThat(eventIter.next(),isEqualEvent(BuildRuleEvent.resumed(ruleToTest,ruleKeyBuilderFactory)));
  assertThat(eventIter.next(),isUnskipedRuleCountEvent(1));
  assertThat(eventIter.next(),isEqualEvent(BuildRuleEvent.finished(ruleToTest,BuildRuleKeys.of(ruleToTestKey),BuildRuleStatus.SUCCESS,CacheResult.localKeyUnchangedHit(),Optional.of(BuildRuleSuccessType.MATCHING_RULE_KEY),Optional.<HashCode>absent(),Optional.<Long>absent())));
  assertThat(eventIter.hasNext(),is(false));
}
