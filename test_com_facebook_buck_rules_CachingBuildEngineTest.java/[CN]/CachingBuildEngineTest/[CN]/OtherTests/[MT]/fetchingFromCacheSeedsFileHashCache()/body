{
  ArtifactCache artifactCache=new InMemoryArtifactCache();
  BuildContext buildContext=this.buildContext.withArtifactCache(artifactCache);
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  Path output=filesystem.getRootPath().getFileSystem().getPath("output/path");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).setProjectFilesystem(filesystem).build();
  BuildRule rule=new WriteFile(params,pathResolver,"something else",output,false);
  CachingBuildEngine cachingBuildEngine=cachingBuildEngineFactory().build();
  BuildResult result=cachingBuildEngine.build(buildContext,rule).get();
  assertEquals(BuildRuleSuccessType.BUILT_LOCALLY,result.getSuccess());
  filesystem.clear();
  FakeFileHashCache fakeFileHashCache=new FakeFileHashCache(new HashMap<Path,HashCode>());
  cachingBuildEngine=cachingBuildEngineFactory().setCachingBuildEngineDelegate(new LocalCachingBuildEngineDelegate(fakeFileHashCache)).build();
  result=cachingBuildEngine.build(buildContext,rule).get();
  assertEquals(BuildRuleSuccessType.FETCHED_FROM_CACHE,result.getSuccess());
  assertTrue(fakeFileHashCache.contains(filesystem.resolve(output)));
}
