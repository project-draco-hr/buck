{
  BuckEventBus buckEventBus=BuckEventBusFactory.newInstance();
  FakeBuckEventListener listener=new FakeBuckEventListener();
  buckEventBus.register(listener);
  Step failingStep=new AbstractExecutionStep("test"){
    @Override public int execute(    ExecutionContext context) throws IOException {
      return 1;
    }
  }
;
  BuildRule ruleToTest=createRule(filesystem,pathResolver,ImmutableSet.<BuildRule>of(),ImmutableList.<Step>of(),ImmutableList.of(failingStep),null);
  filesystem.writeContentsToPath(ruleKeyBuilderFactory.build(ruleToTest).toString(),BuildInfo.getPathToMetadataDirectory(ruleToTest.getBuildTarget(),filesystem).resolve(BuildInfo.METADATA_KEY_FOR_RULE_KEY));
  filesystem.writeContentsToPath(MAPPER.writeValueAsString(ImmutableList.of()),BuildInfo.getPathToMetadataDirectory(ruleToTest.getBuildTarget(),filesystem).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  BuildContext context=FakeBuildContext.newBuilder().setArtifactCache(cache).setEventBus(buckEventBus).setJavaPackageFinder(new FakeJavaPackageFinder()).setActionGraph(new ActionGraph(ImmutableList.<BuildRule>of())).build();
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(toWeighted(MoreExecutors.newDirectExecutorService()),fileHashCache,CachingBuildEngine.BuildMode.SHALLOW,CachingBuildEngine.DependencySchedulingOrder.RANDOM,CachingBuildEngine.DepFiles.ENABLED,256L,Optional.<Long>absent(),ObjectMappers.newDefaultInstance(),resolver,createTestExecutorService(),0);
  BuildResult result=cachingBuildEngine.build(context,ruleToTest).get();
  assertEquals(BuildRuleSuccessType.MATCHING_RULE_KEY,result.getSuccess());
}
