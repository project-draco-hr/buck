{
  ArtifactCache cache=new NoopArtifactCache(){
    @Override public CacheResult fetch(    RuleKey ruleKey,    LazyPath output){
      return CacheResult.error("cache","error");
    }
  }
;
  BuildContext buildContext=FakeBuildContext.newBuilder().setArtifactCache(cache).setJavaPackageFinder(new FakeJavaPackageFinder()).setActionGraph(new ActionGraph(ImmutableList.<BuildRule>of())).build();
  BuildRule rule=new EmptyBuildRule(new FakeBuildRuleParamsBuilder("//:rule").setProjectFilesystem(filesystem).build(),pathResolver);
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(toWeighted(MoreExecutors.newDirectExecutorService()),fileHashCache,CachingBuildEngine.BuildMode.SHALLOW,CachingBuildEngine.DependencySchedulingOrder.RANDOM,CachingBuildEngine.DepFiles.ENABLED,256L,Optional.<Long>absent(),NO_INPUT_FILE_SIZE_LIMIT,ObjectMappers.newDefaultInstance(),resolver,0);
  BuildResult result=cachingBuildEngine.build(buildContext,rule).get();
  assertThat(result.getSuccess(),equalTo(BuildRuleSuccessType.BUILT_LOCALLY));
  assertThat(result.getCacheResult().getType(),equalTo(CacheResultType.ERROR));
}
