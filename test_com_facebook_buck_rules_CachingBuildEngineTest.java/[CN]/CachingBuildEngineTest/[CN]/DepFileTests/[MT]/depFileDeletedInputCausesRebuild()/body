{
  final Genrule genrule=(Genrule)GenruleBuilder.newGenruleBuilder(BuildTargetFactory.newInstance("//:dep")).setOut("input").build(resolver,filesystem);
  final Path input=Preconditions.checkNotNull(genrule.getPathToOutput());
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).setProjectFilesystem(filesystem).build();
  final Path output=Paths.get("output");
  BuildRule rule=new DepFileBuildRule(params,pathResolver){
    @AddToRuleKey private final SourcePath path=new BuildTargetSourcePath(genrule.getBuildTarget());
    @Override public ImmutableList<Step> getBuildSteps(    BuildContext context,    BuildableContext buildableContext){
      buildableContext.addMetadata(BuildInfo.METADATA_KEY_FOR_DEP_FILE,ImmutableList.of(input.toString()));
      return ImmutableList.<Step>of(new WriteFileStep(filesystem,"",output,false));
    }
    @Override public ImmutableList<SourcePath> getInputsAfterBuildingLocally(){
      return ImmutableList.of();
    }
    @Override public Path getPathToOutput(){
      return output;
    }
  }
;
  filesystem.writeContentsToPath("something",input);
  RuleKey depFileRuleKey=depFileFactory.build(rule,ImmutableList.of(input));
  filesystem.writeContentsToPath(depFileRuleKey.toString(),BuildInfo.getPathToMetadataDirectory(target).resolve(BuildInfo.METADATA_KEY_FOR_DEP_FILE_RULE_KEY));
  filesystem.writeContentsToPath(MAPPER.writeValueAsString(ImmutableList.of(input.toString())),BuildInfo.getPathToMetadataDirectory(target).resolve(BuildInfo.METADATA_KEY_FOR_DEP_FILE));
  filesystem.writeContentsToPath(MAPPER.writeValueAsString(ImmutableList.of(output.toString())),BuildInfo.getPathToMetadataDirectory(target).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  filesystem.deleteFileAtPath(input);
  fileHashCache.invalidate(filesystem.resolve(input));
  CachingBuildEngine cachingBuildEngine=engineWithDepFileFactory(depFileFactory);
  BuildResult result=cachingBuildEngine.build(buildContext,rule).get();
  assertEquals(BuildRuleSuccessType.BUILT_LOCALLY,getSuccess(result));
}
