{
  final Genrule genrule=(Genrule)GenruleBuilder.newGenruleBuilder(BuildTargetFactory.newInstance("//:dep")).setOut("input").build(resolver,filesystem);
  final Path input=Preconditions.checkNotNull(genrule.getPathToOutput());
  final BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).setProjectFilesystem(filesystem).build();
  final Path output=Paths.get("output");
  BuildRule rule=new DepFileBuildRule(params,pathResolver){
    @AddToRuleKey private final SourcePath path=new BuildTargetSourcePath(genrule.getBuildTarget());
    @Override public ImmutableList<Step> getBuildSteps(    BuildContext context,    BuildableContext buildableContext){
      buildableContext.addMetadata(BuildInfo.METADATA_KEY_FOR_DEP_FILE,ImmutableList.of(fileToDepFileEntryString(input)));
      return ImmutableList.<Step>of(new WriteFileStep(filesystem,"",output,false));
    }
    @Override public Optional<ImmutableSet<SourcePath>> getPossibleInputSourcePaths() throws IOException {
      return Optional.absent();
    }
    @Override public ImmutableList<SourcePath> getInputsAfterBuildingLocally(){
      return ImmutableList.of();
    }
    @Override public Path getPathToOutput(){
      return output;
    }
  }
;
  DependencyFileRuleKeyBuilderFactory depFileRuleKeyBuilderFactory=new DependencyFileRuleKeyBuilderFactory(){
    @Override public Optional<Pair<RuleKey,ImmutableSet<SourcePath>>> build(    BuildRule rule,    Optional<ImmutableSet<SourcePath>> possibleDepFileSourcePaths,    ImmutableList<DependencyFileEntry> inputs){
      if (rule.getBuildTarget().equals(target)) {
        return Optional.absent();
      }
      throw new AssertionError();
    }
    @Override public Optional<Pair<RuleKey,ImmutableSet<SourcePath>>> buildManifestKey(    BuildRule rule){
      if (rule.getBuildTarget().equals(target)) {
        return Optional.absent();
      }
      throw new AssertionError();
    }
  }
;
  filesystem.writeContentsToPath("something",input);
  RuleKey depFileRuleKey=depFileFactory.build(rule,Optional.<ImmutableSet<SourcePath>>absent(),ImmutableList.of(DependencyFileEntry.of(input,Optional.<Path>absent()))).get().getFirst();
  filesystem.writeContentsToPath(depFileRuleKey.toString(),BuildInfo.getPathToMetadataDirectory(target,filesystem).resolve(BuildInfo.METADATA_KEY_FOR_DEP_FILE_RULE_KEY));
  filesystem.writeContentsToPath(MAPPER.writeValueAsString(ImmutableList.of(fileToDepFileEntryString(input))),BuildInfo.getPathToMetadataDirectory(target,filesystem).resolve(BuildInfo.METADATA_KEY_FOR_DEP_FILE));
  filesystem.writeContentsToPath(MAPPER.writeValueAsString(ImmutableList.of(output.toString())),BuildInfo.getPathToMetadataDirectory(target,filesystem).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  CachingBuildEngine cachingBuildEngine=engineWithDepFileFactory(depFileRuleKeyBuilderFactory);
  BuildResult result=cachingBuildEngine.build(buildContext,rule).get();
  assertEquals(BuildRuleSuccessType.BUILT_LOCALLY,getSuccess(result));
  OnDiskBuildInfo onDiskBuildInfo=buildContext.createOnDiskBuildInfoFor(target,filesystem);
  assertThat(onDiskBuildInfo.getRuleKey(BuildInfo.METADATA_KEY_FOR_RULE_KEY),equalTo(Optional.of(ruleKeyBuilderFactory.build(rule))));
  assertThat(onDiskBuildInfo.getRuleKey(BuildInfo.METADATA_KEY_FOR_DEP_FILE_RULE_KEY),equalTo(Optional.<RuleKey>absent()));
}
