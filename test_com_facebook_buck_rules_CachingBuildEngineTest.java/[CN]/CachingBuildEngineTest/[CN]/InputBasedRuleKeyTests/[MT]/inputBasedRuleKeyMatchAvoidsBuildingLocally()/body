{
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).setProjectFilesystem(filesystem).build();
  final RuleKey inputRuleKey=new RuleKey("aaaa");
  final BuildRule rule=new FailingInputRuleKeyBuildRule(params,pathResolver);
  filesystem.writeContentsToPath("stuff",rule.getPathToOutput());
  filesystem.writeContentsToPath(MAPPER.writeValueAsString(ImmutableList.of(rule.getPathToOutput().toString())),BuildInfo.getPathToMetadataDirectory(target,filesystem).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  filesystem.writeContentsToPath(inputRuleKey.toString(),BuildInfo.getPathToMetadataDirectory(target,filesystem).resolve(BuildInfo.METADATA_KEY_FOR_INPUT_BASED_RULE_KEY));
  CachingBuildEngine cachingBuildEngine=cachingBuildEngineFactory().setRuleKeyFactoriesFunction(Functions.constant(new CachingBuildEngine.RuleKeyFactories(ruleKeyBuilderFactory,new FakeInputBasedRuleKeyBuilderFactory(ImmutableMap.of(rule.getBuildTarget(),Optional.of(inputRuleKey))),NOOP_RULE_KEY_FACTORY,NOOP_DEP_FILE_RULE_KEY_FACTORY))).build();
  BuildResult result=cachingBuildEngine.build(buildContext,rule).get();
  assertEquals(BuildRuleSuccessType.MATCHING_INPUT_BASED_RULE_KEY,result.getSuccess());
  OnDiskBuildInfo onDiskBuildInfo=buildContext.createOnDiskBuildInfoFor(target,filesystem);
  assertThat(onDiskBuildInfo.getRuleKey(BuildInfo.METADATA_KEY_FOR_RULE_KEY),equalTo(Optional.of(ruleKeyBuilderFactory.build(rule))));
  LazyPath fetchedArtifact=LazyPath.ofInstance(tmp.newFile("fetched_artifact.zip").toPath());
  assertThat(cache.fetch(ruleKeyBuilderFactory.build(rule),fetchedArtifact).getType(),equalTo(CacheResultType.MISS));
}
