{
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  final RuleKey inputRuleKey=new RuleKey("aaaa");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).setProjectFilesystem(filesystem).build();
  final BuildRule rule=new FailingInputRuleKeyBuildRule(params,pathResolver);
  filesystem.writeContentsToPath(MAPPER.writeValueAsString(ImmutableList.of(rule.getPathToOutput().toString())),BuildInfo.getPathToMetadataDirectory(target,filesystem).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  Path artifact=tmp.newFile("artifact.zip").toPath();
  writeEntriesToZip(artifact,ImmutableMap.of(BuildInfo.getPathToMetadataDirectory(target,filesystem).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS),MAPPER.writeValueAsString(ImmutableList.of(rule.getPathToOutput().toString())),rule.getPathToOutput(),"stuff"));
  cache.store(ArtifactInfo.builder().addRuleKeys(inputRuleKey).setMetadata(ImmutableMap.of(BuildInfo.METADATA_KEY_FOR_RULE_KEY,new RuleKey("bbbb").toString(),BuildInfo.METADATA_KEY_FOR_INPUT_BASED_RULE_KEY,inputRuleKey.toString())).build(),BorrowablePath.notBorrowablePath(artifact));
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(toWeighted(MoreExecutors.newDirectExecutorService()),fileHashCache,CachingBuildEngine.BuildMode.SHALLOW,CachingBuildEngine.DependencySchedulingOrder.RANDOM,CachingBuildEngine.DepFiles.ENABLED,256L,Optional.<Long>absent(),pathResolver,Functions.constant(new CachingBuildEngine.RuleKeyFactories(ruleKeyBuilderFactory,new FakeInputBasedRuleKeyBuilderFactory(ImmutableMap.of(rule.getBuildTarget(),Optional.of(inputRuleKey))),NOOP_RULE_KEY_FACTORY,NOOP_DEP_FILE_RULE_KEY_FACTORY)));
  BuildResult result=cachingBuildEngine.build(buildContext,rule).get();
  assertEquals(BuildRuleSuccessType.FETCHED_FROM_CACHE_INPUT_BASED,result.getSuccess());
  OnDiskBuildInfo onDiskBuildInfo=buildContext.createOnDiskBuildInfoFor(target,filesystem);
  assertThat(onDiskBuildInfo.getRuleKey(BuildInfo.METADATA_KEY_FOR_RULE_KEY),equalTo(Optional.of(ruleKeyBuilderFactory.build(rule))));
  assertThat(onDiskBuildInfo.getRuleKey(BuildInfo.METADATA_KEY_FOR_INPUT_BASED_RULE_KEY),equalTo(Optional.of(inputRuleKey)));
  Path fetchedArtifact=tmp.newFile("fetched_artifact.zip").toPath();
  assertThat(cache.fetch(ruleKeyBuilderFactory.build(rule),LazyPath.ofInstance(fetchedArtifact)).getType(),equalTo(CacheResultType.HIT));
  assertEquals(new ZipInspector(artifact).getZipFileEntries(),new ZipInspector(fetchedArtifact).getZipFileEntries());
  MoreAsserts.assertContentsEqual(artifact,fetchedArtifact);
}
