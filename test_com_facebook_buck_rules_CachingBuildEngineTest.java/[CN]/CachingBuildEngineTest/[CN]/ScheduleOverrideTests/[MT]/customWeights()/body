{
  ControlledRule rule1=new ControlledRule(new FakeBuildRuleParamsBuilder(BuildTargetFactory.newInstance("//:rule1")).setProjectFilesystem(filesystem).build(),pathResolver,RuleScheduleInfo.builder().setJobsMultiplier(2).setResourceAmounts(ResourceAmounts.of(2,0,0,0)).build());
  ControlledRule rule2=new ControlledRule(new FakeBuildRuleParamsBuilder(BuildTargetFactory.newInstance("//:rule2")).setProjectFilesystem(filesystem).build(),pathResolver,RuleScheduleInfo.builder().setJobsMultiplier(2).setResourceAmounts(ResourceAmounts.of(2,0,0,0)).build());
  ListeningMultiSemaphore semaphore=new ListeningMultiSemaphore(ResourceAmounts.of(3,0,0,0),ResourceAllocationFairness.FAIR);
  CachingBuildEngine cachingBuildEngine=cachingBuildEngineFactory().setExecutorService(new WeightedListeningExecutorService(semaphore,ResourceAmounts.of(1,0,0,0),listeningDecorator(Executors.newCachedThreadPool()))).setRuleKeyFactoriesFunction(Functions.constant(new CachingBuildEngine.RuleKeyFactories(NOOP_RULE_KEY_FACTORY,NOOP_INPUT_BASED_RULE_KEY_FACTORY,NOOP_RULE_KEY_FACTORY,NOOP_DEP_FILE_RULE_KEY_FACTORY,NOOP_INPUT_COUNTING_RULE_KEY_FACTORY))).build();
  ListenableFuture<BuildResult> result1=cachingBuildEngine.build(buildContext,rule1);
  rule1.waitForStart();
  assertThat(rule1.hasStarted(),equalTo(true));
  ListenableFuture<BuildResult> result2=cachingBuildEngine.build(buildContext,rule2);
  Thread.sleep(250);
  assertThat(semaphore.getQueueLength(),equalTo(1));
  assertThat(rule2.hasStarted(),equalTo(false));
  rule1.finish();
  result1.get();
  rule2.finish();
  result2.get();
}
