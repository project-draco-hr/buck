{
  ControlledRule rule1=new ControlledRule(new FakeBuildRuleParamsBuilder(BuildTargetFactory.newInstance("//:rule1")).setProjectFilesystem(filesystem).build(),pathResolver,RuleScheduleInfo.DEFAULT.withJobsMultiplier(2));
  ControlledRule rule2=new ControlledRule(new FakeBuildRuleParamsBuilder(BuildTargetFactory.newInstance("//:rule2")).setProjectFilesystem(filesystem).build(),pathResolver,RuleScheduleInfo.DEFAULT.withJobsMultiplier(2));
  ListeningSemaphore semaphore=new ListeningSemaphore(3);
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(new WeightedListeningExecutorService(semaphore,1,listeningDecorator(Executors.newCachedThreadPool())),fileHashCache,CachingBuildEngine.BuildMode.SHALLOW,CachingBuildEngine.DependencySchedulingOrder.RANDOM,CachingBuildEngine.DepFiles.ENABLED,256L,Optional.<Long>absent(),pathResolver,Functions.constant(new CachingBuildEngine.RuleKeyFactories(NOOP_RULE_KEY_FACTORY,NOOP_RULE_KEY_FACTORY,NOOP_RULE_KEY_FACTORY,NOOP_DEP_FILE_RULE_KEY_FACTORY)));
  ListenableFuture<BuildResult> result1=cachingBuildEngine.build(buildContext,rule1);
  rule1.waitForStart();
  assertThat(rule1.hasStarted(),equalTo(true));
  ListenableFuture<BuildResult> result2=cachingBuildEngine.build(buildContext,rule2);
  Thread.sleep(250);
  assertThat(semaphore.getQueueLength(),equalTo(1));
  assertThat(rule2.hasStarted(),equalTo(false));
  rule1.finish();
  result1.get();
  rule2.finish();
  result2.get();
}
