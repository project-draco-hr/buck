{
  ProjectFilesystem filesystem=new FakeProjectFilesystem(tmp.getRoot());
  DefaultFileHashCache fileHashCache=new DefaultFileHashCache(filesystem);
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  RuleKeyBuilderFactory ruleKeyBuilderFactory=new DefaultRuleKeyBuilderFactory(fileHashCache,resolver);
  BuildRuleParams buildRuleParams=new FakeBuildRuleParamsBuilder(BUILD_TARGET).setProjectFilesystem(filesystem).build();
  FakeBuildRule buildRule=new FakeBuildRule(buildRuleParams,resolver);
  BuckEventBus buckEventBus=BuckEventBusFactory.newInstance();
  FakeBuckEventListener listener=new FakeBuckEventListener();
  buckEventBus.register(listener);
  BuildContext buildContext=FakeBuildContext.newBuilder().setArtifactCache(new NoopArtifactCache(){
    @Override public ListenableFuture<Void> store(    ImmutableSet<RuleKey> ruleKeys,    ImmutableMap<String,String> metadata,    Path output){
      try {
        Thread.sleep(500);
      }
 catch (      InterruptedException e) {
        throw Throwables.propagate(e);
      }
      return Futures.immediateFuture(null);
    }
  }
).setEventBus(buckEventBus).setJavaPackageFinder(new FakeJavaPackageFinder()).setActionGraph(new ActionGraph(ImmutableList.<BuildRule>of())).build();
  ListeningExecutorService service=listeningDecorator(Executors.newFixedThreadPool(2));
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(service,fileHashCache,CachingBuildEngine.BuildMode.SHALLOW,CachingBuildEngine.DependencySchedulingOrder.RANDOM,CachingBuildEngine.DepFiles.ENABLED,256L,new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  ListenableFuture<BuildResult> buildResult=cachingBuildEngine.build(buildContext,buildRule);
  BuildResult result=buildResult.get();
  assertEquals(BuildRuleSuccessType.BUILT_LOCALLY,result.getSuccess());
  assertTrue(service.shutdownNow().isEmpty());
  List<BuckEvent> events=listener.getEvents();
  assertThat(events,Matchers.hasSize(6));
  Iterator<BuckEvent> eventIter=events.iterator();
  assertEquals(configureTestEvent(BuildRuleEvent.started(buildRule),buckEventBus).getEventName(),eventIter.next().getEventName());
  assertEquals(configureTestEvent(BuildRuleEvent.suspended(buildRule,ruleKeyBuilderFactory),buckEventBus).getEventName(),eventIter.next().getEventName());
  assertEquals(configureTestEvent(BuildRuleEvent.resumed(buildRule,ruleKeyBuilderFactory),buckEventBus).getEventName(),eventIter.next().getEventName());
  assertEquals(configureTestEvent(BuildRuleEvent.suspended(buildRule,ruleKeyBuilderFactory),buckEventBus).getEventName(),eventIter.next().getEventName());
  assertEquals(configureTestEvent(BuildRuleEvent.resumed(buildRule,ruleKeyBuilderFactory),buckEventBus).getEventName(),eventIter.next().getEventName());
  assertEquals(configureTestEvent(BuildRuleEvent.finished(buildRule,BuildRuleKeys.of(ruleKeyBuilderFactory.build(buildRule)),BuildRuleStatus.SUCCESS,CacheResult.miss(),Optional.of(BuildRuleSuccessType.BUILT_LOCALLY),Optional.<HashCode>absent(),Optional.<Long>absent()),buckEventBus).getEventName(),eventIter.next().getEventName());
}
