{
  BuildRuleResolver resolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ProjectFilesystem filesystem=new FakeProjectFilesystem(tmp.getRoot());
  DefaultFileHashCache fileHashCache=new DefaultFileHashCache(filesystem);
  ArtifactCache cache=new NoopArtifactCache();
  BuckEventBus buckEventBus=BuckEventBusFactory.newInstance();
  FakeBuckEventListener listener=new FakeBuckEventListener();
  buckEventBus.register(listener);
  BuildRuleParams ruleParams=new FakeBuildRuleParamsBuilder("//:transitive_dep").setProjectFilesystem(filesystem).build();
  FakeBuildRule transitiveRuntimeDep=new FakeBuildRule(ruleParams,pathResolver);
  transitiveRuntimeDep.setRuleKey(new RuleKey("aaaa"));
  filesystem.writeContentsToPath(transitiveRuntimeDep.getRuleKey().toString(),BuildInfo.getPathToMetadataDirectory(transitiveRuntimeDep.getBuildTarget()).resolve(BuildInfo.METADATA_KEY_FOR_RULE_KEY));
  filesystem.writeContentsToPath(new ObjectMapper().writeValueAsString(ImmutableList.of()),BuildInfo.getPathToMetadataDirectory(transitiveRuntimeDep.getBuildTarget()).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  FakeBuildRule runtimeDep=new FakeHasRuntimeDeps(BuildTargetFactory.newInstance("//:runtime_dep"),filesystem,pathResolver,transitiveRuntimeDep);
  runtimeDep.setRuleKey(new RuleKey("bbbb"));
  filesystem.writeContentsToPath(runtimeDep.getRuleKey().toString(),BuildInfo.getPathToMetadataDirectory(runtimeDep.getBuildTarget()).resolve(BuildInfo.METADATA_KEY_FOR_RULE_KEY));
  filesystem.writeContentsToPath(new ObjectMapper().writeValueAsString(ImmutableList.of()),BuildInfo.getPathToMetadataDirectory(runtimeDep.getBuildTarget()).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  FakeBuildRule ruleToTest=new FakeHasRuntimeDeps(BUILD_TARGET,filesystem,pathResolver,runtimeDep);
  ruleToTest.setRuleKey(new RuleKey("cccc"));
  filesystem.writeContentsToPath(ruleToTest.getRuleKey().toString(),BuildInfo.getPathToMetadataDirectory(ruleToTest.getBuildTarget()).resolve(BuildInfo.METADATA_KEY_FOR_RULE_KEY));
  filesystem.writeContentsToPath(new ObjectMapper().writeValueAsString(ImmutableList.of()),BuildInfo.getPathToMetadataDirectory(ruleToTest.getBuildTarget()).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  BuildContext context=FakeBuildContext.newBuilder().setArtifactCache(cache).setEventBus(buckEventBus).setJavaPackageFinder(new FakeJavaPackageFinder()).setActionGraph(new ActionGraph(ImmutableList.<BuildRule>of())).build();
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(MoreExecutors.newDirectExecutorService(),fileHashCache,CachingBuildEngine.BuildMode.SHALLOW,CachingBuildEngine.DepFiles.ENABLED,ImmutableMap.of(filesystem,new BuildRuleResolver()));
  BuildResult result=cachingBuildEngine.build(context,ruleToTest).get();
  assertEquals(BuildRuleSuccessType.MATCHING_RULE_KEY,result.getSuccess());
  List<BuckEvent> events=listener.getEvents();
  assertThat(events,Matchers.hasSize(12));
  Iterator<BuckEvent> eventIter=events.iterator();
  assertEquals(configureTestEvent(BuildRuleEvent.started(transitiveRuntimeDep),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.suspended(transitiveRuntimeDep),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.started(runtimeDep),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.suspended(runtimeDep),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.started(ruleToTest),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.suspended(ruleToTest),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.resumed(ruleToTest),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.finished(ruleToTest,BuildRuleStatus.SUCCESS,CacheResult.localKeyUnchangedHit(),Optional.of(BuildRuleSuccessType.MATCHING_RULE_KEY),Optional.<HashCode>absent(),Optional.<Long>absent()),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.resumed(runtimeDep),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.finished(runtimeDep,BuildRuleStatus.SUCCESS,CacheResult.localKeyUnchangedHit(),Optional.of(BuildRuleSuccessType.MATCHING_RULE_KEY),Optional.<HashCode>absent(),Optional.<Long>absent()),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.resumed(transitiveRuntimeDep),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.finished(transitiveRuntimeDep,BuildRuleStatus.SUCCESS,CacheResult.localKeyUnchangedHit(),Optional.of(BuildRuleSuccessType.MATCHING_RULE_KEY),Optional.<HashCode>absent(),Optional.<Long>absent()),buckEventBus),eventIter.next());
}
