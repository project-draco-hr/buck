{
  Step step=new AbstractExecutionStep("exploding step"){
    @Override public int execute(    ExecutionContext context){
      return 0;
    }
  }
;
  BuildRule buildRule=createRule(new SourcePathResolver(new BuildRuleResolver()),ImmutableSet.<BuildRule>of(),ImmutableList.of(step),null,CacheMode.DISABLED);
  ProjectFilesystem projectFilesystem=createMock(ProjectFilesystem.class);
  expect(projectFilesystem.readFileIfItExists(Paths.get("buck-out/bin/src/com/facebook/orca/.orca/metadata/RULE_KEY"))).andReturn(Optional.<String>absent());
  projectFilesystem.rmdir(anyObject(Path.class));
  projectFilesystem.mkdirs(anyObject(Path.class));
  projectFilesystem.writeContentsToPath(anyObject(String.class),anyObject(Path.class));
  projectFilesystem.writeContentsToPath(anyObject(String.class),anyObject(Path.class));
  ArtifactCache artifactCache=createMock(ArtifactCache.class);
  expect(artifactCache.isStoreSupported()).andReturn(false);
  BuckEventBus buckEventBus=BuckEventBusFactory.newInstance();
  StepRunner stepRunner=createStepRunner(buckEventBus);
  BuildContext buildContext=ImmutableBuildContext.builder().setActionGraph(RuleMap.createGraphFromSingleRule(buildRule)).setStepRunner(stepRunner).setProjectFilesystem(projectFilesystem).setClock(new DefaultClock()).setBuildId(new BuildId()).setArtifactCache(artifactCache).setJavaPackageFinder(createMock(JavaPackageFinder.class)).setEventBus(buckEventBus).build();
  replayAll();
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(MoreExecutors.newDirectExecutorService());
  ListenableFuture<BuildRuleSuccess> result=cachingBuildEngine.build(buildContext,buildRule);
  buckEventBus.post(CommandEvent.finished("build",ImmutableList.<String>of(),false,0));
  verifyAll();
  BuildRuleSuccess success=result.get();
  assertEquals(BuildRuleSuccess.Type.BUILT_LOCALLY,success.getType());
  assertTrue(((BuildableAbstractCachingBuildRule)buildRule).isInitializedFromDisk());
}
