{
  ArtifactCache cache=new NoopArtifactCache();
  BuckEventBus buckEventBus=BuckEventBusFactory.newInstance();
  FakeBuckEventListener listener=new FakeBuckEventListener();
  buckEventBus.register(listener);
  Step failingStep=new AbstractExecutionStep("test"){
    @Override public int execute(    ExecutionContext context) throws IOException {
      return 1;
    }
  }
;
  BuildRule ruleToTest=createRule(new SourcePathResolver(new BuildRuleResolver()),ImmutableSet.<BuildRule>of(),ImmutableList.<Step>of(),ImmutableList.of(failingStep),null);
  BuildContext context=createNiceMock(BuildContext.class);
  expect(context.getArtifactCache()).andReturn(cache).anyTimes();
  expect(context.getEventBus()).andReturn(buckEventBus).anyTimes();
  expect(context.getStepRunner()).andReturn(createStepRunner(buckEventBus)).anyTimes();
  expect(context.createOnDiskBuildInfoFor(buildTarget)).andReturn(new FakeOnDiskBuildInfo().setRuleKey(ruleToTest.getRuleKey())).anyTimes();
  BuildInfoRecorder buildInfoRecorder=createNiceMock(BuildInfoRecorder.class);
  expect(buildInfoRecorder.getOutputSizeAndHash(anyObject(HashFunction.class))).andReturn(new Pair<>(0L,HashCode.fromInt(0))).anyTimes();
  expect(context.createBuildInfoRecorder(anyObject(BuildTarget.class),anyObject(RuleKey.class),anyObject(RuleKey.class))).andReturn(buildInfoRecorder).anyTimes();
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(MoreExecutors.newDirectExecutorService(),CachingBuildEngine.BuildMode.SHALLOW);
  replayAll();
  BuildResult result=cachingBuildEngine.build(context,ruleToTest).get();
  assertEquals(BuildRuleSuccessType.MATCHING_RULE_KEY,result.getSuccess());
  verifyAll();
}
