{
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(MoreExecutors.newDirectExecutorService(),1);
  SourcePathResolver pathResolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget target1=BuildTargetFactory.newInstance("//java/com/example:rule1");
  FakeBuildRule dep1=new FakeBuildRule(AndroidResourceDescription.TYPE,target1,pathResolver);
  cachingBuildEngine.setBuildRuleResult(target1,new BuildRuleSuccess(dep1,BuildRuleSuccess.Type.BUILT_LOCALLY),CacheResult.skip());
  dep1.setRuleKey(new RuleKey(Strings.repeat("a",40)));
  BuildTarget target2=BuildTargetFactory.newInstance("//java/com/example:rule2");
  FakeBuildRule dep2=new FakeBuildRule(AndroidResourceDescription.TYPE,target2,pathResolver);
  cachingBuildEngine.setBuildRuleResult(target2,new BuildRuleSuccess(dep2,BuildRuleSuccess.Type.FETCHED_FROM_CACHE),CacheResult.skip());
  dep2.setRuleKey(new RuleKey(Strings.repeat("b",40)));
  final List<String> strings=Lists.newArrayList();
  Step buildStep=new AbstractExecutionStep("test_step"){
    @Override public int execute(    ExecutionContext context){
      strings.add("Step was executed.");
      return 0;
    }
  }
;
  BuildRule buildRuleToTest=createRule(pathResolver,ImmutableSet.<BuildRule>of(dep1,dep2),ImmutableList.of(buildStep),ImmutableList.<Step>of(),"buck-out/gen/src/com/facebook/orca/some_file");
  ArtifactCache artifactCache=new NoopArtifactCache(){
    @Override public CacheResult fetch(    RuleKey ruleKey,    File output){
      throw new RuntimeException("Artifact cache must not be accessed while building the rule.");
    }
  }
;
  BuckEventBus eventBus=BuckEventBusFactory.newInstance();
  FakeBuckEventListener listener=new FakeBuckEventListener();
  eventBus.register(listener);
  BuildContext buildContext=FakeBuildContext.newBuilder(new FakeProjectFilesystem()).setActionGraph(new ActionGraph(new MutableDirectedGraph<BuildRule>())).setJavaPackageFinder(new JavaPackageFinder(){
    @Override public Path findJavaPackageFolder(    Path pathRelativeToProjectRoot){
      return null;
    }
    @Override public String findJavaPackage(    Path pathRelativeToProjectRoot){
      return null;
    }
    @Override public String findJavaPackage(    BuildTarget buildTarget){
      return null;
    }
  }
).setArtifactCache(artifactCache).setEventBus(eventBus).build();
  BuildResult result=cachingBuildEngine.build(buildContext,buildRuleToTest).get();
  assertEquals(result.getSuccess(),BuildRuleSuccess.Type.BUILT_LOCALLY);
  eventBus.post(CommandEvent.finished("build",ImmutableList.<String>of(),false,0));
  MoreAsserts.assertListEquals(Lists.newArrayList("Step was executed."),strings);
  Finished finishedEvent=null;
  for (  BuckEvent event : listener.getEvents()) {
    if (event instanceof Finished) {
      finishedEvent=(Finished)event;
    }
  }
  assertNotNull("BuildRule did not fire a BuildRuleEvent.Finished event.",finishedEvent);
  assertEquals(CacheResult.skip(),finishedEvent.getCacheResult());
}
