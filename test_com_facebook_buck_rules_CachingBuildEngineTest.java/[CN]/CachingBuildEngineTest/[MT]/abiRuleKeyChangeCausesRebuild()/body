{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  DefaultFileHashCache fileHashCache=new DefaultFileHashCache(filesystem);
  InMemoryArtifactCache cache=new InMemoryArtifactCache();
  BuildContext buildContext=FakeBuildContext.newBuilder().setArtifactCache(cache).setJavaPackageFinder(new FakeJavaPackageFinder()).setActionGraph(new ActionGraph(ImmutableList.<BuildRule>of())).build();
  BuildTarget target=BuildTargetFactory.newInstance("//:rule");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(target).setProjectFilesystem(filesystem).build();
  BuildRuleResolver resolver=new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer());
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  FakeAbiRuleBuildRule rule=new FakeAbiRuleBuildRule(params,pathResolver);
  final AbiRuleKeyBuilderFactory abiRuleKeyBuilderFactory=new AbiRuleKeyBuilderFactory(fileHashCache,pathResolver,NOOP_RULE_KEY_FACTORY);
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(MoreExecutors.newDirectExecutorService(),fileHashCache,CachingBuildEngine.BuildMode.SHALLOW,CachingBuildEngine.DepFiles.ENABLED,pathResolver,Functions.constant(new CachingBuildEngine.RuleKeyFactories(NOOP_RULE_KEY_FACTORY,NOOP_RULE_KEY_FACTORY,abiRuleKeyBuilderFactory,NOOP_RULE_KEY_FACTORY)));
  filesystem.writeContentsToPath(new StringBuilder(abiRuleKeyBuilderFactory.build(rule).toString()).reverse().toString(),BuildInfo.getPathToMetadataDirectory(target).resolve(BuildInfo.METADATA_KEY_FOR_ABI_RULE_KEY));
  filesystem.writeContentsToPath(new ObjectMapper().writeValueAsString(ImmutableList.of()),BuildInfo.getPathToMetadataDirectory(target).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  BuildResult result=cachingBuildEngine.build(buildContext,rule).get();
  assertEquals(BuildRuleSuccessType.BUILT_LOCALLY,result.getSuccess());
}
