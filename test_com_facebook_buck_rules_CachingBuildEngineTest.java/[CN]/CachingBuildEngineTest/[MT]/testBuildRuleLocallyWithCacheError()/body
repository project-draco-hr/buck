{
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  ProjectFilesystem filesystem=new FakeProjectFilesystem(tmp.getRoot());
  DefaultFileHashCache fileHashCache=new DefaultFileHashCache(filesystem);
  ArtifactCache cache=new NoopArtifactCache(){
    @Override public CacheResult fetch(    RuleKey ruleKey,    Path output){
      return CacheResult.error("cache","error");
    }
  }
;
  BuildContext buildContext=FakeBuildContext.newBuilder().setArtifactCache(cache).setJavaPackageFinder(new FakeJavaPackageFinder()).setActionGraph(new ActionGraph(ImmutableList.<BuildRule>of())).build();
  BuildRule rule=new NoopBuildRule(new FakeBuildRuleParamsBuilder("//:rule").setProjectFilesystem(filesystem).build(),resolver);
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(MoreExecutors.newDirectExecutorService(),fileHashCache,CachingBuildEngine.BuildMode.SHALLOW,CachingBuildEngine.DepFiles.ENABLED,new BuildRuleResolver(TargetGraph.EMPTY,new BuildTargetNodeToBuildRuleTransformer()));
  BuildResult result=cachingBuildEngine.build(buildContext,rule).get();
  assertThat(result.getSuccess(),equalTo(BuildRuleSuccessType.BUILT_LOCALLY));
  assertThat(result.getCacheResult().getType(),equalTo(CacheResultType.ERROR));
}
