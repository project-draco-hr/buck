{
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver());
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  ArtifactCache cache=new NoopArtifactCache(){
    @Override public CacheResult fetch(    RuleKey ruleKey,    File output){
      return CacheResult.error("cache","error");
    }
  }
;
  BuildContext buildContext=FakeBuildContext.newBuilder(filesystem).setArtifactCache(cache).setJavaPackageFinder(new FakeJavaPackageFinder()).setActionGraph(new ActionGraph(ImmutableList.<BuildRule>of())).build();
  BuildRule rule=new NoopBuildRule(BuildRuleParamsFactory.createTrivialBuildRuleParams(BuildTargetFactory.newInstance("//:rule")),resolver);
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(MoreExecutors.newDirectExecutorService(),CachingBuildEngine.BuildMode.SHALLOW,NOOP_RULE_KEY_FACTORY);
  BuildResult result=cachingBuildEngine.build(buildContext,rule).get();
  assertThat(result.getSuccess(),Matchers.equalTo(BuildRuleSuccessType.BUILT_LOCALLY));
  assertThat(result.getCacheResult().getType(),Matchers.equalTo(CacheResult.Type.ERROR));
}
