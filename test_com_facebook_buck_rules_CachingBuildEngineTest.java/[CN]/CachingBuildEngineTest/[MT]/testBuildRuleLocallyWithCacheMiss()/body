{
  SourcePathResolver resolver=new SourcePathResolver(new BuildRuleResolver());
  BuildTarget depTarget=BuildTargetFactory.newInstance("//src/com/facebook/orca:lib");
  FakeBuildRule dep=new FakeBuildRule(depTarget,resolver);
  dep.setRuleKey(new RuleKey("19d2558a6bd3a34fb3f95412de9da27ed32fe208"));
  BuckEventBus buckEventBus=BuckEventBusFactory.newInstance();
  FakeBuckEventListener listener=new FakeBuckEventListener();
  buckEventBus.register(listener);
  ArtifactCache mockArtifactCache=createMock(ArtifactCache.class);
  ArtifactCache artifactCache=new LoggingArtifactCacheDecorator(buckEventBus).decorate(mockArtifactCache);
  replayAll();
  String pathToOutputFile="buck-out/gen/src/com/facebook/orca/some_file";
  List<Step> buildSteps=Lists.newArrayList();
  BuildRule ruleToTest=createRule(resolver,ImmutableSet.<BuildRule>of(dep),buildSteps,ImmutableList.<Step>of(),pathToOutputFile);
  verifyAll();
  resetAll();
  BuildContext context=createMock(BuildContext.class);
  expect(context.getProjectFilesystem()).andReturn(new FakeProjectFilesystem());
  expect(context.getArtifactCache()).andReturn(artifactCache).times(2);
  OnDiskBuildInfo onDiskBuildInfo=new FakeOnDiskBuildInfo();
  expect(context.createOnDiskBuildInfoFor(buildTarget)).andReturn(onDiskBuildInfo);
  BuildInfoRecorder buildInfoRecorder=createNiceMock(BuildInfoRecorder.class);
  Capture<RuleKey> ruleKeyForRecorder=newCapture();
  expect(context.createBuildInfoRecorder(eq(buildTarget),capture(ruleKeyForRecorder),anyObject(RuleKey.class))).andReturn(buildInfoRecorder);
  expect(buildInfoRecorder.fetchArtifactForBuildable(anyObject(File.class),eq(artifactCache))).andReturn(CacheResult.miss());
  expect(buildInfoRecorder.getOutputSizeAndHash(anyObject(HashFunction.class))).andReturn(new Pair<>(0L,HashCode.fromInt(0))).anyTimes();
  expect(context.getEventBus()).andReturn(buckEventBus).anyTimes();
  expect(context.getStepRunner()).andReturn(createStepRunner(buckEventBus)).anyTimes();
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(MoreExecutors.newDirectExecutorService(),CachingBuildEngine.BuildMode.SHALLOW);
  Step buildStep=createMock(Step.class);
  expect(buildStep.getDescription(anyObject(ExecutionContext.class))).andReturn("Some Description").anyTimes();
  expect(buildStep.getShortName()).andReturn("Some Short Name").anyTimes();
  expect(buildStep.execute(anyObject(ExecutionContext.class))).andReturn(0);
  buildSteps.add(buildStep);
  buildInfoRecorder.recordArtifact(Paths.get(pathToOutputFile));
  buildInfoRecorder.writeMetadataToDisk(true);
  buildInfoRecorder.performUploadToArtifactCache(ImmutableSet.of(ruleToTest.getRuleKey()),artifactCache,buckEventBus);
  replayAll();
  cachingBuildEngine.setBuildRuleResult(dep,BuildRuleSuccessType.FETCHED_FROM_CACHE,CacheResult.skip());
  BuildResult result=cachingBuildEngine.build(context,ruleToTest).get();
  assertEquals(BuildRuleSuccessType.BUILT_LOCALLY,result.getSuccess());
  buckEventBus.post(CommandEvent.finished("build",ImmutableList.<String>of(),false,0));
  verifyAll();
  List<BuckEvent> events=listener.getEvents();
  assertThat(events,Matchers.hasSize(11));
  Iterator<BuckEvent> eventIter=events.iterator();
  assertEquals(configureTestEvent(BuildRuleEvent.started(dep),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.suspended(dep),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.started(ruleToTest),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.finished(ruleToTest,BuildRuleStatus.SUCCESS,CacheResult.miss(),Optional.of(BuildRuleSuccessType.BUILT_LOCALLY),Optional.<HashCode>absent(),Optional.<Long>absent()),buckEventBus),events.get(events.size() - 2));
}
