{
  BuildTarget depTarget=BuildTargetFactory.newInstance("//src/com/facebook/orca:lib");
  BuildRule dep=createMock(BuildRule.class);
  BuckEventBus buckEventBus=BuckEventBusFactory.newInstance();
  FakeBuckEventListener listener=new FakeBuckEventListener();
  buckEventBus.register(listener);
  ArtifactCache mockArtifactCache=createMock(ArtifactCache.class);
  ArtifactCache artifactCache=new LoggingArtifactCacheDecorator(buckEventBus).decorate(mockArtifactCache);
  replayAll();
  String pathToOutputFile="buck-out/gen/src/com/facebook/orca/some_file";
  List<Step> buildSteps=Lists.newArrayList();
  BuildRule ruleToTest=createRule(new SourcePathResolver(new BuildRuleResolver()),ImmutableSet.of(dep),ImmutableList.of(Paths.get("/dev/null")),buildSteps,pathToOutputFile,CacheMode.ENABLED);
  verifyAll();
  resetAll();
  String expectedRuleKeyHash=Hashing.sha1().newHasher().putByte(RuleKey.Builder.SEPARATOR).putBytes("name".getBytes()).putByte(RuleKey.Builder.SEPARATOR).putBytes(ruleToTest.getFullyQualifiedName().getBytes()).putByte(RuleKey.Builder.SEPARATOR).putByte(RuleKey.Builder.SEPARATOR).putBytes("buck.type".getBytes()).putByte(RuleKey.Builder.SEPARATOR).putBytes("java_library".getBytes()).putByte(RuleKey.Builder.SEPARATOR).putByte(RuleKey.Builder.SEPARATOR).putBytes("buck.inputs".getBytes()).putByte(RuleKey.Builder.SEPARATOR).putBytes("ae8c0f860a0ecad94ecede79b69460434eddbfbc".getBytes()).putByte(RuleKey.Builder.SEPARATOR).putByte(RuleKey.Builder.SEPARATOR).putByte(RuleKey.Builder.SEPARATOR).putBytes("buck.sourcepaths".getBytes()).putByte(RuleKey.Builder.SEPARATOR).putBytes("/dev/null".getBytes()).putByte(RuleKey.Builder.SEPARATOR).putBytes("ae8c0f860a0ecad94ecede79b69460434eddbfbc".getBytes()).putByte(RuleKey.Builder.SEPARATOR).putByte(RuleKey.Builder.SEPARATOR).putByte(RuleKey.Builder.SEPARATOR).putBytes("deps".getBytes()).putByte(RuleKey.Builder.SEPARATOR).putBytes("19d2558a6bd3a34fb3f95412de9da27ed32fe208".getBytes()).putByte(RuleKey.Builder.SEPARATOR).putByte(RuleKey.Builder.SEPARATOR).hash().toString();
  BuildContext context=createMock(BuildContext.class);
  expect(context.getArtifactCache()).andReturn(artifactCache).times(2);
  expect(context.getProjectRoot()).andReturn(createMock(Path.class));
  OnDiskBuildInfo onDiskBuildInfo=new FakeOnDiskBuildInfo();
  expect(context.createOnDiskBuildInfoFor(buildTarget)).andReturn(onDiskBuildInfo);
  BuildInfoRecorder buildInfoRecorder=createMock(BuildInfoRecorder.class);
  Capture<RuleKey> ruleKeyForRecorder=newCapture();
  expect(context.createBuildInfoRecorder(eq(buildTarget),capture(ruleKeyForRecorder),anyObject(RuleKey.class))).andReturn(buildInfoRecorder);
  expect(buildInfoRecorder.fetchArtifactForBuildable(anyObject(File.class),eq(artifactCache))).andReturn(CacheResult.MISS);
  expect(context.getEventBus()).andReturn(buckEventBus).anyTimes();
  expect(context.getStepRunner()).andReturn(createSameThreadStepRunner(buckEventBus)).anyTimes();
  expect(dep.getBuildTarget()).andStubReturn(depTarget);
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine();
  cachingBuildEngine.setBuildRuleResult(depTarget,new BuildRuleSuccess(dep,BuildRuleSuccess.Type.FETCHED_FROM_CACHE));
  expect(dep.getRuleKey()).andReturn(new RuleKey("19d2558a6bd3a34fb3f95412de9da27ed32fe208"));
  Step buildStep=createMock(Step.class);
  expect(buildStep.getDescription(anyObject(ExecutionContext.class))).andReturn("Some Description").anyTimes();
  expect(buildStep.getShortName()).andReturn("Some Short Name").anyTimes();
  expect(buildStep.execute(anyObject(ExecutionContext.class))).andReturn(0);
  buildSteps.add(buildStep);
  buildInfoRecorder.recordArtifact(Paths.get(pathToOutputFile));
  buildInfoRecorder.writeMetadataToDisk(true);
  buildInfoRecorder.performUploadToArtifactCache(artifactCache,buckEventBus);
  replayAll();
  BuildRuleSuccess result=cachingBuildEngine.build(context,ruleToTest).get();
  assertEquals(BuildRuleSuccess.Type.BUILT_LOCALLY,result.getType());
  buckEventBus.post(CommandEvent.finished("build",ImmutableList.<String>of(),false,0));
  verifyAll();
  assertEquals(expectedRuleKeyHash,ruleKeyForRecorder.getValue().toString());
  List<BuckEvent> events=listener.getEvents();
  assertEquals(configureTestEvent(BuildRuleEvent.started(ruleToTest),buckEventBus),events.get(0));
  assertEquals(configureTestEvent(BuildRuleEvent.finished(ruleToTest,BuildRuleStatus.SUCCESS,CacheResult.MISS,Optional.of(BuildRuleSuccess.Type.BUILT_LOCALLY)),buckEventBus),events.get(events.size() - 2));
}
