{
  ProjectFilesystem filesystem=new FakeProjectFilesystem(tmp.getRoot());
  DefaultFileHashCache fileHashCache=new DefaultFileHashCache(filesystem);
  BuildRuleParams buildRuleParams=new FakeBuildRuleParamsBuilder(BUILD_TARGET).setProjectFilesystem(filesystem).build();
  TestAbstractCachingBuildRule buildRule=new TestAbstractCachingBuildRule(buildRuleParams,new SourcePathResolver(new BuildRuleResolver()));
  BuckEventBus buckEventBus=BuckEventBusFactory.newInstance();
  FakeBuckEventListener listener=new FakeBuckEventListener();
  buckEventBus.register(listener);
  BuildContext buildContext=FakeBuildContext.newBuilder(filesystem).setEventBus(buckEventBus).setJavaPackageFinder(new FakeJavaPackageFinder()).setActionGraph(new ActionGraph(ImmutableList.<BuildRule>of())).build();
  filesystem.writeContentsToPath(reverse(buildRule.getRuleKey()).toString(),BuildInfo.getPathToMetadataDirectory(BUILD_TARGET).resolve(BuildInfo.METADATA_KEY_FOR_RULE_KEY));
  filesystem.writeContentsToPath(buildRule.getRuleKeyWithoutDeps().toString(),BuildInfo.getPathToMetadataDirectory(BUILD_TARGET).resolve(BuildInfo.METADATA_KEY_FOR_RULE_KEY_WITHOUT_DEPS));
  filesystem.writeContentsToPath(TestAbstractCachingBuildRule.ABI_KEY_FOR_DEPS_HASH,BuildInfo.getPathToMetadataDirectory(BUILD_TARGET).resolve(CachingBuildEngine.ABI_KEY_FOR_DEPS_ON_DISK_METADATA));
  filesystem.writeContentsToPath("At some point, this method call should go away.",BuildInfo.getPathToMetadataDirectory(BUILD_TARGET).resolve(AbiRule.ABI_KEY_ON_DISK_METADATA));
  filesystem.writeContentsToPath(new ObjectMapper().writeValueAsString(ImmutableList.of()),BuildInfo.getPathToMetadataDirectory(BUILD_TARGET).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(MoreExecutors.newDirectExecutorService(),fileHashCache,CachingBuildEngine.BuildMode.SHALLOW,CachingBuildEngine.DepFiles.ENABLED,NOOP_RULE_KEY_FACTORY,NOOP_RULE_KEY_FACTORY);
  ListenableFuture<BuildResult> buildResult=cachingBuildEngine.build(buildContext,buildRule);
  buckEventBus.post(CommandEvent.finished(CommandEvent.started("build",ImmutableList.<String>of(),false),0));
  BuildResult result=buildResult.get();
  assertEquals(BuildRuleSuccessType.MATCHING_DEPS_ABI_AND_RULE_KEY_NO_DEPS,result.getSuccess());
  assertTrue(buildRule.isAbiLoadedFromDisk());
  List<BuckEvent> events=listener.getEvents();
  assertThat(events,Matchers.hasSize(7));
  Iterator<BuckEvent> eventIter=events.iterator();
  assertEquals(configureTestEvent(BuildRuleEvent.started(buildRule),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.suspended(buildRule),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.resumed(buildRule),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.suspended(buildRule),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.resumed(buildRule),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.finished(buildRule,BuildRuleStatus.SUCCESS,CacheResult.localKeyUnchangedHit(),Optional.of(BuildRuleSuccessType.MATCHING_DEPS_ABI_AND_RULE_KEY_NO_DEPS),Optional.<HashCode>absent(),Optional.<Long>absent()),buckEventBus),eventIter.next());
}
