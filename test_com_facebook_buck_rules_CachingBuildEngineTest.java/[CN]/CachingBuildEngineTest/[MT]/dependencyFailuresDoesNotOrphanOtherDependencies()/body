{
  ListeningExecutorService service=listeningDecorator(Executors.newFixedThreadPool(2));
  BuildRuleResolver resolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem(tmp.getRoot());
  DefaultFileHashCache fileHashCache=new DefaultFileHashCache(filesystem);
  InMemoryArtifactCache cache=new InMemoryArtifactCache();
  BuildContext buildContext=FakeBuildContext.newBuilder().setArtifactCache(cache).setJavaPackageFinder(new FakeJavaPackageFinder()).setActionGraph(new ActionGraph(ImmutableList.<BuildRule>of())).build();
  BuildRule dep1=new RuleWithSteps(new FakeBuildRuleParamsBuilder(BuildTargetFactory.newInstance("//:dep1")).setProjectFilesystem(filesystem).build(),pathResolver,ImmutableList.<Step>of(new FailingStep()),null);
  BuildRule dep2=new RuleWithSteps(new FakeBuildRuleParamsBuilder(BuildTargetFactory.newInstance("//:dep2")).setDeps(ImmutableSortedSet.of(dep1)).setProjectFilesystem(filesystem).build(),pathResolver,ImmutableList.<Step>of(new SleepStep(0)),null);
  BuildRule dep3=new RuleWithSteps(new FakeBuildRuleParamsBuilder(BuildTargetFactory.newInstance("//:dep3")).setProjectFilesystem(filesystem).build(),pathResolver,ImmutableList.<Step>of(new SleepStep(300)),null);
  BuildRule dep4=new RuleWithSteps(new FakeBuildRuleParamsBuilder(BuildTargetFactory.newInstance("//:dep4")).setDeps(ImmutableSortedSet.of(dep3)).setProjectFilesystem(filesystem).build(),pathResolver,ImmutableList.<Step>of(new SleepStep(300)),null);
  BuildRule rule=new RuleWithSteps(new FakeBuildRuleParamsBuilder(BuildTargetFactory.newInstance("//:rule")).setDeps(ImmutableSortedSet.of(dep2,dep4)).setProjectFilesystem(filesystem).build(),pathResolver,ImmutableList.<Step>of(new SleepStep(1000)),null);
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(service,fileHashCache,CachingBuildEngine.BuildMode.DEEP,CachingBuildEngine.DepFiles.ENABLED,new SourcePathResolver(new BuildRuleResolver()));
  BuildResult result=cachingBuildEngine.build(buildContext,rule).get();
  assertTrue(service.shutdownNow().isEmpty());
  assertThat(result.getStatus(),equalTo(BuildRuleStatus.CANCELED));
  assertThat(Preconditions.checkNotNull(cachingBuildEngine.getBuildRuleResult(dep1.getBuildTarget())).getStatus(),equalTo(BuildRuleStatus.FAIL));
  assertThat(Preconditions.checkNotNull(cachingBuildEngine.getBuildRuleResult(dep2.getBuildTarget())).getStatus(),equalTo(BuildRuleStatus.CANCELED));
  assertThat(Preconditions.checkNotNull(cachingBuildEngine.getBuildRuleResult(dep3.getBuildTarget())).getStatus(),Matchers.oneOf(BuildRuleStatus.SUCCESS,BuildRuleStatus.CANCELED));
  assertThat(Preconditions.checkNotNull(cachingBuildEngine.getBuildRuleResult(dep4.getBuildTarget())).getStatus(),Matchers.oneOf(BuildRuleStatus.SUCCESS,BuildRuleStatus.CANCELED));
}
