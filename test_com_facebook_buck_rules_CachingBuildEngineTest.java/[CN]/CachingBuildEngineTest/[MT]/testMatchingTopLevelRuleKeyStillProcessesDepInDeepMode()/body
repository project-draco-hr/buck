{
  BuildRuleResolver resolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ArtifactCache cache=new NoopArtifactCache();
  BuckEventBus buckEventBus=BuckEventBusFactory.newInstance();
  FakeBuckEventListener listener=new FakeBuckEventListener();
  buckEventBus.register(listener);
  BuildTarget depTarget=BuildTargetFactory.newInstance("//src/com/facebook/orca:lib");
  FakeBuildRule dep=new FakeBuildRule(depTarget,pathResolver);
  dep.setRuleKey(new RuleKey("aaaa"));
  FakeBuildRule ruleToTest=new FakeBuildRule(buildTarget,pathResolver,dep);
  ruleToTest.setRuleKey(new RuleKey("bbbb"));
  BuildContext context=createMock(BuildContext.class);
  expect(context.getArtifactCache()).andReturn(cache).anyTimes();
  expect(context.getEventBus()).andReturn(buckEventBus).anyTimes();
  expect(context.getStepRunner()).andReturn(createStepRunner(buckEventBus)).anyTimes();
  expect(context.createOnDiskBuildInfoFor(buildTarget)).andReturn(new FakeOnDiskBuildInfo().setRuleKey(ruleToTest.getRuleKey()));
  expect(context.createOnDiskBuildInfoFor(dep.getBuildTarget())).andReturn(new FakeOnDiskBuildInfo().setRuleKey(dep.getRuleKey()));
  BuildInfoRecorder buildInfoRecorder=createNiceMock(BuildInfoRecorder.class);
  expect(buildInfoRecorder.getOutputSizeAndHash(anyObject(HashFunction.class))).andReturn(new Pair<>(0L,HashCode.fromInt(0))).anyTimes();
  expect(context.createBuildInfoRecorder(anyObject(BuildTarget.class),anyObject(RuleKey.class),anyObject(RuleKey.class))).andReturn(buildInfoRecorder).anyTimes();
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(MoreExecutors.newDirectExecutorService(),CachingBuildEngine.BuildMode.DEEP,NOOP_RULE_KEY_FACTORY);
  replayAll();
  BuildResult result=cachingBuildEngine.build(context,ruleToTest).get();
  assertEquals(BuildRuleSuccessType.MATCHING_RULE_KEY,result.getSuccess());
  verifyAll();
  List<BuckEvent> events=listener.getEvents();
  assertThat(events,Matchers.hasSize(8));
  Iterator<BuckEvent> eventIter=events.iterator();
  assertEquals(configureTestEvent(BuildRuleEvent.started(dep),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.suspended(dep),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.started(ruleToTest),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.suspended(ruleToTest),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.resumed(ruleToTest),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.resumed(dep),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.finished(dep,BuildRuleStatus.SUCCESS,CacheResult.localKeyUnchangedHit(),Optional.of(BuildRuleSuccessType.MATCHING_RULE_KEY),Optional.<HashCode>absent(),Optional.<Long>absent()),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.finished(ruleToTest,BuildRuleStatus.SUCCESS,CacheResult.localKeyUnchangedHit(),Optional.of(BuildRuleSuccessType.MATCHING_RULE_KEY),Optional.<HashCode>absent(),Optional.<Long>absent()),buckEventBus),eventIter.next());
}
