{
  BuildRuleResolver resolver=new BuildRuleResolver();
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ArtifactCache cache=new NoopArtifactCache();
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  BuckEventBus buckEventBus=BuckEventBusFactory.newInstance();
  FakeBuckEventListener listener=new FakeBuckEventListener();
  buckEventBus.register(listener);
  BuildTarget depTarget=BuildTargetFactory.newInstance("//src/com/facebook/orca:lib");
  FakeBuildRule dep=new FakeBuildRule(depTarget,pathResolver);
  dep.setRuleKey(new RuleKey("aaaa"));
  filesystem.writeContentsToPath(dep.getRuleKey().toString(),BuildInfo.getPathToMetadataDirectory(depTarget).resolve(BuildInfo.METADATA_KEY_FOR_RULE_KEY));
  filesystem.writeContentsToPath(new ObjectMapper().writeValueAsString(ImmutableList.of()),BuildInfo.getPathToMetadataDirectory(depTarget).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  FakeBuildRule ruleToTest=new FakeBuildRule(buildTarget,pathResolver,dep);
  ruleToTest.setRuleKey(new RuleKey("bbbb"));
  filesystem.writeContentsToPath(ruleToTest.getRuleKey().toString(),BuildInfo.getPathToMetadataDirectory(buildTarget).resolve(BuildInfo.METADATA_KEY_FOR_RULE_KEY));
  filesystem.writeContentsToPath(new ObjectMapper().writeValueAsString(ImmutableList.of()),BuildInfo.getPathToMetadataDirectory(buildTarget).resolve(BuildInfo.METADATA_KEY_FOR_RECORDED_PATHS));
  BuildContext context=FakeBuildContext.newBuilder(filesystem).setArtifactCache(cache).setEventBus(buckEventBus).setJavaPackageFinder(new FakeJavaPackageFinder()).setActionGraph(new ActionGraph(ImmutableList.<BuildRule>of())).build();
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(MoreExecutors.newDirectExecutorService(),CachingBuildEngine.BuildMode.DEEP,NOOP_RULE_KEY_FACTORY);
  BuildResult result=cachingBuildEngine.build(context,ruleToTest).get();
  assertEquals(BuildRuleSuccessType.MATCHING_RULE_KEY,result.getSuccess());
  List<BuckEvent> events=listener.getEvents();
  assertThat(events,Matchers.hasSize(8));
  Iterator<BuckEvent> eventIter=events.iterator();
  assertEquals(configureTestEvent(BuildRuleEvent.started(dep),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.suspended(dep),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.started(ruleToTest),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.suspended(ruleToTest),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.resumed(ruleToTest),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.resumed(dep),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.finished(dep,BuildRuleStatus.SUCCESS,CacheResult.localKeyUnchangedHit(),Optional.of(BuildRuleSuccessType.MATCHING_RULE_KEY),Optional.<HashCode>absent(),Optional.<Long>absent()),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.finished(ruleToTest,BuildRuleStatus.SUCCESS,CacheResult.localKeyUnchangedHit(),Optional.of(BuildRuleSuccessType.MATCHING_RULE_KEY),Optional.<HashCode>absent(),Optional.<Long>absent()),buckEventBus),eventIter.next());
}
