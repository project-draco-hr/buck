{
  BuckEventBus buckEventBus=BuckEventBusFactory.newInstance();
  StepRunner stepRunner=createStepRunner(buckEventBus);
  ProjectFilesystem projectFilesystem=createMock(ProjectFilesystem.class);
  expect(projectFilesystem.readFileIfItExists(Paths.get("buck-out/bin/src/com/facebook/orca/.orca/metadata/RULE_KEY"))).andReturn(Optional.<String>absent());
  expect(projectFilesystem.getRootPath()).andReturn(tmp.getRoot().toPath());
  Step buildStep=createMock(Step.class);
  expect(buildStep.getDescription(anyObject(ExecutionContext.class))).andReturn("Some Description").anyTimes();
  expect(buildStep.getShortName()).andReturn("Some Short Name").anyTimes();
  expect(buildStep.execute(anyObject(ExecutionContext.class))).andReturn(0);
  BuildRule buildRule=createRule(new SourcePathResolver(new BuildRuleResolver()),ImmutableSet.<BuildRule>of(),ImmutableList.<Step>of(),ImmutableList.of(buildStep),null,CacheMode.ENABLED);
  ArtifactCache artifactCache=createMock(ArtifactCache.class);
  Map<String,String> desiredZipEntries=ImmutableMap.of("buck-out/gen/src/com/facebook/orca/orca.jar","Imagine this is the contents of a valid JAR file.");
  expect(artifactCache.fetch(eq(buildRule.getRuleKey()),isA(File.class))).andDelegateTo(new FakeArtifactCacheThatWritesAZipFile(desiredZipEntries));
  BuildContext buildContext=ImmutableBuildContext.builder().setActionGraph(RuleMap.createGraphFromSingleRule(buildRule)).setStepRunner(stepRunner).setProjectFilesystem(projectFilesystem).setClock(new DefaultClock()).setBuildId(new BuildId()).setArtifactCache(artifactCache).setJavaPackageFinder(createMock(JavaPackageFinder.class)).setEventBus(buckEventBus).build();
  replayAll();
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(MoreExecutors.newDirectExecutorService());
  ListenableFuture<BuildResult> buildResult=cachingBuildEngine.build(buildContext,buildRule);
  buckEventBus.post(CommandEvent.finished("build",ImmutableList.<String>of(),false,0));
  verifyAll();
  BuildResult result=buildResult.get();
  assertEquals(BuildRuleSuccess.Type.FETCHED_FROM_CACHE,result.getSuccess());
  assertTrue(((BuildableAbstractCachingBuildRule)buildRule).isInitializedFromDisk());
  assertTrue("The entries in the zip should be extracted as a result of building the rule.",new File(tmp.getRoot(),"buck-out/gen/src/com/facebook/orca/orca.jar").isFile());
}
