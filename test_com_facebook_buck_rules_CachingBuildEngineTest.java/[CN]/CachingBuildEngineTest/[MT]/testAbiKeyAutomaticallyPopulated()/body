{
  BuildRuleParams buildRuleParams=new FakeBuildRuleParamsBuilder(buildTarget).build();
  TestAbstractCachingBuildRule buildRule=new LocallyBuiltTestAbstractCachingBuildRule(buildRuleParams,new SourcePathResolver(new BuildRuleResolver()));
  BuckEventBus buckEventBus=BuckEventBusFactory.newInstance();
  FakeBuckEventListener listener=new FakeBuckEventListener();
  buckEventBus.register(listener);
  BuildContext buildContext=createMock(BuildContext.class);
  expect(buildContext.getProjectRoot()).andReturn(createMock(Path.class));
  NoopArtifactCache artifactCache=new NoopArtifactCache();
  expect(buildContext.getArtifactCache()).andStubReturn(artifactCache);
  expect(buildContext.getStepRunner()).andStubReturn(null);
  BuildInfoRecorder buildInfoRecorder=createMock(BuildInfoRecorder.class);
  expect(buildContext.createBuildInfoRecorder(eq(buildTarget),anyObject(RuleKey.class),anyObject(RuleKey.class))).andReturn(buildInfoRecorder);
  expect(buildInfoRecorder.fetchArtifactForBuildable(anyObject(File.class),eq(artifactCache))).andReturn(CacheResult.MISS);
  OnDiskBuildInfo onDiskBuildInfo=new FakeOnDiskBuildInfo();
  buildInfoRecorder.addMetadata(CachingBuildEngine.ABI_KEY_FOR_DEPS_ON_DISK_METADATA,TestAbstractCachingBuildRule.ABI_KEY_FOR_DEPS_HASH);
  buildInfoRecorder.writeMetadataToDisk(true);
  buildInfoRecorder.performUploadToArtifactCache(artifactCache,buckEventBus);
  expect(buildContext.createOnDiskBuildInfoFor(buildTarget)).andReturn(onDiskBuildInfo);
  expect(buildContext.getStepRunner()).andReturn(createStepRunner());
  expect(buildContext.getEventBus()).andReturn(buckEventBus).anyTimes();
  replayAll();
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(MoreExecutors.newDirectExecutorService());
  ListenableFuture<BuildRuleSuccess> result=cachingBuildEngine.build(buildContext,buildRule);
  buckEventBus.post(CommandEvent.finished("build",ImmutableList.<String>of(),false,0));
  BuildRuleSuccess success=result.get();
  assertEquals(BuildRuleSuccess.Type.BUILT_LOCALLY,success.getType());
  List<BuckEvent> events=listener.getEvents();
  assertEquals(events.get(0),configureTestEvent(BuildRuleEvent.started(buildRule),buckEventBus));
  assertEquals(events.get(1),configureTestEvent(BuildRuleEvent.finished(buildRule,BuildRuleStatus.SUCCESS,CacheResult.MISS,Optional.of(BuildRuleSuccess.Type.BUILT_LOCALLY)),buckEventBus));
  verifyAll();
}
