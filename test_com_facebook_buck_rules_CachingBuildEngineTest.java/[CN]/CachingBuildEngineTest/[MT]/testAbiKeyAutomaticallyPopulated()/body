{
  ProjectFilesystem filesystem=new FakeProjectFilesystem();
  DefaultFileHashCache fileHashCache=new DefaultFileHashCache(filesystem);
  BuildRuleParams buildRuleParams=new FakeBuildRuleParamsBuilder(buildTarget).build();
  TestAbstractCachingBuildRule buildRule=new LocallyBuiltTestAbstractCachingBuildRule(buildRuleParams,new SourcePathResolver(new BuildRuleResolver()));
  BuckEventBus buckEventBus=BuckEventBusFactory.newInstance();
  FakeBuckEventListener listener=new FakeBuckEventListener();
  buckEventBus.register(listener);
  BuildContext buildContext=FakeBuildContext.newBuilder(filesystem).setEventBus(buckEventBus).setArtifactCache(new NoopArtifactCache()).setJavaPackageFinder(new FakeJavaPackageFinder()).setActionGraph(new ActionGraph(ImmutableList.<BuildRule>of())).build();
  CachingBuildEngine cachingBuildEngine=new CachingBuildEngine(MoreExecutors.newDirectExecutorService(),fileHashCache,CachingBuildEngine.BuildMode.SHALLOW,CachingBuildEngine.DepFiles.ENABLED,NOOP_RULE_KEY_FACTORY,NOOP_RULE_KEY_FACTORY);
  ListenableFuture<BuildResult> buildResult=cachingBuildEngine.build(buildContext,buildRule);
  buckEventBus.post(CommandEvent.finished(CommandEvent.started("build",ImmutableList.<String>of(),false),0));
  OnDiskBuildInfo onDiskBuildInfo=buildContext.createOnDiskBuildInfoFor(buildTarget.getBuildTarget());
  assertEquals(Optional.of(new RuleKey(TestAbstractCachingBuildRule.ABI_KEY_FOR_DEPS_HASH)),onDiskBuildInfo.getRuleKey(CachingBuildEngine.ABI_KEY_FOR_DEPS_ON_DISK_METADATA));
  BuildResult result=buildResult.get();
  assertEquals(BuildRuleSuccessType.BUILT_LOCALLY,result.getSuccess());
  List<BuckEvent> events=listener.getEvents();
  assertThat(events,Matchers.hasSize(7));
  Iterator<BuckEvent> eventIter=events.iterator();
  assertEquals(configureTestEvent(BuildRuleEvent.started(buildRule),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.suspended(buildRule),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.resumed(buildRule),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.suspended(buildRule),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.resumed(buildRule),buckEventBus),eventIter.next());
  assertEquals(configureTestEvent(BuildRuleEvent.finished(buildRule,BuildRuleStatus.SUCCESS,CacheResult.miss(),Optional.of(BuildRuleSuccessType.BUILT_LOCALLY),Optional.<HashCode>absent(),Optional.<Long>absent()),buckEventBus),eventIter.next());
}
