{
  populateCxxConstructorArg(resolver,output,arg,buildTarget);
  Path headerPathPrefix=AppleDescriptions.getHeaderPathPrefix(arg,buildTarget);
  output.headers=Optional.of(SourceList.ofNamedSources(convertAppleHeadersToPrivateCxxHeaders(resolver.deprecatedPathFunction(),headerPathPrefix,arg)));
  output.exportedDeps=arg.exportedDeps;
  output.exportedPreprocessorFlags=arg.exportedPreprocessorFlags;
  output.exportedHeaders=Optional.of(SourceList.ofNamedSources(convertAppleHeadersToPublicCxxHeaders(resolver.deprecatedPathFunction(),headerPathPrefix,arg)));
  output.exportedPlatformHeaders=arg.exportedPlatformHeaders;
  output.exportedPlatformPreprocessorFlags=arg.exportedPlatformPreprocessorFlags;
  output.exportedLangPreprocessorFlags=arg.exportedLangPreprocessorFlags;
  output.exportedLinkerFlags=arg.exportedLinkerFlags;
  output.exportedPlatformLinkerFlags=arg.exportedPlatformLinkerFlags;
  output.soname=arg.soname;
  output.forceStatic=arg.forceStatic;
  output.preferredLinkage=arg.preferredLinkage;
  output.linkWhole=arg.linkWhole;
  output.supportedPlatformsRegex=arg.supportedPlatformsRegex;
  output.canBeAsset=arg.canBeAsset;
  output.exportedDeps=arg.exportedDeps;
}
