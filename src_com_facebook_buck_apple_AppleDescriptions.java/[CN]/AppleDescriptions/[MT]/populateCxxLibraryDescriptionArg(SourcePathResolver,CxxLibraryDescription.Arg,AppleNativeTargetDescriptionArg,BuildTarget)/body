{
  populateCxxConstructorArg(resolver,output,arg,buildTarget);
  Path headerPathPrefix=AppleDescriptions.getHeaderPathPrefix(arg,buildTarget);
  output.headers=Optional.of(SourceList.ofNamedSources(convertAppleHeadersToPrivateCxxHeaders(resolver.deprecatedPathFunction(),headerPathPrefix,arg)));
  output.exportedDeps=arg.exportedDeps;
  output.exportedPreprocessorFlags=arg.exportedPreprocessorFlags;
  output.exportedHeaders=Optional.of(SourceList.ofNamedSources(convertAppleHeadersToPublicCxxHeaders(resolver.deprecatedPathFunction(),headerPathPrefix,arg)));
  output.exportedPlatformHeaders=Optional.of(PatternMatchedCollection.<SourceList>of());
  output.exportedPlatformPreprocessorFlags=Optional.of(PatternMatchedCollection.<ImmutableList<String>>of());
  output.exportedLangPreprocessorFlags=Optional.of(ImmutableMap.<CxxSource.Type,ImmutableList<String>>of());
  output.exportedLinkerFlags=arg.exportedLinkerFlags;
  output.exportedPlatformLinkerFlags=arg.exportedPlatformLinkerFlags;
  output.soname=Optional.absent();
  output.forceStatic=Optional.of(false);
  output.linkWhole=arg.linkWhole;
  output.supportedPlatformsRegex=arg.supportedPlatformsRegex;
  output.canBeAsset=arg.canBeAsset;
  output.exportedDeps=arg.exportedDeps;
}
