{
  AppleCxxPlatform appleCxxPlatform=ApplePlatforms.getAppleCxxPlatformForBuildTarget(cxxPlatformFlavorDomain,defaultCxxPlatform,appleCxxPlatforms,params.getBuildTarget(),MultiarchFileInfos.create(appleCxxPlatforms,params.getBuildTarget()));
  AppleBundleDestinations destinations=null;
  if (extension.isLeft() && extension.getLeft().equals(AppleBundleExtension.FRAMEWORK)) {
    destinations=AppleBundleDestinations.platformFrameworkDestinations(appleCxxPlatform.getAppleSdk().getApplePlatform());
  }
 else {
    destinations=AppleBundleDestinations.platformDestinations(appleCxxPlatform.getAppleSdk().getApplePlatform());
  }
  AppleBundleResources collectedResources=AppleResources.collectResourceDirsAndFiles(targetGraph,targetGraph.get(params.getBuildTarget()));
  ImmutableSet.Builder<SourcePath> frameworksBuilder=ImmutableSet.builder();
  if (INCLUDE_FRAMEWORKS.getRequiredValue(params.getBuildTarget())) {
    for (    BuildTarget dep : deps) {
      Optional<FrameworkDependencies> frameworkDependencies=resolver.requireMetadata(BuildTarget.builder(dep).addFlavors(FRAMEWORK_FLAVOR).addFlavors(NO_INCLUDE_FRAMEWORKS_FLAVOR).addFlavors(appleCxxPlatform.getCxxPlatform().getFlavor()).build(),FrameworkDependencies.class);
      if (frameworkDependencies.isPresent()) {
        frameworksBuilder.addAll(frameworkDependencies.get().getSourcePaths());
      }
    }
  }
  ImmutableSet<SourcePath> frameworks=frameworksBuilder.build();
  SourcePathResolver sourcePathResolver=new SourcePathResolver(resolver);
  BuildRuleParams paramsWithoutBundleSpecificFlavors=stripBundleSpecificFlavors(params);
  Optional<AppleAssetCatalog> assetCatalog=createBuildRuleForTransitiveAssetCatalogDependencies(targetGraph,paramsWithoutBundleSpecificFlavors,sourcePathResolver,appleCxxPlatform.getAppleSdk().getApplePlatform(),appleCxxPlatform.getActool());
  BuildRule flavoredBinaryRule=getFlavoredBinaryRule(cxxPlatformFlavorDomain,defaultCxxPlatform,targetGraph,paramsWithoutBundleSpecificFlavors.getBuildTarget().getFlavors(),resolver,binary);
  if (!AppleDebuggableBinary.isBuildRuleDebuggable(flavoredBinaryRule)) {
    debugFormat=AppleDebugFormat.NONE;
  }
  BuildTarget unstrippedTarget=flavoredBinaryRule.getBuildTarget().withoutFlavors(ImmutableSet.of(CxxStrip.RULE_FLAVOR)).withoutFlavors(StripStyle.FLAVOR_DOMAIN.getFlavors()).withoutFlavors(ImmutableSet.of(AppleDebuggableBinary.RULE_FLAVOR)).withoutFlavors(AppleDebugFormat.FLAVOR_DOMAIN.getFlavors()).withoutFlavors(ImmutableSet.of(AppleBinaryDescription.APP_FLAVOR));
  BuildRule unstrippedBinaryRule=resolver.requireRule(unstrippedTarget);
  BuildRule targetDebuggableBinaryRule;
  Optional<AppleDsym> appleDsym;
  if (unstrippedBinaryRule instanceof ProvidesLinkedBinaryDeps) {
    BuildTarget binaryBuildTarget=getBinaryFromBuildRuleWithBinary(flavoredBinaryRule).getBuildTarget().withoutFlavors(AppleDebugFormat.FLAVOR_DOMAIN.getFlavors());
    BuildRuleParams binaryParams=params.copyWithBuildTarget(binaryBuildTarget);
    targetDebuggableBinaryRule=createAppleDebuggableBinary(binaryParams,resolver,getBinaryFromBuildRuleWithBinary(flavoredBinaryRule),(ProvidesLinkedBinaryDeps)unstrippedBinaryRule,debugFormat,cxxPlatformFlavorDomain,defaultCxxPlatform,appleCxxPlatforms);
    appleDsym=createAppleDsymForDebugFormat(debugFormat,binaryParams,resolver,(ProvidesLinkedBinaryDeps)unstrippedBinaryRule,cxxPlatformFlavorDomain,defaultCxxPlatform,appleCxxPlatforms);
  }
 else {
    targetDebuggableBinaryRule=unstrippedBinaryRule;
    appleDsym=Optional.absent();
  }
  BuildRuleParams bundleParamsWithFlavoredBinaryDep=getBundleParamsWithUpdatedDeps(params,binary,ImmutableSet.<BuildRule>builder().add(targetDebuggableBinaryRule).addAll(assetCatalog.asSet()).addAll(BuildRules.toBuildRulesFor(params.getBuildTarget(),resolver,SourcePaths.filterBuildTargetSourcePaths(Iterables.concat(ImmutableList.of(collectedResources.getAll(),frameworks))))).addAll(appleDsym.asSet()).build());
  ImmutableMap<SourcePath,String> extensionBundlePaths=collectFirstLevelAppleDependencyBundles(params.getDeps(),destinations);
  return new AppleBundle(bundleParamsWithFlavoredBinaryDep,sourcePathResolver,extension,productName,infoPlist,infoPlistSubstitutions.get(),Optional.of(getBinaryFromBuildRuleWithBinary(flavoredBinaryRule)),appleDsym,destinations,collectedResources,extensionBundlePaths,frameworks,appleCxxPlatform,assetCatalog,tests,codeSignIdentityStore,provisioningProfileStore);
}
