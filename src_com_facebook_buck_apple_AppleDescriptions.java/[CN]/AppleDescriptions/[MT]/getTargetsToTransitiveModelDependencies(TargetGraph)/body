{
  Map<BuildTarget,Set<TargetNode<GraphQLDataDescription.Arg>>> targetsToTransitiveModelDependencies=new HashMap<>();
  for (  TargetNode<?> node : targetGraph.getNodes()) {
    if (node.getType().equals(GraphQLDataDescription.TYPE)) {
      TargetNode<GraphQLDataDescription.Arg> model=node.castArg(GraphQLDataDescription.Arg.class).get();
      Set<TargetNode<?>> visited=new HashSet<>();
      for (      TargetNode<?> dependent : targetGraph.getIncomingNodesFor(model)) {
        addAllTransitiveDependents(targetGraph,targetsToTransitiveModelDependencies,dependent,model,visited);
      }
    }
  }
  return ImmutableMap.copyOf(Maps.transformValues(targetsToTransitiveModelDependencies,new Function<Set<TargetNode<GraphQLDataDescription.Arg>>,ImmutableSet<TargetNode<GraphQLDataDescription.Arg>>>(){
    @Override public ImmutableSet<TargetNode<GraphQLDataDescription.Arg>> apply(    Set<TargetNode<GraphQLDataDescription.Arg>> input){
      return ImmutableSet.copyOf(input);
    }
  }
));
}
