{
  AppleCxxPlatform appleCxxPlatform=ApplePlatforms.getAppleCxxPlatformForBuildTarget(cxxPlatformFlavorDomain,defaultCxxPlatform,appleCxxPlatforms,params.getBuildTarget(),FatBinaryInfos.create(appleCxxPlatforms,params.getBuildTarget()));
  AppleBundleDestinations destinations=AppleBundleDestinations.platformDestinations(appleCxxPlatform.getAppleSdk().getApplePlatform());
  ImmutableSet.Builder<SourcePath> bundleDirsBuilder=ImmutableSet.builder();
  ImmutableSet.Builder<SourcePath> dirsContainingResourceDirsBuilder=ImmutableSet.builder();
  ImmutableSet.Builder<SourcePath> bundleFilesBuilder=ImmutableSet.builder();
  ImmutableSet.Builder<SourcePath> bundleVariantFilesBuilder=ImmutableSet.builder();
  AppleResources.collectResourceDirsAndFiles(targetGraph,targetGraph.get(params.getBuildTarget()),bundleDirsBuilder,dirsContainingResourceDirsBuilder,bundleFilesBuilder,bundleVariantFilesBuilder);
  ImmutableSet<SourcePath> bundleDirs=bundleDirsBuilder.build();
  ImmutableSet<SourcePath> dirsContainingResourceDirs=dirsContainingResourceDirsBuilder.build();
  ImmutableSet<SourcePath> bundleFiles=bundleFilesBuilder.build();
  ImmutableSet<SourcePath> bundleVariantFiles=bundleVariantFilesBuilder.build();
  ImmutableSet.Builder<SourcePath> frameworksBuilder=ImmutableSet.builder();
  if (INCLUDE_FRAMEWORKS.getRequiredValue(params.getBuildTarget())) {
    for (    BuildTarget dep : deps) {
      Optional<FrameworkDependencies> frameworkDependencies=resolver.requireMetadata(BuildTarget.builder(dep).addFlavors(FRAMEWORK_FLAVOR).addFlavors(NO_INCLUDE_FRAMEWORKS_FLAVOR).addFlavors(appleCxxPlatform.getCxxPlatform().getFlavor()).build(),FrameworkDependencies.class);
      if (frameworkDependencies.isPresent()) {
        frameworksBuilder.addAll(frameworkDependencies.get().getSourcePaths());
      }
    }
  }
  ImmutableSet<SourcePath> frameworks=frameworksBuilder.build();
  SourcePathResolver sourcePathResolver=new SourcePathResolver(resolver);
  Optional<AppleAssetCatalog> assetCatalog=createBuildRuleForTransitiveAssetCatalogDependencies(targetGraph,params,sourcePathResolver,appleCxxPlatform.getAppleSdk().getApplePlatform(),appleCxxPlatform.getActool());
  BuildRule flavoredBinaryRule=getFlavoredBinaryRule(cxxPlatformFlavorDomain,defaultCxxPlatform,targetGraph,params.getBuildTarget().getFlavors(),resolver,binary);
  BuildRuleParams bundleParamsWithFlavoredBinaryDep=getBundleParamsWithUpdatedDeps(params,binary,ImmutableSet.<BuildRule>builder().add(flavoredBinaryRule).addAll(assetCatalog.asSet()).addAll(BuildRules.toBuildRulesFor(params.getBuildTarget(),resolver,SourcePaths.filterBuildTargetSourcePaths(Iterables.concat(ImmutableList.of(bundleFiles,bundleDirs,dirsContainingResourceDirs,bundleVariantFiles,frameworks))))).build());
  ImmutableMap<SourcePath,String> extensionBundlePaths=collectFirstLevelAppleDependencyBundles(params.getDeps(),destinations);
  return new AppleBundle(bundleParamsWithFlavoredBinaryDep,sourcePathResolver,extension,productName,infoPlist,infoPlistSubstitutions.get(),Optional.of(flavoredBinaryRule),destinations,bundleDirs,bundleFiles,dirsContainingResourceDirs,extensionBundlePaths,Optional.of(bundleVariantFiles),frameworks,appleCxxPlatform,assetCatalog,tests,codeSignIdentityStore,provisioningProfileStore);
}
