{
  Path headerPathPrefix=AppleDescriptions.getHeaderPathPrefix(arg,buildTarget);
  ImmutableSortedMap<String,SourcePath> headerMap=ImmutableSortedMap.<String,SourcePath>naturalOrder().putAll(convertAppleHeadersToPublicCxxHeaders(resolver.getPathFunction(),headerPathPrefix,arg)).putAll(convertAppleHeadersToPrivateCxxHeaders(resolver.getPathFunction(),headerPathPrefix,arg)).build();
  output.srcs=Optional.of(SourceWithFlagsList.ofUnnamedSources(arg.srcs.get()));
  output.platformSrcs=Optional.of(PatternMatchedCollection.<SourceWithFlagsList>of());
  output.headers=Optional.of(SourceList.ofNamedSources(headerMap));
  output.platformHeaders=Optional.of(PatternMatchedCollection.<SourceList>of());
  output.prefixHeader=arg.prefixHeader;
  output.compilerFlags=arg.compilerFlags;
  output.platformCompilerFlags=Optional.of(PatternMatchedCollection.<ImmutableList<String>>of());
  output.linkerFlags=Optional.of(FluentIterable.from(arg.frameworks.transform(frameworksToLinkerFlagsFunction(resolver)).get()).append(arg.linkerFlags.get()).toList());
  output.platformLinkerFlags=Optional.of(PatternMatchedCollection.<ImmutableList<String>>of());
  output.preprocessorFlags=arg.preprocessorFlags;
  output.platformPreprocessorFlags=Optional.of(PatternMatchedCollection.<ImmutableList<String>>of());
  output.langPreprocessorFlags=arg.langPreprocessorFlags;
  output.frameworkSearchPaths=arg.frameworks.isPresent() ? Optional.of(FluentIterable.from(arg.frameworks.get()).transform(FrameworkPath.getUnexpandedSearchPathFunction(resolver.getPathFunction(),Functions.<Path>identity())).toSet()) : Optional.<ImmutableSet<Path>>absent();
  output.lexSrcs=Optional.of(ImmutableList.<SourcePath>of());
  output.yaccSrcs=Optional.of(ImmutableList.<SourcePath>of());
  output.deps=arg.deps;
  output.headerNamespace=Optional.of("");
  output.tests=arg.tests;
  output.cxxRuntimeType=Optional.absent();
}
