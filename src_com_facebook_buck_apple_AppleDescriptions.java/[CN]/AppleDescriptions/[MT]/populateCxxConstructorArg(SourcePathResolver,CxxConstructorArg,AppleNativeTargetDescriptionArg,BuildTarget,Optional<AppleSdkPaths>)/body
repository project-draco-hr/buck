{
  Path headerPathPrefix=AppleDescriptions.getHeaderPathPrefix(arg,buildTarget);
  ImmutableMap<String,SourcePath> headerMap=ImmutableMap.<String,SourcePath>builder().putAll(convertAppleHeadersToPublicCxxHeaders(resolver.getPathFunction(),headerPathPrefix,arg)).putAll(convertAppleHeadersToPrivateCxxHeaders(resolver.getPathFunction(),headerPathPrefix,arg)).build();
  Function<ImmutableList<String>,ImmutableList<String>> expandSdkVariableRefs;
  if (appleSdkPaths.isPresent()) {
    expandSdkVariableRefs=expandSdkVariableReferencesFunction(appleSdkPaths.get());
  }
 else {
    expandSdkVariableRefs=Functions.identity();
  }
  output.srcs=Optional.of(SourceWithFlagsList.ofUnnamedSources(arg.srcs.get()));
  output.headers=Optional.of(Either.<ImmutableList<SourcePath>,ImmutableMap<String,SourcePath>>ofRight(headerMap));
  output.prefixHeaders=Optional.of(ImmutableList.copyOf(arg.prefixHeader.asSet()));
  output.compilerFlags=arg.compilerFlags.transform(expandSdkVariableRefs);
  output.platformCompilerFlags=Optional.of(ImmutableList.<Pair<String,ImmutableList<String>>>of());
  output.linkerFlags=Optional.of(FluentIterable.from(arg.frameworks.transform(frameworksToLinkerFlagsFunction(resolver)).get()).append(arg.linkerFlags.transform(expandSdkVariableRefs).get()).toList());
  output.platformLinkerFlags=Optional.of(ImmutableList.<Pair<String,ImmutableList<String>>>of());
  output.preprocessorFlags=arg.preprocessorFlags.transform(expandSdkVariableRefs);
  output.platformPreprocessorFlags=Optional.of(ImmutableList.<Pair<String,ImmutableList<String>>>of());
  output.langPreprocessorFlags=Optional.of(ImmutableMap.copyOf(Maps.transformValues(arg.langPreprocessorFlags.get(),expandSdkVariableRefs)));
  if (appleSdkPaths.isPresent()) {
    output.frameworkSearchPaths=arg.frameworks.transform(frameworksToSearchPathsFunction(resolver,appleSdkPaths.get()));
  }
 else {
    output.frameworkSearchPaths=Optional.of(ImmutableList.<Path>of());
  }
  output.lexSrcs=Optional.of(ImmutableList.<SourcePath>of());
  output.yaccSrcs=Optional.of(ImmutableList.<SourcePath>of());
  output.deps=arg.deps;
  output.headerNamespace=Optional.of("");
  output.tests=arg.tests;
  output.cxxRuntimeType=Optional.absent();
}
