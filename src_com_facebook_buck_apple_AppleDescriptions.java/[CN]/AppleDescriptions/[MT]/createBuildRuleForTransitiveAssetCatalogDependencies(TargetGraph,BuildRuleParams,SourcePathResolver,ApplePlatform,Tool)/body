{
  TargetNode<?> targetNode=targetGraph.get(params.getBuildTarget());
  ImmutableSet<AppleAssetCatalogDescription.Arg> assetCatalogArgs=AppleBuildRules.collectRecursiveAssetCatalogs(targetGraph,ImmutableList.of(targetNode));
  ImmutableSortedSet.Builder<SourcePath> assetCatalogDirsBuilder=ImmutableSortedSet.naturalOrder();
  Optional<String> appIcon=Optional.absent();
  Optional<String> launchImage=Optional.absent();
  for (  AppleAssetCatalogDescription.Arg arg : assetCatalogArgs) {
    assetCatalogDirsBuilder.addAll(arg.dirs);
    if (arg.appIcon.isPresent()) {
      if (appIcon.isPresent()) {
        throw new HumanReadableException("At most one asset catalog in the dependencies of %s " + "can have a app_icon",params.getBuildTarget());
      }
      appIcon=arg.appIcon;
    }
    if (arg.launchImage.isPresent()) {
      if (launchImage.isPresent()) {
        throw new HumanReadableException("At most one asset catalog in the dependencies of %s " + "can have a launch_image",params.getBuildTarget());
      }
      launchImage=arg.launchImage;
    }
  }
  ImmutableSortedSet<SourcePath> assetCatalogDirs=assetCatalogDirsBuilder.build();
  if (assetCatalogDirs.isEmpty()) {
    return Optional.absent();
  }
  BuildRuleParams assetCatalogParams=params.copyWithChanges(params.getBuildTarget().withAppendedFlavors(AppleAssetCatalog.FLAVOR),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  return Optional.of(new AppleAssetCatalog(assetCatalogParams,sourcePathResolver,applePlatform.getName(),actool,assetCatalogDirs,appIcon,launchImage,MERGED_ASSET_CATALOG_NAME));
}
