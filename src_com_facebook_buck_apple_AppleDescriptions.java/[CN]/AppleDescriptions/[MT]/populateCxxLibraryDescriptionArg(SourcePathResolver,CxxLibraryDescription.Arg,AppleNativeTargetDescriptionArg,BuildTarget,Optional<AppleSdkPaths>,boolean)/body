{
  populateCxxConstructorArg(resolver,output,arg,buildTarget,appleSdkPaths);
  Path headerPathPrefix=AppleDescriptions.getHeaderPathPrefix(arg,buildTarget);
  Function<ImmutableList<String>,ImmutableList<String>> expandSdkVariableRefs;
  if (appleSdkPaths.isPresent()) {
    expandSdkVariableRefs=expandSdkVariableReferencesFunction(appleSdkPaths.get());
  }
 else {
    expandSdkVariableRefs=Functions.identity();
  }
  output.headers=Optional.of(SourceList.ofNamedSources(convertAppleHeadersToPrivateCxxHeaders(resolver.getPathFunction(),headerPathPrefix,arg)));
  output.exportedPreprocessorFlags=arg.exportedPreprocessorFlags.transform(expandSdkVariableRefs);
  output.exportedHeaders=Optional.of(SourceList.ofNamedSources(convertAppleHeadersToPublicCxxHeaders(resolver.getPathFunction(),headerPathPrefix,arg)));
  output.exportedPlatformHeaders=Optional.of(PatternMatchedCollection.<SourceList>of());
  output.exportedPreprocessorFlags=Optional.of(ImmutableList.<String>of());
  output.exportedPlatformPreprocessorFlags=Optional.of(PatternMatchedCollection.<ImmutableList<String>>of());
  output.exportedLangPreprocessorFlags=Optional.of(ImmutableMap.<CxxSource.Type,ImmutableList<String>>of());
  output.exportedLinkerFlags=Optional.of(FluentIterable.from(arg.frameworks.transform(frameworksToLinkerFlagsFunction(resolver)).get()).append(arg.exportedLinkerFlags.transform(expandSdkVariableRefs).get()).toList());
  output.exportedPlatformLinkerFlags=Optional.of(PatternMatchedCollection.<ImmutableList<String>>of());
  output.soname=Optional.absent();
  output.forceStatic=Optional.of(false);
  output.linkWhole=Optional.of(linkWhole);
  output.supportedPlatformsRegex=Optional.absent();
}
