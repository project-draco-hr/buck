def _tearDownPreviousClass(self, test, result):
    previousClass = getattr(result, '_previousTestClass', None)
    currentClass = test.__class__
    if (currentClass == previousClass):
        return
    if getattr(previousClass, '_classSetupFailed', False):
        return
    if getattr(result, '_moduleSetUpFailed', False):
        return
    if getattr(previousClass, '__unittest_skip__', False):
        return
    tearDownClass = getattr(previousClass, 'tearDownClass', None)
    if (tearDownClass is not None):
        try:
            tearDownClass()
        except Exception as e:
            if isinstance(result, _DebugResult):
                raise
            className = util.strclass(previousClass)
            errorName = ('tearDownClass (%s)' % className)
            self._addClassOrModuleLevelException(result, e, errorName)
