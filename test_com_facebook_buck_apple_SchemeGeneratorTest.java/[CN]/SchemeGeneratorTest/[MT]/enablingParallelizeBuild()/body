{
  ImmutableMap.Builder<PBXTarget,Path> targetToProjectPathMapBuilder=ImmutableMap.builder();
  PBXTarget rootTarget=new PBXNativeTarget("rootRule");
  rootTarget.setGlobalID("rootGID");
  rootTarget.setProductReference(new PBXFileReference("root.a","root.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR,Optional.<String>absent()));
  rootTarget.setProductType(ProductType.STATIC_LIBRARY);
  Path pbxprojectPath=Paths.get("foo/Foo.xcodeproj/project.pbxproj");
  targetToProjectPathMapBuilder.put(rootTarget,pbxprojectPath);
  SchemeGenerator schemeGenerator=new SchemeGenerator(projectFilesystem,Optional.of(rootTarget),ImmutableSet.of(rootTarget),ImmutableSet.<PBXTarget>of(),ImmutableSet.<PBXTarget>of(),"TestScheme",Paths.get("_gen/Foo.xcworkspace/scshareddata/xcshemes"),true,true,Optional.<String>absent(),Optional.<String>absent(),SchemeActionType.DEFAULT_CONFIG_NAMES,targetToProjectPathMapBuilder.build());
  Path schemePath=schemeGenerator.writeScheme();
  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
  DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
  Document scheme=dBuilder.parse(projectFilesystem.newFileInputStream(schemePath));
  XPathFactory xpathFactory=XPathFactory.newInstance();
  XPath buildActionXpath=xpathFactory.newXPath();
  XPathExpression buildActionExpr=buildActionXpath.compile("//BuildAction");
  NodeList buildActionNodes=(NodeList)buildActionExpr.evaluate(scheme,XPathConstants.NODESET);
  assertThat(buildActionNodes.getLength(),is(1));
  Node buildActionNode=buildActionNodes.item(0);
  assertThat(buildActionNode.getAttributes().getNamedItem("buildImplicitDependencies").getNodeValue(),equalTo("YES"));
  assertThat(buildActionNode.getAttributes().getNamedItem("parallelizeBuildables").getNodeValue(),equalTo("YES"));
}
