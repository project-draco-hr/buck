{
  ImmutableMap.Builder<PBXTarget,Path> targetToProjectPathMapBuilder=ImmutableMap.builder();
  PBXTarget rootTarget=new PBXNativeTarget("rootRule");
  rootTarget.setGlobalID("rootGID");
  rootTarget.setProductReference(new PBXFileReference("root.a","root.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR,Optional.<String>absent()));
  rootTarget.setProductType(ProductType.STATIC_LIBRARY);
  PBXTarget leftTarget=new PBXNativeTarget("leftRule");
  leftTarget.setGlobalID("leftGID");
  leftTarget.setProductReference(new PBXFileReference("left.a","left.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR,Optional.<String>absent()));
  leftTarget.setProductType(ProductType.STATIC_LIBRARY);
  PBXTarget rightTarget=new PBXNativeTarget("rightRule");
  rightTarget.setGlobalID("rightGID");
  rightTarget.setProductReference(new PBXFileReference("right.a","right.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR,Optional.<String>absent()));
  rightTarget.setProductType(ProductType.STATIC_LIBRARY);
  PBXTarget childTarget=new PBXNativeTarget("childRule");
  childTarget.setGlobalID("childGID");
  childTarget.setProductReference(new PBXFileReference("child.a","child.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR,Optional.<String>absent()));
  childTarget.setProductType(ProductType.STATIC_LIBRARY);
  Path pbxprojectPath=Paths.get("foo/Foo.xcodeproj/project.pbxproj");
  targetToProjectPathMapBuilder.put(rootTarget,pbxprojectPath);
  targetToProjectPathMapBuilder.put(leftTarget,pbxprojectPath);
  targetToProjectPathMapBuilder.put(rightTarget,pbxprojectPath);
  targetToProjectPathMapBuilder.put(childTarget,pbxprojectPath);
  SchemeGenerator schemeGenerator=new SchemeGenerator(projectFilesystem,Optional.of(childTarget),ImmutableSet.of(rootTarget,leftTarget,rightTarget,childTarget),ImmutableSet.<PBXTarget>of(),ImmutableSet.<PBXTarget>of(),"TestScheme",Paths.get("_gen/Foo.xcworkspace/scshareddata/xcshemes"),false,false,Optional.<String>absent(),Optional.<String>absent(),SchemeActionType.DEFAULT_CONFIG_NAMES,targetToProjectPathMapBuilder.build());
  Path schemePath=schemeGenerator.writeScheme();
  String schemeXml=projectFilesystem.readFileIfItExists(schemePath).get();
  System.out.println(schemeXml);
  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
  DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
  Document scheme=dBuilder.parse(projectFilesystem.newFileInputStream(schemePath));
  XPathFactory xpathFactory=XPathFactory.newInstance();
  XPath xpath=xpathFactory.newXPath();
  XPathExpression expr=xpath.compile("//BuildAction//BuildableReference/@BlueprintIdentifier");
  NodeList nodes=(NodeList)expr.evaluate(scheme,XPathConstants.NODESET);
  List<String> expectedOrdering=ImmutableList.of("rootGID","leftGID","rightGID","childGID");
  List<String> actualOrdering=Lists.newArrayList();
  for (int i=0; i < nodes.getLength(); i++) {
    actualOrdering.add(nodes.item(i).getNodeValue());
  }
  assertThat(actualOrdering,equalTo(expectedOrdering));
}
