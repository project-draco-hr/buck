{
  ImmutableMap.Builder<PBXTarget,Path> targetToProjectPathMapBuilder=ImmutableMap.builder();
  PBXTarget rootTarget=new PBXNativeTarget("rootRule");
  rootTarget.setGlobalID("rootGID");
  rootTarget.setProductReference(PBXFileReference.ofAutodetectedType("root.a","root.a",PBXReference.SourceTree.BUILT_PRODUCTS_DIR));
  rootTarget.setProductType(ProductType.STATIC_LIBRARY);
  Path pbxprojectPath=Paths.get("foo/Foo.xcodeproj/project.pbxproj");
  targetToProjectPathMapBuilder.put(rootTarget,pbxprojectPath);
  SchemeGenerator schemeGenerator=new SchemeGenerator(projectFilesystem,Optional.of(rootTarget),ImmutableSet.of(rootTarget),ImmutableSet.<PBXTarget>of(),ImmutableSet.<PBXTarget>of(),"TestScheme",Paths.get("_gen/Foo.xcworkspace/scshareddata/xcshemes"),false,Optional.<String>absent(),Optional.<String>absent(),SchemeActionType.DEFAULT_CONFIG_NAMES,targetToProjectPathMapBuilder.build());
  Path schemePath=schemeGenerator.writeScheme();
  DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();
  DocumentBuilder dBuilder=dbFactory.newDocumentBuilder();
  Document scheme=dBuilder.parse(projectFilesystem.newFileInputStream(schemePath));
  XPathFactory xpathFactory=XPathFactory.newInstance();
  XPath schemeChildrenXPath=xpathFactory.newXPath();
  XPathExpression schemeChildrenExpr=schemeChildrenXPath.compile("/Scheme/node()");
  NodeList actions=(NodeList)schemeChildrenExpr.evaluate(scheme,XPathConstants.NODESET);
  assertThat(actions.getLength(),equalTo(6));
  Node buildAction=actions.item(0);
  assertThat(buildAction.getNodeName(),equalTo("BuildAction"));
  assertThat(buildAction.getAttributes().getNamedItem("buildConfiguration"),nullValue());
  Node testAction=actions.item(1);
  assertThat(testAction.getNodeName(),equalTo("TestAction"));
  assertThat(testAction.getAttributes().getNamedItem("buildConfiguration").getNodeValue(),equalTo("Debug"));
  Node launchAction=actions.item(2);
  assertThat(launchAction.getNodeName(),equalTo("LaunchAction"));
  assertThat(launchAction.getAttributes().getNamedItem("buildConfiguration").getNodeValue(),equalTo("Debug"));
  Node profileAction=actions.item(3);
  assertThat(profileAction.getNodeName(),equalTo("ProfileAction"));
  assertThat(profileAction.getAttributes().getNamedItem("buildConfiguration").getNodeValue(),equalTo("Release"));
  Node analyzeAction=actions.item(4);
  assertThat(analyzeAction.getNodeName(),equalTo("AnalyzeAction"));
  assertThat(analyzeAction.getAttributes().getNamedItem("buildConfiguration").getNodeValue(),equalTo("Debug"));
  Node archiveAction=actions.item(5);
  assertThat(archiveAction.getNodeName(),equalTo("ArchiveAction"));
  assertThat(archiveAction.getAttributes().getNamedItem("buildConfiguration").getNodeValue(),equalTo("Release"));
}
