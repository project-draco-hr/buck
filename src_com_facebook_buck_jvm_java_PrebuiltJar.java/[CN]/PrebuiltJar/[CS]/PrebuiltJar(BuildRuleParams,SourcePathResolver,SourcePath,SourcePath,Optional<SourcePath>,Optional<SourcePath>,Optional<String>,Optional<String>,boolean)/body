{
  super(params,resolver);
  this.binaryJar=binaryJar;
  this.abiJar=abiJar;
  this.sourceJar=sourceJar;
  this.gwtJar=gwtJar;
  this.javadocUrl=javadocUrl;
  this.mavenCoords=mavenCoords;
  this.provided=provided;
  this.internalAbiJar=BuildTargets.getGenPath(getProjectFilesystem(),getBuildTarget(),"%s-abi.jar");
  transitiveClasspathsSupplier=Suppliers.memoize(new Supplier<ImmutableSet<Path>>(){
    @Override public ImmutableSet<Path> get(){
      return ImmutableSet.copyOf(JavaLibraryClasspathProvider.getClasspathEntriesFromLibraries(getTransitiveClasspathDeps()).values());
    }
  }
);
  this.transitiveClasspathDepsSupplier=Suppliers.memoize(new Supplier<ImmutableSet<JavaLibrary>>(){
    @Override public ImmutableSet<JavaLibrary> get(){
      if (provided) {
        return JavaLibraryClasspathProvider.getClasspathDeps(PrebuiltJar.this.getDeclaredDeps());
      }
      return ImmutableSet.<JavaLibrary>builder().add(PrebuiltJar.this).addAll(JavaLibraryClasspathProvider.getClasspathDeps(PrebuiltJar.this.getDeclaredDeps())).build();
    }
  }
);
  Path fileName=resolver.getRelativePath(binaryJar).getFileName();
  String fileNameWithJarExtension=String.format("%s.jar",MorePaths.getNameWithoutExtension(fileName));
  copiedBinaryJar=BuildTargets.getGenPath(getProjectFilesystem(),getBuildTarget(),"__%s__/" + fileNameWithJarExtension);
  buildOutputInitializer=new BuildOutputInitializer<>(params.getBuildTarget(),this);
}
