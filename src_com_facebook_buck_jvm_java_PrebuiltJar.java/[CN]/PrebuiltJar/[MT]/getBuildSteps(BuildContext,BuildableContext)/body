{
  ImmutableList.Builder<Step> steps=ImmutableList.builder();
  Path resolvedBinaryJar=getResolver().getAbsolutePath(binaryJar);
  Path resolvedCopiedBinaryJar=getProjectFilesystem().resolve(copiedBinaryJar);
  Preconditions.checkState(!resolvedBinaryJar.equals(resolvedCopiedBinaryJar),"%s: source (%s) can't be equal to destination (%s) when copying prebuilt JAR.",getBuildTarget().getFullyQualifiedName(),resolvedBinaryJar,copiedBinaryJar);
  if (!MorePaths.getFileExtension(copiedBinaryJar.getFileName()).equals(MorePaths.getFileExtension(resolvedBinaryJar))) {
    context.getEventBus().post(ConsoleEvent.warning("Assuming %s is a JAR and renaming to %s in %s. " + "Change the extension of the binary_jar to '.jar' to remove this warning.",resolvedBinaryJar.getFileName(),copiedBinaryJar.getFileName(),getBuildTarget().getFullyQualifiedName()));
  }
  if (getResolver().getFilesystem(binaryJar).isDirectory(resolvedBinaryJar)) {
    steps.add(new MakeCleanDirectoryStep(getProjectFilesystem(),copiedBinaryJar));
    steps.add(CopyStep.forDirectory(getProjectFilesystem(),resolvedBinaryJar,copiedBinaryJar,CopyStep.DirectoryMode.CONTENTS_ONLY));
  }
 else {
    steps.add(new MkdirStep(getProjectFilesystem(),copiedBinaryJar.getParent()));
    steps.add(CopyStep.forFile(getProjectFilesystem(),resolvedBinaryJar,copiedBinaryJar));
  }
  buildableContext.recordArtifact(copiedBinaryJar);
  steps.add(new MkdirStep(getProjectFilesystem(),internalAbiJar.getParent()));
  steps.add(new RmStep(getProjectFilesystem(),internalAbiJar,true));
  steps.add(new CalculateAbiStep(buildableContext,getProjectFilesystem(),resolvedBinaryJar,internalAbiJar));
  JavaLibraryRules.addAccumulateClassNamesStep(this,buildableContext,steps);
  return steps.build();
}
