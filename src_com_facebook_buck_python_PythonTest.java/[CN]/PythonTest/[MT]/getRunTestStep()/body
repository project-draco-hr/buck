{
  return new ShellStep(getProjectFilesystem().getRootPath()){
    boolean timedOut=false;
    @Override protected ImmutableList<String> getShellCommandInternal(    ExecutionContext context){
      ImmutableList.Builder<String> builder=new ImmutableList.Builder<>();
      builder.addAll(binary.getExecutableCommand().getCommandPrefix(getResolver()));
      builder.add("-o",getProjectFilesystem().resolve(getPathToTestOutputResult()).toString());
      return builder.build();
    }
    @Override public ImmutableMap<String,String> getEnvironmentVariables(    ExecutionContext context){
      return env.get();
    }
    @Override public String getShortName(){
      return "pyunit";
    }
    @Override public int execute(    ExecutionContext context) throws InterruptedException {
      int exitCode=super.execute(context);
      if (timedOut) {
        throw new HumanReadableException("Following test case timed out: " + getBuildTarget().getFullyQualifiedName() + ", with exitCode: "+ exitCode);
      }
      return exitCode;
    }
    @Override protected Optional<Function<Process,Void>> getTimeoutHandler(    final ExecutionContext context){
      return Optional.<Function<Process,Void>>of(new Function<Process,Void>(){
        @Override public Void apply(        Process process){
          timedOut=true;
          return null;
        }
      }
);
    }
    @Override protected Optional<Long> getTimeout(){
      return testRuleTimeoutMs;
    }
  }
;
}
