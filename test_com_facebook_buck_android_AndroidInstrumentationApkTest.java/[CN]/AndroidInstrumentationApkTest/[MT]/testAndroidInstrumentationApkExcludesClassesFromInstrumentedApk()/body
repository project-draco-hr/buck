{
  final JavaLibraryRule javaLibrary1=new FakeJavaLibraryRule(new BuildTarget("//java/com/example","lib1"));
  JavaLibraryRule javaLibrary2=new FakeJavaLibraryRule(new BuildTarget("//java/com/example","lib2"),ImmutableSortedSet.of((BuildRule)javaLibrary1)){
    @Override public ImmutableSetMultimap<JavaLibraryRule,String> getTransitiveClasspathEntries(){
      ImmutableSetMultimap.Builder<JavaLibraryRule,String> builder=ImmutableSetMultimap.builder();
      builder.put(javaLibrary1,javaLibrary1.getPathToOutputFile());
      builder.put(this,this.getPathToOutputFile());
      return builder.build();
    }
  }
;
  final JavaLibraryRule javaLibrary3=new FakeJavaLibraryRule(new BuildTarget("//java/com/example","lib3"));
  JavaLibraryRule javaLibrary4=new FakeJavaLibraryRule(new BuildTarget("//java/com/example","lib4"),ImmutableSortedSet.of((BuildRule)javaLibrary3)){
    @Override public ImmutableSetMultimap<JavaLibraryRule,String> getTransitiveClasspathEntries(){
      ImmutableSetMultimap.Builder<JavaLibraryRule,String> builder=ImmutableSetMultimap.builder();
      builder.put(javaLibrary3,javaLibrary3.getPathToOutputFile());
      builder.put(this,this.getPathToOutputFile());
      return builder.build();
    }
  }
;
  Map<BuildTarget,BuildRule> buildRuleIndex=Maps.newHashMap();
  buildRuleIndex.put(javaLibrary1.getBuildTarget(),javaLibrary1);
  buildRuleIndex.put(javaLibrary2.getBuildTarget(),javaLibrary2);
  buildRuleIndex.put(javaLibrary3.getBuildTarget(),javaLibrary3);
  buildRuleIndex.put(javaLibrary4.getBuildTarget(),javaLibrary4);
  BuildRuleResolver ruleResolver=new BuildRuleResolver(buildRuleIndex);
  BuildRule keystore=ruleResolver.buildAndAddToIndex(Keystore.newKeystoreBuilder(new FakeAbstractBuildRuleBuilderParams()).setBuildTarget(new BuildTarget("//keystores","debug")).setProperties("keystores/debug.properties").setStore("keystores/debug.keystore").addVisibilityPattern(BuildTargetPattern.MATCH_ALL));
  AndroidBinaryRule.Builder androidBinaryBuilder=AndroidBinaryRule.newAndroidBinaryRuleBuilder(new FakeAbstractBuildRuleBuilderParams());
  androidBinaryBuilder.setBuildTarget(new BuildTarget("//apps","app")).setManifest(new FileSourcePath("apps/AndroidManifest.xml")).setTarget("Google Inc.:Google APIs:18").setKeystore(keystore.getBuildTarget()).addClasspathDep(javaLibrary2.getBuildTarget()).addClasspathDep(javaLibrary3.getBuildTarget());
  AndroidBinaryRule androidBinary=ruleResolver.buildAndAddToIndex(androidBinaryBuilder);
  AndroidInstrumentationApk.Builder androidInstrumentationApkBuilder=AndroidInstrumentationApk.newAndroidInstrumentationApkRuleBuilder(new FakeAbstractBuildRuleBuilderParams());
  androidInstrumentationApkBuilder.setBuildTarget(new BuildTarget("//apps","instrumentation")).setManifest(new FileSourcePath("apps/InstrumentationAndroidManifest.xml")).setApk(androidBinary.getBuildTarget()).addClasspathDep(javaLibrary2.getBuildTarget()).addClasspathDep(javaLibrary4.getBuildTarget());
  AndroidInstrumentationApk androidInstrumentationApk=ruleResolver.buildAndAddToIndex(androidInstrumentationApkBuilder);
  assertEquals(BuildRuleType.ANDROID_INSTRUMENTATION_APK,androidInstrumentationApk.getType());
  assertEquals("//apps:app should have three JAR files to dex.",ImmutableSet.of("buck-out/gen/java/com/example/lib1.jar","buck-out/gen/java/com/example/lib2.jar","buck-out/gen/java/com/example/lib3.jar"),androidBinary.findDexTransitiveDependencies().classpathEntriesToDex);
  assertEquals("//apps:instrumentation should have one JAR file to dex.",ImmutableSet.of("buck-out/gen/java/com/example/lib4.jar"),androidInstrumentationApk.findDexTransitiveDependencies().classpathEntriesToDex);
}
