{
  final FakeJavaLibrary javaLibrary1=new FakeJavaLibrary(new BuildTarget("//java/com/example","lib1"));
  FakeJavaLibrary javaLibrary2=new FakeJavaLibrary(new BuildTarget("//java/com/example","lib2"),ImmutableSortedSet.of((BuildRule)javaLibrary1)){
    @Override public ImmutableSetMultimap<JavaLibrary,String> getTransitiveClasspathEntries(){
      ImmutableSetMultimap.Builder<JavaLibrary,String> builder=ImmutableSetMultimap.builder();
      builder.put(javaLibrary1,javaLibrary1.getPathToOutputFile().toString());
      builder.put(this,this.getPathToOutputFile().toString());
      return builder.build();
    }
  }
;
  final FakeJavaLibrary javaLibrary3=new FakeJavaLibrary(new BuildTarget("//java/com/example","lib3"));
  FakeJavaLibrary javaLibrary4=new FakeJavaLibrary(new BuildTarget("//java/com/example","lib4"),ImmutableSortedSet.of((BuildRule)javaLibrary3)){
    @Override public ImmutableSetMultimap<JavaLibrary,String> getTransitiveClasspathEntries(){
      ImmutableSetMultimap.Builder<JavaLibrary,String> builder=ImmutableSetMultimap.builder();
      builder.put(javaLibrary3,javaLibrary3.getPathToOutputFile().toString());
      builder.put(this,this.getPathToOutputFile().toString());
      return builder.build();
    }
  }
;
  Map<BuildTarget,BuildRule> buildRuleIndex=Maps.newHashMap();
  buildRuleIndex.put(javaLibrary1.getBuildTarget(),javaLibrary1);
  buildRuleIndex.put(javaLibrary2.getBuildTarget(),javaLibrary2);
  buildRuleIndex.put(javaLibrary3.getBuildTarget(),javaLibrary3);
  buildRuleIndex.put(javaLibrary4.getBuildTarget(),javaLibrary4);
  BuildRuleResolver ruleResolver=new BuildRuleResolver(buildRuleIndex);
  Keystore keystore=(Keystore)KeystoreBuilder.createBuilder(new BuildTarget("//keystores","debug")).setProperties(Paths.get("keystores/debug.properties")).setStore(Paths.get("keystores/debug.keystore")).build(ruleResolver).getBuildable();
  AndroidBinaryBuilder.Builder androidBinaryBuilder=AndroidBinaryBuilder.newBuilder();
  androidBinaryBuilder.setBuildTarget(new BuildTarget("//apps","app")).setManifest(new TestSourcePath("apps/AndroidManifest.xml")).setTarget("Google Inc.:Google APIs:18").setKeystore(keystore).setOriginalDeps(ImmutableSortedSet.<BuildRule>of(javaLibrary2,javaLibrary3));
  BuildRule androidBinaryRule=androidBinaryBuilder.build(ruleResolver);
  AndroidBinary androidBinary=(AndroidBinary)androidBinaryRule.getBuildable();
  androidBinary.getEnhancedDeps(ruleResolver);
  AndroidInstrumentationApk androidInstrumentationApk=new AndroidInstrumentationApk(new FakeBuildRuleParams(new BuildTarget("//apps","instrumentation")),new TestSourcePath("apps/InstrumentationAndroidManifest.xml"),androidBinary,androidBinaryRule,ImmutableSortedSet.<BuildRule>of(javaLibrary2,javaLibrary4));
  androidInstrumentationApk.getEnhancedDeps(ruleResolver);
  assertEquals("//apps:app should have three JAR files to dex.",ImmutableSet.of("buck-out/gen/java/com/example/lib1.jar","buck-out/gen/java/com/example/lib2.jar","buck-out/gen/java/com/example/lib3.jar"),androidBinary.findDexTransitiveDependencies().classpathEntriesToDex);
  assertEquals("//apps:instrumentation should have one JAR file to dex.",ImmutableSet.of("buck-out/gen/java/com/example/lib4.jar"),androidInstrumentationApk.findDexTransitiveDependencies().classpathEntriesToDex);
}
