{
  final FakeJavaLibrary javaLibrary1=new FakeJavaLibrary(new BuildTarget("//java/com/example","lib1"));
  FakeJavaLibrary javaLibrary2=new FakeJavaLibrary(new BuildTarget("//java/com/example","lib2"),ImmutableSortedSet.of((BuildRule)javaLibrary1)){
    @Override public ImmutableSetMultimap<JavaLibrary,Path> getTransitiveClasspathEntries(){
      ImmutableSetMultimap.Builder<JavaLibrary,Path> builder=ImmutableSetMultimap.builder();
      builder.put(javaLibrary1,javaLibrary1.getPathToOutputFile());
      builder.put(this,this.getPathToOutputFile());
      return builder.build();
    }
  }
;
  final FakeJavaLibrary javaLibrary3=new FakeJavaLibrary(new BuildTarget("//java/com/example","lib3"));
  FakeJavaLibrary javaLibrary4=new FakeJavaLibrary(new BuildTarget("//java/com/example","lib4"),ImmutableSortedSet.of((BuildRule)javaLibrary3)){
    @Override public ImmutableSetMultimap<JavaLibrary,Path> getTransitiveClasspathEntries(){
      ImmutableSetMultimap.Builder<JavaLibrary,Path> builder=ImmutableSetMultimap.builder();
      builder.put(javaLibrary3,javaLibrary3.getPathToOutputFile());
      builder.put(this,this.getPathToOutputFile());
      return builder.build();
    }
  }
;
  Map<BuildTarget,BuildRule> buildRuleIndex=Maps.newHashMap();
  buildRuleIndex.put(javaLibrary1.getBuildTarget(),javaLibrary1);
  buildRuleIndex.put(javaLibrary2.getBuildTarget(),javaLibrary2);
  buildRuleIndex.put(javaLibrary3.getBuildTarget(),javaLibrary3);
  buildRuleIndex.put(javaLibrary4.getBuildTarget(),javaLibrary4);
  BuildRuleResolver ruleResolver=new BuildRuleResolver(buildRuleIndex);
  BuildRule keystore=KeystoreBuilder.createBuilder(new BuildTarget("//keystores","debug")).setProperties(Paths.get("keystores/debug.properties")).setStore(Paths.get("keystores/debug.keystore")).build(ruleResolver);
  AndroidBinaryBuilder androidBinaryBuilder=AndroidBinaryBuilder.createBuilder(new BuildTarget("//apps","app"));
  ImmutableSortedSet<BuildRule> originalDeps=ImmutableSortedSet.<BuildRule>of(javaLibrary2,javaLibrary3);
  androidBinaryBuilder.setManifest(new TestSourcePath("apps/AndroidManifest.xml")).setTarget("Google Inc.:Google APIs:18").setKeystore((Keystore)keystore).setOriginalDeps(originalDeps);
  AndroidBinary androidBinary=(AndroidBinary)androidBinaryBuilder.build(ruleResolver);
  ImmutableSortedSet<BuildRule> apkOriginalDeps=ImmutableSortedSet.<BuildRule>of(javaLibrary2,javaLibrary4);
  AndroidInstrumentationApkDescription.Arg arg=new AndroidInstrumentationApkDescription.Arg();
  arg.apk=androidBinary;
  arg.deps=Optional.of(apkOriginalDeps);
  arg.manifest=new TestSourcePath("apps/InstrumentationAndroidManifest.xml");
  BuildRuleParams params=new FakeBuildRuleParamsBuilder(new BuildTarget("//apps","instrumentation")).setDeps(apkOriginalDeps).setExtraDeps(ImmutableSortedSet.<BuildRule>of(androidBinary)).build();
  AndroidInstrumentationApk androidInstrumentationApk=(AndroidInstrumentationApk)new AndroidInstrumentationApkDescription().createBuildRule(params,ruleResolver,arg);
  assertEquals("//apps:app should have three JAR files to dex.",ImmutableSet.of(Paths.get("buck-out/gen/java/com/example/lib1.jar"),Paths.get("buck-out/gen/java/com/example/lib2.jar"),Paths.get("buck-out/gen/java/com/example/lib3.jar")),androidBinary.getAndroidPackageableCollection().classpathEntriesToDex);
  assertEquals("//apps:instrumentation should have one JAR file to dex.",ImmutableSet.of(Paths.get("buck-out/gen/java/com/example/lib4.jar")),androidInstrumentationApk.getAndroidPackageableCollection().classpathEntriesToDex);
}
