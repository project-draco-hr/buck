{
  Path compiler=Paths.get("compiler");
  ImmutableList<String> flags=ImmutableList.of("-fsanitize=address");
  Path output=Paths.get("test.o");
  Path input=Paths.get("test.cpp");
  String sanitized="hello////////////world.h";
  String unsanitized="buck-out/foo#bar/world.h";
  Path compilationDirectory=Paths.get("compDir");
  Path sanitizedDir=Paths.get("hello");
  Path unsanitizedDir=Paths.get("buck-out/foo#bar");
  DebugPathSanitizer sanitizer=new DebugPathSanitizer(unsanitizedDir.toString().length(),File.separatorChar,compilationDirectory,ImmutableBiMap.of(unsanitizedDir,sanitizedDir));
  CxxCompileStep cxxCompileStep=new CxxCompileStep(compiler,flags,output,input,Optional.of(sanitizer));
  Function<String,String> processor=cxxCompileStep.createErrorLineProcessor(compilationDirectory);
  assertEquals(String.format("In file included from %s:",unsanitized),processor.apply(String.format("In file included from %s:",sanitized)));
  assertEquals(String.format("In file included from %s:3:2:",unsanitized),processor.apply(String.format("In file included from %s:3:2:",sanitized)));
  assertEquals(String.format("In file included from %s,",unsanitized),processor.apply(String.format("In file included from %s,",sanitized)));
  assertEquals(String.format("In file included from %s:7,",unsanitized),processor.apply(String.format("In file included from %s:7,",sanitized)));
  assertEquals(String.format("   from %s:",unsanitized),processor.apply(String.format("   from %s:",sanitized)));
  assertEquals(String.format("   from %s:3:2:",unsanitized),processor.apply(String.format("   from %s:3:2:",sanitized)));
  assertEquals(String.format("   from %s,",unsanitized),processor.apply(String.format("   from %s,",sanitized)));
  assertEquals(String.format("   from %s:7,",unsanitized),processor.apply(String.format("   from %s:7,",sanitized)));
  assertEquals(String.format("%s: something bad",unsanitized),processor.apply(String.format("%s: something bad",sanitized)));
  assertEquals(String.format("%s:4: something bad",unsanitized),processor.apply(String.format("%s:4: something bad",sanitized)));
  assertEquals(String.format("%s:4:2: something bad",unsanitized),processor.apply(String.format("%s:4:2: something bad",sanitized)));
  assertEquals("In file included from test.h:",processor.apply("In file included from test.h:"));
  assertEquals(" error message!",processor.apply(" error message!"));
}
