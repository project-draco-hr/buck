{
  Map<BuildRule,XCScheme.BuildableReference> buildRuleToBuildableReferenceMap=Maps.newHashMap();
  for (  BuildRule rule : Iterables.concat(orderedBuildRules,orderedTestBuildRules)) {
    PBXTarget target=buildRuleToTargetMap.get(rule);
    String blueprintName=target.getProductName();
    if (blueprintName == null) {
      blueprintName=target.getName();
    }
    XCScheme.BuildableReference buildableReference=new XCScheme.BuildableReference(outputDirectory.getParent().relativize(targetToProjectPathMap.get(target)).toString(),target.getGlobalID(),target.getProductReference().getName(),blueprintName);
    buildRuleToBuildableReferenceMap.put(rule,buildableReference);
  }
  XCScheme.BuildAction buildAction=new XCScheme.BuildAction();
  for (  BuildRule rule : orderedBuildRules) {
    addBuildActionForRule(buildRuleToBuildableReferenceMap.get(rule),XCScheme.BuildActionEntry.BuildFor.DEFAULT,buildAction);
  }
  for (  BuildRule rule : orderedTestBuildRules) {
    addBuildActionForRule(buildRuleToBuildableReferenceMap.get(rule),XCScheme.BuildActionEntry.BuildFor.TEST_ONLY,buildAction);
  }
  XCScheme.TestAction testAction=new XCScheme.TestAction(actionConfigNames.get(SchemeActionType.TEST));
  for (  BuildRule rule : orderedTestBundleRules) {
    XCScheme.BuildableReference buildableReference=buildRuleToBuildableReferenceMap.get(rule);
    XCScheme.TestableReference testableReference=new XCScheme.TestableReference(buildableReference);
    testAction.addTestableReference(testableReference);
  }
  Optional<XCScheme.LaunchAction> launchAction=Optional.absent();
  Optional<XCScheme.ProfileAction> profileAction=Optional.absent();
  XCScheme.BuildableReference primaryBuildableReference=buildRuleToBuildableReferenceMap.get(primaryRule);
  if (primaryBuildableReference != null) {
    launchAction=Optional.of(new XCScheme.LaunchAction(primaryBuildableReference,actionConfigNames.get(SchemeActionType.LAUNCH)));
    profileAction=Optional.of(new XCScheme.ProfileAction(primaryBuildableReference,actionConfigNames.get(SchemeActionType.PROFILE)));
  }
  XCScheme.AnalyzeAction analyzeAction=new XCScheme.AnalyzeAction(actionConfigNames.get(SchemeActionType.ANALYZE));
  XCScheme.ArchiveAction archiveAction=new XCScheme.ArchiveAction(actionConfigNames.get(SchemeActionType.ARCHIVE));
  XCScheme scheme=new XCScheme(schemeName,Optional.of(buildAction),Optional.of(testAction),launchAction,profileAction,Optional.of(analyzeAction),Optional.of(archiveAction));
  Path schemeDirectory=outputDirectory.resolve("xcshareddata/xcschemes");
  projectFilesystem.mkdirs(schemeDirectory);
  Path schemePath=schemeDirectory.resolve(schemeName + ".xcscheme");
  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){
    serializeScheme(scheme,outputStream);
    String contentsToWrite=outputStream.toString();
    if (MorePaths.fileContentsDiffer(new ByteArrayInputStream(contentsToWrite.getBytes(Charsets.UTF_8)),schemePath,projectFilesystem)) {
      projectFilesystem.writeContentsToPath(outputStream.toString(),schemePath);
    }
  }
   return schemePath;
}
