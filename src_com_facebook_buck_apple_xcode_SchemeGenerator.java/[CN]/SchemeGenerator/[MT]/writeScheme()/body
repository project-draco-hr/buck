{
  final ImmutableMap<BuildRule,PBXTarget> buildRuleToTargetMap=buildRuleToTargetMapBuilder.build();
  ImmutableMap<PBXTarget,Path> targetToProjectPathMap=targetToProjectPathMapBuilder.build();
class XcodeTargetPredicate implements Predicate<BuildRule> {
    private final ImmutableSet<BuildRule> matches;
    public XcodeTargetPredicate(    ImmutableSet<BuildRule> matches){
      this.matches=Preconditions.checkNotNull(matches);
    }
    @Override public boolean apply(    BuildRule input){
      if (!AppleBuildRules.isXcodeTargetBuildRuleType(input.getType()) && XcodeNativeDescription.TYPE != input.getType()) {
        return false;
      }
      if (!matches.contains(input)) {
        return false;
      }
      if (!buildRuleToTargetMap.containsKey(input)) {
        throw new HumanReadableException("Scheme generation failed: No project containing required target %s was found.",input.getFullyQualifiedName());
      }
      return true;
    }
  }
  List<BuildRule> orderedBuildRules=TopologicalSort.sort(partialGraph.getActionGraph(),new XcodeTargetPredicate(includedRules));
  List<BuildRule> orderedTestRules=TopologicalSort.sort(partialGraph.getActionGraph(),new XcodeTargetPredicate(testRules));
  Map<BuildRule,XCScheme.BuildableReference> buildRuleToBuildableReferenceMap=Maps.newHashMap();
  for (  BuildRule rule : Iterables.concat(orderedBuildRules,orderedTestRules)) {
    PBXTarget target=buildRuleToTargetMap.get(rule);
    String blueprintName=target.getProductName();
    if (blueprintName == null) {
      blueprintName=target.getName();
    }
    XCScheme.BuildableReference buildableReference=new XCScheme.BuildableReference(outputDirectory.getParent().relativize(targetToProjectPathMap.get(target)).toString(),target.getGlobalID(),target.getProductReference().getName(),blueprintName);
    buildRuleToBuildableReferenceMap.put(rule,buildableReference);
  }
  XCScheme.BuildAction buildAction=new XCScheme.BuildAction();
  for (  BuildRule rule : Iterables.concat(orderedBuildRules,orderedTestRules)) {
    EnumSet<XCScheme.BuildActionEntry.BuildFor> buildFor;
    if (testRules.contains(rule)) {
      buildFor=XCScheme.BuildActionEntry.BuildFor.TEST_ONLY;
    }
 else {
      buildFor=XCScheme.BuildActionEntry.BuildFor.DEFAULT;
    }
    XCScheme.BuildableReference buildableReference=buildRuleToBuildableReferenceMap.get(rule);
    XCScheme.BuildActionEntry entry=new XCScheme.BuildActionEntry(buildableReference,buildFor);
    buildAction.addBuildAction(entry);
  }
  XCScheme.TestAction testAction=new XCScheme.TestAction(actionConfigNames.get(SchemeActionType.TEST));
  for (  BuildRule rule : orderedTestRules) {
    if (!AppleBuildRules.isXcodeTargetTestBuildRuleType(rule.getType())) {
      continue;
    }
    XCScheme.BuildableReference buildableReference=buildRuleToBuildableReferenceMap.get(rule);
    XCScheme.TestableReference testableReference=new XCScheme.TestableReference(buildableReference);
    testAction.addTestableReference(testableReference);
  }
  XCScheme.BuildableReference primaryBuildableReference=buildRuleToBuildableReferenceMap.get(primaryRule);
  XCScheme.LaunchAction launchAction=new XCScheme.LaunchAction(primaryBuildableReference,actionConfigNames.get(SchemeActionType.LAUNCH));
  XCScheme.ProfileAction profileAction=new XCScheme.ProfileAction(primaryBuildableReference,actionConfigNames.get(SchemeActionType.PROFILE));
  XCScheme.AnalyzeAction analyzeAction=new XCScheme.AnalyzeAction(actionConfigNames.get(SchemeActionType.ANALYZE));
  XCScheme.ArchiveAction archiveAction=new XCScheme.ArchiveAction(actionConfigNames.get(SchemeActionType.ARCHIVE));
  XCScheme scheme=new XCScheme(schemeName,buildAction,testAction,launchAction,profileAction,analyzeAction,archiveAction);
  Path schemeDirectory=outputDirectory.resolve("xcshareddata/xcschemes");
  projectFilesystem.mkdirs(schemeDirectory);
  Path schemePath=schemeDirectory.resolve(schemeName + ".xcscheme");
  try (ByteArrayOutputStream outputStream=new ByteArrayOutputStream()){
    serializeScheme(scheme,outputStream);
    String contentsToWrite=outputStream.toString();
    if (MorePaths.fileContentsDiffer(new ByteArrayInputStream(contentsToWrite.getBytes(Charsets.UTF_8)),schemePath,projectFilesystem)) {
      projectFilesystem.writeContentsToPath(outputStream.toString(),schemePath);
    }
  }
   return schemePath;
}
