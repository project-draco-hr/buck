{
  DocumentBuilder docBuilder;
  Transformer transformer;
  try {
    docBuilder=DocumentBuilderFactory.newInstance().newDocumentBuilder();
    transformer=TransformerFactory.newInstance().newTransformer();
  }
 catch (  ParserConfigurationException|TransformerConfigurationException e) {
    throw new RuntimeException(e);
  }
  DOMImplementation domImplementation=docBuilder.getDOMImplementation();
  Document doc=domImplementation.createDocument(null,"Scheme",null);
  doc.setXmlVersion("1.0");
  Element rootElem=doc.getDocumentElement();
  rootElem.setAttribute("LastUpgradeVersion","0500");
  rootElem.setAttribute("version","1.7");
  Element buildActionElem=doc.createElement("BuildAction");
  rootElem.appendChild(buildActionElem);
  buildActionElem.setAttribute("parallelizeBuildables","NO");
  buildActionElem.setAttribute("buildImplicitDependencies","NO");
  Element buildActionEntriesElem=doc.createElement("BuildActionEntries");
  buildActionElem.appendChild(buildActionEntriesElem);
  for (  XCScheme.BuildActionEntry entry : scheme.getBuildAction()) {
    Element entryElem=doc.createElement("BuildActionEntry");
    buildActionEntriesElem.appendChild(entryElem);
    EnumSet<XCScheme.BuildActionEntry.BuildFor> buildFor=entry.getBuildFor();
    boolean buildForRunning=buildFor.contains(XCScheme.BuildActionEntry.BuildFor.RUNNING);
    entryElem.setAttribute("buildForRunning",buildForRunning ? "YES" : "NO");
    boolean buildForTesting=buildFor.contains(XCScheme.BuildActionEntry.BuildFor.TESTING);
    entryElem.setAttribute("buildForTesting",buildForTesting ? "YES" : "NO");
    boolean buildForProfiling=buildFor.contains(XCScheme.BuildActionEntry.BuildFor.PROFILING);
    entryElem.setAttribute("buildForProfiling",buildForProfiling ? "YES" : "NO");
    boolean buildForArchiving=buildFor.contains(XCScheme.BuildActionEntry.BuildFor.ARCHIVING);
    entryElem.setAttribute("buildForArchiving",buildForArchiving ? "YES" : "NO");
    boolean buildForAnalyzing=buildFor.contains(XCScheme.BuildActionEntry.BuildFor.ANALYZING);
    entryElem.setAttribute("buildForAnalyzing",buildForAnalyzing ? "YES" : "NO");
    Element refElem=doc.createElement("BuildableReference");
    entryElem.appendChild(refElem);
    refElem.setAttribute("BuildableIdentifier","primary");
    refElem.setAttribute("BlueprintIdentifier",entry.getBlueprintIdentifier());
    refElem.setAttribute("referencedContainer","container:" + entry.getContainerRelativePath());
  }
  DOMSource source=new DOMSource(doc);
  StreamResult result=new StreamResult(stream);
  try {
    transformer.transform(source,result);
  }
 catch (  TransformerException e) {
    throw new RuntimeException(e);
  }
}
