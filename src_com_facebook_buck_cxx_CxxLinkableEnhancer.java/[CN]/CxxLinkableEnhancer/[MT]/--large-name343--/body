{
  Preconditions.checkState(!soname.isPresent() || SONAME_REQUIRED_LINK_TYPES.contains(linkType));
  Preconditions.checkState(!bundleLoader.isPresent() || linkType == Linker.LinkType.MACH_O_BUNDLE);
  ImmutableList.Builder<NativeLinkableInput> nativeLinkableInputs=ImmutableList.builder();
  for (  NativeLinkable nativeLinkable : Maps.filterKeys(NativeLinkables.getNativeLinkables(cxxPlatform,FluentIterable.from(nativeLinkableDeps).filter(NativeLinkable.class),depType),Predicates.not(Predicates.in(blacklist))).values()) {
    nativeLinkableInputs.add(NativeLinkables.getNativeLinkableInput(cxxPlatform,depType,nativeLinkable));
  }
  NativeLinkableInput linkableInput=NativeLinkableInput.concat(nativeLinkableInputs.build());
  ImmutableList.Builder<Arg> argsBuilder=ImmutableList.builder();
  if (linkType == Linker.LinkType.SHARED) {
    argsBuilder.add(new StringArg("-shared"));
  }
 else   if (linkType == Linker.LinkType.MACH_O_BUNDLE) {
    argsBuilder.add(new StringArg("-bundle"));
    if (bundleLoader.isPresent()) {
      argsBuilder.add(new StringArg("-bundle_loader"),new SourcePathArg(resolver,bundleLoader.get()));
    }
  }
  if (soname.isPresent()) {
    argsBuilder.addAll(StringArg.from(cxxPlatform.getLd().soname(soname.get())));
  }
  argsBuilder.addAll(args);
  argsBuilder.addAll(linkableInput.getArgs());
  addSharedLibrariesLinkerArgs(cxxPlatform,resolver,ImmutableSortedSet.copyOf(linkableInput.getLibraries()),argsBuilder);
  addFrameworkLinkerArgs(cxxPlatform,resolver,mergeFrameworks(linkableInput,frameworks),argsBuilder);
  final ImmutableList<Arg> allArgs=argsBuilder.build();
  return createCxxLinkableBuildRule(cxxPlatform,params,resolver,target,output,allArgs,depType);
}
