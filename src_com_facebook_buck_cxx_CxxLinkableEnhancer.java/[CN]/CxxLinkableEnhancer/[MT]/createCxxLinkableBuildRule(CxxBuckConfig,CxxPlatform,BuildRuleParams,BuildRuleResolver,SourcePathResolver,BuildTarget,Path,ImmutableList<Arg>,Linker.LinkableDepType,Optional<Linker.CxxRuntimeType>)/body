{
  final Linker linker=cxxPlatform.getLd().resolve(ruleResolver);
  ImmutableList.Builder<Arg> argsBuilder=ImmutableList.builder();
  if (linker instanceof HasLinkerMap) {
    argsBuilder.addAll(((HasLinkerMap)linker).linkerMap(output));
  }
  argsBuilder.addAll(SanitizedArg.from(cxxPlatform.getDebugPathSanitizer().sanitize(Optional.<Path>absent()),cxxPlatform.getLdflags()));
  argsBuilder.addAll(args);
  Linker.LinkableDepType runtimeDepType=depType;
  if (cxxRuntimeType.or(Linker.CxxRuntimeType.DYNAMIC) == Linker.CxxRuntimeType.STATIC) {
    runtimeDepType=Linker.LinkableDepType.STATIC;
  }
  argsBuilder.addAll(StringArg.from(cxxPlatform.getRuntimeLdflags().get(runtimeDepType)));
  final ImmutableList<Arg> allArgs=argsBuilder.build();
  return new CxxLink(params.copyWithChanges(target,new Supplier<ImmutableSortedSet<BuildRule>>(){
    @Override public ImmutableSortedSet<BuildRule> get(){
      return FluentIterable.from(allArgs).transformAndConcat(Arg.getDepsFunction(resolver)).append(linker.getDeps(resolver)).toSortedSet(Ordering.natural());
    }
  }
,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),resolver,linker,output,allArgs,cxxBuckConfig.getLinkScheduleInfo(),cxxBuckConfig.shouldCacheLinks());
}
