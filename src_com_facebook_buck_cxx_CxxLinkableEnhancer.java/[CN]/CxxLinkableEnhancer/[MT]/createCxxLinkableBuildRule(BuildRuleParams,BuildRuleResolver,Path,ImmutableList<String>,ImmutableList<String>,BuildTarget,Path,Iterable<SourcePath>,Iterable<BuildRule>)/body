{
  NativeLinkableInput linkableInput=NativeLinkableInput.concat(FluentIterable.from(topoSort(nativeLinkableDeps).reverse()).filter(NativeLinkable.class).transform(NativeLinkable.GET_NATIVE_LINKABLE_INPUT));
  BuildRuleParams linkParams=params.copyWithChanges(NativeLinkable.NATIVE_LINKABLE_TYPE,target,ImmutableSortedSet.copyOf(Iterables.concat(SourcePaths.filterBuildRuleInputs(objects),BuildRules.toBuildRulesFor(target,resolver,linkableInput.getTargets(),false))),ImmutableSortedSet.<BuildRule>of());
  ImmutableList<String> args=ImmutableList.<String>builder().addAll(cxxLdFlags).addAll(MoreIterables.zipAndConcat(Iterables.cycle("-Xlinker"),ldFlags)).addAll(MoreIterables.zipAndConcat(Iterables.cycle("-Xlinker"),Iterables.concat(FluentIterable.from(objects).transform(SourcePaths.TO_PATH).transform(Functions.toStringFunction()),linkableInput.getArgs()))).build();
  return new CxxLink(linkParams,linker,output,ImmutableList.<SourcePath>builder().addAll(objects).addAll(SourcePaths.toSourcePathsSortedByNaturalOrder(linkableInput.getInputs())).build(),args);
}
