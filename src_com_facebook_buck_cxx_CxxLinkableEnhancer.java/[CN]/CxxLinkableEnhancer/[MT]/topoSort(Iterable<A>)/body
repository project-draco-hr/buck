{
  final MutableDirectedGraph<BuildRule> graph=new MutableDirectedGraph<>();
  AbstractDependencyVisitor visitor=new AbstractDependencyVisitor(ImmutableList.<BuildRule>copyOf(inputs)){
    @Override public ImmutableSet<BuildRule> visit(    BuildRule rule){
      graph.addNode(rule);
      for (      BuildRule dep : rule.getDeps()) {
        graph.addEdge(rule,dep);
      }
      return rule.getDeps();
    }
  }
;
  visitor.start();
  return FluentIterable.from(TopologicalSort.sort(graph,Predicates.<BuildRule>alwaysTrue())).toList();
}
