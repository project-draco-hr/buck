{
  Preconditions.checkState(!soname.isPresent() || SONAME_REQUIRED_LINK_TYPES.contains(linkType));
  Preconditions.checkState(!bundleLoader.isPresent() || linkType == Linker.LinkType.MACH_O_BUNDLE);
  Linker linker=cxxPlatform.getLd();
  NativeLinkableInput linkableInput=NativeLinkables.getTransitiveNativeLinkableInput(cxxPlatform,nativeLinkableDeps,depType,true);
  ImmutableList<SourcePath> allInputs=ImmutableList.<SourcePath>builder().addAll(inputs).addAll(linkableInput.getInputs()).build();
  ImmutableSortedSet.Builder<BuildRule> deps=ImmutableSortedSet.naturalOrder();
  deps.addAll(resolver.filterBuildRuleInputs(allInputs));
  if (bundleLoader.isPresent()) {
    Optional<BuildRule> bundleLoaderRule=resolver.getRule(bundleLoader.get());
    if (bundleLoaderRule.isPresent()) {
      deps.add(bundleLoaderRule.get());
    }
  }
  BuildRuleParams linkParams=params.copyWithChanges(target,Suppliers.ofInstance(deps.build()),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of()));
  ImmutableList.Builder<String> argsBuilder=ImmutableList.builder();
  argsBuilder.addAll(cxxPlatform.getCxxldflags());
  argsBuilder.addAll(extraCxxLdFlags);
  argsBuilder.addAll(iXlinker(cxxPlatform.getLdflags()));
  argsBuilder.addAll(iXlinker(extraLdFlags));
  if (linkType == Linker.LinkType.SHARED) {
    argsBuilder.add("-shared");
  }
 else   if (linkType == Linker.LinkType.MACH_O_BUNDLE) {
    argsBuilder.add("-bundle");
    if (bundleLoader.isPresent()) {
      argsBuilder.add("-bundle_loader",resolver.getPath(bundleLoader.get()).toString());
    }
  }
  if (soname.isPresent()) {
    argsBuilder.addAll(iXlinker(linker.soname(soname.get())));
  }
  for (  SourcePath input : inputs) {
    argsBuilder.addAll(iXlinker(linker.linkWhole(resolver.getPath(input).toString())));
  }
  argsBuilder.addAll(iXlinker(linkableInput.getArgs()));
  Linker.LinkableDepType runtimeDepType=depType;
  if (cxxRuntimeType.or(Linker.CxxRuntimeType.DYNAMIC) == Linker.CxxRuntimeType.STATIC) {
    runtimeDepType=Linker.LinkableDepType.STATIC;
  }
  argsBuilder.addAll(iXlinker(cxxPlatform.getRuntimeLdflags().get(runtimeDepType)));
  ImmutableList<String> args=argsBuilder.build();
  return new CxxLink(linkParams,resolver,cxxPlatform.getCxxld(),output,allInputs,args,cxxPlatform.getDebugPathSanitizer());
}
