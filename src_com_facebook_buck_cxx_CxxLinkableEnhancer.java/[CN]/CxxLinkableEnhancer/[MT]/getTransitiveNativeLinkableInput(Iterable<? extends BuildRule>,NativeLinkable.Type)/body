{
  final MutableDirectedGraph<BuildRule> graph=new MutableDirectedGraph<>();
  AbstractDependencyVisitor visitor=new AbstractDependencyVisitor(inputs){
    @Override public ImmutableSet<BuildRule> visit(    BuildRule rule){
      if (rule instanceof NativeLinkable) {
        graph.addNode(rule);
        for (        BuildRule dep : rule.getDeps()) {
          if (dep instanceof NativeLinkable) {
            graph.addEdge(rule,dep);
          }
        }
        return rule.getDeps();
      }
 else {
        return ImmutableSet.of();
      }
    }
  }
;
  visitor.start();
  return NativeLinkableInput.concat(FluentIterable.from(TopologicalSort.sort(graph,Predicates.<BuildRule>alwaysTrue()).reverse()).filter(NativeLinkable.class).transform(NativeLinkables.getNativeLinkableInput(depType)));
}
