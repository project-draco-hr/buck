{
  final Linker linker=cxxPlatform.getLd();
  ImmutableList.Builder<Arg> argsBuilder=ImmutableList.builder();
  argsBuilder.addAll(SanitizedArg.from(cxxPlatform.getDebugPathSanitizer().sanitize(Optional.<Path>absent()),cxxPlatform.getLdflags()));
  argsBuilder.addAll(args);
  argsBuilder.addAll(StringArg.from(cxxPlatform.getRuntimeLdflags().get(depType)));
  final ImmutableList<Arg> allArgs=argsBuilder.build();
  return new CxxLink(params.copyWithChanges(target,new Supplier<ImmutableSortedSet<BuildRule>>(){
    @Override public ImmutableSortedSet<BuildRule> get(){
      return FluentIterable.from(allArgs).transformAndConcat(Arg.getDepsFunction(resolver)).append(linker.getDeps(resolver)).toSortedSet(Ordering.natural());
    }
  }
,Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),resolver,linker,output,allArgs);
}
