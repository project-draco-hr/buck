{
  if (!doStore) {
    return Futures.immediateFuture(null);
  }
  try {
    for (    RuleKey ruleKey : ruleKeys) {
      Path tmp=filesystem.createTempFile(cacheDir,"artifact",".tmp");
      try {
        filesystem.copyFile(output,tmp);
        Path artifactPath=cacheDir.resolve(ruleKey.toString());
        filesystem.move(tmp,artifactPath);
        bytesSinceLastDeleteOldFiles+=filesystem.getFileSize(artifactPath);
      }
  finally {
        filesystem.deleteFileAtPathIfExists(tmp);
      }
      tmp=filesystem.createTempFile(cacheDir,"metadata",".tmp");
      try {
        try (DataOutputStream out=new DataOutputStream(filesystem.newFileOutputStream(tmp))){
          out.writeInt(metadata.size());
          for (          Map.Entry<String,String> ent : metadata.entrySet()) {
            out.writeUTF(ent.getKey());
            byte[] val=ent.getValue().getBytes(Charsets.UTF_8);
            out.writeInt(val.length);
            out.write(val);
          }
        }
         Path metadataPath=cacheDir.resolve(ruleKey.toString() + ".metadata");
        filesystem.move(tmp,metadataPath);
        bytesSinceLastDeleteOldFiles+=filesystem.getFileSize(metadataPath);
      }
  finally {
        filesystem.deleteFileAtPathIfExists(tmp);
      }
    }
  }
 catch (  IOException e) {
    LOG.warn(e,"Artifact store(%s, %s) error",ruleKeys,output);
  }
  if (maxCacheSizeBytes.isPresent() && bytesSinceLastDeleteOldFiles > (maxCacheSizeBytes.get() * STORED_TO_MAX_BYTES_RATIO_TRIM_TRIGGER)) {
    bytesSinceLastDeleteOldFiles=0L;
    deleteOldFiles();
  }
  return Futures.immediateFuture(null);
}
