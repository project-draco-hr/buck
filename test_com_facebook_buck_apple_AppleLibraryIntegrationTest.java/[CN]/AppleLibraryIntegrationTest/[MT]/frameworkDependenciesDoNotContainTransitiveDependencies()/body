{
  assumeTrue(Platform.detect() == Platform.MACOS);
  assumeTrue(AppleNativeIntegrationTestUtils.isApplePlatformAvailable(ApplePlatform.MACOSX));
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"apple_library_with_library_dependencies",tmp);
  workspace.setUp();
  ProjectFilesystem filesystem=new ProjectFilesystem(workspace.getDestPath());
  BuildTarget target=BuildTargetFactory.newInstance("//Libraries/TestLibrary:TestLibrary#framework,macosx-x86_64");
  ProjectWorkspace.ProcessResult result=workspace.runBuckCommand("build",target.getFullyQualifiedName());
  result.assertSuccess();
  Path frameworkPath=workspace.getPath(BuildTargets.getGenPath(filesystem,BuildTarget.builder(target).addFlavors(AppleDebugFormat.DWARF.getFlavor()).addFlavors(AppleDescriptions.INCLUDE_FRAMEWORKS_FLAVOR).build(),"%s").resolve("TestLibrary.framework"));
  assertThat(Files.exists(frameworkPath),is(true));
  Path frameworksPath=frameworkPath.resolve("Contents/Frameworks");
  assertThat(Files.exists(frameworksPath),is(true));
  Path depFrameworksPath=frameworksPath.resolve("TestLibraryDep.framework/Contents/Frameworks");
  assertThat(Files.exists(depFrameworksPath),is(false));
}
