{
  assumeTrue(Platform.detect() == Platform.MACOS);
  assumeTrue(AppleNativeIntegrationTestUtils.isApplePlatformAvailable(ApplePlatform.MACOSX));
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"apple_library_with_library_dependencies",tmp);
  workspace.setUp();
  BuildTarget target=BuildTargetFactory.newInstance("//Libraries/TestLibrary:TestLibrary#" + "dwarf-and-dsym,framework,macosx-x86_64,no-include-frameworks");
  ProjectWorkspace.ProcessResult result=workspace.runBuckCommand("build",target.getFullyQualifiedName());
  result.assertSuccess();
  Path frameworkPath=workspace.getPath(BuildTargets.getGenPath(target,"%s").resolve("TestLibrary.framework"));
  assertThat(Files.exists(frameworkPath),is(true));
  assertThat(Files.exists(frameworkPath.resolve("Contents/Info.plist")),is(true));
  Path libraryPath=frameworkPath.resolve("Contents/MacOS/TestLibrary");
  assertThat(Files.exists(libraryPath),is(true));
  assertThat(workspace.runCommand("file",libraryPath.toString()).getStdout().get(),containsString("dynamically linked shared library"));
  Path frameworksPath=frameworkPath.resolve("Contents/Frameworks");
  assertThat(Files.exists(frameworksPath),is(false));
}
