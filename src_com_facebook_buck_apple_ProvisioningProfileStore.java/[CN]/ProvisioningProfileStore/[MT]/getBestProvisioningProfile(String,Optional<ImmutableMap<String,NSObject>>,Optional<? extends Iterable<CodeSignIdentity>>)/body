{
  final Optional<String> prefix;
  if (entitlements.isPresent()) {
    prefix=Optional.of(ProvisioningProfileMetadata.prefixFromEntitlements(entitlements.get()));
  }
 else {
    prefix=Optional.<String>absent();
  }
  int bestMatchLength=-1;
  Optional<ProvisioningProfileMetadata> bestMatch=Optional.absent();
  for (  ProvisioningProfileMetadata profile : getProvisioningProfiles()) {
    if (profile.getExpirationDate().after(new Date())) {
      Pair<String,String> appID=profile.getAppID();
      LOG.debug("Looking at provisioning profile " + profile.getUUID() + ","+ appID.toString());
      if (!prefix.isPresent() || prefix.get().equals(appID.getFirst())) {
        String profileBundleID=appID.getSecond();
        boolean match;
        if (profileBundleID.endsWith("*")) {
          profileBundleID=profileBundleID.substring(0,profileBundleID.length() - 1);
          match=bundleID.startsWith(profileBundleID);
        }
 else {
          match=(bundleID.equals(profileBundleID));
        }
        if (!match) {
          LOG.debug("Ignoring non-matching ID for profile " + profile.getUUID());
        }
        if (match && entitlements.isPresent()) {
          ImmutableMap<String,NSObject> entitlementsDict=entitlements.get();
          ImmutableMap<String,NSObject> profileEntitlements=profile.getEntitlements();
          for (          Entry<String,NSObject> entry : entitlementsDict.entrySet()) {
            if (!(entry.getKey().equals("keychain-access-groups") || entry.getKey().equals("application-identifier") || entry.getKey().equals("com.apple.developer.associated-domains")|| matchesOrArrayIsSubsetOf(entry.getValue(),profileEntitlements.get(entry.getKey())))) {
              match=false;
              LOG.debug("Ignoring profile " + profile.getUUID() + " with mismatched entitlement "+ entry.getKey()+ "; value is "+ profileEntitlements.get(entry.getKey())+ " but expected "+ entry.getValue());
              break;
            }
          }
        }
        ImmutableSet<HashCode> validFingerprints=profile.getDeveloperCertificateFingerprints();
        if (match && identities.isPresent() && !validFingerprints.isEmpty()) {
          match=false;
          for (          CodeSignIdentity identity : identities.get()) {
            Optional<HashCode> fingerprint=identity.getFingerprint();
            if (fingerprint.isPresent() && validFingerprints.contains(fingerprint.get())) {
              match=true;
              break;
            }
          }
          if (!match) {
            LOG.debug("Ignoring profile " + profile.getUUID() + " because it can't be signed with any valid identity in the current keychain.");
          }
        }
        if (match && profileBundleID.length() > bestMatchLength) {
          bestMatchLength=profileBundleID.length();
          bestMatch=Optional.of(profile);
        }
      }
    }
 else {
      LOG.debug("Ignoring expired profile " + profile.getUUID());
    }
  }
  LOG.debug("Found provisioning profile " + bestMatch.toString());
  return bestMatch;
}
