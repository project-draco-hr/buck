@classmethod
def write_zipped_internal_cache(cls, pex, pex_info):
    prefix_length = (len(pex_info.internal_cache) + 1)
    distributions = []
    with open_zip(pex) as zf:
        distribution_names = set(filter(None, (filename[prefix_length:].split('/')[0] for filename in zf.namelist() if filename.startswith(pex_info.internal_cache))))
        for distribution_name in distribution_names:
            internal_dist_path = '/'.join([pex_info.internal_cache, distribution_name])
            dist = DistributionHelper.distribution_from_path(os.path.join(pex, internal_dist_path))
            if (DistributionHelper.zipsafe(dist) and (not pex_info.always_write_cache)):
                distributions.append(dist)
                continue
            dist_digest = (pex_info.distributions.get(distribution_name) or CacheHelper.zip_hash(zf, internal_dist_path))
            target_dir = os.path.join(pex_info.install_cache, ('%s.%s' % (distribution_name, dist_digest)))
            with TRACER.timed(('Caching %s into %s' % (dist, target_dir))):
                distributions.append(CacheHelper.cache_distribution(zf, internal_dist_path, target_dir))
    return distributions
