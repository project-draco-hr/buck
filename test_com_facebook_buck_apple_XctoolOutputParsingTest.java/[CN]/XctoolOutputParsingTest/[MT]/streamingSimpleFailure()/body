{
  Path jsonPath=TestDataHelper.getTestDataDirectory(this).resolve("xctool-output/simple-failure.json");
  final List<Object> streamedObjects=new ArrayList<>();
  try (Reader jsonReader=Files.newBufferedReader(jsonPath,StandardCharsets.UTF_8)){
    XctoolOutputParsing.streamOutputFromReader(jsonReader,eventCallbackAddingEventsToList(streamedObjects));
  }
   assertThat(streamedObjects,hasSize(8));
  Iterator<Object> iter=streamedObjects.iterator();
  Object nextStreamedObject;
  nextStreamedObject=iter.next();
  assertThat(nextStreamedObject,instanceOf(XctoolOutputParsing.StatusEvent.class));
  XctoolOutputParsing.StatusEvent beginStatusEvent=(XctoolOutputParsing.StatusEvent)nextStreamedObject;
  assertThat(beginStatusEvent.timestamp,closeTo(1432065858.258645,EPSILON));
  assertThat(beginStatusEvent.message,equalTo("Collecting info for testables..."));
  assertThat(beginStatusEvent.level,equalTo("Info"));
  nextStreamedObject=iter.next();
  assertThat(nextStreamedObject,instanceOf(XctoolOutputParsing.StatusEvent.class));
  XctoolOutputParsing.StatusEvent endStatusEvent=(XctoolOutputParsing.StatusEvent)nextStreamedObject;
  assertThat(endStatusEvent.timestamp,closeTo(1432065859.00568,EPSILON));
  assertThat(endStatusEvent.message,equalTo("Collecting info for testables..."));
  assertThat(endStatusEvent.level,equalTo("Info"));
  nextStreamedObject=iter.next();
  assertThat(nextStreamedObject,instanceOf(XctoolOutputParsing.BeginOcunitEvent.class));
  XctoolOutputParsing.BeginOcunitEvent beginOcunitEvent=(XctoolOutputParsing.BeginOcunitEvent)nextStreamedObject;
  assertThat(beginOcunitEvent.timestamp,closeTo(1432065859.006029,EPSILON));
  nextStreamedObject=iter.next();
  assertThat(nextStreamedObject,instanceOf(XctoolOutputParsing.BeginTestSuiteEvent.class));
  XctoolOutputParsing.BeginTestSuiteEvent beginTestSuiteEvent=(XctoolOutputParsing.BeginTestSuiteEvent)nextStreamedObject;
  assertThat(beginTestSuiteEvent.timestamp,closeTo(1432065859.681727,EPSILON));
  assertThat(beginTestSuiteEvent.suite,equalTo("Toplevel Test Suite"));
  nextStreamedObject=iter.next();
  assertThat(nextStreamedObject,instanceOf(XctoolOutputParsing.BeginTestEvent.class));
  XctoolOutputParsing.BeginTestEvent beginTestEvent=(XctoolOutputParsing.BeginTestEvent)nextStreamedObject;
  assertThat(beginTestEvent.timestamp,closeTo(1432065859.684965,EPSILON));
  assertThat(beginTestEvent.test,equalTo("-[FooXCTest testTwoPlusTwoEqualsFive]"));
  assertThat(beginTestEvent.className,equalTo("FooXCTest"));
  assertThat(beginTestEvent.methodName,equalTo("testTwoPlusTwoEqualsFive"));
  nextStreamedObject=iter.next();
  assertThat(nextStreamedObject,instanceOf(XctoolOutputParsing.EndTestEvent.class));
  XctoolOutputParsing.EndTestEvent endTestEvent=(XctoolOutputParsing.EndTestEvent)nextStreamedObject;
  assertThat(endTestEvent.timestamp,closeTo(1432065859.685524,EPSILON));
  assertThat(endTestEvent.totalDuration,closeTo(0.003522038459777832,EPSILON));
  assertThat(endTestEvent.test,equalTo("-[FooXCTest testTwoPlusTwoEqualsFive]"));
  assertThat(endTestEvent.className,equalTo("FooXCTest"));
  assertThat(endTestEvent.methodName,equalTo("testTwoPlusTwoEqualsFive"));
  assertThat(endTestEvent.succeeded,is(false));
  assertThat(endTestEvent.exceptions,hasSize(1));
  nextStreamedObject=iter.next();
  XctoolOutputParsing.TestException testException=endTestEvent.exceptions.get(0);
  assertThat(testException.lineNumber,equalTo(9));
  assertThat(testException.filePathInProject,equalTo("FooXCTest.m"));
  assertThat(testException.reason,equalTo("((2 + 2) equal to (5)) failed: (\"4\") is not equal to (\"5\") - Two plus two " + "equals five"));
  assertThat(nextStreamedObject,instanceOf(XctoolOutputParsing.EndTestSuiteEvent.class));
  XctoolOutputParsing.EndTestSuiteEvent endTestSuiteEvent=(XctoolOutputParsing.EndTestSuiteEvent)nextStreamedObject;
  assertThat(endTestSuiteEvent.timestamp,closeTo(1432065859.685689,EPSILON));
  assertThat(endTestSuiteEvent.suite,equalTo("Toplevel Test Suite"));
  assertThat(endTestSuiteEvent.testCaseCount,equalTo(1));
  assertThat(endTestSuiteEvent.totalFailureCount,equalTo(1));
  assertThat(endTestSuiteEvent.unexpectedExceptionCount,equalTo(0));
  assertThat(endTestSuiteEvent.totalDuration,closeTo(0.003962039947509766,EPSILON));
  nextStreamedObject=iter.next();
  assertThat(nextStreamedObject,instanceOf(XctoolOutputParsing.EndOcunitEvent.class));
  XctoolOutputParsing.EndOcunitEvent endOcunitEvent=(XctoolOutputParsing.EndOcunitEvent)nextStreamedObject;
  assertThat(endOcunitEvent.timestamp,closeTo(1432065859.751992,EPSILON));
  assertThat(endOcunitEvent.message,nullValue(String.class));
  assertThat(endOcunitEvent.succeeded,is(false));
}
