{
  Path jsonPath=TestDataHelper.getTestDataDirectory(this).resolve("xctool-output/simple-success.json");
  final List<Object> streamedObjects=new ArrayList<>();
  try (Reader jsonReader=Files.newBufferedReader(jsonPath,StandardCharsets.UTF_8)){
    XctoolOutputParsing.streamOutputFromReader(jsonReader,eventCallbackAddingEventsToList(streamedObjects));
  }
   assertThat(streamedObjects,hasSize(6));
  assertThat(streamedObjects.get(0),instanceOf(XctoolOutputParsing.BeginOcunitEvent.class));
  XctoolOutputParsing.BeginOcunitEvent beginOcunitEvent=(XctoolOutputParsing.BeginOcunitEvent)streamedObjects.get(0);
  assertThat(beginOcunitEvent.timestamp,closeTo(1432065854.07812,EPSILON));
  assertThat(streamedObjects.get(1),instanceOf(XctoolOutputParsing.BeginTestSuiteEvent.class));
  XctoolOutputParsing.BeginTestSuiteEvent beginTestSuiteEvent=(XctoolOutputParsing.BeginTestSuiteEvent)streamedObjects.get(1);
  assertThat(beginTestSuiteEvent.timestamp,closeTo(1432065854.736793,EPSILON));
  assertThat(beginTestSuiteEvent.suite,equalTo("Toplevel Test Suite"));
  assertThat(streamedObjects.get(2),instanceOf(XctoolOutputParsing.BeginTestEvent.class));
  XctoolOutputParsing.BeginTestEvent beginTestEvent=(XctoolOutputParsing.BeginTestEvent)streamedObjects.get(2);
  assertThat(beginTestEvent.timestamp,closeTo(1432065854.739917,EPSILON));
  assertThat(beginTestEvent.test,equalTo("-[FooXCTest testTwoPlusTwoEqualsFour]"));
  assertThat(beginTestEvent.className,equalTo("FooXCTest"));
  assertThat(beginTestEvent.methodName,equalTo("testTwoPlusTwoEqualsFour"));
  assertThat(streamedObjects.get(3),instanceOf(XctoolOutputParsing.EndTestEvent.class));
  XctoolOutputParsing.EndTestEvent endTestEvent=(XctoolOutputParsing.EndTestEvent)streamedObjects.get(3);
  assertThat(endTestEvent.timestamp,closeTo(1432065854.740184,EPSILON));
  assertThat(endTestEvent.test,equalTo("-[FooXCTest testTwoPlusTwoEqualsFour]"));
  assertThat(endTestEvent.className,equalTo("FooXCTest"));
  assertThat(endTestEvent.methodName,equalTo("testTwoPlusTwoEqualsFour"));
  assertThat(endTestEvent.succeeded,is(true));
  assertThat(endTestEvent.exceptions,empty());
  assertThat(endTestEvent.totalDuration,closeTo(0.003052949905395508,EPSILON));
  assertThat(streamedObjects.get(4),instanceOf(XctoolOutputParsing.EndTestSuiteEvent.class));
  XctoolOutputParsing.EndTestSuiteEvent endTestSuiteEvent=(XctoolOutputParsing.EndTestSuiteEvent)streamedObjects.get(4);
  assertThat(endTestSuiteEvent.timestamp,closeTo(1432065854.740343,EPSILON));
  assertThat(endTestSuiteEvent.suite,equalTo("Toplevel Test Suite"));
  assertThat(endTestSuiteEvent.testCaseCount,equalTo(1));
  assertThat(endTestSuiteEvent.totalFailureCount,equalTo(0));
  assertThat(endTestSuiteEvent.unexpectedExceptionCount,equalTo(0));
  assertThat(endTestSuiteEvent.totalDuration,closeTo(0.003550052642822266,EPSILON));
  assertThat(streamedObjects.get(5),instanceOf(XctoolOutputParsing.EndOcunitEvent.class));
  XctoolOutputParsing.EndOcunitEvent endOcunitEvent=(XctoolOutputParsing.EndOcunitEvent)streamedObjects.get(5);
  assertThat(endOcunitEvent.timestamp,closeTo(1432065854.806839,EPSILON));
  assertThat(endOcunitEvent.message,nullValue(String.class));
  assertThat(endOcunitEvent.succeeded,is(true));
}
