{
  Path jsonPath=TestDataHelper.getTestDataDirectory(this).resolve("xctool-output/mixed-pass-and-fail.json");
  try (Reader jsonReader=Files.newBufferedReader(jsonPath,StandardCharsets.UTF_8)){
    List<TestCaseSummary> summaries=XctoolOutputParsing.parseOutputFromReader(jsonReader);
    assertThat(summaries,hasSize(2));
    Matcher<TestResultSummary> isOtherTestsTestSomethingSuccess=allOf(hasProperty("testCaseName",equalTo("OtherTests")),hasProperty("testName",equalTo("-[OtherTests testSomething]")),hasProperty("type",equalTo(ResultType.SUCCESS)),hasProperty("time",equalTo(3L)),hasProperty("message",nullValue(String.class)),hasProperty("stacktrace",nullValue(String.class)),hasProperty("stdOut",nullValue(String.class)),hasProperty("stdErr",nullValue(String.class)));
    List<TestResultSummary> otherTestsResults=summaries.get(0).getTestResults();
    assertThat(otherTestsResults,contains(isOtherTestsTestSomethingSuccess));
    Matcher<TestResultSummary> isSomeTestsTestBacktraceOutputIsCaptured=allOf(hasProperty("testCaseName",equalTo("SomeTests")),hasProperty("testName",equalTo("-[SomeTests testBacktraceOutputIsCaptured]")),hasProperty("type",equalTo(ResultType.SUCCESS)),hasProperty("time",equalTo(0L)),hasProperty("message",nullValue(String.class)),hasProperty("stacktrace",nullValue(String.class)),hasProperty("stdOut",containsString("-[SenTestCase performTest:]")),hasProperty("stdErr",nullValue(String.class)));
    Matcher<TestResultSummary> isSomeTestsTestOutputMerging=allOf(hasProperty("testCaseName",equalTo("SomeTests")),hasProperty("testName",equalTo("-[SomeTests testOutputMerging]")),hasProperty("type",equalTo(ResultType.SUCCESS)),hasProperty("time",equalTo(0L)),hasProperty("message",nullValue(String.class)),hasProperty("stacktrace",nullValue(String.class)),hasProperty("stdOut",containsString("stdout-line1\nstderr-line1\n")),hasProperty("stdErr",nullValue(String.class)));
    Matcher<TestResultSummary> isSomeTestsTestPrintSDK=allOf(hasProperty("testCaseName",equalTo("SomeTests")),hasProperty("testName",equalTo("-[SomeTests testPrintSDK]")),hasProperty("type",equalTo(ResultType.SUCCESS)),hasProperty("time",equalTo(1L)),hasProperty("message",nullValue(String.class)),hasProperty("stacktrace",nullValue(String.class)),hasProperty("stdOut",containsString("SDK: 6.1")),hasProperty("stdErr",nullValue(String.class)));
    Matcher<TestResultSummary> isSomeTestsTestStream=allOf(hasProperty("testCaseName",equalTo("SomeTests")),hasProperty("testName",equalTo("-[SomeTests testStream]")),hasProperty("type",equalTo(ResultType.SUCCESS)),hasProperty("time",equalTo(754L)),hasProperty("message",nullValue(String.class)),hasProperty("stacktrace",nullValue(String.class)),hasProperty("stdOut",containsString(">>>> i = 0")),hasProperty("stdErr",nullValue(String.class)));
    Matcher<TestResultSummary> isSomeTestsTestWillFail=allOf(hasProperty("testCaseName",equalTo("SomeTests")),hasProperty("testName",equalTo("-[SomeTests testWillFail]")),hasProperty("type",equalTo(ResultType.FAILURE)),hasProperty("time",equalTo(0L)),hasProperty("message",containsString("SomeTests.m:40: 'a' should be equal to 'b'")),hasProperty("stacktrace",nullValue(String.class)),hasProperty("stdOut",nullValue(String.class)),hasProperty("stdErr",nullValue(String.class)));
    Matcher<TestResultSummary> isSomeTestsTestWillPass=allOf(hasProperty("testCaseName",equalTo("SomeTests")),hasProperty("testName",equalTo("-[SomeTests testWillPass]")),hasProperty("type",equalTo(ResultType.SUCCESS)),hasProperty("time",equalTo(0L)),hasProperty("message",nullValue(String.class)),hasProperty("stacktrace",nullValue(String.class)),hasProperty("stdOut",nullValue(String.class)),hasProperty("stdErr",nullValue(String.class)));
    List<TestResultSummary> someTestsResults=summaries.get(1).getTestResults();
    assertThat(someTestsResults,contains(isSomeTestsTestBacktraceOutputIsCaptured,isSomeTestsTestOutputMerging,isSomeTestsTestPrintSDK,isSomeTestsTestStream,isSomeTestsTestWillFail,isSomeTestsTestWillPass));
  }
 }
