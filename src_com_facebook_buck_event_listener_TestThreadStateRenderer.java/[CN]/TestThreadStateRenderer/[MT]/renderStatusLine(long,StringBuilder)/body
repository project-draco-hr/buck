{
  ThreadRenderingInformation threadInformation=Preconditions.checkNotNull(threadInformationMap.get(threadId));
  Optional<String> stepCategory=Optional.absent();
  Optional<? extends LeafEvent> runningStep=Optional.absent();
  if (threadInformation.getTestStatusMessage().isPresent() && threadInformation.getTestStatusMessage().get().getTestStatusMessage().getLevel().intValue() >= MIN_LOG_LEVEL.intValue()) {
    stepCategory=Optional.of(threadInformation.getTestStatusMessage().get().getTestStatusMessage().getMessage());
    runningStep=threadInformation.getTestStatusMessage();
  }
 else   if (threadInformation.getTestSummary().isPresent()) {
    stepCategory=Optional.of(threadInformation.getTestSummary().get().getTestName());
    runningStep=threadInformation.getTestSummary();
  }
 else   if (threadInformation.getRunningStep().isPresent()) {
    stepCategory=Optional.of(threadInformation.getRunningStep().get().getCategory());
    runningStep=threadInformation.getRunningStep();
  }
  return commonThreadStateRenderer.renderLine(threadInformation.getBuildTarget(),threadInformation.getStartEvent(),runningStep,stepCategory,Optional.<String>absent(),threadInformation.getElapsedTimeMs(),lineBuilder);
}
