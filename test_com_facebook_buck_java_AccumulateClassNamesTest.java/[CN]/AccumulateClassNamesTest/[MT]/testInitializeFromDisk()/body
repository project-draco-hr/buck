{
  BuildTarget buildTarget=new BuildTarget("//foo","bar");
  JavaLibraryRule javaRule=new FakeJavaLibraryRule(buildTarget);
  AccumulateClassNames accumulateClassNames=new AccumulateClassNames(buildTarget,javaRule);
  ProjectFilesystem projectFilesystem=createMock(ProjectFilesystem.class);
  List<String> lines=ImmutableList.of("com/example/Bar 087b7707a5f8e0a2adf5652e3cd2072d89a197dc","com/example/Baz 62b1c2510840c0de55c13f66065a98a719be0f19","com/example/Foo e4fccb7520b7795e632651323c63217c9f59f72a");
  expect(projectFilesystem.readLines(Paths.get("buck-out/gen/foo/bar.classes.txt"))).andReturn(lines);
  OnDiskBuildInfo onDiskBuildInfo=new FakeOnDiskBuildInfo(buildTarget,projectFilesystem).putMetadata(AbiRule.ABI_KEY_ON_DISK_METADATA,"f7d6d1efa11c8ceef36cc56b0ec6c3a20ddbf19f");
  replayAll();
  accumulateClassNames.initializeFromDisk(onDiskBuildInfo);
  verifyAll();
  ImmutableSortedMap<String,HashCode> observedClasses=accumulateClassNames.getClassNames();
  assertEquals("initializeFromDisk() should read the lines and use them to create an ImmutableSortedMap.",ImmutableSortedMap.of("com/example/Bar",HashCode.fromString("087b7707a5f8e0a2adf5652e3cd2072d89a197dc"),"com/example/Baz",HashCode.fromString("62b1c2510840c0de55c13f66065a98a719be0f19"),"com/example/Foo",HashCode.fromString("e4fccb7520b7795e632651323c63217c9f59f72a")),observedClasses);
  assertEquals(new Sha1HashCode("f7d6d1efa11c8ceef36cc56b0ec6c3a20ddbf19f"),accumulateClassNames.getAbiKey());
}
