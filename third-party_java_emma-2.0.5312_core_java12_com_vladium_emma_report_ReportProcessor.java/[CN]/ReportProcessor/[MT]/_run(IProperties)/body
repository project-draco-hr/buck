{
  final Logger log=m_log;
  final boolean verbose=m_log.atVERBOSE();
  if (verbose) {
    log.verbose(IAppConstants.APP_VERBOSE_BUILD_ID);
    log.verbose("input data path:");
    log.verbose("{");
    for (int p=0; p < m_dataPath.length; ++p) {
      final File f=m_dataPath[p];
      final String nonexistent=f.exists() ? "" : "{nonexistent} ";
      log.verbose("  " + nonexistent + f.getAbsolutePath());
    }
    log.verbose("}");
    if ((m_sourcePath == null) || (m_sourcePath.length == 0)) {
      log.verbose("source path not set");
    }
 else {
      log.verbose("source path:");
      log.verbose("{");
      for (int p=0; p < m_sourcePath.length; ++p) {
        final File f=m_sourcePath[p];
        final String nonexistent=f.exists() ? "" : "{nonexistent} ";
        log.verbose("  " + nonexistent + f.getAbsolutePath());
      }
      log.verbose("}");
    }
  }
 else {
    log.info("processing input files ...");
  }
  RuntimeException failure=null;
  try {
    final long start=log.atINFO() ? System.currentTimeMillis() : 0;
    IMetaData mdata=null;
    ICoverageData cdata=null;
    try {
      for (int f=0; f < m_dataPath.length; ++f) {
        final File dataFile=m_dataPath[f];
        if (verbose)         log.verbose("processing input file [" + dataFile.getAbsolutePath() + "] ...");
        final IMergeable[] fileData=DataFactory.load(dataFile);
        final IMetaData _mdata=(IMetaData)fileData[DataFactory.TYPE_METADATA];
        if (_mdata != null) {
          if (verbose)           log.verbose("  loaded " + _mdata.size() + " metadata entries");
          if (mdata == null)           mdata=_mdata;
 else           mdata=(IMetaData)mdata.merge(_mdata);
        }
        final ICoverageData _cdata=(ICoverageData)fileData[DataFactory.TYPE_COVERAGEDATA];
        if (_cdata != null) {
          if (verbose)           log.verbose("  loaded " + _cdata.size() + " coverage data entries");
          if (cdata == null)           cdata=_cdata;
 else           cdata=(ICoverageData)cdata.merge(_cdata);
        }
        ++m_dataFileCount;
      }
      if (log.atINFO()) {
        final long end=System.currentTimeMillis();
        log.info(m_dataFileCount + " file(s) read and merged in " + (end - start)+ " ms");
      }
      if ((mdata == null) || mdata.isEmpty()) {
        log.warning("nothing to do: no metadata found in any of the data files");
        return;
      }
      if (cdata == null) {
        log.warning("nothing to do: no runtime coverage data found in any of the data files");
        return;
      }
      if (cdata.isEmpty()) {
        log.warning("no collected coverage data found in any of the data files [all reports will be empty]");
      }
      if (verbose) {
        if (mdata != null) {
          log.verbose("  merged metadata contains " + mdata.size() + " entries");
        }
        if (cdata != null) {
          log.verbose("  merged coverage data contains " + cdata.size() + " entries");
        }
      }
      SourcePathCache srcpathCache=null;
      if (m_sourcePath != null)       srcpathCache=new SourcePathCache(m_sourcePath,true);
      for (int g=0; g < m_reportGenerators.length; ++g) {
        final IReportGenerator generator=m_reportGenerators[g];
        try {
          generator.process(mdata,cdata,srcpathCache,toolProperties);
        }
 catch (        Throwable t) {
          t.printStackTrace(System.out);
          break;
        }
 finally {
          try {
            generator.cleanup();
          }
 catch (          Throwable ignore) {
          }
        }
      }
    }
 catch (    IOException ioe) {
      ioe.printStackTrace(System.out);
    }
  }
 catch (  SecurityException se) {
    failure=new EMMARuntimeException(SECURITY_RESTRICTION,new String[]{IAppConstants.APP_NAME},se);
  }
catch (  RuntimeException re) {
    failure=re;
  }
 finally {
    reset();
  }
  if (failure != null) {
    if (Exceptions.unexpectedFailure(failure,EXPECTED_FAILURES)) {
      throw new EMMARuntimeException(UNEXPECTED_FAILURE,new Object[]{failure.toString(),IAppConstants.APP_BUG_REPORT_LINK},failure);
    }
 else     throw failure;
  }
}
