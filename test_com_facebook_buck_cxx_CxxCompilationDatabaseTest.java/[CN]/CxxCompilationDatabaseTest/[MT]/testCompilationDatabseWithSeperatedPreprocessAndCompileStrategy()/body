{
  BuildTarget testBuildTarget=BuildTarget.builder(BuildTargetFactory.newInstance("//foo:baz")).addAllFlavors(ImmutableSet.of(CxxCompilationDatabase.COMPILATION_DATABASE)).build();
  BuildRuleParams testBuildRuleParams=new FakeBuildRuleParamsBuilder(testBuildTarget).setTargetGraph(TargetGraphFactory.newInstance(new CxxLibraryBuilder(testBuildTarget).build())).build();
  BuildRuleResolver testBuildRuleResolver=new BuildRuleResolver();
  SourcePathResolver testSourcePathResolver=new SourcePathResolver(testBuildRuleResolver);
  BuildTarget preprocessTarget=BuildTarget.builder(testBuildRuleParams.getBuildTarget().getUnflavoredBuildTarget()).addFlavors(ImmutableFlavor.of("preprocess-test.cpp")).build();
  BuildRuleParams preprocessBuildRuleParams=new FakeBuildRuleParamsBuilder(preprocessTarget).build();
  CxxPreprocessAndCompile testPreprocessRule=new CxxPreprocessAndCompile(preprocessBuildRuleParams,testSourcePathResolver,CxxPreprocessAndCompileStep.Operation.PREPROCESS,Optional.<Tool>of(new HashedFileTool(Paths.get("compiler"))),Optional.of(ImmutableList.<String>of()),Optional.<Tool>absent(),Optional.<ImmutableList<String>>absent(),Paths.get("test.ii"),new TestSourcePath("test.cpp"),CxxSource.Type.CXX_CPP_OUTPUT,ImmutableList.of(Paths.get("foo/bar"),Paths.get("test")),ImmutableList.<Path>of(),ImmutableList.<Path>of(),CxxHeaders.builder().build(),CxxPlatforms.DEFAULT_DEBUG_PATH_SANITIZER);
  BuildTarget compileTarget=BuildTarget.builder(testBuildRuleParams.getBuildTarget().getUnflavoredBuildTarget()).addFlavors(ImmutableFlavor.of("compile-test.cpp")).build();
  BuildRuleParams compileBuildRuleParams=new FakeBuildRuleParamsBuilder(compileTarget).setDeps(ImmutableSortedSet.<BuildRule>of(testPreprocessRule)).build();
  CxxPreprocessAndCompile testCompileRule=new CxxPreprocessAndCompile(compileBuildRuleParams,testSourcePathResolver,CxxPreprocessAndCompileStep.Operation.COMPILE,Optional.<Tool>absent(),Optional.<ImmutableList<String>>absent(),Optional.<Tool>of(new HashedFileTool(Paths.get("compiler"))),Optional.of(ImmutableList.<String>of()),Paths.get("test.o"),new TestSourcePath("test.ii"),CxxSource.Type.CXX_CPP_OUTPUT,ImmutableList.<Path>of(),ImmutableList.<Path>of(),ImmutableList.<Path>of(),CxxHeaders.builder().build(),CxxPlatforms.DEFAULT_DEBUG_PATH_SANITIZER);
  CxxCompilationDatabase compilationDatabase=CxxCompilationDatabase.createCompilationDatabase(testBuildRuleParams,testSourcePathResolver,CxxPreprocessMode.SEPARATE,ImmutableSortedSet.of(testPreprocessRule,testCompileRule));
  assertEquals("getPathToOutput() should be a function of the build target.",Paths.get("buck-out/gen/foo/__baz#compilation-database.json"),compilationDatabase.getPathToOutput());
  BuildContext buildContext=FakeBuildContext.NOOP_CONTEXT;
  BuildableContext buildableContext=new FakeBuildableContext();
  List<Step> buildSteps=compilationDatabase.getBuildSteps(buildContext,buildableContext);
  assertEquals(2,buildSteps.size());
  assertTrue(buildSteps.get(0) instanceof MkdirStep);
  assertTrue(buildSteps.get(1) instanceof CxxCompilationDatabase.GenerateCompilationCommandsJson);
  final String root="/Users/user/src";
  final Path fakeRoot=Paths.get(root);
  ProjectFilesystem projectFilesystem=new FakeProjectFilesystem(){
    @Override public Path resolve(    Path relativePath){
      return fakeRoot.resolve(relativePath);
    }
  }
;
  ExecutionContext context=TestExecutionContext.newBuilder().setProjectFilesystem(projectFilesystem).build();
  CxxCompilationDatabase.GenerateCompilationCommandsJson step=(CxxCompilationDatabase.GenerateCompilationCommandsJson)buildSteps.get(1);
  Iterable<CxxCompilationDatabaseEntry> observedEntries=step.createEntries(context);
  Iterable<CxxCompilationDatabaseEntry> expectedEntries=ImmutableList.of(new CxxCompilationDatabaseEntry(root + "/foo",root + "/test.cpp",ImmutableList.of("compiler","-x","c++-cpp-output","-c","-I","foo/bar","-I","test","-o","test.o","test.cpp")));
  MoreAsserts.assertIterablesEquals(expectedEntries,observedEntries);
}
