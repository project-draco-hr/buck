{
  if (!(member instanceof Method)) {
    return;
  }
  if (!shouldDumpMethod(name)) {
    return;
  }
  ConcreteMethod meth=new ConcreteMethod((Method)member,classFile,true,true);
  TranslationAdvice advice=DexTranslationAdvice.THE_ONE;
  RopMethod rmeth=Ropper.convert(meth,advice,classFile.getMethods());
  if (optimize) {
    boolean isStatic=AccessFlags.isStatic(meth.getAccessFlags());
    rmeth=new Optimizer().optimize(rmeth,BaseDumper.computeParamWidth(meth,isStatic),isStatic,true,advice);
  }
  System.out.println("digraph " + name + "{");
  System.out.println("\tfirst -> n" + Hex.u2(rmeth.getFirstLabel()) + ";");
  BasicBlockList blocks=rmeth.getBlocks();
  int sz=blocks.size();
  for (int i=0; i < sz; i++) {
    BasicBlock bb=blocks.get(i);
    int label=bb.getLabel();
    IntList successors=bb.getSuccessors();
    if (successors.size() == 0) {
      System.out.println("\tn" + Hex.u2(label) + " -> returns;");
    }
 else     if (successors.size() == 1) {
      System.out.println("\tn" + Hex.u2(label) + " -> n"+ Hex.u2(successors.get(0))+ ";");
    }
 else {
      System.out.print("\tn" + Hex.u2(label) + " -> {");
      for (int j=0; j < successors.size(); j++) {
        int successor=successors.get(j);
        if (successor != bb.getPrimarySuccessor()) {
          System.out.print(" n" + Hex.u2(successor) + " ");
        }
      }
      System.out.println("};");
      System.out.println("\tn" + Hex.u2(label) + " -> n"+ Hex.u2(bb.getPrimarySuccessor())+ " [label=\"primary\"];");
    }
  }
  System.out.println("}");
}
