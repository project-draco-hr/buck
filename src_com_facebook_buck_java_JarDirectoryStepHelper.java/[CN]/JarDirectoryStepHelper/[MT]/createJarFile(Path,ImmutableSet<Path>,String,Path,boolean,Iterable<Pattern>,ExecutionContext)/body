{
  ProjectFilesystem filesystem=context.getProjectFilesystem();
  Manifest manifest=new Manifest();
  manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION,"1.0");
  try (CustomZipOutputStream outputFile=ZipOutputStreams.newOutputStream(filesystem.getFileForRelativePath(pathToOutputFile),APPEND_TO_ZIP)){
    Set<String> alreadyAddedEntries=Sets.newHashSet();
    ProjectFilesystem projectFilesystem=context.getProjectFilesystem();
    for (    Path entry : entriesToJar) {
      File file=projectFilesystem.getFileForRelativePath(entry);
      if (file.isFile()) {
        copyZipEntriesToJar(file,outputFile,manifest,alreadyAddedEntries,context.getBuckEventBus(),blacklist);
      }
 else       if (file.isDirectory()) {
        addFilesInDirectoryToJar(file,outputFile,alreadyAddedEntries,context.getBuckEventBus());
      }
 else {
        throw new IllegalStateException("Must be a file or directory: " + file);
      }
    }
    if (manifestFile != null) {
      try (FileInputStream manifestStream=new FileInputStream(filesystem.getFileForRelativePath(manifestFile))){
        Manifest userSupplied=new Manifest(manifestStream);
        if (mergeManifests) {
          merge(manifest,userSupplied);
        }
 else {
          manifest=userSupplied;
        }
      }
     }
    if (mainClass != null) {
      if (!mainClassPresent(mainClass,alreadyAddedEntries)) {
        context.getStdErr().print(String.format("ERROR: Main class %s does not exist.\n",mainClass));
        return 1;
      }
      manifest.getMainAttributes().put(Attributes.Name.MAIN_CLASS,mainClass);
    }
    JarEntry manifestEntry=new JarEntry(JarFile.MANIFEST_NAME);
    manifestEntry.setTime(0);
    outputFile.putNextEntry(manifestEntry);
    manifest.write(outputFile);
  }
   return 0;
}
