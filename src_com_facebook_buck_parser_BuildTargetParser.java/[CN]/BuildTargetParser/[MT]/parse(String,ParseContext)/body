{
  Preconditions.checkNotNull(buildTargetName);
  Preconditions.checkNotNull(parseContext);
  for (  String invalidSubstring : INVALID_BUILD_RULE_SUBSTRINGS) {
    if (buildTargetName.contains(invalidSubstring)) {
      throw new BuildTargetParseException(String.format("%s cannot contain %s",buildTargetName,invalidSubstring));
    }
  }
  if (buildTargetName.endsWith(BUILD_RULE_SEPARATOR) && parseContext.getType() != ParseContext.Type.VISIBILITY) {
    throw new BuildTargetParseException(String.format("%s cannot end with a colon",buildTargetName));
  }
  Optional<String> repoName=Optional.absent();
  String targetAfterRepo=buildTargetName;
  if (buildTargetName.startsWith(REPOSITORY_STARTER)) {
    if (!buildTargetName.contains(BUILD_RULE_PREFIX)) {
      throw new BuildTargetParseException(String.format("Cross-repo paths must contain %s (found %s)",BUILD_RULE_PREFIX,buildTargetName));
    }
    int slashIndex=buildTargetName.indexOf(BUILD_RULE_PREFIX);
    repoName=Optional.of(buildTargetName.substring(REPOSITORY_STARTER.length(),slashIndex));
    targetAfterRepo=buildTargetName.substring(slashIndex);
  }
  if (repoName.isPresent() && repoName.get().isEmpty()) {
    throw new BuildTargetParseException("Repo name must not be empty.");
  }
  List<String> parts=BUILD_RULE_SEPARATOR_SPLITTER.splitToList(targetAfterRepo);
  if (parts.size() != 2) {
    throw new BuildTargetParseException(String.format("%s must contain exactly one colon (found %d)",buildTargetName,parts.size() - 1));
  }
  String baseName=parts.get(0).isEmpty() ? parseContext.getBaseName() : parts.get(0);
  String shortName=parts.get(1);
  String fullyQualifiedName=String.format("%s:%s",baseName,shortName);
  if (!fullyQualifiedName.startsWith(BUILD_RULE_PREFIX)) {
    throw new BuildTargetParseException(String.format("%s must start with %s",fullyQualifiedName,BUILD_RULE_PREFIX));
  }
  Path buildFileDirectory=Paths.get(baseName.substring(BUILD_RULE_PREFIX.length()));
  Path buildFilePath=buildFileDirectory.resolve(BUILD_RULES_FILE_NAME);
  if (!projectFilesystem.exists(buildFileDirectory)) {
    if (parseContext.getType() == ParseContext.Type.BUILD_FILE && baseName.equals(parseContext.getBaseName())) {
      throw new BuildTargetParseException(String.format("Internal error: Parsing in the context of %s, but %s does not exist",buildFilePath,buildFileDirectory));
    }
 else {
      throw NoSuchBuildTargetException.createForMissingDirectory(buildFileDirectory,buildTargetName,parseContext);
    }
  }
  if (!projectFilesystem.exists(buildFilePath)) {
    if (parseContext.getType() == ParseContext.Type.BUILD_FILE && baseName.equals(parseContext.getBaseName())) {
      throw new BuildTargetParseException(String.format("Internal error: Parsing in the context of %s, but %s does not exist",buildFilePath,buildFilePath));
    }
 else {
      throw NoSuchBuildTargetException.createForMissingBuildFile(buildFilePath,buildTargetName,parseContext);
    }
  }
  BuildTarget.Builder builder=BuildTarget.builder(baseName,shortName);
  if (repoName.isPresent()) {
    builder.setRepository(repoName.get()).build();
  }
  return builder.build();
}
