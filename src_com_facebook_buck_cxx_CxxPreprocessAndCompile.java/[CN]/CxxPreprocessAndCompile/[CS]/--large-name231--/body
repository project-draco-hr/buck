{
  super(params,resolver);
  Preconditions.checkState(operation.isPreprocess() == preprocessor.isPresent());
  Preconditions.checkState(operation.isPreprocess() == platformPreprocessorFlags.isPresent());
  Preconditions.checkState(operation.isPreprocess() == rulePreprocessorFlags.isPresent());
  Preconditions.checkState(operation.isCompile() == compiler.isPresent());
  Preconditions.checkState(operation.isCompile() == platformCompilerFlags.isPresent());
  Preconditions.checkState(operation.isCompile() == ruleCompilerFlags.isPresent());
  this.operation=operation;
  this.preprocessor=preprocessor;
  this.platformPreprocessorFlags=platformPreprocessorFlags;
  this.rulePreprocessorFlags=rulePreprocessorFlags;
  this.compiler=compiler;
  this.platformCompilerFlags=platformCompilerFlags;
  this.ruleCompilerFlags=ruleCompilerFlags;
  this.output=output;
  this.input=input;
  this.inputType=inputType;
  this.includeRoots=includeRoots;
  this.systemIncludeRoots=systemIncludeRoots;
  this.headerMaps=headerMaps;
  this.frameworkRoots=frameworkRoots;
  this.prefixHeader=prefixHeader;
  this.includes=includes;
  this.sanitizer=sanitizer;
}
