{
  buildableContext.recordArtifact(output);
  ImmutableMap.Builder<Path,Path> replacementPathsBuilder=ImmutableMap.builder();
  for (  Map.Entry<Path,SourcePath> entry : includes.getFullNameToPathMap().entrySet()) {
    replacementPathsBuilder.put(entry.getKey(),getResolver().getPath(entry.getValue()));
  }
  ImmutableMap<Path,Path> replacementPaths=replacementPathsBuilder.build();
  return ImmutableList.of(new MkdirStep(output.getParent()),new CxxPreprocessAndCompileStep(compiler.getCommandPrefix(getResolver()),operation,ImmutableList.<String>builder().addAll(flags).addAll(MoreIterables.zipAndConcat(Iterables.cycle("-include"),FluentIterable.from(includes.getPrefixHeaders()).transform(getResolver().getPathFunction()).transform(Functions.toStringFunction()))).addAll(MoreIterables.zipAndConcat(Iterables.cycle("-I"),Iterables.transform(includeRoots,Functions.toStringFunction()))).addAll(MoreIterables.zipAndConcat(Iterables.cycle("-isystem"),Iterables.transform(systemIncludeRoots,Functions.toStringFunction()))).addAll(MoreIterables.zipAndConcat(Iterables.cycle("-F"),Iterables.transform(frameworkRoots,Functions.toStringFunction()))).build(),output,getResolver().getPath(input),replacementPaths,sanitizer));
}
