{
  ImmutableMap<Path,Path> replacementPaths;
  try {
    replacementPaths=preprocessDelegate.isPresent() ? preprocessDelegate.get().getReplacementPaths() : ImmutableMap.<Path,Path>of();
  }
 catch (  CxxHeaders.ConflictingHeadersException e) {
    throw e.getHumanReadableExceptionForBuildTarget(getBuildTarget());
  }
  Optional<CxxPreprocessAndCompileStep.ToolCommand> preprocessorCommand;
  if (preprocessDelegate.isPresent()) {
    preprocessorCommand=Optional.of(new CxxPreprocessAndCompileStep.ToolCommand(getPreprocessorDelegate().get().getCommand(compilerDelegate.getPlatformCompilerFlags(),compilerDelegate.getRuleCompilerFlags()),preprocessDelegate.get().getEnvironment(),preprocessDelegate.get().getColorSupport()));
  }
 else {
    preprocessorCommand=Optional.absent();
  }
  Optional<CxxPreprocessAndCompileStep.ToolCommand> compilerCommand;
  if (operation.isCompile()) {
    compilerCommand=Optional.of(new CxxPreprocessAndCompileStep.ToolCommand(compilerDelegate.getCommand(operation == CxxPreprocessAndCompileStep.Operation.COMPILE_MUNGE_DEBUGINFO ? preprocessDelegate : Optional.<PreprocessorDelegate>absent()),compilerDelegate.getEnvironment(),compilerDelegate.getColorSupport()));
  }
 else {
    compilerCommand=Optional.absent();
  }
  return new CxxPreprocessAndCompileStep(getProjectFilesystem(),operation,output,getDepFilePath(),getResolver().deprecatedGetPath(input),inputType,preprocessorCommand,compilerCommand,replacementPaths,sanitizer,preprocessDelegate.isPresent() ? preprocessDelegate.get().getPreprocessorExtraLineProcessor() : Optional.<Function<String,Iterable<String>>>absent());
}
