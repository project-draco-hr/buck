{
  ImmutableMap<Path,Path> replacementPaths;
  try {
    replacementPaths=preprocessDelegate.isPresent() ? preprocessDelegate.get().getReplacementPaths() : ImmutableMap.<Path,Path>of();
  }
 catch (  CxxHeaders.ConflictingHeadersException e) {
    throw e.getHumanReadableExceptionForBuildTarget(getBuildTarget());
  }
  Optional<ImmutableList<String>> preprocessorCommand=preprocessDelegate.isPresent() ? Optional.of(preprocessDelegate.get().getPreprocessorCommand()) : Optional.<ImmutableList<String>>absent();
  Optional<ImmutableList<String>> compilerCommand;
  if (compiler.isPresent()) {
    compilerCommand=Optional.of(ImmutableList.<String>builder().addAll(compiler.get().getCommandPrefix(getResolver())).addAll(getCompilerPlatformPrefix()).addAll(getCompilerSuffix()).build());
  }
 else {
    compilerCommand=Optional.absent();
  }
  return new CxxPreprocessAndCompileStep(getProjectFilesystem(),operation,output,getDepFilePath(),getResolver().deprecatedGetPath(input),inputType,preprocessorCommand,compilerCommand,replacementPaths,sanitizer,preprocessDelegate.isPresent() ? preprocessDelegate.get().getPreprocessorExtraLineProcessor() : Optional.<Function<String,Iterable<String>>>absent());
}
