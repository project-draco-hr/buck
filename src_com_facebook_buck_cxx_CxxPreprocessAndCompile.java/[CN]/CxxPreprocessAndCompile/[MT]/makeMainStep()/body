{
  ImmutableMap.Builder<Path,Path> replacementPathsBuilder=ImmutableMap.builder();
  try {
    for (    Map.Entry<Path,SourcePath> entry : CxxHeaders.concat(includes).getFullNameToPathMap().entrySet()) {
      replacementPathsBuilder.put(entry.getKey(),getResolver().getPath(entry.getValue()));
    }
  }
 catch (  CxxHeaders.ConflictingHeadersException e) {
    throw e.getHumanReadableExceptionForBuildTarget(getBuildTarget());
  }
  ImmutableMap<Path,Path> replacementPaths=replacementPathsBuilder.build();
  Optional<ImmutableList<String>> preprocessorCommand;
  if (preprocessor.isPresent()) {
    preprocessorCommand=Optional.of(ImmutableList.<String>builder().addAll(preprocessor.get().getCommandPrefix(getResolver())).addAll(getPreprocessorPlatformPrefix()).addAll(getPreprocessorSuffix()).build());
  }
 else {
    preprocessorCommand=Optional.absent();
  }
  Optional<ImmutableList<String>> compilerCommand;
  if (compiler.isPresent()) {
    compilerCommand=Optional.of(ImmutableList.<String>builder().addAll(compiler.get().getCommandPrefix(getResolver())).addAll(getCompilerPlatformPrefix()).addAll(getCompilerSuffix()).build());
  }
 else {
    compilerCommand=Optional.absent();
  }
  return new CxxPreprocessAndCompileStep(operation,output,getResolver().getPath(input),inputType,preprocessorCommand,compilerCommand,replacementPaths,sanitizer);
}
