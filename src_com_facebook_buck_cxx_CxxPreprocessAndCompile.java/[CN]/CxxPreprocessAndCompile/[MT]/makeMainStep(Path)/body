{
  if (preprocessDelegate.isPresent()) {
    try {
      preprocessDelegate.get().checkForConflictingHeaders();
    }
 catch (    PreprocessorDelegate.ConflictingHeadersException e) {
      throw e.getHumanReadableExceptionForBuildTarget(getBuildTarget());
    }
  }
  ImmutableMap<Path,Path> replacementPaths=preprocessDelegate.isPresent() ? preprocessDelegate.get().getReplacementPaths() : ImmutableMap.<Path,Path>of();
  Optional<CxxPreprocessAndCompileStep.ToolCommand> preprocessorCommand;
  if (preprocessDelegate.isPresent()) {
    preprocessorCommand=Optional.of(new CxxPreprocessAndCompileStep.ToolCommand(getPreprocessorDelegate().get().getCommand(compilerDelegate.getCompilerFlags()),preprocessDelegate.get().getEnvironment(),preprocessDelegate.get().getFlagsForColorDiagnostics()));
  }
 else {
    preprocessorCommand=Optional.absent();
  }
  Optional<CxxPreprocessAndCompileStep.ToolCommand> compilerCommand;
  if (operation.isCompile()) {
    compilerCommand=Optional.of(new CxxPreprocessAndCompileStep.ToolCommand(compilerDelegate.getCommand(operation == CxxPreprocessAndCompileStep.Operation.COMPILE_MUNGE_DEBUGINFO ? preprocessDelegate.get().getFlagsWithSearchPaths() : CxxToolFlags.of()),compilerDelegate.getEnvironment(),compilerDelegate.getFlagsForColorDiagnostics()));
  }
 else {
    compilerCommand=Optional.absent();
  }
  return new CxxPreprocessAndCompileStep(getProjectFilesystem(),operation,output,getDepFilePath(),getResolver().deprecatedGetPath(input),inputType,preprocessorCommand,compilerCommand,replacementPaths,sanitizer,preprocessDelegate.isPresent() ? preprocessDelegate.get().getPreprocessorExtraLineProcessor() : Optional.<Function<String,Iterable<String>>>absent(),scratchDir);
}
