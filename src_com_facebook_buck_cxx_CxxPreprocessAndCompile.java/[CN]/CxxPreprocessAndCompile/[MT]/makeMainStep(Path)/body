{
  if (preprocessDelegate.isPresent()) {
    try {
      preprocessDelegate.get().checkForConflictingHeaders();
    }
 catch (    PreprocessorDelegate.ConflictingHeadersException e) {
      throw e.getHumanReadableExceptionForBuildTarget(getBuildTarget());
    }
  }
  HeaderPathNormalizer headerPathNormalizer=preprocessDelegate.isPresent() ? preprocessDelegate.get().getHeaderPathNormalizer() : HeaderPathNormalizer.empty(getResolver());
  Optional<CxxPreprocessAndCompileStep.ToolCommand> preprocessorCommand;
  if (operation.isPreprocess()) {
    preprocessorCommand=Optional.of(new CxxPreprocessAndCompileStep.ToolCommand(getPreprocessorDelegate().get().getCommand(compilerDelegate.getCompilerFlags()),preprocessDelegate.get().getEnvironment(),preprocessDelegate.get().getFlagsForColorDiagnostics()));
  }
 else {
    preprocessorCommand=Optional.absent();
  }
  Optional<CxxPreprocessAndCompileStep.ToolCommand> compilerCommand;
  if (operation.isCompile()) {
    ImmutableList<String> command;
    if (operation == CxxPreprocessAndCompileStep.Operation.COMPILE_MUNGE_DEBUGINFO) {
      command=compilerDelegate.getCommand(preprocessDelegate.get().getFlagsWithSearchPaths());
      if (precompiledHeader.isPresent()) {
        command=ImmutableList.<String>builder().addAll(command).add("-include-pch",getResolver().getAbsolutePath(precompiledHeader.get().getSourcePath()).toString()).build();
      }
    }
 else {
      command=compilerDelegate.getCommand(CxxToolFlags.of());
    }
    compilerCommand=Optional.of(new CxxPreprocessAndCompileStep.ToolCommand(command,compilerDelegate.getEnvironment(),compilerDelegate.getFlagsForColorDiagnostics()));
  }
 else {
    compilerCommand=Optional.absent();
  }
  return new CxxPreprocessAndCompileStep(getProjectFilesystem(),operation,output,getDepFilePath(),getResolver().deprecatedGetPath(input),inputType,preprocessorCommand,compilerCommand,headerPathNormalizer,sanitizer,preprocessDelegate.isPresent() ? preprocessDelegate.get().getHeaderVerification() : HeaderVerification.NONE,preprocessDelegate.isPresent() ? preprocessDelegate.get().getPreprocessorExtraLineProcessor() : Optional.<Function<String,Iterable<String>>>absent(),scratchDir);
}
