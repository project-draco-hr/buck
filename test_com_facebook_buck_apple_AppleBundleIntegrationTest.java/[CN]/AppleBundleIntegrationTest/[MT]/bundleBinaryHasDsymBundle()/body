{
  assumeTrue(Platform.detect() == Platform.MACOS);
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"simple_application_bundle_dwarf_and_dsym",tmp);
  workspace.setUp();
  workspace.runBuckCommand("build","//:DemoApp#dwarf-and-dsym,iphonesimulator-x86_64").assertSuccess();
  workspace.verify();
  Path bundlePath=tmp.getRootPath().resolve(BuckConstant.GEN_DIR).resolve("DemoApp#dwarf-and-dsym,iphonesimulator-x86_64," + "no-include-frameworks,transitive-resources/DemoApp.app");
  Path dwarfPath=bundlePath.getParent().resolve("DemoApp.app.dSYM/Contents/Resources/DWARF/DemoApp");
  Path binaryPath=bundlePath.resolve("DemoApp");
  assertTrue(Files.exists(dwarfPath));
  String dwarfdumpMainStdout=workspace.runCommand("dwarfdump","-n","main",dwarfPath.toString()).getStdout().or("");
  assertTrue(dwarfdumpMainStdout.contains("AT_name"));
  assertTrue(dwarfdumpMainStdout.contains("AT_decl_file"));
  assertTrue(dwarfdumpMainStdout.contains("AT_decl_line"));
  ProcessExecutor.Result result=workspace.runCommand("dsymutil","-o",binaryPath.toString() + ".test.dSYM",binaryPath.toString());
  String dsymutilOutput="";
  if (result.getStderr().isPresent()) {
    dsymutilOutput=result.getStderr().get();
  }
  if (dsymutilOutput.isEmpty()) {
    assertThat(result.getStdout().isPresent(),is(true));
    dsymutilOutput=result.getStdout().get();
  }
  assertThat(dsymutilOutput,containsString("warning: no debug symbols in executable"));
}
