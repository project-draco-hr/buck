{
  assumeTrue(Platform.detect() == Platform.MACOS);
  ProjectWorkspace workspace=TestDataHelper.createProjectWorkspaceForScenario(this,"simple_application_bundle_dwarf_and_dsym",tmp);
  workspace.setUp();
  BuildTarget target=workspace.newBuildTarget("//:DemoApp#dwarf-and-dsym,iphonesimulator-x86_64");
  workspace.runBuckCommand("build",target.getFullyQualifiedName()).assertSuccess();
  workspace.verify(Paths.get("DemoApp_output.expected"),BuildTargets.getGenPath(BuildTarget.builder(target).addFlavors(AppleDescriptions.NO_INCLUDE_FRAMEWORKS_FLAVOR).build(),"%s"));
  Path bundlePath=workspace.getPath(BuildTargets.getGenPath(BuildTarget.builder(target).addFlavors(AppleDescriptions.NO_INCLUDE_FRAMEWORKS_FLAVOR).build(),"%s").resolve(target.getShortName() + ".app"));
  Path dwarfPath=bundlePath.getParent().resolve("DemoApp.app.dSYM/Contents/Resources/DWARF/DemoApp");
  Path binaryPath=bundlePath.resolve("DemoApp");
  assertTrue(Files.exists(dwarfPath));
  AppleDsymTestUtil.checkDsymFileHasDebugSymbolForMain(workspace,dwarfPath);
  ProcessExecutor.Result result=workspace.runCommand("dsymutil","-o",binaryPath.toString() + ".test.dSYM",binaryPath.toString());
  String dsymutilOutput="";
  if (result.getStderr().isPresent()) {
    dsymutilOutput=result.getStderr().get();
  }
  if (dsymutilOutput.isEmpty()) {
    assertThat(result.getStdout().isPresent(),is(true));
    dsymutilOutput=result.getStdout().get();
  }
  assertThat(dsymutilOutput,containsString("warning: no debug symbols in executable"));
}
