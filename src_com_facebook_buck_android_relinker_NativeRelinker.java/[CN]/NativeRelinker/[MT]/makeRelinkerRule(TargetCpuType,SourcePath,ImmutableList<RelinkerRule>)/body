{
  Function<RelinkerRule,SourcePath> getSymbolsNeeded=new Function<RelinkerRule,SourcePath>(){
    @Override public SourcePath apply(    RelinkerRule rule){
      return rule.getSymbolsNeededPath();
    }
  }
;
  String libname=resolver.getAbsolutePath(source).getFileName().toString();
  BuildRuleParams relinkerParams=buildRuleParams.withFlavor(ImmutableFlavor.of("xdso-dce")).withFlavor(ImmutableFlavor.of(Flavor.replaceInvalidCharacters(cpuType.toString()))).withFlavor(ImmutableFlavor.of(Flavor.replaceInvalidCharacters(libname))).appendExtraDeps(relinkerDeps);
  BuildRule baseRule=resolver.getRule(source).orNull();
  ImmutableList<Arg> linkerArgs=ImmutableList.<Arg>of();
  Linker linker=null;
  if (baseRule != null && baseRule instanceof CxxLink) {
    CxxLink link=(CxxLink)baseRule;
    linkerArgs=link.getArgs();
    linker=link.getLinker();
  }
  return new RelinkerRule(relinkerParams,resolver,ImmutableList.copyOf(Lists.transform(relinkerDeps,getSymbolsNeeded)),cpuType,nativePlatforms.get(cpuType),source,linker != null,linker,linkerArgs);
}
