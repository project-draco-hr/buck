{
  if ($assert.ENABLED)   $assert.ASSERT(properties != null,"properties = null");
  final ParsedProperties result=new ParsedProperties();
{
    result.setOutEncoding(getReportProperty(properties,type,IReportProperties.OUT_ENCODING,false));
  }
{
    final String outDirName=getReportProperty(properties,type,IReportProperties.OUT_DIR,true);
    final String outFileName=getReportProperty(properties,type,IReportProperties.OUT_FILE,false);
    if (outFileName != null) {
      final File fullOutFile=Files.newFile(outDirName,outFileName);
      final File dir=fullOutFile.getParentFile();
      if (dir != null)       result.setOutDir(dir);
      result.setOutFile(new File(fullOutFile.getName()));
    }
 else     if (outDirName != null) {
      result.setOutDir(new File(outDirName));
    }
  }
{
    final String unitsType=getReportProperty(properties,type,IReportProperties.UNITS_TYPE,true,IReportProperties.DEFAULT_UNITS_TYPE);
    result.setUnitsType(IReportProperties.COUNT_UNITS.equals(unitsType) ? IItemAttribute.UNITS_COUNT : IItemAttribute.UNITS_INSTR);
  }
{
    result.setViewType(IReportDataView.HIER_SRC_VIEW);
  }
{
    final String hideClasses=getReportProperty(properties,type,IReportProperties.HIDE_CLASSES,true,IReportProperties.DEFAULT_HIDE_CLASSES);
    result.setHideClasses(Property.toBoolean(hideClasses));
    if (result.getViewType() == IReportDataView.HIER_CLS_VIEW)     result.setHideClasses(false);
  }
{
    final String depth=getReportProperty(properties,type,IReportProperties.DEPTH,false,IReportProperties.DEFAULT_DEPTH);
    if (IReportProperties.DEPTH_ALL.equals(depth))     result.setDepth(AllItem.getTypeMetadata().getTypeID());
 else     if (IReportProperties.DEPTH_PACKAGE.equals(depth))     result.setDepth(PackageItem.getTypeMetadata().getTypeID());
 else     if (IReportProperties.DEPTH_SRCFILE.equals(depth))     result.setDepth(SrcFileItem.getTypeMetadata().getTypeID());
 else     if (IReportProperties.DEPTH_CLASS.equals(depth))     result.setDepth(ClassItem.getTypeMetadata().getTypeID());
 else     if (IReportProperties.DEPTH_METHOD.equals(depth))     result.setDepth(MethodItem.getTypeMetadata().getTypeID());
 else     throw new EMMARuntimeException(INVALID_PARAMETER_VALUE,new Object[]{IReportProperties.DEPTH,depth});
  }
  if (result.getHideClasses() && (result.getViewType() == IReportDataView.HIER_SRC_VIEW) && (result.getDepth() == IItemMetadata.TYPE_ID_CLASS)) {
    result.setDepth(IItemMetadata.TYPE_ID_SRCFILE);
  }
  final Set columnNames=new HashSet();
{
    final String columnList=getReportProperty(properties,type,IReportProperties.COLUMNS,false,IReportProperties.DEFAULT_COLUMNS);
    final IntVector _columns=new IntVector();
    final int[] out=new int[1];
    for (StringTokenizer tokenizer=new StringTokenizer(columnList,","); tokenizer.hasMoreTokens(); ) {
      final String columnName=tokenizer.nextToken().trim();
      if (!COLUMNS.get(columnName,out)) {
        throw new EMMARuntimeException(INVALID_COLUMN_NAME,new Object[]{columnName});
      }
      if (!REMOVE_DUPLICATE_COLUMNS || !columnNames.contains(columnName)) {
        columnNames.add(columnName);
        _columns.add(out[0]);
      }
    }
    result.setColumnOrder(_columns.values());
  }
{
    final String sortList=getReportProperty(properties,type,IReportProperties.SORT,false,IReportProperties.DEFAULT_SORT);
    final IntVector _sort=new IntVector();
    final int[] out=new int[1];
    for (StringTokenizer tokenizer=new StringTokenizer(sortList,","); tokenizer.hasMoreTokens(); ) {
      final String sortSpec=tokenizer.nextToken().trim();
      final String columnName;
      final int dir;
switch (sortSpec.charAt(0)) {
case IReportProperties.ASC:
{
          dir=+1;
          columnName=sortSpec.substring(1);
        }
      break;
case IReportProperties.DESC:
{
      dir=-1;
      columnName=sortSpec.substring(1);
    }
  break;
default :
{
  dir=+1;
  columnName=sortSpec;
}
break;
}
if (columnNames.contains(columnName)) {
COLUMNS.get(columnName,out);
_sort.add(out[0]);
_sort.add(dir);
}
result.setSortOrder(_sort.values());
}
}
{
final String metricList=getReportProperty(properties,type,IReportProperties.METRICS,true,IReportProperties.DEFAULT_METRICS);
final IntIntMap _metrics=new IntIntMap();
final int[] out=new int[1];
for (StringTokenizer tokenizer=new StringTokenizer(metricList,","); tokenizer.hasMoreTokens(); ) {
final String metricSpec=tokenizer.nextToken().trim();
final String columnName;
final double criterion;
final int separator=metricSpec.indexOf(IReportProperties.MSEPARATOR);
if (separator > 0) {
try {
criterion=Double.parseDouble(metricSpec.substring(separator + 1));
if ((criterion < 0.0) || (criterion > 101.0)) continue;
}
 catch (NumberFormatException nfe) {
nfe.printStackTrace(System.out);
continue;
}
columnName=metricSpec.substring(0,separator);
if (columnNames.contains(columnName)) {
COLUMNS.get(columnName,out);
_metrics.put(out[0],(int)Math.round(((criterion * IItem.PRECISION) / 100.0)));
}
}
}
result.setMetrics(_metrics);
}
result.validate();
return result;
}
