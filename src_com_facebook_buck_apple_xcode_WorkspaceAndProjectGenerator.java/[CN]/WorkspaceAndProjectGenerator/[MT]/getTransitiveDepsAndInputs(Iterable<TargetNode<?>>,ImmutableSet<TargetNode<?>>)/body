{
  return FluentIterable.from(nodes).transformAndConcat(new Function<TargetNode<?>,Iterable<TargetNode<?>>>(){
    @Override public Iterable<TargetNode<?>> apply(    TargetNode<?> input){
      return AppleBuildRules.getRecursiveTargetNodeDependenciesOfTypes(projectGraph,AppleBuildRules.RecursiveDependenciesMode.BUILDING,input,Optional.<ImmutableSet<BuildRuleType>>absent());
    }
  }
).append(nodes).filter(new Predicate<TargetNode<?>>(){
    @Override public boolean apply(    TargetNode<?> input){
      return !excludes.contains(input) && AppleBuildRules.isXcodeTargetBuildRuleType(input.getType());
    }
  }
).toSet();
}
