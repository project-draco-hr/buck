{
  BuildRule workspaceTargetRule=partialGraph.getDependencyGraph().findBuildRuleByTarget(workspaceConfigTarget);
  if (!(workspaceTargetRule.getBuildable() instanceof XcodeWorkspaceConfig)) {
    throw new HumanReadableException("%s must be a xcode_workspace_config",workspaceTargetRule.getFullyQualifiedName());
  }
  XcodeWorkspaceConfig workspaceBuildable=(XcodeWorkspaceConfig)workspaceTargetRule.getBuildable();
  BuildRule actualTargetRule=workspaceBuildable.getSrcTarget();
  String workspaceName=workspaceBuildable.getSrcTarget().getBuildTarget().getShortName();
  WorkspaceGenerator workspaceGenerator=new WorkspaceGenerator(projectFilesystem,workspaceName,outputDirectory);
  SchemeGenerator schemeGenerator=new SchemeGenerator(projectFilesystem,partialGraph,workspaceName,outputDirectory.resolve(workspaceName + ".xcworkspace"));
  Iterable<BuildRule> allRules=Iterables.concat(RuleDependencyFinder.getAllRules(partialGraph,ImmutableList.of(workspaceBuildable.getSrcTarget().getBuildTarget())),ImmutableList.of(workspaceTargetRule));
  Multimap<String,BuildRule> buildRulesByTargetBasePath=BuildRules.buildRulesByTargetBasePath(allRules);
  for (  String basePath : buildRulesByTargetBasePath.keySet()) {
    Set<BuildTarget> nativeTargets=FluentIterable.from(buildRulesByTargetBasePath.get(basePath)).filter(new Predicate<BuildRule>(){
      @Override public boolean apply(      BuildRule rule){
        return AppleBuildRules.isXcodeTargetBuildRuleType(rule.getType());
      }
    }
).transform(new Function<BuildRule,BuildTarget>(){
      @Override public BuildTarget apply(      BuildRule rule){
        return rule.getBuildTarget();
      }
    }
).toSet();
    Set<BuildRule> xcodeNativeProjectRules=Sets.newHashSet(Collections2.filter(buildRulesByTargetBasePath.get(basePath),new Predicate<BuildRule>(){
      @Override public boolean apply(      BuildRule rule){
        return rule.getType() == XcodeNativeDescription.TYPE;
      }
    }
));
    boolean shouldGenerateProject=!nativeTargets.isEmpty();
    if (shouldGenerateProject) {
      ProjectGenerator generator=new ProjectGenerator(partialGraph,nativeTargets,projectFilesystem,executionContext,projectFilesystem.resolve(Paths.get(basePath)),Paths.get(basePath).getFileName().toString(),ProjectGenerator.SEPARATED_PROJECT_OPTIONS);
      generator.createXcodeProjects();
      String workspaceGroup=nativeTargets.contains(actualTargetRule) ? "" : DEPENDENCIES_GROUP;
      workspaceGenerator.addFilePath(workspaceGroup,generator.getProjectPath());
      schemeGenerator.addRuleToTargetMap(generator.getBuildRuleToGeneratedTargetMap());
      for (      PBXTarget target : generator.getBuildRuleToGeneratedTargetMap().values()) {
        schemeGenerator.addTargetToProjectPathMap(target,generator.getProjectPath());
      }
    }
    for (    BuildRule rule : xcodeNativeProjectRules) {
      XcodeNative buildable=(XcodeNative)rule.getBuildable();
      Path projectPath=buildable.getProjectContainerPath().resolve();
      Path pbxprojectPath=projectPath.resolve("project.pbxproj");
      String targetName=rule.getBuildTarget().getShortName();
      workspaceGenerator.addFilePath(DEPENDENCIES_GROUP,outputDirectory.resolveSibling(projectPath));
      ImmutableMap.Builder<String,String> targetNameToGIDMapBuilder=ImmutableMap.builder();
      try (InputStream projectInputStream=projectFilesystem.newFileInputStream(pbxprojectPath)){
        NSDictionary projectObjects=ProjectParser.extractObjectsFromXcodeProject(projectInputStream);
        ProjectParser.extractTargetNameToGIDMap(projectObjects,targetNameToGIDMapBuilder);
        Map<String,String> targetNameToGIDMap=targetNameToGIDMapBuilder.build();
        String targetGid=targetNameToGIDMap.get(targetName);
        PBXTarget fakeTarget=new PBXNativeTarget(targetName);
        fakeTarget.setGlobalID(targetGid);
        schemeGenerator.addRuleToTargetMap(ImmutableMap.of(rule,fakeTarget));
        schemeGenerator.addTargetToProjectPathMap(fakeTarget,pbxprojectPath);
      }
     }
  }
  Path workspacePath=workspaceGenerator.writeWorkspace();
  schemeGenerator.writeScheme();
  return workspacePath;
}
