{
  BuildRule workspaceTargetRule=partialGraph.getActionGraph().findBuildRuleByTarget(workspaceConfigTarget);
  if (!(workspaceTargetRule instanceof XcodeWorkspaceConfig)) {
    throw new HumanReadableException("%s must be a xcode_workspace_config",workspaceTargetRule.getFullyQualifiedName());
  }
  XcodeWorkspaceConfig workspaceBuildable=(XcodeWorkspaceConfig)workspaceTargetRule;
  BuildRule actualTargetRule=workspaceBuildable.getSrcTarget();
  String workspaceName=workspaceBuildable.getSrcTarget().getBuildTarget().getShortName();
  Path outputDirectory=Paths.get(workspaceBuildable.getBuildTarget().getBasePath());
  WorkspaceGenerator workspaceGenerator=new WorkspaceGenerator(projectFilesystem,workspaceName,outputDirectory);
  Iterable<BuildRule> allRules=Iterables.concat(RuleDependencyFinder.getAllRules(partialGraph,ImmutableList.of(workspaceBuildable.getSrcTarget().getBuildTarget())),ImmutableList.of(workspaceTargetRule));
  SchemeGenerator schemeGenerator=new SchemeGenerator(projectFilesystem,partialGraph,actualTargetRule,ImmutableSet.copyOf(allRules),workspaceName,outputDirectory.resolve(workspaceName + ".xcworkspace"));
  Multimap<String,BuildRule> buildRulesByTargetBasePath=BuildRules.buildRulesByTargetBasePath(allRules);
  for (  String basePath : buildRulesByTargetBasePath.keySet()) {
    Optional<BuildRule> xcodeProjectConfigRule=Optional.fromNullable(Iterables.getOnlyElement(partialGraph.getActionGraph().getBuildRulesOfBuildableTypeInBasePath(XcodeProjectConfig.class,basePath),null));
    Set<BuildRule> xcodeNativeProjectRules=Sets.newHashSet(Collections2.filter(buildRulesByTargetBasePath.get(basePath),new Predicate<BuildRule>(){
      @Override public boolean apply(      BuildRule rule){
        return rule.getType() == XcodeNativeDescription.TYPE;
      }
    }
));
    if (xcodeProjectConfigRule.isPresent()) {
      XcodeProjectConfig xcodeProjectConfig=(XcodeProjectConfig)Preconditions.checkNotNull(xcodeProjectConfigRule.get());
      ImmutableSet.Builder<BuildTarget> initialTargetsBuilder=ImmutableSet.builder();
      for (      BuildRule memberRule : xcodeProjectConfig.getRules()) {
        initialTargetsBuilder.add(memberRule.getBuildTarget());
      }
      Set<BuildTarget> initialTargets=initialTargetsBuilder.build();
      ProjectGenerator generator=new ProjectGenerator(partialGraph,initialTargets,projectFilesystem,executionContext,projectFilesystem.getPathForRelativePath(Paths.get(basePath)),xcodeProjectConfig.getProjectName(),ProjectGenerator.SEPARATED_PROJECT_OPTIONS);
      generator.createXcodeProjects();
      String workspaceGroup=initialTargets.contains(actualTargetRule.getBuildTarget()) ? "" : DEPENDENCIES_GROUP;
      workspaceGenerator.addFilePath(workspaceGroup,generator.getProjectPath());
      schemeGenerator.addRuleToTargetMap(generator.getBuildRuleToGeneratedTargetMap());
      for (      PBXTarget target : generator.getBuildRuleToGeneratedTargetMap().values()) {
        schemeGenerator.addTargetToProjectPathMap(target,generator.getProjectPath());
      }
    }
    for (    BuildRule rule : xcodeNativeProjectRules) {
      XcodeNative buildable=(XcodeNative)rule;
      Path projectPath=buildable.getProjectContainerPath().resolve();
      Path pbxprojectPath=projectPath.resolve("project.pbxproj");
      String targetName=rule.getBuildTarget().getShortName();
      workspaceGenerator.addFilePath(DEPENDENCIES_GROUP,projectFilesystem.getPathForRelativePath(projectPath));
      ImmutableMap.Builder<String,String> targetNameToGIDMapBuilder=ImmutableMap.builder();
      try (InputStream projectInputStream=projectFilesystem.newFileInputStream(pbxprojectPath)){
        NSDictionary projectObjects=ProjectParser.extractObjectsFromXcodeProject(projectInputStream);
        ProjectParser.extractTargetNameToGIDMap(projectObjects,targetNameToGIDMapBuilder);
        Map<String,String> targetNameToGIDMap=targetNameToGIDMapBuilder.build();
        String targetGid=targetNameToGIDMap.get(targetName);
        PBXTarget fakeTarget=new PBXNativeTarget(targetName);
        fakeTarget.setGlobalID(targetGid);
        schemeGenerator.addRuleToTargetMap(ImmutableMap.of(rule,fakeTarget));
        schemeGenerator.addTargetToProjectPathMap(fakeTarget,projectFilesystem.getPathForRelativePath(projectPath));
      }
     }
  }
  Path workspacePath=workspaceGenerator.writeWorkspace();
  schemeGenerator.writeScheme();
  return workspacePath;
}
