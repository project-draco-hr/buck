{
  LOG.debug("Getting ordered test rules, build rules %s",orderedBuildRules);
  final ImmutableSet.Builder<BuildRule> recursiveTestRulesBuilder=ImmutableSet.builder();
  if (!sourceRuleToTestRules.isEmpty()) {
    for (    BuildRule rule : orderedBuildRules) {
      LOG.verbose("Checking if rule %s has any tests covering it..",rule);
      for (      AppleTest testRule : sourceRuleToTestRules.get(rule)) {
        addTestRuleAndDependencies(testRule.getTestBundle(),recursiveTestRulesBuilder,orderedTestBundleRulesBuilder);
      }
    }
  }
  for (  BuildRule testRule : extraTestRules) {
    if (!(testRule instanceof AppleTest)) {
      throw new HumanReadableException("Test rule %s must be apple_test!",testRule);
    }
    AppleTest appleTestRule=(AppleTest)testRule;
    addTestRuleAndDependencies(appleTestRule.getTestBundle(),recursiveTestRulesBuilder,orderedTestBundleRulesBuilder);
  }
  final Set<BuildRule> includedTestRules=Sets.difference(recursiveTestRulesBuilder.build(),orderedBuildRules);
  orderedTestBuildRulesBuilder.addAll(TopologicalSort.sort(actionGraph,new Predicate<BuildRule>(){
    @Override public boolean apply(    @Nullable BuildRule input){
      if (!includedTestRules.contains(input) || !AppleBuildRules.isXcodeTargetBuildRuleType(input.getType())) {
        return false;
      }
      return true;
    }
  }
));
}
