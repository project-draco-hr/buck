{
  LOG.debug("Generating workspace for rule %s",workspaceBuildable);
  String workspaceName=workspaceBuildable.getWorkspaceName();
  Path outputDirectory=workspaceBuildable.getBuildTarget().getBasePath();
  WorkspaceGenerator workspaceGenerator=new WorkspaceGenerator(projectFilesystem,workspaceName,outputDirectory);
  ImmutableSet<BuildRule> orderedBuildRules;
  if (workspaceBuildable.getSrcTarget().isPresent()) {
    orderedBuildRules=AppleBuildRules.getSchemeBuildableRules(workspaceBuildable.getSrcTarget().get());
  }
 else {
    orderedBuildRules=ImmutableSet.of();
  }
  ImmutableSet.Builder<BuildRule> orderedTestBuildRulesBuilder=ImmutableSet.builder();
  ImmutableSet.Builder<BuildRule> orderedTestBundleRulesBuilder=ImmutableSet.builder();
  getOrderedTestRules(projectGraph,sourceRuleToTestRules,orderedBuildRules,extraTestBundleRules,orderedTestBuildRulesBuilder,orderedTestBundleRulesBuilder);
  ImmutableMap.Builder<BuildRule,PBXTarget> buildRuleToTargetMapBuilder=ImmutableMap.builder();
  ImmutableMap.Builder<PBXTarget,Path> targetToProjectPathMapBuilder=ImmutableMap.builder();
  for (  XcodeProjectConfig xcodeProjectConfig : Iterables.filter(projectGraph.getNodes(),XcodeProjectConfig.class)) {
    ImmutableSet.Builder<BuildTarget> initialTargetsBuilder=ImmutableSet.builder();
    for (    BuildRule memberRule : xcodeProjectConfig.getRules()) {
      initialTargetsBuilder.add(memberRule.getBuildTarget());
    }
    Set<BuildTarget> initialTargets=initialTargetsBuilder.build();
    ProjectGenerator generator=projectGenerators.get(xcodeProjectConfig);
    if (generator == null) {
      LOG.debug("Generating project for rule %s",xcodeProjectConfig);
      generator=new ProjectGenerator(projectGraph.getNodes(),initialTargets,projectFilesystem,executionContext,xcodeProjectConfig.getBuildTarget().getBasePath(),xcodeProjectConfig.getProjectName(),projectGeneratorOptions);
      generator.createXcodeProjects();
      projectGenerators.put(xcodeProjectConfig,generator);
    }
 else {
      LOG.debug("Already generated project for rule %s, skipping",xcodeProjectConfig);
    }
    workspaceGenerator.addFilePath(generator.getProjectPath());
    buildRuleToTargetMapBuilder.putAll(generator.getBuildRuleToGeneratedTargetMap());
    for (    PBXTarget target : generator.getBuildRuleToGeneratedTargetMap().values()) {
      targetToProjectPathMapBuilder.put(target,generator.getProjectPath());
    }
  }
  for (  XcodeNative buildable : Iterables.filter(projectGraph.getNodes(),XcodeNative.class)) {
    Path projectPath=buildable.getProjectContainerPath().resolve();
    Path pbxprojectPath=projectPath.resolve("project.pbxproj");
    String targetName=buildable.getTargetName();
    workspaceGenerator.addFilePath(projectPath);
    ImmutableMap.Builder<String,String> targetNameToGIDMapBuilder=ImmutableMap.builder();
    ImmutableMap.Builder<String,String> targetNameToFileNameBuilder=ImmutableMap.builder();
    try (InputStream projectInputStream=projectFilesystem.newFileInputStream(pbxprojectPath)){
      NSDictionary projectObjects=ProjectParser.extractObjectsFromXcodeProject(projectInputStream);
      ProjectParser.extractTargetNameToGIDAndFileNameMaps(projectObjects,targetNameToGIDMapBuilder,targetNameToFileNameBuilder);
      Map<String,String> targetNameToGIDMap=targetNameToGIDMapBuilder.build();
      String targetGid=targetNameToGIDMap.get(targetName);
      Map<String,String> targetNameToFileNameMap=targetNameToFileNameBuilder.build();
      String targetFileName=targetNameToFileNameMap.get(targetName);
      if (targetGid == null || targetFileName == null) {
        LOG.error("Looked up target %s, could not find GID (%s) or filename (%s)",targetName,targetGid,targetFileName);
        throw new HumanReadableException("xcode_native target %s not found in Xcode project %s",targetName,pbxprojectPath);
      }
      PBXTarget fakeTarget=new PBXNativeTarget(targetName,PBXTarget.ProductType.STATIC_LIBRARY);
      fakeTarget.setGlobalID(targetGid);
      PBXFileReference fakeProductReference=new PBXFileReference(targetFileName,targetFileName,PBXFileReference.SourceTree.BUILT_PRODUCTS_DIR);
      fakeTarget.setProductReference(fakeProductReference);
      buildRuleToTargetMapBuilder.put(buildable,fakeTarget);
      targetToProjectPathMapBuilder.put(fakeTarget,projectPath);
    }
   }
  Path workspacePath=workspaceGenerator.writeWorkspace();
  ImmutableSet<BuildRule> orderedTestBundleRules=orderedTestBundleRulesBuilder.build();
  SchemeGenerator schemeGenerator=new SchemeGenerator(projectFilesystem,workspaceBuildable.getSrcTarget(),orderedBuildRules,orderedTestBuildRulesBuilder.build(),orderedTestBundleRules,workspaceName,outputDirectory.resolve(workspaceName + ".xcworkspace"),workspaceBuildable.getActionConfigNames(),buildRuleToTargetMapBuilder.build(),targetToProjectPathMapBuilder.build());
  schemeGenerator.writeScheme();
  return workspacePath;
}
