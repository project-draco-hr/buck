{
  LOG.debug("Generating workspace for rule %s",workspaceBuildable);
  String workspaceName;
  Path outputDirectory;
  if (combinedProject) {
    workspaceName="GeneratedProject";
    outputDirectory=Paths.get("_gen");
  }
 else {
    workspaceName=workspaceBuildable.getWorkspaceName();
    outputDirectory=workspaceBuildable.getBuildTarget().getBasePath();
  }
  WorkspaceGenerator workspaceGenerator=new WorkspaceGenerator(projectFilesystem,workspaceName,outputDirectory);
  ImmutableSet<BuildRule> orderedBuildRules;
  if (workspaceBuildable.getSrcTarget().isPresent()) {
    orderedBuildRules=AppleBuildRules.getSchemeBuildableRules(workspaceBuildable.getSrcTarget().get());
  }
 else {
    orderedBuildRules=ImmutableSet.of();
  }
  ImmutableSet<BuildRule> orderedTestBuildRules;
  ImmutableSet<BuildRule> orderedTestBundleRules;
{
    ImmutableSet.Builder<BuildRule> orderedTestBuildRulesBuilder=ImmutableSet.builder();
    ImmutableSet.Builder<BuildRule> orderedTestBundleRulesBuilder=ImmutableSet.builder();
    getOrderedTestRules(projectGraph.getActionGraph(executionContext.getBuckEventBus()),sourceRuleToTestRules,orderedBuildRules,extraTestBundleRules,orderedTestBuildRulesBuilder,orderedTestBundleRulesBuilder);
    orderedTestBuildRules=orderedTestBuildRulesBuilder.build();
    orderedTestBundleRules=orderedTestBundleRulesBuilder.build();
  }
  Sets.SetView<BuildRule> rulesInRequiredProjects=Sets.union(orderedBuildRules,orderedTestBuildRules);
  ImmutableMap.Builder<BuildTarget,PBXTarget> buildTargetToPbxTargetMapBuilder=ImmutableMap.builder();
  ImmutableMap.Builder<PBXTarget,Path> targetToProjectPathMapBuilder=ImmutableMap.builder();
  if (combinedProject) {
    ImmutableSet.Builder<BuildTarget> initialTargetsBuilder=ImmutableSet.builder();
    for (    XcodeProjectConfig xcodeProjectConfig : Iterables.filter(projectGraph.getActionGraph(executionContext.getBuckEventBus()).getNodes(),XcodeProjectConfig.class)) {
      if (Sets.intersection(rulesInRequiredProjects,xcodeProjectConfig.getRules()).isEmpty()) {
        continue;
      }
      initialTargetsBuilder.addAll(Iterables.transform(xcodeProjectConfig.getRules(),HasBuildTarget.TO_TARGET));
    }
    LOG.debug("Generating a combined project");
    ProjectGenerator generator=new ProjectGenerator(projectGraph,initialTargetsBuilder.build(),projectFilesystem,executionContext,outputDirectory,"GeneratedProject",projectGeneratorOptions);
    combinedProjectGenerator=Optional.of(generator);
    generator.createXcodeProjects();
    workspaceGenerator.addFilePath(generator.getProjectPath());
    buildTargetToPbxTargetMapBuilder.putAll(generator.getBuildTargetToGeneratedTargetMap());
    for (    PBXTarget target : generator.getBuildTargetToGeneratedTargetMap().values()) {
      targetToProjectPathMapBuilder.put(target,generator.getProjectPath());
    }
  }
 else {
    for (    XcodeProjectConfig xcodeProjectConfig : Iterables.filter(projectGraph.getActionGraph(executionContext.getBuckEventBus()).getNodes(),XcodeProjectConfig.class)) {
      if (Sets.intersection(rulesInRequiredProjects,xcodeProjectConfig.getRules()).isEmpty()) {
        continue;
      }
      ImmutableSet.Builder<BuildTarget> initialTargetsBuilder=ImmutableSet.builder();
      for (      BuildRule memberRule : xcodeProjectConfig.getRules()) {
        initialTargetsBuilder.add(memberRule.getBuildTarget());
      }
      Set<BuildTarget> initialTargets=initialTargetsBuilder.build();
      ProjectGenerator generator=projectGenerators.get(xcodeProjectConfig);
      if (generator == null) {
        LOG.debug("Generating project for rule %s",xcodeProjectConfig);
        generator=new ProjectGenerator(projectGraph,initialTargets,projectFilesystem,executionContext,xcodeProjectConfig.getBuildTarget().getBasePath(),xcodeProjectConfig.getProjectName(),projectGeneratorOptions);
        generator.createXcodeProjects();
        projectGenerators.put(xcodeProjectConfig,generator);
      }
 else {
        LOG.debug("Already generated project for rule %s, skipping",xcodeProjectConfig);
      }
      workspaceGenerator.addFilePath(generator.getProjectPath());
      buildTargetToPbxTargetMapBuilder.putAll(generator.getBuildTargetToGeneratedTargetMap());
      for (      PBXTarget target : generator.getBuildTargetToGeneratedTargetMap().values()) {
        targetToProjectPathMapBuilder.put(target,generator.getProjectPath());
      }
    }
  }
  Path workspacePath=workspaceGenerator.writeWorkspace();
  SchemeGenerator schemeGenerator=new SchemeGenerator(projectFilesystem,workspaceBuildable.getSrcTarget().transform(HasBuildTarget.TO_TARGET),Iterables.transform(orderedBuildRules,HasBuildTarget.TO_TARGET),Iterables.transform(orderedTestBuildRules,HasBuildTarget.TO_TARGET),Iterables.transform(orderedTestBundleRules,HasBuildTarget.TO_TARGET),workspaceName,outputDirectory.resolve(workspaceName + ".xcworkspace"),workspaceBuildable.getActionConfigNames(),buildTargetToPbxTargetMapBuilder.build(),targetToProjectPathMapBuilder.build());
  schemeGenerator.writeScheme();
  return workspacePath;
}
