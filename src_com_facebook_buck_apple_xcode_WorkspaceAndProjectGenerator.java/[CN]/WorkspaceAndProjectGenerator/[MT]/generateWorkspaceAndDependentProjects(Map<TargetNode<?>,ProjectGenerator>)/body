{
  LOG.debug("Generating workspace for target %s",workspaceTargetNode);
  String workspaceName;
  Path outputDirectory;
  if (combinedProject) {
    workspaceName="GeneratedProject";
    outputDirectory=Paths.get("_gen");
  }
 else {
    workspaceName=XcodeWorkspaceConfigDescription.getWorkspaceNameFromArg(workspaceTargetNode.getConstructorArg());
    outputDirectory=workspaceTargetNode.getBuildTarget().getBasePath();
  }
  WorkspaceGenerator workspaceGenerator=new WorkspaceGenerator(projectFilesystem,workspaceName,outputDirectory);
  ImmutableSet<TargetNode<?>> orderedTargetNodes;
  if (workspaceTargetNode.getConstructorArg().srcTarget.isPresent()) {
    orderedTargetNodes=AppleBuildRules.getSchemeBuildableTargetNodes(projectGraph,projectGraph.get(workspaceTargetNode.getConstructorArg().srcTarget.get().getBuildTarget()));
  }
 else {
    orderedTargetNodes=ImmutableSet.of();
  }
  ImmutableSet<TargetNode<AppleTestDescription.Arg>> selectedTests=getOrderedTestNodes(projectGraph,sourceTargetToTestNodes,orderedTargetNodes,extraTestBundleTargetNodes);
  ImmutableList<TargetNode<?>> buildForTestNodes=TopologicalSort.sort(projectGraph,Predicates.in(getTransitiveDepsAndInputs(selectedTests,orderedTargetNodes)));
  ImmutableSet<BuildTarget> targetsInRequiredProjects=FluentIterable.from(orderedTargetNodes).append(buildForTestNodes).transform(HasBuildTarget.TO_TARGET).toSet();
  ImmutableMap.Builder<BuildTarget,PBXTarget> buildTargetToPbxTargetMapBuilder=ImmutableMap.builder();
  ImmutableMap.Builder<PBXTarget,Path> targetToProjectPathMapBuilder=ImmutableMap.builder();
  if (combinedProject) {
    ImmutableSet.Builder<BuildTarget> initialTargetsBuilder=ImmutableSet.builder();
    for (    TargetNode<?> targetNode : projectGraph.getNodes()) {
      if (targetNode.getType() != XcodeProjectConfigDescription.TYPE) {
        continue;
      }
      XcodeProjectConfigDescription.Arg projectArg=(XcodeProjectConfigDescription.Arg)targetNode.getConstructorArg();
      if (Sets.intersection(targetsInRequiredProjects,projectArg.rules).isEmpty()) {
        continue;
      }
      initialTargetsBuilder.addAll(projectArg.rules);
    }
    LOG.debug("Generating a combined project");
    ProjectGenerator generator=new ProjectGenerator(projectGraph,initialTargetsBuilder.build(),projectFilesystem,outputDirectory,"GeneratedProject",projectGeneratorOptions);
    combinedProjectGenerator=Optional.of(generator);
    generator.createXcodeProjects();
    workspaceGenerator.addFilePath(generator.getProjectPath());
    buildTargetToPbxTargetMapBuilder.putAll(generator.getBuildTargetToGeneratedTargetMap());
    for (    PBXTarget target : generator.getBuildTargetToGeneratedTargetMap().values()) {
      targetToProjectPathMapBuilder.put(target,generator.getProjectPath());
    }
  }
 else {
    for (    TargetNode<?> targetNode : projectGraph.getNodes()) {
      if (targetNode.getType() != XcodeProjectConfigDescription.TYPE) {
        continue;
      }
      XcodeProjectConfigDescription.Arg projectArg=(XcodeProjectConfigDescription.Arg)targetNode.getConstructorArg();
      if (Sets.intersection(targetsInRequiredProjects,projectArg.rules).isEmpty()) {
        continue;
      }
      ProjectGenerator generator=projectGenerators.get(targetNode);
      if (generator == null) {
        LOG.debug("Generating project for target %s",targetNode);
        generator=new ProjectGenerator(projectGraph,projectArg.rules,projectFilesystem,targetNode.getBuildTarget().getBasePath(),projectArg.projectName,projectGeneratorOptions);
        generator.createXcodeProjects();
        projectGenerators.put(targetNode,generator);
      }
 else {
        LOG.debug("Already generated project for target %s, skipping",targetNode);
      }
      workspaceGenerator.addFilePath(generator.getProjectPath());
      buildTargetToPbxTargetMapBuilder.putAll(generator.getBuildTargetToGeneratedTargetMap());
      for (      PBXTarget target : generator.getBuildTargetToGeneratedTargetMap().values()) {
        targetToProjectPathMapBuilder.put(target,generator.getProjectPath());
      }
    }
  }
  Path workspacePath=workspaceGenerator.writeWorkspace();
  final Map<BuildTarget,PBXTarget> buildTargetToTarget=buildTargetToPbxTargetMapBuilder.build();
  Function<TargetNode<?>,PBXTarget> targetNodeToPBXTargetTransformer=new Function<TargetNode<?>,PBXTarget>(){
    @Override public PBXTarget apply(    TargetNode<?> input){
      return Preconditions.checkNotNull(buildTargetToTarget.get(input.getBuildTarget()));
    }
  }
;
  SchemeGenerator schemeGenerator=new SchemeGenerator(projectFilesystem,workspaceTargetNode.getConstructorArg().srcTarget.transform(Functions.forMap(buildTargetToTarget)),Iterables.transform(orderedTargetNodes,targetNodeToPBXTargetTransformer),Iterables.transform(buildForTestNodes,targetNodeToPBXTargetTransformer),Iterables.transform(selectedTests,targetNodeToPBXTargetTransformer),workspaceName,outputDirectory.resolve(workspaceName + ".xcworkspace"),XcodeWorkspaceConfigDescription.getActionConfigNamesFromArg(workspaceTargetNode.getConstructorArg()),targetToProjectPathMapBuilder.build());
  schemeGenerator.writeScheme();
  return workspacePath;
}
