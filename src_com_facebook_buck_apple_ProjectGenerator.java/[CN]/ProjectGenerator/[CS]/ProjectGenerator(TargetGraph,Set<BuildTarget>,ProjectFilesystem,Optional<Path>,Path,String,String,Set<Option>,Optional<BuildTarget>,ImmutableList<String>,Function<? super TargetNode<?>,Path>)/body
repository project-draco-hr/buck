{
  this.sourcePathResolver=new Function<SourcePath,Path>(){
    @Override public Path apply(    SourcePath input){
      return resolveSourcePath(input);
    }
  }
;
  this.targetGraph=targetGraph;
  this.initialTargets=ImmutableSet.copyOf(initialTargets);
  this.projectFilesystem=projectFilesystem;
  this.reactNativeServer=reactNativeServer;
  this.outputDirectory=outputDirectory;
  this.projectName=projectName;
  this.buildFileName=buildFileName;
  this.options=ImmutableSet.copyOf(options);
  this.targetToBuildWithBuck=targetToBuildWithBuck;
  this.buildWithBuckFlags=buildWithBuckFlags;
  this.outputPathOfNode=outputPathOfNode;
  this.projectPath=outputDirectory.resolve(projectName + ".xcodeproj");
  this.pathRelativizer=new PathRelativizer(outputDirectory,sourcePathResolver);
  LOG.debug("Output directory %s, profile fs root path %s, repo root relative to output dir %s",this.outputDirectory,projectFilesystem.getRootPath(),this.pathRelativizer.outputDirToRootRelative(Paths.get(".")));
  this.placedAssetCatalogBuildPhaseScript=BuckConstant.SCRATCH_PATH.resolve("xcode-scripts/compile_asset_catalogs_build_phase.sh");
  this.project=new PBXProject(projectName);
  this.headerSymlinkTrees=new ArrayList<>();
  this.targetNodeToGeneratedProjectTargetBuilder=ImmutableMultimap.builder();
  this.targetNodeToProjectTarget=CacheBuilder.newBuilder().build(new CacheLoader<TargetNode<?>,Optional<PBXTarget>>(){
    @Override public Optional<PBXTarget> load(    TargetNode<?> key) throws Exception {
      return generateProjectTarget(key);
    }
  }
);
  targetConfigNamesBuilder=ImmutableSet.builder();
  gidsToTargetNames=new HashMap<>();
}
