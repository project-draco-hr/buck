{
  CxxPlatform cxxPlatform;
  ImmutableSet<Flavor> flavors=ImmutableSet.copyOf(targetNode.getBuildTarget().getFlavors());
  try {
    cxxPlatform=cxxPlatforms.getValue(flavors).or(defaultCxxPlatform);
  }
 catch (  FlavorDomainException e) {
    throw new HumanReadableException("%s: %s",targetNode.getBuildTarget(),e.getMessage());
  }
  final BuildTarget buildTarget=targetNode.getBuildTarget();
  String productName=getXcodeTargetName(buildTarget) + BUILD_WITH_BUCK_POSTFIX;
  String binaryName=AppleBundle.getBinaryName(targetToBuildWithBuck.get());
  Path bundleDestination=getScratchPathForAppBundle(targetToBuildWithBuck.get());
  Path dsymDestination=getScratchPathForDsymBundle(targetToBuildWithBuck.get());
  PBXShellScriptBuildPhase shellScriptBuildPhase=new PBXShellScriptBuildPhase();
  ST template=new ST(Resources.toString(Resources.getResource(ProjectGenerator.class,BUILD_WITH_BUCK_TEMPLATE),Charsets.UTF_8));
  Path pathToBuck=executableFinder.getExecutable(Paths.get("buck"),environment);
  String compDir=cxxPlatform.getDebugPathSanitizer().getCompilationDirectory();
  String sourceDir=Strings.padStart(":" + projectFilesystem.getRootPath().toString(),compDir.length(),'f');
  String buildFlags=Joiner.on(' ').join(Iterables.transform(getBuildWithBuckFlagsForXcodeIntegration(),Escaper.BASH_ESCAPER));
  String escapedBuildTarget=Escaper.escapeAsBashString(buildTarget.getFullyQualifiedName());
  Path resolvedBundleSource=projectFilesystem.resolve(AppleBundle.getBundleRoot(targetToBuildWithBuck.get(),"app"));
  Path resolvedDsymSource=projectFilesystem.resolve(AppleBundle.getBundleRoot(targetToBuildWithBuck.get(),"dSYM"));
  Path resolvedBundleDestination=projectFilesystem.resolve(bundleDestination);
  Path resolvedDsymDestination=projectFilesystem.resolve(dsymDestination);
  template.add("repo_root",projectFilesystem.getRootPath());
  template.add("path_to_buck",pathToBuck);
  template.add("comp_dir",compDir);
  template.add("source_dir",sourceDir);
  template.add("build_flags",buildFlags);
  template.add("escaped_build_target",escapedBuildTarget);
  template.add("resolved_bundle_source",resolvedBundleSource);
  template.add("resolved_bundle_destination",resolvedBundleDestination);
  template.add("resolved_bundle_destination_parent",resolvedBundleDestination.getParent());
  template.add("resolved_dsym_source",resolvedDsymSource);
  template.add("resolved_dsym_destination",resolvedDsymDestination);
  template.add("binary_name",binaryName);
  shellScriptBuildPhase.setShellScript(template.render());
  TargetNode<CxxLibraryDescription.Arg> node=getAppleNativeNode(targetGraph,targetNode).get();
  ImmutableMap<String,ImmutableMap<String,String>> configs=getXcodeBuildConfigurationsForTargetNode(node,ImmutableMap.<String,String>of()).get();
  XCConfigurationList configurationList=new XCConfigurationList();
  PBXGroup group=project.getMainGroup().getOrCreateDescendantGroupByPath(FluentIterable.from(buildTarget.getBasePath()).transform(Functions.toStringFunction()).toList()).getOrCreateChildGroupByName(getXcodeTargetName(buildTarget));
  for (  String configurationName : configs.keySet()) {
    XCBuildConfiguration configuration=configurationList.getBuildConfigurationsByName().getUnchecked(configurationName);
    configuration.setBaseConfigurationReference(getConfigurationFileReference(group,getConfigurationNameToXcconfigPath(buildTarget).apply(configurationName)));
    NSDictionary inlineSettings=new NSDictionary();
    inlineSettings.put("HEADER_SEARCH_PATHS","");
    inlineSettings.put("LIBRARY_SEARCH_PATHS","");
    inlineSettings.put("FRAMEWORK_SEARCH_PATHS","");
    configuration.setBuildSettings(inlineSettings);
  }
  PBXAggregateTarget buildWithBuckTarget=new PBXAggregateTarget(productName);
  buildWithBuckTarget.setProductName(productName);
  buildWithBuckTarget.getBuildPhases().add(shellScriptBuildPhase);
  buildWithBuckTarget.setBuildConfigurationList(configurationList);
  project.getTargets().add(buildWithBuckTarget);
  targetNodeToGeneratedProjectTargetBuilder.put(targetNode,buildWithBuckTarget);
}
