{
  final BuildTarget buildTarget=targetNode.getBuildTarget();
  String productName=getProductNameForBuildTarget(buildTarget);
  Path outputPath=getHalideOutputPath(buildTarget);
  BuildTarget compilerTarget=HalideLibraryDescription.createHalideCompilerBuildTarget(buildTarget);
  Path compilerPath=BuildTargets.getGenPath(compilerTarget,"%s");
  PBXShellScriptBuildPhase scriptPhase=new PBXShellScriptBuildPhase();
  ST template=new ST(Resources.toString(Resources.getResource(ProjectGenerator.class,HALIDE_COMPILER_TEMPLATE),Charsets.UTF_8));
  template.add("repo_root",projectFilesystem.getRootPath());
  template.add("path_to_compiler",compilerPath);
  template.add("output_dir",outputPath);
  template.add("output_prefix",buildTarget.getShortName());
  scriptPhase.setShellScript(template.render());
  NewNativeTargetProjectMutator mutator=new NewNativeTargetProjectMutator(pathRelativizer,sourcePathResolver);
  mutator.setTargetName(getXcodeTargetName(buildTarget)).setProduct(ProductType.STATIC_LIBRARY,productName,outputPath).setPreBuildRunScriptPhases(ImmutableList.of(scriptPhase));
  NewNativeTargetProjectMutator.Result targetBuilderResult;
  try {
    targetBuilderResult=mutator.buildTargetAndAddToProject(project);
  }
 catch (  NoSuchBuildTargetException e) {
    throw new HumanReadableException(e);
  }
  ImmutableMap<String,String> appendedConfig=ImmutableMap.<String,String>of();
  ImmutableMap<String,String> extraSettings=ImmutableMap.<String,String>of();
  ImmutableMap.Builder<String,String> defaultSettingsBuilder=ImmutableMap.builder();
  defaultSettingsBuilder.put("REPO_ROOT",projectFilesystem.getRootPath().toAbsolutePath().normalize().toString());
  defaultSettingsBuilder.put(PRODUCT_NAME,productName);
  Optional<ImmutableSortedMap<String,ImmutableMap<String,String>>> configs=getXcodeBuildConfigurationsForTargetNode(targetNode,appendedConfig);
  PBXNativeTarget target=targetBuilderResult.target;
  setTargetBuildConfigurations(getConfigurationNameToXcconfigPath(buildTarget),target,project.getMainGroup(),configs.get(),extraSettings,defaultSettingsBuilder.build(),appendedConfig);
  return Optional.<PBXTarget>of(target);
}
