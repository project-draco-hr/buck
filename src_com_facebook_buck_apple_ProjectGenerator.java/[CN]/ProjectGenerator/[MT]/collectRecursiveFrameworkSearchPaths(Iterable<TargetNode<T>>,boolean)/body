{
  return FluentIterable.from(targetNodes).transformAndConcat(newRecursiveRuleDependencyTransformer(AppleBuildRules.RecursiveDependenciesMode.LINKING,ImmutableSet.of(AppleBundleDescription.TYPE))).append(includeInputs ? targetNodes : ImmutableList.<TargetNode<?>>of()).filter(new Predicate<TargetNode<?>>(){
    @Override public boolean apply(    TargetNode<?> input){
      return getLibraryNode(targetGraph,input).isPresent();
    }
  }
).transform(new Function<TargetNode<?>,String>(){
    @Override public String apply(    TargetNode<?> input){
      return getTargetOutputPath(input);
    }
  }
).append(collectRecursiveSearchPathsForFrameworkPaths(targetNodes,FrameworkPath.FrameworkType.FRAMEWORK)).toSet();
}
