{
  Optional<String> targetGid=targetNode.getConstructorArg().gid;
  LOG.debug("Generating binary target for node %s (GID %s)",targetNode,targetGid);
  if (targetGid.isPresent()) {
    String thisTargetName=targetNode.getBuildTarget().getFullyQualifiedName();
    String conflictingTargetName=gidsToTargetNames.get(targetGid.get());
    if (conflictingTargetName != null) {
      throw new HumanReadableException("Targets %s have the same hardcoded GID (%s)",ImmutableSortedSet.of(thisTargetName,conflictingTargetName),targetGid.get());
    }
    gidsToTargetNames.put(targetGid.get(),thisTargetName);
  }
  TargetNode<?> buildTargetNode=bundle.isPresent() ? bundle.get() : targetNode;
  final BuildTarget buildTarget=buildTargetNode.getBuildTarget();
  String productName=getProductName(buildTarget);
  AppleNativeTargetDescriptionArg arg=targetNode.getConstructorArg();
  NewNativeTargetProjectMutator mutator=new NewNativeTargetProjectMutator(pathRelativizer,sourcePathResolver);
  ImmutableSet<SourcePath> exportedHeaders=ImmutableSet.copyOf(getHeaderSourcePaths(arg.exportedHeaders));
  ImmutableSet<SourcePath> headers=ImmutableSet.copyOf(getHeaderSourcePaths(arg.headers));
  mutator.setTargetName(getXcodeTargetName(buildTarget)).setProduct(productType,productName,Paths.get(String.format(productOutputFormat,productName))).setGid(targetGid).setShouldGenerateCopyHeadersPhase(!targetNode.getConstructorArg().getUseBuckHeaderMaps()).setSourcesWithFlags(ImmutableSet.copyOf(arg.srcs.get())).setExtraXcodeSources(ImmutableSet.copyOf(arg.extraXcodeSources.get())).setPublicHeaders(exportedHeaders).setPrivateHeaders(headers).setResources(resources);
  if (options.contains(Option.CREATE_DIRECTORY_STRUCTURE)) {
    ImmutableList.Builder<String> targetGroupPathBuilder=ImmutableList.builder();
    for (    Path pathPart : buildTarget.getBasePath()) {
      targetGroupPathBuilder.add(pathPart.toString());
    }
    mutator.setTargetGroupPath(targetGroupPathBuilder.build());
  }
  if (!assetCatalogs.isEmpty()) {
    mutator.setAssetCatalogs(getAndMarkAssetCatalogBuildScript(),assetCatalogs);
  }
  if (includeFrameworks) {
    ImmutableSet.Builder<FrameworkPath> frameworksBuilder=ImmutableSet.builder();
    frameworksBuilder.addAll(targetNode.getConstructorArg().frameworks.get());
    frameworksBuilder.addAll(collectRecursiveFrameworkDependencies(ImmutableList.of(targetNode)));
    mutator.setFrameworks(frameworksBuilder.build());
    mutator.setArchives(collectRecursiveLibraryDependencies(ImmutableList.of(targetNode)));
  }
  ImmutableList.Builder<TargetNode<?>> preScriptPhases=ImmutableList.builder();
  ImmutableList.Builder<TargetNode<?>> postScriptPhases=ImmutableList.builder();
  if (bundle.isPresent() && targetNode != bundle.get()) {
    collectBuildScriptDependencies(targetGraph.getAll(bundle.get().getDeps()),preScriptPhases,postScriptPhases);
  }
  collectBuildScriptDependencies(targetGraph.getAll(targetNode.getDeps()),preScriptPhases,postScriptPhases);
  mutator.setPreBuildRunScriptPhases(preScriptPhases.build());
  mutator.setPostBuildRunScriptPhases(postScriptPhases.build());
  NewNativeTargetProjectMutator.Result targetBuilderResult;
  try {
    targetBuilderResult=mutator.buildTargetAndAddToProject(project);
  }
 catch (  NoSuchBuildTargetException e) {
    throw new HumanReadableException(e);
  }
  PBXNativeTarget target=targetBuilderResult.target;
  PBXGroup targetGroup=targetBuilderResult.targetGroup;
  SourceTreePath buckFilePath=new SourceTreePath(PBXReference.SourceTree.SOURCE_ROOT,pathRelativizer.outputPathToBuildTargetPath(buildTarget).resolve(buildFileName));
  PBXFileReference buckReference=targetGroup.getOrCreateFileReferenceBySourceTreePath(buckFilePath);
  buckReference.setExplicitFileType(Optional.of("text.script.python"));
  ImmutableMap.Builder<String,String> extraSettingsBuilder=ImmutableMap.builder();
  extraSettingsBuilder.put("TARGET_NAME",getProductName(buildTarget)).put("SRCROOT",pathRelativizer.outputPathToBuildTargetPath(buildTarget).toString());
  if (infoPlistOptional.isPresent()) {
    Path infoPlistPath=pathRelativizer.outputDirToRootRelative(infoPlistOptional.get());
    extraSettingsBuilder.put("INFOPLIST_FILE",infoPlistPath.toString());
  }
  Optional<SourcePath> prefixHeaderOptional=targetNode.getConstructorArg().prefixHeader;
  if (prefixHeaderOptional.isPresent()) {
    Path prefixHeaderRelative=sourcePathResolver.apply(prefixHeaderOptional.get());
    Path prefixHeaderPath=pathRelativizer.outputDirToRootRelative(prefixHeaderRelative);
    extraSettingsBuilder.put("GCC_PREFIX_HEADER",prefixHeaderPath.toString());
    extraSettingsBuilder.put("GCC_PRECOMPILE_PREFIX_HEADER","YES");
  }
  if (targetNode.getConstructorArg().getUseBuckHeaderMaps()) {
    extraSettingsBuilder.put("USE_HEADERMAP","NO");
  }
  ImmutableMap.Builder<String,String> defaultSettingsBuilder=ImmutableMap.builder();
  defaultSettingsBuilder.put("REPO_ROOT",projectFilesystem.getRootPath().toAbsolutePath().normalize().toString());
  defaultSettingsBuilder.put("PRODUCT_NAME",getProductName(buildTarget));
  if (bundle.isPresent()) {
    defaultSettingsBuilder.put("WRAPPER_EXTENSION",getExtensionString(bundle.get().getConstructorArg().getExtension()));
  }
  defaultSettingsBuilder.put("PUBLIC_HEADERS_FOLDER_PATH",getHeaderOutputPath(targetNode.getConstructorArg().headerPathPrefix));
  defaultSettingsBuilder.put("BUILT_PRODUCTS_DIR",Joiner.on('/').join("$SYMROOT","$CONFIGURATION$EFFECTIVE_PLATFORM_NAME"));
  defaultSettingsBuilder.put("CONFIGURATION_BUILD_DIR",getTargetOutputPath(buildTargetNode));
  if (!bundle.isPresent() && targetNode.getType().equals(AppleLibraryDescription.TYPE)) {
    defaultSettingsBuilder.put("EXECUTABLE_PREFIX","lib");
  }
  ImmutableMap.Builder<String,String> appendConfigsBuilder=ImmutableMap.builder();
  appendConfigsBuilder.put("HEADER_SEARCH_PATHS",Joiner.on(' ').join(Iterators.concat(collectRecursiveHeaderSearchPaths(targetNode).iterator(),collectRecursiveHeaderMapFiles(targetNode).iterator()))).put("LIBRARY_SEARCH_PATHS",Joiner.on(' ').join(collectRecursiveLibrarySearchPaths(ImmutableSet.of(targetNode)))).put("FRAMEWORK_SEARCH_PATHS",Joiner.on(' ').join(collectRecursiveFrameworkSearchPaths(ImmutableList.of(targetNode)))).put("OTHER_CFLAGS",Joiner.on(' ').join(Iterables.concat(targetNode.getConstructorArg().compilerFlags.get(),targetNode.getConstructorArg().preprocessorFlags.get(),collectRecursiveExportedPreprocessorFlags(ImmutableList.of(targetNode))))).put("OTHER_LDFLAGS",Joiner.on(' ').join(collectRecursiveLinkerFlags(ImmutableList.of(targetNode))));
  setTargetBuildConfigurations(new Function<String,Path>(){
    @Override public Path apply(    String input){
      return BuildTargets.getGenPath(buildTarget,"%s-" + input + ".xcconfig");
    }
  }
,target,targetGroup,targetNode.getConstructorArg().configs.get(),extraSettingsBuilder.build(),defaultSettingsBuilder.build(),appendConfigsBuilder.build());
  if (arg.getUseBuckHeaderMaps()) {
    requiredBuildTargetsBuilder.add(CxxDescriptionEnhancer.createHeaderMapFileTarget(BuildTarget.of(targetNode.getBuildTarget().getUnflavoredBuildTarget()),DefaultCxxPlatforms.FLAVOR,CxxDescriptionEnhancer.HeaderVisibility.PRIVATE));
    requireAllBuildRuleDependencies(headers);
    if (targetNode.getType() == AppleLibraryDescription.TYPE) {
      requiredBuildTargetsBuilder.add(CxxDescriptionEnhancer.createHeaderMapFileTarget(BuildTarget.of(targetNode.getBuildTarget().getUnflavoredBuildTarget()),DefaultCxxPlatforms.FLAVOR,CxxDescriptionEnhancer.HeaderVisibility.PUBLIC));
      requireAllBuildRuleDependencies(exportedHeaders);
    }
  }
  addCoreDataModelBuildPhase(targetGroup,FluentIterable.from(targetNode.getDeps()).transform(new Function<BuildTarget,TargetNode<?>>(){
    @Override public TargetNode<?> apply(    BuildTarget input){
      return Preconditions.checkNotNull(targetGraph.get(input));
    }
  }
).filter(new Predicate<TargetNode<?>>(){
    @Override public boolean apply(    TargetNode<?> input){
      return CoreDataModelDescription.TYPE.equals(input.getType());
    }
  }
).transform(new Function<TargetNode<?>,CoreDataModelDescription.Arg>(){
    @Override public CoreDataModelDescription.Arg apply(    TargetNode<?> input){
      return (CoreDataModelDescription.Arg)input.getConstructorArg();
    }
  }
).toSet());
  return target;
}
