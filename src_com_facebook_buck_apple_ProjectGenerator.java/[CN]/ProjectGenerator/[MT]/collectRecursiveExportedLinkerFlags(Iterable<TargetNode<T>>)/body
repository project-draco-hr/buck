{
  return FluentIterable.from(targetNodes).transformAndConcat(AppleBuildRules.newRecursiveRuleDependencyTransformer(targetGraph,AppleBuildRules.RecursiveDependenciesMode.LINKING,ImmutableSet.of(AppleLibraryDescription.TYPE,CxxLibraryDescription.TYPE,HalideLibraryDescription.TYPE))).append(targetNodes).transformAndConcat(new Function<TargetNode<?>,Iterable<? extends String>>(){
    @Override public Iterable<String> apply(    TargetNode<?> input){
      if (input.getType() == HalideLibraryDescription.TYPE) {
        ImmutableSet.Builder<String> builder=ImmutableSet.builder();
        BuildTarget buildTarget=input.getBuildTarget();
        if (!HalideLibraryDescription.isHalideCompilerTarget(buildTarget)) {
          String shortName=buildTarget.getShortName();
          Path libPath=pathRelativizer.outputDirToRootRelative(getHalideOutputPath(buildTarget)).resolve(shortName + ".o");
          builder.add(libPath.toString());
        }
        return builder.build();
      }
 else {
        return input.castArg(AppleNativeTargetDescriptionArg.class).transform(GET_EXPORTED_LINKER_FLAGS).or(ImmutableSet.<String>of());
      }
    }
  }
);
}
