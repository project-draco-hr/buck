{
  return FluentIterable.from(targetGraph.getSubgraph(ImmutableSet.of(targetNode)).getNodes()).filter(new Predicate<TargetNode<?>>(){
    @Override public boolean apply(    TargetNode<?> input){
      Optional<TargetNode<AppleBundleDescription.Arg>> appleBundleNode=input.castArg(AppleBundleDescription.Arg.class);
      if (!appleBundleNode.isPresent()) {
        return false;
      }
      return isFrameworkBundle(appleBundleNode.get().getConstructorArg());
    }
  }
).toSet();
}
