{
  return FluentIterable.from(targetNodes).transformAndConcat(AppleBuildRules.newRecursiveRuleDependencyTransformer(targetGraph,AppleBuildRules.RecursiveDependenciesMode.LINKING,ImmutableSet.of(AppleLibraryDescription.TYPE))).filter(getLibraryWithSourcesToCompilePredicate()).transform(new Function<TargetNode<?>,String>(){
    @Override public String apply(    TargetNode<?> input){
      return getTargetOutputPath(input);
    }
  }
).append(collectRecursiveSearchPathsForFrameworkPaths(targetNodes,FrameworkPath.FrameworkType.LIBRARY)).toSet();
}
