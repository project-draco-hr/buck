{
  ImmutableSet.Builder<PBXFileReference> testLibs=ImmutableSet.builder();
  for (  TargetNode<AppleTestDescription.Arg> test : tests) {
    testLibs.add(getOrCreateTestLibraryFileReference(test));
  }
  NewNativeTargetProjectMutator mutator=new NewNativeTargetProjectMutator(pathRelativizer,sourcePathResolver).setTargetName(productName).setProduct(dylibProductTypeByBundleExtension(key.getExtension().getLeft()).get(),productName,Paths.get(productName + "." + getExtensionString(key.getExtension()))).setSourcesWithFlags(ImmutableSet.of(SourceWithFlags.of(new PathSourcePath(projectFilesystem,emptyFileWithExtension("c"))))).setArchives(Sets.union(collectRecursiveLibraryDependencies(tests),testLibs.build())).setRecursiveResources(AppleResources.collectRecursiveResources(targetGraph,tests)).setRecursiveAssetCatalogs(AppleBuildRules.collectRecursiveAssetCatalogs(targetGraph,tests));
  ImmutableSet.Builder<FrameworkPath> frameworksBuilder=ImmutableSet.builder();
  frameworksBuilder.addAll(collectRecursiveFrameworkDependencies(tests));
  for (  TargetNode<AppleTestDescription.Arg> test : tests) {
    frameworksBuilder.addAll(test.getConstructorArg().frameworks.get());
    frameworksBuilder.addAll(test.getConstructorArg().libraries.get());
  }
  mutator.setFrameworks(frameworksBuilder.build());
  NewNativeTargetProjectMutator.Result result;
  try {
    result=mutator.buildTargetAndAddToProject(project);
  }
 catch (  NoSuchBuildTargetException e) {
    throw new HumanReadableException(e);
  }
  ImmutableMap.Builder<String,String> overrideBuildSettingsBuilder=ImmutableMap.<String,String>builder().put("GCC_PREFIX_HEADER","").put("USE_HEADERMAP","NO");
  if (key.getInfoPlist().isPresent()) {
    overrideBuildSettingsBuilder.put("INFOPLIST_FILE",pathRelativizer.outputDirToRootRelative(sourcePathResolver.apply(key.getInfoPlist().get())).toString());
  }
  setTargetBuildConfigurations(new Function<String,Path>(){
    @Override public Path apply(    String input){
      return outputDirectory.resolve(String.format("xcconfigs/%s-%s.xcconfig",productName,input));
    }
  }
,result.target,project.getMainGroup(),key.getConfigs().get(),overrideBuildSettingsBuilder.build(),ImmutableMap.of("PRODUCT_NAME",productName,"WRAPPER_EXTENSION",getExtensionString(key.getExtension())),ImmutableMap.of("FRAMEWORK_SEARCH_PATHS",Joiner.on(' ').join(collectRecursiveFrameworkSearchPaths(tests)),"LIBRARY_SEARCH_PATHS",Joiner.on(' ').join(collectRecursiveLibrarySearchPaths(tests)),"OTHER_LDFLAGS",Escaper.escapeAsBashString(Joiner.on(' ').join(MoreIterables.zipAndConcat(Iterables.cycle("-Xlinker"),Iterables.concat(key.getLinkerFlags(),collectRecursiveExportedLinkerFlags(tests)))))));
  buildableCombinedTestTargets.add(result.target);
}
