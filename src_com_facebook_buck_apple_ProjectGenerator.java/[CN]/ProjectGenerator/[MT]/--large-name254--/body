{
  LOG.debug("Generating binary target for node %s",targetNode);
  TargetNode<?> buildTargetNode=bundle.isPresent() ? bundle.get() : targetNode;
  final BuildTarget buildTarget=buildTargetNode.getBuildTarget();
  String buildTargetName=getProductNameForBuildTarget(buildTarget);
  CxxLibraryDescription.Arg arg=targetNode.getConstructorArg();
  NewNativeTargetProjectMutator mutator=new NewNativeTargetProjectMutator(pathRelativizer,sourcePathResolver);
  ImmutableSet<SourcePath> exportedHeaders=ImmutableSet.copyOf(getHeaderSourcePaths(arg.exportedHeaders));
  ImmutableSet<SourcePath> headers=ImmutableSet.copyOf(getHeaderSourcePaths(arg.headers));
  ImmutableMap<CxxSource.Type,ImmutableList<String>> langPreprocessorFlags=targetNode.getConstructorArg().langPreprocessorFlags.get();
  mutator.setTargetName(getXcodeTargetName(buildTarget)).setLangPreprocessorFlags(langPreprocessorFlags).setProduct(productType,buildTargetName,Paths.get(String.format(productOutputFormat,buildTargetName))).setSourcesWithFlags(ImmutableSet.copyOf(arg.srcs.get())).setPublicHeaders(exportedHeaders).setPrivateHeaders(headers).setPrefixHeader(arg.prefixHeader).setRecursiveResources(recursiveResources).setDirectResources(directResources);
  if (bundle.isPresent()) {
    HasAppleBundleFields bundleArg=bundle.get().getConstructorArg();
    mutator.setInfoPlist(Optional.of(bundleArg.getInfoPlist()));
  }
  Optional<TargetNode<AppleNativeTargetDescriptionArg>> appleTargetNode=targetNode.castArg(AppleNativeTargetDescriptionArg.class);
  if (appleTargetNode.isPresent()) {
    AppleNativeTargetDescriptionArg appleArg=appleTargetNode.get().getConstructorArg();
    mutator=mutator.setExtraXcodeSources(ImmutableSet.copyOf(appleArg.extraXcodeSources.get()));
  }
  if (options.contains(Option.CREATE_DIRECTORY_STRUCTURE)) {
    mutator.setTargetGroupPath(FluentIterable.from(buildTarget.getBasePath()).transform(Functions.toStringFunction()).toList());
  }
  if (!recursiveAssetCatalogs.isEmpty()) {
    mutator.setRecursiveAssetCatalogs(recursiveAssetCatalogs);
  }
  if (!directAssetCatalogs.isEmpty()) {
    mutator.setDirectAssetCatalogs(directAssetCatalogs);
  }
  if (includeFrameworks) {
    ImmutableSet.Builder<FrameworkPath> frameworksBuilder=ImmutableSet.builder();
    frameworksBuilder.addAll(targetNode.getConstructorArg().frameworks.get());
    frameworksBuilder.addAll(targetNode.getConstructorArg().libraries.get());
    frameworksBuilder.addAll(collectRecursiveFrameworkDependencies(ImmutableList.of(targetNode)));
    mutator.setFrameworks(frameworksBuilder.build());
    mutator.setArchives(collectRecursiveLibraryDependencies(ImmutableList.of(targetNode)));
  }
  ImmutableList.Builder<TargetNode<?>> preScriptPhases=ImmutableList.builder();
  ImmutableList.Builder<TargetNode<?>> postScriptPhases=ImmutableList.builder();
  boolean skipRNBundle=ReactNativeFlavors.skipBundling(buildTargetNode.getBuildTarget());
  if (bundle.isPresent() && targetNode != bundle.get()) {
    collectBuildScriptDependencies(targetGraph.getAll(bundle.get().getDeclaredDeps()),preScriptPhases,postScriptPhases,skipRNBundle);
  }
  collectBuildScriptDependencies(targetGraph.getAll(targetNode.getDeclaredDeps()),preScriptPhases,postScriptPhases,skipRNBundle);
  mutator.setPreBuildRunScriptPhasesFromTargetNodes(preScriptPhases.build());
  if (copyFilesPhases.isPresent()) {
    mutator.setCopyFilesPhases(copyFilesPhases.get());
  }
  mutator.setPostBuildRunScriptPhasesFromTargetNodes(postScriptPhases.build());
  mutator.skipReactNativeBundle(skipRNBundle);
  NewNativeTargetProjectMutator.Result targetBuilderResult;
  try {
    targetBuilderResult=mutator.buildTargetAndAddToProject(project);
  }
 catch (  NoSuchBuildTargetException e) {
    throw new HumanReadableException(e);
  }
  PBXGroup targetGroup=targetBuilderResult.targetGroup;
  SourceTreePath buckFilePath=new SourceTreePath(PBXReference.SourceTree.SOURCE_ROOT,pathRelativizer.outputPathToBuildTargetPath(buildTarget).resolve(buildFileName),Optional.<String>absent());
  PBXFileReference buckReference=targetGroup.getOrCreateFileReferenceBySourceTreePath(buckFilePath);
  buckReference.setExplicitFileType(Optional.of("text.script.python"));
  ImmutableMap.Builder<String,String> extraSettingsBuilder=ImmutableMap.builder();
  extraSettingsBuilder.put("TARGET_NAME",buildTargetName).put("SRCROOT",pathRelativizer.outputPathToBuildTargetPath(buildTarget).toString());
  if (bundleLoaderNode.isPresent()) {
    TargetNode<AppleBundleDescription.Arg> bundleLoader=bundleLoaderNode.get();
    String bundleLoaderProductName=getProductNameForBuildTarget(bundleLoader.getBuildTarget());
    String bundleLoaderBundleName=bundleLoaderProductName + "." + getExtensionString(bundleLoader.getConstructorArg().getExtension());
    String bundleLoaderOutputPathConditional="$(BUNDLE_LOADER_BUNDLE_STYLE_CONDITIONAL_$(CONTENTS_FOLDER_PATH:file:identifier))";
    String bundleLoaderOutputPathDeepSetting="BUNDLE_LOADER_BUNDLE_STYLE_CONDITIONAL_Contents";
    String bundleLoaderOutputPathDeepValue="Contents/MacOS/";
    String bundleLoaderOutputPathValue=Joiner.on('/').join(getTargetOutputPath(bundleLoader),bundleLoaderBundleName,bundleLoaderOutputPathConditional,bundleLoaderProductName);
    extraSettingsBuilder.put(bundleLoaderOutputPathDeepSetting,bundleLoaderOutputPathDeepValue).put("BUNDLE_LOADER",bundleLoaderOutputPathValue).put("TEST_HOST","$(BUNDLE_LOADER)");
  }
  if (infoPlistOptional.isPresent()) {
    Path infoPlistPath=pathRelativizer.outputDirToRootRelative(infoPlistOptional.get());
    extraSettingsBuilder.put("INFOPLIST_FILE",infoPlistPath.toString());
  }
  Optional<SourcePath> prefixHeaderOptional=targetNode.getConstructorArg().prefixHeader;
  if (prefixHeaderOptional.isPresent()) {
    Path prefixHeaderRelative=sourcePathResolver.apply(prefixHeaderOptional.get());
    Path prefixHeaderPath=pathRelativizer.outputDirToRootRelative(prefixHeaderRelative);
    extraSettingsBuilder.put("GCC_PREFIX_HEADER",prefixHeaderPath.toString());
    extraSettingsBuilder.put("GCC_PRECOMPILE_PREFIX_HEADER","YES");
  }
  extraSettingsBuilder.put("USE_HEADERMAP","NO");
  ImmutableMap.Builder<String,String> defaultSettingsBuilder=ImmutableMap.builder();
  defaultSettingsBuilder.put("REPO_ROOT",projectFilesystem.getRootPath().toAbsolutePath().normalize().toString());
  defaultSettingsBuilder.put(PRODUCT_NAME,getProductName(buildTargetNode,buildTarget));
  if (bundle.isPresent()) {
    defaultSettingsBuilder.put("WRAPPER_EXTENSION",getExtensionString(bundle.get().getConstructorArg().getExtension()));
  }
  defaultSettingsBuilder.put("BUILT_PRODUCTS_DIR",Joiner.on('/').join("$SYMROOT","$CONFIGURATION$EFFECTIVE_PLATFORM_NAME"));
  defaultSettingsBuilder.put("CONFIGURATION_BUILD_DIR","$BUILT_PRODUCTS_DIR");
  if (!bundle.isPresent() && (targetNode.getType().equals(AppleLibraryDescription.TYPE) || targetNode.getType().equals(CxxLibraryDescription.TYPE))) {
    defaultSettingsBuilder.put("EXECUTABLE_PREFIX","lib");
  }
  ImmutableMap.Builder<String,String> appendConfigsBuilder=ImmutableMap.builder();
  ImmutableSet<Path> recursiveHeaderSearchPaths=collectRecursiveHeaderSearchPaths(targetNode);
  ImmutableSet<Path> headerMapBases=recursiveHeaderSearchPaths.isEmpty() ? ImmutableSet.<Path>of() : ImmutableSet.of(pathRelativizer.outputDirToRootRelative(BuckConstant.BUCK_OUTPUT_PATH));
  appendConfigsBuilder.put("HEADER_SEARCH_PATHS",Joiner.on(' ').join(Iterables.concat(recursiveHeaderSearchPaths,headerMapBases))).put("LIBRARY_SEARCH_PATHS",Joiner.on(' ').join(collectRecursiveLibrarySearchPaths(ImmutableSet.of(targetNode)))).put("FRAMEWORK_SEARCH_PATHS",Joiner.on(' ').join(collectRecursiveFrameworkSearchPaths(ImmutableList.of(targetNode)))).put("OTHER_CFLAGS",Joiner.on(' ').join(Iterables.transform(Iterables.concat(targetNode.getConstructorArg().compilerFlags.get(),targetNode.getConstructorArg().preprocessorFlags.get(),collectRecursiveExportedPreprocessorFlags(ImmutableList.of(targetNode))),Escaper.BASH_ESCAPER))).put("OTHER_LDFLAGS",Joiner.on(' ').join(Iterables.transform(MoreIterables.zipAndConcat(Iterables.cycle("-Xlinker"),Iterables.concat(targetNode.getConstructorArg().linkerFlags.get(),collectRecursiveExportedLinkerFlags(ImmutableList.of(targetNode)))),Escaper.BASH_ESCAPER)));
  ImmutableMap<String,String> appendedConfig=appendConfigsBuilder.build();
  Optional<ImmutableSortedMap<String,ImmutableMap<String,String>>> configs=getXcodeBuildConfigurationsForTargetNode(targetNode,appendedConfig);
  PBXNativeTarget target=targetBuilderResult.target;
  setTargetBuildConfigurations(getConfigurationNameToXcconfigPath(buildTarget),target,project.getMainGroup(),configs.get(),extraSettingsBuilder.build(),defaultSettingsBuilder.build(),appendedConfig);
  createHeaderSymlinkTree(sourcePathResolver,getPublicCxxHeaders(targetNode),AppleDescriptions.getPathToHeaderSymlinkTree(targetNode,HeaderVisibility.PUBLIC));
  createHeaderSymlinkTree(sourcePathResolver,getPrivateCxxHeaders(targetNode),AppleDescriptions.getPathToHeaderSymlinkTree(targetNode,HeaderVisibility.PRIVATE));
  if (appleTargetNode.isPresent()) {
    addCoreDataModelsIntoTarget(appleTargetNode.get(),targetGroup);
  }
  return target;
}
