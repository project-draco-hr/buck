{
  ImmutableMap<String,CxxSource> srcs=parseCxxSources(params,resolver,args);
  ImmutableMap<Path,SourcePath> headers=parseHeaders(params,resolver,args);
  ImmutableMap<String,SourcePath> lexSrcs=parseLexSources(params,resolver,args);
  ImmutableMap<String,SourcePath> yaccSrcs=parseYaccSources(params,resolver,args);
  SourcePathResolver sourcePathResolver=new SourcePathResolver(resolver);
  CxxHeaderSourceSpec lexYaccSources=requireLexYaccSources(params,resolver,sourcePathResolver,cxxPlatform,lexSrcs,yaccSrcs);
  SymlinkTree headerSymlinkTree=requireHeaderSymlinkTree(params,resolver,sourcePathResolver,cxxPlatform,true,lexSrcs,yaccSrcs,headers,HeaderVisibility.PRIVATE);
  CxxPreprocessorInput cxxPreprocessorInput=combineCxxPreprocessorInput(params,cxxPlatform,CxxFlags.getLanguageFlags(args.preprocessorFlags,args.platformPreprocessorFlags,args.langPreprocessorFlags,cxxPlatform.getFlavor()),args.prefixHeaders.get(),ImmutableList.of(headerSymlinkTree),args.frameworkSearchPaths.get());
  ImmutableMap<String,CxxSource> sources=ImmutableMap.<String,CxxSource>builder().putAll(srcs).putAll(lexYaccSources.getCxxSources()).build();
  ImmutableMap<CxxPreprocessAndCompile,SourcePath> objects=CxxSourceRuleFactory.requirePreprocessAndCompileRules(params,resolver,sourcePathResolver,cxxPlatform,cxxPreprocessorInput,CxxFlags.getFlags(args.compilerFlags,args.platformCompilerFlags,cxxPlatform.getFlavor()),compileStrategy,sources,CxxSourceRuleFactory.PicType.PDC);
  Path output=getOutputPath(params.getBuildTarget());
  CxxLink cxxLink=CxxLinkableEnhancer.createCxxLinkableBuildRule(cxxPlatform,params,sourcePathResolver,ImmutableList.<String>of(),CxxFlags.getFlags(args.linkerFlags,args.platformLinkerFlags,cxxPlatform.getFlavor()),createCxxLinkTarget(params.getBuildTarget()),Linker.LinkType.EXECUTABLE,Optional.<String>absent(),output,objects.values(),Linker.LinkableDepType.STATIC,params.getDeps(),args.cxxRuntimeType,Optional.<SourcePath>absent());
  resolver.addToIndex(cxxLink);
  return new CxxLinkAndCompileRules(cxxLink,ImmutableSortedSet.copyOf(objects.keySet()));
}
