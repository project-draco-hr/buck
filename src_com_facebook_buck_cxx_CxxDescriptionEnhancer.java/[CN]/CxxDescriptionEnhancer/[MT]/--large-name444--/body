{
  CxxLink cxxLink;
  Optional<BuildRule> existingCxxLinkRule=resolver.getRuleOptional(linkRuleTarget);
  if (existingCxxLinkRule.isPresent()) {
    Preconditions.checkArgument(existingCxxLinkRule.get() instanceof CxxLink);
    cxxLink=(CxxLink)existingCxxLinkRule.get();
  }
 else {
    cxxLink=CxxLinkableEnhancer.createCxxLinkableBuildRule(cxxPlatform,params,resolver,sourcePathResolver,linkRuleTarget,Linker.LinkType.EXECUTABLE,Optional.<String>absent(),linkOutput,linkStyle,FluentIterable.from(params.getDeps()).filter(NativeLinkable.class),cxxRuntimeType,Optional.<SourcePath>absent(),ImmutableSet.<BuildTarget>of(),NativeLinkableInput.builder().setArgs(argsBuilder.build()).setFrameworks(frameworks.or(ImmutableSortedSet.<FrameworkPath>of())).setLibraries(libraries.or(ImmutableSortedSet.<FrameworkPath>of())).build());
    resolver.addToIndex(cxxLink);
  }
  return cxxLink;
}
