{
  BuildTarget headerTarget=createHeaderTarget(params.getBuildTarget());
  BuildTarget headerSymlinkTreeTarget=createHeaderSymlinkTreeTarget(params.getBuildTarget());
  Path headerSymlinkTreeRoot=getHeaderSymlinkTreePath(params.getBuildTarget());
  ImmutableSortedSet<BuildRule> headerRules=CxxPreprocessables.createHeaderBuildRules(headerTarget,headerSymlinkTreeTarget,headerSymlinkTreeRoot,params,headers);
  resolver.addAllToIndex(headerRules);
  CxxPreprocessorInput cxxPreprocessorInputFromDeps=CxxPreprocessables.getTransitiveCxxPreprocessorInput(FluentIterable.from(params.getDeps()).filter(Predicates.instanceOf(CxxPreprocessorDep.class)));
  return CxxPreprocessorInput.concat(ImmutableList.of(new CxxPreprocessorInput(ImmutableSet.of(headerTarget,headerSymlinkTreeTarget),ImmutableList.<String>builder().addAll(config.getCppFlags()).addAll(preprocessorFlags).build(),ImmutableList.<String>builder().addAll(config.getCxxppFlags()).addAll(preprocessorFlags).build(),ImmutableList.of(headerSymlinkTreeRoot),ImmutableList.<Path>of()),cxxPreprocessorInputFromDeps));
}
