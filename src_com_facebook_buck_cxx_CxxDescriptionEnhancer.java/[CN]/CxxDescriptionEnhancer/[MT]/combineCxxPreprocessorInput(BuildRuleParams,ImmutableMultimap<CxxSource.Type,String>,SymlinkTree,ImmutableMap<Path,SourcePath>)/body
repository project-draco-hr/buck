{
  CxxPreprocessorInput cxxPreprocessorInputFromDeps=CxxPreprocessables.getTransitiveCxxPreprocessorInput(FluentIterable.from(params.getDeps()).filter(Predicates.instanceOf(CxxPreprocessorDep.class)));
  return CxxPreprocessorInput.concat(ImmutableList.of(CxxPreprocessorInput.builder().setRules(ImmutableSet.of(headerSymlinkTree.getBuildTarget())).setPreprocessorFlags(preprocessorFlags).setIncludes(headers).setIncludeRoots(ImmutableList.of(headerSymlinkTree.getRoot())).build(),cxxPreprocessorInputFromDeps));
}
