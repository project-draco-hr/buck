{
  BuildRuleParams paramsWithoutFlavor=params.withoutFlavor(CxxCompilationDatabase.COMPILATION_DATABASE);
  ImmutableMap<CxxPreprocessAndCompile,SourcePath> objects=requireObjects(paramsWithoutFlavor,ruleResolver,pathResolver,cxxBuckConfig,cxxPlatform,CxxSourceRuleFactory.PicType.PIC,arg);
  HeaderSymlinkTree privateHeaderSymlinkTree=CxxDescriptionEnhancer.requireHeaderSymlinkTree(paramsWithoutFlavor,ruleResolver,pathResolver,cxxPlatform,CxxDescriptionEnhancer.parseHeaders(params.getBuildTarget(),pathResolver,Optional.of(cxxPlatform),arg),HeaderVisibility.PRIVATE);
  Optional<HeaderSymlinkTree> exportedHeaderSymlinkTree;
  if (arg instanceof CxxLibraryDescription.Arg) {
    CxxLibraryDescription.Arg libArg=(CxxLibraryDescription.Arg)arg;
    exportedHeaderSymlinkTree=Optional.of(CxxDescriptionEnhancer.requireHeaderSymlinkTree(paramsWithoutFlavor,ruleResolver,pathResolver,cxxPlatform,CxxDescriptionEnhancer.parseExportedHeaders(params.getBuildTarget(),pathResolver,Optional.of(cxxPlatform),libArg),HeaderVisibility.PUBLIC));
  }
 else {
    exportedHeaderSymlinkTree=Optional.absent();
  }
  return CxxCompilationDatabase.createCompilationDatabase(params,pathResolver,cxxBuckConfig.getPreprocessMode(),objects.keySet(),privateHeaderSymlinkTree,exportedHeaderSymlinkTree);
}
