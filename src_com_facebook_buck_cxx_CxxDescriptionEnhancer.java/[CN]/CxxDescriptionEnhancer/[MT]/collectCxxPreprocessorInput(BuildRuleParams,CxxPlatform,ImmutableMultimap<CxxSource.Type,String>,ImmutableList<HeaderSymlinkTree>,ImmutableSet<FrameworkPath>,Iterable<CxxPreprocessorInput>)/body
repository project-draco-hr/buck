{
  BuildTarget targetWithoutFlavor=BuildTarget.of(params.getBuildTarget().getUnflavoredBuildTarget());
  ImmutableList.Builder<CxxPreprocessorInput> cxxPreprocessorInputFromTestedRulesBuilder=ImmutableList.builder();
  for (  BuildRule rule : params.getDeps()) {
    if (rule instanceof NativeTestable) {
      NativeTestable testable=(NativeTestable)rule;
      if (testable.isTestedBy(targetWithoutFlavor)) {
        LOG.debug("Adding private includes of tested rule %s to testing rule %s",rule.getBuildTarget(),params.getBuildTarget());
        cxxPreprocessorInputFromTestedRulesBuilder.add(testable.getCxxPreprocessorInput(cxxPlatform,HeaderVisibility.PRIVATE));
      }
    }
  }
  ImmutableList<CxxPreprocessorInput> cxxPreprocessorInputFromTestedRules=cxxPreprocessorInputFromTestedRulesBuilder.build();
  LOG.verbose("Rules tested by target %s added private includes %s",params.getBuildTarget(),cxxPreprocessorInputFromTestedRules);
  ImmutableList.Builder<CxxHeaders> allIncludes=ImmutableList.builder();
  for (  HeaderSymlinkTree headerSymlinkTree : headerSymlinkTrees) {
    allIncludes.add(CxxHeaders.fromSymlinkTree(headerSymlinkTree,CxxPreprocessables.IncludeType.LOCAL));
  }
  CxxPreprocessorInput localPreprocessorInput=CxxPreprocessorInput.builder().putAllPreprocessorFlags(preprocessorFlags).addAllIncludes(allIncludes.build()).addAllFrameworks(frameworks).build();
  return ImmutableList.<CxxPreprocessorInput>builder().add(localPreprocessorInput).addAll(cxxPreprocessorInputFromDeps).addAll(cxxPreprocessorInputFromTestedRules).build();
}
