{
  CxxPreprocessorInput cxxPreprocessorInputFromDeps;
  try {
    cxxPreprocessorInputFromDeps=CxxPreprocessables.getTransitiveCxxPreprocessorInput(cxxPlatform,FluentIterable.from(params.getDeps()).filter(Predicates.instanceOf(CxxPreprocessorDep.class)));
  }
 catch (  CxxPreprocessorInput.ConflictingHeadersException e) {
    throw e.getHumanReadableExceptionForBuildTarget(params.getBuildTarget());
  }
  ImmutableMap.Builder<Path,SourcePath> allLinks=ImmutableMap.builder();
  ImmutableMap.Builder<Path,SourcePath> allFullLinks=ImmutableMap.builder();
  ImmutableList.Builder<Path> allIncludeRoots=ImmutableList.builder();
  for (  SymlinkTree headerSymlinkTree : headerSymlinkTrees) {
    allLinks.putAll(headerSymlinkTree.getLinks());
    allFullLinks.putAll(headerSymlinkTree.getFullLinks());
    allIncludeRoots.add(headerSymlinkTree.getRoot());
  }
  CxxPreprocessorInput localPreprocessorInput=CxxPreprocessorInput.builder().addAllRules(Iterables.transform(headerSymlinkTrees,HasBuildTarget.TO_TARGET)).putAllPreprocessorFlags(preprocessorFlags).setIncludes(ImmutableCxxHeaders.builder().addAllPrefixHeaders(prefixHeaders).putAllNameToPathMap(allLinks.build()).putAllFullNameToPathMap(allFullLinks.build()).build()).addAllIncludeRoots(allIncludeRoots.build()).addAllFrameworkRoots(frameworkSearchPaths).build();
  try {
    return CxxPreprocessorInput.concat(ImmutableList.of(localPreprocessorInput,cxxPreprocessorInputFromDeps));
  }
 catch (  CxxPreprocessorInput.ConflictingHeadersException e) {
    throw e.getHumanReadableExceptionForBuildTarget(params.getBuildTarget());
  }
}
