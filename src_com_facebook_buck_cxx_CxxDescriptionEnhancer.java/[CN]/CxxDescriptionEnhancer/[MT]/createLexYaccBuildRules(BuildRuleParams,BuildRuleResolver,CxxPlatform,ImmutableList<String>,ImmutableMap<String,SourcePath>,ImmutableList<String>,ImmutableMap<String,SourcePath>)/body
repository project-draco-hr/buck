{
  SourcePathResolver pathResolver=new SourcePathResolver(resolver);
  ImmutableMap.Builder<String,CxxSource> lexYaccCxxSourcesBuilder=ImmutableMap.builder();
  ImmutableMap.Builder<Path,SourcePath> lexYaccHeadersBuilder=ImmutableMap.builder();
  for (  ImmutableMap.Entry<String,SourcePath> ent : lexSrcs.entrySet()) {
    final String name=ent.getKey();
    final SourcePath source=ent.getValue();
    BuildTarget target=createLexBuildTarget(params.getBuildTarget(),name);
    Path outputSource=getLexSourceOutputPath(target,name);
    Path outputHeader=getLexHeaderOutputPath(target,name);
    Lex lex=new Lex(params.copyWithChanges(LEX_TYPE,target,ImmutableSortedSet.copyOf(pathResolver.filterBuildRuleInputs(ImmutableList.of(source))),ImmutableSortedSet.<BuildRule>of()),pathResolver,cxxPlatform.getLex(),ImmutableList.<String>builder().addAll(cxxPlatform.getLexFlags()).addAll(lexFlags).build(),outputSource,outputHeader,source);
    resolver.addToIndex(lex);
    lexYaccCxxSourcesBuilder.put(name + ".cc",ImmutableCxxSource.of(CxxSource.Type.CXX,new BuildTargetSourcePath(lex.getBuildTarget(),outputSource)));
    lexYaccHeadersBuilder.put(params.getBuildTarget().getBasePath().resolve(name + ".h"),new BuildTargetSourcePath(lex.getBuildTarget(),outputHeader));
  }
  for (  ImmutableMap.Entry<String,SourcePath> ent : yaccSrcs.entrySet()) {
    final String name=ent.getKey();
    final SourcePath source=ent.getValue();
    BuildTarget target=createYaccBuildTarget(params.getBuildTarget(),name);
    Path outputPrefix=getYaccOutputPrefix(target,Files.getNameWithoutExtension(name));
    Yacc yacc=new Yacc(params.copyWithChanges(YACC_TYPE,target,ImmutableSortedSet.copyOf(pathResolver.filterBuildRuleInputs(ImmutableList.of(source))),ImmutableSortedSet.<BuildRule>of()),pathResolver,cxxPlatform.getYacc(),ImmutableList.<String>builder().addAll(cxxPlatform.getYaccFlags()).addAll(yaccFlags).build(),outputPrefix,source);
    resolver.addToIndex(yacc);
    lexYaccCxxSourcesBuilder.put(name + ".cc",ImmutableCxxSource.of(CxxSource.Type.CXX,new BuildTargetSourcePath(yacc.getBuildTarget(),Yacc.getSourceOutputPath(outputPrefix))));
    lexYaccHeadersBuilder.put(params.getBuildTarget().getBasePath().resolve(name + ".h"),new BuildTargetSourcePath(yacc.getBuildTarget(),Yacc.getHeaderOutputPath(outputPrefix)));
  }
  return ImmutableCxxHeaderSourceSpec.of(lexYaccHeadersBuilder.build(),lexYaccCxxSourcesBuilder.build());
}
