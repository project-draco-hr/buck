{
  ImmutableList<SourcePath> objects=createPreprocessAndCompileBuildRules(params,resolver,cxxBuckConfig,preprocessorFlags,headers,compilerFlags,sources);
  final BuildTarget staticLibraryTarget=createStaticLibraryBuildTarget(params.getBuildTarget());
  final Path staticLibraryPath=Archives.getArchiveOutputPath(staticLibraryTarget);
  Archive archive=Archives.createArchiveRule(staticLibraryTarget,params,cxxBuckConfig.getAr().or(Archives.DEFAULT_ARCHIVE_PATH),staticLibraryPath,objects);
  resolver.addToIndex(archive);
  return new CxxLibrary(params){
    @Override public CxxPreprocessorInput getCxxPreprocessorInput(){
      return new CxxPreprocessorInput(ImmutableSet.of(CxxDescriptionEnhancer.createHeaderTarget(params.getBuildTarget()),CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(params.getBuildTarget())),propagatedPpFlags,propagatedPpFlags,ImmutableList.of(CxxDescriptionEnhancer.getHeaderSymlinkTreePath(params.getBuildTarget())),ImmutableList.<Path>of());
    }
    @Override public NativeLinkableInput getNativeLinkableInput(){
      return new NativeLinkableInput(ImmutableSet.of(staticLibraryTarget),ImmutableList.<Path>of(),ImmutableList.of(staticLibraryPath.toString()));
    }
  }
;
}
