{
  BuildRuleParams paramsWithoutFlavor=params.withoutFlavor(CxxCompilationDatabase.COMPILATION_DATABASE);
  final ImmutableSortedSet.Builder<HeaderSymlinkTree> resultBuilder=ImmutableSortedSet.naturalOrder();
  resultBuilder.add(CxxDescriptionEnhancer.requireHeaderSymlinkTree(paramsWithoutFlavor,ruleResolver,pathResolver,cxxPlatform,CxxDescriptionEnhancer.parseHeaders(params.getBuildTarget(),pathResolver,Optional.of(cxxPlatform),arg),HeaderVisibility.PRIVATE));
  if (arg instanceof CxxLibraryDescription.Arg) {
    CxxLibraryDescription.Arg libArg=(CxxLibraryDescription.Arg)arg;
    resultBuilder.add(CxxDescriptionEnhancer.requireHeaderSymlinkTree(paramsWithoutFlavor,ruleResolver,pathResolver,cxxPlatform,CxxDescriptionEnhancer.parseExportedHeaders(params.getBuildTarget(),pathResolver,Optional.of(cxxPlatform),libArg),HeaderVisibility.PUBLIC));
  }
  AbstractBreadthFirstTraversal<BuildRule> visitor=new AbstractBreadthFirstTraversal<BuildRule>(params.getDeps()){
    @Override public ImmutableSet<BuildRule> visit(    BuildRule dep){
      if (dep instanceof CxxPreprocessorDep) {
        CxxPreprocessorDep cxxPreprocessorDep=(CxxPreprocessorDep)dep;
        Optional<HeaderSymlinkTree> exportedHeaderSymlinkTree=cxxPreprocessorDep.getExportedHeaderSymlinkTree(cxxPlatform);
        if (exportedHeaderSymlinkTree.isPresent()) {
          resultBuilder.add(exportedHeaderSymlinkTree.get());
        }
      }
      return dep.getDeps();
    }
  }
;
  visitor.start();
  return resultBuilder.build();
}
