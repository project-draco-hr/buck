{
  BuildTarget targetWithoutFlavor=BuildTarget.of(params.getBuildTarget().getUnflavoredBuildTarget());
  ImmutableList.Builder<CxxPreprocessorInput> cxxPreprocessorInputFromTestedRulesBuilder=ImmutableList.builder();
  for (  BuildRule rule : params.getDeps()) {
    if (rule instanceof NativeTestable) {
      NativeTestable testable=(NativeTestable)rule;
      if (testable.isTestedBy(targetWithoutFlavor)) {
        LOG.debug("Adding private includes of tested rule %s to testing rule %s",rule.getBuildTarget(),params.getBuildTarget());
        cxxPreprocessorInputFromTestedRulesBuilder.add(testable.getCxxPreprocessorInput(cxxPlatform,HeaderVisibility.PRIVATE));
      }
    }
  }
  ImmutableList<CxxPreprocessorInput> cxxPreprocessorInputFromTestedRules=cxxPreprocessorInputFromTestedRulesBuilder.build();
  LOG.verbose("Rules tested by target %s added private includes %s",params.getBuildTarget(),cxxPreprocessorInputFromTestedRules);
  ImmutableMap.Builder<Path,SourcePath> allLinks=ImmutableMap.builder();
  ImmutableMap.Builder<Path,SourcePath> allFullLinks=ImmutableMap.builder();
  ImmutableList.Builder<Path> allIncludeRoots=ImmutableList.builder();
  for (  SymlinkTree headerSymlinkTree : headerSymlinkTrees) {
    allLinks.putAll(headerSymlinkTree.getLinks());
    allFullLinks.putAll(headerSymlinkTree.getFullLinks());
    allIncludeRoots.add(headerSymlinkTree.getRoot());
  }
  CxxPreprocessorInput localPreprocessorInput=CxxPreprocessorInput.builder().addAllRules(Iterables.transform(headerSymlinkTrees,HasBuildTarget.TO_TARGET)).putAllPreprocessorFlags(preprocessorFlags).setIncludes(CxxHeaders.builder().addAllPrefixHeaders(prefixHeaders).putAllNameToPathMap(allLinks.build()).putAllFullNameToPathMap(allFullLinks.build()).build()).addAllIncludeRoots(allIncludeRoots.build()).addAllFrameworkRoots(frameworkSearchPaths).build();
  return ImmutableList.<CxxPreprocessorInput>builder().add(localPreprocessorInput).addAll(cxxPreprocessorInputFromDeps).addAll(cxxPreprocessorInputFromTestedRules).build();
}
