{
  ImmutableMultimap<CxxSource.Type,String> exportedPreprocessorFlags;
  ImmutableMap<Path,SourcePath> exportedHeaders;
  if (args instanceof CxxLibraryDescription.Arg) {
    CxxLibraryDescription.Arg hasExportedArgs=(CxxLibraryDescription.Arg)args;
    exportedPreprocessorFlags=CxxFlags.getLanguageFlags(hasExportedArgs.exportedPreprocessorFlags,hasExportedArgs.exportedPlatformPreprocessorFlags,hasExportedArgs.exportedLangPreprocessorFlags,cxxPlatform);
    exportedHeaders=CxxDescriptionEnhancer.parseExportedHeaders(params.getBuildTarget(),sourcePathResolver,Optional.of(cxxPlatform),hasExportedArgs);
  }
 else {
    exportedPreprocessorFlags=ImmutableMultimap.of();
    exportedHeaders=ImmutableMap.of();
  }
  HeaderSymlinkTree headerSymlinkTree=CxxDescriptionEnhancer.requireHeaderSymlinkTree(params,ruleResolver,sourcePathResolver,cxxPlatform,CxxDescriptionEnhancer.parseHeaders(params.getBuildTarget(),sourcePathResolver,Optional.of(cxxPlatform),args),HeaderVisibility.PRIVATE);
  ImmutableList<CxxPreprocessorInput> cxxPreprocessorInputFromDependencies=CxxDescriptionEnhancer.collectCxxPreprocessorInput(params,cxxPlatform,CxxFlags.getLanguageFlags(args.preprocessorFlags,args.platformPreprocessorFlags,args.langPreprocessorFlags,cxxPlatform),ImmutableList.of(headerSymlinkTree),ImmutableSet.<FrameworkPath>of(),CxxLibraryDescription.getTransitiveCxxPreprocessorInput(params,ruleResolver,sourcePathResolver,cxxPlatform,exportedPreprocessorFlags,exportedHeaders,args.frameworks.or(ImmutableSortedSet.<FrameworkPath>of())));
  return CxxSourceRuleFactory.requirePreprocessAndCompileRules(params,ruleResolver,sourcePathResolver,cxxBuckConfig,cxxPlatform,cxxPreprocessorInputFromDependencies,CxxFlags.getLanguageFlags(args.compilerFlags,args.platformCompilerFlags,args.langCompilerFlags,cxxPlatform),args.prefixHeader,cxxBuckConfig.getPreprocessMode(),CxxDescriptionEnhancer.parseCxxSources(params.getBuildTarget(),sourcePathResolver,cxxPlatform,args),pic);
}
