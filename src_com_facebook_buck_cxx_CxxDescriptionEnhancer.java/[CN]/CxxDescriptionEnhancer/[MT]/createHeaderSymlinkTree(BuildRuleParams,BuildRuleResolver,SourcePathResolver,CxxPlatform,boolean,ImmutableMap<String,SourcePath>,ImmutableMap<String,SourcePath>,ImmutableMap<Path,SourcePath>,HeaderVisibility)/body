{
  BuildTarget headerSymlinkTreeTarget=CxxDescriptionEnhancer.createHeaderSymlinkTreeTarget(params.getBuildTarget(),cxxPlatform.getFlavor(),headerVisibility);
  Path headerSymlinkTreeRoot=CxxDescriptionEnhancer.getHeaderSymlinkTreePath(params.getBuildTarget(),cxxPlatform.getFlavor(),headerVisibility);
  Optional<Path> headerMapLocation=Optional.absent();
  if (cxxPlatform.getCpp().supportsHeaderMaps() && cxxPlatform.getCxxpp().supportsHeaderMaps()) {
    headerMapLocation=Optional.of(getHeaderMapPath(params.getBuildTarget(),cxxPlatform.getFlavor(),headerVisibility));
  }
  CxxHeaderSourceSpec lexYaccSources;
  if (includeLexYaccHeaders) {
    lexYaccSources=requireLexYaccSources(params,ruleResolver,pathResolver,cxxPlatform,lexSources,yaccSources);
  }
 else {
    lexYaccSources=CxxHeaderSourceSpec.builder().build();
  }
  return CxxPreprocessables.createHeaderSymlinkTreeBuildRule(pathResolver,headerSymlinkTreeTarget,params,headerSymlinkTreeRoot,headerMapLocation,ImmutableMap.<Path,SourcePath>builder().putAll(headers).putAll(lexYaccSources.getCxxHeaders()).build());
}
