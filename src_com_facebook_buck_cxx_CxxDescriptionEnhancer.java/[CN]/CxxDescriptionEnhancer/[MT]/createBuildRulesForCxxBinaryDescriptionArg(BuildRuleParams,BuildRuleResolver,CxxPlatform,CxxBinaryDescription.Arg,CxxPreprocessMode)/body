{
  ImmutableMap<String,CxxSource> srcs=parseCxxSources(params,resolver,cxxPlatform,args);
  ImmutableMap<Path,SourcePath> headers=parseHeaders(params,resolver,cxxPlatform,args);
  ImmutableMap<String,SourcePath> lexSrcs=parseLexSources(params,resolver,args);
  ImmutableMap<String,SourcePath> yaccSrcs=parseYaccSources(params,resolver,args);
  SourcePathResolver sourcePathResolver=new SourcePathResolver(resolver);
  CxxHeaderSourceSpec lexYaccSources=requireLexYaccSources(params,resolver,sourcePathResolver,cxxPlatform,lexSrcs,yaccSrcs);
  SymlinkTree headerSymlinkTree=requireHeaderSymlinkTree(params,resolver,sourcePathResolver,cxxPlatform,true,lexSrcs,yaccSrcs,headers,HeaderVisibility.PRIVATE);
  ImmutableList<CxxPreprocessorInput> cxxPreprocessorInput=collectCxxPreprocessorInput(params,cxxPlatform,CxxFlags.getLanguageFlags(args.preprocessorFlags,args.platformPreprocessorFlags,args.langPreprocessorFlags,cxxPlatform),args.prefixHeaders.get(),ImmutableList.of(headerSymlinkTree),getFrameworkSearchPaths(args.frameworkSearchPaths,cxxPlatform),CxxPreprocessables.getTransitiveCxxPreprocessorInput(cxxPlatform,FluentIterable.from(params.getDeps()).filter(Predicates.instanceOf(CxxPreprocessorDep.class))));
  ImmutableMap<String,CxxSource> sources=ImmutableMap.<String,CxxSource>builder().putAll(srcs).putAll(lexYaccSources.getCxxSources()).build();
  ImmutableMap<CxxPreprocessAndCompile,SourcePath> objects=CxxSourceRuleFactory.requirePreprocessAndCompileRules(params,resolver,sourcePathResolver,cxxPlatform,cxxPreprocessorInput,CxxFlags.getFlags(args.compilerFlags,args.platformCompilerFlags,cxxPlatform),preprocessMode,sources,CxxSourceRuleFactory.PicType.PDC);
  Path output=getOutputPath(params.getBuildTarget());
  CxxLink cxxLink=CxxLinkableEnhancer.createCxxLinkableBuildRule(cxxPlatform,params,sourcePathResolver,ImmutableList.<String>of(),CxxFlags.getFlags(args.linkerFlags,args.platformLinkerFlags,cxxPlatform),createCxxLinkTarget(params.getBuildTarget()),Linker.LinkType.EXECUTABLE,Optional.<String>absent(),output,objects.values(),(args.linkStyle.or(CxxBinaryDescription.LinkStyle.STATIC) == CxxBinaryDescription.LinkStyle.STATIC) ? Linker.LinkableDepType.STATIC : Linker.LinkableDepType.SHARED,params.getDeps(),args.cxxRuntimeType,Optional.<SourcePath>absent());
  resolver.addToIndex(cxxLink);
  return new CxxLinkAndCompileRules(cxxLink,ImmutableSortedSet.copyOf(objects.keySet()));
}
