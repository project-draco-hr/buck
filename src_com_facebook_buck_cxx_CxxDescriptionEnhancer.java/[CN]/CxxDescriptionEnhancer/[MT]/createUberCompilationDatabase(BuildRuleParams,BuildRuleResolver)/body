{
  Optional<CxxCompilationDatabaseDependencies> compilationDatabases=ruleResolver.requireMetadata(params.withoutFlavor(CxxCompilationDatabase.UBER_COMPILATION_DATABASE).withFlavor(CxxCompilationDatabase.COMPILATION_DATABASE).getBuildTarget(),CxxCompilationDatabaseDependencies.class);
  Preconditions.checkState(compilationDatabases.isPresent());
  SourcePathResolver pathResolver=new SourcePathResolver(ruleResolver);
  return new JsonConcatenate(params.copyWithDeps(Suppliers.ofInstance(ImmutableSortedSet.copyOf(pathResolver.filterBuildRuleInputs(compilationDatabases.get().getSourcePaths()))),Suppliers.ofInstance(ImmutableSortedSet.<BuildRule>of())),pathResolver,ImmutableSortedSet.copyOf(pathResolver.getAllAbsolutePaths(compilationDatabases.get().getSourcePaths())),"compilation-database-concatenate","Concatenate compilation databases","uber-compilation-database","compile_commands.json");
}
