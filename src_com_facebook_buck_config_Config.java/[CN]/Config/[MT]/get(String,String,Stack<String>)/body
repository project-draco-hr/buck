{
  Map.Entry<String,String> cacheKey=new AbstractMap.SimpleEntry<>(section,field);
  Optional<String> value=cache.get(cacheKey);
  if (value != null) {
    return value;
  }
  String expandStackKey=String.format("%s.%s",section,field);
  if (expandStack.search(expandStackKey) != -1) {
    throw new HumanReadableException("cyclical dependency in config references: %s",Joiner.on(" -> ").join(FluentIterable.from(expandStack).append(expandStackKey)));
  }
  Optional<String> val=rawConfig.getValue(section,field);
  if (!val.isPresent()) {
    cache.put(cacheKey,Optional.<String>absent());
    return Optional.absent();
  }
  expandStack.push(expandStackKey);
  value=Optional.of(expand(val.get(),expandStack));
  expandStack.pop();
  cache.put(cacheKey,value);
  return value;
}
