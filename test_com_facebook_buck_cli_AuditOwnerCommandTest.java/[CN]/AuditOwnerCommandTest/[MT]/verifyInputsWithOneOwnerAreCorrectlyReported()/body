{
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem(){
    @Override public File getFileForRelativePath(    String pathRelativeToProjectRoot){
      return new ExistingFile(getRootPath(),pathRelativeToProjectRoot);
    }
  }
;
  ImmutableSet<String> inputs=ImmutableSet.of("java/somefolder/badfolder/somefile.java","java/somefolder/perfect.java","com/test/subtest/random.java");
  ImmutableSet<Path> inputPaths=MorePaths.asPaths(inputs);
  BuildTarget target=BuildTarget.builder("//base","name").build();
  TargetNode<?> targetNode=createTargetNode(target,inputPaths);
  AuditOwnerCommand command=createAuditOwnerCommand(filesystem);
  AuditOwnerCommand.OwnersReport report=command.generateOwnersReport(targetNode,inputs,false);
  assertTrue(report.nonFileInputs.isEmpty());
  assertTrue(report.nonExistentInputs.isEmpty());
  assertTrue(report.inputsWithNoOwners.isEmpty());
  assertEquals(inputs.size(),report.owners.size());
  assertTrue(report.owners.containsKey(targetNode));
  assertEquals(targetNode.getInputs(),report.owners.get(targetNode));
}
