{
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem(){
    @Override public File getFileForRelativePath(    String pathRelativeToProjectRoot){
      return new ExistingFile(getProjectRoot(),pathRelativeToProjectRoot);
    }
  }
;
  String[] args=new String[]{"java/somefolder/badfolder/somefile.java","java/somefolder/perfect.java","com/test/subtest/random.java"};
  ImmutableSortedSet<Path> inputs=MorePaths.asPaths(ImmutableSortedSet.copyOf(args));
  BuildTarget target1=BuildTargetFactory.newInstance("//base/name1:name1");
  BuildTarget target2=BuildTargetFactory.newInstance("//base/name2:name2");
  BuildRule owner1Rule=new StubBuildRule(target1,inputs);
  BuildRule owner2Rule=new StubBuildRule(target2,inputs);
  MutableDirectedGraph<BuildRule> mutableGraph=new MutableDirectedGraph<BuildRule>();
  mutableGraph.addNode(owner1Rule);
  mutableGraph.addNode(owner2Rule);
  ActionGraph graph=new ActionGraph(mutableGraph);
  AuditOwnerOptions options=getOptions(args);
  AuditOwnerCommand command=createAuditOwnerCommand(filesystem);
  AuditOwnerCommand.OwnersReport report=command.generateOwnersReport(graph,options);
  assertTrue(report.nonFileInputs.isEmpty());
  assertTrue(report.nonExistentInputs.isEmpty());
  assertTrue(report.inputsWithNoOwners.isEmpty());
  assertTrue(report.owners.containsKey(owner1Rule));
  assertTrue(report.owners.containsKey(owner2Rule));
  assertEquals(owner1Rule.getInputs(),report.owners.get(owner1Rule));
  assertEquals(owner2Rule.getInputs(),report.owners.get(owner2Rule));
}
