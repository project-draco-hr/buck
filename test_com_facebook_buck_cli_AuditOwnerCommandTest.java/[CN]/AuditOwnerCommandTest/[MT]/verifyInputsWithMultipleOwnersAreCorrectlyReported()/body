{
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem(){
    @Override public File getFileForRelativePath(    String pathRelativeToProjectRoot){
      return new ExistingFile(getRootPath(),pathRelativeToProjectRoot);
    }
  }
;
  ImmutableSet<String> inputs=ImmutableSet.of("java/somefolder/badfolder/somefile.java","java/somefolder/perfect.java","com/test/subtest/random.java");
  ImmutableSortedSet<Path> inputPaths=MorePaths.asPaths(inputs);
  BuildTarget target1=BuildTarget.builder("//base/name1","name").build();
  BuildTarget target2=BuildTarget.builder("//base/name2","name").build();
  TargetNode<?> targetNode1=createTargetNode(target1,inputPaths);
  TargetNode<?> targetNode2=createTargetNode(target2,inputPaths);
  AuditOwnerCommand command=createAuditOwnerCommand(filesystem);
  AuditOwnerCommand.OwnersReport report=AuditOwnerCommand.OwnersReport.emptyReport();
  report=report.updatedWith(command.generateOwnersReport(targetNode1,inputs,false));
  report=report.updatedWith(command.generateOwnersReport(targetNode2,inputs,false));
  assertTrue(report.nonFileInputs.isEmpty());
  assertTrue(report.nonExistentInputs.isEmpty());
  assertTrue(report.inputsWithNoOwners.isEmpty());
  assertTrue(report.owners.containsKey(targetNode1));
  assertTrue(report.owners.containsKey(targetNode2));
  assertEquals(targetNode1.getInputs(),report.owners.get(targetNode1));
  assertEquals(targetNode2.getInputs(),report.owners.get(targetNode2));
}
