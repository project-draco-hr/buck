{
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem(){
    @Override public File getFileForRelativePath(    String pathRelativeToProjectRoot){
      return new ExistingFile(getRootPath(),pathRelativeToProjectRoot);
    }
  }
;
  ImmutableSet<String> inputs=ImmutableSet.of("java/somefolder/badfolder/somefile.java","java/somefolder/perfect.java","com/test/subtest/random.java");
  ImmutableSortedSet<Path> inputPaths=asPaths(inputs);
  BuildTarget target1=BuildTargetFactory.newInstance("//base/name1:name");
  BuildTarget target2=BuildTargetFactory.newInstance("//base/name2:name");
  TargetNode<?> targetNode1=createTargetNode(target1,inputPaths);
  TargetNode<?> targetNode2=createTargetNode(target2,inputPaths);
  CommandRunnerParams params=createAuditOwnerCommandRunnerParams(filesystem);
  OwnersReport report=OwnersReport.emptyReport();
  report=report.updatedWith(OwnersReport.generateOwnersReport(params,targetNode1,inputs));
  report=report.updatedWith(OwnersReport.generateOwnersReport(params,targetNode2,inputs));
  assertTrue(report.nonFileInputs.isEmpty());
  assertTrue(report.nonExistentInputs.isEmpty());
  assertTrue(report.inputsWithNoOwners.isEmpty());
  assertTrue(report.owners.containsKey(targetNode1));
  assertTrue(report.owners.containsKey(targetNode2));
  assertEquals(targetNode1.getInputs(),report.owners.get(targetNode1));
  assertEquals(targetNode2.getInputs(),report.owners.get(targetNode2));
}
