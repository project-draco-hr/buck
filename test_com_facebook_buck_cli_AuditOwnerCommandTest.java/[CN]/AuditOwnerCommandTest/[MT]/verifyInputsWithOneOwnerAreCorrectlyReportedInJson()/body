{
  FakeProjectFilesystem filesystem=new FakeProjectFilesystem(){
    @Override public File getFileForRelativePath(    String pathRelativeToProjectRoot){
      return new ExistingFile(getProjectRoot(),pathRelativeToProjectRoot);
    }
  }
;
  ImmutableSet<String> inputs=ImmutableSet.of("java/somefolder/badfolder/somefile.java","java/somefolder/perfect.java","com/test/subtest/random.java");
  ImmutableSortedSet<Path> inputPaths=MorePaths.asPaths(inputs);
  BuildTarget target=BuildTarget.builder("//base/name","name").build();
  TargetNode<?> targetNode=createTargetNode(target,inputPaths);
  AuditOwnerCommand command=createAuditOwnerCommand(filesystem);
  AuditOwnerCommand.OwnersReport report=command.generateOwnersReport(targetNode,inputs,false);
  command.printOwnersOnlyJsonReport(report);
  String expectedJson=Joiner.on("").join("{","\"com/test/subtest/random.java\":[\"//base/name:name\"],","\"java/somefolder/badfolder/somefile.java\":[\"//base/name:name\"],","\"java/somefolder/perfect.java\":[\"//base/name:name\"]","}");
  assertEquals(expectedJson,console.getTextWrittenToStdOut());
  assertEquals("",console.getTextWrittenToStdErr());
}
